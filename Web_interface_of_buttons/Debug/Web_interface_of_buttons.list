
Web_interface_of_buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000189c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000065a8  08018b54  08018b54  00028b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f0fc  0801f0fc  00030514  2**0
                  CONTENTS
  4 .ARM          00000008  0801f0fc  0801f0fc  0002f0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f104  0801f104  00030514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f104  0801f104  0002f104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f108  0801f108  0002f108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000514  20000000  0801f10c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030514  2**0
                  CONTENTS
 10 .bss          00011348  20000514  20000514  00030514  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001185c  2001185c  00030514  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030514  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e7ef  00000000  00000000  00030544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000776b  00000000  00000000  0006ed33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  000764a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001aa0  00000000  00000000  00078028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030b09  00000000  00000000  00079ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fe99  00000000  00000000  000aa5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c26  00000000  00000000  000da46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bf090  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c58  00000000  00000000  001bf0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000514 	.word	0x20000514
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018b3c 	.word	0x08018b3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000518 	.word	0x20000518
 80001cc:	08018b3c 	.word	0x08018b3c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <test_function>:
		GPIO_PIN_9, GPIOE, "PE10", "E", 10,
		GPIO_PIN_10, GPIOE, "PE11", "E", 11, GPIO_PIN_11, GPIOE, "PE12", "E",
		12, GPIO_PIN_12, GPIOE, "PE13", "E", 13, GPIO_PIN_13, GPIOE, "PE14",
		"E", 14, GPIO_PIN_14, GPIOE, "PE15", "E", 15, GPIO_PIN_15, GPIOE };

void test_function(void) {
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b093      	sub	sp, #76	; 0x4c
 800059c:	af02      	add	r7, sp, #8
	int flag_A, flag_B, flag_C, flag_D, flag_E = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitTypeDef GPIO_InitStruct = { 0 }; // Для инициализации порта/ов нам необходимо объявить структуру
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]
	for (int id = 0; id <= (num_lines - 1); id++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80005b6:	e14a      	b.n	800084e <test_function+0x2b6>
		if (T[id].onoff == 1) {
 80005b8:	49a9      	ldr	r1, [pc, #676]	; (8000860 <test_function+0x2c8>)
 80005ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	440b      	add	r3, r1
 80005c6:	334c      	adds	r3, #76	; 0x4c
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	f040 811b 	bne.w	8000806 <test_function+0x26e>
			printf("test_function %s %d %s %d %lu\r\n", tp[id].pins, id,
 80005d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005d2:	4613      	mov	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4aa2      	ldr	r2, [pc, #648]	; (8000864 <test_function+0x2cc>)
 80005dc:	1899      	adds	r1, r3, r2
					tp[id].port, tp[id].number);
 80005de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4a9e      	ldr	r2, [pc, #632]	; (8000864 <test_function+0x2cc>)
 80005ea:	4413      	add	r3, r2
 80005ec:	1d58      	adds	r0, r3, #5
			printf("test_function %s %d %s %d %lu\r\n", tp[id].pins, id,
 80005ee:	4c9d      	ldr	r4, [pc, #628]	; (8000864 <test_function+0x2cc>)
 80005f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4423      	add	r3, r4
 80005fc:	3308      	adds	r3, #8
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	4603      	mov	r3, r0
 8000604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000606:	4898      	ldr	r0, [pc, #608]	; (8000868 <test_function+0x2d0>)
 8000608:	f016 ff0a 	bl	8017420 <iprintf>
			if (strcmp(tp[id].port, "A") == 0 && flag_A != 1) { // Если пин на порту 'A'
 800060c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4a93      	ldr	r2, [pc, #588]	; (8000864 <test_function+0x2cc>)
 8000618:	4413      	add	r3, r2
 800061a:	3305      	adds	r3, #5
 800061c:	4993      	ldr	r1, [pc, #588]	; (800086c <test_function+0x2d4>)
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fdd6 	bl	80001d0 <strcmp>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d113      	bne.n	8000652 <test_function+0xba>
 800062a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800062c:	2b01      	cmp	r3, #1
 800062e:	d010      	beq.n	8000652 <test_function+0xba>
				flag_A = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
				__HAL_RCC_GPIOA_CLK_ENABLE(); // Включаем тактирование порта 'A'
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <test_function+0x2d8>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	4a8c      	ldr	r2, [pc, #560]	; (8000870 <test_function+0x2d8>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	6313      	str	r3, [r2, #48]	; 0x30
 8000644:	4b8a      	ldr	r3, [pc, #552]	; (8000870 <test_function+0x2d8>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	e086      	b.n	8000760 <test_function+0x1c8>

			} else if (strcmp(tp[id].port, "B") == 0) { // Если пин на порту 'B'
 8000652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000654:	4613      	mov	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4a81      	ldr	r2, [pc, #516]	; (8000864 <test_function+0x2cc>)
 800065e:	4413      	add	r3, r2
 8000660:	3305      	adds	r3, #5
 8000662:	4984      	ldr	r1, [pc, #528]	; (8000874 <test_function+0x2dc>)
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fdb3 	bl	80001d0 <strcmp>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d112      	bne.n	8000696 <test_function+0xfe>
				flag_B = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
				__HAL_RCC_GPIOB_CLK_ENABLE(); // Включаем тактирование порта 'B
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	4b7d      	ldr	r3, [pc, #500]	; (8000870 <test_function+0x2d8>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a7c      	ldr	r2, [pc, #496]	; (8000870 <test_function+0x2d8>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
 8000684:	4b7a      	ldr	r3, [pc, #488]	; (8000870 <test_function+0x2d8>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Включаем режим выход
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
 8000694:	e064      	b.n	8000760 <test_function+0x1c8>
			} else if (strcmp(tp[id].port, "C") == 0) { // Если пин на порту 'C'
 8000696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000698:	4613      	mov	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4a70      	ldr	r2, [pc, #448]	; (8000864 <test_function+0x2cc>)
 80006a2:	4413      	add	r3, r2
 80006a4:	3305      	adds	r3, #5
 80006a6:	4974      	ldr	r1, [pc, #464]	; (8000878 <test_function+0x2e0>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fd91 	bl	80001d0 <strcmp>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d112      	bne.n	80006da <test_function+0x142>
				flag_C = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				__HAL_RCC_GPIOC_CLK_ENABLE(); // Включаем тактирование порта 'C'
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b6c      	ldr	r3, [pc, #432]	; (8000870 <test_function+0x2d8>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a6b      	ldr	r2, [pc, #428]	; (8000870 <test_function+0x2d8>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
 80006c8:	4b69      	ldr	r3, [pc, #420]	; (8000870 <test_function+0x2d8>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Включаем режим выход
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	e042      	b.n	8000760 <test_function+0x1c8>
			} else if (strcmp(tp[id].port, "D") == 0) { // Если пин на порту 'D'
 80006da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4a5f      	ldr	r2, [pc, #380]	; (8000864 <test_function+0x2cc>)
 80006e6:	4413      	add	r3, r2
 80006e8:	3305      	adds	r3, #5
 80006ea:	4964      	ldr	r1, [pc, #400]	; (800087c <test_function+0x2e4>)
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd6f 	bl	80001d0 <strcmp>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d112      	bne.n	800071e <test_function+0x186>
				flag_D = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
				__HAL_RCC_GPIOD_CLK_ENABLE(); // Включаем тактирование порта 'D'
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b5b      	ldr	r3, [pc, #364]	; (8000870 <test_function+0x2d8>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	4a5a      	ldr	r2, [pc, #360]	; (8000870 <test_function+0x2d8>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6313      	str	r3, [r2, #48]	; 0x30
 800070c:	4b58      	ldr	r3, [pc, #352]	; (8000870 <test_function+0x2d8>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Включаем режим выход
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	e020      	b.n	8000760 <test_function+0x1c8>
			} else if (strcmp(tp[id].port, "E") == 0) { // Если пин на порту 'E'
 800071e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4a4e      	ldr	r2, [pc, #312]	; (8000864 <test_function+0x2cc>)
 800072a:	4413      	add	r3, r2
 800072c:	3305      	adds	r3, #5
 800072e:	4954      	ldr	r1, [pc, #336]	; (8000880 <test_function+0x2e8>)
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd4d 	bl	80001d0 <strcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d111      	bne.n	8000760 <test_function+0x1c8>
				flag_E = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
				__HAL_RCC_GPIOE_CLK_ENABLE(); // Включаем тактирование порта 'E'
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b4a      	ldr	r3, [pc, #296]	; (8000870 <test_function+0x2d8>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	4a49      	ldr	r2, [pc, #292]	; (8000870 <test_function+0x2d8>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6313      	str	r3, [r2, #48]	; 0x30
 8000750:	4b47      	ldr	r3, [pc, #284]	; (8000870 <test_function+0x2d8>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Включаем режим выход
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
			}
			// Для всех портов
			GPIO_InitStruct.Pin = tp[id].hal_pin; // Номер вывода (uint32_t)
 8000760:	4940      	ldr	r1, [pc, #256]	; (8000864 <test_function+0x2cc>)
 8000762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	330c      	adds	r3, #12
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	617b      	str	r3, [r7, #20]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Включаем режим выход GPIO_MODE_INPUT GPIO_MODE_ANALOG GPIO_MODE_OUTPUT_PP
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
			if (strcmp(T[id].pulluptype, "GPIO_NOPULL") == 0 ) { // "GPIO_PULLUP"  "GPIO_PULLDOWN"
 8000778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	4a37      	ldr	r2, [pc, #220]	; (8000860 <test_function+0x2c8>)
 8000784:	4413      	add	r3, r2
 8000786:	493f      	ldr	r1, [pc, #252]	; (8000884 <test_function+0x2ec>)
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd21 	bl	80001d0 <strcmp>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d102      	bne.n	800079a <test_function+0x202>
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	e023      	b.n	80007e2 <test_function+0x24a>
			}else if(strcmp(T[id].pulluptype, "GPIO_PULLUP") == 0 ){
 800079a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	4a2e      	ldr	r2, [pc, #184]	; (8000860 <test_function+0x2c8>)
 80007a6:	4413      	add	r3, r2
 80007a8:	4937      	ldr	r1, [pc, #220]	; (8000888 <test_function+0x2f0>)
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fd10 	bl	80001d0 <strcmp>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d102      	bne.n	80007bc <test_function+0x224>
				GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	e012      	b.n	80007e2 <test_function+0x24a>
			}else if(strcmp(T[id].pulluptype, "GPIO_PULLDOWN") == 0 ){
 80007bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	4a26      	ldr	r2, [pc, #152]	; (8000860 <test_function+0x2c8>)
 80007c8:	4413      	add	r3, r2
 80007ca:	4930      	ldr	r1, [pc, #192]	; (800088c <test_function+0x2f4>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fcff 	bl	80001d0 <strcmp>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <test_function+0x246>
				GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	e001      	b.n	80007e2 <test_function+0x24a>
			}else{
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
			}
//			GPIO_InitStruct.Pull = GPIO_PULLDOWN; // Пин кнопки притягиваем к земле 'Pull-Down'.
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Скорость переключение пина
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
			HAL_GPIO_Init(tp[id].gpio_name, &GPIO_InitStruct); // Функция для управления портом 'A'
 80007e6:	491f      	ldr	r1, [pc, #124]	; (8000864 <test_function+0x2cc>)
 80007e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	440b      	add	r3, r1
 80007f4:	3310      	adds	r3, #16
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4610      	mov	r0, r2
 8000802:	f003 fbe7 	bl	8003fd4 <HAL_GPIO_Init>

		} else {

			//printf("test_function-ERROR r\n");
		}
		if (T[id].onoff == 0){
 8000806:	4916      	ldr	r1, [pc, #88]	; (8000860 <test_function+0x2c8>)
 8000808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	440b      	add	r3, r1
 8000814:	334c      	adds	r3, #76	; 0x4c
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d115      	bne.n	8000848 <test_function+0x2b0>
			HAL_GPIO_DeInit(tp[id].gpio_name, tp[id].hal_pin); // сброс конфигурации не активных пинов
 800081c:	4911      	ldr	r1, [pc, #68]	; (8000864 <test_function+0x2cc>)
 800081e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	3310      	adds	r3, #16
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <test_function+0x2cc>)
 8000832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	440b      	add	r3, r1
 800083e:	330c      	adds	r3, #12
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4619      	mov	r1, r3
 8000844:	f003 fd62 	bl	800430c <HAL_GPIO_DeInit>
	for (int id = 0; id <= (num_lines - 1); id++) {
 8000848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800084a:	3301      	adds	r3, #1
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
 800084e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000850:	2b39      	cmp	r3, #57	; 0x39
 8000852:	f77f aeb1 	ble.w	80005b8 <test_function+0x20>
		}
	}
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	3744      	adds	r7, #68	; 0x44
 800085c:	46bd      	mov	sp, r7
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	20001b54 	.word	0x20001b54
 8000864:	20000010 	.word	0x20000010
 8000868:	08018b6c 	.word	0x08018b6c
 800086c:	08018b8c 	.word	0x08018b8c
 8000870:	40023800 	.word	0x40023800
 8000874:	08018b90 	.word	0x08018b90
 8000878:	08018b94 	.word	0x08018b94
 800087c:	08018b98 	.word	0x08018b98
 8000880:	08018b9c 	.word	0x08018b9c
 8000884:	08018ba0 	.word	0x08018ba0
 8000888:	08018bac 	.word	0x08018bac
 800088c:	08018bb8 	.word	0x08018bb8

08000890 <ssi_handler>:

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	b091      	sub	sp, #68	; 0x44
 8000894:	af08      	add	r7, sp, #32
 8000896:	6178      	str	r0, [r7, #20]
 8000898:	6139      	str	r1, [r7, #16]
 800089a:	60fa      	str	r2, [r7, #12]
 800089c:	817b      	strh	r3, [r7, #10]
	//char *info[30] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
	char *info;
	switch (iIndex) {
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	f000 81c8 	beq.w	8000c36 <ssi_handler+0x3a6>
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	f300 81c6 	bgt.w	8000c3a <ssi_handler+0x3aa>
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d004      	beq.n	80008be <ssi_handler+0x2e>
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	f000 81ab 	beq.w	8000c12 <ssi_handler+0x382>
//		memset(json, '\0', sizeof(json));
//		memset(arrline, '\0', sizeof(arrline));
//		return strlen(pcInsert);
		break;
	default:
		break;
 80008bc:	e1bd      	b.n	8000c3a <ssi_handler+0x3aa>
		if (variable == num_lines) {
 80008be:	4b90      	ldr	r3, [pc, #576]	; (8000b00 <ssi_handler+0x270>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b3a      	cmp	r3, #58	; 0x3a
 80008c4:	d103      	bne.n	80008ce <ssi_handler+0x3e>
			variable = 0;
 80008c6:	4b8e      	ldr	r3, [pc, #568]	; (8000b00 <ssi_handler+0x270>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
			break;
 80008cc:	e1b6      	b.n	8000c3c <ssi_handler+0x3ac>
			if (isalpha(T[variable].infofield[0])) {
 80008ce:	4b8c      	ldr	r3, [pc, #560]	; (8000b00 <ssi_handler+0x270>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	498c      	ldr	r1, [pc, #560]	; (8000b04 <ssi_handler+0x274>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	440b      	add	r3, r1
 80008de:	332c      	adds	r3, #44	; 0x2c
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a88      	ldr	r2, [pc, #544]	; (8000b08 <ssi_handler+0x278>)
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00b      	beq.n	800090a <ssi_handler+0x7a>
				info = T[variable].infofield;
 80008f2:	4b83      	ldr	r3, [pc, #524]	; (8000b00 <ssi_handler+0x270>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	3328      	adds	r3, #40	; 0x28
 8000900:	4a80      	ldr	r2, [pc, #512]	; (8000b04 <ssi_handler+0x274>)
 8000902:	4413      	add	r3, r2
 8000904:	3304      	adds	r3, #4
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	e016      	b.n	8000938 <ssi_handler+0xa8>
			} else if (isdigit(T[variable].infofield[0])) {
 800090a:	4b7d      	ldr	r3, [pc, #500]	; (8000b00 <ssi_handler+0x270>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	497d      	ldr	r1, [pc, #500]	; (8000b04 <ssi_handler+0x274>)
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	440b      	add	r3, r1
 800091a:	332c      	adds	r3, #44	; 0x2c
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	3301      	adds	r3, #1
 8000920:	4a79      	ldr	r2, [pc, #484]	; (8000b08 <ssi_handler+0x278>)
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <ssi_handler+0xa4>
				info = NULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	e001      	b.n	8000938 <ssi_handler+0xa8>
				info = NULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
			if (variable == 0) {
 8000938:	4b71      	ldr	r3, [pc, #452]	; (8000b00 <ssi_handler+0x270>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d16d      	bne.n	8000a1c <ssi_handler+0x18c>
						tp[variable].pins, T[variable].pulluptype,
 8000940:	4b6f      	ldr	r3, [pc, #444]	; (8000b00 <ssi_handler+0x270>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4a6f      	ldr	r2, [pc, #444]	; (8000b0c <ssi_handler+0x27c>)
 800094e:	eb03 0c02 	add.w	ip, r3, r2
 8000952:	4b6b      	ldr	r3, [pc, #428]	; (8000b00 <ssi_handler+0x270>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	011b      	lsls	r3, r3, #4
 800095e:	4a69      	ldr	r2, [pc, #420]	; (8000b04 <ssi_handler+0x274>)
 8000960:	eb03 0e02 	add.w	lr, r3, r2
				sprintf(pcInsert,
 8000964:	4b66      	ldr	r3, [pc, #408]	; (8000b00 <ssi_handler+0x270>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4966      	ldr	r1, [pc, #408]	; (8000b04 <ssi_handler+0x274>)
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	440b      	add	r3, r1
 8000974:	3314      	adds	r3, #20
 8000976:	6819      	ldr	r1, [r3, #0]
 8000978:	4b61      	ldr	r3, [pc, #388]	; (8000b00 <ssi_handler+0x270>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4861      	ldr	r0, [pc, #388]	; (8000b04 <ssi_handler+0x274>)
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	011b      	lsls	r3, r3, #4
 8000986:	4403      	add	r3, r0
 8000988:	3318      	adds	r3, #24
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <ssi_handler+0x270>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4c5c      	ldr	r4, [pc, #368]	; (8000b04 <ssi_handler+0x274>)
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	4423      	add	r3, r4
 800099c:	331c      	adds	r3, #28
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	4b57      	ldr	r3, [pc, #348]	; (8000b00 <ssi_handler+0x270>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4d57      	ldr	r5, [pc, #348]	; (8000b04 <ssi_handler+0x274>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	442b      	add	r3, r5
 80009b0:	3320      	adds	r3, #32
 80009b2:	681d      	ldr	r5, [r3, #0]
 80009b4:	4b52      	ldr	r3, [pc, #328]	; (8000b00 <ssi_handler+0x270>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4e52      	ldr	r6, [pc, #328]	; (8000b04 <ssi_handler+0x274>)
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	011b      	lsls	r3, r3, #4
 80009c2:	4433      	add	r3, r6
 80009c4:	3324      	adds	r3, #36	; 0x24
 80009c6:	681e      	ldr	r6, [r3, #0]
 80009c8:	4b4d      	ldr	r3, [pc, #308]	; (8000b00 <ssi_handler+0x270>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <ssi_handler+0x274>)
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	4413      	add	r3, r2
 80009dc:	3328      	adds	r3, #40	; 0x28
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <ssi_handler+0x270>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <ssi_handler+0x274>)
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4613      	mov	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	4413      	add	r3, r2
 80009f6:	334c      	adds	r3, #76	; 0x4c
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	9307      	str	r3, [sp, #28]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	9306      	str	r3, [sp, #24]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	9305      	str	r3, [sp, #20]
 8000a04:	9604      	str	r6, [sp, #16]
 8000a06:	9503      	str	r5, [sp, #12]
 8000a08:	9402      	str	r4, [sp, #8]
 8000a0a:	9001      	str	r0, [sp, #4]
 8000a0c:	9100      	str	r1, [sp, #0]
 8000a0e:	4673      	mov	r3, lr
 8000a10:	4662      	mov	r2, ip
 8000a12:	493f      	ldr	r1, [pc, #252]	; (8000b10 <ssi_handler+0x280>)
 8000a14:	6938      	ldr	r0, [r7, #16]
 8000a16:	f016 fe05 	bl	8017624 <siprintf>
 8000a1a:	e0ea      	b.n	8000bf2 <ssi_handler+0x362>
			} else if (variable == num_lines - 1) {
 8000a1c:	4b38      	ldr	r3, [pc, #224]	; (8000b00 <ssi_handler+0x270>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b39      	cmp	r3, #57	; 0x39
 8000a22:	d179      	bne.n	8000b18 <ssi_handler+0x288>
						tp[variable].pins, T[variable].pulluptype,
 8000a24:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <ssi_handler+0x270>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4a36      	ldr	r2, [pc, #216]	; (8000b0c <ssi_handler+0x27c>)
 8000a32:	eb03 0c02 	add.w	ip, r3, r2
 8000a36:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <ssi_handler+0x270>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	4a30      	ldr	r2, [pc, #192]	; (8000b04 <ssi_handler+0x274>)
 8000a44:	eb03 0e02 	add.w	lr, r3, r2
				sprintf(pcInsert,
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <ssi_handler+0x270>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	492d      	ldr	r1, [pc, #180]	; (8000b04 <ssi_handler+0x274>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	440b      	add	r3, r1
 8000a58:	3314      	adds	r3, #20
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <ssi_handler+0x270>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4828      	ldr	r0, [pc, #160]	; (8000b04 <ssi_handler+0x274>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	4403      	add	r3, r0
 8000a6c:	3318      	adds	r3, #24
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <ssi_handler+0x270>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4c23      	ldr	r4, [pc, #140]	; (8000b04 <ssi_handler+0x274>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	4423      	add	r3, r4
 8000a80:	331c      	adds	r3, #28
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <ssi_handler+0x270>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4d1e      	ldr	r5, [pc, #120]	; (8000b04 <ssi_handler+0x274>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	442b      	add	r3, r5
 8000a94:	3320      	adds	r3, #32
 8000a96:	681d      	ldr	r5, [r3, #0]
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <ssi_handler+0x270>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4e19      	ldr	r6, [pc, #100]	; (8000b04 <ssi_handler+0x274>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	011b      	lsls	r3, r3, #4
 8000aa6:	4433      	add	r3, r6
 8000aa8:	3324      	adds	r3, #36	; 0x24
 8000aaa:	681e      	ldr	r6, [r3, #0]
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <ssi_handler+0x270>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <ssi_handler+0x274>)
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	3328      	adds	r3, #40	; 0x28
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <ssi_handler+0x270>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <ssi_handler+0x274>)
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	334c      	adds	r3, #76	; 0x4c
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	9307      	str	r3, [sp, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	9306      	str	r3, [sp, #24]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	9305      	str	r3, [sp, #20]
 8000ae8:	9604      	str	r6, [sp, #16]
 8000aea:	9503      	str	r5, [sp, #12]
 8000aec:	9402      	str	r4, [sp, #8]
 8000aee:	9001      	str	r0, [sp, #4]
 8000af0:	9100      	str	r1, [sp, #0]
 8000af2:	4673      	mov	r3, lr
 8000af4:	4662      	mov	r2, ip
 8000af6:	4907      	ldr	r1, [pc, #28]	; (8000b14 <ssi_handler+0x284>)
 8000af8:	6938      	ldr	r0, [r7, #16]
 8000afa:	f016 fd93 	bl	8017624 <siprintf>
 8000afe:	e078      	b.n	8000bf2 <ssi_handler+0x362>
 8000b00:	20000534 	.word	0x20000534
 8000b04:	20001b54 	.word	0x20001b54
 8000b08:	0801eeae 	.word	0x0801eeae
 8000b0c:	20000010 	.word	0x20000010
 8000b10:	08018bc8 	.word	0x08018bc8
 8000b14:	08018c78 	.word	0x08018c78
						tp[variable].pins, T[variable].pulluptype,
 8000b18:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <ssi_handler+0x3b8>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4a49      	ldr	r2, [pc, #292]	; (8000c4c <ssi_handler+0x3bc>)
 8000b26:	eb03 0c02 	add.w	ip, r3, r2
 8000b2a:	4b47      	ldr	r3, [pc, #284]	; (8000c48 <ssi_handler+0x3b8>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	4a46      	ldr	r2, [pc, #280]	; (8000c50 <ssi_handler+0x3c0>)
 8000b38:	eb03 0e02 	add.w	lr, r3, r2
				sprintf(pcInsert,
 8000b3c:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <ssi_handler+0x3b8>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4943      	ldr	r1, [pc, #268]	; (8000c50 <ssi_handler+0x3c0>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	440b      	add	r3, r1
 8000b4c:	3314      	adds	r3, #20
 8000b4e:	6819      	ldr	r1, [r3, #0]
 8000b50:	4b3d      	ldr	r3, [pc, #244]	; (8000c48 <ssi_handler+0x3b8>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	483e      	ldr	r0, [pc, #248]	; (8000c50 <ssi_handler+0x3c0>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	011b      	lsls	r3, r3, #4
 8000b5e:	4403      	add	r3, r0
 8000b60:	3318      	adds	r3, #24
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	4b38      	ldr	r3, [pc, #224]	; (8000c48 <ssi_handler+0x3b8>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4c39      	ldr	r4, [pc, #228]	; (8000c50 <ssi_handler+0x3c0>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	4423      	add	r3, r4
 8000b74:	331c      	adds	r3, #28
 8000b76:	681c      	ldr	r4, [r3, #0]
 8000b78:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <ssi_handler+0x3b8>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4d34      	ldr	r5, [pc, #208]	; (8000c50 <ssi_handler+0x3c0>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	442b      	add	r3, r5
 8000b88:	3320      	adds	r3, #32
 8000b8a:	681d      	ldr	r5, [r3, #0]
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <ssi_handler+0x3b8>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4e2f      	ldr	r6, [pc, #188]	; (8000c50 <ssi_handler+0x3c0>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	4433      	add	r3, r6
 8000b9c:	3324      	adds	r3, #36	; 0x24
 8000b9e:	681e      	ldr	r6, [r3, #0]
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <ssi_handler+0x3b8>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <ssi_handler+0x3c0>)
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	3328      	adds	r3, #40	; 0x28
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <ssi_handler+0x3b8>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <ssi_handler+0x3c0>)
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	4413      	add	r3, r2
 8000bce:	334c      	adds	r3, #76	; 0x4c
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	9307      	str	r3, [sp, #28]
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	9306      	str	r3, [sp, #24]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	9305      	str	r3, [sp, #20]
 8000bdc:	9604      	str	r6, [sp, #16]
 8000bde:	9503      	str	r5, [sp, #12]
 8000be0:	9402      	str	r4, [sp, #8]
 8000be2:	9001      	str	r0, [sp, #4]
 8000be4:	9100      	str	r1, [sp, #0]
 8000be6:	4673      	mov	r3, lr
 8000be8:	4662      	mov	r2, ip
 8000bea:	491a      	ldr	r1, [pc, #104]	; (8000c54 <ssi_handler+0x3c4>)
 8000bec:	6938      	ldr	r0, [r7, #16]
 8000bee:	f016 fd19 	bl	8017624 <siprintf>
			*next_tag_part = variable;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <ssi_handler+0x3b8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bfa:	801a      	strh	r2, [r3, #0]
			variable++;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <ssi_handler+0x3b8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <ssi_handler+0x3b8>)
 8000c04:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 8000c06:	6938      	ldr	r0, [r7, #16]
 8000c08:	f7ff faec 	bl	80001e4 <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	e015      	b.n	8000c3e <ssi_handler+0x3ae>
		indx1 += 1;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <ssi_handler+0x3c8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <ssi_handler+0x3c8>)
 8000c1a:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx1);
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <ssi_handler+0x3c8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	490e      	ldr	r1, [pc, #56]	; (8000c5c <ssi_handler+0x3cc>)
 8000c24:	6938      	ldr	r0, [r7, #16]
 8000c26:	f016 fcfd 	bl	8017624 <siprintf>
		return strlen(pcInsert);
 8000c2a:	6938      	ldr	r0, [r7, #16]
 8000c2c:	f7ff fada 	bl	80001e4 <strlen>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	e003      	b.n	8000c3e <ssi_handler+0x3ae>
		break;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <ssi_handler+0x3ac>
		break;
 8000c3a:	bf00      	nop
	}

	return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000534 	.word	0x20000534
 8000c4c:	20000010 	.word	0x20000010
 8000c50:	20001b54 	.word	0x20001b54
 8000c54:	08018d28 	.word	0x08018d28
 8000c58:	20000530 	.word	0x20000530
 8000c5c:	08018dd8 	.word	0x08018dd8

08000c60 <CGIForm_Handler>:
char name[30];

tCGI CGI_TAB[2]; // 3. For form создадим массив для form CGI

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
	printf("OK GET \r\n");
 8000c6e:	4828      	ldr	r0, [pc, #160]	; (8000d10 <CGIForm_Handler+0xb0>)
 8000c70:	f016 fc5c 	bl	801752c <puts>
	if (iIndex == 0) {
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d145      	bne.n	8000d06 <CGIForm_Handler+0xa6>
		for (int i = 0; i < iNumParams; i++) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e03e      	b.n	8000cfe <CGIForm_Handler+0x9e>
			if (strcmp(pcParam[i], "fname") == 0) // if the fname string is found
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4922      	ldr	r1, [pc, #136]	; (8000d14 <CGIForm_Handler+0xb4>)
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fa9f 	bl	80001d0 <strcmp>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10e      	bne.n	8000cb6 <CGIForm_Handler+0x56>
					{
				memset(name, '\0', 30); // Очищаем массив перед записью новых данных.
 8000c98:	221e      	movs	r2, #30
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <CGIForm_Handler+0xb8>)
 8000c9e:	f016 fbb7 	bl	8017410 <memset>
				strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	4413      	add	r3, r2
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	481a      	ldr	r0, [pc, #104]	; (8000d18 <CGIForm_Handler+0xb8>)
 8000cb0:	f016 fcf4 	bl	801769c <strcpy>
 8000cb4:	e020      	b.n	8000cf8 <CGIForm_Handler+0x98>
			}

			else if (strcmp(pcParam[i], "lname") == 0) // if the lname string is found
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4916      	ldr	r1, [pc, #88]	; (8000d1c <CGIForm_Handler+0xbc>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fa84 	bl	80001d0 <strcmp>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d114      	bne.n	8000cf8 <CGIForm_Handler+0x98>
					{
				strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
 8000cce:	4812      	ldr	r0, [pc, #72]	; (8000d18 <CGIForm_Handler+0xb8>)
 8000cd0:	f7ff fa88 	bl	80001e4 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <CGIForm_Handler+0xb8>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	4910      	ldr	r1, [pc, #64]	; (8000d20 <CGIForm_Handler+0xc0>)
 8000cde:	461a      	mov	r2, r3
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	8013      	strh	r3, [r2, #0]
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <CGIForm_Handler+0xb8>)
 8000cf4:	f016 fcb6 	bl	8017664 <strcat>
		for (int i = 0; i < iNumParams; i++) {
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	dbbc      	blt.n	8000c80 <CGIForm_Handler+0x20>
			}
		}
	}

	return "/1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <CGIForm_Handler+0xc4>)
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	08018de8 	.word	0x08018de8
 8000d14:	08018df4 	.word	0x08018df4
 8000d18:	20005e4c 	.word	0x20005e4c
 8000d1c:	08018dfc 	.word	0x08018dfc
 8000d20:	08018e04 	.word	0x08018e04
 8000d24:	08018e08 	.word	0x08018e08

08000d28 <httpd_post_begin>:
static void *valid_connection;
int http_post_content_len;

err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	807b      	strh	r3, [r7, #2]
//LWIP_UNUSED_ARG(connection);
//LWIP_UNUSED_ARG(http_request);
//LWIP_UNUSED_ARG(http_request_len);
//LWIP_UNUSED_ARG(content_len);
//LWIP_UNUSED_ARG(post_auto_wnd);
	http_post_content_len = content_len;
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <httpd_post_begin+0x48>)
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	6013      	str	r3, [r2, #0]

//printf("httpd_post_begin: Post Content: %s\n",  http_request);
//printf("%d \r\n",  http_post_content_len);

	if (current_connection != connection) {
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <httpd_post_begin+0x4c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d00d      	beq.n	8000d62 <httpd_post_begin+0x3a>

		current_connection = connection;
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <httpd_post_begin+0x4c>)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <httpd_post_begin+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]

		/* default page is "login failed" */
		snprintf(response_uri, response_uri_len, "/cgi_leds.html");
 8000d52:	8c3b      	ldrh	r3, [r7, #32]
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <httpd_post_begin+0x54>)
 8000d56:	4619      	mov	r1, r3
 8000d58:	69f8      	ldr	r0, [r7, #28]
 8000d5a:	f016 fc2f 	bl	80175bc <sniprintf>
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e001      	b.n	8000d66 <httpd_post_begin+0x3e>
	}

	return ERR_VAL;
 8000d62:	f06f 0305 	mvn.w	r3, #5
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20001b50 	.word	0x20001b50
 8000d74:	20000538 	.word	0x20000538
 8000d78:	2000053c 	.word	0x2000053c
 8000d7c:	08018e14 	.word	0x08018e14

08000d80 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]

	//printf("OK POST 2 \r\n");
	char *data;

	if (current_connection == connection && p != NULL) {
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <httpd_post_receive_data+0x58>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d115      	bne.n	8000dc0 <httpd_post_receive_data+0x40>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d012      	beq.n	8000dc0 <httpd_post_receive_data+0x40>

		data = p->payload;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	60fb      	str	r3, [r7, #12]
		//printf("DATA %s \r\n", data);
		strcat(bufervar, p->payload);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <httpd_post_receive_data+0x5c>)
 8000da8:	f016 fc5c 	bl	8017664 <strcat>
		pbuf_free(p);
 8000dac:	6838      	ldr	r0, [r7, #0]
 8000dae:	f00d fa29 	bl	800e204 <pbuf_free>
		memset(data, '\0', sizeof(*data));
 8000db2:	2201      	movs	r2, #1
 8000db4:	2100      	movs	r1, #0
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f016 fb2a 	bl	8017410 <memset>
		return ERR_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e007      	b.n	8000dd0 <httpd_post_receive_data+0x50>
	}
	if (p != NULL) {
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <httpd_post_receive_data+0x4c>
		//printf("END \r\n");
		pbuf_free(p);
 8000dc6:	6838      	ldr	r0, [r7, #0]
 8000dc8:	f00d fa1c 	bl	800e204 <pbuf_free>
	}
	return ERR_VAL;
 8000dcc:	f06f 0305 	mvn.w	r3, #5
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000538 	.word	0x20000538
 8000ddc:	20002d74 	.word	0x20002d74

08000de0 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b0aa      	sub	sp, #168	; 0xa8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	4613      	mov	r3, r2
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	466b      	mov	r3, sp
 8000df0:	461d      	mov	r5, r3
	char nametoken[50];
	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int id;
	char urlline[http_post_content_len];
 8000df8:	4b99      	ldr	r3, [pc, #612]	; (8001060 <httpd_post_finished+0x280>)
 8000dfa:	681c      	ldr	r4, [r3, #0]
 8000dfc:	1e63      	subs	r3, r4, #1
 8000dfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000e02:	4623      	mov	r3, r4
 8000e04:	4618      	mov	r0, r3
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	f04f 0200 	mov.w	r2, #0
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	00cb      	lsls	r3, r1, #3
 8000e14:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e18:	00c2      	lsls	r2, r0, #3
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f04f 0100 	mov.w	r1, #0
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	f04f 0300 	mov.w	r3, #0
 8000e2a:	00cb      	lsls	r3, r1, #3
 8000e2c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e30:	00c2      	lsls	r2, r0, #3
 8000e32:	4623      	mov	r3, r4
 8000e34:	3307      	adds	r3, #7
 8000e36:	08db      	lsrs	r3, r3, #3
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e3e:	466b      	mov	r3, sp
 8000e40:	3300      	adds	r3, #0
 8000e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	strncpy(urlline, bufervar, http_post_content_len);
 8000e46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e4a:	4a85      	ldr	r2, [pc, #532]	; (8001060 <httpd_post_finished+0x280>)
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	4985      	ldr	r1, [pc, #532]	; (8001064 <httpd_post_finished+0x284>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f016 fc3d 	bl	80176d0 <strncpy>
	//printf("%s \r\n", urlline);
	//printf("COUNT %d \r\n", http_post_content_len);

	char *rest = urlline;
 8000e56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e5a:	61fb      	str	r3, [r7, #28]

	while ((token = strtok_r(rest, "&", &rest))) {
 8000e5c:	e179      	b.n	8001152 <httpd_post_finished+0x372>
		//printf("TOKEN - %s\n", token);
		char *rest1 = token;
 8000e5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e62:	61bb      	str	r3, [r7, #24]
//		char *name0 = token;
		strcat(name0, token);
 8000e64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f016 fbf9 	bl	8017664 <strcat>
		y = 0;
 8000e72:	4b7d      	ldr	r3, [pc, #500]	; (8001068 <httpd_post_finished+0x288>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000e78:	e128      	b.n	80010cc <httpd_post_finished+0x2ec>
			z = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			if (y == 0) {
 8000e80:	4b79      	ldr	r3, [pc, #484]	; (8001068 <httpd_post_finished+0x288>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d127      	bne.n	8000ed8 <httpd_post_finished+0xf8>
				//printf("---NAME %s\n", token1);
				//name0 = token1; // имя переменной
				// получение id
				char *rest2 = token1;
 8000e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e8c:	617b      	str	r3, [r7, #20]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000e8e:	e016      	b.n	8000ebe <httpd_post_finished+0xde>
					if (z == 0) {
 8000e90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <httpd_post_finished+0xc0>
						name1 = token2;
 8000e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					}
					if (z == 1) {
 8000ea0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d105      	bne.n	8000eb4 <httpd_post_finished+0xd4>
						id = atoi(token2);
 8000ea8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000eac:	f016 fa52 	bl	8017354 <atoi>
 8000eb0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
						//printf("ID %d\n", id);
					}
					z++;
 8000eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f107 0214 	add.w	r2, r7, #20
 8000ec4:	4969      	ldr	r1, [pc, #420]	; (800106c <httpd_post_finished+0x28c>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f016 fc54 	bl	8017774 <strtok_r>
 8000ecc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8000ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1db      	bne.n	8000e90 <httpd_post_finished+0xb0>
				}
			}
			if (y == 1) {
 8000ed8:	4b63      	ldr	r3, [pc, #396]	; (8001068 <httpd_post_finished+0x288>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	f040 80f0 	bne.w	80010c2 <httpd_post_finished+0x2e2>
				//printf("VAL-222 \n");
				//printf("VAL %s\n", token1);
				// записывае в структуру
				//printf("---NAME-1 %s\n", name1);
				/************************************************/
				if (strcmp(name1, "pulluptype") == 0) {
 8000ee2:	4963      	ldr	r1, [pc, #396]	; (8001070 <httpd_post_finished+0x290>)
 8000ee4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000ee8:	f7ff f972 	bl	80001d0 <strcmp>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10d      	bne.n	8000f0e <httpd_post_finished+0x12e>
					strcpy(T[id].pulluptype, token1);
 8000ef2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	4a5d      	ldr	r2, [pc, #372]	; (8001074 <httpd_post_finished+0x294>)
 8000f00:	4413      	add	r3, r2
 8000f02:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000f06:	4618      	mov	r0, r3
 8000f08:	f016 fbc8 	bl	801769c <strcpy>
 8000f0c:	e0d9      	b.n	80010c2 <httpd_post_finished+0x2e2>
				} else if (strcmp(name1, "bounceinterval") == 0) {
 8000f0e:	495a      	ldr	r1, [pc, #360]	; (8001078 <httpd_post_finished+0x298>)
 8000f10:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000f14:	f7ff f95c 	bl	80001d0 <strcmp>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10f      	bne.n	8000f3e <httpd_post_finished+0x15e>
					T[id].bounceinterval = atoi(token1);
 8000f1e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f22:	f016 fa17 	bl	8017354 <atoi>
 8000f26:	4601      	mov	r1, r0
 8000f28:	4852      	ldr	r0, [pc, #328]	; (8001074 <httpd_post_finished+0x294>)
 8000f2a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	4403      	add	r3, r0
 8000f38:	3314      	adds	r3, #20
 8000f3a:	6019      	str	r1, [r3, #0]
 8000f3c:	e0c1      	b.n	80010c2 <httpd_post_finished+0x2e2>
				} else if (strcmp(name1, "holdinterval") == 0) {
 8000f3e:	494f      	ldr	r1, [pc, #316]	; (800107c <httpd_post_finished+0x29c>)
 8000f40:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000f44:	f7ff f944 	bl	80001d0 <strcmp>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10f      	bne.n	8000f6e <httpd_post_finished+0x18e>
					T[id].holdinterval = atoi(token1);
 8000f4e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f52:	f016 f9ff 	bl	8017354 <atoi>
 8000f56:	4601      	mov	r1, r0
 8000f58:	4846      	ldr	r0, [pc, #280]	; (8001074 <httpd_post_finished+0x294>)
 8000f5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	4403      	add	r3, r0
 8000f68:	3318      	adds	r3, #24
 8000f6a:	6019      	str	r1, [r3, #0]
 8000f6c:	e0a9      	b.n	80010c2 <httpd_post_finished+0x2e2>
				} else if (strcmp(name1, "repeat") == 0) {
 8000f6e:	4944      	ldr	r1, [pc, #272]	; (8001080 <httpd_post_finished+0x2a0>)
 8000f70:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000f74:	f7ff f92c 	bl	80001d0 <strcmp>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <httpd_post_finished+0x1be>
					T[id].repeat = atoi(token1);
 8000f7e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f82:	f016 f9e7 	bl	8017354 <atoi>
 8000f86:	4601      	mov	r1, r0
 8000f88:	483a      	ldr	r0, [pc, #232]	; (8001074 <httpd_post_finished+0x294>)
 8000f8a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	4403      	add	r3, r0
 8000f98:	331c      	adds	r3, #28
 8000f9a:	6019      	str	r1, [r3, #0]
 8000f9c:	e091      	b.n	80010c2 <httpd_post_finished+0x2e2>
				} else if (strcmp(name1, "repeatinterval") == 0) {
 8000f9e:	4939      	ldr	r1, [pc, #228]	; (8001084 <httpd_post_finished+0x2a4>)
 8000fa0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000fa4:	f7ff f914 	bl	80001d0 <strcmp>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10f      	bne.n	8000fce <httpd_post_finished+0x1ee>
					T[id].repeatinterval = atoi(token1);
 8000fae:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000fb2:	f016 f9cf 	bl	8017354 <atoi>
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	482e      	ldr	r0, [pc, #184]	; (8001074 <httpd_post_finished+0x294>)
 8000fba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	4403      	add	r3, r0
 8000fc8:	3320      	adds	r3, #32
 8000fca:	6019      	str	r1, [r3, #0]
 8000fcc:	e079      	b.n	80010c2 <httpd_post_finished+0x2e2>
				} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8000fce:	492e      	ldr	r1, [pc, #184]	; (8001088 <httpd_post_finished+0x2a8>)
 8000fd0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000fd4:	f7ff f8fc 	bl	80001d0 <strcmp>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10f      	bne.n	8000ffe <httpd_post_finished+0x21e>
					T[id].doubleclickinterval = atoi(token1);
 8000fde:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000fe2:	f016 f9b7 	bl	8017354 <atoi>
 8000fe6:	4601      	mov	r1, r0
 8000fe8:	4822      	ldr	r0, [pc, #136]	; (8001074 <httpd_post_finished+0x294>)
 8000fea:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	4403      	add	r3, r0
 8000ff8:	3324      	adds	r3, #36	; 0x24
 8000ffa:	6019      	str	r1, [r3, #0]
 8000ffc:	e061      	b.n	80010c2 <httpd_post_finished+0x2e2>
				} else if (strcmp(name1, "preventclick") == 0) {
 8000ffe:	4923      	ldr	r1, [pc, #140]	; (800108c <httpd_post_finished+0x2ac>)
 8001000:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001004:	f7ff f8e4 	bl	80001d0 <strcmp>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10f      	bne.n	800102e <httpd_post_finished+0x24e>
					T[id].preventclick = atoi(token1);
 800100e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001012:	f016 f99f 	bl	8017354 <atoi>
 8001016:	4601      	mov	r1, r0
 8001018:	4816      	ldr	r0, [pc, #88]	; (8001074 <httpd_post_finished+0x294>)
 800101a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4403      	add	r3, r0
 8001028:	3328      	adds	r3, #40	; 0x28
 800102a:	6019      	str	r1, [r3, #0]
 800102c:	e049      	b.n	80010c2 <httpd_post_finished+0x2e2>
				} else if (strcmp(name1, "infofield") == 0) {
 800102e:	4918      	ldr	r1, [pc, #96]	; (8001090 <httpd_post_finished+0x2b0>)
 8001030:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001034:	f7ff f8cc 	bl	80001d0 <strcmp>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d12a      	bne.n	8001094 <httpd_post_finished+0x2b4>
					strcpy(T[id].infofield, token1);
 800103e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	3328      	adds	r3, #40	; 0x28
 800104c:	4a09      	ldr	r2, [pc, #36]	; (8001074 <httpd_post_finished+0x294>)
 800104e:	4413      	add	r3, r2
 8001050:	3304      	adds	r3, #4
 8001052:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001056:	4618      	mov	r0, r3
 8001058:	f016 fb20 	bl	801769c <strcpy>
 800105c:	e031      	b.n	80010c2 <httpd_post_finished+0x2e2>
 800105e:	bf00      	nop
 8001060:	20001b50 	.word	0x20001b50
 8001064:	20002d74 	.word	0x20002d74
 8001068:	20005e48 	.word	0x20005e48
 800106c:	08018e24 	.word	0x08018e24
 8001070:	08018e28 	.word	0x08018e28
 8001074:	20001b54 	.word	0x20001b54
 8001078:	08018e34 	.word	0x08018e34
 800107c:	08018e44 	.word	0x08018e44
 8001080:	08018e54 	.word	0x08018e54
 8001084:	08018e5c 	.word	0x08018e5c
 8001088:	08018e6c 	.word	0x08018e6c
 800108c:	08018e80 	.word	0x08018e80
 8001090:	08018e90 	.word	0x08018e90
				} else if (strcmp(name1, "onoff") == 0) {
 8001094:	4950      	ldr	r1, [pc, #320]	; (80011d8 <httpd_post_finished+0x3f8>)
 8001096:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800109a:	f7ff f899 	bl	80001d0 <strcmp>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10e      	bne.n	80010c2 <httpd_post_finished+0x2e2>
					T[id].onoff = atoi(token1);
 80010a4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80010a8:	f016 f954 	bl	8017354 <atoi>
 80010ac:	4601      	mov	r1, r0
 80010ae:	484b      	ldr	r0, [pc, #300]	; (80011dc <httpd_post_finished+0x3fc>)
 80010b0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4403      	add	r3, r0
 80010be:	334c      	adds	r3, #76	; 0x4c
 80010c0:	6019      	str	r1, [r3, #0]
				}
				/************************************************/
			}
			y++;
 80010c2:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <httpd_post_finished+0x400>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a45      	ldr	r2, [pc, #276]	; (80011e0 <httpd_post_finished+0x400>)
 80010ca:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	f107 0218 	add.w	r2, r7, #24
 80010d2:	4944      	ldr	r1, [pc, #272]	; (80011e4 <httpd_post_finished+0x404>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f016 fb4d 	bl	8017774 <strtok_r>
 80010da:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80010de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f47f aec9 	bne.w	8000e7a <httpd_post_finished+0x9a>
		}
		sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то его заполняем "null".
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80010f0:	493d      	ldr	r1, [pc, #244]	; (80011e8 <httpd_post_finished+0x408>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f016 fa96 	bl	8017624 <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 80010f8:	f107 0220 	add.w	r2, r7, #32
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f864 	bl	80001d0 <strcmp>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10e      	bne.n	800112c <httpd_post_finished+0x34c>
			strcpy(T[id].infofield, "null");
 800110e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	3328      	adds	r3, #40	; 0x28
 800111c:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <httpd_post_finished+0x3fc>)
 800111e:	4413      	add	r3, r2
 8001120:	3304      	adds	r3, #4
 8001122:	4a32      	ldr	r2, [pc, #200]	; (80011ec <httpd_post_finished+0x40c>)
 8001124:	6810      	ldr	r0, [r2, #0]
 8001126:	6018      	str	r0, [r3, #0]
 8001128:	7912      	ldrb	r2, [r2, #4]
 800112a:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		z++;
 800112c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001130:	3301      	adds	r3, #1
 8001132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		memset(name0, '\0', sizeof(name0));
 8001136:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800113a:	2232      	movs	r2, #50	; 0x32
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f016 f966 	bl	8017410 <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	2232      	movs	r2, #50	; 0x32
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f016 f95f 	bl	8017410 <memset>
	while ((token = strtok_r(rest, "&", &rest))) {
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f107 021c 	add.w	r2, r7, #28
 8001158:	4925      	ldr	r1, [pc, #148]	; (80011f0 <httpd_post_finished+0x410>)
 800115a:	4618      	mov	r0, r3
 800115c:	f016 fb0a 	bl	8017774 <strtok_r>
 8001160:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8001164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001168:	2b00      	cmp	r3, #0
 800116a:	f47f ae78 	bne.w	8000e5e <httpd_post_finished+0x7e>
	}
	memset(urlline, '\0', sizeof(urlline));
 800116e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001172:	4622      	mov	r2, r4
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f016 f94a 	bl	8017410 <memset>
	memset(bufervar, '\0', sizeof(bufervar));
 800117c:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001180:	2100      	movs	r1, #0
 8001182:	481c      	ldr	r0, [pc, #112]	; (80011f4 <httpd_post_finished+0x414>)
 8001184:	f016 f944 	bl	8017410 <memset>
//memset(json, '\0', sizeof(json));
//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */

	zerg_write_data_to_sd(num_lines - 1);
 8001188:	2039      	movs	r0, #57	; 0x39
 800118a:	f000 fed1 	bl	8001f30 <zerg_write_data_to_sd>

	snprintf(response_uri, response_uri_len, "/tab.shtml");
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <httpd_post_finished+0x418>)
 8001192:	4619      	mov	r1, r3
 8001194:	68b8      	ldr	r0, [r7, #8]
 8001196:	f016 fa11 	bl	80175bc <sniprintf>
	if (current_connection == connection) {
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <httpd_post_finished+0x41c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d110      	bne.n	80011c6 <httpd_post_finished+0x3e6>
		if (valid_connection == connection) {
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <httpd_post_finished+0x420>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d105      	bne.n	80011ba <httpd_post_finished+0x3da>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/tab.shtml");
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <httpd_post_finished+0x418>)
 80011b2:	4619      	mov	r1, r3
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f016 fa01 	bl	80175bc <sniprintf>
		}
		current_connection = NULL;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <httpd_post_finished+0x41c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <httpd_post_finished+0x420>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
	test_function();
 80011ca:	f7ff f9e5 	bl	8000598 <test_function>
 80011ce:	46ad      	mov	sp, r5

}
 80011d0:	bf00      	nop
 80011d2:	37a8      	adds	r7, #168	; 0xa8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}
 80011d8:	08018e9c 	.word	0x08018e9c
 80011dc:	20001b54 	.word	0x20001b54
 80011e0:	20005e48 	.word	0x20005e48
 80011e4:	08018ea4 	.word	0x08018ea4
 80011e8:	08018ea8 	.word	0x08018ea8
 80011ec:	08018eb8 	.word	0x08018eb8
 80011f0:	08018ec0 	.word	0x08018ec0
 80011f4:	20002d74 	.word	0x20002d74
 80011f8:	08018ec4 	.word	0x08018ec4
 80011fc:	20000538 	.word	0x20000538
 8001200:	2000053c 	.word	0x2000053c

08001204 <http_server_init>:
//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	httpd_init();
 8001208:	f00b fbd8 	bl	800c9bc <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <http_server_init+0x30>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2203      	movs	r2, #3
 8001212:	4619      	mov	r1, r3
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <http_server_init+0x34>)
 8001216:	f00b fbf1 	bl	800c9fc <http_set_ssi_handler>
// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	CGI_TAB[0] = FORM_CGI; // CGI структуру
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <http_server_init+0x38>)
 800121c:	4a08      	ldr	r2, [pc, #32]	; (8001240 <http_server_init+0x3c>)
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	e883 0003 	stmia.w	r3, {r0, r1}

//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(CGI_TAB, 1); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8001226:	2101      	movs	r1, #1
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <http_server_init+0x38>)
 800122a:	f00b fc29 	bl	800ca80 <http_set_cgi_handlers>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000000c 	.word	0x2000000c
 8001238:	08000891 	.word	0x08000891
 800123c:	20005e6c 	.word	0x20005e6c
 8001240:	0801c690 	.word	0x0801c690

08001244 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800124c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001250:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800125c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001260:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001264:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00b      	beq.n	8001284 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800126c:	e000      	b.n	8001270 <ITM_SendChar+0x2c>
    {
      __NOP();
 800126e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001270:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f9      	beq.n	800126e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800127a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	2332      	movs	r3, #50	; 0x32
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <_write+0x48>)
 80012aa:	f005 f91b 	bl	80064e4 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e009      	b.n	80012c8 <_write+0x34>
		ITM_SendChar(*ptr++);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	60ba      	str	r2, [r7, #8]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ffc1 	bl	8001244 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dbf1      	blt.n	80012b4 <_write+0x20>
	}
	return len;
 80012d0:	687b      	ldr	r3, [r7, #4]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20005ff4 	.word	0x20005ff4

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f001 f80a 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f818 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f000 f8f2 	bl	80014d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012f0:	f000 f8c8 	bl	8001484 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80012f4:	f000 f87c 	bl	80013f0 <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 80012f8:	f000 f89a 	bl	8001430 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 80012fc:	f006 fb74 	bl	80079e8 <MX_LWIP_Init>
  MX_FATFS_Init();
 8001300:	f006 f92c 	bl	800755c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8001304:	f7ff ff7e 	bl	8001204 <http_server_init>

//  zerg_mount();
//  zerg_format();
//  zerg_open();
//  zerg_write();
  zerg_get_data_from_sd();
 8001308:	f000 fc1e 	bl	8001b48 <zerg_get_data_from_sd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      ethernetif_input(&gnetif);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <main+0x38>)
 800130e:	f006 ff43 	bl	8008198 <ethernetif_input>
      sys_check_timeouts();
 8001312:	f013 fb63 	bl	80149dc <sys_check_timeouts>
      ethernetif_input(&gnetif);
 8001316:	e7f9      	b.n	800130c <main+0x2c>
 8001318:	20005edc 	.word	0x20005edc

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	; 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	2230      	movs	r2, #48	; 0x30
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f016 f870 	bl	8017410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <SystemClock_Config+0xcc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <SystemClock_Config+0xcc>)
 800134a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134e:	6413      	str	r3, [r2, #64]	; 0x40
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <SystemClock_Config+0xcc>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <SystemClock_Config+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a21      	ldr	r2, [pc, #132]	; (80013ec <SystemClock_Config+0xd0>)
 8001366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <SystemClock_Config+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001386:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800138c:	2304      	movs	r3, #4
 800138e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001390:	23a8      	movs	r3, #168	; 0xa8
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001398:	2307      	movs	r3, #7
 800139a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 f8af 	bl	8004504 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013ac:	f000 f8f8 	bl	80015a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2105      	movs	r1, #5
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 fb10 	bl	80049f4 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013da:	f000 f8e1 	bl	80015a0 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	; 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 80013f6:	4a0d      	ldr	r2, [pc, #52]	; (800142c <MX_SDIO_SD_Init+0x3c>)
 80013f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	20005f70 	.word	0x20005f70
 800142c:	40012c00 	.word	0x40012c00

08001430 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART6_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART6_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART6_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART6_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART6_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART6_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART6_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART6_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART6_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART6_UART_Init+0x4c>)
 8001468:	f004 ffef 	bl	800644a <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f000 f895 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20005ff4 	.word	0x20005ff4
 8001480:	40011400 	.word	0x40011400

08001484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_DMA_Init+0x4c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <MX_DMA_Init+0x4c>)
 8001494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_DMA_Init+0x4c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	203b      	movs	r0, #59	; 0x3b
 80014ac:	f001 f897 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014b0:	203b      	movs	r0, #59	; 0x3b
 80014b2:	f001 f8b0 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2045      	movs	r0, #69	; 0x45
 80014bc:	f001 f88f 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014c0:	2045      	movs	r0, #69	; 0x45
 80014c2:	f001 f8a8 	bl	8002616 <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <MX_GPIO_Init+0xc4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a29      	ldr	r2, [pc, #164]	; (8001598 <MX_GPIO_Init+0xc4>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b27      	ldr	r3, [pc, #156]	; (8001598 <MX_GPIO_Init+0xc4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <MX_GPIO_Init+0xc4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a22      	ldr	r2, [pc, #136]	; (8001598 <MX_GPIO_Init+0xc4>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <MX_GPIO_Init+0xc4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_GPIO_Init+0xc4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <MX_GPIO_Init+0xc4>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_GPIO_Init+0xc4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_GPIO_Init+0xc4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <MX_GPIO_Init+0xc4>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_GPIO_Init+0xc4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_GPIO_Init+0xc4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <MX_GPIO_Init+0xc4>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_GPIO_Init+0xc4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_GPIO_Init+0xc8>)
 800158a:	f002 fd23 	bl	8003fd4 <HAL_GPIO_Init>

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_MspInit+0x4c>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_MspInit+0x4c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a70      	ldr	r2, [pc, #448]	; (80017dc <HAL_SD_MspInit+0x1e0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 80da 	bne.w	80017d4 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	4b6e      	ldr	r3, [pc, #440]	; (80017e0 <HAL_SD_MspInit+0x1e4>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	4a6d      	ldr	r2, [pc, #436]	; (80017e0 <HAL_SD_MspInit+0x1e4>)
 800162a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800162e:	6453      	str	r3, [r2, #68]	; 0x44
 8001630:	4b6b      	ldr	r3, [pc, #428]	; (80017e0 <HAL_SD_MspInit+0x1e4>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	4b67      	ldr	r3, [pc, #412]	; (80017e0 <HAL_SD_MspInit+0x1e4>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a66      	ldr	r2, [pc, #408]	; (80017e0 <HAL_SD_MspInit+0x1e4>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <HAL_SD_MspInit+0x1e4>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <HAL_SD_MspInit+0x1e4>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <HAL_SD_MspInit+0x1e4>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <HAL_SD_MspInit+0x1e4>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001674:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167e:	2301      	movs	r3, #1
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001686:	230c      	movs	r3, #12
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4854      	ldr	r0, [pc, #336]	; (80017e4 <HAL_SD_MspInit+0x1e8>)
 8001692:	f002 fc9f 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016a8:	230c      	movs	r3, #12
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	484c      	ldr	r0, [pc, #304]	; (80017e4 <HAL_SD_MspInit+0x1e8>)
 80016b4:	f002 fc8e 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016b8:	2304      	movs	r3, #4
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016c8:	230c      	movs	r3, #12
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4845      	ldr	r0, [pc, #276]	; (80017e8 <HAL_SD_MspInit+0x1ec>)
 80016d4:	f002 fc7e 	bl	8003fd4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80016d8:	4b44      	ldr	r3, [pc, #272]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 80016da:	4a45      	ldr	r2, [pc, #276]	; (80017f0 <HAL_SD_MspInit+0x1f4>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 80016e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016e4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 80016f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 80016fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001700:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001702:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 8001704:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001708:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 800170c:	2220      	movs	r2, #32
 800170e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 8001718:	2204      	movs	r2, #4
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 800171e:	2203      	movs	r2, #3
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 8001724:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 800172c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001732:	482e      	ldr	r0, [pc, #184]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 8001734:	f000 ff8a 	bl	800264c <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800173e:	f7ff ff2f 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
 8001748:	4a28      	ldr	r2, [pc, #160]	; (80017ec <HAL_SD_MspInit+0x1f0>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 8001750:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <HAL_SD_MspInit+0x1fc>)
 8001752:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 8001756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 800175e:	2240      	movs	r2, #64	; 0x40
 8001760:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 800176a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 8001772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001776:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 800177a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 8001782:	2220      	movs	r2, #32
 8001784:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 800178e:	2204      	movs	r2, #4
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 8001794:	2203      	movs	r2, #3
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 800179a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 80017a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80017a8:	4812      	ldr	r0, [pc, #72]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 80017aa:	f000 ff4f 	bl	800264c <HAL_DMA_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80017b4:	f7ff fef4 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80017be:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_SD_MspInit+0x1f8>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	2031      	movs	r0, #49	; 0x31
 80017ca:	f000 ff08 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80017ce:	2031      	movs	r0, #49	; 0x31
 80017d0:	f000 ff21 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40012c00 	.word	0x40012c00
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	20005e7c 	.word	0x20005e7c
 80017f0:	40026458 	.word	0x40026458
 80017f4:	20005f10 	.word	0x20005f10
 80017f8:	400264a0 	.word	0x400264a0

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	; (8001880 <HAL_UART_MspInit+0x84>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12b      	bne.n	8001876 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_UART_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001856:	23c0      	movs	r3, #192	; 0xc0
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001866:	2308      	movs	r3, #8
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_UART_MspInit+0x8c>)
 8001872:	f002 fbaf 	bl	8003fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40011400 	.word	0x40011400
 8001884:	40023800 	.word	0x40023800
 8001888:	40020800 	.word	0x40020800

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 fd62 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <SDIO_IRQHandler+0x10>)
 80018e6:	f003 fcf7 	bl	80052d8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20005f70 	.word	0x20005f70

080018f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA2_Stream3_IRQHandler+0x10>)
 80018fa:	f000 ffcf 	bl	800289c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20005e7c 	.word	0x20005e7c

08001908 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DMA2_Stream6_IRQHandler+0x10>)
 800190e:	f000 ffc5 	bl	800289c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20005f10 	.word	0x20005f10

0800191c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_kill>:

int _kill(int pid, int sig)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <_kill+0x20>)
 8001938:	2216      	movs	r2, #22
 800193a:	601a      	str	r2, [r3, #0]
	return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	2001184c 	.word	0x2001184c

08001950 <_exit>:

void _exit (int status)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffe5 	bl	800192c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001962:	e7fe      	b.n	8001962 <_exit+0x12>

08001964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e00a      	b.n	800198c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001976:	f3af 8000 	nop.w
 800197a:	4601      	mov	r1, r0
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf0      	blt.n	8001976 <_read+0x12>
	}

return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_close>:
	}
	return len;
}

int _close(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c6:	605a      	str	r2, [r3, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_isatty>:

int _isatty(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
	return 1;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d205      	bcs.n	8001a44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <_sbrk+0x6c>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	20020000 	.word	0x20020000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20000540 	.word	0x20000540
 8001a70:	20011860 	.word	0x20011860
 8001a74:	2001184c 	.word	0x2001184c

08001a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <clear_buffer>:
uint32_t total, free_space;

extern struct table T[num_lines];		   // доступ из вне к 'struct table'.
/*--------------------------------------------------------------------------------------------------------------*/
// Очищаем буфер. / Clear buffer
void clear_buffer(void) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	e007      	b.n	8001ab8 <clear_buffer+0x1c>
		buffer[i] = '\0'; // BUFFER_SIZE
 8001aa8:	4a08      	ldr	r2, [pc, #32]	; (8001acc <clear_buffer+0x30>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b63      	cmp	r3, #99	; 0x63
 8001abc:	ddf4      	ble.n	8001aa8 <clear_buffer+0xc>
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	20000544 	.word	0x20000544

08001ad0 <zerg_mount>:
/*--------------------------------------------------------------------------------------------------------------*/
// Монтируем SD-карту / Mount SD card
void zerg_mount(void) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <zerg_mount+0x28>)
 8001ad8:	4808      	ldr	r0, [pc, #32]	; (8001afc <zerg_mount+0x2c>)
 8001ada:	f008 fa33 	bl	8009f44 <f_mount>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <zerg_mount+0x1c>
		printf("Error Mounting SD Card\r\n");
 8001ae4:	4806      	ldr	r0, [pc, #24]	; (8001b00 <zerg_mount+0x30>)
 8001ae6:	f015 fd21 	bl	801752c <puts>
	} else {
		printf("SD card mounted successfully!\r\n");
	}
}
 8001aea:	e002      	b.n	8001af2 <zerg_mount+0x22>
		printf("SD card mounted successfully!\r\n");
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <zerg_mount+0x34>)
 8001aee:	f015 fd1d 	bl	801752c <puts>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20009184 	.word	0x20009184
 8001afc:	2000a1b8 	.word	0x2000a1b8
 8001b00:	08018edc 	.word	0x08018edc
 8001b04:	08018ef4 	.word	0x08018ef4

08001b08 <zerg_open>:
		printf("SD-card formated successfully!\r\n");
	}
}
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем файл для записи если не существует то, создаем его! / Open file for writing (Create)
void zerg_open(void) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	if (f_open(&SDFile, (char*) name_sd, FA_CREATE_ALWAYS | FA_WRITE)
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <zerg_open+0x30>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	220a      	movs	r2, #10
 8001b12:	4619      	mov	r1, r3
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <zerg_open+0x34>)
 8001b16:	f008 fa5b 	bl	8009fd0 <f_open>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <zerg_open+0x20>
	//if (f_open(&SDFile, (char*) "0:name_sd", FA_CREATE_ALWAYS | FA_WRITE) //Create destination file on the drive 0
			!= FR_OK) {
		printf("Error openning file\r\n");
 8001b20:	4807      	ldr	r0, [pc, #28]	; (8001b40 <zerg_open+0x38>)
 8001b22:	f015 fd03 	bl	801752c <puts>
	} else {
		printf("File %s Openned Successfully!\r\n", name_sd);
	}
}
 8001b26:	e005      	b.n	8001b34 <zerg_open+0x2c>
		printf("File %s Openned Successfully!\r\n", name_sd);
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <zerg_open+0x30>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <zerg_open+0x3c>)
 8001b30:	f015 fc76 	bl	8017420 <iprintf>
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000498 	.word	0x20000498
 8001b3c:	20009188 	.word	0x20009188
 8001b40:	08018f50 	.word	0x08018f50
 8001b44:	08018f68 	.word	0x08018f68

08001b48 <zerg_get_data_from_sd>:
	}
	f_close(&SDFile);
	clear_buffer();
}

int zerg_get_data_from_sd(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
	zerg_mount();
 8001b4e:	f7ff ffbf 	bl	8001ad0 <zerg_mount>
	f_open(&SDFile, (char*) name_sd, FA_READ);
 8001b52:	4ba3      	ldr	r3, [pc, #652]	; (8001de0 <zerg_get_data_from_sd+0x298>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	4619      	mov	r1, r3
 8001b5a:	48a2      	ldr	r0, [pc, #648]	; (8001de4 <zerg_get_data_from_sd+0x29c>)
 8001b5c:	f008 fa38 	bl	8009fd0 <f_open>
	memset(rtext, 0, sizeof(rtext));
 8001b60:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001b64:	2100      	movs	r1, #0
 8001b66:	48a0      	ldr	r0, [pc, #640]	; (8001de8 <zerg_get_data_from_sd+0x2a0>)
 8001b68:	f015 fc52 	bl	8017410 <memset>
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*) &bytesread);
 8001b6c:	4b9f      	ldr	r3, [pc, #636]	; (8001dec <zerg_get_data_from_sd+0x2a4>)
 8001b6e:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001b72:	499d      	ldr	r1, [pc, #628]	; (8001de8 <zerg_get_data_from_sd+0x2a0>)
 8001b74:	489b      	ldr	r0, [pc, #620]	; (8001de4 <zerg_get_data_from_sd+0x29c>)
 8001b76:	f008 fbf7 	bl	800a368 <f_read>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b9c      	ldr	r3, [pc, #624]	; (8001df0 <zerg_get_data_from_sd+0x2a8>)
 8001b80:	701a      	strb	r2, [r3, #0]
	if ((bytesread == 0) || (res != FR_OK)) {
 8001b82:	4b9a      	ldr	r3, [pc, #616]	; (8001dec <zerg_get_data_from_sd+0x2a4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <zerg_get_data_from_sd+0x4a>
 8001b8a:	4b99      	ldr	r3, [pc, #612]	; (8001df0 <zerg_get_data_from_sd+0x2a8>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <zerg_get_data_from_sd+0x54>
		printf("Failed to read file!\r\n");
 8001b92:	4898      	ldr	r0, [pc, #608]	; (8001df4 <zerg_get_data_from_sd+0x2ac>)
 8001b94:	f015 fcca 	bl	801752c <puts>
		return 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e1b5      	b.n	8001f08 <zerg_get_data_from_sd+0x3c0>
		//printf("File *%s* readed successfully! \n", name);
		//printf("File *%s* has content it is; %s\r\n",name_sd, (char *)rtext);
		//printf("Data from SD card:\r\n");
		//printf("%s\r\n", rtext);
		char *token1, *token2, *token3;
		char *rest = rtext;
 8001b9c:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <zerg_get_data_from_sd+0x2a0>)
 8001b9e:	60bb      	str	r3, [r7, #8]
		char *name1; // для записи в структуру
		int id;
		int z = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
		int y = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]

		while ((token1 = strtok_r(rest, "\n", &rest))) {
 8001ba8:	e19c      	b.n	8001ee4 <zerg_get_data_from_sd+0x39c>
			//printf("token - %s\n", token1);
			char *rest1 = token1;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	607b      	str	r3, [r7, #4]
			y = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 8001bb2:	e189      	b.n	8001ec8 <zerg_get_data_from_sd+0x380>
				//printf("NAME - %s\n", token2);
				z = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
				if (y == 0) {
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11b      	bne.n	8001bf6 <zerg_get_data_from_sd+0xae>
					// получение id
					char *rest2 = token2;
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	603b      	str	r3, [r7, #0]
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 8001bc2:	e00e      	b.n	8001be2 <zerg_get_data_from_sd+0x9a>
						if (z == 0) {
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <zerg_get_data_from_sd+0x86>
							name1 = token2;
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
						}
						if (z == 1) {
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d103      	bne.n	8001bdc <zerg_get_data_from_sd+0x94>
							id = atoi(token3);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f015 fbbd 	bl	8017354 <atoi>
 8001bda:	6238      	str	r0, [r7, #32]
							//printf("ID %d\n", id);
						}
						z++;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	3301      	adds	r3, #1
 8001be0:	61fb      	str	r3, [r7, #28]
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	463a      	mov	r2, r7
 8001be6:	4984      	ldr	r1, [pc, #528]	; (8001df8 <zerg_get_data_from_sd+0x2b0>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f015 fdc3 	bl	8017774 <strtok_r>
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e6      	bne.n	8001bc4 <zerg_get_data_from_sd+0x7c>
					}
				}
				if (y == 1) {
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	f040 8162 	bne.w	8001ec2 <zerg_get_data_from_sd+0x37a>
					//printf("VAL = %s\n", token2);
					// записываем в структуру
					/************************************************/
					if (strcmp(name1, "pulluptype") == 0) {
 8001bfe:	497f      	ldr	r1, [pc, #508]	; (8001dfc <zerg_get_data_from_sd+0x2b4>)
 8001c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c02:	f7fe fae5 	bl	80001d0 <strcmp>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d117      	bne.n	8001c3c <zerg_get_data_from_sd+0xf4>
						strcpy(T[id].pulluptype, token2);
 8001c0c:	6a3a      	ldr	r2, [r7, #32]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	4a7a      	ldr	r2, [pc, #488]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001c18:	4413      	add	r3, r2
 8001c1a:	6939      	ldr	r1, [r7, #16]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f015 fd3d 	bl	801769c <strcpy>
						printf(" pulluptype_%d is: %s \n", id,
								T[id].pulluptype);
 8001c22:	6a3a      	ldr	r2, [r7, #32]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4a74      	ldr	r2, [pc, #464]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001c2e:	4413      	add	r3, r2
						printf(" pulluptype_%d is: %s \n", id,
 8001c30:	461a      	mov	r2, r3
 8001c32:	6a39      	ldr	r1, [r7, #32]
 8001c34:	4873      	ldr	r0, [pc, #460]	; (8001e04 <zerg_get_data_from_sd+0x2bc>)
 8001c36:	f015 fbf3 	bl	8017420 <iprintf>
 8001c3a:	e142      	b.n	8001ec2 <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "bounceinterval") == 0) {
 8001c3c:	4972      	ldr	r1, [pc, #456]	; (8001e08 <zerg_get_data_from_sd+0x2c0>)
 8001c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c40:	f7fe fac6 	bl	80001d0 <strcmp>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d11b      	bne.n	8001c82 <zerg_get_data_from_sd+0x13a>
						T[id].bounceinterval = atoi(token2);
 8001c4a:	6938      	ldr	r0, [r7, #16]
 8001c4c:	f015 fb82 	bl	8017354 <atoi>
 8001c50:	4601      	mov	r1, r0
 8001c52:	486b      	ldr	r0, [pc, #428]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001c54:	6a3a      	ldr	r2, [r7, #32]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4403      	add	r3, r0
 8001c60:	3314      	adds	r3, #20
 8001c62:	6019      	str	r1, [r3, #0]
						printf(" bounceinterval_%d is: %d \n", id,
 8001c64:	4966      	ldr	r1, [pc, #408]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001c66:	6a3a      	ldr	r2, [r7, #32]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	440b      	add	r3, r1
 8001c72:	3314      	adds	r3, #20
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	6a39      	ldr	r1, [r7, #32]
 8001c7a:	4864      	ldr	r0, [pc, #400]	; (8001e0c <zerg_get_data_from_sd+0x2c4>)
 8001c7c:	f015 fbd0 	bl	8017420 <iprintf>
 8001c80:	e11f      	b.n	8001ec2 <zerg_get_data_from_sd+0x37a>
								T[id].bounceinterval);
					} else if (strcmp(name1, "holdinterval") == 0) {
 8001c82:	4963      	ldr	r1, [pc, #396]	; (8001e10 <zerg_get_data_from_sd+0x2c8>)
 8001c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c86:	f7fe faa3 	bl	80001d0 <strcmp>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11b      	bne.n	8001cc8 <zerg_get_data_from_sd+0x180>
						T[id].holdinterval = atoi(token2);
 8001c90:	6938      	ldr	r0, [r7, #16]
 8001c92:	f015 fb5f 	bl	8017354 <atoi>
 8001c96:	4601      	mov	r1, r0
 8001c98:	4859      	ldr	r0, [pc, #356]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001c9a:	6a3a      	ldr	r2, [r7, #32]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4403      	add	r3, r0
 8001ca6:	3318      	adds	r3, #24
 8001ca8:	6019      	str	r1, [r3, #0]
						printf(" holdinterval_%d is: %d \n", id,
 8001caa:	4955      	ldr	r1, [pc, #340]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001cac:	6a3a      	ldr	r2, [r7, #32]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3318      	adds	r3, #24
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6a39      	ldr	r1, [r7, #32]
 8001cc0:	4854      	ldr	r0, [pc, #336]	; (8001e14 <zerg_get_data_from_sd+0x2cc>)
 8001cc2:	f015 fbad 	bl	8017420 <iprintf>
 8001cc6:	e0fc      	b.n	8001ec2 <zerg_get_data_from_sd+0x37a>
								T[id].holdinterval);
					} else if (strcmp(name1, "repeat") == 0) {
 8001cc8:	4953      	ldr	r1, [pc, #332]	; (8001e18 <zerg_get_data_from_sd+0x2d0>)
 8001cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ccc:	f7fe fa80 	bl	80001d0 <strcmp>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d11b      	bne.n	8001d0e <zerg_get_data_from_sd+0x1c6>
						T[id].repeat = atoi(token2);
 8001cd6:	6938      	ldr	r0, [r7, #16]
 8001cd8:	f015 fb3c 	bl	8017354 <atoi>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4848      	ldr	r0, [pc, #288]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001ce0:	6a3a      	ldr	r2, [r7, #32]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4403      	add	r3, r0
 8001cec:	331c      	adds	r3, #28
 8001cee:	6019      	str	r1, [r3, #0]
						printf(" repeat_%d is: %d \n", id, T[id].repeat);
 8001cf0:	4943      	ldr	r1, [pc, #268]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001cf2:	6a3a      	ldr	r2, [r7, #32]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	440b      	add	r3, r1
 8001cfe:	331c      	adds	r3, #28
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	6a39      	ldr	r1, [r7, #32]
 8001d06:	4845      	ldr	r0, [pc, #276]	; (8001e1c <zerg_get_data_from_sd+0x2d4>)
 8001d08:	f015 fb8a 	bl	8017420 <iprintf>
 8001d0c:	e0d9      	b.n	8001ec2 <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "repeatinterval") == 0) {
 8001d0e:	4944      	ldr	r1, [pc, #272]	; (8001e20 <zerg_get_data_from_sd+0x2d8>)
 8001d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d12:	f7fe fa5d 	bl	80001d0 <strcmp>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d11b      	bne.n	8001d54 <zerg_get_data_from_sd+0x20c>
						T[id].repeatinterval = atoi(token2);
 8001d1c:	6938      	ldr	r0, [r7, #16]
 8001d1e:	f015 fb19 	bl	8017354 <atoi>
 8001d22:	4601      	mov	r1, r0
 8001d24:	4836      	ldr	r0, [pc, #216]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001d26:	6a3a      	ldr	r2, [r7, #32]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	4403      	add	r3, r0
 8001d32:	3320      	adds	r3, #32
 8001d34:	6019      	str	r1, [r3, #0]
						printf(" repeatinterval_%d is: %d \n", id,
 8001d36:	4932      	ldr	r1, [pc, #200]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001d38:	6a3a      	ldr	r2, [r7, #32]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	440b      	add	r3, r1
 8001d44:	3320      	adds	r3, #32
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	4835      	ldr	r0, [pc, #212]	; (8001e24 <zerg_get_data_from_sd+0x2dc>)
 8001d4e:	f015 fb67 	bl	8017420 <iprintf>
 8001d52:	e0b6      	b.n	8001ec2 <zerg_get_data_from_sd+0x37a>
								T[id].repeatinterval);
					} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8001d54:	4934      	ldr	r1, [pc, #208]	; (8001e28 <zerg_get_data_from_sd+0x2e0>)
 8001d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d58:	f7fe fa3a 	bl	80001d0 <strcmp>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d11b      	bne.n	8001d9a <zerg_get_data_from_sd+0x252>
						T[id].doubleclickinterval = atoi(token2);
 8001d62:	6938      	ldr	r0, [r7, #16]
 8001d64:	f015 faf6 	bl	8017354 <atoi>
 8001d68:	4601      	mov	r1, r0
 8001d6a:	4825      	ldr	r0, [pc, #148]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001d6c:	6a3a      	ldr	r2, [r7, #32]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	4403      	add	r3, r0
 8001d78:	3324      	adds	r3, #36	; 0x24
 8001d7a:	6019      	str	r1, [r3, #0]
						printf(" doubleclickinterval_%d is: %d \n", id,
 8001d7c:	4920      	ldr	r1, [pc, #128]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001d7e:	6a3a      	ldr	r2, [r7, #32]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	440b      	add	r3, r1
 8001d8a:	3324      	adds	r3, #36	; 0x24
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	4826      	ldr	r0, [pc, #152]	; (8001e2c <zerg_get_data_from_sd+0x2e4>)
 8001d94:	f015 fb44 	bl	8017420 <iprintf>
 8001d98:	e093      	b.n	8001ec2 <zerg_get_data_from_sd+0x37a>
								T[id].doubleclickinterval);
					} else if (strcmp(name1, "preventclick") == 0) {
 8001d9a:	4925      	ldr	r1, [pc, #148]	; (8001e30 <zerg_get_data_from_sd+0x2e8>)
 8001d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d9e:	f7fe fa17 	bl	80001d0 <strcmp>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d147      	bne.n	8001e38 <zerg_get_data_from_sd+0x2f0>
						T[id].preventclick = atoi(token2);
 8001da8:	6938      	ldr	r0, [r7, #16]
 8001daa:	f015 fad3 	bl	8017354 <atoi>
 8001dae:	4601      	mov	r1, r0
 8001db0:	4813      	ldr	r0, [pc, #76]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001db2:	6a3a      	ldr	r2, [r7, #32]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	4403      	add	r3, r0
 8001dbe:	3328      	adds	r3, #40	; 0x28
 8001dc0:	6019      	str	r1, [r3, #0]
						printf(" preventclick_%d is: %d \n", id,
 8001dc2:	490f      	ldr	r1, [pc, #60]	; (8001e00 <zerg_get_data_from_sd+0x2b8>)
 8001dc4:	6a3a      	ldr	r2, [r7, #32]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	440b      	add	r3, r1
 8001dd0:	3328      	adds	r3, #40	; 0x28
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	6a39      	ldr	r1, [r7, #32]
 8001dd8:	4816      	ldr	r0, [pc, #88]	; (8001e34 <zerg_get_data_from_sd+0x2ec>)
 8001dda:	f015 fb21 	bl	8017420 <iprintf>
 8001dde:	e070      	b.n	8001ec2 <zerg_get_data_from_sd+0x37a>
 8001de0:	20000498 	.word	0x20000498
 8001de4:	20009188 	.word	0x20009188
 8001de8:	20006068 	.word	0x20006068
 8001dec:	20006044 	.word	0x20006044
 8001df0:	20009178 	.word	0x20009178
 8001df4:	08018fbc 	.word	0x08018fbc
 8001df8:	08018ff0 	.word	0x08018ff0
 8001dfc:	08018ff4 	.word	0x08018ff4
 8001e00:	20001b54 	.word	0x20001b54
 8001e04:	08019000 	.word	0x08019000
 8001e08:	08019018 	.word	0x08019018
 8001e0c:	08019028 	.word	0x08019028
 8001e10:	08019044 	.word	0x08019044
 8001e14:	08019054 	.word	0x08019054
 8001e18:	08019070 	.word	0x08019070
 8001e1c:	08019078 	.word	0x08019078
 8001e20:	0801908c 	.word	0x0801908c
 8001e24:	0801909c 	.word	0x0801909c
 8001e28:	080190b8 	.word	0x080190b8
 8001e2c:	080190cc 	.word	0x080190cc
 8001e30:	080190f0 	.word	0x080190f0
 8001e34:	08019100 	.word	0x08019100
								T[id].preventclick);
					} else if (strcmp(name1, "infofield") == 0) {
 8001e38:	4935      	ldr	r1, [pc, #212]	; (8001f10 <zerg_get_data_from_sd+0x3c8>)
 8001e3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e3c:	f7fe f9c8 	bl	80001d0 <strcmp>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11b      	bne.n	8001e7e <zerg_get_data_from_sd+0x336>
						strcpy(T[id].infofield, token2);
 8001e46:	6a3a      	ldr	r2, [r7, #32]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	3328      	adds	r3, #40	; 0x28
 8001e52:	4a30      	ldr	r2, [pc, #192]	; (8001f14 <zerg_get_data_from_sd+0x3cc>)
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	6939      	ldr	r1, [r7, #16]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f015 fc1e 	bl	801769c <strcpy>
						printf(" infofield_%d is: %s \n", id, T[id].infofield);
 8001e60:	6a3a      	ldr	r2, [r7, #32]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	3328      	adds	r3, #40	; 0x28
 8001e6c:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <zerg_get_data_from_sd+0x3cc>)
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	461a      	mov	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	4828      	ldr	r0, [pc, #160]	; (8001f18 <zerg_get_data_from_sd+0x3d0>)
 8001e78:	f015 fad2 	bl	8017420 <iprintf>
 8001e7c:	e021      	b.n	8001ec2 <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "onoff") == 0) {
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <zerg_get_data_from_sd+0x3d4>)
 8001e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e82:	f7fe f9a5 	bl	80001d0 <strcmp>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11a      	bne.n	8001ec2 <zerg_get_data_from_sd+0x37a>
						T[id].onoff = atoi(token2);
 8001e8c:	6938      	ldr	r0, [r7, #16]
 8001e8e:	f015 fa61 	bl	8017354 <atoi>
 8001e92:	4601      	mov	r1, r0
 8001e94:	481f      	ldr	r0, [pc, #124]	; (8001f14 <zerg_get_data_from_sd+0x3cc>)
 8001e96:	6a3a      	ldr	r2, [r7, #32]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	4403      	add	r3, r0
 8001ea2:	334c      	adds	r3, #76	; 0x4c
 8001ea4:	6019      	str	r1, [r3, #0]
						printf(" onoff_%d is: %d \n", id, T[id].onoff);
 8001ea6:	491b      	ldr	r1, [pc, #108]	; (8001f14 <zerg_get_data_from_sd+0x3cc>)
 8001ea8:	6a3a      	ldr	r2, [r7, #32]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	440b      	add	r3, r1
 8001eb4:	334c      	adds	r3, #76	; 0x4c
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6a39      	ldr	r1, [r7, #32]
 8001ebc:	4818      	ldr	r0, [pc, #96]	; (8001f20 <zerg_get_data_from_sd+0x3d8>)
 8001ebe:	f015 faaf 	bl	8017420 <iprintf>
					}
					/************************************************/
				}
				y++;
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61bb      	str	r3, [r7, #24]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1d3a      	adds	r2, r7, #4
 8001ecc:	4915      	ldr	r1, [pc, #84]	; (8001f24 <zerg_get_data_from_sd+0x3dc>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f015 fc50 	bl	8017774 <strtok_r>
 8001ed4:	6138      	str	r0, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f47f ae6b 	bne.w	8001bb4 <zerg_get_data_from_sd+0x6c>
			}
			z++;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
		while ((token1 = strtok_r(rest, "\n", &rest))) {
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	490f      	ldr	r1, [pc, #60]	; (8001f28 <zerg_get_data_from_sd+0x3e0>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f015 fc41 	bl	8017774 <strtok_r>
 8001ef2:	6178      	str	r0, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f47f ae57 	bne.w	8001baa <zerg_get_data_from_sd+0x62>
		}
	}
	f_close(&SDFile);
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <zerg_get_data_from_sd+0x3e4>)
 8001efe:	f008 fda4 	bl	800aa4a <f_close>
	clear_buffer();
 8001f02:	f7ff fdcb 	bl	8001a9c <clear_buffer>
	return 0;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	0801911c 	.word	0x0801911c
 8001f14:	20001b54 	.word	0x20001b54
 8001f18:	08019128 	.word	0x08019128
 8001f1c:	08019140 	.word	0x08019140
 8001f20:	08019148 	.word	0x08019148
 8001f24:	0801915c 	.word	0x0801915c
 8001f28:	08019160 	.word	0x08019160
 8001f2c:	20009188 	.word	0x20009188

08001f30 <zerg_write_data_to_sd>:

// Запись структуры на SD-card / Write our struct to the SD-card
void zerg_write_data_to_sd(int num) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	f5ad 5d6d 	sub.w	sp, sp, #15168	; 0x3b40
 8001f36:	b08c      	sub	sp, #48	; 0x30
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f3e:	3b2c      	subs	r3, #44	; 0x2c
 8001f40:	6018      	str	r0, [r3, #0]
	  zerg_mount();
 8001f42:	f7ff fdc5 	bl	8001ad0 <zerg_mount>
	  zerg_open();
 8001f46:	f7ff fddf 	bl	8001b08 <zerg_open>
	char full_data[15000];
	char line[200];

	for (int id = 0; id <= num; id++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001f50:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e13a      	b.n	80021ce <zerg_write_data_to_sd+0x29e>
//		printf(" doubleclickinterval is: %d \n", T[id].doubleclickinterval);
//		printf(" preventclick is: %d \n", T[id].preventclick);
//		printf(" infofield is: %s \n", T[id].infofield);
//		printf(" onoff is: %d \n", T[id].onoff);

		sprintf(line,"pulluptype_%d=%s\n",id,T[id].pulluptype);
 8001f58:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001f5c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4ac0      	ldr	r2, [pc, #768]	; (800226c <zerg_write_data_to_sd+0x33c>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001f72:	3824      	subs	r0, #36	; 0x24
 8001f74:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001f78:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	49bc      	ldr	r1, [pc, #752]	; (8002270 <zerg_write_data_to_sd+0x340>)
 8001f80:	f015 fb50 	bl	8017624 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001f84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f88:	3a24      	subs	r2, #36	; 0x24
 8001f8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f8e:	3b1c      	subs	r3, #28
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f015 fb66 	bl	8017664 <strcat>
		sprintf(line,"bounceinterval_%d=%d\n",id,T[id].bounceinterval);
 8001f98:	49b4      	ldr	r1, [pc, #720]	; (800226c <zerg_write_data_to_sd+0x33c>)
 8001f9a:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001f9e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	440b      	add	r3, r1
 8001fae:	3314      	adds	r3, #20
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001fb6:	3824      	subs	r0, #36	; 0x24
 8001fb8:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001fbc:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	49ac      	ldr	r1, [pc, #688]	; (8002274 <zerg_write_data_to_sd+0x344>)
 8001fc4:	f015 fb2e 	bl	8017624 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001fc8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fcc:	3a24      	subs	r2, #36	; 0x24
 8001fce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fd2:	3b1c      	subs	r3, #28
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f015 fb44 	bl	8017664 <strcat>
		sprintf(line,"holdinterval_%d=%d\n",id,T[id].holdinterval);
 8001fdc:	49a3      	ldr	r1, [pc, #652]	; (800226c <zerg_write_data_to_sd+0x33c>)
 8001fde:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001fe2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001ffa:	3824      	subs	r0, #36	; 0x24
 8001ffc:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8002000:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	499c      	ldr	r1, [pc, #624]	; (8002278 <zerg_write_data_to_sd+0x348>)
 8002008:	f015 fb0c 	bl	8017624 <siprintf>
		strcat(full_data, line); // объеденяем строки
 800200c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002010:	3a24      	subs	r2, #36	; 0x24
 8002012:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002016:	3b1c      	subs	r3, #28
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f015 fb22 	bl	8017664 <strcat>
		sprintf(line,"repeat_%d=%d\n",id,T[id].repeat);
 8002020:	4992      	ldr	r1, [pc, #584]	; (800226c <zerg_write_data_to_sd+0x33c>)
 8002022:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8002026:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	440b      	add	r3, r1
 8002036:	331c      	adds	r3, #28
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800203e:	3824      	subs	r0, #36	; 0x24
 8002040:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8002044:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	498c      	ldr	r1, [pc, #560]	; (800227c <zerg_write_data_to_sd+0x34c>)
 800204c:	f015 faea 	bl	8017624 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8002050:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002054:	3a24      	subs	r2, #36	; 0x24
 8002056:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800205a:	3b1c      	subs	r3, #28
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f015 fb00 	bl	8017664 <strcat>
		sprintf(line,"repeatinterval_%d=%d\n",id,T[id].repeatinterval);
 8002064:	4981      	ldr	r1, [pc, #516]	; (800226c <zerg_write_data_to_sd+0x33c>)
 8002066:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 800206a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	440b      	add	r3, r1
 800207a:	3320      	adds	r3, #32
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002082:	3824      	subs	r0, #36	; 0x24
 8002084:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8002088:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	497c      	ldr	r1, [pc, #496]	; (8002280 <zerg_write_data_to_sd+0x350>)
 8002090:	f015 fac8 	bl	8017624 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8002094:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002098:	3a24      	subs	r2, #36	; 0x24
 800209a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800209e:	3b1c      	subs	r3, #28
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f015 fade 	bl	8017664 <strcat>
		sprintf(line,"doubleclickinterval_%d=%d\n",id,T[id].doubleclickinterval);
 80020a8:	4970      	ldr	r1, [pc, #448]	; (800226c <zerg_write_data_to_sd+0x33c>)
 80020aa:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 80020ae:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	440b      	add	r3, r1
 80020be:	3324      	adds	r3, #36	; 0x24
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80020c6:	3824      	subs	r0, #36	; 0x24
 80020c8:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 80020cc:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	496c      	ldr	r1, [pc, #432]	; (8002284 <zerg_write_data_to_sd+0x354>)
 80020d4:	f015 faa6 	bl	8017624 <siprintf>
		strcat(full_data, line); // объеденяем строки
 80020d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020dc:	3a24      	subs	r2, #36	; 0x24
 80020de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020e2:	3b1c      	subs	r3, #28
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f015 fabc 	bl	8017664 <strcat>
		sprintf(line,"preventclick_%d=%d\n",id,T[id].doubleclickinterval);
 80020ec:	495f      	ldr	r1, [pc, #380]	; (800226c <zerg_write_data_to_sd+0x33c>)
 80020ee:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 80020f2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	440b      	add	r3, r1
 8002102:	3324      	adds	r3, #36	; 0x24
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800210a:	3824      	subs	r0, #36	; 0x24
 800210c:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8002110:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	495c      	ldr	r1, [pc, #368]	; (8002288 <zerg_write_data_to_sd+0x358>)
 8002118:	f015 fa84 	bl	8017624 <siprintf>
		strcat(full_data, line); // объеденяем строки
 800211c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002120:	3a24      	subs	r2, #36	; 0x24
 8002122:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002126:	3b1c      	subs	r3, #28
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f015 fa9a 	bl	8017664 <strcat>
		sprintf(line,"infofield_%d=%s\n",id,T[id].infofield);
 8002130:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8002134:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	3328      	adds	r3, #40	; 0x28
 8002144:	4a49      	ldr	r2, [pc, #292]	; (800226c <zerg_write_data_to_sd+0x33c>)
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800214e:	3824      	subs	r0, #36	; 0x24
 8002150:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8002154:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	494c      	ldr	r1, [pc, #304]	; (800228c <zerg_write_data_to_sd+0x35c>)
 800215c:	f015 fa62 	bl	8017624 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8002160:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002164:	3a24      	subs	r2, #36	; 0x24
 8002166:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800216a:	3b1c      	subs	r3, #28
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f015 fa78 	bl	8017664 <strcat>
		sprintf(line,"onoff_%d=%d\n",id,T[id].onoff);
 8002174:	493d      	ldr	r1, [pc, #244]	; (800226c <zerg_write_data_to_sd+0x33c>)
 8002176:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 800217a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	440b      	add	r3, r1
 800218a:	334c      	adds	r3, #76	; 0x4c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002192:	3824      	subs	r0, #36	; 0x24
 8002194:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8002198:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	493c      	ldr	r1, [pc, #240]	; (8002290 <zerg_write_data_to_sd+0x360>)
 80021a0:	f015 fa40 	bl	8017624 <siprintf>
		strcat(full_data, line); // объеденяем строки
 80021a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021a8:	3a24      	subs	r2, #36	; 0x24
 80021aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021ae:	3b1c      	subs	r3, #28
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f015 fa56 	bl	8017664 <strcat>
	for (int id = 0; id <= num; id++) {
 80021b8:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 80021bc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3301      	adds	r3, #1
 80021c4:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 80021c8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d2:	3b2c      	subs	r3, #44	; 0x2c
 80021d4:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 80021d8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f77f aeb9 	ble.w	8001f58 <zerg_write_data_to_sd+0x28>
	}
		res = f_write(&SDFile, full_data, strlen((char*) full_data), (void*) &byteswritten);
 80021e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021ea:	3b1c      	subs	r3, #28
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fd fff9 	bl	80001e4 <strlen>
 80021f2:	4602      	mov	r2, r0
 80021f4:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80021f8:	391c      	subs	r1, #28
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <zerg_write_data_to_sd+0x364>)
 80021fc:	4826      	ldr	r0, [pc, #152]	; (8002298 <zerg_write_data_to_sd+0x368>)
 80021fe:	f008 fa12 	bl	800a626 <f_write>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	4b25      	ldr	r3, [pc, #148]	; (800229c <zerg_write_data_to_sd+0x36c>)
 8002208:	701a      	strb	r2, [r3, #0]
		if ((byteswritten == 0) || (res != FR_OK)) {
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <zerg_write_data_to_sd+0x364>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <zerg_write_data_to_sd+0x2ea>
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <zerg_write_data_to_sd+0x36c>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <zerg_write_data_to_sd+0x2fc>
			printf("Failed to write file!\r\n");
 800221a:	4821      	ldr	r0, [pc, #132]	; (80022a0 <zerg_write_data_to_sd+0x370>)
 800221c:	f015 f986 	bl	801752c <puts>
			f_close(&SDFile);
 8002220:	481d      	ldr	r0, [pc, #116]	; (8002298 <zerg_write_data_to_sd+0x368>)
 8002222:	f008 fc12 	bl	800aa4a <f_close>
			clear_buffer();
 8002226:	f7ff fc39 	bl	8001a9c <clear_buffer>
 800222a:	e007      	b.n	800223c <zerg_write_data_to_sd+0x30c>
		} else {
			printf("File written successfully\r\n");
 800222c:	481d      	ldr	r0, [pc, #116]	; (80022a4 <zerg_write_data_to_sd+0x374>)
 800222e:	f015 f97d 	bl	801752c <puts>
			f_close(&SDFile);
 8002232:	4819      	ldr	r0, [pc, #100]	; (8002298 <zerg_write_data_to_sd+0x368>)
 8002234:	f008 fc09 	bl	800aa4a <f_close>
			clear_buffer();
 8002238:	f7ff fc30 	bl	8001a9c <clear_buffer>
		}
		memset(full_data, 0, sizeof(full_data));
 800223c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002240:	3b1c      	subs	r3, #28
 8002242:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f015 f8e1 	bl	8017410 <memset>
		memset(line, 0, sizeof(line));
 800224e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002252:	3b24      	subs	r3, #36	; 0x24
 8002254:	22c8      	movs	r2, #200	; 0xc8
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f015 f8d9 	bl	8017410 <memset>
		//zerg_read();
		}
 800225e:	bf00      	nop
 8002260:	f507 576d 	add.w	r7, r7, #15168	; 0x3b40
 8002264:	3730      	adds	r7, #48	; 0x30
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20001b54 	.word	0x20001b54
 8002270:	08019164 	.word	0x08019164
 8002274:	08019178 	.word	0x08019178
 8002278:	08019190 	.word	0x08019190
 800227c:	080191a4 	.word	0x080191a4
 8002280:	080191b4 	.word	0x080191b4
 8002284:	080191cc 	.word	0x080191cc
 8002288:	080191e8 	.word	0x080191e8
 800228c:	080191fc 	.word	0x080191fc
 8002290:	08019210 	.word	0x08019210
 8002294:	2000603c 	.word	0x2000603c
 8002298:	20009188 	.word	0x20009188
 800229c:	20009178 	.word	0x20009178
 80022a0:	08018f88 	.word	0x08018f88
 80022a4:	08018fa0 	.word	0x08018fa0

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ae:	490e      	ldr	r1, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c4:	4c0b      	ldr	r4, [pc, #44]	; (80022f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022d2:	f7ff fbd1 	bl	8001a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f015 f841 	bl	801735c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7ff f801 	bl	80012e0 <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	20000514 	.word	0x20000514
  ldr r2, =_sidata
 80022ec:	0801f10c 	.word	0x0801f10c
  ldr r2, =_sbss
 80022f0:	20000514 	.word	0x20000514
  ldr r4, =_ebss
 80022f4:	2001185c 	.word	0x2001185c

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f94f 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	200f      	movs	r0, #15
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff f93c 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f967 	bl	8002632 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800237c:	f000 f92f 	bl	80025de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000049c 	.word	0x2000049c
 8002398:	200004a4 	.word	0x200004a4
 800239c:	200004a0 	.word	0x200004a0

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x20>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_IncTick+0x24>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	200004a4 	.word	0x200004a4
 80023c4:	2000917c 	.word	0x2000917c

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000917c 	.word	0x2000917c

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff ffee 	bl	80023c8 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffde 	bl	80023c8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200004a4 	.word	0x200004a4

08002428 <__NVIC_SetPriorityGrouping>:
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	; (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Config>:
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a8:	f7ff ff8e 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff29 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff3e 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff8e 	bl	800251c <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff5d 	bl	80024c8 <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff31 	bl	800248c <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffa2 	bl	8002584 <SysTick_Config>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff feb6 	bl	80023c8 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e099      	b.n	800279c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002688:	e00f      	b.n	80026aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268a:	f7ff fe9d 	bl	80023c8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b05      	cmp	r3, #5
 8002696:	d908      	bls.n	80026aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e078      	b.n	800279c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e8      	bne.n	800268a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_DMA_Init+0x158>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b04      	cmp	r3, #4
 8002702:	d107      	bne.n	8002714 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	4313      	orrs	r3, r2
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0307 	bic.w	r3, r3, #7
 800272a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	2b04      	cmp	r3, #4
 800273c:	d117      	bne.n	800276e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fa9d 	bl	8002c90 <DMA_CheckFifoParam>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2240      	movs	r2, #64	; 0x40
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800276a:	2301      	movs	r3, #1
 800276c:	e016      	b.n	800279c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa54 	bl	8002c24 <DMA_CalcBaseAndBitshift>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	223f      	movs	r2, #63	; 0x3f
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	f010803f 	.word	0xf010803f

080027a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_DMA_Start_IT+0x26>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e040      	b.n	8002850 <HAL_DMA_Start_IT+0xa8>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d12f      	bne.n	8002842 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f9e6 	bl	8002bc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0216 	orr.w	r2, r2, #22
 8002816:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0208 	orr.w	r2, r2, #8
 800282e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e005      	b.n	800284e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800284e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d004      	beq.n	8002876 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00c      	b.n	8002890 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2205      	movs	r2, #5
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028a8:	4b92      	ldr	r3, [pc, #584]	; (8002af4 <HAL_DMA_IRQHandler+0x258>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a92      	ldr	r2, [pc, #584]	; (8002af8 <HAL_DMA_IRQHandler+0x25c>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0a9b      	lsrs	r3, r3, #10
 80028b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	2208      	movs	r2, #8
 80028c8:	409a      	lsls	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01a      	beq.n	8002908 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0204 	bic.w	r2, r2, #4
 80028ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f4:	2208      	movs	r2, #8
 80028f6:	409a      	lsls	r2, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	f043 0201 	orr.w	r2, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	2201      	movs	r2, #1
 800290e:	409a      	lsls	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d012      	beq.n	800293e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	2201      	movs	r2, #1
 800292c:	409a      	lsls	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	f043 0202 	orr.w	r2, r3, #2
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	2204      	movs	r2, #4
 8002944:	409a      	lsls	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d012      	beq.n	8002974 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002960:	2204      	movs	r2, #4
 8002962:	409a      	lsls	r2, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	f043 0204 	orr.w	r2, r3, #4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	2210      	movs	r2, #16
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d043      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03c      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002996:	2210      	movs	r2, #16
 8002998:	409a      	lsls	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d018      	beq.n	80029de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d108      	bne.n	80029cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d024      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
 80029ca:	e01f      	b.n	8002a0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
 80029dc:	e016      	b.n	8002a0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0208 	bic.w	r2, r2, #8
 80029fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	2220      	movs	r2, #32
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 808e 	beq.w	8002b3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8086 	beq.w	8002b3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	2220      	movs	r2, #32
 8002a34:	409a      	lsls	r2, r3
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d136      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0216 	bic.w	r2, r2, #22
 8002a54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x1da>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0208 	bic.w	r2, r2, #8
 8002a84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	223f      	movs	r2, #63	; 0x3f
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d07d      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
        }
        return;
 8002ab2:	e078      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01c      	beq.n	8002afc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d108      	bne.n	8002ae2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d030      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
 8002ae0:	e02b      	b.n	8002b3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d027      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
 8002af2:	e022      	b.n	8002b3a <HAL_DMA_IRQHandler+0x29e>
 8002af4:	2000049c 	.word	0x2000049c
 8002af8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0210 	bic.w	r2, r2, #16
 8002b18:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d032      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d022      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2205      	movs	r2, #5
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d307      	bcc.n	8002b82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f2      	bne.n	8002b66 <HAL_DMA_IRQHandler+0x2ca>
 8002b80:	e000      	b.n	8002b84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b82:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
 8002ba4:	e000      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ba6:	bf00      	nop
    }
  }
}
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop

08002bb0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002be4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d108      	bne.n	8002c08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c06:	e007      	b.n	8002c18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	60da      	str	r2, [r3, #12]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3b10      	subs	r3, #16
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <DMA_CalcBaseAndBitshift+0x64>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c3e:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <DMA_CalcBaseAndBitshift+0x68>)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d909      	bls.n	8002c66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	1d1a      	adds	r2, r3, #4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	; 0x58
 8002c64:	e007      	b.n	8002c76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c6e:	f023 0303 	bic.w	r3, r3, #3
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	aaaaaaab 	.word	0xaaaaaaab
 8002c8c:	0801c6b0 	.word	0x0801c6b0

08002c90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d11f      	bne.n	8002cea <DMA_CheckFifoParam+0x5a>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d856      	bhi.n	8002d5e <DMA_CheckFifoParam+0xce>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <DMA_CheckFifoParam+0x28>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002cc9 	.word	0x08002cc9
 8002cbc:	08002cdb 	.word	0x08002cdb
 8002cc0:	08002cc9 	.word	0x08002cc9
 8002cc4:	08002d5f 	.word	0x08002d5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d046      	beq.n	8002d62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd8:	e043      	b.n	8002d62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce2:	d140      	bne.n	8002d66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce8:	e03d      	b.n	8002d66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf2:	d121      	bne.n	8002d38 <DMA_CheckFifoParam+0xa8>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d837      	bhi.n	8002d6a <DMA_CheckFifoParam+0xda>
 8002cfa:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <DMA_CheckFifoParam+0x70>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d11 	.word	0x08002d11
 8002d04:	08002d17 	.word	0x08002d17
 8002d08:	08002d11 	.word	0x08002d11
 8002d0c:	08002d29 	.word	0x08002d29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      break;
 8002d14:	e030      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d025      	beq.n	8002d6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d26:	e022      	b.n	8002d6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d30:	d11f      	bne.n	8002d72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d36:	e01c      	b.n	8002d72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d903      	bls.n	8002d46 <DMA_CheckFifoParam+0xb6>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d003      	beq.n	8002d4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d44:	e018      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4a:	e015      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e00b      	b.n	8002d76 <DMA_CheckFifoParam+0xe6>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e00a      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
 8002d64:	e008      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d66:	bf00      	nop
 8002d68:	e006      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e004      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e002      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <DMA_CheckFifoParam+0xe8>
      break;
 8002d76:	bf00      	nop
    }
  } 
  
  return status; 
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop

08002d88 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002d98:	4baa      	ldr	r3, [pc, #680]	; (8003044 <HAL_ETH_Init+0x2bc>)
 8002d9a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e183      	b.n	80030b6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f004 ff42 	bl	8007c4c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	4b9e      	ldr	r3, [pc, #632]	; (8003048 <HAL_ETH_Init+0x2c0>)
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	4a9d      	ldr	r2, [pc, #628]	; (8003048 <HAL_ETH_Init+0x2c0>)
 8002dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd8:	4b9b      	ldr	r3, [pc, #620]	; (8003048 <HAL_ETH_Init+0x2c0>)
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002de4:	4b99      	ldr	r3, [pc, #612]	; (800304c <HAL_ETH_Init+0x2c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a98      	ldr	r2, [pc, #608]	; (800304c <HAL_ETH_Init+0x2c4>)
 8002dea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002df0:	4b96      	ldr	r3, [pc, #600]	; (800304c <HAL_ETH_Init+0x2c4>)
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4994      	ldr	r1, [pc, #592]	; (800304c <HAL_ETH_Init+0x2c4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e14:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e16:	f7ff fad7 	bl	80023c8 <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002e1c:	e011      	b.n	8002e42 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002e1e:	f7ff fad3 	bl	80023c8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e2c:	d909      	bls.n	8002e42 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e139      	b.n	80030b6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e4      	bne.n	8002e1e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f023 031c 	bic.w	r3, r3, #28
 8002e62:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e64:	f001 ff8e 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8002e68:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	4a78      	ldr	r2, [pc, #480]	; (8003050 <HAL_ETH_Init+0x2c8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d908      	bls.n	8002e84 <HAL_ETH_Init+0xfc>
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4a77      	ldr	r2, [pc, #476]	; (8003054 <HAL_ETH_Init+0x2cc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d804      	bhi.n	8002e84 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f043 0308 	orr.w	r3, r3, #8
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e027      	b.n	8002ed4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4a73      	ldr	r2, [pc, #460]	; (8003054 <HAL_ETH_Init+0x2cc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d908      	bls.n	8002e9e <HAL_ETH_Init+0x116>
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	4a6d      	ldr	r2, [pc, #436]	; (8003044 <HAL_ETH_Init+0x2bc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d204      	bcs.n	8002e9e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f043 030c 	orr.w	r3, r3, #12
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	e01a      	b.n	8002ed4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_ETH_Init+0x2bc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d303      	bcc.n	8002eae <HAL_ETH_Init+0x126>
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4a6b      	ldr	r2, [pc, #428]	; (8003058 <HAL_ETH_Init+0x2d0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d911      	bls.n	8002ed2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4a69      	ldr	r2, [pc, #420]	; (8003058 <HAL_ETH_Init+0x2d0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d908      	bls.n	8002ec8 <HAL_ETH_Init+0x140>
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4a68      	ldr	r2, [pc, #416]	; (800305c <HAL_ETH_Init+0x2d4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d804      	bhi.n	8002ec8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	e005      	b.n	8002ed4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f043 0310 	orr.w	r3, r3, #16
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	e000      	b.n	8002ed4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002ed2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002edc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fb98 	bl	8003618 <HAL_ETH_WritePHYRegister>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002ef2:	6939      	ldr	r1, [r7, #16]
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fd4d 	bl	8003994 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0d7      	b.n	80030b6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002f06:	20ff      	movs	r0, #255	; 0xff
 8002f08:	f7ff fa6a 	bl	80023e0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a5 	beq.w	8003060 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f16:	f7ff fa57 	bl	80023c8 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	461a      	mov	r2, r3
 8002f22:	2101      	movs	r1, #1
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fb0f 	bl	8003548 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002f2a:	f7ff fa4d 	bl	80023c8 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d90f      	bls.n	8002f5c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002f40:	6939      	ldr	r1, [r7, #16]
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fd26 	bl	8003994 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0ac      	b.n	80030b6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0da      	beq.n	8002f1c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002f66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fb53 	bl	8003618 <HAL_ETH_WritePHYRegister>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f7c:	6939      	ldr	r1, [r7, #16]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fd08 	bl	8003994 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e092      	b.n	80030b6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f90:	f7ff fa1a 	bl	80023c8 <HAL_GetTick>
 8002f94:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002f96:	f107 030c 	add.w	r3, r7, #12
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fad2 	bl	8003548 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002fa4:	f7ff fa10 	bl	80023c8 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d90f      	bls.n	8002fd6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002fba:	6939      	ldr	r1, [r7, #16]
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fce9 	bl	8003994 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e06f      	b.n	80030b6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0da      	beq.n	8002f96 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 faad 	bl	8003548 <HAL_ETH_ReadPHYRegister>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002ff8:	6939      	ldr	r1, [r7, #16]
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fcca 	bl	8003994 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003008:	2301      	movs	r3, #1
 800300a:	e054      	b.n	80030b6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	e002      	b.n	8003026 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	e035      	b.n	80030a4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	e030      	b.n	80030a4 <HAL_ETH_Init+0x31c>
 8003042:	bf00      	nop
 8003044:	03938700 	.word	0x03938700
 8003048:	40023800 	.word	0x40023800
 800304c:	40013800 	.word	0x40013800
 8003050:	01312cff 	.word	0x01312cff
 8003054:	02160ebf 	.word	0x02160ebf
 8003058:	05f5e0ff 	.word	0x05f5e0ff
 800305c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	08db      	lsrs	r3, r3, #3
 8003066:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003070:	4313      	orrs	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	2100      	movs	r1, #0
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 facd 	bl	8003618 <HAL_ETH_WritePHYRegister>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003088:	6939      	ldr	r1, [r7, #16]
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fc82 	bl	8003994 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e00c      	b.n	80030b6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800309c:	f640 70ff 	movw	r0, #4095	; 0xfff
 80030a0:	f7ff f99e 	bl	80023e0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80030a4:	6939      	ldr	r1, [r7, #16]
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fc74 	bl	8003994 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_ETH_DMATxDescListInit+0x20>
 80030dc:	2302      	movs	r3, #2
 80030de:	e052      	b.n	8003186 <HAL_ETH_DMATxDescListInit+0xc6>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e030      	b.n	800315e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	015b      	lsls	r3, r3, #5
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	4413      	add	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800310c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	461a      	mov	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	3b01      	subs	r3, #1
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	429a      	cmp	r2, r3
 800313e:	d208      	bcs.n	8003152 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	3301      	adds	r3, #1
 8003144:	015b      	lsls	r3, r3, #5
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4413      	add	r3, r2
 800314a:	461a      	mov	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	e002      	b.n	8003158 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3ca      	bcc.n	80030fc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003170:	3310      	adds	r3, #16
 8003172:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003192:	b480      	push	{r7}
 8003194:	b087      	sub	sp, #28
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ETH_DMARxDescListInit+0x20>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e056      	b.n	8003260 <HAL_ETH_DMARxDescListInit+0xce>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	e034      	b.n	8003238 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	015b      	lsls	r3, r3, #5
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031de:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80031e6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	461a      	mov	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	3b01      	subs	r3, #1
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	429a      	cmp	r2, r3
 8003218:	d208      	bcs.n	800322c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3301      	adds	r3, #1
 800321e:	015b      	lsls	r3, r3, #5
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	4413      	add	r3, r2
 8003224:	461a      	mov	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	e002      	b.n	8003232 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3301      	adds	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d3c6      	bcc.n	80031ce <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800324a:	330c      	adds	r3, #12
 800324c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_ETH_TransmitFrame+0x24>
 800328c:	2302      	movs	r3, #2
 800328e:	e0cd      	b.n	800342c <HAL_ETH_TransmitFrame+0x1c0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0b8      	b.n	800342c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	da09      	bge.n	80032d8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2212      	movs	r2, #18
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0a9      	b.n	800342c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032de:	4293      	cmp	r3, r2
 80032e0:	d915      	bls.n	800330e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4a54      	ldr	r2, [pc, #336]	; (8003438 <HAL_ETH_TransmitFrame+0x1cc>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	0a9b      	lsrs	r3, r3, #10
 80032ec:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	4b51      	ldr	r3, [pc, #324]	; (8003438 <HAL_ETH_TransmitFrame+0x1cc>)
 80032f2:	fba3 1302 	umull	r1, r3, r3, r2
 80032f6:	0a9b      	lsrs	r3, r3, #10
 80032f8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3301      	adds	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e001      	b.n	8003312 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800330e:	2301      	movs	r3, #1
 8003310:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d11c      	bne.n	8003352 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003326:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003332:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003342:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	461a      	mov	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003350:	e04b      	b.n	80033ea <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	e044      	b.n	80033e2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003366:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d107      	bne.n	800337e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800337c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003386:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3b01      	subs	r3, #1
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	429a      	cmp	r2, r3
 8003390:	d116      	bne.n	80033c0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80033a0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <HAL_ETH_TransmitFrame+0x1d0>)
 80033a6:	fb02 f203 	mul.w	r2, r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80033b2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80033be:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033ce:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	3301      	adds	r3, #1
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d3b6      	bcc.n	8003358 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f2:	3314      	adds	r3, #20
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003406:	3314      	adds	r3, #20
 8003408:	2204      	movs	r2, #4
 800340a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003414:	3304      	adds	r3, #4
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	ac02b00b 	.word	0xac02b00b
 800343c:	fffffa0c 	.word	0xfffffa0c

08003440 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_ETH_GetReceivedFrame+0x1a>
 8003456:	2302      	movs	r3, #2
 8003458:	e070      	b.n	800353c <HAL_ETH_GetReceivedFrame+0xfc>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db5a      	blt.n	800352a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d030      	beq.n	80034e4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	2b01      	cmp	r3, #1
 8003492:	d103      	bne.n	800349c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80034b0:	3b04      	subs	r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e02b      	b.n	800353c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	461a      	mov	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	629a      	str	r2, [r3, #40]	; 0x28
 8003512:	e00a      	b.n	800352a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	461a      	mov	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	460b      	mov	r3, r1
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b82      	cmp	r3, #130	; 0x82
 8003568:	d101      	bne.n	800356e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800356a:	2302      	movs	r3, #2
 800356c:	e050      	b.n	8003610 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2282      	movs	r2, #130	; 0x82
 8003572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 031c 	and.w	r3, r3, #28
 8003584:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8a1b      	ldrh	r3, [r3, #16]
 800358a:	02db      	lsls	r3, r3, #11
 800358c:	b29b      	uxth	r3, r3
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003594:	897b      	ldrh	r3, [r7, #10]
 8003596:	019b      	lsls	r3, r3, #6
 8003598:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 0302 	bic.w	r3, r3, #2
 80035a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80035ba:	f7fe ff05 	bl	80023c8 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035c0:	e015      	b.n	80035ee <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80035c2:	f7fe ff01 	bl	80023c8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d309      	bcc.n	80035e6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e014      	b.n	8003610 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e4      	bne.n	80035c2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	460b      	mov	r3, r1
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b42      	cmp	r3, #66	; 0x42
 8003638:	d101      	bne.n	800363e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
 800363c:	e04e      	b.n	80036dc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2242      	movs	r2, #66	; 0x42
 8003642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 031c 	and.w	r3, r3, #28
 8003654:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8a1b      	ldrh	r3, [r3, #16]
 800365a:	02db      	lsls	r3, r3, #11
 800365c:	b29b      	uxth	r3, r3
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003664:	897b      	ldrh	r3, [r7, #10]
 8003666:	019b      	lsls	r3, r3, #6
 8003668:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003694:	f7fe fe98 	bl	80023c8 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800369a:	e015      	b.n	80036c8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800369c:	f7fe fe94 	bl	80023c8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036aa:	d309      	bcc.n	80036c0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e00d      	b.n	80036dc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e4      	bne.n	800369c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_ETH_Start+0x16>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e01f      	b.n	800373a <HAL_ETH_Start+0x56>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fb44 	bl	8003d98 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb7b 	bl	8003e0c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fc12 	bl	8003f40 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fbaf 	bl	8003e80 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fbdc 	bl	8003ee0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_ETH_Stop+0x16>
 8003754:	2302      	movs	r3, #2
 8003756:	e01f      	b.n	8003798 <HAL_ETH_Stop+0x56>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fba1 	bl	8003eb0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fbce 	bl	8003f10 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fb66 	bl	8003e46 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fbe0 	bl	8003f40 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb26 	bl	8003dd2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_ETH_ConfigMAC+0x1c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e0e4      	b.n	8003986 <HAL_ETH_ConfigMAC+0x1e6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80b1 	beq.w	8003936 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <HAL_ETH_ConfigMAC+0x1f0>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80037ec:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80037f2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80037f8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80037fe:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003804:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800380a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003810:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003816:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800381c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003822:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003828:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800382e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003846:	2001      	movs	r0, #1
 8003848:	f7fe fdca 	bl	80023e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800385c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003862:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003868:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800386e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003874:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800387a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003886:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003888:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003892:	2001      	movs	r0, #1
 8003894:	f7fe fda4 	bl	80023e0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038a8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038b2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80038c2:	4013      	ands	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80038d0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80038d6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80038dc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80038e2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80038e8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003900:	2001      	movs	r0, #1
 8003902:	f7fe fd6d 	bl	80023e0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003926:	2001      	movs	r0, #1
 8003928:	f7fe fd5a 	bl	80023e0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	61da      	str	r2, [r3, #28]
 8003934:	e01e      	b.n	8003974 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003944:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003966:	2001      	movs	r0, #1
 8003968:	f7fe fd3a 	bl	80023e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	ff20810f 	.word	0xff20810f

08003994 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b0b0      	sub	sp, #192	; 0xc0
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039b0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80039be:	2300      	movs	r3, #0
 80039c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80039c2:	2300      	movs	r3, #0
 80039c4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d103      	bne.n	80039e2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80039da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039de:	663b      	str	r3, [r7, #96]	; 0x60
 80039e0:	e001      	b.n	80039e6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80039e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039ea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80039f0:	2300      	movs	r3, #0
 80039f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003a00:	2340      	movs	r3, #64	; 0x40
 8003a02:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a6c:	4bac      	ldr	r3, [pc, #688]	; (8003d20 <ETH_MACDMAConfig+0x38c>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003a78:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003a7c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003a80:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003a86:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003a8a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003a8e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003a94:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003a98:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003a9c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003aa0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003aa4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003aa8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003aaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003abc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f7fe fc89 	bl	80023e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ad6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ad8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003adc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003ae0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003ae6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003aec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003af2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003af8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003afc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003b04:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003b06:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b12:	2001      	movs	r0, #1
 8003b14:	f7fe fc64 	bl	80023e0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b20:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b2a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003b34:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b44:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003b48:	4013      	ands	r3, r2
 8003b4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b52:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003b54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003b58:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003b5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003b5e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003b60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003b64:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003b6a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003b6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003b70:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003b72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b84:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b90:	2001      	movs	r0, #1
 8003b92:	f7fe fc25 	bl	80023e0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b9e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003ba0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003ba4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f7fe fc10 	bl	80023e0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bc8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bd2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bdc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003bee:	2304      	movs	r3, #4
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003bfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c08:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003c12:	2300      	movs	r3, #0
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1e:	3318      	adds	r3, #24
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <ETH_MACDMAConfig+0x390>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003c32:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003c34:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003c36:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003c38:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003c3a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003c3c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003c3e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003c40:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003c42:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003c44:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003c46:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003c48:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003c4a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003c4e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003c52:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c66:	3318      	adds	r3, #24
 8003c68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c76:	3318      	adds	r3, #24
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f7fe fbae 	bl	80023e0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c8c:	3318      	adds	r3, #24
 8003c8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c92:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003c98:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003c9c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003ca0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003ca4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003caa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003cae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f7fe fb87 	bl	80023e0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cde:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d10f      	bne.n	8003d08 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf0:	331c      	adds	r3, #28
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d04:	331c      	adds	r3, #28
 8003d06:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2100      	movs	r1, #0
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f809 	bl	8003d28 <ETH_MACAddressConfig>
}
 8003d16:	bf00      	nop
 8003d18:	37c0      	adds	r7, #192	; 0xc0
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	ff20810f 	.word	0xff20810f
 8003d24:	f8de3f23 	.word	0xf8de3f23

08003d28 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3305      	adds	r3, #5
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	3204      	adds	r2, #4
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <ETH_MACAddressConfig+0x68>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3303      	adds	r3, #3
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	061a      	lsls	r2, r3, #24
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3301      	adds	r3, #1
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	7812      	ldrb	r2, [r2, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <ETH_MACAddressConfig+0x6c>)
 8003d7a:	4413      	add	r3, r2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	6013      	str	r3, [r2, #0]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40028040 	.word	0x40028040
 8003d94:	40028044 	.word	0x40028044

08003d98 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0208 	orr.w	r2, r2, #8
 8003db2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f000 f8e9 	bl	8003f94 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0208 	bic.w	r2, r2, #8
 8003dec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003df6:	2001      	movs	r0, #1
 8003df8:	f000 f8cc 	bl	8003f94 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0204 	orr.w	r2, r2, #4
 8003e26:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003e30:	2001      	movs	r0, #1
 8003e32:	f000 f8af 	bl	8003f94 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	601a      	str	r2, [r3, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0204 	bic.w	r2, r2, #4
 8003e60:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	f000 f892 	bl	8003f94 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e90:	3318      	adds	r3, #24
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec0:	3318      	adds	r3, #24
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed0:	3318      	adds	r3, #24
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef0:	3318      	adds	r3, #24
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0202 	orr.w	r2, r2, #2
 8003efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f00:	3318      	adds	r3, #24
 8003f02:	601a      	str	r2, [r3, #0]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f20:	3318      	adds	r3, #24
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0202 	bic.w	r2, r2, #2
 8003f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f30:	3318      	adds	r3, #24
 8003f32:	601a      	str	r2, [r3, #0]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f54:	3318      	adds	r3, #24
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f64:	3318      	adds	r3, #24
 8003f66:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f70:	3318      	adds	r3, #24
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003f76:	2001      	movs	r0, #1
 8003f78:	f000 f80c 	bl	8003f94 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f86:	3318      	adds	r3, #24
 8003f88:	601a      	str	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <ETH_Delay+0x38>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0b      	ldr	r2, [pc, #44]	; (8003fd0 <ETH_Delay+0x3c>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	0a5b      	lsrs	r3, r3, #9
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003fb0:	bf00      	nop
  } 
  while (Delay --);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1e5a      	subs	r2, r3, #1
 8003fb6:	60fa      	str	r2, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f9      	bne.n	8003fb0 <ETH_Delay+0x1c>
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	2000049c 	.word	0x2000049c
 8003fd0:	10624dd3 	.word	0x10624dd3

08003fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	e16b      	b.n	80042c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	429a      	cmp	r2, r3
 800400a:	f040 815a 	bne.w	80042c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d005      	beq.n	8004026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004022:	2b02      	cmp	r3, #2
 8004024:	d130      	bne.n	8004088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	2203      	movs	r2, #3
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800405c:	2201      	movs	r2, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f003 0201 	and.w	r2, r3, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b03      	cmp	r3, #3
 8004092:	d017      	beq.n	80040c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	2203      	movs	r2, #3
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d123      	bne.n	8004118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	08da      	lsrs	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3208      	adds	r2, #8
 80040d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	08da      	lsrs	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3208      	adds	r2, #8
 8004112:	69b9      	ldr	r1, [r7, #24]
 8004114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0203 	and.w	r2, r3, #3
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80b4 	beq.w	80042c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	4b60      	ldr	r3, [pc, #384]	; (80042e0 <HAL_GPIO_Init+0x30c>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	4a5f      	ldr	r2, [pc, #380]	; (80042e0 <HAL_GPIO_Init+0x30c>)
 8004164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004168:	6453      	str	r3, [r2, #68]	; 0x44
 800416a:	4b5d      	ldr	r3, [pc, #372]	; (80042e0 <HAL_GPIO_Init+0x30c>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004176:	4a5b      	ldr	r2, [pc, #364]	; (80042e4 <HAL_GPIO_Init+0x310>)
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	3302      	adds	r3, #2
 800417e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	220f      	movs	r2, #15
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a52      	ldr	r2, [pc, #328]	; (80042e8 <HAL_GPIO_Init+0x314>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d02b      	beq.n	80041fa <HAL_GPIO_Init+0x226>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a51      	ldr	r2, [pc, #324]	; (80042ec <HAL_GPIO_Init+0x318>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d025      	beq.n	80041f6 <HAL_GPIO_Init+0x222>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a50      	ldr	r2, [pc, #320]	; (80042f0 <HAL_GPIO_Init+0x31c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01f      	beq.n	80041f2 <HAL_GPIO_Init+0x21e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4f      	ldr	r2, [pc, #316]	; (80042f4 <HAL_GPIO_Init+0x320>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d019      	beq.n	80041ee <HAL_GPIO_Init+0x21a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4e      	ldr	r2, [pc, #312]	; (80042f8 <HAL_GPIO_Init+0x324>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_GPIO_Init+0x216>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4d      	ldr	r2, [pc, #308]	; (80042fc <HAL_GPIO_Init+0x328>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00d      	beq.n	80041e6 <HAL_GPIO_Init+0x212>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a4c      	ldr	r2, [pc, #304]	; (8004300 <HAL_GPIO_Init+0x32c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <HAL_GPIO_Init+0x20e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a4b      	ldr	r2, [pc, #300]	; (8004304 <HAL_GPIO_Init+0x330>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <HAL_GPIO_Init+0x20a>
 80041da:	2307      	movs	r3, #7
 80041dc:	e00e      	b.n	80041fc <HAL_GPIO_Init+0x228>
 80041de:	2308      	movs	r3, #8
 80041e0:	e00c      	b.n	80041fc <HAL_GPIO_Init+0x228>
 80041e2:	2306      	movs	r3, #6
 80041e4:	e00a      	b.n	80041fc <HAL_GPIO_Init+0x228>
 80041e6:	2305      	movs	r3, #5
 80041e8:	e008      	b.n	80041fc <HAL_GPIO_Init+0x228>
 80041ea:	2304      	movs	r3, #4
 80041ec:	e006      	b.n	80041fc <HAL_GPIO_Init+0x228>
 80041ee:	2303      	movs	r3, #3
 80041f0:	e004      	b.n	80041fc <HAL_GPIO_Init+0x228>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e002      	b.n	80041fc <HAL_GPIO_Init+0x228>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <HAL_GPIO_Init+0x228>
 80041fa:	2300      	movs	r3, #0
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	f002 0203 	and.w	r2, r2, #3
 8004202:	0092      	lsls	r2, r2, #2
 8004204:	4093      	lsls	r3, r2
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800420c:	4935      	ldr	r1, [pc, #212]	; (80042e4 <HAL_GPIO_Init+0x310>)
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	089b      	lsrs	r3, r3, #2
 8004212:	3302      	adds	r3, #2
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800421a:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <HAL_GPIO_Init+0x334>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800423e:	4a32      	ldr	r2, [pc, #200]	; (8004308 <HAL_GPIO_Init+0x334>)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004244:	4b30      	ldr	r3, [pc, #192]	; (8004308 <HAL_GPIO_Init+0x334>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004268:	4a27      	ldr	r2, [pc, #156]	; (8004308 <HAL_GPIO_Init+0x334>)
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800426e:	4b26      	ldr	r3, [pc, #152]	; (8004308 <HAL_GPIO_Init+0x334>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_GPIO_Init+0x334>)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_GPIO_Init+0x334>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042bc:	4a12      	ldr	r2, [pc, #72]	; (8004308 <HAL_GPIO_Init+0x334>)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3301      	adds	r3, #1
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	f67f ae90 	bls.w	8003ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3724      	adds	r7, #36	; 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40013800 	.word	0x40013800
 80042e8:	40020000 	.word	0x40020000
 80042ec:	40020400 	.word	0x40020400
 80042f0:	40020800 	.word	0x40020800
 80042f4:	40020c00 	.word	0x40020c00
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40021400 	.word	0x40021400
 8004300:	40021800 	.word	0x40021800
 8004304:	40021c00 	.word	0x40021c00
 8004308:	40013c00 	.word	0x40013c00

0800430c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e0cd      	b.n	80044c4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004328:	2201      	movs	r2, #1
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	429a      	cmp	r2, r3
 8004340:	f040 80bd 	bne.w	80044be <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004344:	4a65      	ldr	r2, [pc, #404]	; (80044dc <HAL_GPIO_DeInit+0x1d0>)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	3302      	adds	r3, #2
 800434c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004350:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	220f      	movs	r2, #15
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a5d      	ldr	r2, [pc, #372]	; (80044e0 <HAL_GPIO_DeInit+0x1d4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02b      	beq.n	80043c6 <HAL_GPIO_DeInit+0xba>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a5c      	ldr	r2, [pc, #368]	; (80044e4 <HAL_GPIO_DeInit+0x1d8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d025      	beq.n	80043c2 <HAL_GPIO_DeInit+0xb6>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a5b      	ldr	r2, [pc, #364]	; (80044e8 <HAL_GPIO_DeInit+0x1dc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01f      	beq.n	80043be <HAL_GPIO_DeInit+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a5a      	ldr	r2, [pc, #360]	; (80044ec <HAL_GPIO_DeInit+0x1e0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d019      	beq.n	80043ba <HAL_GPIO_DeInit+0xae>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a59      	ldr	r2, [pc, #356]	; (80044f0 <HAL_GPIO_DeInit+0x1e4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_GPIO_DeInit+0xaa>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a58      	ldr	r2, [pc, #352]	; (80044f4 <HAL_GPIO_DeInit+0x1e8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00d      	beq.n	80043b2 <HAL_GPIO_DeInit+0xa6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a57      	ldr	r2, [pc, #348]	; (80044f8 <HAL_GPIO_DeInit+0x1ec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <HAL_GPIO_DeInit+0xa2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a56      	ldr	r2, [pc, #344]	; (80044fc <HAL_GPIO_DeInit+0x1f0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_GPIO_DeInit+0x9e>
 80043a6:	2307      	movs	r3, #7
 80043a8:	e00e      	b.n	80043c8 <HAL_GPIO_DeInit+0xbc>
 80043aa:	2308      	movs	r3, #8
 80043ac:	e00c      	b.n	80043c8 <HAL_GPIO_DeInit+0xbc>
 80043ae:	2306      	movs	r3, #6
 80043b0:	e00a      	b.n	80043c8 <HAL_GPIO_DeInit+0xbc>
 80043b2:	2305      	movs	r3, #5
 80043b4:	e008      	b.n	80043c8 <HAL_GPIO_DeInit+0xbc>
 80043b6:	2304      	movs	r3, #4
 80043b8:	e006      	b.n	80043c8 <HAL_GPIO_DeInit+0xbc>
 80043ba:	2303      	movs	r3, #3
 80043bc:	e004      	b.n	80043c8 <HAL_GPIO_DeInit+0xbc>
 80043be:	2302      	movs	r3, #2
 80043c0:	e002      	b.n	80043c8 <HAL_GPIO_DeInit+0xbc>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_GPIO_DeInit+0xbc>
 80043c6:	2300      	movs	r3, #0
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	f002 0203 	and.w	r2, r2, #3
 80043ce:	0092      	lsls	r2, r2, #2
 80043d0:	4093      	lsls	r3, r2
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d132      	bne.n	800443e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80043d8:	4b49      	ldr	r3, [pc, #292]	; (8004500 <HAL_GPIO_DeInit+0x1f4>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	43db      	mvns	r3, r3
 80043e0:	4947      	ldr	r1, [pc, #284]	; (8004500 <HAL_GPIO_DeInit+0x1f4>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80043e6:	4b46      	ldr	r3, [pc, #280]	; (8004500 <HAL_GPIO_DeInit+0x1f4>)
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	4944      	ldr	r1, [pc, #272]	; (8004500 <HAL_GPIO_DeInit+0x1f4>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80043f4:	4b42      	ldr	r3, [pc, #264]	; (8004500 <HAL_GPIO_DeInit+0x1f4>)
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	4940      	ldr	r1, [pc, #256]	; (8004500 <HAL_GPIO_DeInit+0x1f4>)
 80043fe:	4013      	ands	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <HAL_GPIO_DeInit+0x1f4>)
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	43db      	mvns	r3, r3
 800440a:	493d      	ldr	r1, [pc, #244]	; (8004500 <HAL_GPIO_DeInit+0x1f4>)
 800440c:	4013      	ands	r3, r2
 800440e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	220f      	movs	r2, #15
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004420:	4a2e      	ldr	r2, [pc, #184]	; (80044dc <HAL_GPIO_DeInit+0x1d0>)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	3302      	adds	r3, #2
 8004428:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	43da      	mvns	r2, r3
 8004430:	482a      	ldr	r0, [pc, #168]	; (80044dc <HAL_GPIO_DeInit+0x1d0>)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	400a      	ands	r2, r1
 8004438:	3302      	adds	r3, #2
 800443a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2103      	movs	r1, #3
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	401a      	ands	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	08da      	lsrs	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3208      	adds	r2, #8
 800445c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	08d2      	lsrs	r2, r2, #3
 8004474:	4019      	ands	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3208      	adds	r2, #8
 800447a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	2103      	movs	r1, #3
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	401a      	ands	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	2101      	movs	r1, #1
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	401a      	ands	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	2103      	movs	r1, #3
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	401a      	ands	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	3301      	adds	r3, #1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	f67f af2e 	bls.w	8004328 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40013800 	.word	0x40013800
 80044e0:	40020000 	.word	0x40020000
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40020800 	.word	0x40020800
 80044ec:	40020c00 	.word	0x40020c00
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40021400 	.word	0x40021400
 80044f8:	40021800 	.word	0x40021800
 80044fc:	40021c00 	.word	0x40021c00
 8004500:	40013c00 	.word	0x40013c00

08004504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e264      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d075      	beq.n	800460e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004522:	4ba3      	ldr	r3, [pc, #652]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b04      	cmp	r3, #4
 800452c:	d00c      	beq.n	8004548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452e:	4ba0      	ldr	r3, [pc, #640]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004536:	2b08      	cmp	r3, #8
 8004538:	d112      	bne.n	8004560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453a:	4b9d      	ldr	r3, [pc, #628]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004546:	d10b      	bne.n	8004560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	4b99      	ldr	r3, [pc, #612]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d05b      	beq.n	800460c <HAL_RCC_OscConfig+0x108>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d157      	bne.n	800460c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e23f      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d106      	bne.n	8004578 <HAL_RCC_OscConfig+0x74>
 800456a:	4b91      	ldr	r3, [pc, #580]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a90      	ldr	r2, [pc, #576]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e01d      	b.n	80045b4 <HAL_RCC_OscConfig+0xb0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x98>
 8004582:	4b8b      	ldr	r3, [pc, #556]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a8a      	ldr	r2, [pc, #552]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	4b88      	ldr	r3, [pc, #544]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a87      	ldr	r2, [pc, #540]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0xb0>
 800459c:	4b84      	ldr	r3, [pc, #528]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a83      	ldr	r2, [pc, #524]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b81      	ldr	r3, [pc, #516]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a80      	ldr	r2, [pc, #512]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 80045ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d013      	beq.n	80045e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fd ff04 	bl	80023c8 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fd ff00 	bl	80023c8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e204      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0xc0>
 80045e2:	e014      	b.n	800460e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd fef0 	bl	80023c8 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fd feec 	bl	80023c8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b64      	cmp	r3, #100	; 0x64
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1f0      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	4b6c      	ldr	r3, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0xe8>
 800460a:	e000      	b.n	800460e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d063      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800461a:	4b65      	ldr	r3, [pc, #404]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004626:	4b62      	ldr	r3, [pc, #392]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462e:	2b08      	cmp	r3, #8
 8004630:	d11c      	bne.n	800466c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004632:	4b5f      	ldr	r3, [pc, #380]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d116      	bne.n	800466c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463e:	4b5c      	ldr	r3, [pc, #368]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_RCC_OscConfig+0x152>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d001      	beq.n	8004656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e1c4      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004656:	4b56      	ldr	r3, [pc, #344]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4952      	ldr	r1, [pc, #328]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	e03a      	b.n	80046e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004674:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <HAL_RCC_OscConfig+0x2b0>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fd fea5 	bl	80023c8 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004682:	f7fd fea1 	bl	80023c8 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1a5      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004694:	4b46      	ldr	r3, [pc, #280]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4940      	ldr	r1, [pc, #256]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]
 80046b4:	e015      	b.n	80046e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b6:	4b3f      	ldr	r3, [pc, #252]	; (80047b4 <HAL_RCC_OscConfig+0x2b0>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fe84 	bl	80023c8 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c4:	f7fd fe80 	bl	80023c8 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e184      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d030      	beq.n	8004750 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d016      	beq.n	8004724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f6:	4b30      	ldr	r3, [pc, #192]	; (80047b8 <HAL_RCC_OscConfig+0x2b4>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fd fe64 	bl	80023c8 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004704:	f7fd fe60 	bl	80023c8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e164      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004716:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x200>
 8004722:	e015      	b.n	8004750 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004724:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <HAL_RCC_OscConfig+0x2b4>)
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472a:	f7fd fe4d 	bl	80023c8 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004732:	f7fd fe49 	bl	80023c8 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e14d      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f0      	bne.n	8004732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80a0 	beq.w	800489e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004762:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	4a0e      	ldr	r2, [pc, #56]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477c:	6413      	str	r3, [r2, #64]	; 0x40
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_OscConfig+0x2ac>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCC_OscConfig+0x2b8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d121      	bne.n	80047de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800479a:	4b08      	ldr	r3, [pc, #32]	; (80047bc <HAL_RCC_OscConfig+0x2b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a07      	ldr	r2, [pc, #28]	; (80047bc <HAL_RCC_OscConfig+0x2b8>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a6:	f7fd fe0f 	bl	80023c8 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	e011      	b.n	80047d2 <HAL_RCC_OscConfig+0x2ce>
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	42470000 	.word	0x42470000
 80047b8:	42470e80 	.word	0x42470e80
 80047bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c0:	f7fd fe02 	bl	80023c8 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e106      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <HAL_RCC_OscConfig+0x4e4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d106      	bne.n	80047f4 <HAL_RCC_OscConfig+0x2f0>
 80047e6:	4b81      	ldr	r3, [pc, #516]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	4a80      	ldr	r2, [pc, #512]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	6713      	str	r3, [r2, #112]	; 0x70
 80047f2:	e01c      	b.n	800482e <HAL_RCC_OscConfig+0x32a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d10c      	bne.n	8004816 <HAL_RCC_OscConfig+0x312>
 80047fc:	4b7b      	ldr	r3, [pc, #492]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	4a7a      	ldr	r2, [pc, #488]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	6713      	str	r3, [r2, #112]	; 0x70
 8004808:	4b78      	ldr	r3, [pc, #480]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480c:	4a77      	ldr	r2, [pc, #476]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6713      	str	r3, [r2, #112]	; 0x70
 8004814:	e00b      	b.n	800482e <HAL_RCC_OscConfig+0x32a>
 8004816:	4b75      	ldr	r3, [pc, #468]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	4a74      	ldr	r2, [pc, #464]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	6713      	str	r3, [r2, #112]	; 0x70
 8004822:	4b72      	ldr	r3, [pc, #456]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a71      	ldr	r2, [pc, #452]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004828:	f023 0304 	bic.w	r3, r3, #4
 800482c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d015      	beq.n	8004862 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fd fdc7 	bl	80023c8 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fd fdc3 	bl	80023c8 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e0c5      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004854:	4b65      	ldr	r3, [pc, #404]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ee      	beq.n	800483e <HAL_RCC_OscConfig+0x33a>
 8004860:	e014      	b.n	800488c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004862:	f7fd fdb1 	bl	80023c8 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004868:	e00a      	b.n	8004880 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fd fdad 	bl	80023c8 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	; 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e0af      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004880:	4b5a      	ldr	r3, [pc, #360]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1ee      	bne.n	800486a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d105      	bne.n	800489e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004892:	4b56      	ldr	r3, [pc, #344]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	4a55      	ldr	r2, [pc, #340]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 809b 	beq.w	80049de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048a8:	4b50      	ldr	r3, [pc, #320]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d05c      	beq.n	800496e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d141      	bne.n	8004940 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048bc:	4b4c      	ldr	r3, [pc, #304]	; (80049f0 <HAL_RCC_OscConfig+0x4ec>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fd fd81 	bl	80023c8 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fd fd7d 	bl	80023c8 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e081      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048dc:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f0      	bne.n	80048ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	019b      	lsls	r3, r3, #6
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	3b01      	subs	r3, #1
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	061b      	lsls	r3, r3, #24
 800490c:	4937      	ldr	r1, [pc, #220]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004912:	4b37      	ldr	r3, [pc, #220]	; (80049f0 <HAL_RCC_OscConfig+0x4ec>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fd fd56 	bl	80023c8 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd fd52 	bl	80023c8 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e056      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x41c>
 800493e:	e04e      	b.n	80049de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004940:	4b2b      	ldr	r3, [pc, #172]	; (80049f0 <HAL_RCC_OscConfig+0x4ec>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004946:	f7fd fd3f 	bl	80023c8 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494e:	f7fd fd3b 	bl	80023c8 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e03f      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004960:	4b22      	ldr	r3, [pc, #136]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f0      	bne.n	800494e <HAL_RCC_OscConfig+0x44a>
 800496c:	e037      	b.n	80049de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e032      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800497a:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <HAL_RCC_OscConfig+0x4e8>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d028      	beq.n	80049da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d121      	bne.n	80049da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d11a      	bne.n	80049da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049aa:	4013      	ands	r3, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d111      	bne.n	80049da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	3b01      	subs	r3, #1
 80049c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d107      	bne.n	80049da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40007000 	.word	0x40007000
 80049ec:	40023800 	.word	0x40023800
 80049f0:	42470060 	.word	0x42470060

080049f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0cc      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b68      	ldr	r3, [pc, #416]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d90c      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b65      	ldr	r3, [pc, #404]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b63      	ldr	r3, [pc, #396]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0b8      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a48:	4b59      	ldr	r3, [pc, #356]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4a58      	ldr	r2, [pc, #352]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a52      	ldr	r2, [pc, #328]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	494d      	ldr	r1, [pc, #308]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d044      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d119      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e067      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad2:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4934      	ldr	r1, [pc, #208]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae4:	f7fd fc70 	bl	80023c8 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aec:	f7fd fc6c 	bl	80023c8 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e04f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 020c 	and.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d1eb      	bne.n	8004aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d20c      	bcs.n	8004b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e032      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4916      	ldr	r1, [pc, #88]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b66:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b7a:	f000 f821 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	490a      	ldr	r1, [pc, #40]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	5ccb      	ldrb	r3, [r1, r3]
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1c8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fd fbd0 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023c00 	.word	0x40023c00
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	0801c698 	.word	0x0801c698
 8004bb8:	2000049c 	.word	0x2000049c
 8004bbc:	200004a0 	.word	0x200004a0

08004bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd8:	4b67      	ldr	r3, [pc, #412]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d00d      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x40>
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	f200 80bd 	bhi.w	8004d64 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8004bf2:	e0b7      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b61      	ldr	r3, [pc, #388]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bf6:	60bb      	str	r3, [r7, #8]
       break;
 8004bf8:	e0b7      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bfa:	4b61      	ldr	r3, [pc, #388]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004bfc:	60bb      	str	r3, [r7, #8]
      break;
 8004bfe:	e0b4      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c00:	4b5d      	ldr	r3, [pc, #372]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c0a:	4b5b      	ldr	r3, [pc, #364]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d04d      	beq.n	8004cb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c16:	4b58      	ldr	r3, [pc, #352]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	ea02 0800 	and.w	r8, r2, r0
 8004c2e:	ea03 0901 	and.w	r9, r3, r1
 8004c32:	4640      	mov	r0, r8
 8004c34:	4649      	mov	r1, r9
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	014b      	lsls	r3, r1, #5
 8004c40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c44:	0142      	lsls	r2, r0, #5
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	ebb0 0008 	subs.w	r0, r0, r8
 8004c4e:	eb61 0109 	sbc.w	r1, r1, r9
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	018b      	lsls	r3, r1, #6
 8004c5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c60:	0182      	lsls	r2, r0, #6
 8004c62:	1a12      	subs	r2, r2, r0
 8004c64:	eb63 0301 	sbc.w	r3, r3, r1
 8004c68:	f04f 0000 	mov.w	r0, #0
 8004c6c:	f04f 0100 	mov.w	r1, #0
 8004c70:	00d9      	lsls	r1, r3, #3
 8004c72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c76:	00d0      	lsls	r0, r2, #3
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	eb12 0208 	adds.w	r2, r2, r8
 8004c80:	eb43 0309 	adc.w	r3, r3, r9
 8004c84:	f04f 0000 	mov.w	r0, #0
 8004c88:	f04f 0100 	mov.w	r1, #0
 8004c8c:	0259      	lsls	r1, r3, #9
 8004c8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c92:	0250      	lsls	r0, r2, #9
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	f7fb fafc 	bl	80002a0 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4613      	mov	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e04a      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb2:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	099b      	lsrs	r3, r3, #6
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	ea02 0400 	and.w	r4, r2, r0
 8004cca:	ea03 0501 	and.w	r5, r3, r1
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	014b      	lsls	r3, r1, #5
 8004cdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ce0:	0142      	lsls	r2, r0, #5
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	1b00      	subs	r0, r0, r4
 8004ce8:	eb61 0105 	sbc.w	r1, r1, r5
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	018b      	lsls	r3, r1, #6
 8004cf6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cfa:	0182      	lsls	r2, r0, #6
 8004cfc:	1a12      	subs	r2, r2, r0
 8004cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f04f 0100 	mov.w	r1, #0
 8004d0a:	00d9      	lsls	r1, r3, #3
 8004d0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d10:	00d0      	lsls	r0, r2, #3
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	1912      	adds	r2, r2, r4
 8004d18:	eb45 0303 	adc.w	r3, r5, r3
 8004d1c:	f04f 0000 	mov.w	r0, #0
 8004d20:	f04f 0100 	mov.w	r1, #0
 8004d24:	0299      	lsls	r1, r3, #10
 8004d26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d2a:	0290      	lsls	r0, r2, #10
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	f7fb fab0 	bl	80002a0 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4613      	mov	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	3301      	adds	r3, #1
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	60bb      	str	r3, [r7, #8]
      break;
 8004d62:	e002      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d66:	60bb      	str	r3, [r7, #8]
      break;
 8004d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	00f42400 	.word	0x00f42400
 8004d80:	007a1200 	.word	0x007a1200

08004d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d88:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	2000049c 	.word	0x2000049c

08004d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004da0:	f7ff fff0 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0a9b      	lsrs	r3, r3, #10
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4903      	ldr	r1, [pc, #12]	; (8004dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	0801c6a8 	.word	0x0801c6a8

08004dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dc8:	f7ff ffdc 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	0b5b      	lsrs	r3, r3, #13
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4903      	ldr	r1, [pc, #12]	; (8004de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40023800 	.word	0x40023800
 8004de8:	0801c6a8 	.word	0x0801c6a8

08004dec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e022      	b.n	8004e44 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d105      	bne.n	8004e16 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fc fbf3 	bl	80015fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2203      	movs	r2, #3
 8004e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f814 	bl	8004e4c <HAL_SD_InitCard>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e00a      	b.n	8004e44 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e4c:	b5b0      	push	{r4, r5, r7, lr}
 8004e4e:	b08e      	sub	sp, #56	; 0x38
 8004e50:	af04      	add	r7, sp, #16
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004e68:	2376      	movs	r3, #118	; 0x76
 8004e6a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681d      	ldr	r5, [r3, #0]
 8004e70:	466c      	mov	r4, sp
 8004e72:	f107 0314 	add.w	r3, r7, #20
 8004e76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e7e:	f107 0308 	add.w	r3, r7, #8
 8004e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e84:	4628      	mov	r0, r5
 8004e86:	f001 fdf5 	bl	8006a74 <SDIO_Init>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e04c      	b.n	8004f36 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004e9c:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <HAL_SD_InitCard+0xf4>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 fe2d 	bl	8006b06 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004eac:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <HAL_SD_InitCard+0xf4>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f001 f804 	bl	8005ec0 <SD_PowerON>
 8004eb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e02e      	b.n	8004f36 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 ff25 	bl	8005d28 <SD_InitCard>
 8004ede:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e01b      	b.n	8004f36 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 fe90 	bl	8006c2c <SDMMC_CmdBlockLength>
 8004f0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00f      	beq.n	8004f34 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a0a      	ldr	r2, [pc, #40]	; (8004f44 <HAL_SD_InitCard+0xf8>)
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3728      	adds	r7, #40	; 0x28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	422580a0 	.word	0x422580a0
 8004f44:	004005ff 	.word	0x004005ff

08004f48 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08c      	sub	sp, #48	; 0x30
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d107      	bne.n	8004f70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0c0      	b.n	80050f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	f040 80b9 	bne.w	80050f0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	441a      	add	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d907      	bls.n	8004fa2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e0a7      	b.n	80050f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004fc0:	f043 0302 	orr.w	r3, r3, #2
 8004fc4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	4a4c      	ldr	r2, [pc, #304]	; (80050fc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	4a4b      	ldr	r2, [pc, #300]	; (8005100 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004fd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	2200      	movs	r2, #0
 8004fdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3380      	adds	r3, #128	; 0x80
 800500c:	4619      	mov	r1, r3
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	025b      	lsls	r3, r3, #9
 8005014:	089b      	lsrs	r3, r3, #2
 8005016:	f7fd fbc7 	bl	80027a8 <HAL_DMA_Start_IT>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d017      	beq.n	8005050 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800502e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a33      	ldr	r2, [pc, #204]	; (8005104 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e050      	b.n	80050f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005050:	4b2d      	ldr	r3, [pc, #180]	; (8005108 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	2b01      	cmp	r3, #1
 800505c:	d002      	beq.n	8005064 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	025b      	lsls	r3, r3, #9
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005068:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	025b      	lsls	r3, r3, #9
 800506e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005070:	2390      	movs	r3, #144	; 0x90
 8005072:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005074:	2302      	movs	r3, #2
 8005076:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005078:	2300      	movs	r3, #0
 800507a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800507c:	2301      	movs	r3, #1
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f107 0210 	add.w	r2, r7, #16
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f001 fda2 	bl	8006bd4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d90a      	bls.n	80050ac <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2282      	movs	r2, #130	; 0x82
 800509a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 fe06 	bl	8006cb4 <SDMMC_CmdReadMultiBlock>
 80050a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80050aa:	e009      	b.n	80050c0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2281      	movs	r2, #129	; 0x81
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 fdd9 	bl	8006c70 <SDMMC_CmdReadSingleBlock>
 80050be:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d012      	beq.n	80050ec <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a0e      	ldr	r2, [pc, #56]	; (8005104 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	431a      	orrs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e002      	b.n	80050f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3730      	adds	r7, #48	; 0x30
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	08005b37 	.word	0x08005b37
 8005100:	08005ba9 	.word	0x08005ba9
 8005104:	004005ff 	.word	0x004005ff
 8005108:	4225858c 	.word	0x4225858c

0800510c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	; 0x30
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d107      	bne.n	8005134 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0c5      	b.n	80052c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	f040 80be 	bne.w	80052be <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	429a      	cmp	r2, r3
 8005154:	d907      	bls.n	8005166 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e0ac      	b.n	80052c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2203      	movs	r2, #3
 800516a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8005184:	f043 0302 	orr.w	r3, r3, #2
 8005188:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	4a4e      	ldr	r2, [pc, #312]	; (80052c8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	4a4d      	ldr	r2, [pc, #308]	; (80052cc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005198:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	2200      	movs	r2, #0
 80051a0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d002      	beq.n	80051b0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	025b      	lsls	r3, r3, #9
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d90a      	bls.n	80051cc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	22a0      	movs	r2, #160	; 0xa0
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 fdba 	bl	8006d3c <SDMMC_CmdWriteMultiBlock>
 80051c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80051ca:	e009      	b.n	80051e0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2290      	movs	r2, #144	; 0x90
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 fd8d 	bl	8006cf8 <SDMMC_CmdWriteSingleBlock>
 80051de:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d012      	beq.n	800520c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a39      	ldr	r2, [pc, #228]	; (80052d0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e059      	b.n	80052c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800520c:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005216:	2240      	movs	r2, #64	; 0x40
 8005218:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3380      	adds	r3, #128	; 0x80
 8005242:	461a      	mov	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	025b      	lsls	r3, r3, #9
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	f7fd faad 	bl	80027a8 <HAL_DMA_Start_IT>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01c      	beq.n	800528e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8005262:	f023 0302 	bic.w	r3, r3, #2
 8005266:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e018      	b.n	80052c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005292:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	025b      	lsls	r3, r3, #9
 8005298:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800529a:	2390      	movs	r3, #144	; 0x90
 800529c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80052a6:	2301      	movs	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f107 0210 	add.w	r2, r7, #16
 80052b2:	4611      	mov	r1, r2
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fc8d 	bl	8006bd4 <SDIO_ConfigData>

      return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e000      	b.n	80052c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
  }
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3730      	adds	r7, #48	; 0x30
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	08005b0d 	.word	0x08005b0d
 80052cc:	08005ba9 	.word	0x08005ba9
 80052d0:	004005ff 	.word	0x004005ff
 80052d4:	4225858c 	.word	0x4225858c

080052d8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_SD_IRQHandler+0x2e>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fffd 	bl	80062fe <SD_Read_IT>
 8005304:	e165      	b.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 808f 	beq.w	8005434 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800531e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800532e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005332:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0201 	bic.w	r2, r2, #1
 8005342:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d039      	beq.n	80053c2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <HAL_SD_IRQHandler+0x8a>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d011      	beq.n	8005386 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f001 fd0a 	bl	8006d80 <SDMMC_CmdStopTransfer>
 800536c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f92f 	bl	80055e4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f240 523a 	movw	r2, #1338	; 0x53a
 800538e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_SD_IRQHandler+0xda>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f002 f978 	bl	80076a8 <HAL_SD_RxCpltCallback>
 80053b8:	e10b      	b.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f002 f96a 	bl	8007694 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80053c0:	e107      	b.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8102 	beq.w	80055d2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d011      	beq.n	80053fc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 fccf 	bl	8006d80 <SDMMC_CmdStopTransfer>
 80053e2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8f4 	bl	80055e4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	f040 80e5 	bne.w	80055d2 <HAL_SD_IRQHandler+0x2fa>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 80df 	bne.w	80055d2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0208 	bic.w	r2, r2, #8
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f002 f931 	bl	8007694 <HAL_SD_TxCpltCallback>
}
 8005432:	e0ce      	b.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d008      	beq.n	8005454 <HAL_SD_IRQHandler+0x17c>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 ffa7 	bl	80063a0 <SD_Write_IT>
 8005452:	e0be      	b.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545a:	f240 233a 	movw	r3, #570	; 0x23a
 800545e:	4013      	ands	r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80b6 	beq.w	80055d2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	f043 0202 	orr.w	r2, r3, #2
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	f043 0208 	orr.w	r2, r3, #8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	f043 0210 	orr.w	r2, r3, #16
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	f043 0208 	orr.w	r2, r3, #8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f240 723a 	movw	r2, #1850	; 0x73a
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005500:	f023 0302 	bic.w	r3, r3, #2
 8005504:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f001 fc38 	bl	8006d80 <SDMMC_CmdStopTransfer>
 8005510:	4602      	mov	r2, r0
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f855 	bl	80055e4 <HAL_SD_ErrorCallback>
}
 800553a:	e04a      	b.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b00      	cmp	r3, #0
 8005544:	d045      	beq.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_SD_IRQHandler+0x282>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d011      	beq.n	800557e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555e:	4a1f      	ldr	r2, [pc, #124]	; (80055dc <HAL_SD_IRQHandler+0x304>)
 8005560:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	4618      	mov	r0, r3
 8005568:	f7fd f976 	bl	8002858 <HAL_DMA_Abort_IT>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d02f      	beq.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fb68 	bl	8005c4c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800557c:	e029      	b.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <HAL_SD_IRQHandler+0x2ba>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d011      	beq.n	80055b6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <HAL_SD_IRQHandler+0x308>)
 8005598:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fd f95a 	bl	8002858 <HAL_DMA_Abort_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d013      	beq.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fb83 	bl	8005cba <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80055b4:	e00d      	b.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f002 f858 	bl	8007680 <HAL_SD_AbortCallback>
}
 80055d0:	e7ff      	b.n	80055d2 <HAL_SD_IRQHandler+0x2fa>
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	08005c4d 	.word	0x08005c4d
 80055e0:	08005cbb 	.word	0x08005cbb

080055e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005606:	0f9b      	lsrs	r3, r3, #30
 8005608:	b2da      	uxtb	r2, r3
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005612:	0e9b      	lsrs	r3, r3, #26
 8005614:	b2db      	uxtb	r3, r3
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	b2da      	uxtb	r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005624:	0e1b      	lsrs	r3, r3, #24
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	b2da      	uxtb	r2, r3
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	b2da      	uxtb	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	b2da      	uxtb	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564e:	b2da      	uxtb	r2, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005658:	0d1b      	lsrs	r3, r3, #20
 800565a:	b29a      	uxth	r2, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	b2da      	uxtb	r2, r3
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005676:	0bdb      	lsrs	r3, r3, #15
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005688:	0b9b      	lsrs	r3, r3, #14
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	b2da      	uxtb	r2, r3
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800569a:	0b5b      	lsrs	r3, r3, #13
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ac:	0b1b      	lsrs	r3, r3, #12
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2200      	movs	r2, #0
 80056be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d163      	bne.n	8005790 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056cc:	009a      	lsls	r2, r3, #2
 80056ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056d2:	4013      	ands	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80056d8:	0f92      	lsrs	r2, r2, #30
 80056da:	431a      	orrs	r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e4:	0edb      	lsrs	r3, r3, #27
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f6:	0e1b      	lsrs	r3, r3, #24
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005708:	0d5b      	lsrs	r3, r3, #21
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	b2da      	uxtb	r2, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800571a:	0c9b      	lsrs	r3, r3, #18
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	b2da      	uxtb	r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572c:	0bdb      	lsrs	r3, r3, #15
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	b2da      	uxtb	r2, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	7e1b      	ldrb	r3, [r3, #24]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	3302      	adds	r3, #2
 8005750:	2201      	movs	r2, #1
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800575a:	fb02 f203 	mul.w	r2, r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	7a1b      	ldrb	r3, [r3, #8]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	2201      	movs	r2, #1
 800576e:	409a      	lsls	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800577c:	0a52      	lsrs	r2, r2, #9
 800577e:	fb02 f203 	mul.w	r2, r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800578c:	661a      	str	r2, [r3, #96]	; 0x60
 800578e:	e031      	b.n	80057f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005794:	2b01      	cmp	r3, #1
 8005796:	d11d      	bne.n	80057d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	431a      	orrs	r2, r3
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	3301      	adds	r3, #1
 80057b4:	029a      	lsls	r2, r3, #10
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	661a      	str	r2, [r3, #96]	; 0x60
 80057d2:	e00f      	b.n	80057f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a58      	ldr	r2, [pc, #352]	; (800593c <HAL_SD_GetCardCSD+0x344>)
 80057da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e09d      	b.n	8005930 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f8:	0b9b      	lsrs	r3, r3, #14
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	b2da      	uxtb	r2, r3
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580a:	09db      	lsrs	r3, r3, #7
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005812:	b2da      	uxtb	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005822:	b2da      	uxtb	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	0fdb      	lsrs	r3, r3, #31
 800582e:	b2da      	uxtb	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	0f5b      	lsrs	r3, r3, #29
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	b2da      	uxtb	r2, r3
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	0e9b      	lsrs	r3, r3, #26
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	b2da      	uxtb	r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	0d9b      	lsrs	r3, r3, #22
 800585e:	b2db      	uxtb	r3, r3
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	b2da      	uxtb	r2, r3
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	0d5b      	lsrs	r3, r3, #21
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	b2da      	uxtb	r2, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	b2da      	uxtb	r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	0bdb      	lsrs	r3, r3, #15
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	0b9b      	lsrs	r3, r3, #14
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	0b5b      	lsrs	r3, r3, #13
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	0b1b      	lsrs	r3, r3, #12
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	0a9b      	lsrs	r3, r3, #10
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	b2da      	uxtb	r2, r3
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800591e:	b2da      	uxtb	r2, r3
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	004005ff 	.word	0x004005ff

08005940 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005998:	b5b0      	push	{r4, r5, r7, lr}
 800599a:	b08e      	sub	sp, #56	; 0x38
 800599c:	af04      	add	r7, sp, #16
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2203      	movs	r2, #3
 80059ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d02e      	beq.n	8005a16 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059be:	d106      	bne.n	80059ce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
 80059cc:	e029      	b.n	8005a22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d4:	d10a      	bne.n	80059ec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fb28 	bl	800602c <SD_WideBus_Enable>
 80059dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
 80059ea:	e01a      	b.n	8005a22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fb65 	bl	80060c2 <SD_WideBus_Disable>
 80059f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38
 8005a06:	e00c      	b.n	8005a22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
 8005a14:	e005      	b.n	8005a22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005a30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a40:	e01f      	b.n	8005a82 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681d      	ldr	r5, [r3, #0]
 8005a68:	466c      	mov	r4, sp
 8005a6a:	f107 0314 	add.w	r3, r7, #20
 8005a6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a76:	f107 0308 	add.w	r3, r7, #8
 8005a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 fff9 	bl	8006a74 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 f8ce 	bl	8006c2c <SDMMC_CmdBlockLength>
 8005a90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005a9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	004005ff 	.word	0x004005ff

08005acc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ad8:	f107 030c 	add.w	r3, r7, #12
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa7c 	bl	8005fdc <SD_SendStatus>
 8005ae4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	0a5b      	lsrs	r3, r3, #9
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005b02:	693b      	ldr	r3, [r7, #16]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	2b82      	cmp	r3, #130	; 0x82
 8005b4a:	d111      	bne.n	8005b70 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 f915 	bl	8006d80 <SDMMC_CmdStopTransfer>
 8005b56:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d008      	beq.n	8005b70 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff fd3a 	bl	80055e4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0208 	bic.w	r2, r2, #8
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f001 fd85 	bl	80076a8 <HAL_SD_RxCpltCallback>
#endif
}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc fffa 	bl	8002bb0 <HAL_DMA_GetError>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d03e      	beq.n	8005c40 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d002      	beq.n	8005bde <SD_DMAError+0x36>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d12d      	bne.n	8005c3a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <SD_DMAError+0xa0>)
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005bf4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	f7ff ff62 	bl	8005acc <HAL_SD_GetCardState>
 8005c08:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b06      	cmp	r3, #6
 8005c0e:	d002      	beq.n	8005c16 <SD_DMAError+0x6e>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b05      	cmp	r3, #5
 8005c14:	d10a      	bne.n	8005c2c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 f8b0 	bl	8006d80 <SDMMC_CmdStopTransfer>
 8005c20:	4602      	mov	r2, r0
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	431a      	orrs	r2, r3
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005c3a:	6978      	ldr	r0, [r7, #20]
 8005c3c:	f7ff fcd2 	bl	80055e4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005c40:	bf00      	nop
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	004005ff 	.word	0x004005ff

08005c4c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7ff ff31 	bl	8005acc <HAL_SD_GetCardState>
 8005c6a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b06      	cmp	r3, #6
 8005c7e:	d002      	beq.n	8005c86 <SD_DMATxAbort+0x3a>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	d10a      	bne.n	8005c9c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 f878 	bl	8006d80 <SDMMC_CmdStopTransfer>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d103      	bne.n	8005cac <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f001 fceb 	bl	8007680 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005caa:	e002      	b.n	8005cb2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f7ff fc99 	bl	80055e4 <HAL_SD_ErrorCallback>
}
 8005cb2:	bf00      	nop
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fefa 	bl	8005acc <HAL_SD_GetCardState>
 8005cd8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d002      	beq.n	8005cf4 <SD_DMARxAbort+0x3a>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b05      	cmp	r3, #5
 8005cf2:	d10a      	bne.n	8005d0a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 f841 	bl	8006d80 <SDMMC_CmdStopTransfer>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f001 fcb4 	bl	8007680 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005d18:	e002      	b.n	8005d20 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff fc62 	bl	80055e4 <HAL_SD_ErrorCallback>
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d28:	b5b0      	push	{r4, r5, r7, lr}
 8005d2a:	b094      	sub	sp, #80	; 0x50
 8005d2c:	af04      	add	r7, sp, #16
 8005d2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005d30:	2301      	movs	r3, #1
 8005d32:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fef3 	bl	8006b24 <SDIO_GetPowerState>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d48:	e0b6      	b.n	8005eb8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d02f      	beq.n	8005db2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 f91c 	bl	8006f94 <SDMMC_CmdSendCID>
 8005d5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <SD_InitCard+0x40>
    {
      return errorstate;
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	e0a7      	b.n	8005eb8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 ff1d 	bl	8006bae <SDIO_GetResponse>
 8005d74:	4602      	mov	r2, r0
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2104      	movs	r1, #4
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 ff14 	bl	8006bae <SDIO_GetResponse>
 8005d86:	4602      	mov	r2, r0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2108      	movs	r1, #8
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 ff0b 	bl	8006bae <SDIO_GetResponse>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	210c      	movs	r1, #12
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 ff02 	bl	8006bae <SDIO_GetResponse>
 8005daa:	4602      	mov	r2, r0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d00d      	beq.n	8005dd6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f107 020e 	add.w	r2, r7, #14
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f001 f922 	bl	800700e <SDMMC_CmdSetRelAdd>
 8005dca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <SD_InitCard+0xae>
    {
      return errorstate;
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	e070      	b.n	8005eb8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d036      	beq.n	8005e4c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005dde:	89fb      	ldrh	r3, [r7, #14]
 8005de0:	461a      	mov	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dee:	041b      	lsls	r3, r3, #16
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f001 f8ec 	bl	8006fd0 <SDMMC_CmdSendCSD>
 8005df8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e02:	e059      	b.n	8005eb8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fecf 	bl	8006bae <SDIO_GetResponse>
 8005e10:	4602      	mov	r2, r0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2104      	movs	r1, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fec6 	bl	8006bae <SDIO_GetResponse>
 8005e22:	4602      	mov	r2, r0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2108      	movs	r1, #8
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 febd 	bl	8006bae <SDIO_GetResponse>
 8005e34:	4602      	mov	r2, r0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	210c      	movs	r1, #12
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 feb4 	bl	8006bae <SDIO_GetResponse>
 8005e46:	4602      	mov	r2, r0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2104      	movs	r1, #4
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 feab 	bl	8006bae <SDIO_GetResponse>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	0d1a      	lsrs	r2, r3, #20
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005e60:	f107 0310 	add.w	r3, r7, #16
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fbc6 	bl	80055f8 <HAL_SD_GetCardCSD>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e76:	e01f      	b.n	8005eb8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6819      	ldr	r1, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e80:	041b      	lsls	r3, r3, #16
 8005e82:	461a      	mov	r2, r3
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	4608      	mov	r0, r1
 8005e8a:	f000 ff9b 	bl	8006dc4 <SDMMC_CmdSelDesel>
 8005e8e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <SD_InitCard+0x172>
  {
    return errorstate;
 8005e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e98:	e00e      	b.n	8005eb8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	466c      	mov	r4, sp
 8005ea2:	f103 0210 	add.w	r2, r3, #16
 8005ea6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005eac:	3304      	adds	r3, #4
 8005eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f000 fddf 	bl	8006a74 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3740      	adds	r7, #64	; 0x40
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bdb0      	pop	{r4, r5, r7, pc}

08005ec0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 ff96 	bl	8006e0a <SDMMC_CmdGoIdleState>
 8005ede:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <SD_PowerON+0x2a>
  {
    return errorstate;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	e072      	b.n	8005fd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 ffa9 	bl	8006e46 <SDMMC_CmdOperCond>
 8005ef4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00d      	beq.n	8005f18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 ff7f 	bl	8006e0a <SDMMC_CmdGoIdleState>
 8005f0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	e05b      	b.n	8005fd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d137      	bne.n	8005f96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 ffa9 	bl	8006e84 <SDMMC_CmdAppCommand>
 8005f32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d02d      	beq.n	8005f96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f3e:	e047      	b.n	8005fd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2100      	movs	r1, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 ff9c 	bl	8006e84 <SDMMC_CmdAppCommand>
 8005f4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <SD_PowerON+0x98>
    {
      return errorstate;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	e03b      	b.n	8005fd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	491e      	ldr	r1, [pc, #120]	; (8005fd8 <SD_PowerON+0x118>)
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 ffb2 	bl	8006ec8 <SDMMC_CmdAppOperCommand>
 8005f64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f70:	e02e      	b.n	8005fd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fe18 	bl	8006bae <SDIO_GetResponse>
 8005f7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	0fdb      	lsrs	r3, r3, #31
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <SD_PowerON+0xcc>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <SD_PowerON+0xce>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	613b      	str	r3, [r7, #16]

    count++;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d802      	bhi.n	8005fa6 <SD_PowerON+0xe6>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0cc      	beq.n	8005f40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d902      	bls.n	8005fb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fb4:	e00c      	b.n	8005fd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44
 8005fc6:	e002      	b.n	8005fce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	c1100000 	.word	0xc1100000

08005fdc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005fec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ff0:	e018      	b.n	8006024 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4610      	mov	r0, r2
 8006000:	f001 f826 	bl	8007050 <SDMMC_CmdSendStatus>
 8006004:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <SD_SendStatus+0x34>
  {
    return errorstate;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	e009      	b.n	8006024 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fdc9 	bl	8006bae <SDIO_GetResponse>
 800601c:	4602      	mov	r2, r0
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	2300      	movs	r3, #0
 800603a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fdb3 	bl	8006bae <SDIO_GetResponse>
 8006048:	4603      	mov	r3, r0
 800604a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006052:	d102      	bne.n	800605a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006054:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006058:	e02f      	b.n	80060ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800605a:	f107 030c 	add.w	r3, r7, #12
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f879 	bl	8006158 <SD_FindSCR>
 8006066:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	e023      	b.n	80060ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01c      	beq.n	80060b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006084:	041b      	lsls	r3, r3, #16
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f000 fefb 	bl	8006e84 <SDMMC_CmdAppCommand>
 800608e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	e00f      	b.n	80060ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2102      	movs	r1, #2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 ff34 	bl	8006f0e <SDMMC_CmdBusWidth>
 80060a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	e003      	b.n	80060ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e001      	b.n	80060ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80060b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b086      	sub	sp, #24
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	2300      	movs	r3, #0
 80060d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2100      	movs	r1, #0
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fd68 	bl	8006bae <SDIO_GetResponse>
 80060de:	4603      	mov	r3, r0
 80060e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060e8:	d102      	bne.n	80060f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80060ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060ee:	e02f      	b.n	8006150 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80060f0:	f107 030c 	add.w	r3, r7, #12
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f82e 	bl	8006158 <SD_FindSCR>
 80060fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	e023      	b.n	8006150 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01c      	beq.n	800614c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611a:	041b      	lsls	r3, r3, #16
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f000 feb0 	bl	8006e84 <SDMMC_CmdAppCommand>
 8006124:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	e00f      	b.n	8006150 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2100      	movs	r1, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fee9 	bl	8006f0e <SDMMC_CmdBusWidth>
 800613c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	e003      	b.n	8006150 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006148:	2300      	movs	r3, #0
 800614a:	e001      	b.n	8006150 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800614c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b08f      	sub	sp, #60	; 0x3c
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006162:	f7fc f931 	bl	80023c8 <HAL_GetTick>
 8006166:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800616c:	2300      	movs	r3, #0
 800616e:	60bb      	str	r3, [r7, #8]
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2108      	movs	r1, #8
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fd54 	bl	8006c2c <SDMMC_CmdBlockLength>
 8006184:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <SD_FindSCR+0x38>
  {
    return errorstate;
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	e0b2      	b.n	80062f6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f000 fe71 	bl	8006e84 <SDMMC_CmdAppCommand>
 80061a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <SD_FindSCR+0x56>
  {
    return errorstate;
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	e0a3      	b.n	80062f6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80061b4:	2308      	movs	r3, #8
 80061b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80061b8:	2330      	movs	r3, #48	; 0x30
 80061ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80061bc:	2302      	movs	r3, #2
 80061be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f107 0210 	add.w	r2, r7, #16
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fcfe 	bl	8006bd4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 feb8 	bl	8006f52 <SDMMC_CmdSendSCR>
 80061e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d02a      	beq.n	8006240 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	e083      	b.n	80062f6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00f      	beq.n	800621c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	f107 0208 	add.w	r2, r7, #8
 8006208:	18d4      	adds	r4, r2, r3
 800620a:	4608      	mov	r0, r1
 800620c:	f000 fc5d 	bl	8006aca <SDIO_ReadFIFO>
 8006210:	4603      	mov	r3, r0
 8006212:	6023      	str	r3, [r4, #0]
      index++;
 8006214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006216:	3301      	adds	r3, #1
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
 800621a:	e006      	b.n	800622a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d012      	beq.n	8006250 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800622a:	f7fc f8cd 	bl	80023c8 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006238:	d102      	bne.n	8006240 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800623a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800623e:	e05a      	b.n	80062f6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006246:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0cf      	beq.n	80061ee <SD_FindSCR+0x96>
 800624e:	e000      	b.n	8006252 <SD_FindSCR+0xfa>
      break;
 8006250:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2208      	movs	r2, #8
 8006266:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006268:	2308      	movs	r3, #8
 800626a:	e044      	b.n	80062f6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2202      	movs	r2, #2
 8006280:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006282:	2302      	movs	r3, #2
 8006284:	e037      	b.n	80062f6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2220      	movs	r2, #32
 800629a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800629c:	2320      	movs	r3, #32
 800629e:	e02a      	b.n	80062f6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	061a      	lsls	r2, r3, #24
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062c0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	0e1b      	lsrs	r3, r3, #24
 80062c6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	601a      	str	r2, [r3, #0]
    scr++;
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	3304      	adds	r3, #4
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	061a      	lsls	r2, r3, #24
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062e8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	0e1b      	lsrs	r3, r3, #24
 80062ee:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	373c      	adds	r7, #60	; 0x3c
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd90      	pop	{r4, r7, pc}

080062fe <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d03f      	beq.n	8006398 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006318:	2300      	movs	r3, #0
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	e033      	b.n	8006386 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fbd1 	bl	8006aca <SDIO_ReadFIFO>
 8006328:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3301      	adds	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	3b01      	subs	r3, #1
 800633c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	0a1b      	lsrs	r3, r3, #8
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3301      	adds	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	3b01      	subs	r3, #1
 8006352:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	b2da      	uxtb	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3b01      	subs	r3, #1
 8006368:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	0e1b      	lsrs	r3, r3, #24
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	3b01      	subs	r3, #1
 800637e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	3301      	adds	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b07      	cmp	r3, #7
 800638a:	d9c8      	bls.n	800631e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006398:	bf00      	nop
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d043      	beq.n	8006442 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	e037      	b.n	8006430 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	021a      	lsls	r2, r3, #8
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	041a      	lsls	r2, r3, #16
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	3b01      	subs	r3, #1
 8006400:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	061a      	lsls	r2, r3, #24
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	4313      	orrs	r3, r2
 800640c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3b01      	subs	r3, #1
 8006418:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f107 0208 	add.w	r2, r7, #8
 8006422:	4611      	mov	r1, r2
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fb5d 	bl	8006ae4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	3301      	adds	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2b07      	cmp	r3, #7
 8006434:	d9c4      	bls.n	80063c0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006442:	bf00      	nop
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e03f      	b.n	80064dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fb f9c3 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2224      	movs	r2, #36	; 0x24
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800648c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f928 	bl	80066e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b20      	cmp	r3, #32
 8006502:	d17c      	bne.n	80065fe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <HAL_UART_Transmit+0x2c>
 800650a:	88fb      	ldrh	r3, [r7, #6]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e075      	b.n	8006600 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_UART_Transmit+0x3e>
 800651e:	2302      	movs	r3, #2
 8006520:	e06e      	b.n	8006600 <HAL_UART_Transmit+0x11c>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2221      	movs	r2, #33	; 0x21
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006538:	f7fb ff46 	bl	80023c8 <HAL_GetTick>
 800653c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	88fa      	ldrh	r2, [r7, #6]
 8006542:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006552:	d108      	bne.n	8006566 <HAL_UART_Transmit+0x82>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	e003      	b.n	800656e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006576:	e02a      	b.n	80065ce <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f840 	bl	8006608 <UART_WaitOnFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e036      	b.n	8006600 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10b      	bne.n	80065b0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	3302      	adds	r3, #2
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	e007      	b.n	80065c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	3301      	adds	r3, #1
 80065be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1cf      	bne.n	8006578 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2200      	movs	r2, #0
 80065e0:	2140      	movs	r1, #64	; 0x40
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f810 	bl	8006608 <UART_WaitOnFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e006      	b.n	8006600 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	e000      	b.n	8006600 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
  }
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b090      	sub	sp, #64	; 0x40
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006618:	e050      	b.n	80066bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006620:	d04c      	beq.n	80066bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <UART_WaitOnFlagUntilTimeout+0x30>
 8006628:	f7fb fece 	bl	80023c8 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006634:	429a      	cmp	r2, r3
 8006636:	d241      	bcs.n	80066bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800664e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	330c      	adds	r3, #12
 8006656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006658:	637a      	str	r2, [r7, #52]	; 0x34
 800665a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800665e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e5      	bne.n	8006638 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3314      	adds	r3, #20
 8006672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	613b      	str	r3, [r7, #16]
   return(result);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f023 0301 	bic.w	r3, r3, #1
 8006682:	63bb      	str	r3, [r7, #56]	; 0x38
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3314      	adds	r3, #20
 800668a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800668c:	623a      	str	r2, [r7, #32]
 800668e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	69f9      	ldr	r1, [r7, #28]
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	61bb      	str	r3, [r7, #24]
   return(result);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e5      	bne.n	800666c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e00f      	b.n	80066dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4013      	ands	r3, r2
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d09f      	beq.n	800661a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3740      	adds	r7, #64	; 0x40
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	b09f      	sub	sp, #124	; 0x7c
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fa:	68d9      	ldr	r1, [r3, #12]
 80066fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	ea40 0301 	orr.w	r3, r0, r1
 8006704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	431a      	orrs	r2, r3
 8006710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	431a      	orrs	r2, r3
 8006716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	4313      	orrs	r3, r2
 800671c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800671e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006728:	f021 010c 	bic.w	r1, r1, #12
 800672c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006732:	430b      	orrs	r3, r1
 8006734:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006742:	6999      	ldr	r1, [r3, #24]
 8006744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	ea40 0301 	orr.w	r3, r0, r1
 800674c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800674e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4bc5      	ldr	r3, [pc, #788]	; (8006a68 <UART_SetConfig+0x384>)
 8006754:	429a      	cmp	r2, r3
 8006756:	d004      	beq.n	8006762 <UART_SetConfig+0x7e>
 8006758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	4bc3      	ldr	r3, [pc, #780]	; (8006a6c <UART_SetConfig+0x388>)
 800675e:	429a      	cmp	r2, r3
 8006760:	d103      	bne.n	800676a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006762:	f7fe fb2f 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8006766:	6778      	str	r0, [r7, #116]	; 0x74
 8006768:	e002      	b.n	8006770 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800676a:	f7fe fb17 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 800676e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006778:	f040 80b6 	bne.w	80068e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800677c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677e:	461c      	mov	r4, r3
 8006780:	f04f 0500 	mov.w	r5, #0
 8006784:	4622      	mov	r2, r4
 8006786:	462b      	mov	r3, r5
 8006788:	1891      	adds	r1, r2, r2
 800678a:	6439      	str	r1, [r7, #64]	; 0x40
 800678c:	415b      	adcs	r3, r3
 800678e:	647b      	str	r3, [r7, #68]	; 0x44
 8006790:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006794:	1912      	adds	r2, r2, r4
 8006796:	eb45 0303 	adc.w	r3, r5, r3
 800679a:	f04f 0000 	mov.w	r0, #0
 800679e:	f04f 0100 	mov.w	r1, #0
 80067a2:	00d9      	lsls	r1, r3, #3
 80067a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067a8:	00d0      	lsls	r0, r2, #3
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	1911      	adds	r1, r2, r4
 80067b0:	6639      	str	r1, [r7, #96]	; 0x60
 80067b2:	416b      	adcs	r3, r5
 80067b4:	667b      	str	r3, [r7, #100]	; 0x64
 80067b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	1891      	adds	r1, r2, r2
 80067c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80067c4:	415b      	adcs	r3, r3
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80067d0:	f7f9 fd66 	bl	80002a0 <__aeabi_uldivmod>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4ba5      	ldr	r3, [pc, #660]	; (8006a70 <UART_SetConfig+0x38c>)
 80067da:	fba3 2302 	umull	r2, r3, r3, r2
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	011e      	lsls	r6, r3, #4
 80067e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e4:	461c      	mov	r4, r3
 80067e6:	f04f 0500 	mov.w	r5, #0
 80067ea:	4622      	mov	r2, r4
 80067ec:	462b      	mov	r3, r5
 80067ee:	1891      	adds	r1, r2, r2
 80067f0:	6339      	str	r1, [r7, #48]	; 0x30
 80067f2:	415b      	adcs	r3, r3
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
 80067f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067fa:	1912      	adds	r2, r2, r4
 80067fc:	eb45 0303 	adc.w	r3, r5, r3
 8006800:	f04f 0000 	mov.w	r0, #0
 8006804:	f04f 0100 	mov.w	r1, #0
 8006808:	00d9      	lsls	r1, r3, #3
 800680a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800680e:	00d0      	lsls	r0, r2, #3
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	1911      	adds	r1, r2, r4
 8006816:	65b9      	str	r1, [r7, #88]	; 0x58
 8006818:	416b      	adcs	r3, r5
 800681a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800681c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	461a      	mov	r2, r3
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	1891      	adds	r1, r2, r2
 8006828:	62b9      	str	r1, [r7, #40]	; 0x28
 800682a:	415b      	adcs	r3, r3
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006832:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006836:	f7f9 fd33 	bl	80002a0 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4b8c      	ldr	r3, [pc, #560]	; (8006a70 <UART_SetConfig+0x38c>)
 8006840:	fba3 1302 	umull	r1, r3, r3, r2
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	2164      	movs	r1, #100	; 0x64
 8006848:	fb01 f303 	mul.w	r3, r1, r3
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	3332      	adds	r3, #50	; 0x32
 8006852:	4a87      	ldr	r2, [pc, #540]	; (8006a70 <UART_SetConfig+0x38c>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006860:	441e      	add	r6, r3
 8006862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006864:	4618      	mov	r0, r3
 8006866:	f04f 0100 	mov.w	r1, #0
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	1894      	adds	r4, r2, r2
 8006870:	623c      	str	r4, [r7, #32]
 8006872:	415b      	adcs	r3, r3
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800687a:	1812      	adds	r2, r2, r0
 800687c:	eb41 0303 	adc.w	r3, r1, r3
 8006880:	f04f 0400 	mov.w	r4, #0
 8006884:	f04f 0500 	mov.w	r5, #0
 8006888:	00dd      	lsls	r5, r3, #3
 800688a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800688e:	00d4      	lsls	r4, r2, #3
 8006890:	4622      	mov	r2, r4
 8006892:	462b      	mov	r3, r5
 8006894:	1814      	adds	r4, r2, r0
 8006896:	653c      	str	r4, [r7, #80]	; 0x50
 8006898:	414b      	adcs	r3, r1
 800689a:	657b      	str	r3, [r7, #84]	; 0x54
 800689c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	461a      	mov	r2, r3
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	1891      	adds	r1, r2, r2
 80068a8:	61b9      	str	r1, [r7, #24]
 80068aa:	415b      	adcs	r3, r3
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80068b6:	f7f9 fcf3 	bl	80002a0 <__aeabi_uldivmod>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4b6c      	ldr	r3, [pc, #432]	; (8006a70 <UART_SetConfig+0x38c>)
 80068c0:	fba3 1302 	umull	r1, r3, r3, r2
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	2164      	movs	r1, #100	; 0x64
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	3332      	adds	r3, #50	; 0x32
 80068d2:	4a67      	ldr	r2, [pc, #412]	; (8006a70 <UART_SetConfig+0x38c>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	f003 0207 	and.w	r2, r3, #7
 80068de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4432      	add	r2, r6
 80068e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068e6:	e0b9      	b.n	8006a5c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ea:	461c      	mov	r4, r3
 80068ec:	f04f 0500 	mov.w	r5, #0
 80068f0:	4622      	mov	r2, r4
 80068f2:	462b      	mov	r3, r5
 80068f4:	1891      	adds	r1, r2, r2
 80068f6:	6139      	str	r1, [r7, #16]
 80068f8:	415b      	adcs	r3, r3
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006900:	1912      	adds	r2, r2, r4
 8006902:	eb45 0303 	adc.w	r3, r5, r3
 8006906:	f04f 0000 	mov.w	r0, #0
 800690a:	f04f 0100 	mov.w	r1, #0
 800690e:	00d9      	lsls	r1, r3, #3
 8006910:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006914:	00d0      	lsls	r0, r2, #3
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	eb12 0804 	adds.w	r8, r2, r4
 800691e:	eb43 0905 	adc.w	r9, r3, r5
 8006922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4618      	mov	r0, r3
 8006928:	f04f 0100 	mov.w	r1, #0
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	008b      	lsls	r3, r1, #2
 8006936:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800693a:	0082      	lsls	r2, r0, #2
 800693c:	4640      	mov	r0, r8
 800693e:	4649      	mov	r1, r9
 8006940:	f7f9 fcae 	bl	80002a0 <__aeabi_uldivmod>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4b49      	ldr	r3, [pc, #292]	; (8006a70 <UART_SetConfig+0x38c>)
 800694a:	fba3 2302 	umull	r2, r3, r3, r2
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	011e      	lsls	r6, r3, #4
 8006952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006954:	4618      	mov	r0, r3
 8006956:	f04f 0100 	mov.w	r1, #0
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	1894      	adds	r4, r2, r2
 8006960:	60bc      	str	r4, [r7, #8]
 8006962:	415b      	adcs	r3, r3
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800696a:	1812      	adds	r2, r2, r0
 800696c:	eb41 0303 	adc.w	r3, r1, r3
 8006970:	f04f 0400 	mov.w	r4, #0
 8006974:	f04f 0500 	mov.w	r5, #0
 8006978:	00dd      	lsls	r5, r3, #3
 800697a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800697e:	00d4      	lsls	r4, r2, #3
 8006980:	4622      	mov	r2, r4
 8006982:	462b      	mov	r3, r5
 8006984:	1814      	adds	r4, r2, r0
 8006986:	64bc      	str	r4, [r7, #72]	; 0x48
 8006988:	414b      	adcs	r3, r1
 800698a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800698c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	f04f 0100 	mov.w	r1, #0
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	008b      	lsls	r3, r1, #2
 80069a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069a4:	0082      	lsls	r2, r0, #2
 80069a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80069aa:	f7f9 fc79 	bl	80002a0 <__aeabi_uldivmod>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <UART_SetConfig+0x38c>)
 80069b4:	fba3 1302 	umull	r1, r3, r3, r2
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	2164      	movs	r1, #100	; 0x64
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	3332      	adds	r3, #50	; 0x32
 80069c6:	4a2a      	ldr	r2, [pc, #168]	; (8006a70 <UART_SetConfig+0x38c>)
 80069c8:	fba2 2303 	umull	r2, r3, r2, r3
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069d2:	441e      	add	r6, r3
 80069d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d6:	4618      	mov	r0, r3
 80069d8:	f04f 0100 	mov.w	r1, #0
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	1894      	adds	r4, r2, r2
 80069e2:	603c      	str	r4, [r7, #0]
 80069e4:	415b      	adcs	r3, r3
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ec:	1812      	adds	r2, r2, r0
 80069ee:	eb41 0303 	adc.w	r3, r1, r3
 80069f2:	f04f 0400 	mov.w	r4, #0
 80069f6:	f04f 0500 	mov.w	r5, #0
 80069fa:	00dd      	lsls	r5, r3, #3
 80069fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a00:	00d4      	lsls	r4, r2, #3
 8006a02:	4622      	mov	r2, r4
 8006a04:	462b      	mov	r3, r5
 8006a06:	eb12 0a00 	adds.w	sl, r2, r0
 8006a0a:	eb43 0b01 	adc.w	fp, r3, r1
 8006a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	008b      	lsls	r3, r1, #2
 8006a22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a26:	0082      	lsls	r2, r0, #2
 8006a28:	4650      	mov	r0, sl
 8006a2a:	4659      	mov	r1, fp
 8006a2c:	f7f9 fc38 	bl	80002a0 <__aeabi_uldivmod>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <UART_SetConfig+0x38c>)
 8006a36:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2164      	movs	r1, #100	; 0x64
 8006a3e:	fb01 f303 	mul.w	r3, r1, r3
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	3332      	adds	r3, #50	; 0x32
 8006a48:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <UART_SetConfig+0x38c>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4432      	add	r2, r6
 8006a5a:	609a      	str	r2, [r3, #8]
}
 8006a5c:	bf00      	nop
 8006a5e:	377c      	adds	r7, #124	; 0x7c
 8006a60:	46bd      	mov	sp, r7
 8006a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a66:	bf00      	nop
 8006a68:	40011000 	.word	0x40011000
 8006a6c:	40011400 	.word	0x40011400
 8006a70:	51eb851f 	.word	0x51eb851f

08006a74 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006a74:	b084      	sub	sp, #16
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	f107 001c 	add.w	r0, r7, #28
 8006a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006a8a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006a8e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006a92:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006a96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006a9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006a9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006aae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	b004      	add	sp, #16
 8006ac8:	4770      	bx	lr

08006aca <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2203      	movs	r2, #3
 8006b12:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006b14:	2002      	movs	r0, #2
 8006b16:	f7fb fc63 	bl	80023e0 <HAL_Delay>
  
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0303 	and.w	r3, r3, #3
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b5e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006b64:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006b6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006b7a:	f023 030f 	bic.w	r3, r3, #15
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	b2db      	uxtb	r3, r3
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
}  
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006bfa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006c00:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006c06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0

}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c3e:	2340      	movs	r3, #64	; 0x40
 8006c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c4c:	f107 0308 	add.w	r3, r7, #8
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff ff74 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5c:	2110      	movs	r1, #16
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa44 	bl	80070ec <SDMMC_GetCmdResp1>
 8006c64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c66:	69fb      	ldr	r3, [r7, #28]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006c7e:	2311      	movs	r3, #17
 8006c80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c82:	2340      	movs	r3, #64	; 0x40
 8006c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c90:	f107 0308 	add.w	r3, r7, #8
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff ff52 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca0:	2111      	movs	r1, #17
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa22 	bl	80070ec <SDMMC_GetCmdResp1>
 8006ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006caa:	69fb      	ldr	r3, [r7, #28]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3720      	adds	r7, #32
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006cc2:	2312      	movs	r3, #18
 8006cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cc6:	2340      	movs	r3, #64	; 0x40
 8006cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cd4:	f107 0308 	add.w	r3, r7, #8
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff ff30 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce4:	2112      	movs	r1, #18
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa00 	bl	80070ec <SDMMC_GetCmdResp1>
 8006cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cee:	69fb      	ldr	r3, [r7, #28]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3720      	adds	r7, #32
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006d06:	2318      	movs	r3, #24
 8006d08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d0a:	2340      	movs	r3, #64	; 0x40
 8006d0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d18:	f107 0308 	add.w	r3, r7, #8
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff ff0e 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d28:	2118      	movs	r1, #24
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9de 	bl	80070ec <SDMMC_GetCmdResp1>
 8006d30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d32:	69fb      	ldr	r3, [r7, #28]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3720      	adds	r7, #32
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006d4a:	2319      	movs	r3, #25
 8006d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d4e:	2340      	movs	r3, #64	; 0x40
 8006d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d5c:	f107 0308 	add.w	r3, r7, #8
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff feec 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d6c:	2119      	movs	r1, #25
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9bc 	bl	80070ec <SDMMC_GetCmdResp1>
 8006d74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d76:	69fb      	ldr	r3, [r7, #28]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3720      	adds	r7, #32
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006d8c:	230c      	movs	r3, #12
 8006d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d90:	2340      	movs	r3, #64	; 0x40
 8006d92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d9e:	f107 0308 	add.w	r3, r7, #8
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff fecb 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006daa:	4a05      	ldr	r2, [pc, #20]	; (8006dc0 <SDMMC_CmdStopTransfer+0x40>)
 8006dac:	210c      	movs	r1, #12
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f99c 	bl	80070ec <SDMMC_GetCmdResp1>
 8006db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006db6:	69fb      	ldr	r3, [r7, #28]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	05f5e100 	.word	0x05f5e100

08006dc4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08a      	sub	sp, #40	; 0x28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006dd4:	2307      	movs	r3, #7
 8006dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dd8:	2340      	movs	r3, #64	; 0x40
 8006dda:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006de4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de6:	f107 0310 	add.w	r3, r7, #16
 8006dea:	4619      	mov	r1, r3
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7ff fea7 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df6:	2107      	movs	r1, #7
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f977 	bl	80070ec <SDMMC_GetCmdResp1>
 8006dfe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3728      	adds	r7, #40	; 0x28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b088      	sub	sp, #32
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e28:	f107 0308 	add.w	r3, r7, #8
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff fe86 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f92d 	bl	8007094 <SDMMC_GetCmdError>
 8006e3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e3c:	69fb      	ldr	r3, [r7, #28]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3720      	adds	r7, #32
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006e4e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006e52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006e54:	2308      	movs	r3, #8
 8006e56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e58:	2340      	movs	r3, #64	; 0x40
 8006e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e66:	f107 0308 	add.w	r3, r7, #8
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fe67 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fb24 	bl	80074c0 <SDMMC_GetCmdResp7>
 8006e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006e92:	2337      	movs	r3, #55	; 0x37
 8006e94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e96:	2340      	movs	r3, #64	; 0x40
 8006e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ea2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ea4:	f107 0308 	add.w	r3, r7, #8
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff fe48 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb4:	2137      	movs	r1, #55	; 0x37
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f918 	bl	80070ec <SDMMC_GetCmdResp1>
 8006ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006ede:	2329      	movs	r3, #41	; 0x29
 8006ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ee2:	2340      	movs	r3, #64	; 0x40
 8006ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ef0:	f107 0308 	add.w	r3, r7, #8
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fe22 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa2b 	bl	8007358 <SDMMC_GetCmdResp3>
 8006f02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f04:	69fb      	ldr	r3, [r7, #28]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b088      	sub	sp, #32
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006f1c:	2306      	movs	r3, #6
 8006f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f20:	2340      	movs	r3, #64	; 0x40
 8006f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fe03 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3e:	2106      	movs	r1, #6
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f8d3 	bl	80070ec <SDMMC_GetCmdResp1>
 8006f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f48:	69fb      	ldr	r3, [r7, #28]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3720      	adds	r7, #32
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b088      	sub	sp, #32
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006f5e:	2333      	movs	r3, #51	; 0x33
 8006f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f70:	f107 0308 	add.w	r3, r7, #8
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff fde2 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f80:	2133      	movs	r1, #51	; 0x33
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f8b2 	bl	80070ec <SDMMC_GetCmdResp1>
 8006f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006fa4:	23c0      	movs	r3, #192	; 0xc0
 8006fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fb2:	f107 0308 	add.w	r3, r7, #8
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fdc1 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f982 	bl	80072c8 <SDMMC_GetCmdResp2>
 8006fc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3720      	adds	r7, #32
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006fde:	2309      	movs	r3, #9
 8006fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006fe2:	23c0      	movs	r3, #192	; 0xc0
 8006fe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ff0:	f107 0308 	add.w	r3, r7, #8
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff fda2 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f963 	bl	80072c8 <SDMMC_GetCmdResp2>
 8007002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007004:	69fb      	ldr	r3, [r7, #28]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b088      	sub	sp, #32
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800701c:	2303      	movs	r3, #3
 800701e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007020:	2340      	movs	r3, #64	; 0x40
 8007022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800702c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800702e:	f107 0308 	add.w	r3, r7, #8
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fd83 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	2103      	movs	r1, #3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f9c8 	bl	80073d4 <SDMMC_GetCmdResp6>
 8007044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007046:	69fb      	ldr	r3, [r7, #28]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3720      	adds	r7, #32
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800705e:	230d      	movs	r3, #13
 8007060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007062:	2340      	movs	r3, #64	; 0x40
 8007064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800706a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800706e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007070:	f107 0308 	add.w	r3, r7, #8
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff fd62 	bl	8006b40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800707c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007080:	210d      	movs	r1, #13
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f832 	bl	80070ec <SDMMC_GetCmdResp1>
 8007088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800708a:	69fb      	ldr	r3, [r7, #28]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800709c:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <SDMMC_GetCmdError+0x50>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a11      	ldr	r2, [pc, #68]	; (80070e8 <SDMMC_GetCmdError+0x54>)
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	0a5b      	lsrs	r3, r3, #9
 80070a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ac:	fb02 f303 	mul.w	r3, r2, r3
 80070b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1e5a      	subs	r2, r3, #1
 80070b6:	60fa      	str	r2, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070c0:	e009      	b.n	80070d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0f1      	beq.n	80070b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	22c5      	movs	r2, #197	; 0xc5
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	2000049c 	.word	0x2000049c
 80070e8:	10624dd3 	.word	0x10624dd3

080070ec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	460b      	mov	r3, r1
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80070fa:	4b70      	ldr	r3, [pc, #448]	; (80072bc <SDMMC_GetCmdResp1+0x1d0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a70      	ldr	r2, [pc, #448]	; (80072c0 <SDMMC_GetCmdResp1+0x1d4>)
 8007100:	fba2 2303 	umull	r2, r3, r2, r3
 8007104:	0a5a      	lsrs	r2, r3, #9
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	fb02 f303 	mul.w	r3, r2, r3
 800710c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	1e5a      	subs	r2, r3, #1
 8007112:	61fa      	str	r2, [r7, #28]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800711c:	e0c9      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007122:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0ef      	beq.n	800710e <SDMMC_GetCmdResp1+0x22>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1ea      	bne.n	800710e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	d004      	beq.n	800714e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2204      	movs	r2, #4
 8007148:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800714a:	2304      	movs	r3, #4
 800714c:	e0b1      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007160:	2301      	movs	r3, #1
 8007162:	e0a6      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	22c5      	movs	r2, #197	; 0xc5
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f7ff fd12 	bl	8006b94 <SDIO_GetCommandResponse>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	4293      	cmp	r3, r2
 8007178:	d001      	beq.n	800717e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800717a:	2301      	movs	r3, #1
 800717c:	e099      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800717e:	2100      	movs	r1, #0
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f7ff fd14 	bl	8006bae <SDIO_GetResponse>
 8007186:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4b4e      	ldr	r3, [pc, #312]	; (80072c4 <SDMMC_GetCmdResp1+0x1d8>)
 800718c:	4013      	ands	r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007192:	2300      	movs	r3, #0
 8007194:	e08d      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	da02      	bge.n	80071a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800719c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071a0:	e087      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80071ac:	2340      	movs	r3, #64	; 0x40
 80071ae:	e080      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80071ba:	2380      	movs	r3, #128	; 0x80
 80071bc:	e079      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80071c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071cc:	e071      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80071d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071dc:	e069      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80071e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ec:	e061      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80071f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071fc:	e059      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800720c:	e051      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800721c:	e049      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800722c:	e041      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723c:	e039      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800724c:	e031      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007258:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800725c:	e029      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007268:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800726c:	e021      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007278:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800727c:	e019      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007288:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800728c:	e011      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007298:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800729c:	e009      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80072a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80072ac:	e001      	b.n	80072b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80072ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3720      	adds	r7, #32
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	2000049c 	.word	0x2000049c
 80072c0:	10624dd3 	.word	0x10624dd3
 80072c4:	fdffe008 	.word	0xfdffe008

080072c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072d0:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <SDMMC_GetCmdResp2+0x88>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1f      	ldr	r2, [pc, #124]	; (8007354 <SDMMC_GetCmdResp2+0x8c>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	0a5b      	lsrs	r3, r3, #9
 80072dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e0:	fb02 f303 	mul.w	r3, r2, r3
 80072e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	1e5a      	subs	r2, r3, #1
 80072ea:	60fa      	str	r2, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072f4:	e026      	b.n	8007344 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0ef      	beq.n	80072e6 <SDMMC_GetCmdResp2+0x1e>
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1ea      	bne.n	80072e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2204      	movs	r2, #4
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007322:	2304      	movs	r3, #4
 8007324:	e00e      	b.n	8007344 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007338:	2301      	movs	r3, #1
 800733a:	e003      	b.n	8007344 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	22c5      	movs	r2, #197	; 0xc5
 8007340:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	2000049c 	.word	0x2000049c
 8007354:	10624dd3 	.word	0x10624dd3

08007358 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007360:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <SDMMC_GetCmdResp3+0x74>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <SDMMC_GetCmdResp3+0x78>)
 8007366:	fba2 2303 	umull	r2, r3, r2, r3
 800736a:	0a5b      	lsrs	r3, r3, #9
 800736c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007370:	fb02 f303 	mul.w	r3, r2, r3
 8007374:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1e5a      	subs	r2, r3, #1
 800737a:	60fa      	str	r2, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007380:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007384:	e01b      	b.n	80073be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0ef      	beq.n	8007376 <SDMMC_GetCmdResp3+0x1e>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1ea      	bne.n	8007376 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d004      	beq.n	80073b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2204      	movs	r2, #4
 80073b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073b2:	2304      	movs	r3, #4
 80073b4:	e003      	b.n	80073be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	22c5      	movs	r2, #197	; 0xc5
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	2000049c 	.word	0x2000049c
 80073d0:	10624dd3 	.word	0x10624dd3

080073d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	460b      	mov	r3, r1
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073e2:	4b35      	ldr	r3, [pc, #212]	; (80074b8 <SDMMC_GetCmdResp6+0xe4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a35      	ldr	r2, [pc, #212]	; (80074bc <SDMMC_GetCmdResp6+0xe8>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	0a5b      	lsrs	r3, r3, #9
 80073ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f2:	fb02 f303 	mul.w	r3, r2, r3
 80073f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	1e5a      	subs	r2, r3, #1
 80073fc:	61fa      	str	r2, [r7, #28]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d102      	bne.n	8007408 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007402:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007406:	e052      	b.n	80074ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0ef      	beq.n	80073f8 <SDMMC_GetCmdResp6+0x24>
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1ea      	bne.n	80073f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2204      	movs	r2, #4
 8007432:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007434:	2304      	movs	r3, #4
 8007436:	e03a      	b.n	80074ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800744a:	2301      	movs	r3, #1
 800744c:	e02f      	b.n	80074ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f7ff fba0 	bl	8006b94 <SDIO_GetCommandResponse>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	4293      	cmp	r3, r2
 800745c:	d001      	beq.n	8007462 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800745e:	2301      	movs	r3, #1
 8007460:	e025      	b.n	80074ae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	22c5      	movs	r2, #197	; 0xc5
 8007466:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007468:	2100      	movs	r1, #0
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff fb9f 	bl	8006bae <SDIO_GetResponse>
 8007470:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	0c1b      	lsrs	r3, r3, #16
 8007480:	b29a      	uxth	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007486:	2300      	movs	r3, #0
 8007488:	e011      	b.n	80074ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007498:	e009      	b.n	80074ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80074a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074a8:	e001      	b.n	80074ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80074aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	2000049c 	.word	0x2000049c
 80074bc:	10624dd3 	.word	0x10624dd3

080074c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074c8:	4b22      	ldr	r3, [pc, #136]	; (8007554 <SDMMC_GetCmdResp7+0x94>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a22      	ldr	r2, [pc, #136]	; (8007558 <SDMMC_GetCmdResp7+0x98>)
 80074ce:	fba2 2303 	umull	r2, r3, r2, r3
 80074d2:	0a5b      	lsrs	r3, r3, #9
 80074d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d8:	fb02 f303 	mul.w	r3, r2, r3
 80074dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	1e5a      	subs	r2, r3, #1
 80074e2:	60fa      	str	r2, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074ec:	e02c      	b.n	8007548 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0ef      	beq.n	80074de <SDMMC_GetCmdResp7+0x1e>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1ea      	bne.n	80074de <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2204      	movs	r2, #4
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800751a:	2304      	movs	r3, #4
 800751c:	e014      	b.n	8007548 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007530:	2301      	movs	r3, #1
 8007532:	e009      	b.n	8007548 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2240      	movs	r2, #64	; 0x40
 8007544:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007546:	2300      	movs	r3, #0
  
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	2000049c 	.word	0x2000049c
 8007558:	10624dd3 	.word	0x10624dd3

0800755c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007560:	4904      	ldr	r1, [pc, #16]	; (8007574 <MX_FATFS_Init+0x18>)
 8007562:	4805      	ldr	r0, [pc, #20]	; (8007578 <MX_FATFS_Init+0x1c>)
 8007564:	f003 fae8 	bl	800ab38 <FATFS_LinkDriver>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <MX_FATFS_Init+0x20>)
 800756e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007570:	bf00      	nop
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20009184 	.word	0x20009184
 8007578:	0801c6b8 	.word	0x0801c6b8
 800757c:	20009180 	.word	0x20009180

08007580 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007584:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007586:	4618      	mov	r0, r3
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800759a:	f000 f896 	bl	80076ca <BSP_SD_IsDetected>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d001      	beq.n	80075a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e012      	b.n	80075ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80075a8:	480b      	ldr	r0, [pc, #44]	; (80075d8 <BSP_SD_Init+0x48>)
 80075aa:	f7fd fc1f 	bl	8004dec <HAL_SD_Init>
 80075ae:	4603      	mov	r3, r0
 80075b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d109      	bne.n	80075cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80075b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075bc:	4806      	ldr	r0, [pc, #24]	; (80075d8 <BSP_SD_Init+0x48>)
 80075be:	f7fe f9eb 	bl	8005998 <HAL_SD_ConfigWideBusOperation>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80075cc:	79fb      	ldrb	r3, [r7, #7]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20005f70 	.word	0x20005f70

080075dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	68f9      	ldr	r1, [r7, #12]
 80075f2:	4806      	ldr	r0, [pc, #24]	; (800760c <BSP_SD_ReadBlocks_DMA+0x30>)
 80075f4:	f7fd fca8 	bl	8004f48 <HAL_SD_ReadBlocks_DMA>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20005f70 	.word	0x20005f70

08007610 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	68f9      	ldr	r1, [r7, #12]
 8007626:	4806      	ldr	r0, [pc, #24]	; (8007640 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007628:	f7fd fd70 	bl	800510c <HAL_SD_WriteBlocks_DMA>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20005f70 	.word	0x20005f70

08007644 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007648:	4805      	ldr	r0, [pc, #20]	; (8007660 <BSP_SD_GetCardState+0x1c>)
 800764a:	f7fe fa3f 	bl	8005acc <HAL_SD_GetCardState>
 800764e:	4603      	mov	r3, r0
 8007650:	2b04      	cmp	r3, #4
 8007652:	bf14      	ite	ne
 8007654:	2301      	movne	r3, #1
 8007656:	2300      	moveq	r3, #0
 8007658:	b2db      	uxtb	r3, r3
}
 800765a:	4618      	mov	r0, r3
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20005f70 	.word	0x20005f70

08007664 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	4803      	ldr	r0, [pc, #12]	; (800767c <BSP_SD_GetCardInfo+0x18>)
 8007670:	f7fe f966 	bl	8005940 <HAL_SD_GetCardInfo>
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20005f70 	.word	0x20005f70

08007680 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007688:	f000 f818 	bl	80076bc <BSP_SD_AbortCallback>
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800769c:	f000 f98c 	bl	80079b8 <BSP_SD_WriteCpltCallback>
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80076b0:	f000 f98e 	bl	80079d0 <BSP_SD_ReadCpltCallback>
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0

}
 80076c0:	bf00      	nop
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80076d0:	2301      	movs	r3, #1
 80076d2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	b2db      	uxtb	r3, r3
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80076ec:	f7fa fe6c 	bl	80023c8 <HAL_GetTick>
 80076f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80076f2:	e006      	b.n	8007702 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80076f4:	f7ff ffa6 	bl	8007644 <BSP_SD_GetCardState>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	e009      	b.n	8007716 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007702:	f7fa fe61 	bl	80023c8 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	429a      	cmp	r2, r3
 8007710:	d8f0      	bhi.n	80076f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800772a:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <SD_CheckStatus+0x38>)
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007730:	f7ff ff88 	bl	8007644 <BSP_SD_GetCardState>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d107      	bne.n	800774a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800773a:	4b07      	ldr	r3, [pc, #28]	; (8007758 <SD_CheckStatus+0x38>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f023 0301 	bic.w	r3, r3, #1
 8007744:	b2da      	uxtb	r2, r3
 8007746:	4b04      	ldr	r3, [pc, #16]	; (8007758 <SD_CheckStatus+0x38>)
 8007748:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800774a:	4b03      	ldr	r3, [pc, #12]	; (8007758 <SD_CheckStatus+0x38>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b2db      	uxtb	r3, r3
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	200004a5 	.word	0x200004a5

0800775c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007766:	f7ff ff13 	bl	8007590 <BSP_SD_Init>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d107      	bne.n	8007780 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff ffd4 	bl	8007720 <SD_CheckStatus>
 8007778:	4603      	mov	r3, r0
 800777a:	461a      	mov	r2, r3
 800777c:	4b04      	ldr	r3, [pc, #16]	; (8007790 <SD_initialize+0x34>)
 800777e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007780:	4b03      	ldr	r3, [pc, #12]	; (8007790 <SD_initialize+0x34>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b2db      	uxtb	r3, r3
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	200004a5 	.word	0x200004a5

08007794 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff ffbd 	bl	8007720 <SD_CheckStatus>
 80077a6:	4603      	mov	r3, r0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80077c4:	f247 5030 	movw	r0, #30000	; 0x7530
 80077c8:	f7ff ff8c 	bl	80076e4 <SD_CheckStatusWithTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	da01      	bge.n	80077d6 <SD_read+0x26>
  {
    return res;
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	e03b      	b.n	800784e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	68b8      	ldr	r0, [r7, #8]
 80077dc:	f7ff fefe 	bl	80075dc <BSP_SD_ReadBlocks_DMA>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d132      	bne.n	800784c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80077e6:	4b1c      	ldr	r3, [pc, #112]	; (8007858 <SD_read+0xa8>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80077ec:	f7fa fdec 	bl	80023c8 <HAL_GetTick>
 80077f0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80077f2:	bf00      	nop
 80077f4:	4b18      	ldr	r3, [pc, #96]	; (8007858 <SD_read+0xa8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d108      	bne.n	800780e <SD_read+0x5e>
 80077fc:	f7fa fde4 	bl	80023c8 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	f247 522f 	movw	r2, #29999	; 0x752f
 800780a:	4293      	cmp	r3, r2
 800780c:	d9f2      	bls.n	80077f4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <SD_read+0xa8>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]
 800781a:	e017      	b.n	800784c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800781c:	4b0e      	ldr	r3, [pc, #56]	; (8007858 <SD_read+0xa8>)
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007822:	f7fa fdd1 	bl	80023c8 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007828:	e007      	b.n	800783a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800782a:	f7ff ff0b 	bl	8007644 <BSP_SD_GetCardState>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <SD_read+0x8a>
          {
            res = RES_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007838:	e008      	b.n	800784c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800783a:	f7fa fdc5 	bl	80023c8 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	f247 522f 	movw	r2, #29999	; 0x752f
 8007848:	4293      	cmp	r3, r2
 800784a:	d9ee      	bls.n	800782a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20001548 	.word	0x20001548

0800785c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	607a      	str	r2, [r7, #4]
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007870:	4b24      	ldr	r3, [pc, #144]	; (8007904 <SD_write+0xa8>)
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007876:	f247 5030 	movw	r0, #30000	; 0x7530
 800787a:	f7ff ff33 	bl	80076e4 <SD_CheckStatusWithTimeout>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	da01      	bge.n	8007888 <SD_write+0x2c>
  {
    return res;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	e038      	b.n	80078fa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	68b8      	ldr	r0, [r7, #8]
 800788e:	f7ff febf 	bl	8007610 <BSP_SD_WriteBlocks_DMA>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d12f      	bne.n	80078f8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007898:	f7fa fd96 	bl	80023c8 <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800789e:	bf00      	nop
 80078a0:	4b18      	ldr	r3, [pc, #96]	; (8007904 <SD_write+0xa8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d108      	bne.n	80078ba <SD_write+0x5e>
 80078a8:	f7fa fd8e 	bl	80023c8 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d9f2      	bls.n	80078a0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <SD_write+0xa8>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
 80078c6:	e017      	b.n	80078f8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80078c8:	4b0e      	ldr	r3, [pc, #56]	; (8007904 <SD_write+0xa8>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80078ce:	f7fa fd7b 	bl	80023c8 <HAL_GetTick>
 80078d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80078d4:	e007      	b.n	80078e6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80078d6:	f7ff feb5 	bl	8007644 <BSP_SD_GetCardState>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d102      	bne.n	80078e6 <SD_write+0x8a>
          {
            res = RES_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	75fb      	strb	r3, [r7, #23]
            break;
 80078e4:	e008      	b.n	80078f8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80078e6:	f7fa fd6f 	bl	80023c8 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d9ee      	bls.n	80078d6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20001544 	.word	0x20001544

08007908 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08c      	sub	sp, #48	; 0x30
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	603a      	str	r2, [r7, #0]
 8007912:	71fb      	strb	r3, [r7, #7]
 8007914:	460b      	mov	r3, r1
 8007916:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800791e:	4b25      	ldr	r3, [pc, #148]	; (80079b4 <SD_ioctl+0xac>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <SD_ioctl+0x28>
 800792c:	2303      	movs	r3, #3
 800792e:	e03c      	b.n	80079aa <SD_ioctl+0xa2>

  switch (cmd)
 8007930:	79bb      	ldrb	r3, [r7, #6]
 8007932:	2b03      	cmp	r3, #3
 8007934:	d834      	bhi.n	80079a0 <SD_ioctl+0x98>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <SD_ioctl+0x34>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	0800794d 	.word	0x0800794d
 8007940:	08007955 	.word	0x08007955
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007987 	.word	0x08007987
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007952:	e028      	b.n	80079a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007954:	f107 030c 	add.w	r3, r7, #12
 8007958:	4618      	mov	r0, r3
 800795a:	f7ff fe83 	bl	8007664 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800795e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800796a:	e01c      	b.n	80079a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800796c:	f107 030c 	add.w	r3, r7, #12
 8007970:	4618      	mov	r0, r3
 8007972:	f7ff fe77 	bl	8007664 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	b29a      	uxth	r2, r3
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007984:	e00f      	b.n	80079a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007986:	f107 030c 	add.w	r3, r7, #12
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff fe6a 	bl	8007664 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	0a5a      	lsrs	r2, r3, #9
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800799e:	e002      	b.n	80079a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80079a0:	2304      	movs	r3, #4
 80079a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80079a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3730      	adds	r7, #48	; 0x30
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	200004a5 	.word	0x200004a5

080079b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80079bc:	4b03      	ldr	r3, [pc, #12]	; (80079cc <BSP_SD_WriteCpltCallback+0x14>)
 80079be:	2201      	movs	r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
}
 80079c2:	bf00      	nop
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	20001544 	.word	0x20001544

080079d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80079d4:	4b03      	ldr	r3, [pc, #12]	; (80079e4 <BSP_SD_ReadCpltCallback+0x14>)
 80079d6:	2201      	movs	r2, #1
 80079d8:	601a      	str	r2, [r3, #0]
}
 80079da:	bf00      	nop
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	20001548 	.word	0x20001548

080079e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80079ee:	4b8d      	ldr	r3, [pc, #564]	; (8007c24 <MX_LWIP_Init+0x23c>)
 80079f0:	22c0      	movs	r2, #192	; 0xc0
 80079f2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80079f4:	4b8b      	ldr	r3, [pc, #556]	; (8007c24 <MX_LWIP_Init+0x23c>)
 80079f6:	22a8      	movs	r2, #168	; 0xa8
 80079f8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 80079fa:	4b8a      	ldr	r3, [pc, #552]	; (8007c24 <MX_LWIP_Init+0x23c>)
 80079fc:	2212      	movs	r2, #18
 80079fe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 115;
 8007a00:	4b88      	ldr	r3, [pc, #544]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a02:	2273      	movs	r2, #115	; 0x73
 8007a04:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007a06:	4b88      	ldr	r3, [pc, #544]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007a08:	22ff      	movs	r2, #255	; 0xff
 8007a0a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007a0c:	4b86      	ldr	r3, [pc, #536]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007a0e:	22ff      	movs	r2, #255	; 0xff
 8007a10:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007a12:	4b85      	ldr	r3, [pc, #532]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007a14:	22ff      	movs	r2, #255	; 0xff
 8007a16:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007a18:	4b83      	ldr	r3, [pc, #524]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007a1e:	4b83      	ldr	r3, [pc, #524]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007a20:	22c0      	movs	r2, #192	; 0xc0
 8007a22:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007a24:	4b81      	ldr	r3, [pc, #516]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007a26:	22a8      	movs	r2, #168	; 0xa8
 8007a28:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8007a2a:	4b80      	ldr	r3, [pc, #512]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007a2c:	2212      	movs	r2, #18
 8007a2e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007a30:	4b7e      	ldr	r3, [pc, #504]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007a32:	2201      	movs	r2, #1
 8007a34:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007a36:	f005 f95f 	bl	800ccf8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007a3a:	4b7a      	ldr	r3, [pc, #488]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	061a      	lsls	r2, r3, #24
 8007a40:	4b78      	ldr	r3, [pc, #480]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	431a      	orrs	r2, r3
 8007a48:	4b76      	ldr	r3, [pc, #472]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a4a:	789b      	ldrb	r3, [r3, #2]
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	4a74      	ldr	r2, [pc, #464]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a52:	78d2      	ldrb	r2, [r2, #3]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	061a      	lsls	r2, r3, #24
 8007a58:	4b72      	ldr	r3, [pc, #456]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	0619      	lsls	r1, r3, #24
 8007a5e:	4b71      	ldr	r3, [pc, #452]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	041b      	lsls	r3, r3, #16
 8007a64:	4319      	orrs	r1, r3
 8007a66:	4b6f      	ldr	r3, [pc, #444]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a68:	789b      	ldrb	r3, [r3, #2]
 8007a6a:	021b      	lsls	r3, r3, #8
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	496d      	ldr	r1, [pc, #436]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a70:	78c9      	ldrb	r1, [r1, #3]
 8007a72:	430b      	orrs	r3, r1
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	4b69      	ldr	r3, [pc, #420]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	0619      	lsls	r1, r3, #24
 8007a82:	4b68      	ldr	r3, [pc, #416]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	041b      	lsls	r3, r3, #16
 8007a88:	4319      	orrs	r1, r3
 8007a8a:	4b66      	ldr	r3, [pc, #408]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a8c:	789b      	ldrb	r3, [r3, #2]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	430b      	orrs	r3, r1
 8007a92:	4964      	ldr	r1, [pc, #400]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007a94:	78c9      	ldrb	r1, [r1, #3]
 8007a96:	430b      	orrs	r3, r1
 8007a98:	0a1b      	lsrs	r3, r3, #8
 8007a9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	4b60      	ldr	r3, [pc, #384]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	0619      	lsls	r1, r3, #24
 8007aa6:	4b5f      	ldr	r3, [pc, #380]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	041b      	lsls	r3, r3, #16
 8007aac:	4319      	orrs	r1, r3
 8007aae:	4b5d      	ldr	r3, [pc, #372]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007ab0:	789b      	ldrb	r3, [r3, #2]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	495b      	ldr	r1, [pc, #364]	; (8007c24 <MX_LWIP_Init+0x23c>)
 8007ab8:	78c9      	ldrb	r1, [r1, #3]
 8007aba:	430b      	orrs	r3, r1
 8007abc:	0e1b      	lsrs	r3, r3, #24
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	4a5b      	ldr	r2, [pc, #364]	; (8007c30 <MX_LWIP_Init+0x248>)
 8007ac2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007ac4:	4b58      	ldr	r3, [pc, #352]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	061a      	lsls	r2, r3, #24
 8007aca:	4b57      	ldr	r3, [pc, #348]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	4b55      	ldr	r3, [pc, #340]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007ad4:	789b      	ldrb	r3, [r3, #2]
 8007ad6:	021b      	lsls	r3, r3, #8
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	4a53      	ldr	r2, [pc, #332]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007adc:	78d2      	ldrb	r2, [r2, #3]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	061a      	lsls	r2, r3, #24
 8007ae2:	4b51      	ldr	r3, [pc, #324]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	0619      	lsls	r1, r3, #24
 8007ae8:	4b4f      	ldr	r3, [pc, #316]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	041b      	lsls	r3, r3, #16
 8007aee:	4319      	orrs	r1, r3
 8007af0:	4b4d      	ldr	r3, [pc, #308]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007af2:	789b      	ldrb	r3, [r3, #2]
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	430b      	orrs	r3, r1
 8007af8:	494b      	ldr	r1, [pc, #300]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007afa:	78c9      	ldrb	r1, [r1, #3]
 8007afc:	430b      	orrs	r3, r1
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b04:	431a      	orrs	r2, r3
 8007b06:	4b48      	ldr	r3, [pc, #288]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	0619      	lsls	r1, r3, #24
 8007b0c:	4b46      	ldr	r3, [pc, #280]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007b0e:	785b      	ldrb	r3, [r3, #1]
 8007b10:	041b      	lsls	r3, r3, #16
 8007b12:	4319      	orrs	r1, r3
 8007b14:	4b44      	ldr	r3, [pc, #272]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007b16:	789b      	ldrb	r3, [r3, #2]
 8007b18:	021b      	lsls	r3, r3, #8
 8007b1a:	430b      	orrs	r3, r1
 8007b1c:	4942      	ldr	r1, [pc, #264]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007b1e:	78c9      	ldrb	r1, [r1, #3]
 8007b20:	430b      	orrs	r3, r1
 8007b22:	0a1b      	lsrs	r3, r3, #8
 8007b24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	4b3f      	ldr	r3, [pc, #252]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	0619      	lsls	r1, r3, #24
 8007b30:	4b3d      	ldr	r3, [pc, #244]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	041b      	lsls	r3, r3, #16
 8007b36:	4319      	orrs	r1, r3
 8007b38:	4b3b      	ldr	r3, [pc, #236]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007b3a:	789b      	ldrb	r3, [r3, #2]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	4939      	ldr	r1, [pc, #228]	; (8007c28 <MX_LWIP_Init+0x240>)
 8007b42:	78c9      	ldrb	r1, [r1, #3]
 8007b44:	430b      	orrs	r3, r1
 8007b46:	0e1b      	lsrs	r3, r3, #24
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	4a3a      	ldr	r2, [pc, #232]	; (8007c34 <MX_LWIP_Init+0x24c>)
 8007b4c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007b4e:	4b37      	ldr	r3, [pc, #220]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	061a      	lsls	r2, r3, #24
 8007b54:	4b35      	ldr	r3, [pc, #212]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b56:	785b      	ldrb	r3, [r3, #1]
 8007b58:	041b      	lsls	r3, r3, #16
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	4b33      	ldr	r3, [pc, #204]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b5e:	789b      	ldrb	r3, [r3, #2]
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	4313      	orrs	r3, r2
 8007b64:	4a31      	ldr	r2, [pc, #196]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b66:	78d2      	ldrb	r2, [r2, #3]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	061a      	lsls	r2, r3, #24
 8007b6c:	4b2f      	ldr	r3, [pc, #188]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	0619      	lsls	r1, r3, #24
 8007b72:	4b2e      	ldr	r3, [pc, #184]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	4319      	orrs	r1, r3
 8007b7a:	4b2c      	ldr	r3, [pc, #176]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b7c:	789b      	ldrb	r3, [r3, #2]
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	430b      	orrs	r3, r1
 8007b82:	492a      	ldr	r1, [pc, #168]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b84:	78c9      	ldrb	r1, [r1, #3]
 8007b86:	430b      	orrs	r3, r1
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	4b26      	ldr	r3, [pc, #152]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	0619      	lsls	r1, r3, #24
 8007b96:	4b25      	ldr	r3, [pc, #148]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	4319      	orrs	r1, r3
 8007b9e:	4b23      	ldr	r3, [pc, #140]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007ba0:	789b      	ldrb	r3, [r3, #2]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	4921      	ldr	r1, [pc, #132]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007ba8:	78c9      	ldrb	r1, [r1, #3]
 8007baa:	430b      	orrs	r3, r1
 8007bac:	0a1b      	lsrs	r3, r3, #8
 8007bae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	4b1d      	ldr	r3, [pc, #116]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	0619      	lsls	r1, r3, #24
 8007bba:	4b1c      	ldr	r3, [pc, #112]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	041b      	lsls	r3, r3, #16
 8007bc0:	4319      	orrs	r1, r3
 8007bc2:	4b1a      	ldr	r3, [pc, #104]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007bc4:	789b      	ldrb	r3, [r3, #2]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	4918      	ldr	r1, [pc, #96]	; (8007c2c <MX_LWIP_Init+0x244>)
 8007bcc:	78c9      	ldrb	r1, [r1, #3]
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	0e1b      	lsrs	r3, r3, #24
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	4a18      	ldr	r2, [pc, #96]	; (8007c38 <MX_LWIP_Init+0x250>)
 8007bd6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007bd8:	4b18      	ldr	r3, [pc, #96]	; (8007c3c <MX_LWIP_Init+0x254>)
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <MX_LWIP_Init+0x258>)
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	2300      	movs	r3, #0
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	4b14      	ldr	r3, [pc, #80]	; (8007c38 <MX_LWIP_Init+0x250>)
 8007be6:	4a13      	ldr	r2, [pc, #76]	; (8007c34 <MX_LWIP_Init+0x24c>)
 8007be8:	4911      	ldr	r1, [pc, #68]	; (8007c30 <MX_LWIP_Init+0x248>)
 8007bea:	4816      	ldr	r0, [pc, #88]	; (8007c44 <MX_LWIP_Init+0x25c>)
 8007bec:	f005 fd2a 	bl	800d644 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007bf0:	4814      	ldr	r0, [pc, #80]	; (8007c44 <MX_LWIP_Init+0x25c>)
 8007bf2:	f005 fed9 	bl	800d9a8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007bf6:	4b13      	ldr	r3, [pc, #76]	; (8007c44 <MX_LWIP_Init+0x25c>)
 8007bf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007bfc:	089b      	lsrs	r3, r3, #2
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007c08:	480e      	ldr	r0, [pc, #56]	; (8007c44 <MX_LWIP_Init+0x25c>)
 8007c0a:	f005 fedd 	bl	800d9c8 <netif_set_up>
 8007c0e:	e002      	b.n	8007c16 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007c10:	480c      	ldr	r0, [pc, #48]	; (8007c44 <MX_LWIP_Init+0x25c>)
 8007c12:	f005 ff45 	bl	800daa0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007c16:	490c      	ldr	r1, [pc, #48]	; (8007c48 <MX_LWIP_Init+0x260>)
 8007c18:	480a      	ldr	r0, [pc, #40]	; (8007c44 <MX_LWIP_Init+0x25c>)
 8007c1a:	f005 ff73 	bl	800db04 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007c1e:	bf00      	nop
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	2000b1f8 	.word	0x2000b1f8
 8007c28:	2000b1f4 	.word	0x2000b1f4
 8007c2c:	2000b1ec 	.word	0x2000b1ec
 8007c30:	2000b1f0 	.word	0x2000b1f0
 8007c34:	2000b1fc 	.word	0x2000b1fc
 8007c38:	2000b200 	.word	0x2000b200
 8007c3c:	080171a9 	.word	0x080171a9
 8007c40:	080081d9 	.word	0x080081d9
 8007c44:	20005edc 	.word	0x20005edc
 8007c48:	08008245 	.word	0x08008245

08007c4c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08e      	sub	sp, #56	; 0x38
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	605a      	str	r2, [r3, #4]
 8007c5e:	609a      	str	r2, [r3, #8]
 8007c60:	60da      	str	r2, [r3, #12]
 8007c62:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a46      	ldr	r2, [pc, #280]	; (8007d84 <HAL_ETH_MspInit+0x138>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	f040 8085 	bne.w	8007d7a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007c70:	2300      	movs	r3, #0
 8007c72:	623b      	str	r3, [r7, #32]
 8007c74:	4b44      	ldr	r3, [pc, #272]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	4a43      	ldr	r2, [pc, #268]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007c7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8007c80:	4b41      	ldr	r3, [pc, #260]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c88:	623b      	str	r3, [r7, #32]
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	4b3d      	ldr	r3, [pc, #244]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	4a3c      	ldr	r2, [pc, #240]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007c96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c9c:	4b3a      	ldr	r3, [pc, #232]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61bb      	str	r3, [r7, #24]
 8007cac:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	4a35      	ldr	r2, [pc, #212]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007cb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8007cb8:	4b33      	ldr	r3, [pc, #204]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	4b2f      	ldr	r3, [pc, #188]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	4a2e      	ldr	r2, [pc, #184]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007cce:	f043 0304 	orr.w	r3, r3, #4
 8007cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8007cd4:	4b2c      	ldr	r3, [pc, #176]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	4b28      	ldr	r3, [pc, #160]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	4a27      	ldr	r2, [pc, #156]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	6313      	str	r3, [r2, #48]	; 0x30
 8007cf0:	4b25      	ldr	r3, [pc, #148]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	613b      	str	r3, [r7, #16]
 8007cfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	4b21      	ldr	r3, [pc, #132]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	4a20      	ldr	r2, [pc, #128]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007d06:	f043 0302 	orr.w	r3, r3, #2
 8007d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8007d0c:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <HAL_ETH_MspInit+0x13c>)
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007d18:	2332      	movs	r3, #50	; 0x32
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d24:	2303      	movs	r3, #3
 8007d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d28:	230b      	movs	r3, #11
 8007d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d30:	4619      	mov	r1, r3
 8007d32:	4816      	ldr	r0, [pc, #88]	; (8007d8c <HAL_ETH_MspInit+0x140>)
 8007d34:	f7fc f94e 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007d38:	2386      	movs	r3, #134	; 0x86
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d44:	2303      	movs	r3, #3
 8007d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d48:	230b      	movs	r3, #11
 8007d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d50:	4619      	mov	r1, r3
 8007d52:	480f      	ldr	r0, [pc, #60]	; (8007d90 <HAL_ETH_MspInit+0x144>)
 8007d54:	f7fc f93e 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007d58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d5e:	2302      	movs	r3, #2
 8007d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d62:	2300      	movs	r3, #0
 8007d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d66:	2303      	movs	r3, #3
 8007d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d6a:	230b      	movs	r3, #11
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d72:	4619      	mov	r1, r3
 8007d74:	4807      	ldr	r0, [pc, #28]	; (8007d94 <HAL_ETH_MspInit+0x148>)
 8007d76:	f7fc f92d 	bl	8003fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	3738      	adds	r7, #56	; 0x38
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	40028000 	.word	0x40028000
 8007d88:	40023800 	.word	0x40023800
 8007d8c:	40020800 	.word	0x40020800
 8007d90:	40020000 	.word	0x40020000
 8007d94:	40020400 	.word	0x40020400

08007d98 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007da0:	2300      	movs	r3, #0
 8007da2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007da4:	4b4d      	ldr	r3, [pc, #308]	; (8007edc <low_level_init+0x144>)
 8007da6:	4a4e      	ldr	r2, [pc, #312]	; (8007ee0 <low_level_init+0x148>)
 8007da8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007daa:	4b4c      	ldr	r3, [pc, #304]	; (8007edc <low_level_init+0x144>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007db0:	4b4a      	ldr	r3, [pc, #296]	; (8007edc <low_level_init+0x144>)
 8007db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007db6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007db8:	4b48      	ldr	r3, [pc, #288]	; (8007edc <low_level_init+0x144>)
 8007dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dbe:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007dc0:	4b46      	ldr	r3, [pc, #280]	; (8007edc <low_level_init+0x144>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007dca:	2380      	movs	r3, #128	; 0x80
 8007dcc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007dce:	23e1      	movs	r3, #225	; 0xe1
 8007dd0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007dde:	4a3f      	ldr	r2, [pc, #252]	; (8007edc <low_level_init+0x144>)
 8007de0:	f107 0308 	add.w	r3, r7, #8
 8007de4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007de6:	4b3d      	ldr	r3, [pc, #244]	; (8007edc <low_level_init+0x144>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007dec:	4b3b      	ldr	r3, [pc, #236]	; (8007edc <low_level_init+0x144>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007df2:	4b3a      	ldr	r3, [pc, #232]	; (8007edc <low_level_init+0x144>)
 8007df4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007df8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007dfa:	4838      	ldr	r0, [pc, #224]	; (8007edc <low_level_init+0x144>)
 8007dfc:	f7fa ffc4 	bl	8002d88 <HAL_ETH_Init>
 8007e00:	4603      	mov	r3, r0
 8007e02:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d108      	bne.n	8007e1c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e10:	f043 0304 	orr.w	r3, r3, #4
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	4a31      	ldr	r2, [pc, #196]	; (8007ee4 <low_level_init+0x14c>)
 8007e20:	4931      	ldr	r1, [pc, #196]	; (8007ee8 <low_level_init+0x150>)
 8007e22:	482e      	ldr	r0, [pc, #184]	; (8007edc <low_level_init+0x144>)
 8007e24:	f7fb f94c 	bl	80030c0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007e28:	2304      	movs	r3, #4
 8007e2a:	4a30      	ldr	r2, [pc, #192]	; (8007eec <low_level_init+0x154>)
 8007e2c:	4930      	ldr	r1, [pc, #192]	; (8007ef0 <low_level_init+0x158>)
 8007e2e:	482b      	ldr	r0, [pc, #172]	; (8007edc <low_level_init+0x144>)
 8007e30:	f7fb f9af 	bl	8003192 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2206      	movs	r2, #6
 8007e38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007e3c:	4b27      	ldr	r3, [pc, #156]	; (8007edc <low_level_init+0x144>)
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007e48:	4b24      	ldr	r3, [pc, #144]	; (8007edc <low_level_init+0x144>)
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	785a      	ldrb	r2, [r3, #1]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007e54:	4b21      	ldr	r3, [pc, #132]	; (8007edc <low_level_init+0x144>)
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	789a      	ldrb	r2, [r3, #2]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007e60:	4b1e      	ldr	r3, [pc, #120]	; (8007edc <low_level_init+0x144>)
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	78da      	ldrb	r2, [r3, #3]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007e6c:	4b1b      	ldr	r3, [pc, #108]	; (8007edc <low_level_init+0x144>)
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	791a      	ldrb	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007e78:	4b18      	ldr	r3, [pc, #96]	; (8007edc <low_level_init+0x144>)
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	795a      	ldrb	r2, [r3, #5]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007e8a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e92:	f043 030a 	orr.w	r3, r3, #10
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007e9e:	480f      	ldr	r0, [pc, #60]	; (8007edc <low_level_init+0x144>)
 8007ea0:	f7fb fc20 	bl	80036e4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007ea4:	f107 0310 	add.w	r3, r7, #16
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	211d      	movs	r1, #29
 8007eac:	480b      	ldr	r0, [pc, #44]	; (8007edc <low_level_init+0x144>)
 8007eae:	f7fb fb4b 	bl	8003548 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f043 030b 	orr.w	r3, r3, #11
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	211d      	movs	r1, #29
 8007ec0:	4806      	ldr	r0, [pc, #24]	; (8007edc <low_level_init+0x144>)
 8007ec2:	f7fb fba9 	bl	8003618 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007ec6:	f107 0310 	add.w	r3, r7, #16
 8007eca:	461a      	mov	r2, r3
 8007ecc:	211d      	movs	r1, #29
 8007ece:	4803      	ldr	r0, [pc, #12]	; (8007edc <low_level_init+0x144>)
 8007ed0:	f7fb fb3a 	bl	8003548 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007ed4:	bf00      	nop
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	2000cad4 	.word	0x2000cad4
 8007ee0:	40028000 	.word	0x40028000
 8007ee4:	2000cb1c 	.word	0x2000cb1c
 8007ee8:	2000b204 	.word	0x2000b204
 8007eec:	2000b284 	.word	0x2000b284
 8007ef0:	2000ca54 	.word	0x2000ca54

08007ef4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007efe:	4b4b      	ldr	r3, [pc, #300]	; (800802c <low_level_output+0x138>)
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007f16:	4b45      	ldr	r3, [pc, #276]	; (800802c <low_level_output+0x138>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	623b      	str	r3, [r7, #32]
 8007f24:	e05a      	b.n	8007fdc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da03      	bge.n	8007f36 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007f2e:	23f8      	movs	r3, #248	; 0xf8
 8007f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007f34:	e05c      	b.n	8007ff0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	895b      	ldrh	r3, [r3, #10]
 8007f3a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007f40:	e02f      	b.n	8007fa2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	18d0      	adds	r0, r2, r3
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	18d1      	adds	r1, r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007f56:	3304      	adds	r3, #4
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f00f fa31 	bl	80173c0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	da03      	bge.n	8007f74 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007f6c:	23f8      	movs	r3, #248	; 0xf8
 8007f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007f72:	e03d      	b.n	8007ff0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007f84:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007f90:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007f9c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d8c8      	bhi.n	8007f42 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	18d0      	adds	r0, r2, r3
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f00f f9fd 	bl	80173c0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4413      	add	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	623b      	str	r3, [r7, #32]
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1a1      	bne.n	8007f26 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007fe2:	6979      	ldr	r1, [r7, #20]
 8007fe4:	4811      	ldr	r0, [pc, #68]	; (800802c <low_level_output+0x138>)
 8007fe6:	f7fb f941 	bl	800326c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007ff0:	4b0e      	ldr	r3, [pc, #56]	; (800802c <low_level_output+0x138>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0320 	and.w	r3, r3, #32
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00d      	beq.n	8008020 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008004:	4b09      	ldr	r3, [pc, #36]	; (800802c <low_level_output+0x138>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800c:	3314      	adds	r3, #20
 800800e:	2220      	movs	r2, #32
 8008010:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008012:	4b06      	ldr	r3, [pc, #24]	; (800802c <low_level_output+0x138>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801a:	3304      	adds	r3, #4
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008020:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008024:	4618      	mov	r0, r3
 8008026:	3728      	adds	r7, #40	; 0x28
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	2000cad4 	.word	0x2000cad4

08008030 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08c      	sub	sp, #48	; 0x30
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008038:	2300      	movs	r3, #0
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800803c:	2300      	movs	r3, #0
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008050:	2300      	movs	r3, #0
 8008052:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008054:	484f      	ldr	r0, [pc, #316]	; (8008194 <low_level_input+0x164>)
 8008056:	f7fb f9f3 	bl	8003440 <HAL_ETH_GetReceivedFrame>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <low_level_input+0x34>

    return NULL;
 8008060:	2300      	movs	r3, #0
 8008062:	e092      	b.n	800818a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008064:	4b4b      	ldr	r3, [pc, #300]	; (8008194 <low_level_input+0x164>)
 8008066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008068:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800806a:	4b4a      	ldr	r3, [pc, #296]	; (8008194 <low_level_input+0x164>)
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008070:	89fb      	ldrh	r3, [r7, #14]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008076:	89fb      	ldrh	r3, [r7, #14]
 8008078:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800807c:	4619      	mov	r1, r3
 800807e:	2000      	movs	r0, #0
 8008080:	f005 fddc 	bl	800dc3c <pbuf_alloc>
 8008084:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d04b      	beq.n	8008124 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800808c:	4b41      	ldr	r3, [pc, #260]	; (8008194 <low_level_input+0x164>)
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	62bb      	str	r3, [r7, #40]	; 0x28
 800809a:	e040      	b.n	800811e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	895b      	ldrh	r3, [r3, #10]
 80080a0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80080a6:	e021      	b.n	80080ec <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	18d0      	adds	r0, r2, r3
 80080b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	18d1      	adds	r1, r2, r3
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80080bc:	3304      	adds	r3, #4
 80080be:	461a      	mov	r2, r3
 80080c0:	f00f f97e 	bl	80173c0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80080d0:	69fa      	ldr	r2, [r7, #28]
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	4413      	add	r3, r2
 80080d6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80080da:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80080e6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d8d6      	bhi.n	80080a8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	18d0      	adds	r0, r2, r3
 8008102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	4413      	add	r3, r2
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4619      	mov	r1, r3
 800810c:	f00f f958 	bl	80173c0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	4413      	add	r3, r2
 8008116:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	62bb      	str	r3, [r7, #40]	; 0x28
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1bb      	bne.n	800809c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008124:	4b1b      	ldr	r3, [pc, #108]	; (8008194 <low_level_input+0x164>)
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800812a:	2300      	movs	r3, #0
 800812c:	613b      	str	r3, [r7, #16]
 800812e:	e00b      	b.n	8008148 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	3301      	adds	r3, #1
 8008146:	613b      	str	r3, [r7, #16]
 8008148:	4b12      	ldr	r3, [pc, #72]	; (8008194 <low_level_input+0x164>)
 800814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	429a      	cmp	r2, r3
 8008150:	d3ee      	bcc.n	8008130 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008152:	4b10      	ldr	r3, [pc, #64]	; (8008194 <low_level_input+0x164>)
 8008154:	2200      	movs	r2, #0
 8008156:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008158:	4b0e      	ldr	r3, [pc, #56]	; (8008194 <low_level_input+0x164>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008160:	3314      	adds	r3, #20
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00d      	beq.n	8008188 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800816c:	4b09      	ldr	r3, [pc, #36]	; (8008194 <low_level_input+0x164>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008174:	3314      	adds	r3, #20
 8008176:	2280      	movs	r2, #128	; 0x80
 8008178:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <low_level_input+0x164>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008182:	3308      	adds	r3, #8
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800818a:	4618      	mov	r0, r3
 800818c:	3730      	adds	r7, #48	; 0x30
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	2000cad4 	.word	0x2000cad4

08008198 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ff45 	bl	8008030 <low_level_input>
 80081a6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d010      	beq.n	80081d0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	4798      	blx	r3
 80081b8:	4603      	mov	r3, r0
 80081ba:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80081bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f006 f81d 	bl	800e204 <pbuf_free>
    p = NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e000      	b.n	80081d2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80081d0:	bf00      	nop
  }
}
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <ethernetif_init+0x1c>
 80081e6:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <ethernetif_init+0x48>)
 80081e8:	f44f 7202 	mov.w	r2, #520	; 0x208
 80081ec:	490d      	ldr	r1, [pc, #52]	; (8008224 <ethernetif_init+0x4c>)
 80081ee:	480e      	ldr	r0, [pc, #56]	; (8008228 <ethernetif_init+0x50>)
 80081f0:	f00f f916 	bl	8017420 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2273      	movs	r2, #115	; 0x73
 80081f8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2274      	movs	r2, #116	; 0x74
 8008200:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <ethernetif_init+0x54>)
 8008208:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a08      	ldr	r2, [pc, #32]	; (8008230 <ethernetif_init+0x58>)
 800820e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff fdc1 	bl	8007d98 <low_level_init>

  return ERR_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	080194cc 	.word	0x080194cc
 8008224:	080194e8 	.word	0x080194e8
 8008228:	080194f8 	.word	0x080194f8
 800822c:	0801566d 	.word	0x0801566d
 8008230:	08007ef5 	.word	0x08007ef5

08008234 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008238:	f7fa f8c6 	bl	80023c8 <HAL_GetTick>
 800823c:	4603      	mov	r3, r0
}
 800823e:	4618      	mov	r0, r3
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800825a:	089b      	lsrs	r3, r3, #2
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d05d      	beq.n	8008322 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008266:	4b34      	ldr	r3, [pc, #208]	; (8008338 <ethernetif_update_config+0xf4>)
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d03f      	beq.n	80082ee <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800826e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008272:	2100      	movs	r1, #0
 8008274:	4830      	ldr	r0, [pc, #192]	; (8008338 <ethernetif_update_config+0xf4>)
 8008276:	f7fb f9cf 	bl	8003618 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800827a:	f7fa f8a5 	bl	80023c8 <HAL_GetTick>
 800827e:	4603      	mov	r3, r0
 8008280:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008282:	f107 0308 	add.w	r3, r7, #8
 8008286:	461a      	mov	r2, r3
 8008288:	2101      	movs	r1, #1
 800828a:	482b      	ldr	r0, [pc, #172]	; (8008338 <ethernetif_update_config+0xf4>)
 800828c:	f7fb f95c 	bl	8003548 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008290:	f7fa f89a 	bl	80023c8 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800829e:	d828      	bhi.n	80082f2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0eb      	beq.n	8008282 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80082aa:	f107 0308 	add.w	r3, r7, #8
 80082ae:	461a      	mov	r2, r3
 80082b0:	2110      	movs	r1, #16
 80082b2:	4821      	ldr	r0, [pc, #132]	; (8008338 <ethernetif_update_config+0xf4>)
 80082b4:	f7fb f948 	bl	8003548 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f003 0304 	and.w	r3, r3, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d004      	beq.n	80082cc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80082c2:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <ethernetif_update_config+0xf4>)
 80082c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c8:	60da      	str	r2, [r3, #12]
 80082ca:	e002      	b.n	80082d2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80082cc:	4b1a      	ldr	r3, [pc, #104]	; (8008338 <ethernetif_update_config+0xf4>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80082dc:	4b16      	ldr	r3, [pc, #88]	; (8008338 <ethernetif_update_config+0xf4>)
 80082de:	2200      	movs	r2, #0
 80082e0:	609a      	str	r2, [r3, #8]
 80082e2:	e016      	b.n	8008312 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80082e4:	4b14      	ldr	r3, [pc, #80]	; (8008338 <ethernetif_update_config+0xf4>)
 80082e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082ea:	609a      	str	r2, [r3, #8]
 80082ec:	e011      	b.n	8008312 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80082ee:	bf00      	nop
 80082f0:	e000      	b.n	80082f4 <ethernetif_update_config+0xb0>
          goto error;
 80082f2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80082f4:	4b10      	ldr	r3, [pc, #64]	; (8008338 <ethernetif_update_config+0xf4>)
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	08db      	lsrs	r3, r3, #3
 80082fa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80082fc:	4b0e      	ldr	r3, [pc, #56]	; (8008338 <ethernetif_update_config+0xf4>)
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	085b      	lsrs	r3, r3, #1
 8008302:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008304:	4313      	orrs	r3, r2
 8008306:	b29b      	uxth	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	2100      	movs	r1, #0
 800830c:	480a      	ldr	r0, [pc, #40]	; (8008338 <ethernetif_update_config+0xf4>)
 800830e:	f7fb f983 	bl	8003618 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008312:	2100      	movs	r1, #0
 8008314:	4808      	ldr	r0, [pc, #32]	; (8008338 <ethernetif_update_config+0xf4>)
 8008316:	f7fb fa43 	bl	80037a0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800831a:	4807      	ldr	r0, [pc, #28]	; (8008338 <ethernetif_update_config+0xf4>)
 800831c:	f7fb f9e2 	bl	80036e4 <HAL_ETH_Start>
 8008320:	e002      	b.n	8008328 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008322:	4805      	ldr	r0, [pc, #20]	; (8008338 <ethernetif_update_config+0xf4>)
 8008324:	f7fb fa0d 	bl	8003742 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f807 	bl	800833c <ethernetif_notify_conn_changed>
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	2000cad4 	.word	0x2000cad4

0800833c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	4a08      	ldr	r2, [pc, #32]	; (8008380 <disk_status+0x30>)
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	79fa      	ldrb	r2, [r7, #7]
 8008368:	4905      	ldr	r1, [pc, #20]	; (8008380 <disk_status+0x30>)
 800836a:	440a      	add	r2, r1
 800836c:	7a12      	ldrb	r2, [r2, #8]
 800836e:	4610      	mov	r0, r2
 8008370:	4798      	blx	r3
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008376:	7bfb      	ldrb	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	20001574 	.word	0x20001574

08008384 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	4a0d      	ldr	r2, [pc, #52]	; (80083cc <disk_initialize+0x48>)
 8008396:	5cd3      	ldrb	r3, [r2, r3]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d111      	bne.n	80083c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	4a0b      	ldr	r2, [pc, #44]	; (80083cc <disk_initialize+0x48>)
 80083a0:	2101      	movs	r1, #1
 80083a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	4a09      	ldr	r2, [pc, #36]	; (80083cc <disk_initialize+0x48>)
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	79fa      	ldrb	r2, [r7, #7]
 80083b2:	4906      	ldr	r1, [pc, #24]	; (80083cc <disk_initialize+0x48>)
 80083b4:	440a      	add	r2, r1
 80083b6:	7a12      	ldrb	r2, [r2, #8]
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20001574 	.word	0x20001574

080083d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80083d0:	b590      	push	{r4, r7, lr}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	607a      	str	r2, [r7, #4]
 80083da:	603b      	str	r3, [r7, #0]
 80083dc:	4603      	mov	r3, r0
 80083de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	4a0a      	ldr	r2, [pc, #40]	; (800840c <disk_read+0x3c>)
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	689c      	ldr	r4, [r3, #8]
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	4a07      	ldr	r2, [pc, #28]	; (800840c <disk_read+0x3c>)
 80083f0:	4413      	add	r3, r2
 80083f2:	7a18      	ldrb	r0, [r3, #8]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	47a0      	blx	r4
 80083fc:	4603      	mov	r3, r0
 80083fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
}
 8008402:	4618      	mov	r0, r3
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	bd90      	pop	{r4, r7, pc}
 800840a:	bf00      	nop
 800840c:	20001574 	.word	0x20001574

08008410 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	607a      	str	r2, [r7, #4]
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	4a0a      	ldr	r2, [pc, #40]	; (800844c <disk_write+0x3c>)
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	68dc      	ldr	r4, [r3, #12]
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	4a07      	ldr	r2, [pc, #28]	; (800844c <disk_write+0x3c>)
 8008430:	4413      	add	r3, r2
 8008432:	7a18      	ldrb	r0, [r3, #8]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	68b9      	ldr	r1, [r7, #8]
 800843a:	47a0      	blx	r4
 800843c:	4603      	mov	r3, r0
 800843e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
}
 8008442:	4618      	mov	r0, r3
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	bd90      	pop	{r4, r7, pc}
 800844a:	bf00      	nop
 800844c:	20001574 	.word	0x20001574

08008450 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	603a      	str	r2, [r7, #0]
 800845a:	71fb      	strb	r3, [r7, #7]
 800845c:	460b      	mov	r3, r1
 800845e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	4a09      	ldr	r2, [pc, #36]	; (8008488 <disk_ioctl+0x38>)
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	79fa      	ldrb	r2, [r7, #7]
 800846e:	4906      	ldr	r1, [pc, #24]	; (8008488 <disk_ioctl+0x38>)
 8008470:	440a      	add	r2, r1
 8008472:	7a10      	ldrb	r0, [r2, #8]
 8008474:	79b9      	ldrb	r1, [r7, #6]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	4798      	blx	r3
 800847a:	4603      	mov	r3, r0
 800847c:	73fb      	strb	r3, [r7, #15]
  return res;
 800847e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20001574 	.word	0x20001574

0800848c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3301      	adds	r3, #1
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800849c:	89fb      	ldrh	r3, [r7, #14]
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	b21a      	sxth	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	4313      	orrs	r3, r2
 80084aa:	b21b      	sxth	r3, r3
 80084ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80084ae:	89fb      	ldrh	r3, [r7, #14]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3303      	adds	r3, #3
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	3202      	adds	r2, #2
 80084d4:	7812      	ldrb	r2, [r2, #0]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	021b      	lsls	r3, r3, #8
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	3201      	adds	r2, #1
 80084e2:	7812      	ldrb	r2, [r2, #0]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	7812      	ldrb	r2, [r2, #0]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80084f4:	68fb      	ldr	r3, [r7, #12]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	887a      	ldrh	r2, [r7, #2]
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]
 800851a:	887b      	ldrh	r3, [r7, #2]
 800851c:	0a1b      	lsrs	r3, r3, #8
 800851e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	887a      	ldrh	r2, [r7, #2]
 8008528:	b2d2      	uxtb	r2, r2
 800852a:	701a      	strb	r2, [r3, #0]
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	b2d2      	uxtb	r2, r2
 800854c:	701a      	strb	r2, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	0a1b      	lsrs	r3, r3, #8
 8008552:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	701a      	strb	r2, [r3, #0]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	0a1b      	lsrs	r3, r3, #8
 8008564:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	0a1b      	lsrs	r3, r3, #8
 8008576:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	607a      	str	r2, [r7, #4]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	b2d2      	uxtb	r2, r2
 8008582:	701a      	strb	r2, [r3, #0]
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00d      	beq.n	80085c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	1c53      	adds	r3, r2, #1
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	1c59      	adds	r1, r3, #1
 80085b4:	6179      	str	r1, [r7, #20]
 80085b6:	7812      	ldrb	r2, [r2, #0]
 80085b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3b01      	subs	r3, #1
 80085be:	607b      	str	r3, [r7, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1f1      	bne.n	80085aa <mem_cpy+0x1a>
	}
}
 80085c6:	bf00      	nop
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80085d2:	b480      	push	{r7}
 80085d4:	b087      	sub	sp, #28
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	617a      	str	r2, [r7, #20]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	b2d2      	uxtb	r2, r2
 80085ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	607b      	str	r3, [r7, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1f3      	bne.n	80085e2 <mem_set+0x10>
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	371c      	adds	r7, #28
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008608:	b480      	push	{r7}
 800860a:	b089      	sub	sp, #36	; 0x24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	61fa      	str	r2, [r7, #28]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	61ba      	str	r2, [r7, #24]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	1acb      	subs	r3, r1, r3
 8008634:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3b01      	subs	r3, #1
 800863a:	607b      	str	r3, [r7, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <mem_cmp+0x40>
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0eb      	beq.n	8008620 <mem_cmp+0x18>

	return r;
 8008648:	697b      	ldr	r3, [r7, #20]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3724      	adds	r7, #36	; 0x24
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008656:	b480      	push	{r7}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008660:	e002      	b.n	8008668 <chk_chr+0x12>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3301      	adds	r3, #1
 8008666:	607b      	str	r3, [r7, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d005      	beq.n	800867c <chk_chr+0x26>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	4293      	cmp	r3, r2
 800867a:	d1f2      	bne.n	8008662 <chk_chr+0xc>
	return *str;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	781b      	ldrb	r3, [r3, #0]
}
 8008680:	4618      	mov	r0, r3
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	e029      	b.n	80086f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80086a0:	4a27      	ldr	r2, [pc, #156]	; (8008740 <chk_lock+0xb4>)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	4413      	add	r3, r2
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01d      	beq.n	80086ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80086ae:	4a24      	ldr	r2, [pc, #144]	; (8008740 <chk_lock+0xb4>)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	4413      	add	r3, r2
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d116      	bne.n	80086ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80086c0:	4a1f      	ldr	r2, [pc, #124]	; (8008740 <chk_lock+0xb4>)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	4413      	add	r3, r2
 80086c8:	3304      	adds	r3, #4
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d10c      	bne.n	80086ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086d4:	4a1a      	ldr	r2, [pc, #104]	; (8008740 <chk_lock+0xb4>)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	4413      	add	r3, r2
 80086dc:	3308      	adds	r3, #8
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d102      	bne.n	80086ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086e8:	e007      	b.n	80086fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80086ea:	2301      	movs	r3, #1
 80086ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3301      	adds	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d9d2      	bls.n	80086a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d109      	bne.n	8008714 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d102      	bne.n	800870c <chk_lock+0x80>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d101      	bne.n	8008710 <chk_lock+0x84>
 800870c:	2300      	movs	r3, #0
 800870e:	e010      	b.n	8008732 <chk_lock+0xa6>
 8008710:	2312      	movs	r3, #18
 8008712:	e00e      	b.n	8008732 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d108      	bne.n	800872c <chk_lock+0xa0>
 800871a:	4a09      	ldr	r2, [pc, #36]	; (8008740 <chk_lock+0xb4>)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	4413      	add	r3, r2
 8008722:	330c      	adds	r3, #12
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872a:	d101      	bne.n	8008730 <chk_lock+0xa4>
 800872c:	2310      	movs	r3, #16
 800872e:	e000      	b.n	8008732 <chk_lock+0xa6>
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20001554 	.word	0x20001554

08008744 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800874a:	2300      	movs	r3, #0
 800874c:	607b      	str	r3, [r7, #4]
 800874e:	e002      	b.n	8008756 <enq_lock+0x12>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3301      	adds	r3, #1
 8008754:	607b      	str	r3, [r7, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d806      	bhi.n	800876a <enq_lock+0x26>
 800875c:	4a09      	ldr	r2, [pc, #36]	; (8008784 <enq_lock+0x40>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	4413      	add	r3, r2
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f2      	bne.n	8008750 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b02      	cmp	r3, #2
 800876e:	bf14      	ite	ne
 8008770:	2301      	movne	r3, #1
 8008772:	2300      	moveq	r3, #0
 8008774:	b2db      	uxtb	r3, r3
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20001554 	.word	0x20001554

08008788 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	e01f      	b.n	80087d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008798:	4a41      	ldr	r2, [pc, #260]	; (80088a0 <inc_lock+0x118>)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	011b      	lsls	r3, r3, #4
 800879e:	4413      	add	r3, r2
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d113      	bne.n	80087d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80087aa:	4a3d      	ldr	r2, [pc, #244]	; (80088a0 <inc_lock+0x118>)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	4413      	add	r3, r2
 80087b2:	3304      	adds	r3, #4
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d109      	bne.n	80087d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80087be:	4a38      	ldr	r2, [pc, #224]	; (80088a0 <inc_lock+0x118>)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	011b      	lsls	r3, r3, #4
 80087c4:	4413      	add	r3, r2
 80087c6:	3308      	adds	r3, #8
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d006      	beq.n	80087e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3301      	adds	r3, #1
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d9dc      	bls.n	8008798 <inc_lock+0x10>
 80087de:	e000      	b.n	80087e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80087e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d132      	bne.n	800884e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	e002      	b.n	80087f4 <inc_lock+0x6c>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3301      	adds	r3, #1
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d806      	bhi.n	8008808 <inc_lock+0x80>
 80087fa:	4a29      	ldr	r2, [pc, #164]	; (80088a0 <inc_lock+0x118>)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	4413      	add	r3, r2
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1f2      	bne.n	80087ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d101      	bne.n	8008812 <inc_lock+0x8a>
 800880e:	2300      	movs	r3, #0
 8008810:	e040      	b.n	8008894 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	4922      	ldr	r1, [pc, #136]	; (80088a0 <inc_lock+0x118>)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	440b      	add	r3, r1
 800881e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	491e      	ldr	r1, [pc, #120]	; (80088a0 <inc_lock+0x118>)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	011b      	lsls	r3, r3, #4
 800882a:	440b      	add	r3, r1
 800882c:	3304      	adds	r3, #4
 800882e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	695a      	ldr	r2, [r3, #20]
 8008834:	491a      	ldr	r1, [pc, #104]	; (80088a0 <inc_lock+0x118>)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	011b      	lsls	r3, r3, #4
 800883a:	440b      	add	r3, r1
 800883c:	3308      	adds	r3, #8
 800883e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008840:	4a17      	ldr	r2, [pc, #92]	; (80088a0 <inc_lock+0x118>)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	4413      	add	r3, r2
 8008848:	330c      	adds	r3, #12
 800884a:	2200      	movs	r2, #0
 800884c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d009      	beq.n	8008868 <inc_lock+0xe0>
 8008854:	4a12      	ldr	r2, [pc, #72]	; (80088a0 <inc_lock+0x118>)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	4413      	add	r3, r2
 800885c:	330c      	adds	r3, #12
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <inc_lock+0xe0>
 8008864:	2300      	movs	r3, #0
 8008866:	e015      	b.n	8008894 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d108      	bne.n	8008880 <inc_lock+0xf8>
 800886e:	4a0c      	ldr	r2, [pc, #48]	; (80088a0 <inc_lock+0x118>)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	4413      	add	r3, r2
 8008876:	330c      	adds	r3, #12
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	3301      	adds	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	e001      	b.n	8008884 <inc_lock+0xfc>
 8008880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008884:	4906      	ldr	r1, [pc, #24]	; (80088a0 <inc_lock+0x118>)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	011b      	lsls	r3, r3, #4
 800888a:	440b      	add	r3, r1
 800888c:	330c      	adds	r3, #12
 800888e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3301      	adds	r3, #1
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	20001554 	.word	0x20001554

080088a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	607b      	str	r3, [r7, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d825      	bhi.n	8008904 <dec_lock+0x60>
		n = Files[i].ctr;
 80088b8:	4a17      	ldr	r2, [pc, #92]	; (8008918 <dec_lock+0x74>)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	4413      	add	r3, r2
 80088c0:	330c      	adds	r3, #12
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80088c6:	89fb      	ldrh	r3, [r7, #14]
 80088c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088cc:	d101      	bne.n	80088d2 <dec_lock+0x2e>
 80088ce:	2300      	movs	r3, #0
 80088d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80088d2:	89fb      	ldrh	r3, [r7, #14]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <dec_lock+0x3a>
 80088d8:	89fb      	ldrh	r3, [r7, #14]
 80088da:	3b01      	subs	r3, #1
 80088dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80088de:	4a0e      	ldr	r2, [pc, #56]	; (8008918 <dec_lock+0x74>)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	4413      	add	r3, r2
 80088e6:	330c      	adds	r3, #12
 80088e8:	89fa      	ldrh	r2, [r7, #14]
 80088ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80088ec:	89fb      	ldrh	r3, [r7, #14]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d105      	bne.n	80088fe <dec_lock+0x5a>
 80088f2:	4a09      	ldr	r2, [pc, #36]	; (8008918 <dec_lock+0x74>)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	011b      	lsls	r3, r3, #4
 80088f8:	4413      	add	r3, r2
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	737b      	strb	r3, [r7, #13]
 8008902:	e001      	b.n	8008908 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008904:	2302      	movs	r3, #2
 8008906:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008908:	7b7b      	ldrb	r3, [r7, #13]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20001554 	.word	0x20001554

0800891c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008924:	2300      	movs	r3, #0
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e010      	b.n	800894c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800892a:	4a0d      	ldr	r2, [pc, #52]	; (8008960 <clear_lock+0x44>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	011b      	lsls	r3, r3, #4
 8008930:	4413      	add	r3, r2
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	429a      	cmp	r2, r3
 8008938:	d105      	bne.n	8008946 <clear_lock+0x2a>
 800893a:	4a09      	ldr	r2, [pc, #36]	; (8008960 <clear_lock+0x44>)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	4413      	add	r3, r2
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3301      	adds	r3, #1
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d9eb      	bls.n	800892a <clear_lock+0xe>
	}
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	20001554 	.word	0x20001554

08008964 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	78db      	ldrb	r3, [r3, #3]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d034      	beq.n	80089e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	7858      	ldrb	r0, [r3, #1]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008988:	2301      	movs	r3, #1
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	f7ff fd40 	bl	8008410 <disk_write>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008996:	2301      	movs	r3, #1
 8008998:	73fb      	strb	r3, [r7, #15]
 800899a:	e022      	b.n	80089e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	1ad2      	subs	r2, r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d217      	bcs.n	80089e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	789b      	ldrb	r3, [r3, #2]
 80089b6:	613b      	str	r3, [r7, #16]
 80089b8:	e010      	b.n	80089dc <sync_window+0x78>
					wsect += fs->fsize;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4413      	add	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	7858      	ldrb	r0, [r3, #1]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80089ce:	2301      	movs	r3, #1
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	f7ff fd1d 	bl	8008410 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	3b01      	subs	r3, #1
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d8eb      	bhi.n	80089ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d01b      	beq.n	8008a3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff ffad 	bl	8008964 <sync_window>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d113      	bne.n	8008a3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7858      	ldrb	r0, [r3, #1]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a1e:	2301      	movs	r3, #1
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	f7ff fcd5 	bl	80083d0 <disk_read>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d004      	beq.n	8008a36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff ff87 	bl	8008964 <sync_window>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d159      	bne.n	8008b14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d149      	bne.n	8008afc <sync_fs+0xb4>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	791b      	ldrb	r3, [r3, #4]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d145      	bne.n	8008afc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	899b      	ldrh	r3, [r3, #12]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	f7ff fda8 	bl	80085d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3334      	adds	r3, #52	; 0x34
 8008a86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a8a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff fd37 	bl	8008502 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3334      	adds	r3, #52	; 0x34
 8008a98:	4921      	ldr	r1, [pc, #132]	; (8008b20 <sync_fs+0xd8>)
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff fd4c 	bl	8008538 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3334      	adds	r3, #52	; 0x34
 8008aa4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008aa8:	491e      	ldr	r1, [pc, #120]	; (8008b24 <sync_fs+0xdc>)
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff fd44 	bl	8008538 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3334      	adds	r3, #52	; 0x34
 8008ab4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f7ff fd3a 	bl	8008538 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3334      	adds	r3, #52	; 0x34
 8008ac8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f7ff fd30 	bl	8008538 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7858      	ldrb	r0, [r3, #1]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008af0:	2301      	movs	r3, #1
 8008af2:	f7ff fc8d 	bl	8008410 <disk_write>
			fs->fsi_flag = 0;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	785b      	ldrb	r3, [r3, #1]
 8008b00:	2200      	movs	r2, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff fca3 	bl	8008450 <disk_ioctl>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <sync_fs+0xcc>
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	41615252 	.word	0x41615252
 8008b24:	61417272 	.word	0x61417272

08008b28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	3b02      	subs	r3, #2
 8008b36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	3b02      	subs	r3, #2
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d301      	bcc.n	8008b48 <clust2sect+0x20>
 8008b44:	2300      	movs	r3, #0
 8008b46:	e008      	b.n	8008b5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	895b      	ldrh	r3, [r3, #10]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	fb03 f202 	mul.w	r2, r3, r2
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	4413      	add	r3, r2
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d904      	bls.n	8008b86 <get_fat+0x20>
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d302      	bcc.n	8008b8c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008b86:	2301      	movs	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	e0bb      	b.n	8008d04 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	f000 8083 	beq.w	8008ca2 <get_fat+0x13c>
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	f300 80a7 	bgt.w	8008cf0 <get_fat+0x18a>
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d002      	beq.n	8008bac <get_fat+0x46>
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d056      	beq.n	8008c58 <get_fat+0xf2>
 8008baa:	e0a1      	b.n	8008cf0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	085b      	lsrs	r3, r3, #1
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	899b      	ldrh	r3, [r3, #12]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bca:	4413      	add	r3, r2
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6938      	ldr	r0, [r7, #16]
 8008bd0:	f7ff ff0c 	bl	80089ec <move_window>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f040 808d 	bne.w	8008cf6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	60fa      	str	r2, [r7, #12]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	8992      	ldrh	r2, [r2, #12]
 8008be6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bea:	fb02 f201 	mul.w	r2, r2, r1
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bf8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	899b      	ldrh	r3, [r3, #12]
 8008c02:	4619      	mov	r1, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c0a:	4413      	add	r3, r2
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6938      	ldr	r0, [r7, #16]
 8008c10:	f7ff feec 	bl	80089ec <move_window>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d16f      	bne.n	8008cfa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	899b      	ldrh	r3, [r3, #12]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c26:	fb02 f201 	mul.w	r2, r2, r1
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c34:	021b      	lsls	r3, r3, #8
 8008c36:	461a      	mov	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <get_fat+0xe8>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	091b      	lsrs	r3, r3, #4
 8008c4c:	e002      	b.n	8008c54 <get_fat+0xee>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c54:	617b      	str	r3, [r7, #20]
			break;
 8008c56:	e055      	b.n	8008d04 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	899b      	ldrh	r3, [r3, #12]
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	4619      	mov	r1, r3
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c6c:	4413      	add	r3, r2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6938      	ldr	r0, [r7, #16]
 8008c72:	f7ff febb 	bl	80089ec <move_window>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d140      	bne.n	8008cfe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	8992      	ldrh	r2, [r2, #12]
 8008c8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c8e:	fb02 f200 	mul.w	r2, r2, r0
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	440b      	add	r3, r1
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff fbf8 	bl	800848c <ld_word>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	617b      	str	r3, [r7, #20]
			break;
 8008ca0:	e030      	b.n	8008d04 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	899b      	ldrh	r3, [r3, #12]
 8008caa:	089b      	lsrs	r3, r3, #2
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	4619      	mov	r1, r3
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cb6:	4413      	add	r3, r2
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6938      	ldr	r0, [r7, #16]
 8008cbc:	f7ff fe96 	bl	80089ec <move_window>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d11d      	bne.n	8008d02 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	8992      	ldrh	r2, [r2, #12]
 8008cd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cd8:	fb02 f200 	mul.w	r2, r2, r0
 8008cdc:	1a9b      	subs	r3, r3, r2
 8008cde:	440b      	add	r3, r1
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff fbeb 	bl	80084bc <ld_dword>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008cec:	617b      	str	r3, [r7, #20]
			break;
 8008cee:	e009      	b.n	8008d04 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	e006      	b.n	8008d04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cf6:	bf00      	nop
 8008cf8:	e004      	b.n	8008d04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cfa:	bf00      	nop
 8008cfc:	e002      	b.n	8008d04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008cfe:	bf00      	nop
 8008d00:	e000      	b.n	8008d04 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d02:	bf00      	nop
		}
	}

	return val;
 8008d04:	697b      	ldr	r3, [r7, #20]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008d0e:	b590      	push	{r4, r7, lr}
 8008d10:	b089      	sub	sp, #36	; 0x24
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	f240 8102 	bls.w	8008f2a <put_fat+0x21c>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	f080 80fc 	bcs.w	8008f2a <put_fat+0x21c>
		switch (fs->fs_type) {
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	f000 80b6 	beq.w	8008ea8 <put_fat+0x19a>
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	f300 80fd 	bgt.w	8008f3c <put_fat+0x22e>
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d003      	beq.n	8008d4e <put_fat+0x40>
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	f000 8083 	beq.w	8008e52 <put_fat+0x144>
 8008d4c:	e0f6      	b.n	8008f3c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	61bb      	str	r3, [r7, #24]
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	085b      	lsrs	r3, r3, #1
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	4413      	add	r3, r2
 8008d5a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	899b      	ldrh	r3, [r3, #12]
 8008d64:	4619      	mov	r1, r3
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d6c:	4413      	add	r3, r2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7ff fe3b 	bl	80089ec <move_window>
 8008d76:	4603      	mov	r3, r0
 8008d78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d7a:	7ffb      	ldrb	r3, [r7, #31]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 80d6 	bne.w	8008f2e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	61ba      	str	r2, [r7, #24]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	8992      	ldrh	r2, [r2, #12]
 8008d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d96:	fb02 f200 	mul.w	r2, r2, r0
 8008d9a:	1a9b      	subs	r3, r3, r2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00d      	beq.n	8008dc6 <put_fat+0xb8>
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	b25b      	sxtb	r3, r3
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	b25a      	sxtb	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	011b      	lsls	r3, r3, #4
 8008dbc:	b25b      	sxtb	r3, r3
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	b25b      	sxtb	r3, r3
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	e001      	b.n	8008dca <put_fat+0xbc>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	899b      	ldrh	r3, [r3, #12]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008de4:	4413      	add	r3, r2
 8008de6:	4619      	mov	r1, r3
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff fdff 	bl	80089ec <move_window>
 8008dee:	4603      	mov	r3, r0
 8008df0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008df2:	7ffb      	ldrb	r3, [r7, #31]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f040 809c 	bne.w	8008f32 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	899b      	ldrh	r3, [r3, #12]
 8008e04:	461a      	mov	r2, r3
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e0c:	fb02 f200 	mul.w	r2, r2, r0
 8008e10:	1a9b      	subs	r3, r3, r2
 8008e12:	440b      	add	r3, r1
 8008e14:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <put_fat+0x11a>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	091b      	lsrs	r3, r3, #4
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	e00e      	b.n	8008e46 <put_fat+0x138>
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	b25b      	sxtb	r3, r3
 8008e2e:	f023 030f 	bic.w	r3, r3, #15
 8008e32:	b25a      	sxtb	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	0a1b      	lsrs	r3, r3, #8
 8008e38:	b25b      	sxtb	r3, r3
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	b25b      	sxtb	r3, r3
 8008e40:	4313      	orrs	r3, r2
 8008e42:	b25b      	sxtb	r3, r3
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	70da      	strb	r2, [r3, #3]
			break;
 8008e50:	e074      	b.n	8008f3c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	899b      	ldrh	r3, [r3, #12]
 8008e5a:	085b      	lsrs	r3, r3, #1
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	4619      	mov	r1, r3
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e66:	4413      	add	r3, r2
 8008e68:	4619      	mov	r1, r3
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7ff fdbe 	bl	80089ec <move_window>
 8008e70:	4603      	mov	r3, r0
 8008e72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e74:	7ffb      	ldrb	r3, [r7, #31]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d15d      	bne.n	8008f36 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	8992      	ldrh	r2, [r2, #12]
 8008e88:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e8c:	fb02 f200 	mul.w	r2, r2, r0
 8008e90:	1a9b      	subs	r3, r3, r2
 8008e92:	440b      	add	r3, r1
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	b292      	uxth	r2, r2
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff fb31 	bl	8008502 <st_word>
			fs->wflag = 1;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	70da      	strb	r2, [r3, #3]
			break;
 8008ea6:	e049      	b.n	8008f3c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	899b      	ldrh	r3, [r3, #12]
 8008eb0:	089b      	lsrs	r3, r3, #2
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff fd93 	bl	80089ec <move_window>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008eca:	7ffb      	ldrb	r3, [r7, #31]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d134      	bne.n	8008f3a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	8992      	ldrh	r2, [r2, #12]
 8008ee4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ee8:	fb02 f200 	mul.w	r2, r2, r0
 8008eec:	1a9b      	subs	r3, r3, r2
 8008eee:	440b      	add	r3, r1
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff fae3 	bl	80084bc <ld_dword>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008efc:	4323      	orrs	r3, r4
 8008efe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	8992      	ldrh	r2, [r2, #12]
 8008f0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f12:	fb02 f200 	mul.w	r2, r2, r0
 8008f16:	1a9b      	subs	r3, r3, r2
 8008f18:	440b      	add	r3, r1
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff fb0b 	bl	8008538 <st_dword>
			fs->wflag = 1;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2201      	movs	r2, #1
 8008f26:	70da      	strb	r2, [r3, #3]
			break;
 8008f28:	e008      	b.n	8008f3c <put_fat+0x22e>
		}
	}
 8008f2a:	bf00      	nop
 8008f2c:	e006      	b.n	8008f3c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f2e:	bf00      	nop
 8008f30:	e004      	b.n	8008f3c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f32:	bf00      	nop
 8008f34:	e002      	b.n	8008f3c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f36:	bf00      	nop
 8008f38:	e000      	b.n	8008f3c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f3a:	bf00      	nop
	return res;
 8008f3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3724      	adds	r7, #36	; 0x24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd90      	pop	{r4, r7, pc}

08008f46 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b088      	sub	sp, #32
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d904      	bls.n	8008f6c <remove_chain+0x26>
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d301      	bcc.n	8008f70 <remove_chain+0x2a>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e04b      	b.n	8009008 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00c      	beq.n	8008f90 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	69b8      	ldr	r0, [r7, #24]
 8008f7e:	f7ff fec6 	bl	8008d0e <put_fat>
 8008f82:	4603      	mov	r3, r0
 8008f84:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008f86:	7ffb      	ldrb	r3, [r7, #31]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <remove_chain+0x4a>
 8008f8c:	7ffb      	ldrb	r3, [r7, #31]
 8008f8e:	e03b      	b.n	8009008 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008f90:	68b9      	ldr	r1, [r7, #8]
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff fde7 	bl	8008b66 <get_fat>
 8008f98:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d031      	beq.n	8009004 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d101      	bne.n	8008faa <remove_chain+0x64>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e02e      	b.n	8009008 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fb0:	d101      	bne.n	8008fb6 <remove_chain+0x70>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e028      	b.n	8009008 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	69b8      	ldr	r0, [r7, #24]
 8008fbc:	f7ff fea7 	bl	8008d0e <put_fat>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008fc4:	7ffb      	ldrb	r3, [r7, #31]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <remove_chain+0x88>
 8008fca:	7ffb      	ldrb	r3, [r7, #31]
 8008fcc:	e01c      	b.n	8009008 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	695a      	ldr	r2, [r3, #20]
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	3b02      	subs	r3, #2
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d20b      	bcs.n	8008ff4 <remove_chain+0xae>
			fs->free_clst++;
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	791b      	ldrb	r3, [r3, #4]
 8008fea:	f043 0301 	orr.w	r3, r3, #1
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d3c6      	bcc.n	8008f90 <remove_chain+0x4a>
 8009002:	e000      	b.n	8009006 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009004:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3720      	adds	r7, #32
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10d      	bne.n	8009042 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d004      	beq.n	800903c <create_chain+0x2c>
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	429a      	cmp	r2, r3
 800903a:	d31b      	bcc.n	8009074 <create_chain+0x64>
 800903c:	2301      	movs	r3, #1
 800903e:	61bb      	str	r3, [r7, #24]
 8009040:	e018      	b.n	8009074 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff fd8e 	bl	8008b66 <get_fat>
 800904a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d801      	bhi.n	8009056 <create_chain+0x46>
 8009052:	2301      	movs	r3, #1
 8009054:	e070      	b.n	8009138 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800905c:	d101      	bne.n	8009062 <create_chain+0x52>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	e06a      	b.n	8009138 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	429a      	cmp	r2, r3
 800906a:	d201      	bcs.n	8009070 <create_chain+0x60>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	e063      	b.n	8009138 <create_chain+0x128>
		scl = clst;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	3301      	adds	r3, #1
 800907c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	429a      	cmp	r2, r3
 8009086:	d307      	bcc.n	8009098 <create_chain+0x88>
				ncl = 2;
 8009088:	2302      	movs	r3, #2
 800908a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800908c:	69fa      	ldr	r2, [r7, #28]
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	429a      	cmp	r2, r3
 8009092:	d901      	bls.n	8009098 <create_chain+0x88>
 8009094:	2300      	movs	r3, #0
 8009096:	e04f      	b.n	8009138 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009098:	69f9      	ldr	r1, [r7, #28]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff fd63 	bl	8008b66 <get_fat>
 80090a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00e      	beq.n	80090c6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d003      	beq.n	80090b6 <create_chain+0xa6>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b4:	d101      	bne.n	80090ba <create_chain+0xaa>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	e03e      	b.n	8009138 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d1da      	bne.n	8009078 <create_chain+0x68>
 80090c2:	2300      	movs	r3, #0
 80090c4:	e038      	b.n	8009138 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80090c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80090c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090cc:	69f9      	ldr	r1, [r7, #28]
 80090ce:	6938      	ldr	r0, [r7, #16]
 80090d0:	f7ff fe1d 	bl	8008d0e <put_fat>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80090d8:	7dfb      	ldrb	r3, [r7, #23]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d109      	bne.n	80090f2 <create_chain+0xe2>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d006      	beq.n	80090f2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6938      	ldr	r0, [r7, #16]
 80090ea:	f7ff fe10 	bl	8008d0e <put_fat>
 80090ee:	4603      	mov	r3, r0
 80090f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d116      	bne.n	8009126 <create_chain+0x116>
		fs->last_clst = ncl;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	695a      	ldr	r2, [r3, #20]
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	3b02      	subs	r3, #2
 8009108:	429a      	cmp	r2, r3
 800910a:	d804      	bhi.n	8009116 <create_chain+0x106>
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	1e5a      	subs	r2, r3, #1
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	791b      	ldrb	r3, [r3, #4]
 800911a:	f043 0301 	orr.w	r3, r3, #1
 800911e:	b2da      	uxtb	r2, r3
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	711a      	strb	r2, [r3, #4]
 8009124:	e007      	b.n	8009136 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d102      	bne.n	8009132 <create_chain+0x122>
 800912c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009130:	e000      	b.n	8009134 <create_chain+0x124>
 8009132:	2301      	movs	r3, #1
 8009134:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009136:	69fb      	ldr	r3, [r7, #28]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3720      	adds	r7, #32
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	3304      	adds	r3, #4
 8009156:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	899b      	ldrh	r3, [r3, #12]
 800915c:	461a      	mov	r2, r3
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	fbb3 f3f2 	udiv	r3, r3, r2
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	8952      	ldrh	r2, [r2, #10]
 8009168:	fbb3 f3f2 	udiv	r3, r3, r2
 800916c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	1d1a      	adds	r2, r3, #4
 8009172:	613a      	str	r2, [r7, #16]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <clmt_clust+0x42>
 800917e:	2300      	movs	r3, #0
 8009180:	e010      	b.n	80091a4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	429a      	cmp	r2, r3
 8009188:	d307      	bcc.n	800919a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	617b      	str	r3, [r7, #20]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	3304      	adds	r3, #4
 8009196:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009198:	e7e9      	b.n	800916e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800919a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	4413      	add	r3, r2
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	371c      	adds	r7, #28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091c6:	d204      	bcs.n	80091d2 <dir_sdi+0x22>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	f003 031f 	and.w	r3, r3, #31
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80091d2:	2302      	movs	r3, #2
 80091d4:	e071      	b.n	80092ba <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <dir_sdi+0x46>
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d902      	bls.n	80091f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10c      	bne.n	8009216 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	095b      	lsrs	r3, r3, #5
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	8912      	ldrh	r2, [r2, #8]
 8009204:	4293      	cmp	r3, r2
 8009206:	d301      	bcc.n	800920c <dir_sdi+0x5c>
 8009208:	2302      	movs	r3, #2
 800920a:	e056      	b.n	80092ba <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	61da      	str	r2, [r3, #28]
 8009214:	e02d      	b.n	8009272 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	895b      	ldrh	r3, [r3, #10]
 800921a:	461a      	mov	r2, r3
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	899b      	ldrh	r3, [r3, #12]
 8009220:	fb03 f302 	mul.w	r3, r3, r2
 8009224:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009226:	e019      	b.n	800925c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6979      	ldr	r1, [r7, #20]
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff fc9a 	bl	8008b66 <get_fat>
 8009232:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800923a:	d101      	bne.n	8009240 <dir_sdi+0x90>
 800923c:	2301      	movs	r3, #1
 800923e:	e03c      	b.n	80092ba <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d904      	bls.n	8009250 <dir_sdi+0xa0>
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	429a      	cmp	r2, r3
 800924e:	d301      	bcc.n	8009254 <dir_sdi+0xa4>
 8009250:	2302      	movs	r3, #2
 8009252:	e032      	b.n	80092ba <dir_sdi+0x10a>
			ofs -= csz;
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	429a      	cmp	r2, r3
 8009262:	d2e1      	bcs.n	8009228 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009264:	6979      	ldr	r1, [r7, #20]
 8009266:	6938      	ldr	r0, [r7, #16]
 8009268:	f7ff fc5e 	bl	8008b28 <clust2sect>
 800926c:	4602      	mov	r2, r0
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <dir_sdi+0xd4>
 8009280:	2302      	movs	r3, #2
 8009282:	e01a      	b.n	80092ba <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	69da      	ldr	r2, [r3, #28]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	899b      	ldrh	r3, [r3, #12]
 800928c:	4619      	mov	r1, r3
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	fbb3 f3f1 	udiv	r3, r3, r1
 8009294:	441a      	add	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	899b      	ldrh	r3, [r3, #12]
 80092a4:	461a      	mov	r2, r3
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80092ac:	fb02 f200 	mul.w	r2, r2, r0
 80092b0:	1a9b      	subs	r3, r3, r2
 80092b2:	18ca      	adds	r2, r1, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b086      	sub	sp, #24
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	3320      	adds	r3, #32
 80092d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <dir_next+0x28>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092e8:	d301      	bcc.n	80092ee <dir_next+0x2c>
 80092ea:	2304      	movs	r3, #4
 80092ec:	e0bb      	b.n	8009466 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	899b      	ldrh	r3, [r3, #12]
 80092f2:	461a      	mov	r2, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80092fa:	fb02 f201 	mul.w	r2, r2, r1
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	2b00      	cmp	r3, #0
 8009302:	f040 809d 	bne.w	8009440 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10b      	bne.n	8009330 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	095b      	lsrs	r3, r3, #5
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	8912      	ldrh	r2, [r2, #8]
 8009320:	4293      	cmp	r3, r2
 8009322:	f0c0 808d 	bcc.w	8009440 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	61da      	str	r2, [r3, #28]
 800932c:	2304      	movs	r3, #4
 800932e:	e09a      	b.n	8009466 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	899b      	ldrh	r3, [r3, #12]
 8009334:	461a      	mov	r2, r3
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	fbb3 f3f2 	udiv	r3, r3, r2
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	8952      	ldrh	r2, [r2, #10]
 8009340:	3a01      	subs	r2, #1
 8009342:	4013      	ands	r3, r2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d17b      	bne.n	8009440 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	4619      	mov	r1, r3
 8009350:	4610      	mov	r0, r2
 8009352:	f7ff fc08 	bl	8008b66 <get_fat>
 8009356:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d801      	bhi.n	8009362 <dir_next+0xa0>
 800935e:	2302      	movs	r3, #2
 8009360:	e081      	b.n	8009466 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009368:	d101      	bne.n	800936e <dir_next+0xac>
 800936a:	2301      	movs	r3, #1
 800936c:	e07b      	b.n	8009466 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	429a      	cmp	r2, r3
 8009376:	d359      	bcc.n	800942c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d104      	bne.n	8009388 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	61da      	str	r2, [r3, #28]
 8009384:	2304      	movs	r3, #4
 8009386:	e06e      	b.n	8009466 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	4619      	mov	r1, r3
 8009390:	4610      	mov	r0, r2
 8009392:	f7ff fe3d 	bl	8009010 <create_chain>
 8009396:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <dir_next+0xe0>
 800939e:	2307      	movs	r3, #7
 80093a0:	e061      	b.n	8009466 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d101      	bne.n	80093ac <dir_next+0xea>
 80093a8:	2302      	movs	r3, #2
 80093aa:	e05c      	b.n	8009466 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b2:	d101      	bne.n	80093b8 <dir_next+0xf6>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e056      	b.n	8009466 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f7ff fad3 	bl	8008964 <sync_window>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <dir_next+0x106>
 80093c4:	2301      	movs	r3, #1
 80093c6:	e04e      	b.n	8009466 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	899b      	ldrh	r3, [r3, #12]
 80093d2:	461a      	mov	r2, r3
 80093d4:	2100      	movs	r1, #0
 80093d6:	f7ff f8fc 	bl	80085d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093da:	2300      	movs	r3, #0
 80093dc:	613b      	str	r3, [r7, #16]
 80093de:	6979      	ldr	r1, [r7, #20]
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f7ff fba1 	bl	8008b28 <clust2sect>
 80093e6:	4602      	mov	r2, r0
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	631a      	str	r2, [r3, #48]	; 0x30
 80093ec:	e012      	b.n	8009414 <dir_next+0x152>
						fs->wflag = 1;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2201      	movs	r2, #1
 80093f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f7ff fab5 	bl	8008964 <sync_window>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <dir_next+0x142>
 8009400:	2301      	movs	r3, #1
 8009402:	e030      	b.n	8009466 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	3301      	adds	r3, #1
 8009408:	613b      	str	r3, [r7, #16]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	631a      	str	r2, [r3, #48]	; 0x30
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	895b      	ldrh	r3, [r3, #10]
 8009418:	461a      	mov	r2, r3
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	4293      	cmp	r3, r2
 800941e:	d3e6      	bcc.n	80093ee <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009432:	6979      	ldr	r1, [r7, #20]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f7ff fb77 	bl	8008b28 <clust2sect>
 800943a:	4602      	mov	r2, r0
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	899b      	ldrh	r3, [r3, #12]
 8009450:	461a      	mov	r2, r3
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	fbb3 f0f2 	udiv	r0, r3, r2
 8009458:	fb02 f200 	mul.w	r2, r2, r0
 800945c:	1a9b      	subs	r3, r3, r2
 800945e:	18ca      	adds	r2, r1, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b086      	sub	sp, #24
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800947e:	2100      	movs	r1, #0
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7ff fe95 	bl	80091b0 <dir_sdi>
 8009486:	4603      	mov	r3, r0
 8009488:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d12b      	bne.n	80094e8 <dir_alloc+0x7a>
		n = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	4619      	mov	r1, r3
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff faa6 	bl	80089ec <move_window>
 80094a0:	4603      	mov	r3, r0
 80094a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d11d      	bne.n	80094e6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2be5      	cmp	r3, #229	; 0xe5
 80094b2:	d004      	beq.n	80094be <dir_alloc+0x50>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d107      	bne.n	80094ce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	3301      	adds	r3, #1
 80094c2:	613b      	str	r3, [r7, #16]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d102      	bne.n	80094d2 <dir_alloc+0x64>
 80094cc:	e00c      	b.n	80094e8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80094d2:	2101      	movs	r1, #1
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff fef4 	bl	80092c2 <dir_next>
 80094da:	4603      	mov	r3, r0
 80094dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0d7      	beq.n	8009494 <dir_alloc+0x26>
 80094e4:	e000      	b.n	80094e8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80094e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	2b04      	cmp	r3, #4
 80094ec:	d101      	bne.n	80094f2 <dir_alloc+0x84>
 80094ee:	2307      	movs	r3, #7
 80094f0:	75fb      	strb	r3, [r7, #23]
	return res;
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	331a      	adds	r3, #26
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe ffbe 	bl	800848c <ld_word>
 8009510:	4603      	mov	r3, r0
 8009512:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b03      	cmp	r3, #3
 800951a:	d109      	bne.n	8009530 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	3314      	adds	r3, #20
 8009520:	4618      	mov	r0, r3
 8009522:	f7fe ffb3 	bl	800848c <ld_word>
 8009526:	4603      	mov	r3, r0
 8009528:	041b      	lsls	r3, r3, #16
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009530:	68fb      	ldr	r3, [r7, #12]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	331a      	adds	r3, #26
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	b292      	uxth	r2, r2
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe ffd6 	bl	8008502 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b03      	cmp	r3, #3
 800955c:	d109      	bne.n	8009572 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f103 0214 	add.w	r2, r3, #20
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	0c1b      	lsrs	r3, r3, #16
 8009568:	b29b      	uxth	r3, r3
 800956a:	4619      	mov	r1, r3
 800956c:	4610      	mov	r0, r2
 800956e:	f7fe ffc8 	bl	8008502 <st_word>
	}
}
 8009572:	bf00      	nop
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b086      	sub	sp, #24
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009588:	2100      	movs	r1, #0
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff fe10 	bl	80091b0 <dir_sdi>
 8009590:	4603      	mov	r3, r0
 8009592:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009594:	7dfb      	ldrb	r3, [r7, #23]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <dir_find+0x24>
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	e03e      	b.n	800961c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	4619      	mov	r1, r3
 80095a4:	6938      	ldr	r0, [r7, #16]
 80095a6:	f7ff fa21 	bl	80089ec <move_window>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d12f      	bne.n	8009614 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <dir_find+0x4e>
 80095c2:	2304      	movs	r3, #4
 80095c4:	75fb      	strb	r3, [r7, #23]
 80095c6:	e028      	b.n	800961a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	330b      	adds	r3, #11
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	330b      	adds	r3, #11
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <dir_find+0x86>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a18      	ldr	r0, [r3, #32]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3324      	adds	r3, #36	; 0x24
 80095f2:	220b      	movs	r2, #11
 80095f4:	4619      	mov	r1, r3
 80095f6:	f7ff f807 	bl	8008608 <mem_cmp>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009600:	2100      	movs	r1, #0
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7ff fe5d 	bl	80092c2 <dir_next>
 8009608:	4603      	mov	r3, r0
 800960a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0c5      	beq.n	800959e <dir_find+0x24>
 8009612:	e002      	b.n	800961a <dir_find+0xa0>
		if (res != FR_OK) break;
 8009614:	bf00      	nop
 8009616:	e000      	b.n	800961a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009618:	bf00      	nop

	return res;
 800961a:	7dfb      	ldrb	r3, [r7, #23]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009632:	2101      	movs	r1, #1
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ff1a 	bl	800946e <dir_alloc>
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d11c      	bne.n	800967e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	4619      	mov	r1, r3
 800964a:	68b8      	ldr	r0, [r7, #8]
 800964c:	f7ff f9ce 	bl	80089ec <move_window>
 8009650:	4603      	mov	r3, r0
 8009652:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d111      	bne.n	800967e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	2220      	movs	r2, #32
 8009660:	2100      	movs	r1, #0
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe ffb5 	bl	80085d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a18      	ldr	r0, [r3, #32]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3324      	adds	r3, #36	; 0x24
 8009670:	220b      	movs	r2, #11
 8009672:	4619      	mov	r1, r3
 8009674:	f7fe ff8c 	bl	8008590 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2201      	movs	r2, #1
 800967c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800967e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3324      	adds	r3, #36	; 0x24
 800969c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800969e:	220b      	movs	r2, #11
 80096a0:	2120      	movs	r1, #32
 80096a2:	68b8      	ldr	r0, [r7, #8]
 80096a4:	f7fe ff95 	bl	80085d2 <mem_set>
	si = i = 0; ni = 8;
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	61fb      	str	r3, [r7, #28]
 80096b0:	2308      	movs	r3, #8
 80096b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	61fa      	str	r2, [r7, #28]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4413      	add	r3, r2
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80096c2:	7efb      	ldrb	r3, [r7, #27]
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	d94e      	bls.n	8009766 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80096c8:	7efb      	ldrb	r3, [r7, #27]
 80096ca:	2b2f      	cmp	r3, #47	; 0x2f
 80096cc:	d006      	beq.n	80096dc <create_name+0x54>
 80096ce:	7efb      	ldrb	r3, [r7, #27]
 80096d0:	2b5c      	cmp	r3, #92	; 0x5c
 80096d2:	d110      	bne.n	80096f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80096d4:	e002      	b.n	80096dc <create_name+0x54>
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	3301      	adds	r3, #1
 80096da:	61fb      	str	r3, [r7, #28]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b2f      	cmp	r3, #47	; 0x2f
 80096e6:	d0f6      	beq.n	80096d6 <create_name+0x4e>
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	4413      	add	r3, r2
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b5c      	cmp	r3, #92	; 0x5c
 80096f2:	d0f0      	beq.n	80096d6 <create_name+0x4e>
			break;
 80096f4:	e038      	b.n	8009768 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80096f6:	7efb      	ldrb	r3, [r7, #27]
 80096f8:	2b2e      	cmp	r3, #46	; 0x2e
 80096fa:	d003      	beq.n	8009704 <create_name+0x7c>
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	429a      	cmp	r2, r3
 8009702:	d30c      	bcc.n	800971e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	2b0b      	cmp	r3, #11
 8009708:	d002      	beq.n	8009710 <create_name+0x88>
 800970a:	7efb      	ldrb	r3, [r7, #27]
 800970c:	2b2e      	cmp	r3, #46	; 0x2e
 800970e:	d001      	beq.n	8009714 <create_name+0x8c>
 8009710:	2306      	movs	r3, #6
 8009712:	e044      	b.n	800979e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009714:	2308      	movs	r3, #8
 8009716:	613b      	str	r3, [r7, #16]
 8009718:	230b      	movs	r3, #11
 800971a:	617b      	str	r3, [r7, #20]
			continue;
 800971c:	e022      	b.n	8009764 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800971e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009722:	2b00      	cmp	r3, #0
 8009724:	da04      	bge.n	8009730 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009726:	7efb      	ldrb	r3, [r7, #27]
 8009728:	3b80      	subs	r3, #128	; 0x80
 800972a:	4a1f      	ldr	r2, [pc, #124]	; (80097a8 <create_name+0x120>)
 800972c:	5cd3      	ldrb	r3, [r2, r3]
 800972e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009730:	7efb      	ldrb	r3, [r7, #27]
 8009732:	4619      	mov	r1, r3
 8009734:	481d      	ldr	r0, [pc, #116]	; (80097ac <create_name+0x124>)
 8009736:	f7fe ff8e 	bl	8008656 <chk_chr>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <create_name+0xbc>
 8009740:	2306      	movs	r3, #6
 8009742:	e02c      	b.n	800979e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009744:	7efb      	ldrb	r3, [r7, #27]
 8009746:	2b60      	cmp	r3, #96	; 0x60
 8009748:	d905      	bls.n	8009756 <create_name+0xce>
 800974a:	7efb      	ldrb	r3, [r7, #27]
 800974c:	2b7a      	cmp	r3, #122	; 0x7a
 800974e:	d802      	bhi.n	8009756 <create_name+0xce>
 8009750:	7efb      	ldrb	r3, [r7, #27]
 8009752:	3b20      	subs	r3, #32
 8009754:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	613a      	str	r2, [r7, #16]
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	4413      	add	r3, r2
 8009760:	7efa      	ldrb	r2, [r7, #27]
 8009762:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009764:	e7a6      	b.n	80096b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009766:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	441a      	add	r2, r3
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <create_name+0xf4>
 8009778:	2306      	movs	r3, #6
 800977a:	e010      	b.n	800979e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2be5      	cmp	r3, #229	; 0xe5
 8009782:	d102      	bne.n	800978a <create_name+0x102>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2205      	movs	r2, #5
 8009788:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800978a:	7efb      	ldrb	r3, [r7, #27]
 800978c:	2b20      	cmp	r3, #32
 800978e:	d801      	bhi.n	8009794 <create_name+0x10c>
 8009790:	2204      	movs	r2, #4
 8009792:	e000      	b.n	8009796 <create_name+0x10e>
 8009794:	2200      	movs	r2, #0
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	330b      	adds	r3, #11
 800979a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800979c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	0801c6cc 	.word	0x0801c6cc
 80097ac:	08019520 	.word	0x08019520

080097b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80097c4:	e002      	b.n	80097cc <follow_path+0x1c>
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	3301      	adds	r3, #1
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b2f      	cmp	r3, #47	; 0x2f
 80097d2:	d0f8      	beq.n	80097c6 <follow_path+0x16>
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b5c      	cmp	r3, #92	; 0x5c
 80097da:	d0f4      	beq.n	80097c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2200      	movs	r2, #0
 80097e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b1f      	cmp	r3, #31
 80097e8:	d80a      	bhi.n	8009800 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2280      	movs	r2, #128	; 0x80
 80097ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80097f2:	2100      	movs	r1, #0
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff fcdb 	bl	80091b0 <dir_sdi>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]
 80097fe:	e048      	b.n	8009892 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009800:	463b      	mov	r3, r7
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff ff3f 	bl	8009688 <create_name>
 800980a:	4603      	mov	r3, r0
 800980c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d139      	bne.n	8009888 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff feb0 	bl	800957a <dir_find>
 800981a:	4603      	mov	r3, r0
 800981c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009824:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009826:	7dfb      	ldrb	r3, [r7, #23]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00a      	beq.n	8009842 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800982c:	7dfb      	ldrb	r3, [r7, #23]
 800982e:	2b04      	cmp	r3, #4
 8009830:	d12c      	bne.n	800988c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d127      	bne.n	800988c <follow_path+0xdc>
 800983c:	2305      	movs	r3, #5
 800983e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009840:	e024      	b.n	800988c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009842:	7afb      	ldrb	r3, [r7, #11]
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b00      	cmp	r3, #0
 800984a:	d121      	bne.n	8009890 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	799b      	ldrb	r3, [r3, #6]
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	2b00      	cmp	r3, #0
 8009856:	d102      	bne.n	800985e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009858:	2305      	movs	r3, #5
 800985a:	75fb      	strb	r3, [r7, #23]
 800985c:	e019      	b.n	8009892 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	8992      	ldrh	r2, [r2, #12]
 800986c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009870:	fb02 f200 	mul.w	r2, r2, r0
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	440b      	add	r3, r1
 8009878:	4619      	mov	r1, r3
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff fe3e 	bl	80094fc <ld_clust>
 8009880:	4602      	mov	r2, r0
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009886:	e7bb      	b.n	8009800 <follow_path+0x50>
			if (res != FR_OK) break;
 8009888:	bf00      	nop
 800988a:	e002      	b.n	8009892 <follow_path+0xe2>
				break;
 800988c:	bf00      	nop
 800988e:	e000      	b.n	8009892 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009890:	bf00      	nop
			}
		}
	}

	return res;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80098a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098a8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d031      	beq.n	8009916 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e002      	b.n	80098c0 <get_ldnumber+0x24>
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	3301      	adds	r3, #1
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b20      	cmp	r3, #32
 80098c6:	d903      	bls.n	80098d0 <get_ldnumber+0x34>
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b3a      	cmp	r3, #58	; 0x3a
 80098ce:	d1f4      	bne.n	80098ba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b3a      	cmp	r3, #58	; 0x3a
 80098d6:	d11c      	bne.n	8009912 <get_ldnumber+0x76>
			tp = *path;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	60fa      	str	r2, [r7, #12]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	3b30      	subs	r3, #48	; 0x30
 80098e8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b09      	cmp	r3, #9
 80098ee:	d80e      	bhi.n	800990e <get_ldnumber+0x72>
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d10a      	bne.n	800990e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d107      	bne.n	800990e <get_ldnumber+0x72>
					vol = (int)i;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	3301      	adds	r3, #1
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	e002      	b.n	8009918 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009916:	693b      	ldr	r3, [r7, #16]
}
 8009918:	4618      	mov	r0, r3
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	70da      	strb	r2, [r3, #3]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800993a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7ff f854 	bl	80089ec <move_window>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <check_fs+0x2a>
 800994a:	2304      	movs	r3, #4
 800994c:	e038      	b.n	80099c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3334      	adds	r3, #52	; 0x34
 8009952:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009956:	4618      	mov	r0, r3
 8009958:	f7fe fd98 	bl	800848c <ld_word>
 800995c:	4603      	mov	r3, r0
 800995e:	461a      	mov	r2, r3
 8009960:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009964:	429a      	cmp	r2, r3
 8009966:	d001      	beq.n	800996c <check_fs+0x48>
 8009968:	2303      	movs	r3, #3
 800996a:	e029      	b.n	80099c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009972:	2be9      	cmp	r3, #233	; 0xe9
 8009974:	d009      	beq.n	800998a <check_fs+0x66>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800997c:	2beb      	cmp	r3, #235	; 0xeb
 800997e:	d11e      	bne.n	80099be <check_fs+0x9a>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009986:	2b90      	cmp	r3, #144	; 0x90
 8009988:	d119      	bne.n	80099be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	3334      	adds	r3, #52	; 0x34
 800998e:	3336      	adds	r3, #54	; 0x36
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe fd93 	bl	80084bc <ld_dword>
 8009996:	4603      	mov	r3, r0
 8009998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800999c:	4a0a      	ldr	r2, [pc, #40]	; (80099c8 <check_fs+0xa4>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d101      	bne.n	80099a6 <check_fs+0x82>
 80099a2:	2300      	movs	r3, #0
 80099a4:	e00c      	b.n	80099c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3334      	adds	r3, #52	; 0x34
 80099aa:	3352      	adds	r3, #82	; 0x52
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fe fd85 	bl	80084bc <ld_dword>
 80099b2:	4603      	mov	r3, r0
 80099b4:	4a05      	ldr	r2, [pc, #20]	; (80099cc <check_fs+0xa8>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d101      	bne.n	80099be <check_fs+0x9a>
 80099ba:	2300      	movs	r3, #0
 80099bc:	e000      	b.n	80099c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80099be:	2302      	movs	r3, #2
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	00544146 	.word	0x00544146
 80099cc:	33544146 	.word	0x33544146

080099d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b096      	sub	sp, #88	; 0x58
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	4613      	mov	r3, r2
 80099dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2200      	movs	r2, #0
 80099e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff ff59 	bl	800989c <get_ldnumber>
 80099ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80099ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	da01      	bge.n	80099f6 <find_volume+0x26>
 80099f2:	230b      	movs	r3, #11
 80099f4:	e265      	b.n	8009ec2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80099f6:	4ab0      	ldr	r2, [pc, #704]	; (8009cb8 <find_volume+0x2e8>)
 80099f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <find_volume+0x3a>
 8009a06:	230c      	movs	r3, #12
 8009a08:	e25b      	b.n	8009ec2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009a10:	79fb      	ldrb	r3, [r7, #7]
 8009a12:	f023 0301 	bic.w	r3, r3, #1
 8009a16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01a      	beq.n	8009a56 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fc93 	bl	8008350 <disk_status>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10c      	bne.n	8009a56 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d007      	beq.n	8009a52 <find_volume+0x82>
 8009a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a46:	f003 0304 	and.w	r3, r3, #4
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009a4e:	230a      	movs	r3, #10
 8009a50:	e237      	b.n	8009ec2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009a52:	2300      	movs	r3, #0
 8009a54:	e235      	b.n	8009ec2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	2200      	movs	r2, #0
 8009a5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	785b      	ldrb	r3, [r3, #1]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fe fc8b 	bl	8008384 <disk_initialize>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009a74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009a80:	2303      	movs	r3, #3
 8009a82:	e21e      	b.n	8009ec2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d007      	beq.n	8009a9a <find_volume+0xca>
 8009a8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009a96:	230a      	movs	r3, #10
 8009a98:	e213      	b.n	8009ec2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9c:	7858      	ldrb	r0, [r3, #1]
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa0:	330c      	adds	r3, #12
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	f7fe fcd3 	bl	8008450 <disk_ioctl>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <find_volume+0xe4>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e206      	b.n	8009ec2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab6:	899b      	ldrh	r3, [r3, #12]
 8009ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009abc:	d80d      	bhi.n	8009ada <find_volume+0x10a>
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	899b      	ldrh	r3, [r3, #12]
 8009ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ac6:	d308      	bcc.n	8009ada <find_volume+0x10a>
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	899b      	ldrh	r3, [r3, #12]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad0:	899b      	ldrh	r3, [r3, #12]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <find_volume+0x10e>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e1f1      	b.n	8009ec2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009ae2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ae6:	f7ff ff1d 	bl	8009924 <check_fs>
 8009aea:	4603      	mov	r3, r0
 8009aec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d14b      	bne.n	8009b90 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009af8:	2300      	movs	r3, #0
 8009afa:	643b      	str	r3, [r7, #64]	; 0x40
 8009afc:	e01f      	b.n	8009b3e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b06:	011b      	lsls	r3, r3, #4
 8009b08:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009b0c:	4413      	add	r3, r2
 8009b0e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b12:	3304      	adds	r3, #4
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d006      	beq.n	8009b28 <find_volume+0x158>
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe fccc 	bl	80084bc <ld_dword>
 8009b24:	4602      	mov	r2, r0
 8009b26:	e000      	b.n	8009b2a <find_volume+0x15a>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009b32:	440b      	add	r3, r1
 8009b34:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8009b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b40:	2b03      	cmp	r3, #3
 8009b42:	d9dc      	bls.n	8009afe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009b44:	2300      	movs	r3, #0
 8009b46:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d002      	beq.n	8009b54 <find_volume+0x184>
 8009b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b50:	3b01      	subs	r3, #1
 8009b52:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009b62:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d005      	beq.n	8009b76 <find_volume+0x1a6>
 8009b6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b6e:	f7ff fed9 	bl	8009924 <check_fs>
 8009b72:	4603      	mov	r3, r0
 8009b74:	e000      	b.n	8009b78 <find_volume+0x1a8>
 8009b76:	2303      	movs	r3, #3
 8009b78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d905      	bls.n	8009b90 <find_volume+0x1c0>
 8009b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b86:	3301      	adds	r3, #1
 8009b88:	643b      	str	r3, [r7, #64]	; 0x40
 8009b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d9e1      	bls.n	8009b54 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	d101      	bne.n	8009b9c <find_volume+0x1cc>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e192      	b.n	8009ec2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d901      	bls.n	8009ba8 <find_volume+0x1d8>
 8009ba4:	230d      	movs	r3, #13
 8009ba6:	e18c      	b.n	8009ec2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	3334      	adds	r3, #52	; 0x34
 8009bac:	330b      	adds	r3, #11
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe fc6c 	bl	800848c <ld_word>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bba:	899b      	ldrh	r3, [r3, #12]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d001      	beq.n	8009bc4 <find_volume+0x1f4>
 8009bc0:	230d      	movs	r3, #13
 8009bc2:	e17e      	b.n	8009ec2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	3334      	adds	r3, #52	; 0x34
 8009bc8:	3316      	adds	r3, #22
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe fc5e 	bl	800848c <ld_word>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d106      	bne.n	8009be8 <find_volume+0x218>
 8009bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bdc:	3334      	adds	r3, #52	; 0x34
 8009bde:	3324      	adds	r3, #36	; 0x24
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe fc6b 	bl	80084bc <ld_dword>
 8009be6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfa:	789b      	ldrb	r3, [r3, #2]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d005      	beq.n	8009c0c <find_volume+0x23c>
 8009c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c02:	789b      	ldrb	r3, [r3, #2]
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d001      	beq.n	8009c0c <find_volume+0x23c>
 8009c08:	230d      	movs	r3, #13
 8009c0a:	e15a      	b.n	8009ec2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0e:	789b      	ldrb	r3, [r3, #2]
 8009c10:	461a      	mov	r2, r3
 8009c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c14:	fb02 f303 	mul.w	r3, r2, r3
 8009c18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c28:	895b      	ldrh	r3, [r3, #10]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <find_volume+0x270>
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c30:	895b      	ldrh	r3, [r3, #10]
 8009c32:	461a      	mov	r2, r3
 8009c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c36:	895b      	ldrh	r3, [r3, #10]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <find_volume+0x274>
 8009c40:	230d      	movs	r3, #13
 8009c42:	e13e      	b.n	8009ec2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c46:	3334      	adds	r3, #52	; 0x34
 8009c48:	3311      	adds	r3, #17
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fc1e 	bl	800848c <ld_word>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5a:	891b      	ldrh	r3, [r3, #8]
 8009c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c5e:	8992      	ldrh	r2, [r2, #12]
 8009c60:	0952      	lsrs	r2, r2, #5
 8009c62:	b292      	uxth	r2, r2
 8009c64:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c68:	fb02 f201 	mul.w	r2, r2, r1
 8009c6c:	1a9b      	subs	r3, r3, r2
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <find_volume+0x2a8>
 8009c74:	230d      	movs	r3, #13
 8009c76:	e124      	b.n	8009ec2 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7a:	3334      	adds	r3, #52	; 0x34
 8009c7c:	3313      	adds	r3, #19
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fe fc04 	bl	800848c <ld_word>
 8009c84:	4603      	mov	r3, r0
 8009c86:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <find_volume+0x2cc>
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c90:	3334      	adds	r3, #52	; 0x34
 8009c92:	3320      	adds	r3, #32
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fe fc11 	bl	80084bc <ld_dword>
 8009c9a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9e:	3334      	adds	r3, #52	; 0x34
 8009ca0:	330e      	adds	r3, #14
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe fbf2 	bl	800848c <ld_word>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009cac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <find_volume+0x2ec>
 8009cb2:	230d      	movs	r3, #13
 8009cb4:	e105      	b.n	8009ec2 <find_volume+0x4f2>
 8009cb6:	bf00      	nop
 8009cb8:	2000154c 	.word	0x2000154c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009cbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc0:	4413      	add	r3, r2
 8009cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cc4:	8911      	ldrh	r1, [r2, #8]
 8009cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cc8:	8992      	ldrh	r2, [r2, #12]
 8009cca:	0952      	lsrs	r2, r2, #5
 8009ccc:	b292      	uxth	r2, r2
 8009cce:	fbb1 f2f2 	udiv	r2, r1, r2
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d201      	bcs.n	8009ce4 <find_volume+0x314>
 8009ce0:	230d      	movs	r3, #13
 8009ce2:	e0ee      	b.n	8009ec2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cec:	8952      	ldrh	r2, [r2, #10]
 8009cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <find_volume+0x32e>
 8009cfa:	230d      	movs	r3, #13
 8009cfc:	e0e1      	b.n	8009ec2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d802      	bhi.n	8009d14 <find_volume+0x344>
 8009d0e:	2302      	movs	r3, #2
 8009d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d802      	bhi.n	8009d24 <find_volume+0x354>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	1c9a      	adds	r2, r3, #2
 8009d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d30:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009d32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d36:	441a      	add	r2, r3
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009d3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	441a      	add	r2, r3
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d11e      	bne.n	8009d8c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	3334      	adds	r3, #52	; 0x34
 8009d52:	332a      	adds	r3, #42	; 0x2a
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe fb99 	bl	800848c <ld_word>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <find_volume+0x394>
 8009d60:	230d      	movs	r3, #13
 8009d62:	e0ae      	b.n	8009ec2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d66:	891b      	ldrh	r3, [r3, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <find_volume+0x3a0>
 8009d6c:	230d      	movs	r3, #13
 8009d6e:	e0a8      	b.n	8009ec2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d72:	3334      	adds	r3, #52	; 0x34
 8009d74:	332c      	adds	r3, #44	; 0x2c
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe fba0 	bl	80084bc <ld_dword>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d80:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	647b      	str	r3, [r7, #68]	; 0x44
 8009d8a:	e01f      	b.n	8009dcc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8e:	891b      	ldrh	r3, [r3, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d101      	bne.n	8009d98 <find_volume+0x3c8>
 8009d94:	230d      	movs	r3, #13
 8009d96:	e094      	b.n	8009ec2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d9e:	441a      	add	r2, r3
 8009da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d103      	bne.n	8009db4 <find_volume+0x3e4>
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	e00a      	b.n	8009dca <find_volume+0x3fa>
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	699a      	ldr	r2, [r3, #24]
 8009db8:	4613      	mov	r3, r2
 8009dba:	005b      	lsls	r3, r3, #1
 8009dbc:	4413      	add	r3, r2
 8009dbe:	085a      	lsrs	r2, r3, #1
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009dca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	69da      	ldr	r2, [r3, #28]
 8009dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd2:	899b      	ldrh	r3, [r3, #12]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dd8:	440b      	add	r3, r1
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dde:	8989      	ldrh	r1, [r1, #12]
 8009de0:	fbb3 f3f1 	udiv	r3, r3, r1
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d201      	bcs.n	8009dec <find_volume+0x41c>
 8009de8:	230d      	movs	r3, #13
 8009dea:	e06a      	b.n	8009ec2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009df2:	615a      	str	r2, [r3, #20]
 8009df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df6:	695a      	ldr	r2, [r3, #20]
 8009df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfe:	2280      	movs	r2, #128	; 0x80
 8009e00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009e02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d149      	bne.n	8009e9e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0c:	3334      	adds	r3, #52	; 0x34
 8009e0e:	3330      	adds	r3, #48	; 0x30
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe fb3b 	bl	800848c <ld_word>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d140      	bne.n	8009e9e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e1e:	3301      	adds	r3, #1
 8009e20:	4619      	mov	r1, r3
 8009e22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e24:	f7fe fde2 	bl	80089ec <move_window>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d137      	bne.n	8009e9e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e30:	2200      	movs	r2, #0
 8009e32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	3334      	adds	r3, #52	; 0x34
 8009e38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe fb25 	bl	800848c <ld_word>
 8009e42:	4603      	mov	r3, r0
 8009e44:	461a      	mov	r2, r3
 8009e46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d127      	bne.n	8009e9e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e50:	3334      	adds	r3, #52	; 0x34
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fb32 	bl	80084bc <ld_dword>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	4a1c      	ldr	r2, [pc, #112]	; (8009ecc <find_volume+0x4fc>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d11e      	bne.n	8009e9e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e62:	3334      	adds	r3, #52	; 0x34
 8009e64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fb27 	bl	80084bc <ld_dword>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4a17      	ldr	r2, [pc, #92]	; (8009ed0 <find_volume+0x500>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d113      	bne.n	8009e9e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e78:	3334      	adds	r3, #52	; 0x34
 8009e7a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fb1c 	bl	80084bc <ld_dword>
 8009e84:	4602      	mov	r2, r0
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8c:	3334      	adds	r3, #52	; 0x34
 8009e8e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fe fb12 	bl	80084bc <ld_dword>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009ea4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009ea6:	4b0b      	ldr	r3, [pc, #44]	; (8009ed4 <find_volume+0x504>)
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <find_volume+0x504>)
 8009eb0:	801a      	strh	r2, [r3, #0]
 8009eb2:	4b08      	ldr	r3, [pc, #32]	; (8009ed4 <find_volume+0x504>)
 8009eb4:	881a      	ldrh	r2, [r3, #0]
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009eba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ebc:	f7fe fd2e 	bl	800891c <clear_lock>
#endif
	return FR_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3758      	adds	r7, #88	; 0x58
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	41615252 	.word	0x41615252
 8009ed0:	61417272 	.word	0x61417272
 8009ed4:	20001550 	.word	0x20001550

08009ed8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009ee2:	2309      	movs	r3, #9
 8009ee4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d01c      	beq.n	8009f26 <validate+0x4e>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d018      	beq.n	8009f26 <validate+0x4e>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d013      	beq.n	8009f26 <validate+0x4e>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	889a      	ldrh	r2, [r3, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	88db      	ldrh	r3, [r3, #6]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d10c      	bne.n	8009f26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe fa1c 	bl	8008350 <disk_status>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f003 0301 	and.w	r3, r3, #1
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <validate+0x4e>
			res = FR_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d102      	bne.n	8009f32 <validate+0x5a>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	e000      	b.n	8009f34 <validate+0x5c>
 8009f32:	2300      	movs	r3, #0
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	6013      	str	r3, [r2, #0]
	return res;
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
	...

08009f44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b088      	sub	sp, #32
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009f56:	f107 0310 	add.w	r3, r7, #16
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff fc9e 	bl	800989c <get_ldnumber>
 8009f60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	da01      	bge.n	8009f6c <f_mount+0x28>
 8009f68:	230b      	movs	r3, #11
 8009f6a:	e02b      	b.n	8009fc4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009f6c:	4a17      	ldr	r2, [pc, #92]	; (8009fcc <f_mount+0x88>)
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009f7c:	69b8      	ldr	r0, [r7, #24]
 8009f7e:	f7fe fccd 	bl	800891c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	2200      	movs	r2, #0
 8009f86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d002      	beq.n	8009f94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	490d      	ldr	r1, [pc, #52]	; (8009fcc <f_mount+0x88>)
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <f_mount+0x66>
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d001      	beq.n	8009fae <f_mount+0x6a>
 8009faa:	2300      	movs	r3, #0
 8009fac:	e00a      	b.n	8009fc4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009fae:	f107 010c 	add.w	r1, r7, #12
 8009fb2:	f107 0308 	add.w	r3, r7, #8
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7ff fd09 	bl	80099d0 <find_volume>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3720      	adds	r7, #32
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	2000154c 	.word	0x2000154c

08009fd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b098      	sub	sp, #96	; 0x60
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <f_open+0x18>
 8009fe4:	2309      	movs	r3, #9
 8009fe6:	e1bb      	b.n	800a360 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009fe8:	79fb      	ldrb	r3, [r7, #7]
 8009fea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009ff0:	79fa      	ldrb	r2, [r7, #7]
 8009ff2:	f107 0110 	add.w	r1, r7, #16
 8009ff6:	f107 0308 	add.w	r3, r7, #8
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff fce8 	bl	80099d0 <find_volume>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f040 819f 	bne.w	800a34e <f_open+0x37e>
		dj.obj.fs = fs;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	f107 0314 	add.w	r3, r7, #20
 800a01a:	4611      	mov	r1, r2
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7ff fbc7 	bl	80097b0 <follow_path>
 800a022:	4603      	mov	r3, r0
 800a024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d11a      	bne.n	800a066 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a030:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a034:	b25b      	sxtb	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	da03      	bge.n	800a042 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a03a:	2306      	movs	r3, #6
 800a03c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a040:	e011      	b.n	800a066 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	f023 0301 	bic.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	bf14      	ite	ne
 800a04c:	2301      	movne	r3, #1
 800a04e:	2300      	moveq	r3, #0
 800a050:	b2db      	uxtb	r3, r3
 800a052:	461a      	mov	r2, r3
 800a054:	f107 0314 	add.w	r3, r7, #20
 800a058:	4611      	mov	r1, r2
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe fb16 	bl	800868c <chk_lock>
 800a060:	4603      	mov	r3, r0
 800a062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	f003 031c 	and.w	r3, r3, #28
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d07f      	beq.n	800a170 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a074:	2b00      	cmp	r3, #0
 800a076:	d017      	beq.n	800a0a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d10e      	bne.n	800a09e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a080:	f7fe fb60 	bl	8008744 <enq_lock>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d006      	beq.n	800a098 <f_open+0xc8>
 800a08a:	f107 0314 	add.w	r3, r7, #20
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff fac8 	bl	8009624 <dir_register>
 800a094:	4603      	mov	r3, r0
 800a096:	e000      	b.n	800a09a <f_open+0xca>
 800a098:	2312      	movs	r3, #18
 800a09a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a09e:	79fb      	ldrb	r3, [r7, #7]
 800a0a0:	f043 0308 	orr.w	r3, r3, #8
 800a0a4:	71fb      	strb	r3, [r7, #7]
 800a0a6:	e010      	b.n	800a0ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a0a8:	7ebb      	ldrb	r3, [r7, #26]
 800a0aa:	f003 0311 	and.w	r3, r3, #17
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <f_open+0xea>
					res = FR_DENIED;
 800a0b2:	2307      	movs	r3, #7
 800a0b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a0b8:	e007      	b.n	800a0ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	f003 0304 	and.w	r3, r3, #4
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <f_open+0xfa>
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a0ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d168      	bne.n	800a1a4 <f_open+0x1d4>
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d063      	beq.n	800a1a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a0dc:	f7fd fa50 	bl	8007580 <get_fattime>
 800a0e0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e4:	330e      	adds	r3, #14
 800a0e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe fa25 	bl	8008538 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f0:	3316      	adds	r3, #22
 800a0f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fa1f 	bl	8008538 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fc:	330b      	adds	r3, #11
 800a0fe:	2220      	movs	r2, #32
 800a100:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff f9f7 	bl	80094fc <ld_clust>
 800a10e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a114:	2200      	movs	r2, #0
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff fa0f 	bl	800953a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a11e:	331c      	adds	r3, #28
 800a120:	2100      	movs	r1, #0
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fa08 	bl	8008538 <st_dword>
					fs->wflag = 1;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	2201      	movs	r2, #1
 800a12c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a130:	2b00      	cmp	r3, #0
 800a132:	d037      	beq.n	800a1a4 <f_open+0x1d4>
						dw = fs->winsect;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a138:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a13a:	f107 0314 	add.w	r3, r7, #20
 800a13e:	2200      	movs	r2, #0
 800a140:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe feff 	bl	8008f46 <remove_chain>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a14e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a152:	2b00      	cmp	r3, #0
 800a154:	d126      	bne.n	800a1a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe fc46 	bl	80089ec <move_window>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a16a:	3a01      	subs	r2, #1
 800a16c:	611a      	str	r2, [r3, #16]
 800a16e:	e019      	b.n	800a1a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a174:	2b00      	cmp	r3, #0
 800a176:	d115      	bne.n	800a1a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a178:	7ebb      	ldrb	r3, [r7, #26]
 800a17a:	f003 0310 	and.w	r3, r3, #16
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <f_open+0x1ba>
					res = FR_NO_FILE;
 800a182:	2304      	movs	r3, #4
 800a184:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a188:	e00c      	b.n	800a1a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a18a:	79fb      	ldrb	r3, [r7, #7]
 800a18c:	f003 0302 	and.w	r3, r3, #2
 800a190:	2b00      	cmp	r3, #0
 800a192:	d007      	beq.n	800a1a4 <f_open+0x1d4>
 800a194:	7ebb      	ldrb	r3, [r7, #26]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <f_open+0x1d4>
						res = FR_DENIED;
 800a19e:	2307      	movs	r3, #7
 800a1a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a1a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d128      	bne.n	800a1fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	f003 0308 	and.w	r3, r3, #8
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
 800a1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a1c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bf14      	ite	ne
 800a1d6:	2301      	movne	r3, #1
 800a1d8:	2300      	moveq	r3, #0
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	461a      	mov	r2, r3
 800a1de:	f107 0314 	add.w	r3, r7, #20
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fe facf 	bl	8008788 <inc_lock>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d102      	bne.n	800a1fe <f_open+0x22e>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a1fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a202:	2b00      	cmp	r3, #0
 800a204:	f040 80a3 	bne.w	800a34e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a20c:	4611      	mov	r1, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f7ff f974 	bl	80094fc <ld_clust>
 800a214:	4602      	mov	r2, r0
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21c:	331c      	adds	r3, #28
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe f94c 	bl	80084bc <ld_dword>
 800a224:	4602      	mov	r2, r0
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	88da      	ldrh	r2, [r3, #6]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	79fa      	ldrb	r2, [r7, #7]
 800a242:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3330      	adds	r3, #48	; 0x30
 800a25a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a25e:	2100      	movs	r1, #0
 800a260:	4618      	mov	r0, r3
 800a262:	f7fe f9b6 	bl	80085d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a266:	79fb      	ldrb	r3, [r7, #7]
 800a268:	f003 0320 	and.w	r3, r3, #32
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d06e      	beq.n	800a34e <f_open+0x37e>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d06a      	beq.n	800a34e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	895b      	ldrh	r3, [r3, #10]
 800a284:	461a      	mov	r2, r3
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	899b      	ldrh	r3, [r3, #12]
 800a28a:	fb03 f302 	mul.w	r3, r3, r2
 800a28e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	657b      	str	r3, [r7, #84]	; 0x54
 800a29c:	e016      	b.n	800a2cc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fc5f 	bl	8008b66 <get_fat>
 800a2a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a2aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d802      	bhi.n	800a2b6 <f_open+0x2e6>
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a2b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2bc:	d102      	bne.n	800a2c4 <f_open+0x2f4>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a2c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a2cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d103      	bne.n	800a2dc <f_open+0x30c>
 800a2d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d8e0      	bhi.n	800a29e <f_open+0x2ce>
				}
				fp->clust = clst;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a2e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d131      	bne.n	800a34e <f_open+0x37e>
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	899b      	ldrh	r3, [r3, #12]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2f6:	fb02 f201 	mul.w	r2, r2, r1
 800a2fa:	1a9b      	subs	r3, r3, r2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d026      	beq.n	800a34e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe fc0f 	bl	8008b28 <clust2sect>
 800a30a:	6478      	str	r0, [r7, #68]	; 0x44
 800a30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d103      	bne.n	800a31a <f_open+0x34a>
						res = FR_INT_ERR;
 800a312:	2302      	movs	r3, #2
 800a314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a318:	e019      	b.n	800a34e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	899b      	ldrh	r3, [r3, #12]
 800a31e:	461a      	mov	r2, r3
 800a320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a322:	fbb3 f2f2 	udiv	r2, r3, r2
 800a326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a328:	441a      	add	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	7858      	ldrb	r0, [r3, #1]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6a1a      	ldr	r2, [r3, #32]
 800a33c:	2301      	movs	r3, #1
 800a33e:	f7fe f847 	bl	80083d0 <disk_read>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <f_open+0x37e>
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a34e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a352:	2b00      	cmp	r3, #0
 800a354:	d002      	beq.n	800a35c <f_open+0x38c>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a35c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a360:	4618      	mov	r0, r3
 800a362:	3760      	adds	r7, #96	; 0x60
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08e      	sub	sp, #56	; 0x38
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2200      	movs	r2, #0
 800a37e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f107 0214 	add.w	r2, r7, #20
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff fda5 	bl	8009ed8 <validate>
 800a38e:	4603      	mov	r3, r0
 800a390:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d107      	bne.n	800a3ac <f_read+0x44>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	7d5b      	ldrb	r3, [r3, #21]
 800a3a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a3a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <f_read+0x4a>
 800a3ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3b0:	e135      	b.n	800a61e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	7d1b      	ldrb	r3, [r3, #20]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <f_read+0x5a>
 800a3be:	2307      	movs	r3, #7
 800a3c0:	e12d      	b.n	800a61e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	68da      	ldr	r2, [r3, #12]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	f240 811e 	bls.w	800a614 <f_read+0x2ac>
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
 800a3da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a3dc:	e11a      	b.n	800a614 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	8992      	ldrh	r2, [r2, #12]
 800a3e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3ea:	fb02 f201 	mul.w	r2, r2, r1
 800a3ee:	1a9b      	subs	r3, r3, r2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f040 80d5 	bne.w	800a5a0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	8992      	ldrh	r2, [r2, #12]
 800a3fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	8952      	ldrh	r2, [r2, #10]
 800a406:	3a01      	subs	r2, #1
 800a408:	4013      	ands	r3, r2
 800a40a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d12f      	bne.n	800a472 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d103      	bne.n	800a422 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	633b      	str	r3, [r7, #48]	; 0x30
 800a420:	e013      	b.n	800a44a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	2b00      	cmp	r3, #0
 800a428:	d007      	beq.n	800a43a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	4619      	mov	r1, r3
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7fe fe85 	bl	8009140 <clmt_clust>
 800a436:	6338      	str	r0, [r7, #48]	; 0x30
 800a438:	e007      	b.n	800a44a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	4619      	mov	r1, r3
 800a442:	4610      	mov	r0, r2
 800a444:	f7fe fb8f 	bl	8008b66 <get_fat>
 800a448:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d804      	bhi.n	800a45a <f_read+0xf2>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2202      	movs	r2, #2
 800a454:	755a      	strb	r2, [r3, #21]
 800a456:	2302      	movs	r3, #2
 800a458:	e0e1      	b.n	800a61e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a460:	d104      	bne.n	800a46c <f_read+0x104>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	755a      	strb	r2, [r3, #21]
 800a468:	2301      	movs	r3, #1
 800a46a:	e0d8      	b.n	800a61e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a470:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7fe fb54 	bl	8008b28 <clust2sect>
 800a480:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d104      	bne.n	800a492 <f_read+0x12a>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2202      	movs	r2, #2
 800a48c:	755a      	strb	r2, [r3, #21]
 800a48e:	2302      	movs	r3, #2
 800a490:	e0c5      	b.n	800a61e <f_read+0x2b6>
			sect += csect;
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	4413      	add	r3, r2
 800a498:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	899b      	ldrh	r3, [r3, #12]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d041      	beq.n	800a532 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a4ae:	69fa      	ldr	r2, [r7, #28]
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	4413      	add	r3, r2
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	8952      	ldrh	r2, [r2, #10]
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d905      	bls.n	800a4c8 <f_read+0x160>
					cc = fs->csize - csect;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	895b      	ldrh	r3, [r3, #10]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	7858      	ldrb	r0, [r3, #1]
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4d2:	f7fd ff7d 	bl	80083d0 <disk_read>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <f_read+0x17e>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	755a      	strb	r2, [r3, #21]
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e09b      	b.n	800a61e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ea:	b25b      	sxtb	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	da18      	bge.n	800a522 <f_read+0x1ba>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6a1a      	ldr	r2, [r3, #32]
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d911      	bls.n	800a522 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6a1a      	ldr	r2, [r3, #32]
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	8992      	ldrh	r2, [r2, #12]
 800a50a:	fb02 f303 	mul.w	r3, r2, r3
 800a50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a510:	18d0      	adds	r0, r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	899b      	ldrh	r3, [r3, #12]
 800a51c:	461a      	mov	r2, r3
 800a51e:	f7fe f837 	bl	8008590 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	899b      	ldrh	r3, [r3, #12]
 800a526:	461a      	mov	r2, r3
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	fb02 f303 	mul.w	r3, r2, r3
 800a52e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a530:	e05c      	b.n	800a5ec <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	69ba      	ldr	r2, [r7, #24]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d02e      	beq.n	800a59a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	7d1b      	ldrb	r3, [r3, #20]
 800a540:	b25b      	sxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	da18      	bge.n	800a578 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	7858      	ldrb	r0, [r3, #1]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6a1a      	ldr	r2, [r3, #32]
 800a554:	2301      	movs	r3, #1
 800a556:	f7fd ff5b 	bl	8008410 <disk_write>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d004      	beq.n	800a56a <f_read+0x202>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2201      	movs	r2, #1
 800a564:	755a      	strb	r2, [r3, #21]
 800a566:	2301      	movs	r3, #1
 800a568:	e059      	b.n	800a61e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	7d1b      	ldrb	r3, [r3, #20]
 800a56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a572:	b2da      	uxtb	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	7858      	ldrb	r0, [r3, #1]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a582:	2301      	movs	r3, #1
 800a584:	69ba      	ldr	r2, [r7, #24]
 800a586:	f7fd ff23 	bl	80083d0 <disk_read>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d004      	beq.n	800a59a <f_read+0x232>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2201      	movs	r2, #1
 800a594:	755a      	strb	r2, [r3, #21]
 800a596:	2301      	movs	r3, #1
 800a598:	e041      	b.n	800a61e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	899b      	ldrh	r3, [r3, #12]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	8992      	ldrh	r2, [r2, #12]
 800a5ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5b2:	fb02 f201 	mul.w	r2, r2, r1
 800a5b6:	1a9b      	subs	r3, r3, r2
 800a5b8:	1ac3      	subs	r3, r0, r3
 800a5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a5bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d901      	bls.n	800a5c8 <f_read+0x260>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	8992      	ldrh	r2, [r2, #12]
 800a5d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5da:	fb02 f200 	mul.w	r2, r2, r0
 800a5de:	1a9b      	subs	r3, r3, r2
 800a5e0:	440b      	add	r3, r1
 800a5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5e8:	f7fd ffd2 	bl	8008590 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	4413      	add	r3, r2
 800a5f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	699a      	ldr	r2, [r3, #24]
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	441a      	add	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	619a      	str	r2, [r3, #24]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a606:	441a      	add	r2, r3
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f47f aee1 	bne.w	800a3de <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3738      	adds	r7, #56	; 0x38
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b08c      	sub	sp, #48	; 0x30
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f107 0210 	add.w	r2, r7, #16
 800a644:	4611      	mov	r1, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff fc46 	bl	8009ed8 <validate>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a656:	2b00      	cmp	r3, #0
 800a658:	d107      	bne.n	800a66a <f_write+0x44>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	7d5b      	ldrb	r3, [r3, #21]
 800a65e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <f_write+0x4a>
 800a66a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a66e:	e16a      	b.n	800a946 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	7d1b      	ldrb	r3, [r3, #20]
 800a674:	f003 0302 	and.w	r3, r3, #2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <f_write+0x5a>
 800a67c:	2307      	movs	r3, #7
 800a67e:	e162      	b.n	800a946 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	699a      	ldr	r2, [r3, #24]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	441a      	add	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	f080 814c 	bcs.w	800a92a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	43db      	mvns	r3, r3
 800a698:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a69a:	e146      	b.n	800a92a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	8992      	ldrh	r2, [r2, #12]
 800a6a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6a8:	fb02 f201 	mul.w	r2, r2, r1
 800a6ac:	1a9b      	subs	r3, r3, r2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f040 80f1 	bne.w	800a896 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	8992      	ldrh	r2, [r2, #12]
 800a6bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	8952      	ldrh	r2, [r2, #10]
 800a6c4:	3a01      	subs	r2, #1
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d143      	bne.n	800a758 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10c      	bne.n	800a6f2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d11a      	bne.n	800a71a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe fc91 	bl	8009010 <create_chain>
 800a6ee:	62b8      	str	r0, [r7, #40]	; 0x28
 800a6f0:	e013      	b.n	800a71a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d007      	beq.n	800a70a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	4619      	mov	r1, r3
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f7fe fd1d 	bl	8009140 <clmt_clust>
 800a706:	62b8      	str	r0, [r7, #40]	; 0x28
 800a708:	e007      	b.n	800a71a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	69db      	ldr	r3, [r3, #28]
 800a710:	4619      	mov	r1, r3
 800a712:	4610      	mov	r0, r2
 800a714:	f7fe fc7c 	bl	8009010 <create_chain>
 800a718:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 8109 	beq.w	800a934 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	2b01      	cmp	r3, #1
 800a726:	d104      	bne.n	800a732 <f_write+0x10c>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2202      	movs	r2, #2
 800a72c:	755a      	strb	r2, [r3, #21]
 800a72e:	2302      	movs	r3, #2
 800a730:	e109      	b.n	800a946 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a738:	d104      	bne.n	800a744 <f_write+0x11e>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2201      	movs	r2, #1
 800a73e:	755a      	strb	r2, [r3, #21]
 800a740:	2301      	movs	r3, #1
 800a742:	e100      	b.n	800a946 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a748:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d102      	bne.n	800a758 <f_write+0x132>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a756:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	7d1b      	ldrb	r3, [r3, #20]
 800a75c:	b25b      	sxtb	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	da18      	bge.n	800a794 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	7858      	ldrb	r0, [r3, #1]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6a1a      	ldr	r2, [r3, #32]
 800a770:	2301      	movs	r3, #1
 800a772:	f7fd fe4d 	bl	8008410 <disk_write>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d004      	beq.n	800a786 <f_write+0x160>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2201      	movs	r2, #1
 800a780:	755a      	strb	r2, [r3, #21]
 800a782:	2301      	movs	r3, #1
 800a784:	e0df      	b.n	800a946 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	7d1b      	ldrb	r3, [r3, #20]
 800a78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	4619      	mov	r1, r3
 800a79c:	4610      	mov	r0, r2
 800a79e:	f7fe f9c3 	bl	8008b28 <clust2sect>
 800a7a2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d104      	bne.n	800a7b4 <f_write+0x18e>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	755a      	strb	r2, [r3, #21]
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	e0c8      	b.n	800a946 <f_write+0x320>
			sect += csect;
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	899b      	ldrh	r3, [r3, #12]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7c8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d043      	beq.n	800a858 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a7d0:	69ba      	ldr	r2, [r7, #24]
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	8952      	ldrh	r2, [r2, #10]
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d905      	bls.n	800a7ea <f_write+0x1c4>
					cc = fs->csize - csect;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	895b      	ldrh	r3, [r3, #10]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	7858      	ldrb	r0, [r3, #1]
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	69f9      	ldr	r1, [r7, #28]
 800a7f4:	f7fd fe0c 	bl	8008410 <disk_write>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <f_write+0x1e2>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	755a      	strb	r2, [r3, #21]
 800a804:	2301      	movs	r3, #1
 800a806:	e09e      	b.n	800a946 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6a1a      	ldr	r2, [r3, #32]
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	6a3a      	ldr	r2, [r7, #32]
 800a812:	429a      	cmp	r2, r3
 800a814:	d918      	bls.n	800a848 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6a1a      	ldr	r2, [r3, #32]
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	8992      	ldrh	r2, [r2, #12]
 800a828:	fb02 f303 	mul.w	r3, r2, r3
 800a82c:	69fa      	ldr	r2, [r7, #28]
 800a82e:	18d1      	adds	r1, r2, r3
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	899b      	ldrh	r3, [r3, #12]
 800a834:	461a      	mov	r2, r3
 800a836:	f7fd feab 	bl	8008590 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	7d1b      	ldrb	r3, [r3, #20]
 800a83e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a842:	b2da      	uxtb	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	899b      	ldrh	r3, [r3, #12]
 800a84c:	461a      	mov	r2, r3
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	fb02 f303 	mul.w	r3, r2, r3
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a856:	e04b      	b.n	800a8f0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d016      	beq.n	800a890 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	699a      	ldr	r2, [r3, #24]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d210      	bcs.n	800a890 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	7858      	ldrb	r0, [r3, #1]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a878:	2301      	movs	r3, #1
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	f7fd fda8 	bl	80083d0 <disk_read>
 800a880:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	755a      	strb	r2, [r3, #21]
 800a88c:	2301      	movs	r3, #1
 800a88e:	e05a      	b.n	800a946 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	697a      	ldr	r2, [r7, #20]
 800a894:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	899b      	ldrh	r3, [r3, #12]
 800a89a:	4618      	mov	r0, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	8992      	ldrh	r2, [r2, #12]
 800a8a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8a8:	fb02 f201 	mul.w	r2, r2, r1
 800a8ac:	1a9b      	subs	r3, r3, r2
 800a8ae:	1ac3      	subs	r3, r0, r3
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a8b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d901      	bls.n	800a8be <f_write+0x298>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	8992      	ldrh	r2, [r2, #12]
 800a8cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8d0:	fb02 f200 	mul.w	r2, r2, r0
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	440b      	add	r3, r1
 800a8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8da:	69f9      	ldr	r1, [r7, #28]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fd fe57 	bl	8008590 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	7d1b      	ldrb	r3, [r3, #20]
 800a8e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a8f0:	69fa      	ldr	r2, [r7, #28]
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	4413      	add	r3, r2
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	699a      	ldr	r2, [r3, #24]
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	441a      	add	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	619a      	str	r2, [r3, #24]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	bf38      	it	cc
 800a910:	461a      	movcc	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	60da      	str	r2, [r3, #12]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	441a      	add	r2, r3
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f47f aeb5 	bne.w	800a69c <f_write+0x76>
 800a932:	e000      	b.n	800a936 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a934:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	7d1b      	ldrb	r3, [r3, #20]
 800a93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3730      	adds	r7, #48	; 0x30
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b086      	sub	sp, #24
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f107 0208 	add.w	r2, r7, #8
 800a95c:	4611      	mov	r1, r2
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff faba 	bl	8009ed8 <validate>
 800a964:	4603      	mov	r3, r0
 800a966:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a968:	7dfb      	ldrb	r3, [r7, #23]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d168      	bne.n	800aa40 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	7d1b      	ldrb	r3, [r3, #20]
 800a972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a976:	2b00      	cmp	r3, #0
 800a978:	d062      	beq.n	800aa40 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	7d1b      	ldrb	r3, [r3, #20]
 800a97e:	b25b      	sxtb	r3, r3
 800a980:	2b00      	cmp	r3, #0
 800a982:	da15      	bge.n	800a9b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	7858      	ldrb	r0, [r3, #1]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a1a      	ldr	r2, [r3, #32]
 800a992:	2301      	movs	r3, #1
 800a994:	f7fd fd3c 	bl	8008410 <disk_write>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <f_sync+0x54>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e04f      	b.n	800aa42 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	7d1b      	ldrb	r3, [r3, #20]
 800a9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a9b0:	f7fc fde6 	bl	8007580 <get_fattime>
 800a9b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4610      	mov	r0, r2
 800a9c0:	f7fe f814 	bl	80089ec <move_window>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a9c8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d138      	bne.n	800aa40 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	330b      	adds	r3, #11
 800a9d8:	781a      	ldrb	r2, [r3, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	330b      	adds	r3, #11
 800a9de:	f042 0220 	orr.w	r2, r2, #32
 800a9e2:	b2d2      	uxtb	r2, r2
 800a9e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6818      	ldr	r0, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	68f9      	ldr	r1, [r7, #12]
 800a9f2:	f7fe fda2 	bl	800953a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f103 021c 	add.w	r2, r3, #28
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f7fd fd98 	bl	8008538 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3316      	adds	r3, #22
 800aa0c:	6939      	ldr	r1, [r7, #16]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fd fd92 	bl	8008538 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3312      	adds	r3, #18
 800aa18:	2100      	movs	r1, #0
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fd fd71 	bl	8008502 <st_word>
					fs->wflag = 1;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2201      	movs	r2, #1
 800aa24:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7fe f80d 	bl	8008a48 <sync_fs>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	7d1b      	ldrb	r3, [r3, #20]
 800aa36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff ff7b 	bl	800a94e <f_sync>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d118      	bne.n	800aa94 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f107 0208 	add.w	r2, r7, #8
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff fa34 	bl	8009ed8 <validate>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10c      	bne.n	800aa94 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fd ff10 	bl	80088a4 <dec_lock>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aaae:	2301      	movs	r3, #1
 800aab0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aab6:	4b1f      	ldr	r3, [pc, #124]	; (800ab34 <FATFS_LinkDriverEx+0x94>)
 800aab8:	7a5b      	ldrb	r3, [r3, #9]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d131      	bne.n	800ab24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aac0:	4b1c      	ldr	r3, [pc, #112]	; (800ab34 <FATFS_LinkDriverEx+0x94>)
 800aac2:	7a5b      	ldrb	r3, [r3, #9]
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	461a      	mov	r2, r3
 800aac8:	4b1a      	ldr	r3, [pc, #104]	; (800ab34 <FATFS_LinkDriverEx+0x94>)
 800aaca:	2100      	movs	r1, #0
 800aacc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aace:	4b19      	ldr	r3, [pc, #100]	; (800ab34 <FATFS_LinkDriverEx+0x94>)
 800aad0:	7a5b      	ldrb	r3, [r3, #9]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	4a17      	ldr	r2, [pc, #92]	; (800ab34 <FATFS_LinkDriverEx+0x94>)
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aade:	4b15      	ldr	r3, [pc, #84]	; (800ab34 <FATFS_LinkDriverEx+0x94>)
 800aae0:	7a5b      	ldrb	r3, [r3, #9]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <FATFS_LinkDriverEx+0x94>)
 800aae8:	4413      	add	r3, r2
 800aaea:	79fa      	ldrb	r2, [r7, #7]
 800aaec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aaee:	4b11      	ldr	r3, [pc, #68]	; (800ab34 <FATFS_LinkDriverEx+0x94>)
 800aaf0:	7a5b      	ldrb	r3, [r3, #9]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	b2d1      	uxtb	r1, r2
 800aaf8:	4a0e      	ldr	r2, [pc, #56]	; (800ab34 <FATFS_LinkDriverEx+0x94>)
 800aafa:	7251      	strb	r1, [r2, #9]
 800aafc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aafe:	7dbb      	ldrb	r3, [r7, #22]
 800ab00:	3330      	adds	r3, #48	; 0x30
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	223a      	movs	r2, #58	; 0x3a
 800ab0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	3302      	adds	r3, #2
 800ab14:	222f      	movs	r2, #47	; 0x2f
 800ab16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	3303      	adds	r3, #3
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	371c      	adds	r7, #28
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20001574 	.word	0x20001574

0800ab38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab42:	2200      	movs	r2, #0
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff ffaa 	bl	800aaa0 <FATFS_LinkDriverEx>
 800ab4c:	4603      	mov	r3, r0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
	...

0800ab58 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <fs_open+0x16>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <fs_open+0x1c>
    return ERR_ARG;
 800ab6e:	f06f 030f 	mvn.w	r3, #15
 800ab72:	e028      	b.n	800abc6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ab74:	4b16      	ldr	r3, [pc, #88]	; (800abd0 <fs_open+0x78>)
 800ab76:	60fb      	str	r3, [r7, #12]
 800ab78:	e020      	b.n	800abbc <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6838      	ldr	r0, [r7, #0]
 800ab82:	f7f5 fb25 	bl	80001d0 <strcmp>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d114      	bne.n	800abb6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	689a      	ldr	r2, [r3, #8]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	68da      	ldr	r2, [r3, #12]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	7c1a      	ldrb	r2, [r3, #16]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	e007      	b.n	800abc6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1db      	bne.n	800ab7a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800abc2:	f06f 0305 	mvn.w	r3, #5
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	0801eccc 	.word	0x0801eccc

0800abd4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685a      	ldr	r2, [r3, #4]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	1ad3      	subs	r3, r2, r3
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b082      	sub	sp, #8
 800ac0a:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800ac0c:	f44f 7094 	mov.w	r0, #296	; 0x128
 800ac10:	f002 fb2c 	bl	800d26c <mem_malloc>
 800ac14:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800ac1c:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ac20:	2100      	movs	r1, #0
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f00c fbf4 	bl	8017410 <memset>
  }
  return ret;
 800ac28:	687b      	ldr	r3, [r7, #4]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b082      	sub	sp, #8
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f002 f9ad 	bl	800cfa0 <mem_free>
  }
}
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ac56:	22d8      	movs	r2, #216	; 0xd8
 800ac58:	2100      	movs	r1, #0
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f00c fbd8 	bl	8017410 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2205      	movs	r2, #5
 800ac64:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ac76:	20d8      	movs	r0, #216	; 0xd8
 800ac78:	f002 faf8 	bl	800d26c <mem_malloc>
 800ac7c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <http_state_alloc+0x1a>
    http_state_init(ret);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff ffe2 	bl	800ac4e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ac8a:	687b      	ldr	r3, [r7, #4]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d007      	beq.n	800acb4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	695b      	ldr	r3, [r3, #20]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7ff ff93 	bl	800abd4 <fs_close>
    hs->handle = NULL;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d007      	beq.n	800accc <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff ffb6 	bl	800ac32 <http_ssi_state_free>
    hs->ssi = NULL;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d007      	beq.n	800ace4 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	4618      	mov	r0, r3
 800acda:	f003 fa93 	bl	800e204 <pbuf_free>
    hs->req = NULL;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800ace4:	bf00      	nop
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d005      	beq.n	800ad06 <http_state_free+0x1a>
    http_state_eof(hs);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff ffca 	bl	800ac94 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f002 f94d 	bl	800cfa0 <mem_free>
  }
}
 800ad06:	bf00      	nop
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d106      	bne.n	800ad32 <http_write+0x22>
 800ad24:	4b2c      	ldr	r3, [pc, #176]	; (800add8 <http_write+0xc8>)
 800ad26:	f240 2219 	movw	r2, #537	; 0x219
 800ad2a:	492c      	ldr	r1, [pc, #176]	; (800addc <http_write+0xcc>)
 800ad2c:	482c      	ldr	r0, [pc, #176]	; (800ade0 <http_write+0xd0>)
 800ad2e:	f00c fb77 	bl	8017420 <iprintf>
  len = *length;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800ad38:	8afb      	ldrh	r3, [r7, #22]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <http_write+0x32>
    return ERR_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	e045      	b.n	800adce <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad48:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800ad4a:	8aba      	ldrh	r2, [r7, #20]
 800ad4c:	8afb      	ldrh	r3, [r7, #22]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d201      	bcs.n	800ad56 <http_write+0x46>
    len = max_len;
 800ad52:	8abb      	ldrh	r3, [r7, #20]
 800ad54:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800ad5e:	8afa      	ldrh	r2, [r7, #22]
 800ad60:	8abb      	ldrh	r3, [r7, #20]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d901      	bls.n	800ad6a <http_write+0x5a>
    len = max_len;
 800ad66:	8abb      	ldrh	r3, [r7, #20]
 800ad68:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800ad6a:	78fb      	ldrb	r3, [r7, #3]
 800ad6c:	8afa      	ldrh	r2, [r7, #22]
 800ad6e:	68b9      	ldr	r1, [r7, #8]
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f007 ffcb 	bl	8012d0c <tcp_write>
 800ad76:	4603      	mov	r3, r0
 800ad78:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800ad7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad82:	d10f      	bne.n	800ada4 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d004      	beq.n	800ad98 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ad94:	2b08      	cmp	r3, #8
 800ad96:	d902      	bls.n	800ad9e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	82fb      	strh	r3, [r7, #22]
 800ad9c:	e002      	b.n	800ada4 <http_write+0x94>
      } else {
        len /= 2;
 800ad9e:	8afb      	ldrh	r3, [r7, #22]
 800ada0:	085b      	lsrs	r3, r3, #1
 800ada2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ada4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ada8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adac:	d102      	bne.n	800adb4 <http_write+0xa4>
 800adae:	8afb      	ldrh	r3, [r7, #22]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d8da      	bhi.n	800ad6a <http_write+0x5a>

  if (err == ERR_OK) {
 800adb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d103      	bne.n	800adc4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	8afa      	ldrh	r2, [r7, #22]
 800adc0:	801a      	strh	r2, [r3, #0]
 800adc2:	e002      	b.n	800adca <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800adca:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	08019a34 	.word	0x08019a34
 800addc:	08019a6c 	.word	0x08019a6c
 800ade0:	08019a7c 	.word	0x08019a7c

0800ade4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	4613      	mov	r3, r2
 800adf0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00c      	beq.n	800ae12 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d007      	beq.n	800ae12 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800ae02:	4b1f      	ldr	r3, [pc, #124]	; (800ae80 <http_close_or_abort_conn+0x9c>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800ae08:	223f      	movs	r2, #63	; 0x3f
 800ae0a:	491d      	ldr	r1, [pc, #116]	; (800ae80 <http_close_or_abort_conn+0x9c>)
 800ae0c:	68b8      	ldr	r0, [r7, #8]
 800ae0e:	f7f5 ffe7 	bl	8000de0 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ae12:	2100      	movs	r1, #0
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f005 f83b 	bl	800fe90 <tcp_arg>
  altcp_recv(pcb, NULL);
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f005 f849 	bl	800feb4 <tcp_recv>
  altcp_err(pcb, NULL);
 800ae22:	2100      	movs	r1, #0
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f005 f889 	bl	800ff3c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f005 f8be 	bl	800ffb0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800ae34:	2100      	movs	r1, #0
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f005 f85e 	bl	800fef8 <tcp_sent>
  if (hs != NULL) {
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d002      	beq.n	800ae48 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800ae42:	68b8      	ldr	r0, [r7, #8]
 800ae44:	f7ff ff52 	bl	800acec <http_state_free>
  }

  if (abort_conn) {
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d004      	beq.n	800ae58 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f003 ff60 	bl	800ed14 <tcp_abort>
    return ERR_OK;
 800ae54:	2300      	movs	r3, #0
 800ae56:	e00f      	b.n	800ae78 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f003 fe71 	bl	800eb40 <tcp_close>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ae62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d004      	beq.n	800ae74 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ae6a:	2204      	movs	r2, #4
 800ae6c:	4905      	ldr	r1, [pc, #20]	; (800ae84 <http_close_or_abort_conn+0xa0>)
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f005 f89e 	bl	800ffb0 <tcp_poll>
  }
  return err;
 800ae74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20001980 	.word	0x20001980
 800ae84:	0800c6f7 	.word	0x0800c6f7

0800ae88 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ae92:	2200      	movs	r2, #0
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff ffa4 	bl	800ade4 <http_close_or_abort_conn>
 800ae9c:	4603      	mov	r3, r0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff ffe8 	bl	800ae88 <http_close_conn>
  }
}
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d003      	beq.n	800aed8 <extract_uri_parameters+0x18>
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <extract_uri_parameters+0x1c>
    return (0);
 800aed8:	2300      	movs	r3, #0
 800aeda:	e04b      	b.n	800af74 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800aee0:	2300      	movs	r3, #0
 800aee2:	613b      	str	r3, [r7, #16]
 800aee4:	e03f      	b.n	800af66 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	320c      	adds	r2, #12
 800aeec:	6979      	ldr	r1, [r7, #20]
 800aeee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800aef6:	2126      	movs	r1, #38	; 0x26
 800aef8:	6978      	ldr	r0, [r7, #20]
 800aefa:	f00c fbc2 	bl	8017682 <strchr>
 800aefe:	6178      	str	r0, [r7, #20]
    if (pair) {
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d006      	beq.n	800af14 <extract_uri_parameters+0x54>
      *pair = '\0';
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2200      	movs	r2, #0
 800af0a:	701a      	strb	r2, [r3, #0]
      pair++;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	3301      	adds	r3, #1
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	e00c      	b.n	800af2e <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800af14:	2120      	movs	r1, #32
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f00c fbb3 	bl	8017682 <strchr>
 800af1c:	6178      	str	r0, [r7, #20]
      if (pair) {
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <extract_uri_parameters+0x6a>
        *pair = '\0';
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800af2e:	213d      	movs	r1, #61	; 0x3d
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f00c fba6 	bl	8017682 <strchr>
 800af36:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00a      	beq.n	800af54 <extract_uri_parameters+0x94>
      *equals = '\0';
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	1c59      	adds	r1, r3, #1
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	321c      	adds	r2, #28
 800af4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800af52:	e005      	b.n	800af60 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	321c      	adds	r2, #28
 800af5a:	2100      	movs	r1, #0
 800af5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	3301      	adds	r3, #1
 800af64:	613b      	str	r3, [r7, #16]
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	2b0f      	cmp	r3, #15
 800af6a:	dc02      	bgt.n	800af72 <extract_uri_parameters+0xb2>
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1b9      	bne.n	800aee6 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800af72:	693b      	ldr	r3, [r7, #16]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800af7c:	b590      	push	{r4, r7, lr}
 800af7e:	b089      	sub	sp, #36	; 0x24
 800af80:	af02      	add	r7, sp, #8
 800af82:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d106      	bne.n	800af98 <get_tag_insert+0x1c>
 800af8a:	4b58      	ldr	r3, [pc, #352]	; (800b0ec <get_tag_insert+0x170>)
 800af8c:	f44f 7241 	mov.w	r2, #772	; 0x304
 800af90:	4957      	ldr	r1, [pc, #348]	; (800b0f0 <get_tag_insert+0x174>)
 800af92:	4858      	ldr	r0, [pc, #352]	; (800b0f4 <get_tag_insert+0x178>)
 800af94:	f00c fa44 	bl	8017420 <iprintf>
  ssi = hs->ssi;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9c:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d106      	bne.n	800afb2 <get_tag_insert+0x36>
 800afa4:	4b51      	ldr	r3, [pc, #324]	; (800b0ec <get_tag_insert+0x170>)
 800afa6:	f240 3206 	movw	r2, #774	; 0x306
 800afaa:	4953      	ldr	r1, [pc, #332]	; (800b0f8 <get_tag_insert+0x17c>)
 800afac:	4851      	ldr	r0, [pc, #324]	; (800b0f4 <get_tag_insert+0x178>)
 800afae:	f00c fa37 	bl	8017420 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	8a9b      	ldrh	r3, [r3, #20]
 800afb6:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afbe:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800afc0:	4b4e      	ldr	r3, [pc, #312]	; (800b0fc <get_tag_insert+0x180>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d033      	beq.n	800b030 <get_tag_insert+0xb4>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800afc8:	4b4d      	ldr	r3, [pc, #308]	; (800b100 <get_tag_insert+0x184>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d02f      	beq.n	800b030 <get_tag_insert+0xb4>
 800afd0:	4b4c      	ldr	r3, [pc, #304]	; (800b104 <get_tag_insert+0x188>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d02b      	beq.n	800b030 <get_tag_insert+0xb4>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800afd8:	2300      	movs	r3, #0
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	e023      	b.n	800b026 <get_tag_insert+0xaa>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f103 0018 	add.w	r0, r3, #24
 800afe4:	4b46      	ldr	r3, [pc, #280]	; (800b100 <get_tag_insert+0x184>)
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4619      	mov	r1, r3
 800aff2:	f7f5 f8ed 	bl	80001d0 <strcmp>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d111      	bne.n	800b020 <get_tag_insert+0xa4>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800affc:	4b3f      	ldr	r3, [pc, #252]	; (800b0fc <get_tag_insert+0x180>)
 800affe:	681c      	ldr	r4, [r3, #0]
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	3314      	adds	r3, #20
 800b00a:	89fa      	ldrh	r2, [r7, #14]
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	4613      	mov	r3, r2
 800b010:	22fa      	movs	r2, #250	; 0xfa
 800b012:	6978      	ldr	r0, [r7, #20]
 800b014:	47a0      	blx	r4
 800b016:	4603      	mov	r3, r0
 800b018:	461a      	mov	r2, r3
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800b01e:	e061      	b.n	800b0e4 <get_tag_insert+0x168>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	3301      	adds	r3, #1
 800b024:	617b      	str	r3, [r7, #20]
 800b026:	4b37      	ldr	r3, [pc, #220]	; (800b104 <get_tag_insert+0x188>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	dbd6      	blt.n	800afde <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	3318      	adds	r3, #24
 800b034:	4618      	mov	r0, r3
 800b036:	f7f5 f8d5 	bl	80001e4 <strlen>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2be0      	cmp	r3, #224	; 0xe0
 800b03e:	d818      	bhi.n	800b072 <get_tag_insert+0xf6>
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	3318      	adds	r3, #24
 800b044:	4618      	mov	r0, r3
 800b046:	f7f5 f8cd 	bl	80001e4 <strlen>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b11      	cmp	r3, #17
 800b04e:	d810      	bhi.n	800b072 <get_tag_insert+0xf6>
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	3318      	adds	r3, #24
 800b054:	4618      	mov	r0, r3
 800b056:	f7f5 f8c5 	bl	80001e4 <strlen>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2be0      	cmp	r3, #224	; 0xe0
 800b05e:	d806      	bhi.n	800b06e <get_tag_insert+0xf2>
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	3318      	adds	r3, #24
 800b064:	4618      	mov	r0, r3
 800b066:	f7f5 f8bd 	bl	80001e4 <strlen>
 800b06a:	4603      	mov	r3, r0
 800b06c:	e002      	b.n	800b074 <get_tag_insert+0xf8>
 800b06e:	23e1      	movs	r3, #225	; 0xe1
 800b070:	e000      	b.n	800b074 <get_tag_insert+0xf8>
 800b072:	2311      	movs	r3, #17
 800b074:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	3329      	adds	r3, #41	; 0x29
 800b07a:	2212      	movs	r2, #18
 800b07c:	4922      	ldr	r1, [pc, #136]	; (800b108 <get_tag_insert+0x18c>)
 800b07e:	4618      	mov	r0, r3
 800b080:	f00c f99e 	bl	80173c0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	3318      	adds	r3, #24
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	4619      	mov	r1, r3
 800b092:	f00c f995 	bl	80173c0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	3312      	adds	r3, #18
 800b09a:	3328      	adds	r3, #40	; 0x28
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	4413      	add	r3, r2
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	2207      	movs	r2, #7
 800b0a4:	4919      	ldr	r1, [pc, #100]	; (800b10c <get_tag_insert+0x190>)
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f00c f98a 	bl	80173c0 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	3319      	adds	r3, #25
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  len = strlen(ssi->tag_insert);
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	3329      	adds	r3, #41	; 0x29
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7f5 f890 	bl	80001e4 <strlen>
 800b0c4:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0cc:	d306      	bcc.n	800b0dc <get_tag_insert+0x160>
 800b0ce:	4b07      	ldr	r3, [pc, #28]	; (800b0ec <get_tag_insert+0x170>)
 800b0d0:	f240 323f 	movw	r2, #831	; 0x33f
 800b0d4:	490e      	ldr	r1, [pc, #56]	; (800b110 <get_tag_insert+0x194>)
 800b0d6:	4807      	ldr	r0, [pc, #28]	; (800b0f4 <get_tag_insert+0x178>)
 800b0d8:	f00c f9a2 	bl	8017420 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	825a      	strh	r2, [r3, #18]
}
 800b0e4:	371c      	adds	r7, #28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd90      	pop	{r4, r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	08019a34 	.word	0x08019a34
 800b0f0:	08019aa4 	.word	0x08019aa4
 800b0f4:	08019a7c 	.word	0x08019a7c
 800b0f8:	08019ab0 	.word	0x08019ab0
 800b0fc:	200019c0 	.word	0x200019c0
 800b100:	200019c8 	.word	0x200019c8
 800b104:	200019c4 	.word	0x200019c4
 800b108:	08019abc 	.word	0x08019abc
 800b10c:	08019ad0 	.word	0x08019ad0
 800b110:	08019ad8 	.word	0x08019ad8

0800b114 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800b11e:	4a55      	ldr	r2, [pc, #340]	; (800b274 <get_http_headers+0x160>)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d110      	bne.n	800b15e <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800b13c:	4a4e      	ldr	r2, [pc, #312]	; (800b278 <get_http_headers+0x164>)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800b144:	4a4d      	ldr	r2, [pc, #308]	; (800b27c <get_http_headers+0x168>)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800b15c:	e087      	b.n	800b26e <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800b15e:	4948      	ldr	r1, [pc, #288]	; (800b280 <get_http_headers+0x16c>)
 800b160:	6838      	ldr	r0, [r7, #0]
 800b162:	f00c fac8 	bl	80176f6 <strstr>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d004      	beq.n	800b176 <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800b16c:	4a42      	ldr	r2, [pc, #264]	; (800b278 <get_http_headers+0x164>)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b174:	e01b      	b.n	800b1ae <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800b176:	4943      	ldr	r1, [pc, #268]	; (800b284 <get_http_headers+0x170>)
 800b178:	6838      	ldr	r0, [r7, #0]
 800b17a:	f00c fabc 	bl	80176f6 <strstr>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d004      	beq.n	800b18e <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800b184:	4a40      	ldr	r2, [pc, #256]	; (800b288 <get_http_headers+0x174>)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b18c:	e00f      	b.n	800b1ae <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800b18e:	493f      	ldr	r1, [pc, #252]	; (800b28c <get_http_headers+0x178>)
 800b190:	6838      	ldr	r0, [r7, #0]
 800b192:	f00c fab0 	bl	80176f6 <strstr>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d004      	beq.n	800b1a6 <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800b19c:	4a3c      	ldr	r2, [pc, #240]	; (800b290 <get_http_headers+0x17c>)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b1a4:	e003      	b.n	800b1ae <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800b1a6:	4a3b      	ldr	r2, [pc, #236]	; (800b294 <get_http_headers+0x180>)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800b1ae:	213f      	movs	r1, #63	; 0x3f
 800b1b0:	6838      	ldr	r0, [r7, #0]
 800b1b2:	f00c fa66 	bl	8017682 <strchr>
 800b1b6:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <get_http_headers+0xb0>
    *vars = '\0';
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800b1c8:	212e      	movs	r1, #46	; 0x2e
 800b1ca:	6838      	ldr	r0, [r7, #0]
 800b1cc:	f00c fa59 	bl	8017682 <strchr>
 800b1d0:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800b1d2:	e007      	b.n	800b1e4 <get_http_headers+0xd0>
    ext = tmp + 1;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800b1da:	212e      	movs	r1, #46	; 0x2e
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f00c fa50 	bl	8017682 <strchr>
 800b1e2:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1f4      	bne.n	800b1d4 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d014      	beq.n	800b21a <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	e00d      	b.n	800b212 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800b1f6:	4a28      	ldr	r2, [pc, #160]	; (800b298 <get_http_headers+0x184>)
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1fe:	68f9      	ldr	r1, [r7, #12]
 800b200:	4618      	mov	r0, r3
 800b202:	f001 fcd1 	bl	800cba8 <lwip_stricmp>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d009      	beq.n	800b220 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	3301      	adds	r3, #1
 800b210:	617b      	str	r3, [r7, #20]
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b13      	cmp	r3, #19
 800b216:	d9ee      	bls.n	800b1f6 <get_http_headers+0xe2>
 800b218:	e003      	b.n	800b222 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800b21a:	2314      	movs	r3, #20
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	e000      	b.n	800b222 <get_http_headers+0x10e>
        break;
 800b220:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <get_http_headers+0x11a>
    *vars = '?';
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	223f      	movs	r2, #63	; 0x3f
 800b22c:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2b13      	cmp	r3, #19
 800b232:	d808      	bhi.n	800b246 <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800b234:	4a18      	ldr	r2, [pc, #96]	; (800b298 <get_http_headers+0x184>)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	00db      	lsls	r3, r3, #3
 800b23a:	4413      	add	r3, r2
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800b244:	e00b      	b.n	800b25e <get_http_headers+0x14a>
  } else if (!ext) {
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d104      	bne.n	800b256 <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a13      	ldr	r2, [pc, #76]	; (800b29c <get_http_headers+0x188>)
 800b250:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800b254:	e003      	b.n	800b25e <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a11      	ldr	r2, [pc, #68]	; (800b2a0 <get_http_headers+0x18c>)
 800b25a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	080196b4 	.word	0x080196b4
 800b278:	08019578 	.word	0x08019578
 800b27c:	080196f4 	.word	0x080196f4
 800b280:	08019ae8 	.word	0x08019ae8
 800b284:	08019aec 	.word	0x08019aec
 800b288:	08019598 	.word	0x08019598
 800b28c:	08019af0 	.word	0x08019af0
 800b290:	080195b4 	.word	0x080195b4
 800b294:	08019564 	.word	0x08019564
 800b298:	0801ece0 	.word	0x0801ece0
 800b29c:	08019888 	.word	0x08019888
 800b2a0:	08019af4 	.word	0x08019af4

0800b2a4 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d006      	beq.n	800b2c8 <get_http_content_length+0x24>
 800b2ba:	4b27      	ldr	r3, [pc, #156]	; (800b358 <get_http_content_length+0xb4>)
 800b2bc:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800b2c0:	4926      	ldr	r1, [pc, #152]	; (800b35c <get_http_content_length+0xb8>)
 800b2c2:	4827      	ldr	r0, [pc, #156]	; (800b360 <get_http_content_length+0xbc>)
 800b2c4:	f00c f8ac 	bl	8017420 <iprintf>

  add_content_len = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10c      	bne.n	800b2ee <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	695b      	ldr	r3, [r3, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d008      	beq.n	800b2ee <get_http_content_length+0x4a>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	7c1b      	ldrb	r3, [r3, #16]
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <get_http_content_length+0x4a>
      add_content_len = 1;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d025      	beq.n	800b340 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	461a      	mov	r2, r3
 800b302:	210c      	movs	r1, #12
 800b304:	f001 fc84 	bl	800cc10 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	33c4      	adds	r3, #196	; 0xc4
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7f4 ff69 	bl	80001e4 <strlen>
 800b312:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2b09      	cmp	r3, #9
 800b318:	d810      	bhi.n	800b33c <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	33c0      	adds	r3, #192	; 0xc0
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	4413      	add	r3, r2
 800b322:	3304      	adds	r3, #4
 800b324:	2203      	movs	r2, #3
 800b326:	490f      	ldr	r1, [pc, #60]	; (800b364 <get_http_content_length+0xc0>)
 800b328:	4618      	mov	r0, r3
 800b32a:	f00c f849 	bl	80173c0 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b33a:	e001      	b.n	800b340 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800b346:	4a08      	ldr	r2, [pc, #32]	; (800b368 <get_http_content_length+0xc4>)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800b34e:	bf00      	nop
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	08019a34 	.word	0x08019a34
 800b35c:	08019b14 	.word	0x08019b14
 800b360:	08019a7c 	.word	0x08019a7c
 800b364:	08019b28 	.word	0x08019b28
 800b368:	08019644 	.word	0x08019644

0800b36c <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b088      	sub	sp, #32
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b376:	2300      	movs	r3, #0
 800b378:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800b384:	6838      	ldr	r0, [r7, #0]
 800b386:	f7ff ff8d 	bl	800b2a4 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b390:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800b392:	8bfb      	ldrh	r3, [r7, #30]
 800b394:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800b396:	e08b      	b.n	800b4b0 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b39e:	461a      	mov	r2, r3
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	322c      	adds	r2, #44	; 0x2c
 800b3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7f4 ff1b 	bl	80001e4 <strlen>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800b3b2:	8b7b      	ldrh	r3, [r7, #26]
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800b3ba:	1a9a      	subs	r2, r3, r2
 800b3bc:	8bfb      	ldrh	r3, [r7, #30]
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	bfa8      	it	ge
 800b3c2:	4613      	movge	r3, r2
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	322c      	adds	r2, #44	; 0x2c
 800b3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800b3de:	4413      	add	r3, r2
 800b3e0:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800b3e2:	89fb      	ldrh	r3, [r7, #14]
 800b3e4:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d103      	bne.n	800b3fc <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800b3f4:	7f3b      	ldrb	r3, [r7, #28]
 800b3f6:	f043 0301 	orr.w	r3, r3, #1
 800b3fa:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b402:	2b03      	cmp	r3, #3
 800b404:	d803      	bhi.n	800b40e <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800b406:	7f3b      	ldrb	r3, [r7, #28]
 800b408:	f043 0302 	orr.w	r3, r3, #2
 800b40c:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800b40e:	7f3b      	ldrb	r3, [r7, #28]
 800b410:	f107 020e 	add.w	r2, r7, #14
 800b414:	6979      	ldr	r1, [r7, #20]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff fc7a 	bl	800ad10 <http_write>
 800b41c:	4603      	mov	r3, r0
 800b41e:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800b420:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <http_send_headers+0xca>
 800b428:	89fb      	ldrh	r3, [r7, #14]
 800b42a:	8a7a      	ldrh	r2, [r7, #18]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d002      	beq.n	800b436 <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800b430:	2301      	movs	r3, #1
 800b432:	777b      	strb	r3, [r7, #29]
 800b434:	e005      	b.n	800b442 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800b436:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800b448:	89fb      	ldrh	r3, [r7, #14]
 800b44a:	4413      	add	r3, r2
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 800b454:	89fb      	ldrh	r3, [r7, #14]
 800b456:	8bfa      	ldrh	r2, [r7, #30]
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800b462:	8b7a      	ldrh	r2, [r7, #26]
 800b464:	429a      	cmp	r2, r3
 800b466:	d123      	bne.n	800b4b0 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b46e:	3301      	adds	r3, #1
 800b470:	b29a      	uxth	r2, r3
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800b478:	e007      	b.n	800b48a <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b480:	3301      	adds	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b490:	2b04      	cmp	r3, #4
 800b492:	d809      	bhi.n	800b4a8 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b49a:	461a      	mov	r2, r3
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	322c      	adds	r2, #44	; 0x2c
 800b4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d0e8      	beq.n	800b47a <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800b4b0:	8bfb      	ldrh	r3, [r7, #30]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d008      	beq.n	800b4c8 <http_send_headers+0x15c>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	d803      	bhi.n	800b4c8 <http_send_headers+0x15c>
 800b4c0:	89fb      	ldrh	r3, [r7, #14]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f47f af68 	bne.w	800b398 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	d90f      	bls.n	800b4f2 <http_send_headers+0x186>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10b      	bne.n	800b4f2 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f819 	bl	800b514 <http_check_eof>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	777b      	strb	r3, [r7, #29]
 800b4ec:	e001      	b.n	800b4f2 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e00b      	b.n	800b50a <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d903      	bls.n	800b504 <http_send_headers+0x198>
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800b504:	2302      	movs	r3, #2
 800b506:	e000      	b.n	800b50a <http_send_headers+0x19e>
  }
  return data_to_send;
 800b508:	7f7b      	ldrb	r3, [r7, #29]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3720      	adds	r7, #32
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
	...

0800b514 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d105      	bne.n	800b532 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7ff fcbc 	bl	800aea6 <http_eof>
    return 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	e016      	b.n	800b560 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff fb56 	bl	800abe8 <fs_bytes_left>
 800b53c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	dc05      	bgt.n	800b550 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7ff fcad 	bl	800aea6 <http_eof>
    return 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	e007      	b.n	800b560 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800b550:	4b05      	ldr	r3, [pc, #20]	; (800b568 <http_check_eof+0x54>)
 800b552:	f240 429d 	movw	r2, #1181	; 0x49d
 800b556:	4905      	ldr	r1, [pc, #20]	; (800b56c <http_check_eof+0x58>)
 800b558:	4805      	ldr	r0, [pc, #20]	; (800b570 <http_check_eof+0x5c>)
 800b55a:	f00b ff61 	bl	8017420 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800b55e:	2301      	movs	r3, #1
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	08019a34 	.word	0x08019a34
 800b56c:	08019b2c 	.word	0x08019b2c
 800b570:	08019a7c 	.word	0x08019a7c

0800b574 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b586:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d803      	bhi.n	800b596 <http_send_data_nonssi+0x22>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b592:	b29b      	uxth	r3, r3
 800b594:	e001      	b.n	800b59a <http_send_data_nonssi+0x26>
 800b596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b59a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	6999      	ldr	r1, [r3, #24]
 800b5a0:	f107 020c 	add.w	r2, r7, #12
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff fbb2 	bl	800ad10 <http_write>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800b5b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10d      	bne.n	800b5d4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	89ba      	ldrh	r2, [r7, #12]
 800b5c2:	441a      	add	r2, r3
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	89ba      	ldrh	r2, [r7, #12]
 800b5ce:	1a9a      	subs	r2, r3, r2
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f6:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <http_send_data_ssi+0x2c>
 800b5fe:	4b89      	ldr	r3, [pc, #548]	; (800b824 <http_send_data_ssi+0x244>)
 800b600:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b604:	4988      	ldr	r1, [pc, #544]	; (800b828 <http_send_data_ssi+0x248>)
 800b606:	4889      	ldr	r0, [pc, #548]	; (800b82c <http_send_data_ssi+0x24c>)
 800b608:	f00b ff0a 	bl	8017420 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b612:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	f240 82c5 	bls.w	800bbac <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b630:	4293      	cmp	r3, r2
 800b632:	dc06      	bgt.n	800b642 <http_send_data_ssi+0x62>
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	b29b      	uxth	r3, r3
 800b640:	e001      	b.n	800b646 <http_send_data_ssi+0x66>
 800b642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b646:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	6999      	ldr	r1, [r3, #24]
 800b64c:	f107 020e 	add.w	r2, r7, #14
 800b650:	2300      	movs	r3, #0
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7ff fb5c 	bl	800ad10 <http_write>
 800b658:	4603      	mov	r3, r0
 800b65a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b65c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10d      	bne.n	800b680 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800b664:	2301      	movs	r3, #1
 800b666:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	89fa      	ldrh	r2, [r7, #14]
 800b66e:	441a      	add	r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	89fa      	ldrh	r2, [r7, #14]
 800b67a:	1a9a      	subs	r2, r3, r2
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b686:	2b00      	cmp	r3, #0
 800b688:	f040 8290 	bne.w	800bbac <http_send_data_ssi+0x5cc>
      return data_to_send;
 800b68c:	7dbb      	ldrb	r3, [r7, #22]
 800b68e:	e2d6      	b.n	800bc3e <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800b690:	89fb      	ldrh	r3, [r7, #14]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <http_send_data_ssi+0xba>
      return data_to_send;
 800b696:	7dbb      	ldrb	r3, [r7, #22]
 800b698:	e2d1      	b.n	800bc3e <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800b6a0:	2b04      	cmp	r3, #4
 800b6a2:	f200 8282 	bhi.w	800bbaa <http_send_data_ssi+0x5ca>
 800b6a6:	a201      	add	r2, pc, #4	; (adr r2, 800b6ac <http_send_data_ssi+0xcc>)
 800b6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ac:	0800b6c1 	.word	0x0800b6c1
 800b6b0:	0800b71b 	.word	0x0800b71b
 800b6b4:	0800b78d 	.word	0x0800b78d
 800b6b8:	0800b8d5 	.word	0x0800b8d5
 800b6bc:	0800ba4b 	.word	0x0800ba4b
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	757b      	strb	r3, [r7, #21]
 800b6c4:	e01b      	b.n	800b6fe <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	781a      	ldrb	r2, [r3, #0]
 800b6cc:	7d7b      	ldrb	r3, [r7, #21]
 800b6ce:	4958      	ldr	r1, [pc, #352]	; (800b830 <http_send_data_ssi+0x250>)
 800b6d0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d10e      	bne.n	800b6f8 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	7d7a      	ldrb	r2, [r7, #21]
 800b6de:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            ssi->tag_index = 1;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800b6f6:	e005      	b.n	800b704 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b6f8:	7d7b      	ldrb	r3, [r7, #21]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	757b      	strb	r3, [r7, #21]
 800b6fe:	7d7b      	ldrb	r3, [r7, #21]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d9e0      	bls.n	800b6c6 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	1e5a      	subs	r2, r3, #1
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	601a      	str	r2, [r3, #0]
        break;
 800b718:	e248      	b.n	800bbac <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	7d9b      	ldrb	r3, [r3, #22]
 800b71e:	461a      	mov	r2, r3
 800b720:	4b43      	ldr	r3, [pc, #268]	; (800b830 <http_send_data_ssi+0x250>)
 800b722:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	8a12      	ldrh	r2, [r2, #16]
 800b72a:	4413      	add	r3, r2
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d107      	bne.n	800b742 <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	2200      	movs	r2, #0
 800b736:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	2202      	movs	r2, #2
 800b73c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800b740:	e234      	b.n	800bbac <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	781a      	ldrb	r2, [r3, #0]
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	7d9b      	ldrb	r3, [r3, #22]
 800b74c:	4619      	mov	r1, r3
 800b74e:	4b38      	ldr	r3, [pc, #224]	; (800b830 <http_send_data_ssi+0x250>)
 800b750:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800b754:	6939      	ldr	r1, [r7, #16]
 800b756:	8a09      	ldrh	r1, [r1, #16]
 800b758:	440b      	add	r3, r1
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d106      	bne.n	800b76e <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	8a1b      	ldrh	r3, [r3, #16]
 800b764:	3301      	adds	r3, #1
 800b766:	b29a      	uxth	r2, r3
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	821a      	strh	r2, [r3, #16]
 800b76c:	e003      	b.n	800b776 <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	1e5a      	subs	r2, r3, #1
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	1c5a      	adds	r2, r3, #1
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	601a      	str	r2, [r3, #0]
        }
        break;
 800b78a:	e20f      	b.n	800bbac <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	8a1b      	ldrh	r3, [r3, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d11e      	bne.n	800b7d2 <http_send_data_ssi+0x1f2>
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2b20      	cmp	r3, #32
 800b79c:	d00e      	beq.n	800b7bc <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	d009      	beq.n	800b7bc <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	2b0a      	cmp	r3, #10
 800b7b0:	d004      	beq.n	800b7bc <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b7b8:	2b0d      	cmp	r3, #13
 800b7ba:	d10a      	bne.n	800b7d2 <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	1e5a      	subs	r2, r3, #1
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	601a      	str	r2, [r3, #0]
          break;
 800b7d0:	e1ec      	b.n	800bbac <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	781a      	ldrb	r2, [r3, #0]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	7d9b      	ldrb	r3, [r3, #22]
 800b7dc:	4914      	ldr	r1, [pc, #80]	; (800b830 <http_send_data_ssi+0x250>)
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	440b      	add	r3, r1
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d013      	beq.n	800b812 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b7f0:	2b20      	cmp	r3, #32
 800b7f2:	d00e      	beq.n	800b812 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b09      	cmp	r3, #9
 800b7fc:	d009      	beq.n	800b812 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b804:	2b0a      	cmp	r3, #10
 800b806:	d004      	beq.n	800b812 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	2b0d      	cmp	r3, #13
 800b810:	d13f      	bne.n	800b892 <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	8a1b      	ldrh	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10c      	bne.n	800b834 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
          if (ssi->tag_index == 0) {
 800b822:	e04c      	b.n	800b8be <http_send_data_ssi+0x2de>
 800b824:	08019a34 	.word	0x08019a34
 800b828:	08019ab0 	.word	0x08019ab0
 800b82c:	08019a7c 	.word	0x08019a7c
 800b830:	0801edbc 	.word	0x0801edbc
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	2203      	movs	r2, #3
 800b838:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	8a1b      	ldrh	r3, [r3, #16]
 800b840:	2bff      	cmp	r3, #255	; 0xff
 800b842:	d906      	bls.n	800b852 <http_send_data_ssi+0x272>
 800b844:	4b92      	ldr	r3, [pc, #584]	; (800ba90 <http_send_data_ssi+0x4b0>)
 800b846:	f240 523a 	movw	r2, #1338	; 0x53a
 800b84a:	4992      	ldr	r1, [pc, #584]	; (800ba94 <http_send_data_ssi+0x4b4>)
 800b84c:	4892      	ldr	r0, [pc, #584]	; (800ba98 <http_send_data_ssi+0x4b8>)
 800b84e:	f00b fde7 	bl	8017420 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	8a1b      	ldrh	r3, [r3, #16]
 800b856:	b2da      	uxtb	r2, r3
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	8a1b      	ldrh	r3, [r3, #16]
 800b860:	461a      	mov	r2, r3
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	4413      	add	r3, r2
 800b866:	2200      	movs	r2, #0
 800b868:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	781a      	ldrb	r2, [r3, #0]
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	7d9b      	ldrb	r3, [r3, #22]
 800b874:	4989      	ldr	r1, [pc, #548]	; (800ba9c <http_send_data_ssi+0x4bc>)
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	440b      	add	r3, r1
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d103      	bne.n	800b88a <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	2201      	movs	r2, #1
 800b886:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800b888:	e019      	b.n	800b8be <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2200      	movs	r2, #0
 800b88e:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800b890:	e015      	b.n	800b8be <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	8a1b      	ldrh	r3, [r3, #16]
 800b896:	2b0f      	cmp	r3, #15
 800b898:	d80d      	bhi.n	800b8b6 <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	8a1b      	ldrh	r3, [r3, #16]
 800b8a2:	1c59      	adds	r1, r3, #1
 800b8a4:	b288      	uxth	r0, r1
 800b8a6:	6939      	ldr	r1, [r7, #16]
 800b8a8:	8208      	strh	r0, [r1, #16]
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	7812      	ldrb	r2, [r2, #0]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	440b      	add	r3, r1
 800b8b2:	761a      	strb	r2, [r3, #24]
 800b8b4:	e003      	b.n	800b8be <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	1e5a      	subs	r2, r3, #1
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	1c5a      	adds	r2, r3, #1
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	601a      	str	r2, [r3, #0]

        break;
 800b8d2:	e16b      	b.n	800bbac <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	8a1b      	ldrh	r3, [r3, #16]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d11e      	bne.n	800b91a <http_send_data_ssi+0x33a>
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	2b20      	cmp	r3, #32
 800b8e4:	d00e      	beq.n	800b904 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b8ec:	2b09      	cmp	r3, #9
 800b8ee:	d009      	beq.n	800b904 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	2b0a      	cmp	r3, #10
 800b8f8:	d004      	beq.n	800b904 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b900:	2b0d      	cmp	r3, #13
 800b902:	d10a      	bne.n	800b91a <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	601a      	str	r2, [r3, #0]
          break;
 800b918:	e148      	b.n	800bbac <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	781a      	ldrb	r2, [r3, #0]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	7d9b      	ldrb	r3, [r3, #22]
 800b924:	495d      	ldr	r1, [pc, #372]	; (800ba9c <http_send_data_ssi+0x4bc>)
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	440b      	add	r3, r1
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	6939      	ldr	r1, [r7, #16]
 800b92e:	8a09      	ldrh	r1, [r1, #16]
 800b930:	440b      	add	r3, r1
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	429a      	cmp	r2, r3
 800b936:	d179      	bne.n	800ba2c <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	1e5a      	subs	r2, r3, #1
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	8a1b      	ldrh	r3, [r3, #16]
 800b950:	3301      	adds	r3, #1
 800b952:	b29a      	uxth	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	7d9b      	ldrb	r3, [r3, #22]
 800b95c:	4a4f      	ldr	r2, [pc, #316]	; (800ba9c <http_send_data_ssi+0x4bc>)
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	4413      	add	r3, r2
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	8a12      	ldrh	r2, [r2, #16]
 800b968:	4413      	add	r3, r2
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 811d 	bne.w	800bbac <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	2200      	movs	r2, #0
 800b976:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800b978:	6838      	ldr	r0, [r7, #0]
 800b97a:	f7ff faff 	bl	800af7c <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	2200      	movs	r2, #0
 800b982:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	2204      	movs	r2, #4
 800b988:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            ssi->tag_end = ssi->parsed;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	689a      	ldr	r2, [r3, #8]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	f240 8101 	bls.w	800bbac <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	dc06      	bgt.n	800b9ca <http_send_data_ssi+0x3ea>
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	e001      	b.n	800b9ce <http_send_data_ssi+0x3ee>
 800b9ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9ce:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	6999      	ldr	r1, [r3, #24]
 800b9d4:	f107 020e 	add.w	r2, r7, #14
 800b9d8:	2300      	movs	r3, #0
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff f998 	bl	800ad10 <http_write>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800b9e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f040 80df 	bne.w	800bbac <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d809      	bhi.n	800ba12 <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	689a      	ldr	r2, [r3, #8]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	89fb      	ldrh	r3, [r7, #14]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	89fa      	ldrh	r2, [r7, #14]
 800ba18:	441a      	add	r2, r3
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba22:	89fa      	ldrh	r2, [r7, #14]
 800ba24:	1a9a      	subs	r2, r3, r2
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	625a      	str	r2, [r3, #36]	; 0x24
 800ba2a:	e0bf      	b.n	800bbac <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        }
        break;
 800ba48:	e0b0      	b.n	800bbac <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	689a      	ldr	r2, [r3, #8]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d95c      	bls.n	800bb10 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d206      	bcs.n	800ba70 <http_send_data_ssi+0x490>
 800ba62:	4b0b      	ldr	r3, [pc, #44]	; (800ba90 <http_send_data_ssi+0x4b0>)
 800ba64:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800ba68:	490d      	ldr	r1, [pc, #52]	; (800baa0 <http_send_data_ssi+0x4c0>)
 800ba6a:	480b      	ldr	r0, [pc, #44]	; (800ba98 <http_send_data_ssi+0x4b8>)
 800ba6c:	f00b fcd8 	bl	8017420 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	699b      	ldr	r3, [r3, #24]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	dc10      	bgt.n	800baa4 <http_send_data_ssi+0x4c4>
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	e00b      	b.n	800baa8 <http_send_data_ssi+0x4c8>
 800ba90:	08019a34 	.word	0x08019a34
 800ba94:	08019b64 	.word	0x08019b64
 800ba98:	08019a7c 	.word	0x08019a7c
 800ba9c:	0801edbc 	.word	0x0801edbc
 800baa0:	08019b7c 	.word	0x08019b7c
 800baa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800baa8:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800baaa:	89fb      	ldrh	r3, [r7, #14]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00a      	beq.n	800bac6 <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	6999      	ldr	r1, [r3, #24]
 800bab4:	f107 020e 	add.w	r2, r7, #14
 800bab8:	2300      	movs	r3, #0
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7ff f928 	bl	800ad10 <http_write>
 800bac0:	4603      	mov	r3, r0
 800bac2:	75fb      	strb	r3, [r7, #23]
 800bac4:	e001      	b.n	800baca <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800baca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d16c      	bne.n	800bbac <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 800bad2:	2301      	movs	r3, #1
 800bad4:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	685a      	ldr	r2, [r3, #4]
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d809      	bhi.n	800baf6 <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	689a      	ldr	r2, [r3, #8]
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	b29a      	uxth	r2, r3
 800baee:	89fb      	ldrh	r3, [r7, #14]
 800baf0:	4413      	add	r3, r2
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	89fa      	ldrh	r2, [r7, #14]
 800bafc:	441a      	add	r2, r3
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	89fa      	ldrh	r2, [r7, #14]
 800bb08:	1a9a      	subs	r2, r3, r2
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	625a      	str	r2, [r3, #36]	; 0x24
 800bb0e:	e04d      	b.n	800bbac <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	8a1a      	ldrh	r2, [r3, #16]
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	8a5b      	ldrh	r3, [r3, #18]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d30b      	bcc.n	800bb34 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	8a9b      	ldrh	r3, [r3, #20]
 800bb20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d005      	beq.n	800bb34 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 800bb2e:	6838      	ldr	r0, [r7, #0]
 800bb30:	f7ff fa24 	bl	800af7c <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	8a1a      	ldrh	r2, [r3, #16]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	8a5b      	ldrh	r3, [r3, #18]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d222      	bcs.n	800bb86 <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	8a5a      	ldrh	r2, [r3, #18]
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	8a1b      	ldrh	r3, [r3, #16]
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	8a1b      	ldrh	r3, [r3, #16]
 800bb52:	3328      	adds	r3, #40	; 0x28
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	4413      	add	r3, r2
 800bb58:	1c59      	adds	r1, r3, #1
 800bb5a:	f107 020e 	add.w	r2, r7, #14
 800bb5e:	2301      	movs	r3, #1
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff f8d5 	bl	800ad10 <http_write>
 800bb66:	4603      	mov	r3, r0
 800bb68:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800bb6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d11c      	bne.n	800bbac <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 800bb72:	2301      	movs	r3, #1
 800bb74:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	8a1a      	ldrh	r2, [r3, #16]
 800bb7a:	89fb      	ldrh	r3, [r7, #14]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	821a      	strh	r2, [r3, #16]
 800bb84:	e012      	b.n	800bbac <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	8a9b      	ldrh	r3, [r3, #20]
 800bb8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d10c      	bne.n	800bbac <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2200      	movs	r2, #0
 800bb96:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	689a      	ldr	r2, [r3, #8]
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800bba8:	e000      	b.n	800bbac <http_send_data_ssi+0x5cc>
        default:
          break;
 800bbaa:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800bbb2:	2b04      	cmp	r3, #4
 800bbb4:	d003      	beq.n	800bbbe <http_send_data_ssi+0x5de>
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d004      	beq.n	800bbc8 <http_send_data_ssi+0x5e8>
 800bbbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f43f ad64 	beq.w	800b690 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d034      	beq.n	800bc3c <http_send_data_ssi+0x65c>
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d92e      	bls.n	800bc3c <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	699b      	ldr	r3, [r3, #24]
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bbec:	4293      	cmp	r3, r2
 800bbee:	dc06      	bgt.n	800bbfe <http_send_data_ssi+0x61e>
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	e001      	b.n	800bc02 <http_send_data_ssi+0x622>
 800bbfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc02:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	6999      	ldr	r1, [r3, #24]
 800bc08:	f107 020e 	add.w	r2, r7, #14
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff f87e 	bl	800ad10 <http_write>
 800bc14:	4603      	mov	r3, r0
 800bc16:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800bc18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10d      	bne.n	800bc3c <http_send_data_ssi+0x65c>
      data_to_send = 1;
 800bc20:	2301      	movs	r3, #1
 800bc22:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	89fa      	ldrh	r2, [r7, #14]
 800bc2a:	441a      	add	r2, r3
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	89fa      	ldrh	r2, [r7, #14]
 800bc36:	1a9a      	subs	r2, r3, r2
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800bc3c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop

0800bc48 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800bc52:	2300      	movs	r3, #0
 800bc54:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <http_send+0x18>
    return 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	e048      	b.n	800bcf2 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	d812      	bhi.n	800bc90 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff fb7d 	bl	800b36c <http_send_headers>
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d007      	beq.n	800bc8c <http_send+0x44>
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d006      	beq.n	800bc90 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800bc88:	2b04      	cmp	r3, #4
 800bc8a:	d801      	bhi.n	800bc90 <http_send+0x48>
      return data_to_send;
 800bc8c:	7bfb      	ldrb	r3, [r7, #15]
 800bc8e:	e030      	b.n	800bcf2 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d108      	bne.n	800bcaa <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800bc98:	6839      	ldr	r1, [r7, #0]
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7ff fc3a 	bl	800b514 <http_check_eof>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d101      	bne.n	800bcaa <http_send+0x62>
      return 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	e023      	b.n	800bcf2 <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d006      	beq.n	800bcc0 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7ff fc93 	bl	800b5e0 <http_send_data_ssi>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73fb      	strb	r3, [r7, #15]
 800bcbe:	e005      	b.n	800bccc <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff fc56 	bl	800b574 <http_send_data_nonssi>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10d      	bne.n	800bcf0 <http_send+0xa8>
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe ff85 	bl	800abe8 <fs_bytes_left>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dc05      	bgt.n	800bcf0 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff f8dd 	bl	800aea6 <http_eof>
    return 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	e000      	b.n	800bcf2 <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	4a1c      	ldr	r2, [pc, #112]	; (800bd7c <http_get_404_file+0x80>)
 800bd0a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4619      	mov	r1, r3
 800bd14:	4610      	mov	r0, r2
 800bd16:	f7fe ff1f 	bl	800ab58 <fs_open>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bd1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d024      	beq.n	800bd70 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	4a15      	ldr	r2, [pc, #84]	; (800bd80 <http_get_404_file+0x84>)
 800bd2a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4619      	mov	r1, r3
 800bd34:	4610      	mov	r0, r2
 800bd36:	f7fe ff0f 	bl	800ab58 <fs_open>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bd3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d014      	beq.n	800bd70 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	4a0e      	ldr	r2, [pc, #56]	; (800bd84 <http_get_404_file+0x88>)
 800bd4a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4619      	mov	r1, r3
 800bd54:	4610      	mov	r0, r2
 800bd56:	f7fe feff 	bl	800ab58 <fs_open>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800bd5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
        return NULL;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	e000      	b.n	800bd72 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800bd70:	687b      	ldr	r3, [r7, #4]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	08019b94 	.word	0x08019b94
 800bd80:	08019ba0 	.word	0x08019ba0
 800bd84:	08019bac 	.word	0x08019bac

0800bd88 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800bd90:	4b08      	ldr	r3, [pc, #32]	; (800bdb4 <http_handle_post_finished+0x2c>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800bd96:	223f      	movs	r2, #63	; 0x3f
 800bd98:	4906      	ldr	r1, [pc, #24]	; (800bdb4 <http_handle_post_finished+0x2c>)
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7f5 f820 	bl	8000de0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800bda0:	2200      	movs	r2, #0
 800bda2:	4904      	ldr	r1, [pc, #16]	; (800bdb4 <http_handle_post_finished+0x2c>)
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 faab 	bl	800c300 <http_find_file>
 800bdaa:	4603      	mov	r3, r0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	20001980 	.word	0x20001980

0800bdb8 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d014      	beq.n	800bdf2 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	8912      	ldrh	r2, [r2, #8]
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d204      	bcs.n	800bde0 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800bdde:	e008      	b.n	800bdf2 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	8912      	ldrh	r2, [r2, #8]
 800bdea:	1a9a      	subs	r2, r3, r2
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d006      	beq.n	800be06 <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7f4 ffc0 	bl	8000d80 <httpd_post_receive_data>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]
 800be04:	e001      	b.n	800be0a <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800be0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d003      	beq.n	800be1a <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800be20:	2b00      	cmp	r3, #0
 800be22:	d104      	bne.n	800be2e <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff ffaf 	bl	800bd88 <http_handle_post_finished>
 800be2a:	4603      	mov	r3, r0
 800be2c:	e000      	b.n	800be30 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b092      	sub	sp, #72	; 0x48
 800be3c:	af04      	add	r7, sp, #16
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800be46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be48:	1c58      	adds	r0, r3, #1
 800be4a:	887a      	ldrh	r2, [r7, #2]
 800be4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be4e:	1c59      	adds	r1, r3, #1
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	1acb      	subs	r3, r1, r3
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	461a      	mov	r2, r3
 800be58:	4965      	ldr	r1, [pc, #404]	; (800bff0 <http_post_request+0x1b8>)
 800be5a:	f000 fe6f 	bl	800cb3c <lwip_strnstr>
 800be5e:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 80be 	beq.w	800bfe4 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800be68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be6a:	1c58      	adds	r0, r3, #1
 800be6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be6e:	3301      	adds	r3, #1
 800be70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be72:	1ad3      	subs	r3, r2, r3
 800be74:	461a      	mov	r2, r3
 800be76:	495f      	ldr	r1, [pc, #380]	; (800bff4 <http_post_request+0x1bc>)
 800be78:	f000 fe60 	bl	800cb3c <lwip_strnstr>
 800be7c:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 80ac 	beq.w	800bfde <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	3310      	adds	r3, #16
 800be8a:	220a      	movs	r2, #10
 800be8c:	495a      	ldr	r1, [pc, #360]	; (800bff8 <http_post_request+0x1c0>)
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 fe54 	bl	800cb3c <lwip_strnstr>
 800be94:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f000 80a0 	beq.w	800bfde <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	3310      	adds	r3, #16
 800bea2:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800bea4:	69f8      	ldr	r0, [r7, #28]
 800bea6:	f00b fa55 	bl	8017354 <atoi>
 800beaa:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800beac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10b      	bne.n	800beca <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	2b30      	cmp	r3, #48	; 0x30
 800beb8:	d104      	bne.n	800bec4 <http_post_request+0x8c>
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	3301      	adds	r3, #1
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	2b0d      	cmp	r3, #13
 800bec2:	d002      	beq.n	800beca <http_post_request+0x92>
            content_len = -1;
 800bec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bec8:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800beca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800becc:	2b00      	cmp	r3, #0
 800bece:	f2c0 8083 	blt.w	800bfd8 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800bed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bed4:	3301      	adds	r3, #1
 800bed6:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800bed8:	887a      	ldrh	r2, [r7, #2]
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	1d19      	adds	r1, r3, #4
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	1acb      	subs	r3, r1, r3
 800bee2:	429a      	cmp	r2, r3
 800bee4:	db05      	blt.n	800bef2 <http_post_request+0xba>
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	1d1a      	adds	r2, r3, #4
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	b29b      	uxth	r3, r3
 800bef0:	e000      	b.n	800bef4 <http_post_request+0xbc>
 800bef2:	887b      	ldrh	r3, [r7, #2]
 800bef4:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800bef6:	887a      	ldrh	r2, [r7, #2]
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	1d19      	adds	r1, r3, #4
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	1acb      	subs	r3, r1, r3
 800bf00:	429a      	cmp	r2, r3
 800bf02:	db05      	blt.n	800bf10 <http_post_request+0xd8>
 800bf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf06:	1d1a      	adds	r2, r3, #4
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	e000      	b.n	800bf12 <http_post_request+0xda>
 800bf10:	887b      	ldrh	r3, [r7, #2]
 800bf12:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800bf14:	2301      	movs	r3, #1
 800bf16:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800bf18:	4b38      	ldr	r3, [pc, #224]	; (800bffc <http_post_request+0x1c4>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800bf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf20:	2200      	movs	r2, #0
 800bf22:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800bf24:	8aba      	ldrh	r2, [r7, #20]
 800bf26:	f107 0312 	add.w	r3, r7, #18
 800bf2a:	9303      	str	r3, [sp, #12]
 800bf2c:	233f      	movs	r3, #63	; 0x3f
 800bf2e:	9302      	str	r3, [sp, #8]
 800bf30:	4b32      	ldr	r3, [pc, #200]	; (800bffc <http_post_request+0x1c4>)
 800bf32:	9301      	str	r3, [sp, #4]
 800bf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	69ba      	ldr	r2, [r7, #24]
 800bf3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf3e:	68b8      	ldr	r0, [r7, #8]
 800bf40:	f7f4 fef2 	bl	8000d28 <httpd_post_begin>
 800bf44:	4603      	mov	r3, r0
 800bf46:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800bf48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d13c      	bne.n	800bfca <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800bf54:	8afb      	ldrh	r3, [r7, #22]
 800bf56:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800bf58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800bf60:	e007      	b.n	800bf72 <http_post_request+0x13a>
              start_offset -= q->len;
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	895b      	ldrh	r3, [r3, #10]
 800bf66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d004      	beq.n	800bf82 <http_post_request+0x14a>
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	895b      	ldrh	r3, [r3, #10]
 800bf7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d2ef      	bcs.n	800bf62 <http_post_request+0x12a>
            }
            if (q != NULL) {
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00d      	beq.n	800bfa4 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800bf88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf8e:	f002 f8b3 	bl	800e0f8 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800bf92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf94:	f002 f9d6 	bl	800e344 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800bf98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf9a:	68b8      	ldr	r0, [r7, #8]
 800bf9c:	f7ff ff0c 	bl	800bdb8 <http_post_rxpbuf>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	e021      	b.n	800bfe8 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800bfae:	2241      	movs	r2, #65	; 0x41
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f001 fe42 	bl	800dc3c <pbuf_alloc>
 800bfb8:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800bfba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfbc:	68b8      	ldr	r0, [r7, #8]
 800bfbe:	f7ff fefb 	bl	800bdb8 <http_post_rxpbuf>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	e010      	b.n	800bfe8 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e00e      	b.n	800bfe8 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800bfca:	2200      	movs	r2, #0
 800bfcc:	490b      	ldr	r1, [pc, #44]	; (800bffc <http_post_request+0x1c4>)
 800bfce:	68b8      	ldr	r0, [r7, #8]
 800bfd0:	f000 f996 	bl	800c300 <http_find_file>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	e007      	b.n	800bfe8 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800bfd8:	f06f 030f 	mvn.w	r3, #15
 800bfdc:	e004      	b.n	800bfe8 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800bfde:	f06f 030f 	mvn.w	r3, #15
 800bfe2:	e001      	b.n	800bfe8 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800bfe4:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3738      	adds	r7, #56	; 0x38
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	08019bb8 	.word	0x08019bb8
 800bff4:	08019644 	.word	0x08019644
 800bff8:	08019b28 	.word	0x08019b28
 800bffc:	20001980 	.word	0x20001980

0800c000 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b092      	sub	sp, #72	; 0x48
 800c004:	af02      	add	r7, sp, #8
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <http_parse_request+0x24>
 800c016:	4b87      	ldr	r3, [pc, #540]	; (800c234 <http_parse_request+0x234>)
 800c018:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800c01c:	4986      	ldr	r1, [pc, #536]	; (800c238 <http_parse_request+0x238>)
 800c01e:	4887      	ldr	r0, [pc, #540]	; (800c23c <http_parse_request+0x23c>)
 800c020:	f00b f9fe 	bl	8017420 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d106      	bne.n	800c038 <http_parse_request+0x38>
 800c02a:	4b82      	ldr	r3, [pc, #520]	; (800c234 <http_parse_request+0x234>)
 800c02c:	f240 72af 	movw	r2, #1967	; 0x7af
 800c030:	4983      	ldr	r1, [pc, #524]	; (800c240 <http_parse_request+0x240>)
 800c032:	4882      	ldr	r0, [pc, #520]	; (800c23c <http_parse_request+0x23c>)
 800c034:	f00b f9f4 	bl	8017420 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	695b      	ldr	r3, [r3, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d103      	bne.n	800c048 <http_parse_request+0x48>
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	699b      	ldr	r3, [r3, #24]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800c048:	f06f 0307 	mvn.w	r3, #7
 800c04c:	e0ed      	b.n	800c22a <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	6a1b      	ldr	r3, [r3, #32]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d103      	bne.n	800c05e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c05a:	621a      	str	r2, [r3, #32]
 800c05c:	e005      	b.n	800c06a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c064:	4618      	mov	r0, r3
 800c066:	f002 f98f 	bl	800e388 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800c06a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c06c:	f002 f96a 	bl	800e344 <pbuf_ref>

  if (hs->req->next != NULL) {
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d012      	beq.n	800c0a0 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	891b      	ldrh	r3, [r3, #8]
 800c080:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c084:	4293      	cmp	r3, r2
 800c086:	bf28      	it	cs
 800c088:	4613      	movcs	r3, r2
 800c08a:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	6a18      	ldr	r0, [r3, #32]
 800c090:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c092:	2300      	movs	r3, #0
 800c094:	496b      	ldr	r1, [pc, #428]	; (800c244 <http_parse_request+0x244>)
 800c096:	f002 fa9f 	bl	800e5d8 <pbuf_copy_partial>
    data = httpd_req_buf;
 800c09a:	4b6a      	ldr	r3, [pc, #424]	; (800c244 <http_parse_request+0x244>)
 800c09c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c09e:	e005      	b.n	800c0ac <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a8:	895b      	ldrh	r3, [r3, #10]
 800c0aa:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800c0ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c0ae:	2b06      	cmp	r3, #6
 800c0b0:	f240 80a1 	bls.w	800c1f6 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800c0b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	4963      	ldr	r1, [pc, #396]	; (800c248 <http_parse_request+0x248>)
 800c0ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c0bc:	f000 fd3e 	bl	800cb3c <lwip_strnstr>
 800c0c0:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800c0c2:	6a3b      	ldr	r3, [r7, #32]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 8096 	beq.w	800c1f6 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800c0d2:	2204      	movs	r2, #4
 800c0d4:	495d      	ldr	r1, [pc, #372]	; (800c24c <http_parse_request+0x24c>)
 800c0d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c0d8:	f00b fae8 	bl	80176ac <strncmp>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d103      	bne.n	800c0ea <http_parse_request+0xea>
        sp1 = data + 3;
 800c0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e4:	3303      	adds	r3, #3
 800c0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0e8:	e014      	b.n	800c114 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800c0ea:	2205      	movs	r2, #5
 800c0ec:	4958      	ldr	r1, [pc, #352]	; (800c250 <http_parse_request+0x250>)
 800c0ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c0f0:	f00b fadc 	bl	80176ac <strncmp>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d105      	bne.n	800c106 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800c0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c100:	3304      	adds	r3, #4
 800c102:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c104:	e006      	b.n	800c114 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800c106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c108:	3304      	adds	r3, #4
 800c10a:	2200      	movs	r2, #0
 800c10c:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800c10e:	f06f 030f 	mvn.w	r3, #15
 800c112:	e08a      	b.n	800c22a <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800c114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c116:	1c5a      	adds	r2, r3, #1
 800c118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11a:	1ad3      	subs	r3, r2, r3
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800c124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c126:	3301      	adds	r3, #1
 800c128:	8bfa      	ldrh	r2, [r7, #30]
 800c12a:	494a      	ldr	r1, [pc, #296]	; (800c254 <http_parse_request+0x254>)
 800c12c:	4618      	mov	r0, r3
 800c12e:	f000 fd05 	bl	800cb3c <lwip_strnstr>
 800c132:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10c      	bne.n	800c154 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800c13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13c:	3301      	adds	r3, #1
 800c13e:	8bfa      	ldrh	r2, [r7, #30]
 800c140:	4941      	ldr	r1, [pc, #260]	; (800c248 <http_parse_request+0x248>)
 800c142:	4618      	mov	r0, r3
 800c144:	f000 fcfa 	bl	800cb3c <lwip_strnstr>
 800c148:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800c14a:	2301      	movs	r3, #1
 800c14c:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c150:	2b00      	cmp	r3, #0
 800c152:	d163      	bne.n	800c21c <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c156:	3301      	adds	r3, #1
 800c158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c15a:	1ad3      	subs	r3, r2, r3
 800c15c:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800c15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c160:	2b00      	cmp	r3, #0
 800c162:	d048      	beq.n	800c1f6 <http_parse_request+0x1f6>
 800c164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	429a      	cmp	r2, r3
 800c16a:	d944      	bls.n	800c1f6 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800c16c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c16e:	461a      	mov	r2, r3
 800c170:	4939      	ldr	r1, [pc, #228]	; (800c258 <http_parse_request+0x258>)
 800c172:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c174:	f000 fce2 	bl	800cb3c <lwip_strnstr>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d03b      	beq.n	800c1f6 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	3301      	adds	r3, #1
 800c182:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	2200      	movs	r2, #0
 800c188:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800c18a:	8bbb      	ldrh	r3, [r7, #28]
 800c18c:	69ba      	ldr	r2, [r7, #24]
 800c18e:	4413      	add	r3, r2
 800c190:	2200      	movs	r2, #0
 800c192:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800c194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c196:	2b00      	cmp	r3, #0
 800c198:	d026      	beq.n	800c1e8 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800c1a0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a4:	9301      	str	r3, [sp, #4]
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1ae:	68b9      	ldr	r1, [r7, #8]
 800c1b0:	6978      	ldr	r0, [r7, #20]
 800c1b2:	f7ff fe41 	bl	800be38 <http_post_request>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800c1ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00a      	beq.n	800c1d8 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800c1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c4:	2220      	movs	r2, #32
 800c1c6:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	2220      	movs	r2, #32
 800c1cc:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800c1ce:	8bbb      	ldrh	r3, [r7, #28]
 800c1d0:	69ba      	ldr	r2, [r7, #24]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	2220      	movs	r2, #32
 800c1d6:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800c1d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1dc:	f113 0f10 	cmn.w	r3, #16
 800c1e0:	d01e      	beq.n	800c220 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800c1e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1e6:	e020      	b.n	800c22a <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800c1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ea:	69b9      	ldr	r1, [r7, #24]
 800c1ec:	68b8      	ldr	r0, [r7, #8]
 800c1ee:	f000 f887 	bl	800c300 <http_find_file>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	e019      	b.n	800c22a <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f002 f88a 	bl	800e314 <pbuf_clen>
 800c200:	4603      	mov	r3, r0
 800c202:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	6a1b      	ldr	r3, [r3, #32]
 800c208:	891b      	ldrh	r3, [r3, #8]
 800c20a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c20e:	d209      	bcs.n	800c224 <http_parse_request+0x224>
 800c210:	8a3b      	ldrh	r3, [r7, #16]
 800c212:	2b05      	cmp	r3, #5
 800c214:	d806      	bhi.n	800c224 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800c216:	f06f 0304 	mvn.w	r3, #4
 800c21a:	e006      	b.n	800c22a <http_parse_request+0x22a>
          goto badrequest;
 800c21c:	bf00      	nop
 800c21e:	e002      	b.n	800c226 <http_parse_request+0x226>
              goto badrequest;
 800c220:	bf00      	nop
 800c222:	e000      	b.n	800c226 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800c224:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800c226:	f06f 030f 	mvn.w	r3, #15
  }
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3740      	adds	r7, #64	; 0x40
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	08019a34 	.word	0x08019a34
 800c238:	08019bc0 	.word	0x08019bc0
 800c23c:	08019a7c 	.word	0x08019a7c
 800c240:	08019aa4 	.word	0x08019aa4
 800c244:	20001580 	.word	0x20001580
 800c248:	08019b28 	.word	0x08019b28
 800c24c:	08019bcc 	.word	0x08019bcc
 800c250:	08019bd4 	.word	0x08019bd4
 800c254:	08019bdc 	.word	0x08019bdc
 800c258:	08019bb8 	.word	0x08019bb8

0800c25c <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d040      	beq.n	800c2f2 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800c270:	2300      	movs	r3, #0
 800c272:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800c274:	213f      	movs	r1, #63	; 0x3f
 800c276:	6838      	ldr	r0, [r7, #0]
 800c278:	f00b fa03 	bl	8017682 <strchr>
 800c27c:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d002      	beq.n	800c28a <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	613b      	str	r3, [r7, #16]
    ext = uri;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800c292:	212e      	movs	r1, #46	; 0x2e
 800c294:	6938      	ldr	r0, [r7, #16]
 800c296:	f00b f9f4 	bl	8017682 <strchr>
 800c29a:	6138      	str	r0, [r7, #16]
 800c29c:	e009      	b.n	800c2b2 <http_uri_is_ssi+0x56>
      ext = sub;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	617b      	str	r3, [r7, #20]
      sub++;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800c2a8:	212e      	movs	r1, #46	; 0x2e
 800c2aa:	6938      	ldr	r0, [r7, #16]
 800c2ac:	f00b f9e9 	bl	8017682 <strchr>
 800c2b0:	6138      	str	r0, [r7, #16]
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1f2      	bne.n	800c29e <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	61fb      	str	r3, [r7, #28]
 800c2bc:	e010      	b.n	800c2e0 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800c2be:	4a0f      	ldr	r2, [pc, #60]	; (800c2fc <http_uri_is_ssi+0xa0>)
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6978      	ldr	r0, [r7, #20]
 800c2ca:	f000 fc6d 	bl	800cba8 <lwip_stricmp>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d102      	bne.n	800c2da <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	76fb      	strb	r3, [r7, #27]
        break;
 800c2d8:	e005      	b.n	800c2e6 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	61fb      	str	r3, [r7, #28]
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	2b04      	cmp	r3, #4
 800c2e4:	d9eb      	bls.n	800c2be <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <http_uri_is_ssi+0x96>
      *param = '?';
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	223f      	movs	r2, #63	; 0x3f
 800c2f0:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800c2f2:	7efb      	ldrb	r3, [r7, #27]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3720      	adds	r7, #32
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	0801ed80 	.word	0x0801ed80

0800c300 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800c300:	b590      	push	{r4, r7, lr}
 800c302:	b093      	sub	sp, #76	; 0x4c
 800c304:	af02      	add	r7, sp, #8
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800c30c:	2300      	movs	r3, #0
 800c30e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800c310:	2300      	movs	r3, #0
 800c312:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800c314:	2300      	movs	r3, #0
 800c316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7f3 ff61 	bl	80001e4 <strlen>
 800c322:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c326:	2b00      	cmp	r3, #0
 800c328:	d072      	beq.n	800c410 <http_find_file+0x110>
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32e:	3b01      	subs	r3, #1
 800c330:	4413      	add	r3, r2
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	2b2f      	cmp	r3, #47	; 0x2f
 800c336:	d16b      	bne.n	800c410 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c338:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c33a:	4a80      	ldr	r2, [pc, #512]	; (800c53c <http_find_file+0x23c>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d102      	bne.n	800c346 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	2b01      	cmp	r3, #1
 800c344:	d164      	bne.n	800c410 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800c346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c348:	3b01      	subs	r3, #1
 800c34a:	2b3f      	cmp	r3, #63	; 0x3f
 800c34c:	bf28      	it	cs
 800c34e:	233f      	movcs	r3, #63	; 0x3f
 800c350:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00a      	beq.n	800c36e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	6a3a      	ldr	r2, [r7, #32]
 800c35c:	4619      	mov	r1, r3
 800c35e:	4877      	ldr	r0, [pc, #476]	; (800c53c <http_find_file+0x23c>)
 800c360:	f00b f82e 	bl	80173c0 <memcpy>
      http_uri_buf[copy_len] = 0;
 800c364:	4a75      	ldr	r2, [pc, #468]	; (800c53c <http_find_file+0x23c>)
 800c366:	6a3b      	ldr	r3, [r7, #32]
 800c368:	4413      	add	r3, r2
 800c36a:	2200      	movs	r2, #0
 800c36c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c36e:	2300      	movs	r3, #0
 800c370:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c372:	e04a      	b.n	800c40a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d028      	beq.n	800c3cc <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800c380:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d01e      	beq.n	800c3c6 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800c388:	4a6d      	ldr	r2, [pc, #436]	; (800c540 <http_find_file+0x240>)
 800c38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c390:	4618      	mov	r0, r3
 800c392:	f7f3 ff27 	bl	80001e4 <strlen>
 800c396:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800c398:	69ba      	ldr	r2, [r7, #24]
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	4293      	cmp	r3, r2
 800c39e:	bf28      	it	cs
 800c3a0:	4613      	movcs	r3, r2
 800c3a2:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	4a65      	ldr	r2, [pc, #404]	; (800c53c <http_find_file+0x23c>)
 800c3a8:	1898      	adds	r0, r3, r2
 800c3aa:	4a65      	ldr	r2, [pc, #404]	; (800c540 <http_find_file+0x240>)
 800c3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	f00b f803 	bl	80173c0 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800c3ba:	6a3a      	ldr	r2, [r7, #32]
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	4413      	add	r3, r2
 800c3c0:	4a5e      	ldr	r2, [pc, #376]	; (800c53c <http_find_file+0x23c>)
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800c3c6:	4b5d      	ldr	r3, [pc, #372]	; (800c53c <http_find_file+0x23c>)
 800c3c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3ca:	e004      	b.n	800c3d6 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800c3cc:	4a5c      	ldr	r2, [pc, #368]	; (800c540 <http_find_file+0x240>)
 800c3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3d4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fe fbbc 	bl	800ab58 <fs_open>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800c3e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10b      	bne.n	800c404 <http_find_file+0x104>
        uri = file_name;
 800c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ee:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800c3f4:	4a52      	ldr	r2, [pc, #328]	; (800c540 <http_find_file+0x240>)
 800c3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f8:	00db      	lsls	r3, r3, #3
 800c3fa:	4413      	add	r3, r2
 800c3fc:	791b      	ldrb	r3, [r3, #4]
 800c3fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800c402:	e005      	b.n	800c410 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c406:	3301      	adds	r3, #1
 800c408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40c:	2b04      	cmp	r3, #4
 800c40e:	d9b1      	bls.n	800c374 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	2b00      	cmp	r3, #0
 800c414:	d176      	bne.n	800c504 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	213f      	movs	r1, #63	; 0x3f
 800c41a:	4618      	mov	r0, r3
 800c41c:	f00b f931 	bl	8017682 <strchr>
 800c420:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800c422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c424:	2b00      	cmp	r3, #0
 800c426:	d005      	beq.n	800c434 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800c428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42a:	2200      	movs	r2, #0
 800c42c:	701a      	strb	r2, [r3, #0]
      params++;
 800c42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c430:	3301      	adds	r3, #1
 800c432:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800c434:	4b43      	ldr	r3, [pc, #268]	; (800c544 <http_find_file+0x244>)
 800c436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c43a:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800c43c:	4b42      	ldr	r3, [pc, #264]	; (800c548 <http_find_file+0x248>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d034      	beq.n	800c4ae <http_find_file+0x1ae>
 800c444:	4b41      	ldr	r3, [pc, #260]	; (800c54c <http_find_file+0x24c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d030      	beq.n	800c4ae <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800c44c:	2300      	movs	r3, #0
 800c44e:	633b      	str	r3, [r7, #48]	; 0x30
 800c450:	e028      	b.n	800c4a4 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800c452:	68b8      	ldr	r0, [r7, #8]
 800c454:	4b3d      	ldr	r3, [pc, #244]	; (800c54c <http_find_file+0x24c>)
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	4413      	add	r3, r2
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4619      	mov	r1, r3
 800c462:	f7f3 feb5 	bl	80001d0 <strcmp>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d118      	bne.n	800c49e <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800c46c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f7fe fd26 	bl	800aec0 <extract_uri_parameters>
 800c474:	4603      	mov	r3, r0
 800c476:	4a33      	ldr	r2, [pc, #204]	; (800c544 <http_find_file+0x244>)
 800c478:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800c47a:	4b34      	ldr	r3, [pc, #208]	; (800c54c <http_find_file+0x24c>)
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	00db      	lsls	r3, r3, #3
 800c482:	4413      	add	r3, r2
 800c484:	685c      	ldr	r4, [r3, #4]
 800c486:	4b2f      	ldr	r3, [pc, #188]	; (800c544 <http_find_file+0x244>)
 800c488:	6819      	ldr	r1, [r3, #0]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800c494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c496:	47a0      	blx	r4
 800c498:	4603      	mov	r3, r0
 800c49a:	60bb      	str	r3, [r7, #8]
          break;
 800c49c:	e007      	b.n	800c4ae <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	633b      	str	r3, [r7, #48]	; 0x30
 800c4a4:	4b28      	ldr	r3, [pc, #160]	; (800c548 <http_find_file+0x248>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	dbd1      	blt.n	800c452 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7fe fb4f 	bl	800ab58 <fs_open>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800c4be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d102      	bne.n	800c4cc <http_find_file+0x1cc>
      file = &hs->file_handle;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4ca:	e006      	b.n	800c4da <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800c4cc:	f107 0308 	add.w	r3, r7, #8
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f7ff fc12 	bl	800bcfc <http_get_404_file>
 800c4d8:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800c4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d011      	beq.n	800c504 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	7c1b      	ldrb	r3, [r3, #16]
 800c4e4:	f003 0308 	and.w	r3, r3, #8
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d003      	beq.n	800c4f4 <http_find_file+0x1f4>
        tag_check = 1;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c4f2:	e007      	b.n	800c504 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4fa:	f7ff feaf 	bl	800c25c <http_uri_is_ssi>
 800c4fe:	4603      	mov	r3, r0
 800c500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	2b00      	cmp	r3, #0
 800c508:	d106      	bne.n	800c518 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800c50a:	f107 0308 	add.w	r3, r7, #8
 800c50e:	4619      	mov	r1, r3
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f7ff fbf3 	bl	800bcfc <http_get_404_file>
 800c516:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	4613      	mov	r3, r2
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f000 f810 	bl	800c550 <http_init_file>
 800c530:	4603      	mov	r3, r0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3744      	adds	r7, #68	; 0x44
 800c536:	46bd      	mov	sp, r7
 800c538:	bd90      	pop	{r4, r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20001980 	.word	0x20001980
 800c540:	0801ed94 	.word	0x0801ed94
 800c544:	200019d4 	.word	0x200019d4
 800c548:	200019d0 	.word	0x200019d0
 800c54c:	200019cc 	.word	0x200019cc

0800c550 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
 800c55c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d06f      	beq.n	800c644 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d106      	bne.n	800c57a <http_init_file+0x2a>
 800c56c:	4b46      	ldr	r3, [pc, #280]	; (800c688 <http_init_file+0x138>)
 800c56e:	f640 120b 	movw	r2, #2315	; 0x90b
 800c572:	4946      	ldr	r1, [pc, #280]	; (800c68c <http_init_file+0x13c>)
 800c574:	4846      	ldr	r0, [pc, #280]	; (800c690 <http_init_file+0x140>)
 800c576:	f00a ff53 	bl	8017420 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800c57a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d01c      	beq.n	800c5bc <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800c582:	f7fe fb40 	bl	800ac06 <http_ssi_state_alloc>
 800c586:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d016      	beq.n	800c5bc <http_init_file+0x6c>
        ssi->tag_index = 0;
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	2200      	movs	r2, #0
 800c592:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        ssi->parsed = file->data;
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	69fa      	ldr	r2, [r7, #28]
 800c5ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	da06      	bge.n	800c5e0 <http_init_file+0x90>
 800c5d2:	4b2d      	ldr	r3, [pc, #180]	; (800c688 <http_init_file+0x138>)
 800c5d4:	f640 1234 	movw	r2, #2356	; 0x934
 800c5d8:	492e      	ldr	r1, [pc, #184]	; (800c694 <http_init_file+0x144>)
 800c5da:	482d      	ldr	r0, [pc, #180]	; (800c690 <http_init_file+0x140>)
 800c5dc:	f00a ff20 	bl	8017420 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d032      	beq.n	800c65e <http_init_file+0x10e>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	695b      	ldr	r3, [r3, #20]
 800c5fc:	7c1b      	ldrb	r3, [r3, #16]
 800c5fe:	f003 0301 	and.w	r3, r3, #1
 800c602:	2b00      	cmp	r3, #0
 800c604:	d02b      	beq.n	800c65e <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6998      	ldr	r0, [r3, #24]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60e:	461a      	mov	r2, r3
 800c610:	4921      	ldr	r1, [pc, #132]	; (800c698 <http_init_file+0x148>)
 800c612:	f000 fa93 	bl	800cb3c <lwip_strnstr>
 800c616:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d01f      	beq.n	800c65e <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	1d1a      	adds	r2, r3, #4
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	699a      	ldr	r2, [r3, #24]
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	441a      	add	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	1ad2      	subs	r2, r2, r3
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	625a      	str	r2, [r3, #36]	; 0x24
 800c642:	e00c      	b.n	800c65e <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d006      	beq.n	800c674 <http_init_file+0x124>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	695b      	ldr	r3, [r3, #20]
 800c66a:	7c1b      	ldrb	r3, [r3, #16]
 800c66c:	f003 0301 	and.w	r3, r3, #1
 800c670:	2b00      	cmp	r3, #0
 800c672:	d103      	bne.n	800c67c <http_init_file+0x12c>
    get_http_headers(hs, uri);
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f7fe fd4c 	bl	800b114 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3720      	adds	r7, #32
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	08019a34 	.word	0x08019a34
 800c68c:	08019be0 	.word	0x08019be0
 800c690:	08019a7c 	.word	0x08019a7c
 800c694:	08019bf4 	.word	0x08019bf4
 800c698:	08019bb8 	.word	0x08019bb8

0800c69c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d002      	beq.n	800c6b8 <http_err+0x1c>
    http_state_free(hs);
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f7fe fb1a 	bl	800acec <http_state_free>
  }
}
 800c6b8:	bf00      	nop
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b086      	sub	sp, #24
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d101      	bne.n	800c6dc <http_sent+0x1c>
    return ERR_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	e008      	b.n	800c6ee <http_sent+0x2e>
  }

  hs->retries = 0;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800c6e4:	6979      	ldr	r1, [r7, #20]
 800c6e6:	68b8      	ldr	r0, [r7, #8]
 800c6e8:	f7ff faae 	bl	800bc48 <http_send>

  return ERR_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b084      	sub	sp, #16
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d107      	bne.n	800c71a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800c70a:	2100      	movs	r1, #0
 800c70c:	6838      	ldr	r0, [r7, #0]
 800c70e:	f7fe fbbb 	bl	800ae88 <http_close_conn>
 800c712:	4603      	mov	r3, r0
 800c714:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800c716:	2300      	movs	r3, #0
 800c718:	e021      	b.n	800c75e <http_poll+0x68>
  } else {
    hs->retries++;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c720:	3301      	adds	r3, #1
 800c722:	b2da      	uxtb	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c730:	2b04      	cmp	r3, #4
 800c732:	d105      	bne.n	800c740 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800c734:	68f9      	ldr	r1, [r7, #12]
 800c736:	6838      	ldr	r0, [r7, #0]
 800c738:	f7fe fba6 	bl	800ae88 <http_close_conn>
      return ERR_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	e00e      	b.n	800c75e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	695b      	ldr	r3, [r3, #20]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d009      	beq.n	800c75c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800c748:	68f9      	ldr	r1, [r7, #12]
 800c74a:	6838      	ldr	r0, [r7, #0]
 800c74c:	f7ff fa7c 	bl	800bc48 <http_send>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d002      	beq.n	800c75c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800c756:	6838      	ldr	r0, [r7, #0]
 800c758:	f007 f8c2 	bl	80138e0 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
	...

0800c768 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800c77a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d105      	bne.n	800c78e <http_recv+0x26>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <http_recv+0x26>
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d111      	bne.n	800c7b2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d008      	beq.n	800c7a6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	891b      	ldrh	r3, [r3, #8]
 800c798:	4619      	mov	r1, r3
 800c79a:	68b8      	ldr	r0, [r7, #8]
 800c79c:	f002 fc94 	bl	800f0c8 <tcp_recved>
      pbuf_free(p);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f001 fd2f 	bl	800e204 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800c7a6:	6979      	ldr	r1, [r7, #20]
 800c7a8:	68b8      	ldr	r0, [r7, #8]
 800c7aa:	f7fe fb6d 	bl	800ae88 <http_close_conn>
    return ERR_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	e072      	b.n	800c898 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	891b      	ldrh	r3, [r3, #8]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	68b8      	ldr	r0, [r7, #8]
 800c7ba:	f002 fc85 	bl	800f0c8 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d012      	beq.n	800c7ee <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800c7d0:	6879      	ldr	r1, [r7, #4]
 800c7d2:	6978      	ldr	r0, [r7, #20]
 800c7d4:	f7ff faf0 	bl	800bdb8 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d103      	bne.n	800c7ea <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800c7e2:	6979      	ldr	r1, [r7, #20]
 800c7e4:	68b8      	ldr	r0, [r7, #8]
 800c7e6:	f7ff fa2f 	bl	800bc48 <http_send>
    }
    return ERR_OK;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	e054      	b.n	800c898 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d14c      	bne.n	800c890 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	6979      	ldr	r1, [r7, #20]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7ff fc00 	bl	800c000 <http_parse_request>
 800c800:	4603      	mov	r3, r0
 800c802:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800c804:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d015      	beq.n	800c838 <http_recv+0xd0>
 800c80c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c810:	f113 0f05 	cmn.w	r3, #5
 800c814:	d010      	beq.n	800c838 <http_recv+0xd0>
 800c816:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c81a:	f113 0f10 	cmn.w	r3, #16
 800c81e:	d00b      	beq.n	800c838 <http_recv+0xd0>
 800c820:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c824:	f113 0f08 	cmn.w	r3, #8
 800c828:	d006      	beq.n	800c838 <http_recv+0xd0>
 800c82a:	4b1d      	ldr	r3, [pc, #116]	; (800c8a0 <http_recv+0x138>)
 800c82c:	f640 2204 	movw	r2, #2564	; 0xa04
 800c830:	491c      	ldr	r1, [pc, #112]	; (800c8a4 <http_recv+0x13c>)
 800c832:	481d      	ldr	r0, [pc, #116]	; (800c8a8 <http_recv+0x140>)
 800c834:	f00a fdf4 	bl	8017420 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800c838:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c83c:	f113 0f05 	cmn.w	r3, #5
 800c840:	d00b      	beq.n	800c85a <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d007      	beq.n	800c85a <http_recv+0xf2>
          pbuf_free(hs->req);
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	6a1b      	ldr	r3, [r3, #32]
 800c84e:	4618      	mov	r0, r3
 800c850:	f001 fcd8 	bl	800e204 <pbuf_free>
          hs->req = NULL;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	2200      	movs	r2, #0
 800c858:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f001 fcd2 	bl	800e204 <pbuf_free>
      if (parsed == ERR_OK) {
 800c860:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d109      	bne.n	800c87c <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d111      	bne.n	800c896 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800c872:	6979      	ldr	r1, [r7, #20]
 800c874:	68b8      	ldr	r0, [r7, #8]
 800c876:	f7ff f9e7 	bl	800bc48 <http_send>
 800c87a:	e00c      	b.n	800c896 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800c87c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c880:	f113 0f10 	cmn.w	r3, #16
 800c884:	d107      	bne.n	800c896 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800c886:	6979      	ldr	r1, [r7, #20]
 800c888:	68b8      	ldr	r0, [r7, #8]
 800c88a:	f7fe fafd 	bl	800ae88 <http_close_conn>
 800c88e:	e002      	b.n	800c896 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f001 fcb7 	bl	800e204 <pbuf_free>
    }
  }
  return ERR_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	08019a34 	.word	0x08019a34
 800c8a4:	08019c14 	.word	0x08019c14
 800c8a8:	08019a7c 	.word	0x08019a7c

0800c8ac <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800c8ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d102      	bne.n	800c8c8 <http_accept+0x1c>
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d102      	bne.n	800c8ce <http_accept+0x22>
    return ERR_VAL;
 800c8c8:	f06f 0305 	mvn.w	r3, #5
 800c8cc:	e025      	b.n	800c91a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	68b8      	ldr	r0, [r7, #8]
 800c8d2:	f003 f8dd 	bl	800fa90 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800c8d6:	f7fe f9cb 	bl	800ac70 <http_state_alloc>
 800c8da:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d102      	bne.n	800c8e8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800c8e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8e6:	e018      	b.n	800c91a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800c8ee:	6979      	ldr	r1, [r7, #20]
 800c8f0:	68b8      	ldr	r0, [r7, #8]
 800c8f2:	f003 facd 	bl	800fe90 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800c8f6:	490b      	ldr	r1, [pc, #44]	; (800c924 <http_accept+0x78>)
 800c8f8:	68b8      	ldr	r0, [r7, #8]
 800c8fa:	f003 fadb 	bl	800feb4 <tcp_recv>
  altcp_err(pcb, http_err);
 800c8fe:	490a      	ldr	r1, [pc, #40]	; (800c928 <http_accept+0x7c>)
 800c900:	68b8      	ldr	r0, [r7, #8]
 800c902:	f003 fb1b 	bl	800ff3c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c906:	2204      	movs	r2, #4
 800c908:	4908      	ldr	r1, [pc, #32]	; (800c92c <http_accept+0x80>)
 800c90a:	68b8      	ldr	r0, [r7, #8]
 800c90c:	f003 fb50 	bl	800ffb0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800c910:	4907      	ldr	r1, [pc, #28]	; (800c930 <http_accept+0x84>)
 800c912:	68b8      	ldr	r0, [r7, #8]
 800c914:	f003 faf0 	bl	800fef8 <tcp_sent>

  return ERR_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3718      	adds	r7, #24
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	0800c769 	.word	0x0800c769
 800c928:	0800c69d 	.word	0x0800c69d
 800c92c:	0800c6f7 	.word	0x0800c6f7
 800c930:	0800c6c1 	.word	0x0800c6c1

0800c934 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d029      	beq.n	800c99a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c946:	2101      	movs	r1, #1
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f003 f8a1 	bl	800fa90 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800c94e:	887b      	ldrh	r3, [r7, #2]
 800c950:	461a      	mov	r2, r3
 800c952:	4914      	ldr	r1, [pc, #80]	; (800c9a4 <httpd_init_pcb+0x70>)
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f002 f9e9 	bl	800ed2c <tcp_bind>
 800c95a:	4603      	mov	r3, r0
 800c95c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800c95e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <httpd_init_pcb+0x40>
 800c966:	4b10      	ldr	r3, [pc, #64]	; (800c9a8 <httpd_init_pcb+0x74>)
 800c968:	f640 2257 	movw	r2, #2647	; 0xa57
 800c96c:	490f      	ldr	r1, [pc, #60]	; (800c9ac <httpd_init_pcb+0x78>)
 800c96e:	4810      	ldr	r0, [pc, #64]	; (800c9b0 <httpd_init_pcb+0x7c>)
 800c970:	f00a fd56 	bl	8017420 <iprintf>
    pcb = altcp_listen(pcb);
 800c974:	21ff      	movs	r1, #255	; 0xff
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f002 fa90 	bl	800ee9c <tcp_listen_with_backlog>
 800c97c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d106      	bne.n	800c992 <httpd_init_pcb+0x5e>
 800c984:	4b08      	ldr	r3, [pc, #32]	; (800c9a8 <httpd_init_pcb+0x74>)
 800c986:	f640 2259 	movw	r2, #2649	; 0xa59
 800c98a:	490a      	ldr	r1, [pc, #40]	; (800c9b4 <httpd_init_pcb+0x80>)
 800c98c:	4808      	ldr	r0, [pc, #32]	; (800c9b0 <httpd_init_pcb+0x7c>)
 800c98e:	f00a fd47 	bl	8017420 <iprintf>
    altcp_accept(pcb, http_accept);
 800c992:	4909      	ldr	r1, [pc, #36]	; (800c9b8 <httpd_init_pcb+0x84>)
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f003 faf3 	bl	800ff80 <tcp_accept>
  }
}
 800c99a:	bf00      	nop
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	0801ee9c 	.word	0x0801ee9c
 800c9a8:	08019a34 	.word	0x08019a34
 800c9ac:	08019c40 	.word	0x08019c40
 800c9b0:	08019a7c 	.word	0x08019a7c
 800c9b4:	08019c5c 	.word	0x08019c5c
 800c9b8:	0800c8ad 	.word	0x0800c8ad

0800c9bc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800c9c2:	202e      	movs	r0, #46	; 0x2e
 800c9c4:	f003 fa56 	bl	800fe74 <tcp_new_ip_type>
 800c9c8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d106      	bne.n	800c9de <httpd_init+0x22>
 800c9d0:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <httpd_init+0x34>)
 800c9d2:	f640 2272 	movw	r2, #2674	; 0xa72
 800c9d6:	4907      	ldr	r1, [pc, #28]	; (800c9f4 <httpd_init+0x38>)
 800c9d8:	4807      	ldr	r0, [pc, #28]	; (800c9f8 <httpd_init+0x3c>)
 800c9da:	f00a fd21 	bl	8017420 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800c9de:	2150      	movs	r1, #80	; 0x50
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff ffa7 	bl	800c934 <httpd_init_pcb>
}
 800c9e6:	bf00      	nop
 800c9e8:	3708      	adds	r7, #8
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	08019a34 	.word	0x08019a34
 800c9f4:	08019c7c 	.word	0x08019c7c
 800c9f8:	08019a7c 	.word	0x08019a7c

0800c9fc <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d106      	bne.n	800ca1c <http_set_ssi_handler+0x20>
 800ca0e:	4b14      	ldr	r3, [pc, #80]	; (800ca60 <http_set_ssi_handler+0x64>)
 800ca10:	f640 2297 	movw	r2, #2711	; 0xa97
 800ca14:	4913      	ldr	r1, [pc, #76]	; (800ca64 <http_set_ssi_handler+0x68>)
 800ca16:	4814      	ldr	r0, [pc, #80]	; (800ca68 <http_set_ssi_handler+0x6c>)
 800ca18:	f00a fd02 	bl	8017420 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800ca1c:	4a13      	ldr	r2, [pc, #76]	; (800ca6c <http_set_ssi_handler+0x70>)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d106      	bne.n	800ca36 <http_set_ssi_handler+0x3a>
 800ca28:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <http_set_ssi_handler+0x64>)
 800ca2a:	f640 229e 	movw	r2, #2718	; 0xa9e
 800ca2e:	4910      	ldr	r1, [pc, #64]	; (800ca70 <http_set_ssi_handler+0x74>)
 800ca30:	480d      	ldr	r0, [pc, #52]	; (800ca68 <http_set_ssi_handler+0x6c>)
 800ca32:	f00a fcf5 	bl	8017420 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dc06      	bgt.n	800ca4a <http_set_ssi_handler+0x4e>
 800ca3c:	4b08      	ldr	r3, [pc, #32]	; (800ca60 <http_set_ssi_handler+0x64>)
 800ca3e:	f640 229f 	movw	r2, #2719	; 0xa9f
 800ca42:	490c      	ldr	r1, [pc, #48]	; (800ca74 <http_set_ssi_handler+0x78>)
 800ca44:	4808      	ldr	r0, [pc, #32]	; (800ca68 <http_set_ssi_handler+0x6c>)
 800ca46:	f00a fceb 	bl	8017420 <iprintf>

  httpd_tags = tags;
 800ca4a:	4a0b      	ldr	r2, [pc, #44]	; (800ca78 <http_set_ssi_handler+0x7c>)
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800ca50:	4a0a      	ldr	r2, [pc, #40]	; (800ca7c <http_set_ssi_handler+0x80>)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800ca56:	bf00      	nop
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	08019a34 	.word	0x08019a34
 800ca64:	08019c98 	.word	0x08019c98
 800ca68:	08019a7c 	.word	0x08019a7c
 800ca6c:	200019c0 	.word	0x200019c0
 800ca70:	08019cb0 	.word	0x08019cb0
 800ca74:	08019cc0 	.word	0x08019cc0
 800ca78:	200019c8 	.word	0x200019c8
 800ca7c:	200019c4 	.word	0x200019c4

0800ca80 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <http_set_cgi_handlers+0x1e>
 800ca90:	4b0d      	ldr	r3, [pc, #52]	; (800cac8 <http_set_cgi_handlers+0x48>)
 800ca92:	f640 22b2 	movw	r2, #2738	; 0xab2
 800ca96:	490d      	ldr	r1, [pc, #52]	; (800cacc <http_set_cgi_handlers+0x4c>)
 800ca98:	480d      	ldr	r0, [pc, #52]	; (800cad0 <http_set_cgi_handlers+0x50>)
 800ca9a:	f00a fcc1 	bl	8017420 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	dc06      	bgt.n	800cab2 <http_set_cgi_handlers+0x32>
 800caa4:	4b08      	ldr	r3, [pc, #32]	; (800cac8 <http_set_cgi_handlers+0x48>)
 800caa6:	f640 22b3 	movw	r2, #2739	; 0xab3
 800caaa:	490a      	ldr	r1, [pc, #40]	; (800cad4 <http_set_cgi_handlers+0x54>)
 800caac:	4808      	ldr	r0, [pc, #32]	; (800cad0 <http_set_cgi_handlers+0x50>)
 800caae:	f00a fcb7 	bl	8017420 <iprintf>

  httpd_cgis = cgis;
 800cab2:	4a09      	ldr	r2, [pc, #36]	; (800cad8 <http_set_cgi_handlers+0x58>)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800cab8:	4a08      	ldr	r2, [pc, #32]	; (800cadc <http_set_cgi_handlers+0x5c>)
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	6013      	str	r3, [r2, #0]
}
 800cabe:	bf00      	nop
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	08019a34 	.word	0x08019a34
 800cacc:	08019cd8 	.word	0x08019cd8
 800cad0:	08019a7c 	.word	0x08019a7c
 800cad4:	08019ce8 	.word	0x08019ce8
 800cad8:	200019cc 	.word	0x200019cc
 800cadc:	200019d0 	.word	0x200019d0

0800cae0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800caea:	88fb      	ldrh	r3, [r7, #6]
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	b21a      	sxth	r2, r3
 800caf0:	88fb      	ldrh	r3, [r7, #6]
 800caf2:	0a1b      	lsrs	r3, r3, #8
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	b21b      	sxth	r3, r3
 800caf8:	4313      	orrs	r3, r2
 800cafa:	b21b      	sxth	r3, r3
 800cafc:	b29b      	uxth	r3, r3
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	370c      	adds	r7, #12
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cb0a:	b480      	push	{r7}
 800cb0c:	b083      	sub	sp, #12
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	061a      	lsls	r2, r3, #24
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	021b      	lsls	r3, r3, #8
 800cb1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb1e:	431a      	orrs	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	0a1b      	lsrs	r3, r3, #8
 800cb24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb28:	431a      	orrs	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	0e1b      	lsrs	r3, r3, #24
 800cb2e:	4313      	orrs	r3, r2
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800cb48:	68b8      	ldr	r0, [r7, #8]
 800cb4a:	f7f3 fb4b 	bl	80001e4 <strlen>
 800cb4e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d101      	bne.n	800cb5a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	e022      	b.n	800cba0 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	617b      	str	r3, [r7, #20]
 800cb5e:	e012      	b.n	800cb86 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	781a      	ldrb	r2, [r3, #0]
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d109      	bne.n	800cb80 <lwip_strnstr+0x44>
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	6978      	ldr	r0, [r7, #20]
 800cb72:	f00a fd9b 	bl	80176ac <strncmp>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	e00f      	b.n	800cba0 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	3301      	adds	r3, #1
 800cb84:	617b      	str	r3, [r7, #20]
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d007      	beq.n	800cb9e <lwip_strnstr+0x62>
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	441a      	add	r2, r3
 800cb94:	68f9      	ldr	r1, [r7, #12]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	440b      	add	r3, r1
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d9e0      	bls.n	800cb60 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3718      	adds	r7, #24
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	1c5a      	adds	r2, r3, #1
 800cbb6:	607a      	str	r2, [r7, #4]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	1c5a      	adds	r2, r3, #1
 800cbc0:	603a      	str	r2, [r7, #0]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800cbc6:	7bfa      	ldrb	r2, [r7, #15]
 800cbc8:	7bbb      	ldrb	r3, [r7, #14]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d016      	beq.n	800cbfc <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	f043 0320 	orr.w	r3, r3, #32
 800cbd4:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800cbd6:	7b7b      	ldrb	r3, [r7, #13]
 800cbd8:	2b60      	cmp	r3, #96	; 0x60
 800cbda:	d90c      	bls.n	800cbf6 <lwip_stricmp+0x4e>
 800cbdc:	7b7b      	ldrb	r3, [r7, #13]
 800cbde:	2b7a      	cmp	r3, #122	; 0x7a
 800cbe0:	d809      	bhi.n	800cbf6 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
 800cbe4:	f043 0320 	orr.w	r3, r3, #32
 800cbe8:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800cbea:	7b7a      	ldrb	r2, [r7, #13]
 800cbec:	7b3b      	ldrb	r3, [r7, #12]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d003      	beq.n	800cbfa <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e006      	b.n	800cc04 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e004      	b.n	800cc04 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800cbfa:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1d7      	bne.n	800cbb2 <lwip_stricmp+0xa>
  return 0;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b088      	sub	sp, #32
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
  char *res = result;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	3b01      	subs	r3, #1
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	4413      	add	r3, r2
 800cc28:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bfb8      	it	lt
 800cc30:	425b      	neglt	r3, r3
 800cc32:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d806      	bhi.n	800cc48 <lwip_itoa+0x38>
    if (bufsize == 1) {
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d154      	bne.n	800ccea <lwip_itoa+0xda>
      *result = 0;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	701a      	strb	r2, [r3, #0]
    }
    return;
 800cc46:	e050      	b.n	800ccea <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	da04      	bge.n	800cc58 <lwip_itoa+0x48>
    *res++ = '-';
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	1c5a      	adds	r2, r3, #1
 800cc52:	61fa      	str	r2, [r7, #28]
 800cc54:	222d      	movs	r2, #45	; 0x2d
 800cc56:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800cc5e:	e01c      	b.n	800cc9a <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800cc60:	697a      	ldr	r2, [r7, #20]
 800cc62:	4b24      	ldr	r3, [pc, #144]	; (800ccf4 <lwip_itoa+0xe4>)
 800cc64:	fb83 1302 	smull	r1, r3, r3, r2
 800cc68:	1099      	asrs	r1, r3, #2
 800cc6a:	17d3      	asrs	r3, r2, #31
 800cc6c:	1ac9      	subs	r1, r1, r3
 800cc6e:	460b      	mov	r3, r1
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	440b      	add	r3, r1
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	1ad1      	subs	r1, r2, r3
 800cc78:	b2cb      	uxtb	r3, r1
 800cc7a:	3330      	adds	r3, #48	; 0x30
 800cc7c:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	7cfa      	ldrb	r2, [r7, #19]
 800cc88:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	4a19      	ldr	r2, [pc, #100]	; (800ccf4 <lwip_itoa+0xe4>)
 800cc8e:	fb82 1203 	smull	r1, r2, r2, r3
 800cc92:	1092      	asrs	r2, r2, #2
 800cc94:	17db      	asrs	r3, r3, #31
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d003      	beq.n	800cca8 <lwip_itoa+0x98>
 800cca0:	69ba      	ldr	r2, [r7, #24]
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d8db      	bhi.n	800cc60 <lwip_itoa+0x50>
  }
  if (n) {
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d003      	beq.n	800ccb6 <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	701a      	strb	r2, [r3, #0]
    return;
 800ccb4:	e01a      	b.n	800ccec <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10a      	bne.n	800ccd4 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	61fa      	str	r2, [r7, #28]
 800ccc4:	2230      	movs	r2, #48	; 0x30
 800ccc6:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	61fa      	str	r2, [r7, #28]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	701a      	strb	r2, [r3, #0]
    return;
 800ccd2:	e00b      	b.n	800ccec <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	441a      	add	r2, r3
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	1ad3      	subs	r3, r2, r3
 800ccde:	461a      	mov	r2, r3
 800cce0:	69b9      	ldr	r1, [r7, #24]
 800cce2:	69f8      	ldr	r0, [r7, #28]
 800cce4:	f00a fb7a 	bl	80173dc <memmove>
 800cce8:	e000      	b.n	800ccec <lwip_itoa+0xdc>
    return;
 800ccea:	bf00      	nop
}
 800ccec:	3720      	adds	r7, #32
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	66666667 	.word	0x66666667

0800ccf8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800cd02:	f000 f8d5 	bl	800ceb0 <mem_init>
  memp_init();
 800cd06:	f000 fbdb 	bl	800d4c0 <memp_init>
  pbuf_init();
  netif_init();
 800cd0a:	f000 fc93 	bl	800d634 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cd0e:	f007 fea7 	bl	8014a60 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cd12:	f001 fd05 	bl	800e720 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cd16:	f007 fe19 	bl	801494c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cd1a:	bf00      	nop
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cd2e:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <ptr_to_mem+0x20>)
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	88fb      	ldrh	r3, [r7, #6]
 800cd34:	4413      	add	r3, r2
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	200019d8 	.word	0x200019d8

0800cd48 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cd50:	4b05      	ldr	r3, [pc, #20]	; (800cd68 <mem_to_ptr+0x20>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	b29b      	uxth	r3, r3
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	200019d8 	.word	0x200019d8

0800cd6c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cd6c:	b590      	push	{r4, r7, lr}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cd74:	4b45      	ldr	r3, [pc, #276]	; (800ce8c <plug_holes+0x120>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d206      	bcs.n	800cd8c <plug_holes+0x20>
 800cd7e:	4b44      	ldr	r3, [pc, #272]	; (800ce90 <plug_holes+0x124>)
 800cd80:	f240 12df 	movw	r2, #479	; 0x1df
 800cd84:	4943      	ldr	r1, [pc, #268]	; (800ce94 <plug_holes+0x128>)
 800cd86:	4844      	ldr	r0, [pc, #272]	; (800ce98 <plug_holes+0x12c>)
 800cd88:	f00a fb4a 	bl	8017420 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cd8c:	4b43      	ldr	r3, [pc, #268]	; (800ce9c <plug_holes+0x130>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d306      	bcc.n	800cda4 <plug_holes+0x38>
 800cd96:	4b3e      	ldr	r3, [pc, #248]	; (800ce90 <plug_holes+0x124>)
 800cd98:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cd9c:	4940      	ldr	r1, [pc, #256]	; (800cea0 <plug_holes+0x134>)
 800cd9e:	483e      	ldr	r0, [pc, #248]	; (800ce98 <plug_holes+0x12c>)
 800cda0:	f00a fb3e 	bl	8017420 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	791b      	ldrb	r3, [r3, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d006      	beq.n	800cdba <plug_holes+0x4e>
 800cdac:	4b38      	ldr	r3, [pc, #224]	; (800ce90 <plug_holes+0x124>)
 800cdae:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cdb2:	493c      	ldr	r1, [pc, #240]	; (800cea4 <plug_holes+0x138>)
 800cdb4:	4838      	ldr	r0, [pc, #224]	; (800ce98 <plug_holes+0x12c>)
 800cdb6:	f00a fb33 	bl	8017420 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	881b      	ldrh	r3, [r3, #0]
 800cdbe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdc2:	d906      	bls.n	800cdd2 <plug_holes+0x66>
 800cdc4:	4b32      	ldr	r3, [pc, #200]	; (800ce90 <plug_holes+0x124>)
 800cdc6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cdca:	4937      	ldr	r1, [pc, #220]	; (800cea8 <plug_holes+0x13c>)
 800cdcc:	4832      	ldr	r0, [pc, #200]	; (800ce98 <plug_holes+0x12c>)
 800cdce:	f00a fb27 	bl	8017420 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff ffa4 	bl	800cd24 <ptr_to_mem>
 800cddc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d024      	beq.n	800ce30 <plug_holes+0xc4>
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	791b      	ldrb	r3, [r3, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d120      	bne.n	800ce30 <plug_holes+0xc4>
 800cdee:	4b2b      	ldr	r3, [pc, #172]	; (800ce9c <plug_holes+0x130>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d01b      	beq.n	800ce30 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cdf8:	4b2c      	ldr	r3, [pc, #176]	; (800ceac <plug_holes+0x140>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d102      	bne.n	800ce08 <plug_holes+0x9c>
      lfree = mem;
 800ce02:	4a2a      	ldr	r2, [pc, #168]	; (800ceac <plug_holes+0x140>)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	881a      	ldrh	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	881b      	ldrh	r3, [r3, #0]
 800ce14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce18:	d00a      	beq.n	800ce30 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	881b      	ldrh	r3, [r3, #0]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7ff ff80 	bl	800cd24 <ptr_to_mem>
 800ce24:	4604      	mov	r4, r0
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff ff8e 	bl	800cd48 <mem_to_ptr>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	885b      	ldrh	r3, [r3, #2]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7ff ff75 	bl	800cd24 <ptr_to_mem>
 800ce3a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d01f      	beq.n	800ce84 <plug_holes+0x118>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	791b      	ldrb	r3, [r3, #4]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d11b      	bne.n	800ce84 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ce4c:	4b17      	ldr	r3, [pc, #92]	; (800ceac <plug_holes+0x140>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d102      	bne.n	800ce5c <plug_holes+0xf0>
      lfree = pmem;
 800ce56:	4a15      	ldr	r2, [pc, #84]	; (800ceac <plug_holes+0x140>)
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	881a      	ldrh	r2, [r3, #0]
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce6c:	d00a      	beq.n	800ce84 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7ff ff56 	bl	800cd24 <ptr_to_mem>
 800ce78:	4604      	mov	r4, r0
 800ce7a:	68b8      	ldr	r0, [r7, #8]
 800ce7c:	f7ff ff64 	bl	800cd48 <mem_to_ptr>
 800ce80:	4603      	mov	r3, r0
 800ce82:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ce84:	bf00      	nop
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd90      	pop	{r4, r7, pc}
 800ce8c:	200019d8 	.word	0x200019d8
 800ce90:	08019d04 	.word	0x08019d04
 800ce94:	08019d34 	.word	0x08019d34
 800ce98:	08019d4c 	.word	0x08019d4c
 800ce9c:	200019dc 	.word	0x200019dc
 800cea0:	08019d74 	.word	0x08019d74
 800cea4:	08019d90 	.word	0x08019d90
 800cea8:	08019dac 	.word	0x08019dac
 800ceac:	200019e0 	.word	0x200019e0

0800ceb0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ceb6:	4b18      	ldr	r3, [pc, #96]	; (800cf18 <mem_init+0x68>)
 800ceb8:	3303      	adds	r3, #3
 800ceba:	f023 0303 	bic.w	r3, r3, #3
 800cebe:	461a      	mov	r2, r3
 800cec0:	4b16      	ldr	r3, [pc, #88]	; (800cf1c <mem_init+0x6c>)
 800cec2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cec4:	4b15      	ldr	r3, [pc, #84]	; (800cf1c <mem_init+0x6c>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ced0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cede:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800cee2:	f7ff ff1f 	bl	800cd24 <ptr_to_mem>
 800cee6:	4603      	mov	r3, r0
 800cee8:	4a0d      	ldr	r2, [pc, #52]	; (800cf20 <mem_init+0x70>)
 800ceea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ceec:	4b0c      	ldr	r3, [pc, #48]	; (800cf20 <mem_init+0x70>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2201      	movs	r2, #1
 800cef2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cef4:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <mem_init+0x70>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cefc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cefe:	4b08      	ldr	r3, [pc, #32]	; (800cf20 <mem_init+0x70>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cf06:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cf08:	4b04      	ldr	r3, [pc, #16]	; (800cf1c <mem_init+0x6c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a05      	ldr	r2, [pc, #20]	; (800cf24 <mem_init+0x74>)
 800cf0e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800cf10:	bf00      	nop
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	2000e304 	.word	0x2000e304
 800cf1c:	200019d8 	.word	0x200019d8
 800cf20:	200019dc 	.word	0x200019dc
 800cf24:	200019e0 	.word	0x200019e0

0800cf28 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7ff ff09 	bl	800cd48 <mem_to_ptr>
 800cf36:	4603      	mov	r3, r0
 800cf38:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff fef0 	bl	800cd24 <ptr_to_mem>
 800cf44:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	885b      	ldrh	r3, [r3, #2]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff feea 	bl	800cd24 <ptr_to_mem>
 800cf50:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf5a:	d818      	bhi.n	800cf8e <mem_link_valid+0x66>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	885b      	ldrh	r3, [r3, #2]
 800cf60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf64:	d813      	bhi.n	800cf8e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cf6a:	8afa      	ldrh	r2, [r7, #22]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d004      	beq.n	800cf7a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	881b      	ldrh	r3, [r3, #0]
 800cf74:	8afa      	ldrh	r2, [r7, #22]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d109      	bne.n	800cf8e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cf7a:	4b08      	ldr	r3, [pc, #32]	; (800cf9c <mem_link_valid+0x74>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cf7e:	693a      	ldr	r2, [r7, #16]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d006      	beq.n	800cf92 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	885b      	ldrh	r3, [r3, #2]
 800cf88:	8afa      	ldrh	r2, [r7, #22]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d001      	beq.n	800cf92 <mem_link_valid+0x6a>
    return 0;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e000      	b.n	800cf94 <mem_link_valid+0x6c>
  }
  return 1;
 800cf92:	2301      	movs	r3, #1
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	200019dc 	.word	0x200019dc

0800cfa0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d04c      	beq.n	800d048 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f003 0303 	and.w	r3, r3, #3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d007      	beq.n	800cfc8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cfb8:	4b25      	ldr	r3, [pc, #148]	; (800d050 <mem_free+0xb0>)
 800cfba:	f240 2273 	movw	r2, #627	; 0x273
 800cfbe:	4925      	ldr	r1, [pc, #148]	; (800d054 <mem_free+0xb4>)
 800cfc0:	4825      	ldr	r0, [pc, #148]	; (800d058 <mem_free+0xb8>)
 800cfc2:	f00a fa2d 	bl	8017420 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cfc6:	e040      	b.n	800d04a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3b08      	subs	r3, #8
 800cfcc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cfce:	4b23      	ldr	r3, [pc, #140]	; (800d05c <mem_free+0xbc>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d306      	bcc.n	800cfe6 <mem_free+0x46>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f103 020c 	add.w	r2, r3, #12
 800cfde:	4b20      	ldr	r3, [pc, #128]	; (800d060 <mem_free+0xc0>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d907      	bls.n	800cff6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cfe6:	4b1a      	ldr	r3, [pc, #104]	; (800d050 <mem_free+0xb0>)
 800cfe8:	f240 227f 	movw	r2, #639	; 0x27f
 800cfec:	491d      	ldr	r1, [pc, #116]	; (800d064 <mem_free+0xc4>)
 800cfee:	481a      	ldr	r0, [pc, #104]	; (800d058 <mem_free+0xb8>)
 800cff0:	f00a fa16 	bl	8017420 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cff4:	e029      	b.n	800d04a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	791b      	ldrb	r3, [r3, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d107      	bne.n	800d00e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cffe:	4b14      	ldr	r3, [pc, #80]	; (800d050 <mem_free+0xb0>)
 800d000:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d004:	4918      	ldr	r1, [pc, #96]	; (800d068 <mem_free+0xc8>)
 800d006:	4814      	ldr	r0, [pc, #80]	; (800d058 <mem_free+0xb8>)
 800d008:	f00a fa0a 	bl	8017420 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d00c:	e01d      	b.n	800d04a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f7ff ff8a 	bl	800cf28 <mem_link_valid>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d107      	bne.n	800d02a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d01a:	4b0d      	ldr	r3, [pc, #52]	; (800d050 <mem_free+0xb0>)
 800d01c:	f240 2295 	movw	r2, #661	; 0x295
 800d020:	4912      	ldr	r1, [pc, #72]	; (800d06c <mem_free+0xcc>)
 800d022:	480d      	ldr	r0, [pc, #52]	; (800d058 <mem_free+0xb8>)
 800d024:	f00a f9fc 	bl	8017420 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d028:	e00f      	b.n	800d04a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d030:	4b0f      	ldr	r3, [pc, #60]	; (800d070 <mem_free+0xd0>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	429a      	cmp	r2, r3
 800d038:	d202      	bcs.n	800d040 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d03a:	4a0d      	ldr	r2, [pc, #52]	; (800d070 <mem_free+0xd0>)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f7ff fe93 	bl	800cd6c <plug_holes>
 800d046:	e000      	b.n	800d04a <mem_free+0xaa>
    return;
 800d048:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	08019d04 	.word	0x08019d04
 800d054:	08019dd8 	.word	0x08019dd8
 800d058:	08019d4c 	.word	0x08019d4c
 800d05c:	200019d8 	.word	0x200019d8
 800d060:	200019dc 	.word	0x200019dc
 800d064:	08019dfc 	.word	0x08019dfc
 800d068:	08019e18 	.word	0x08019e18
 800d06c:	08019e40 	.word	0x08019e40
 800d070:	200019e0 	.word	0x200019e0

0800d074 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b088      	sub	sp, #32
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	460b      	mov	r3, r1
 800d07e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d080:	887b      	ldrh	r3, [r7, #2]
 800d082:	3303      	adds	r3, #3
 800d084:	b29b      	uxth	r3, r3
 800d086:	f023 0303 	bic.w	r3, r3, #3
 800d08a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d08c:	8bfb      	ldrh	r3, [r7, #30]
 800d08e:	2b0b      	cmp	r3, #11
 800d090:	d801      	bhi.n	800d096 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d092:	230c      	movs	r3, #12
 800d094:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d096:	8bfb      	ldrh	r3, [r7, #30]
 800d098:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d09c:	d803      	bhi.n	800d0a6 <mem_trim+0x32>
 800d09e:	8bfa      	ldrh	r2, [r7, #30]
 800d0a0:	887b      	ldrh	r3, [r7, #2]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d201      	bcs.n	800d0aa <mem_trim+0x36>
    return NULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e0cc      	b.n	800d244 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d0aa:	4b68      	ldr	r3, [pc, #416]	; (800d24c <mem_trim+0x1d8>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d304      	bcc.n	800d0be <mem_trim+0x4a>
 800d0b4:	4b66      	ldr	r3, [pc, #408]	; (800d250 <mem_trim+0x1dc>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d306      	bcc.n	800d0cc <mem_trim+0x58>
 800d0be:	4b65      	ldr	r3, [pc, #404]	; (800d254 <mem_trim+0x1e0>)
 800d0c0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d0c4:	4964      	ldr	r1, [pc, #400]	; (800d258 <mem_trim+0x1e4>)
 800d0c6:	4865      	ldr	r0, [pc, #404]	; (800d25c <mem_trim+0x1e8>)
 800d0c8:	f00a f9aa 	bl	8017420 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d0cc:	4b5f      	ldr	r3, [pc, #380]	; (800d24c <mem_trim+0x1d8>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d304      	bcc.n	800d0e0 <mem_trim+0x6c>
 800d0d6:	4b5e      	ldr	r3, [pc, #376]	; (800d250 <mem_trim+0x1dc>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d301      	bcc.n	800d0e4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	e0af      	b.n	800d244 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3b08      	subs	r3, #8
 800d0e8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d0ea:	69b8      	ldr	r0, [r7, #24]
 800d0ec:	f7ff fe2c 	bl	800cd48 <mem_to_ptr>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	881a      	ldrh	r2, [r3, #0]
 800d0f8:	8afb      	ldrh	r3, [r7, #22]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	3b08      	subs	r3, #8
 800d100:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d102:	8bfa      	ldrh	r2, [r7, #30]
 800d104:	8abb      	ldrh	r3, [r7, #20]
 800d106:	429a      	cmp	r2, r3
 800d108:	d906      	bls.n	800d118 <mem_trim+0xa4>
 800d10a:	4b52      	ldr	r3, [pc, #328]	; (800d254 <mem_trim+0x1e0>)
 800d10c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d110:	4953      	ldr	r1, [pc, #332]	; (800d260 <mem_trim+0x1ec>)
 800d112:	4852      	ldr	r0, [pc, #328]	; (800d25c <mem_trim+0x1e8>)
 800d114:	f00a f984 	bl	8017420 <iprintf>
  if (newsize > size) {
 800d118:	8bfa      	ldrh	r2, [r7, #30]
 800d11a:	8abb      	ldrh	r3, [r7, #20]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d901      	bls.n	800d124 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800d120:	2300      	movs	r3, #0
 800d122:	e08f      	b.n	800d244 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800d124:	8bfa      	ldrh	r2, [r7, #30]
 800d126:	8abb      	ldrh	r3, [r7, #20]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d101      	bne.n	800d130 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	e089      	b.n	800d244 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff fdf5 	bl	800cd24 <ptr_to_mem>
 800d13a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	791b      	ldrb	r3, [r3, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d13f      	bne.n	800d1c4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d14c:	d106      	bne.n	800d15c <mem_trim+0xe8>
 800d14e:	4b41      	ldr	r3, [pc, #260]	; (800d254 <mem_trim+0x1e0>)
 800d150:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d154:	4943      	ldr	r1, [pc, #268]	; (800d264 <mem_trim+0x1f0>)
 800d156:	4841      	ldr	r0, [pc, #260]	; (800d25c <mem_trim+0x1e8>)
 800d158:	f00a f962 	bl	8017420 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	881b      	ldrh	r3, [r3, #0]
 800d160:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d162:	8afa      	ldrh	r2, [r7, #22]
 800d164:	8bfb      	ldrh	r3, [r7, #30]
 800d166:	4413      	add	r3, r2
 800d168:	b29b      	uxth	r3, r3
 800d16a:	3308      	adds	r3, #8
 800d16c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d16e:	4b3e      	ldr	r3, [pc, #248]	; (800d268 <mem_trim+0x1f4>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	429a      	cmp	r2, r3
 800d176:	d106      	bne.n	800d186 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800d178:	89fb      	ldrh	r3, [r7, #14]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7ff fdd2 	bl	800cd24 <ptr_to_mem>
 800d180:	4603      	mov	r3, r0
 800d182:	4a39      	ldr	r2, [pc, #228]	; (800d268 <mem_trim+0x1f4>)
 800d184:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d186:	89fb      	ldrh	r3, [r7, #14]
 800d188:	4618      	mov	r0, r3
 800d18a:	f7ff fdcb 	bl	800cd24 <ptr_to_mem>
 800d18e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2200      	movs	r2, #0
 800d194:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	89ba      	ldrh	r2, [r7, #12]
 800d19a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	8afa      	ldrh	r2, [r7, #22]
 800d1a0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	89fa      	ldrh	r2, [r7, #14]
 800d1a6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d1b0:	d047      	beq.n	800d242 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7ff fdb4 	bl	800cd24 <ptr_to_mem>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	89fb      	ldrh	r3, [r7, #14]
 800d1c0:	8053      	strh	r3, [r2, #2]
 800d1c2:	e03e      	b.n	800d242 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d1c4:	8bfb      	ldrh	r3, [r7, #30]
 800d1c6:	f103 0214 	add.w	r2, r3, #20
 800d1ca:	8abb      	ldrh	r3, [r7, #20]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d838      	bhi.n	800d242 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d1d0:	8afa      	ldrh	r2, [r7, #22]
 800d1d2:	8bfb      	ldrh	r3, [r7, #30]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	3308      	adds	r3, #8
 800d1da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d1e4:	d106      	bne.n	800d1f4 <mem_trim+0x180>
 800d1e6:	4b1b      	ldr	r3, [pc, #108]	; (800d254 <mem_trim+0x1e0>)
 800d1e8:	f240 3216 	movw	r2, #790	; 0x316
 800d1ec:	491d      	ldr	r1, [pc, #116]	; (800d264 <mem_trim+0x1f0>)
 800d1ee:	481b      	ldr	r0, [pc, #108]	; (800d25c <mem_trim+0x1e8>)
 800d1f0:	f00a f916 	bl	8017420 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d1f4:	89fb      	ldrh	r3, [r7, #14]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7ff fd94 	bl	800cd24 <ptr_to_mem>
 800d1fc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d1fe:	4b1a      	ldr	r3, [pc, #104]	; (800d268 <mem_trim+0x1f4>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	429a      	cmp	r2, r3
 800d206:	d202      	bcs.n	800d20e <mem_trim+0x19a>
      lfree = mem2;
 800d208:	4a17      	ldr	r2, [pc, #92]	; (800d268 <mem_trim+0x1f4>)
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	2200      	movs	r2, #0
 800d212:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	881a      	ldrh	r2, [r3, #0]
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	8afa      	ldrh	r2, [r7, #22]
 800d220:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	89fa      	ldrh	r2, [r7, #14]
 800d226:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	881b      	ldrh	r3, [r3, #0]
 800d22c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d230:	d007      	beq.n	800d242 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	881b      	ldrh	r3, [r3, #0]
 800d236:	4618      	mov	r0, r3
 800d238:	f7ff fd74 	bl	800cd24 <ptr_to_mem>
 800d23c:	4602      	mov	r2, r0
 800d23e:	89fb      	ldrh	r3, [r7, #14]
 800d240:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800d242:	687b      	ldr	r3, [r7, #4]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3720      	adds	r7, #32
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	200019d8 	.word	0x200019d8
 800d250:	200019dc 	.word	0x200019dc
 800d254:	08019d04 	.word	0x08019d04
 800d258:	08019e74 	.word	0x08019e74
 800d25c:	08019d4c 	.word	0x08019d4c
 800d260:	08019e8c 	.word	0x08019e8c
 800d264:	08019eac 	.word	0x08019eac
 800d268:	200019e0 	.word	0x200019e0

0800d26c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b088      	sub	sp, #32
 800d270:	af00      	add	r7, sp, #0
 800d272:	4603      	mov	r3, r0
 800d274:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d276:	88fb      	ldrh	r3, [r7, #6]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d101      	bne.n	800d280 <mem_malloc+0x14>
    return NULL;
 800d27c:	2300      	movs	r3, #0
 800d27e:	e0d9      	b.n	800d434 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d280:	88fb      	ldrh	r3, [r7, #6]
 800d282:	3303      	adds	r3, #3
 800d284:	b29b      	uxth	r3, r3
 800d286:	f023 0303 	bic.w	r3, r3, #3
 800d28a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d28c:	8bbb      	ldrh	r3, [r7, #28]
 800d28e:	2b0b      	cmp	r3, #11
 800d290:	d801      	bhi.n	800d296 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d292:	230c      	movs	r3, #12
 800d294:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d296:	8bbb      	ldrh	r3, [r7, #28]
 800d298:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d29c:	d803      	bhi.n	800d2a6 <mem_malloc+0x3a>
 800d29e:	8bba      	ldrh	r2, [r7, #28]
 800d2a0:	88fb      	ldrh	r3, [r7, #6]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d201      	bcs.n	800d2aa <mem_malloc+0x3e>
    return NULL;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	e0c4      	b.n	800d434 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d2aa:	4b64      	ldr	r3, [pc, #400]	; (800d43c <mem_malloc+0x1d0>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7ff fd4a 	bl	800cd48 <mem_to_ptr>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	83fb      	strh	r3, [r7, #30]
 800d2b8:	e0b4      	b.n	800d424 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d2ba:	8bfb      	ldrh	r3, [r7, #30]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff fd31 	bl	800cd24 <ptr_to_mem>
 800d2c2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	791b      	ldrb	r3, [r3, #4]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f040 80a4 	bne.w	800d416 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	8bfb      	ldrh	r3, [r7, #30]
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	f1a3 0208 	sub.w	r2, r3, #8
 800d2dc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	f0c0 8099 	bcc.w	800d416 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	881b      	ldrh	r3, [r3, #0]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	8bfb      	ldrh	r3, [r7, #30]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	f1a3 0208 	sub.w	r2, r3, #8
 800d2f2:	8bbb      	ldrh	r3, [r7, #28]
 800d2f4:	3314      	adds	r3, #20
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d333      	bcc.n	800d362 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d2fa:	8bfa      	ldrh	r2, [r7, #30]
 800d2fc:	8bbb      	ldrh	r3, [r7, #28]
 800d2fe:	4413      	add	r3, r2
 800d300:	b29b      	uxth	r3, r3
 800d302:	3308      	adds	r3, #8
 800d304:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d306:	8a7b      	ldrh	r3, [r7, #18]
 800d308:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d30c:	d106      	bne.n	800d31c <mem_malloc+0xb0>
 800d30e:	4b4c      	ldr	r3, [pc, #304]	; (800d440 <mem_malloc+0x1d4>)
 800d310:	f240 3287 	movw	r2, #903	; 0x387
 800d314:	494b      	ldr	r1, [pc, #300]	; (800d444 <mem_malloc+0x1d8>)
 800d316:	484c      	ldr	r0, [pc, #304]	; (800d448 <mem_malloc+0x1dc>)
 800d318:	f00a f882 	bl	8017420 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d31c:	8a7b      	ldrh	r3, [r7, #18]
 800d31e:	4618      	mov	r0, r3
 800d320:	f7ff fd00 	bl	800cd24 <ptr_to_mem>
 800d324:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2200      	movs	r2, #0
 800d32a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	881a      	ldrh	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	8bfa      	ldrh	r2, [r7, #30]
 800d338:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	8a7a      	ldrh	r2, [r7, #18]
 800d33e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	2201      	movs	r2, #1
 800d344:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d34e:	d00b      	beq.n	800d368 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	4618      	mov	r0, r3
 800d356:	f7ff fce5 	bl	800cd24 <ptr_to_mem>
 800d35a:	4602      	mov	r2, r0
 800d35c:	8a7b      	ldrh	r3, [r7, #18]
 800d35e:	8053      	strh	r3, [r2, #2]
 800d360:	e002      	b.n	800d368 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	2201      	movs	r2, #1
 800d366:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d368:	4b34      	ldr	r3, [pc, #208]	; (800d43c <mem_malloc+0x1d0>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	697a      	ldr	r2, [r7, #20]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d127      	bne.n	800d3c2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800d372:	4b32      	ldr	r3, [pc, #200]	; (800d43c <mem_malloc+0x1d0>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d378:	e005      	b.n	800d386 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff fcd0 	bl	800cd24 <ptr_to_mem>
 800d384:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	791b      	ldrb	r3, [r3, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d004      	beq.n	800d398 <mem_malloc+0x12c>
 800d38e:	4b2f      	ldr	r3, [pc, #188]	; (800d44c <mem_malloc+0x1e0>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	69ba      	ldr	r2, [r7, #24]
 800d394:	429a      	cmp	r2, r3
 800d396:	d1f0      	bne.n	800d37a <mem_malloc+0x10e>
          }
          lfree = cur;
 800d398:	4a28      	ldr	r2, [pc, #160]	; (800d43c <mem_malloc+0x1d0>)
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d39e:	4b27      	ldr	r3, [pc, #156]	; (800d43c <mem_malloc+0x1d0>)
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	4b2a      	ldr	r3, [pc, #168]	; (800d44c <mem_malloc+0x1e0>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d00b      	beq.n	800d3c2 <mem_malloc+0x156>
 800d3aa:	4b24      	ldr	r3, [pc, #144]	; (800d43c <mem_malloc+0x1d0>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	791b      	ldrb	r3, [r3, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d006      	beq.n	800d3c2 <mem_malloc+0x156>
 800d3b4:	4b22      	ldr	r3, [pc, #136]	; (800d440 <mem_malloc+0x1d4>)
 800d3b6:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d3ba:	4925      	ldr	r1, [pc, #148]	; (800d450 <mem_malloc+0x1e4>)
 800d3bc:	4822      	ldr	r0, [pc, #136]	; (800d448 <mem_malloc+0x1dc>)
 800d3be:	f00a f82f 	bl	8017420 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d3c2:	8bba      	ldrh	r2, [r7, #28]
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	3308      	adds	r3, #8
 800d3ca:	4a20      	ldr	r2, [pc, #128]	; (800d44c <mem_malloc+0x1e0>)
 800d3cc:	6812      	ldr	r2, [r2, #0]
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d906      	bls.n	800d3e0 <mem_malloc+0x174>
 800d3d2:	4b1b      	ldr	r3, [pc, #108]	; (800d440 <mem_malloc+0x1d4>)
 800d3d4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d3d8:	491e      	ldr	r1, [pc, #120]	; (800d454 <mem_malloc+0x1e8>)
 800d3da:	481b      	ldr	r0, [pc, #108]	; (800d448 <mem_malloc+0x1dc>)
 800d3dc:	f00a f820 	bl	8017420 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	f003 0303 	and.w	r3, r3, #3
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d006      	beq.n	800d3f8 <mem_malloc+0x18c>
 800d3ea:	4b15      	ldr	r3, [pc, #84]	; (800d440 <mem_malloc+0x1d4>)
 800d3ec:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d3f0:	4919      	ldr	r1, [pc, #100]	; (800d458 <mem_malloc+0x1ec>)
 800d3f2:	4815      	ldr	r0, [pc, #84]	; (800d448 <mem_malloc+0x1dc>)
 800d3f4:	f00a f814 	bl	8017420 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	f003 0303 	and.w	r3, r3, #3
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d006      	beq.n	800d410 <mem_malloc+0x1a4>
 800d402:	4b0f      	ldr	r3, [pc, #60]	; (800d440 <mem_malloc+0x1d4>)
 800d404:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d408:	4914      	ldr	r1, [pc, #80]	; (800d45c <mem_malloc+0x1f0>)
 800d40a:	480f      	ldr	r0, [pc, #60]	; (800d448 <mem_malloc+0x1dc>)
 800d40c:	f00a f808 	bl	8017420 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	3308      	adds	r3, #8
 800d414:	e00e      	b.n	800d434 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d416:	8bfb      	ldrh	r3, [r7, #30]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7ff fc83 	bl	800cd24 <ptr_to_mem>
 800d41e:	4603      	mov	r3, r0
 800d420:	881b      	ldrh	r3, [r3, #0]
 800d422:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d424:	8bfa      	ldrh	r2, [r7, #30]
 800d426:	8bbb      	ldrh	r3, [r7, #28]
 800d428:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d42c:	429a      	cmp	r2, r3
 800d42e:	f4ff af44 	bcc.w	800d2ba <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	200019e0 	.word	0x200019e0
 800d440:	08019d04 	.word	0x08019d04
 800d444:	08019eac 	.word	0x08019eac
 800d448:	08019d4c 	.word	0x08019d4c
 800d44c:	200019dc 	.word	0x200019dc
 800d450:	08019ec0 	.word	0x08019ec0
 800d454:	08019edc 	.word	0x08019edc
 800d458:	08019f0c 	.word	0x08019f0c
 800d45c:	08019f3c 	.word	0x08019f3c

0800d460 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	2200      	movs	r2, #0
 800d46e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	3303      	adds	r3, #3
 800d476:	f023 0303 	bic.w	r3, r3, #3
 800d47a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d47c:	2300      	movs	r3, #0
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e011      	b.n	800d4a6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	68ba      	ldr	r2, [r7, #8]
 800d492:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	461a      	mov	r2, r3
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	4413      	add	r3, r2
 800d49e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	60fb      	str	r3, [r7, #12]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	885b      	ldrh	r3, [r3, #2]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	dbe7      	blt.n	800d482 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d4b2:	bf00      	nop
 800d4b4:	bf00      	nop
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	80fb      	strh	r3, [r7, #6]
 800d4ca:	e009      	b.n	800d4e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d4cc:	88fb      	ldrh	r3, [r7, #6]
 800d4ce:	4a08      	ldr	r2, [pc, #32]	; (800d4f0 <memp_init+0x30>)
 800d4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff ffc3 	bl	800d460 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d4da:	88fb      	ldrh	r3, [r7, #6]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	80fb      	strh	r3, [r7, #6]
 800d4e0:	88fb      	ldrh	r3, [r7, #6]
 800d4e2:	2b08      	cmp	r3, #8
 800d4e4:	d9f2      	bls.n	800d4cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d4e6:	bf00      	nop
 800d4e8:	bf00      	nop
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	0801ee38 	.word	0x0801ee38

0800d4f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d012      	beq.n	800d530 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	6812      	ldr	r2, [r2, #0]
 800d512:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f003 0303 	and.w	r3, r3, #3
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d006      	beq.n	800d52c <do_memp_malloc_pool+0x38>
 800d51e:	4b07      	ldr	r3, [pc, #28]	; (800d53c <do_memp_malloc_pool+0x48>)
 800d520:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d524:	4906      	ldr	r1, [pc, #24]	; (800d540 <do_memp_malloc_pool+0x4c>)
 800d526:	4807      	ldr	r0, [pc, #28]	; (800d544 <do_memp_malloc_pool+0x50>)
 800d528:	f009 ff7a 	bl	8017420 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	e000      	b.n	800d532 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	08019f60 	.word	0x08019f60
 800d540:	08019f90 	.word	0x08019f90
 800d544:	08019fb4 	.word	0x08019fb4

0800d548 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	2b08      	cmp	r3, #8
 800d556:	d908      	bls.n	800d56a <memp_malloc+0x22>
 800d558:	4b0a      	ldr	r3, [pc, #40]	; (800d584 <memp_malloc+0x3c>)
 800d55a:	f240 1257 	movw	r2, #343	; 0x157
 800d55e:	490a      	ldr	r1, [pc, #40]	; (800d588 <memp_malloc+0x40>)
 800d560:	480a      	ldr	r0, [pc, #40]	; (800d58c <memp_malloc+0x44>)
 800d562:	f009 ff5d 	bl	8017420 <iprintf>
 800d566:	2300      	movs	r3, #0
 800d568:	e008      	b.n	800d57c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d56a:	79fb      	ldrb	r3, [r7, #7]
 800d56c:	4a08      	ldr	r2, [pc, #32]	; (800d590 <memp_malloc+0x48>)
 800d56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff ffbe 	bl	800d4f4 <do_memp_malloc_pool>
 800d578:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d57a:	68fb      	ldr	r3, [r7, #12]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	08019f60 	.word	0x08019f60
 800d588:	08019ff0 	.word	0x08019ff0
 800d58c:	08019fb4 	.word	0x08019fb4
 800d590:	0801ee38 	.word	0x0801ee38

0800d594 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	f003 0303 	and.w	r3, r3, #3
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d006      	beq.n	800d5b6 <do_memp_free_pool+0x22>
 800d5a8:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <do_memp_free_pool+0x40>)
 800d5aa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d5ae:	490a      	ldr	r1, [pc, #40]	; (800d5d8 <do_memp_free_pool+0x44>)
 800d5b0:	480a      	ldr	r0, [pc, #40]	; (800d5dc <do_memp_free_pool+0x48>)
 800d5b2:	f009 ff35 	bl	8017420 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	68fa      	ldr	r2, [r7, #12]
 800d5ca:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d5cc:	bf00      	nop
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	08019f60 	.word	0x08019f60
 800d5d8:	0801a010 	.word	0x0801a010
 800d5dc:	08019fb4 	.word	0x08019fb4

0800d5e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	6039      	str	r1, [r7, #0]
 800d5ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	2b08      	cmp	r3, #8
 800d5f0:	d907      	bls.n	800d602 <memp_free+0x22>
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <memp_free+0x44>)
 800d5f4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d5f8:	490b      	ldr	r1, [pc, #44]	; (800d628 <memp_free+0x48>)
 800d5fa:	480c      	ldr	r0, [pc, #48]	; (800d62c <memp_free+0x4c>)
 800d5fc:	f009 ff10 	bl	8017420 <iprintf>
 800d600:	e00c      	b.n	800d61c <memp_free+0x3c>

  if (mem == NULL) {
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d008      	beq.n	800d61a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d608:	79fb      	ldrb	r3, [r7, #7]
 800d60a:	4a09      	ldr	r2, [pc, #36]	; (800d630 <memp_free+0x50>)
 800d60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d610:	6839      	ldr	r1, [r7, #0]
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff ffbe 	bl	800d594 <do_memp_free_pool>
 800d618:	e000      	b.n	800d61c <memp_free+0x3c>
    return;
 800d61a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	08019f60 	.word	0x08019f60
 800d628:	0801a030 	.word	0x0801a030
 800d62c:	08019fb4 	.word	0x08019fb4
 800d630:	0801ee38 	.word	0x0801ee38

0800d634 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d634:	b480      	push	{r7}
 800d636:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d638:	bf00      	nop
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
	...

0800d644 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
 800d650:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d108      	bne.n	800d66a <netif_add+0x26>
 800d658:	4b57      	ldr	r3, [pc, #348]	; (800d7b8 <netif_add+0x174>)
 800d65a:	f240 1227 	movw	r2, #295	; 0x127
 800d65e:	4957      	ldr	r1, [pc, #348]	; (800d7bc <netif_add+0x178>)
 800d660:	4857      	ldr	r0, [pc, #348]	; (800d7c0 <netif_add+0x17c>)
 800d662:	f009 fedd 	bl	8017420 <iprintf>
 800d666:	2300      	movs	r3, #0
 800d668:	e0a2      	b.n	800d7b0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d108      	bne.n	800d682 <netif_add+0x3e>
 800d670:	4b51      	ldr	r3, [pc, #324]	; (800d7b8 <netif_add+0x174>)
 800d672:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d676:	4953      	ldr	r1, [pc, #332]	; (800d7c4 <netif_add+0x180>)
 800d678:	4851      	ldr	r0, [pc, #324]	; (800d7c0 <netif_add+0x17c>)
 800d67a:	f009 fed1 	bl	8017420 <iprintf>
 800d67e:	2300      	movs	r3, #0
 800d680:	e096      	b.n	800d7b0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d101      	bne.n	800d68c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d688:	4b4f      	ldr	r3, [pc, #316]	; (800d7c8 <netif_add+0x184>)
 800d68a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d692:	4b4d      	ldr	r3, [pc, #308]	; (800d7c8 <netif_add+0x184>)
 800d694:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d69c:	4b4a      	ldr	r3, [pc, #296]	; (800d7c8 <netif_add+0x184>)
 800d69e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4a45      	ldr	r2, [pc, #276]	; (800d7cc <netif_add+0x188>)
 800d6b6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6a3a      	ldr	r2, [r7, #32]
 800d6d0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d6d2:	4b3f      	ldr	r3, [pc, #252]	; (800d7d0 <netif_add+0x18c>)
 800d6d4:	781a      	ldrb	r2, [r3, #0]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6e0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f000 f913 	bl	800d914 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	4798      	blx	r3
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <netif_add+0xba>
    return NULL;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	e058      	b.n	800d7b0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d704:	2bff      	cmp	r3, #255	; 0xff
 800d706:	d103      	bne.n	800d710 <netif_add+0xcc>
        netif->num = 0;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d710:	2300      	movs	r3, #0
 800d712:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d714:	4b2f      	ldr	r3, [pc, #188]	; (800d7d4 <netif_add+0x190>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	617b      	str	r3, [r7, #20]
 800d71a:	e02b      	b.n	800d774 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d71c:	697a      	ldr	r2, [r7, #20]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	429a      	cmp	r2, r3
 800d722:	d106      	bne.n	800d732 <netif_add+0xee>
 800d724:	4b24      	ldr	r3, [pc, #144]	; (800d7b8 <netif_add+0x174>)
 800d726:	f240 128b 	movw	r2, #395	; 0x18b
 800d72a:	492b      	ldr	r1, [pc, #172]	; (800d7d8 <netif_add+0x194>)
 800d72c:	4824      	ldr	r0, [pc, #144]	; (800d7c0 <netif_add+0x17c>)
 800d72e:	f009 fe77 	bl	8017420 <iprintf>
        num_netifs++;
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	3301      	adds	r3, #1
 800d736:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	2bff      	cmp	r3, #255	; 0xff
 800d73c:	dd06      	ble.n	800d74c <netif_add+0x108>
 800d73e:	4b1e      	ldr	r3, [pc, #120]	; (800d7b8 <netif_add+0x174>)
 800d740:	f240 128d 	movw	r2, #397	; 0x18d
 800d744:	4925      	ldr	r1, [pc, #148]	; (800d7dc <netif_add+0x198>)
 800d746:	481e      	ldr	r0, [pc, #120]	; (800d7c0 <netif_add+0x17c>)
 800d748:	f009 fe6a 	bl	8017420 <iprintf>
        if (netif2->num == netif->num) {
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d758:	429a      	cmp	r2, r3
 800d75a:	d108      	bne.n	800d76e <netif_add+0x12a>
          netif->num++;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d762:	3301      	adds	r3, #1
 800d764:	b2da      	uxtb	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d76c:	e005      	b.n	800d77a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	617b      	str	r3, [r7, #20]
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1d0      	bne.n	800d71c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1be      	bne.n	800d6fe <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d786:	2bfe      	cmp	r3, #254	; 0xfe
 800d788:	d103      	bne.n	800d792 <netif_add+0x14e>
    netif_num = 0;
 800d78a:	4b11      	ldr	r3, [pc, #68]	; (800d7d0 <netif_add+0x18c>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	701a      	strb	r2, [r3, #0]
 800d790:	e006      	b.n	800d7a0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d798:	3301      	adds	r3, #1
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	4b0c      	ldr	r3, [pc, #48]	; (800d7d0 <netif_add+0x18c>)
 800d79e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d7a0:	4b0c      	ldr	r3, [pc, #48]	; (800d7d4 <netif_add+0x190>)
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d7a8:	4a0a      	ldr	r2, [pc, #40]	; (800d7d4 <netif_add+0x190>)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3718      	adds	r7, #24
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	0801a04c 	.word	0x0801a04c
 800d7bc:	0801a0e0 	.word	0x0801a0e0
 800d7c0:	0801a09c 	.word	0x0801a09c
 800d7c4:	0801a0fc 	.word	0x0801a0fc
 800d7c8:	0801ee9c 	.word	0x0801ee9c
 800d7cc:	0800db27 	.word	0x0800db27
 800d7d0:	20001a08 	.word	0x20001a08
 800d7d4:	20011820 	.word	0x20011820
 800d7d8:	0801a120 	.word	0x0801a120
 800d7dc:	0801a134 	.word	0x0801a134

0800d7e0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f002 fd85 	bl	80102fc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d7f2:	6839      	ldr	r1, [r7, #0]
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f007 fabd 	bl	8014d74 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d7fa:	bf00      	nop
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
	...

0800d804 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d106      	bne.n	800d824 <netif_do_set_ipaddr+0x20>
 800d816:	4b1d      	ldr	r3, [pc, #116]	; (800d88c <netif_do_set_ipaddr+0x88>)
 800d818:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d81c:	491c      	ldr	r1, [pc, #112]	; (800d890 <netif_do_set_ipaddr+0x8c>)
 800d81e:	481d      	ldr	r0, [pc, #116]	; (800d894 <netif_do_set_ipaddr+0x90>)
 800d820:	f009 fdfe 	bl	8017420 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d106      	bne.n	800d838 <netif_do_set_ipaddr+0x34>
 800d82a:	4b18      	ldr	r3, [pc, #96]	; (800d88c <netif_do_set_ipaddr+0x88>)
 800d82c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d830:	4917      	ldr	r1, [pc, #92]	; (800d890 <netif_do_set_ipaddr+0x8c>)
 800d832:	4818      	ldr	r0, [pc, #96]	; (800d894 <netif_do_set_ipaddr+0x90>)
 800d834:	f009 fdf4 	bl	8017420 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	3304      	adds	r3, #4
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	429a      	cmp	r2, r3
 800d844:	d01c      	beq.n	800d880 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	3304      	adds	r3, #4
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d856:	f107 0314 	add.w	r3, r7, #20
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7ff ffbf 	bl	800d7e0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d002      	beq.n	800d86e <netif_do_set_ipaddr+0x6a>
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	e000      	b.n	800d870 <netif_do_set_ipaddr+0x6c>
 800d86e:	2300      	movs	r3, #0
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d874:	2101      	movs	r1, #1
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f000 f8d2 	bl	800da20 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d87c:	2301      	movs	r3, #1
 800d87e:	e000      	b.n	800d882 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d880:	2300      	movs	r3, #0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3718      	adds	r7, #24
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	0801a04c 	.word	0x0801a04c
 800d890:	0801a164 	.word	0x0801a164
 800d894:	0801a09c 	.word	0x0801a09c

0800d898 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	3308      	adds	r3, #8
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d00a      	beq.n	800d8c8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <netif_do_set_netmask+0x26>
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	e000      	b.n	800d8c0 <netif_do_set_netmask+0x28>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e000      	b.n	800d8ca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b085      	sub	sp, #20
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	60f8      	str	r0, [r7, #12]
 800d8de:	60b9      	str	r1, [r7, #8]
 800d8e0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	330c      	adds	r3, #12
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d00a      	beq.n	800d906 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <netif_do_set_gw+0x26>
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	e000      	b.n	800d8fe <netif_do_set_gw+0x28>
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d902:	2301      	movs	r3, #1
 800d904:	e000      	b.n	800d908 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3714      	adds	r7, #20
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b088      	sub	sp, #32
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d922:	2300      	movs	r3, #0
 800d924:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d926:	2300      	movs	r3, #0
 800d928:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d101      	bne.n	800d934 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d930:	4b1c      	ldr	r3, [pc, #112]	; (800d9a4 <netif_set_addr+0x90>)
 800d932:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d93a:	4b1a      	ldr	r3, [pc, #104]	; (800d9a4 <netif_set_addr+0x90>)
 800d93c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d944:	4b17      	ldr	r3, [pc, #92]	; (800d9a4 <netif_set_addr+0x90>)
 800d946:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d003      	beq.n	800d956 <netif_set_addr+0x42>
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d101      	bne.n	800d95a <netif_set_addr+0x46>
 800d956:	2301      	movs	r3, #1
 800d958:	e000      	b.n	800d95c <netif_set_addr+0x48>
 800d95a:	2300      	movs	r3, #0
 800d95c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d006      	beq.n	800d972 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d964:	f107 0310 	add.w	r3, r7, #16
 800d968:	461a      	mov	r2, r3
 800d96a:	68b9      	ldr	r1, [r7, #8]
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f7ff ff49 	bl	800d804 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d972:	69fa      	ldr	r2, [r7, #28]
 800d974:	6879      	ldr	r1, [r7, #4]
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f7ff ff8e 	bl	800d898 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d97c:	69ba      	ldr	r2, [r7, #24]
 800d97e:	6839      	ldr	r1, [r7, #0]
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7ff ffa8 	bl	800d8d6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d98c:	f107 0310 	add.w	r3, r7, #16
 800d990:	461a      	mov	r2, r3
 800d992:	68b9      	ldr	r1, [r7, #8]
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	f7ff ff35 	bl	800d804 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d99a:	bf00      	nop
 800d99c:	3720      	adds	r7, #32
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	0801ee9c 	.word	0x0801ee9c

0800d9a8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d9b0:	4a04      	ldr	r2, [pc, #16]	; (800d9c4 <netif_set_default+0x1c>)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d9b6:	bf00      	nop
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	20011824 	.word	0x20011824

0800d9c8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d107      	bne.n	800d9e6 <netif_set_up+0x1e>
 800d9d6:	4b0f      	ldr	r3, [pc, #60]	; (800da14 <netif_set_up+0x4c>)
 800d9d8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d9dc:	490e      	ldr	r1, [pc, #56]	; (800da18 <netif_set_up+0x50>)
 800d9de:	480f      	ldr	r0, [pc, #60]	; (800da1c <netif_set_up+0x54>)
 800d9e0:	f009 fd1e 	bl	8017420 <iprintf>
 800d9e4:	e013      	b.n	800da0e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9ec:	f003 0301 	and.w	r3, r3, #1
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10c      	bne.n	800da0e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9fa:	f043 0301 	orr.w	r3, r3, #1
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800da06:	2103      	movs	r1, #3
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 f809 	bl	800da20 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	0801a04c 	.word	0x0801a04c
 800da18:	0801a1d4 	.word	0x0801a1d4
 800da1c:	0801a09c 	.word	0x0801a09c

0800da20 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d106      	bne.n	800da40 <netif_issue_reports+0x20>
 800da32:	4b18      	ldr	r3, [pc, #96]	; (800da94 <netif_issue_reports+0x74>)
 800da34:	f240 326d 	movw	r2, #877	; 0x36d
 800da38:	4917      	ldr	r1, [pc, #92]	; (800da98 <netif_issue_reports+0x78>)
 800da3a:	4818      	ldr	r0, [pc, #96]	; (800da9c <netif_issue_reports+0x7c>)
 800da3c:	f009 fcf0 	bl	8017420 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da46:	f003 0304 	and.w	r3, r3, #4
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d01e      	beq.n	800da8c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da54:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d017      	beq.n	800da8c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800da5c:	78fb      	ldrb	r3, [r7, #3]
 800da5e:	f003 0301 	and.w	r3, r3, #1
 800da62:	2b00      	cmp	r3, #0
 800da64:	d013      	beq.n	800da8e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	3304      	adds	r3, #4
 800da6a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00e      	beq.n	800da8e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da76:	f003 0308 	and.w	r3, r3, #8
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d007      	beq.n	800da8e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	3304      	adds	r3, #4
 800da82:	4619      	mov	r1, r3
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f008 f8df 	bl	8015c48 <etharp_request>
 800da8a:	e000      	b.n	800da8e <netif_issue_reports+0x6e>
    return;
 800da8c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	0801a04c 	.word	0x0801a04c
 800da98:	0801a1f0 	.word	0x0801a1f0
 800da9c:	0801a09c 	.word	0x0801a09c

0800daa0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d107      	bne.n	800dabe <netif_set_down+0x1e>
 800daae:	4b12      	ldr	r3, [pc, #72]	; (800daf8 <netif_set_down+0x58>)
 800dab0:	f240 329b 	movw	r2, #923	; 0x39b
 800dab4:	4911      	ldr	r1, [pc, #68]	; (800dafc <netif_set_down+0x5c>)
 800dab6:	4812      	ldr	r0, [pc, #72]	; (800db00 <netif_set_down+0x60>)
 800dab8:	f009 fcb2 	bl	8017420 <iprintf>
 800dabc:	e019      	b.n	800daf2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dac4:	f003 0301 	and.w	r3, r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d012      	beq.n	800daf2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dad2:	f023 0301 	bic.w	r3, r3, #1
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dae4:	f003 0308 	and.w	r3, r3, #8
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d002      	beq.n	800daf2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f007 fc69 	bl	80153c4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	0801a04c 	.word	0x0801a04c
 800dafc:	0801a214 	.word	0x0801a214
 800db00:	0801a09c 	.word	0x0801a09c

0800db04 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	683a      	ldr	r2, [r7, #0]
 800db18:	61da      	str	r2, [r3, #28]
  }
}
 800db1a:	bf00      	nop
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800db26:	b480      	push	{r7}
 800db28:	b085      	sub	sp, #20
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	60f8      	str	r0, [r7, #12]
 800db2e:	60b9      	str	r1, [r7, #8]
 800db30:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800db32:	f06f 030b 	mvn.w	r3, #11
}
 800db36:	4618      	mov	r0, r3
 800db38:	3714      	adds	r7, #20
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
	...

0800db44 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800db4e:	79fb      	ldrb	r3, [r7, #7]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d013      	beq.n	800db7c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800db54:	4b0d      	ldr	r3, [pc, #52]	; (800db8c <netif_get_by_index+0x48>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	60fb      	str	r3, [r7, #12]
 800db5a:	e00c      	b.n	800db76 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db62:	3301      	adds	r3, #1
 800db64:	b2db      	uxtb	r3, r3
 800db66:	79fa      	ldrb	r2, [r7, #7]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d101      	bne.n	800db70 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	e006      	b.n	800db7e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	60fb      	str	r3, [r7, #12]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1ef      	bne.n	800db5c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3714      	adds	r7, #20
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	20011820 	.word	0x20011820

0800db90 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800db96:	4b0c      	ldr	r3, [pc, #48]	; (800dbc8 <pbuf_free_ooseq+0x38>)
 800db98:	2200      	movs	r2, #0
 800db9a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800db9c:	4b0b      	ldr	r3, [pc, #44]	; (800dbcc <pbuf_free_ooseq+0x3c>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	607b      	str	r3, [r7, #4]
 800dba2:	e00a      	b.n	800dbba <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d003      	beq.n	800dbb4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f002 fbe3 	bl	8010378 <tcp_free_ooseq>
      return;
 800dbb2:	e005      	b.n	800dbc0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	607b      	str	r3, [r7, #4]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1f1      	bne.n	800dba4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20011828 	.word	0x20011828
 800dbcc:	20011830 	.word	0x20011830

0800dbd0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800dbd4:	4b03      	ldr	r3, [pc, #12]	; (800dbe4 <pbuf_pool_is_empty+0x14>)
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dbda:	bf00      	nop
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	20011828 	.word	0x20011828

0800dbe8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b085      	sub	sp, #20
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	80fb      	strh	r3, [r7, #6]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	88fa      	ldrh	r2, [r7, #6]
 800dc0e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	88ba      	ldrh	r2, [r7, #4]
 800dc14:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800dc16:	8b3b      	ldrh	r3, [r7, #24]
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	7f3a      	ldrb	r2, [r7, #28]
 800dc22:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2201      	movs	r2, #1
 800dc28:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	73da      	strb	r2, [r3, #15]
}
 800dc30:	bf00      	nop
 800dc32:	3714      	adds	r7, #20
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08c      	sub	sp, #48	; 0x30
 800dc40:	af02      	add	r7, sp, #8
 800dc42:	4603      	mov	r3, r0
 800dc44:	71fb      	strb	r3, [r7, #7]
 800dc46:	460b      	mov	r3, r1
 800dc48:	80bb      	strh	r3, [r7, #4]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dc52:	887b      	ldrh	r3, [r7, #2]
 800dc54:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dc58:	d07f      	beq.n	800dd5a <pbuf_alloc+0x11e>
 800dc5a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dc5e:	f300 80c8 	bgt.w	800ddf2 <pbuf_alloc+0x1b6>
 800dc62:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dc66:	d010      	beq.n	800dc8a <pbuf_alloc+0x4e>
 800dc68:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dc6c:	f300 80c1 	bgt.w	800ddf2 <pbuf_alloc+0x1b6>
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d002      	beq.n	800dc7a <pbuf_alloc+0x3e>
 800dc74:	2b41      	cmp	r3, #65	; 0x41
 800dc76:	f040 80bc 	bne.w	800ddf2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dc7a:	887a      	ldrh	r2, [r7, #2]
 800dc7c:	88bb      	ldrh	r3, [r7, #4]
 800dc7e:	4619      	mov	r1, r3
 800dc80:	2000      	movs	r0, #0
 800dc82:	f000 f8d1 	bl	800de28 <pbuf_alloc_reference>
 800dc86:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800dc88:	e0bd      	b.n	800de06 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dc92:	88bb      	ldrh	r3, [r7, #4]
 800dc94:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dc96:	2008      	movs	r0, #8
 800dc98:	f7ff fc56 	bl	800d548 <memp_malloc>
 800dc9c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d109      	bne.n	800dcb8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800dca4:	f7ff ff94 	bl	800dbd0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d002      	beq.n	800dcb4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800dcae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcb0:	f000 faa8 	bl	800e204 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	e0a7      	b.n	800de08 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dcb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcba:	3303      	adds	r3, #3
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	f023 0303 	bic.w	r3, r3, #3
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	8b7a      	ldrh	r2, [r7, #26]
 800dccc:	4293      	cmp	r3, r2
 800dcce:	bf28      	it	cs
 800dcd0:	4613      	movcs	r3, r2
 800dcd2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dcd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcd6:	3310      	adds	r3, #16
 800dcd8:	693a      	ldr	r2, [r7, #16]
 800dcda:	4413      	add	r3, r2
 800dcdc:	3303      	adds	r3, #3
 800dcde:	f023 0303 	bic.w	r3, r3, #3
 800dce2:	4618      	mov	r0, r3
 800dce4:	89f9      	ldrh	r1, [r7, #14]
 800dce6:	8b7a      	ldrh	r2, [r7, #26]
 800dce8:	2300      	movs	r3, #0
 800dcea:	9301      	str	r3, [sp, #4]
 800dcec:	887b      	ldrh	r3, [r7, #2]
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	6938      	ldr	r0, [r7, #16]
 800dcf6:	f7ff ff77 	bl	800dbe8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	f003 0303 	and.w	r3, r3, #3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d006      	beq.n	800dd14 <pbuf_alloc+0xd8>
 800dd06:	4b42      	ldr	r3, [pc, #264]	; (800de10 <pbuf_alloc+0x1d4>)
 800dd08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd0c:	4941      	ldr	r1, [pc, #260]	; (800de14 <pbuf_alloc+0x1d8>)
 800dd0e:	4842      	ldr	r0, [pc, #264]	; (800de18 <pbuf_alloc+0x1dc>)
 800dd10:	f009 fb86 	bl	8017420 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dd14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd16:	3303      	adds	r3, #3
 800dd18:	f023 0303 	bic.w	r3, r3, #3
 800dd1c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800dd20:	d106      	bne.n	800dd30 <pbuf_alloc+0xf4>
 800dd22:	4b3b      	ldr	r3, [pc, #236]	; (800de10 <pbuf_alloc+0x1d4>)
 800dd24:	f44f 7281 	mov.w	r2, #258	; 0x102
 800dd28:	493c      	ldr	r1, [pc, #240]	; (800de1c <pbuf_alloc+0x1e0>)
 800dd2a:	483b      	ldr	r0, [pc, #236]	; (800de18 <pbuf_alloc+0x1dc>)
 800dd2c:	f009 fb78 	bl	8017420 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d102      	bne.n	800dd3c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	627b      	str	r3, [r7, #36]	; 0x24
 800dd3a:	e002      	b.n	800dd42 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	693a      	ldr	r2, [r7, #16]
 800dd40:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dd46:	8b7a      	ldrh	r2, [r7, #26]
 800dd48:	89fb      	ldrh	r3, [r7, #14]
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800dd52:	8b7b      	ldrh	r3, [r7, #26]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d19e      	bne.n	800dc96 <pbuf_alloc+0x5a>
      break;
 800dd58:	e055      	b.n	800de06 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dd5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd5c:	3303      	adds	r3, #3
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	f023 0303 	bic.w	r3, r3, #3
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	88bb      	ldrh	r3, [r7, #4]
 800dd68:	3303      	adds	r3, #3
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	f023 0303 	bic.w	r3, r3, #3
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	4413      	add	r3, r2
 800dd74:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dd76:	8b3b      	ldrh	r3, [r7, #24]
 800dd78:	3310      	adds	r3, #16
 800dd7a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dd7c:	8b3a      	ldrh	r2, [r7, #24]
 800dd7e:	88bb      	ldrh	r3, [r7, #4]
 800dd80:	3303      	adds	r3, #3
 800dd82:	f023 0303 	bic.w	r3, r3, #3
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d306      	bcc.n	800dd98 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dd8a:	8afa      	ldrh	r2, [r7, #22]
 800dd8c:	88bb      	ldrh	r3, [r7, #4]
 800dd8e:	3303      	adds	r3, #3
 800dd90:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d201      	bcs.n	800dd9c <pbuf_alloc+0x160>
        return NULL;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	e035      	b.n	800de08 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dd9c:	8afb      	ldrh	r3, [r7, #22]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7ff fa64 	bl	800d26c <mem_malloc>
 800dda4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800dda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d101      	bne.n	800ddb0 <pbuf_alloc+0x174>
        return NULL;
 800ddac:	2300      	movs	r3, #0
 800ddae:	e02b      	b.n	800de08 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ddb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddb2:	3310      	adds	r3, #16
 800ddb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddb6:	4413      	add	r3, r2
 800ddb8:	3303      	adds	r3, #3
 800ddba:	f023 0303 	bic.w	r3, r3, #3
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	88b9      	ldrh	r1, [r7, #4]
 800ddc2:	88ba      	ldrh	r2, [r7, #4]
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	9301      	str	r3, [sp, #4]
 800ddc8:	887b      	ldrh	r3, [r7, #2]
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	4601      	mov	r1, r0
 800ddd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddd2:	f7ff ff09 	bl	800dbe8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	f003 0303 	and.w	r3, r3, #3
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d010      	beq.n	800de04 <pbuf_alloc+0x1c8>
 800dde2:	4b0b      	ldr	r3, [pc, #44]	; (800de10 <pbuf_alloc+0x1d4>)
 800dde4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800dde8:	490d      	ldr	r1, [pc, #52]	; (800de20 <pbuf_alloc+0x1e4>)
 800ddea:	480b      	ldr	r0, [pc, #44]	; (800de18 <pbuf_alloc+0x1dc>)
 800ddec:	f009 fb18 	bl	8017420 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ddf0:	e008      	b.n	800de04 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ddf2:	4b07      	ldr	r3, [pc, #28]	; (800de10 <pbuf_alloc+0x1d4>)
 800ddf4:	f240 1227 	movw	r2, #295	; 0x127
 800ddf8:	490a      	ldr	r1, [pc, #40]	; (800de24 <pbuf_alloc+0x1e8>)
 800ddfa:	4807      	ldr	r0, [pc, #28]	; (800de18 <pbuf_alloc+0x1dc>)
 800ddfc:	f009 fb10 	bl	8017420 <iprintf>
      return NULL;
 800de00:	2300      	movs	r3, #0
 800de02:	e001      	b.n	800de08 <pbuf_alloc+0x1cc>
      break;
 800de04:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800de06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3728      	adds	r7, #40	; 0x28
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	0801a27c 	.word	0x0801a27c
 800de14:	0801a2ac 	.word	0x0801a2ac
 800de18:	0801a2dc 	.word	0x0801a2dc
 800de1c:	0801a304 	.word	0x0801a304
 800de20:	0801a338 	.word	0x0801a338
 800de24:	0801a364 	.word	0x0801a364

0800de28 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af02      	add	r7, sp, #8
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	460b      	mov	r3, r1
 800de32:	807b      	strh	r3, [r7, #2]
 800de34:	4613      	mov	r3, r2
 800de36:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800de38:	883b      	ldrh	r3, [r7, #0]
 800de3a:	2b41      	cmp	r3, #65	; 0x41
 800de3c:	d009      	beq.n	800de52 <pbuf_alloc_reference+0x2a>
 800de3e:	883b      	ldrh	r3, [r7, #0]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d006      	beq.n	800de52 <pbuf_alloc_reference+0x2a>
 800de44:	4b0f      	ldr	r3, [pc, #60]	; (800de84 <pbuf_alloc_reference+0x5c>)
 800de46:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800de4a:	490f      	ldr	r1, [pc, #60]	; (800de88 <pbuf_alloc_reference+0x60>)
 800de4c:	480f      	ldr	r0, [pc, #60]	; (800de8c <pbuf_alloc_reference+0x64>)
 800de4e:	f009 fae7 	bl	8017420 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800de52:	2007      	movs	r0, #7
 800de54:	f7ff fb78 	bl	800d548 <memp_malloc>
 800de58:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d101      	bne.n	800de64 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800de60:	2300      	movs	r3, #0
 800de62:	e00b      	b.n	800de7c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800de64:	8879      	ldrh	r1, [r7, #2]
 800de66:	887a      	ldrh	r2, [r7, #2]
 800de68:	2300      	movs	r3, #0
 800de6a:	9301      	str	r3, [sp, #4]
 800de6c:	883b      	ldrh	r3, [r7, #0]
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	460b      	mov	r3, r1
 800de72:	6879      	ldr	r1, [r7, #4]
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f7ff feb7 	bl	800dbe8 <pbuf_init_alloced_pbuf>
  return p;
 800de7a:	68fb      	ldr	r3, [r7, #12]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3710      	adds	r7, #16
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	0801a27c 	.word	0x0801a27c
 800de88:	0801a380 	.word	0x0801a380
 800de8c:	0801a2dc 	.word	0x0801a2dc

0800de90 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af02      	add	r7, sp, #8
 800de96:	607b      	str	r3, [r7, #4]
 800de98:	4603      	mov	r3, r0
 800de9a:	73fb      	strb	r3, [r7, #15]
 800de9c:	460b      	mov	r3, r1
 800de9e:	81bb      	strh	r3, [r7, #12]
 800dea0:	4613      	mov	r3, r2
 800dea2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dea4:	7bfb      	ldrb	r3, [r7, #15]
 800dea6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dea8:	8a7b      	ldrh	r3, [r7, #18]
 800deaa:	3303      	adds	r3, #3
 800deac:	f023 0203 	bic.w	r2, r3, #3
 800deb0:	89bb      	ldrh	r3, [r7, #12]
 800deb2:	441a      	add	r2, r3
 800deb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d901      	bls.n	800debe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	e018      	b.n	800def0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d007      	beq.n	800ded4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dec4:	8a7b      	ldrh	r3, [r7, #18]
 800dec6:	3303      	adds	r3, #3
 800dec8:	f023 0303 	bic.w	r3, r3, #3
 800decc:	6a3a      	ldr	r2, [r7, #32]
 800dece:	4413      	add	r3, r2
 800ded0:	617b      	str	r3, [r7, #20]
 800ded2:	e001      	b.n	800ded8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ded4:	2300      	movs	r3, #0
 800ded6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	89b9      	ldrh	r1, [r7, #12]
 800dedc:	89ba      	ldrh	r2, [r7, #12]
 800dede:	2302      	movs	r3, #2
 800dee0:	9301      	str	r3, [sp, #4]
 800dee2:	897b      	ldrh	r3, [r7, #10]
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	460b      	mov	r3, r1
 800dee8:	6979      	ldr	r1, [r7, #20]
 800deea:	f7ff fe7d 	bl	800dbe8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800deee:	687b      	ldr	r3, [r7, #4]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3718      	adds	r7, #24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	460b      	mov	r3, r1
 800df02:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d106      	bne.n	800df18 <pbuf_realloc+0x20>
 800df0a:	4b3a      	ldr	r3, [pc, #232]	; (800dff4 <pbuf_realloc+0xfc>)
 800df0c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800df10:	4939      	ldr	r1, [pc, #228]	; (800dff8 <pbuf_realloc+0x100>)
 800df12:	483a      	ldr	r0, [pc, #232]	; (800dffc <pbuf_realloc+0x104>)
 800df14:	f009 fa84 	bl	8017420 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	891b      	ldrh	r3, [r3, #8]
 800df1c:	887a      	ldrh	r2, [r7, #2]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d263      	bcs.n	800dfea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	891a      	ldrh	r2, [r3, #8]
 800df26:	887b      	ldrh	r3, [r7, #2]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800df2c:	887b      	ldrh	r3, [r7, #2]
 800df2e:	817b      	strh	r3, [r7, #10]
  q = p;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800df34:	e018      	b.n	800df68 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	895b      	ldrh	r3, [r3, #10]
 800df3a:	897a      	ldrh	r2, [r7, #10]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	891a      	ldrh	r2, [r3, #8]
 800df44:	893b      	ldrh	r3, [r7, #8]
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	b29a      	uxth	r2, r3
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d106      	bne.n	800df68 <pbuf_realloc+0x70>
 800df5a:	4b26      	ldr	r3, [pc, #152]	; (800dff4 <pbuf_realloc+0xfc>)
 800df5c:	f240 12af 	movw	r2, #431	; 0x1af
 800df60:	4927      	ldr	r1, [pc, #156]	; (800e000 <pbuf_realloc+0x108>)
 800df62:	4826      	ldr	r0, [pc, #152]	; (800dffc <pbuf_realloc+0x104>)
 800df64:	f009 fa5c 	bl	8017420 <iprintf>
  while (rem_len > q->len) {
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	895b      	ldrh	r3, [r3, #10]
 800df6c:	897a      	ldrh	r2, [r7, #10]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d8e1      	bhi.n	800df36 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	7b1b      	ldrb	r3, [r3, #12]
 800df76:	f003 030f 	and.w	r3, r3, #15
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d121      	bne.n	800dfc2 <pbuf_realloc+0xca>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	895b      	ldrh	r3, [r3, #10]
 800df82:	897a      	ldrh	r2, [r7, #10]
 800df84:	429a      	cmp	r2, r3
 800df86:	d01c      	beq.n	800dfc2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	7b5b      	ldrb	r3, [r3, #13]
 800df8c:	f003 0302 	and.w	r3, r3, #2
 800df90:	2b00      	cmp	r3, #0
 800df92:	d116      	bne.n	800dfc2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	685a      	ldr	r2, [r3, #4]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	b29a      	uxth	r2, r3
 800df9e:	897b      	ldrh	r3, [r7, #10]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7ff f864 	bl	800d074 <mem_trim>
 800dfac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d106      	bne.n	800dfc2 <pbuf_realloc+0xca>
 800dfb4:	4b0f      	ldr	r3, [pc, #60]	; (800dff4 <pbuf_realloc+0xfc>)
 800dfb6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dfba:	4912      	ldr	r1, [pc, #72]	; (800e004 <pbuf_realloc+0x10c>)
 800dfbc:	480f      	ldr	r0, [pc, #60]	; (800dffc <pbuf_realloc+0x104>)
 800dfbe:	f009 fa2f 	bl	8017420 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	897a      	ldrh	r2, [r7, #10]
 800dfc6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	895a      	ldrh	r2, [r3, #10]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d004      	beq.n	800dfe2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 f911 	bl	800e204 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	601a      	str	r2, [r3, #0]
 800dfe8:	e000      	b.n	800dfec <pbuf_realloc+0xf4>
    return;
 800dfea:	bf00      	nop

}
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	0801a27c 	.word	0x0801a27c
 800dff8:	0801a394 	.word	0x0801a394
 800dffc:	0801a2dc 	.word	0x0801a2dc
 800e000:	0801a3ac 	.word	0x0801a3ac
 800e004:	0801a3c4 	.word	0x0801a3c4

0800e008 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	4613      	mov	r3, r2
 800e014:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d106      	bne.n	800e02a <pbuf_add_header_impl+0x22>
 800e01c:	4b2b      	ldr	r3, [pc, #172]	; (800e0cc <pbuf_add_header_impl+0xc4>)
 800e01e:	f240 12df 	movw	r2, #479	; 0x1df
 800e022:	492b      	ldr	r1, [pc, #172]	; (800e0d0 <pbuf_add_header_impl+0xc8>)
 800e024:	482b      	ldr	r0, [pc, #172]	; (800e0d4 <pbuf_add_header_impl+0xcc>)
 800e026:	f009 f9fb 	bl	8017420 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d003      	beq.n	800e038 <pbuf_add_header_impl+0x30>
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e036:	d301      	bcc.n	800e03c <pbuf_add_header_impl+0x34>
    return 1;
 800e038:	2301      	movs	r3, #1
 800e03a:	e043      	b.n	800e0c4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d101      	bne.n	800e046 <pbuf_add_header_impl+0x3e>
    return 0;
 800e042:	2300      	movs	r3, #0
 800e044:	e03e      	b.n	800e0c4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	891a      	ldrh	r2, [r3, #8]
 800e04e:	8a7b      	ldrh	r3, [r7, #18]
 800e050:	4413      	add	r3, r2
 800e052:	b29b      	uxth	r3, r3
 800e054:	8a7a      	ldrh	r2, [r7, #18]
 800e056:	429a      	cmp	r2, r3
 800e058:	d901      	bls.n	800e05e <pbuf_add_header_impl+0x56>
    return 1;
 800e05a:	2301      	movs	r3, #1
 800e05c:	e032      	b.n	800e0c4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	7b1b      	ldrb	r3, [r3, #12]
 800e062:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e064:	8a3b      	ldrh	r3, [r7, #16]
 800e066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00c      	beq.n	800e088 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	425b      	negs	r3, r3
 800e076:	4413      	add	r3, r2
 800e078:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	3310      	adds	r3, #16
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	429a      	cmp	r2, r3
 800e082:	d20d      	bcs.n	800e0a0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e084:	2301      	movs	r3, #1
 800e086:	e01d      	b.n	800e0c4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e088:	79fb      	ldrb	r3, [r7, #7]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d006      	beq.n	800e09c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	685a      	ldr	r2, [r3, #4]
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	425b      	negs	r3, r3
 800e096:	4413      	add	r3, r2
 800e098:	617b      	str	r3, [r7, #20]
 800e09a:	e001      	b.n	800e0a0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e09c:	2301      	movs	r3, #1
 800e09e:	e011      	b.n	800e0c4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	697a      	ldr	r2, [r7, #20]
 800e0a4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	895a      	ldrh	r2, [r3, #10]
 800e0aa:	8a7b      	ldrh	r3, [r7, #18]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	891a      	ldrh	r2, [r3, #8]
 800e0b8:	8a7b      	ldrh	r3, [r7, #18]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	b29a      	uxth	r2, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	811a      	strh	r2, [r3, #8]


  return 0;
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3718      	adds	r7, #24
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	0801a27c 	.word	0x0801a27c
 800e0d0:	0801a3e0 	.word	0x0801a3e0
 800e0d4:	0801a2dc 	.word	0x0801a2dc

0800e0d8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	6839      	ldr	r1, [r7, #0]
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f7ff ff8e 	bl	800e008 <pbuf_add_header_impl>
 800e0ec:	4603      	mov	r3, r0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
	...

0800e0f8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d106      	bne.n	800e116 <pbuf_remove_header+0x1e>
 800e108:	4b20      	ldr	r3, [pc, #128]	; (800e18c <pbuf_remove_header+0x94>)
 800e10a:	f240 224b 	movw	r2, #587	; 0x24b
 800e10e:	4920      	ldr	r1, [pc, #128]	; (800e190 <pbuf_remove_header+0x98>)
 800e110:	4820      	ldr	r0, [pc, #128]	; (800e194 <pbuf_remove_header+0x9c>)
 800e112:	f009 f985 	bl	8017420 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d003      	beq.n	800e124 <pbuf_remove_header+0x2c>
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e122:	d301      	bcc.n	800e128 <pbuf_remove_header+0x30>
    return 1;
 800e124:	2301      	movs	r3, #1
 800e126:	e02c      	b.n	800e182 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <pbuf_remove_header+0x3a>
    return 0;
 800e12e:	2300      	movs	r3, #0
 800e130:	e027      	b.n	800e182 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	895b      	ldrh	r3, [r3, #10]
 800e13a:	89fa      	ldrh	r2, [r7, #14]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d908      	bls.n	800e152 <pbuf_remove_header+0x5a>
 800e140:	4b12      	ldr	r3, [pc, #72]	; (800e18c <pbuf_remove_header+0x94>)
 800e142:	f240 2255 	movw	r2, #597	; 0x255
 800e146:	4914      	ldr	r1, [pc, #80]	; (800e198 <pbuf_remove_header+0xa0>)
 800e148:	4812      	ldr	r0, [pc, #72]	; (800e194 <pbuf_remove_header+0x9c>)
 800e14a:	f009 f969 	bl	8017420 <iprintf>
 800e14e:	2301      	movs	r3, #1
 800e150:	e017      	b.n	800e182 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	685a      	ldr	r2, [r3, #4]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	441a      	add	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	895a      	ldrh	r2, [r3, #10]
 800e168:	89fb      	ldrh	r3, [r7, #14]
 800e16a:	1ad3      	subs	r3, r2, r3
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	891a      	ldrh	r2, [r3, #8]
 800e176:	89fb      	ldrh	r3, [r7, #14]
 800e178:	1ad3      	subs	r3, r2, r3
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	0801a27c 	.word	0x0801a27c
 800e190:	0801a3e0 	.word	0x0801a3e0
 800e194:	0801a2dc 	.word	0x0801a2dc
 800e198:	0801a3ec 	.word	0x0801a3ec

0800e19c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	807b      	strh	r3, [r7, #2]
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e1ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	da08      	bge.n	800e1c6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e1b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e1b8:	425b      	negs	r3, r3
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7ff ff9b 	bl	800e0f8 <pbuf_remove_header>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	e007      	b.n	800e1d6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e1c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e1ca:	787a      	ldrb	r2, [r7, #1]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff ff1a 	bl	800e008 <pbuf_add_header_impl>
 800e1d4:	4603      	mov	r3, r0
  }
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3708      	adds	r7, #8
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b082      	sub	sp, #8
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e1ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f7ff ffd2 	bl	800e19c <pbuf_header_impl>
 800e1f8:	4603      	mov	r3, r0
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3708      	adds	r7, #8
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
	...

0800e204 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b086      	sub	sp, #24
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10b      	bne.n	800e22a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d106      	bne.n	800e226 <pbuf_free+0x22>
 800e218:	4b38      	ldr	r3, [pc, #224]	; (800e2fc <pbuf_free+0xf8>)
 800e21a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e21e:	4938      	ldr	r1, [pc, #224]	; (800e300 <pbuf_free+0xfc>)
 800e220:	4838      	ldr	r0, [pc, #224]	; (800e304 <pbuf_free+0x100>)
 800e222:	f009 f8fd 	bl	8017420 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e226:	2300      	movs	r3, #0
 800e228:	e063      	b.n	800e2f2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e22a:	2300      	movs	r3, #0
 800e22c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e22e:	e05c      	b.n	800e2ea <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	7b9b      	ldrb	r3, [r3, #14]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d106      	bne.n	800e246 <pbuf_free+0x42>
 800e238:	4b30      	ldr	r3, [pc, #192]	; (800e2fc <pbuf_free+0xf8>)
 800e23a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e23e:	4932      	ldr	r1, [pc, #200]	; (800e308 <pbuf_free+0x104>)
 800e240:	4830      	ldr	r0, [pc, #192]	; (800e304 <pbuf_free+0x100>)
 800e242:	f009 f8ed 	bl	8017420 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	7b9b      	ldrb	r3, [r3, #14]
 800e24a:	3b01      	subs	r3, #1
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	739a      	strb	r2, [r3, #14]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	7b9b      	ldrb	r3, [r3, #14]
 800e256:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e258:	7dbb      	ldrb	r3, [r7, #22]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d143      	bne.n	800e2e6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7b1b      	ldrb	r3, [r3, #12]
 800e268:	f003 030f 	and.w	r3, r3, #15
 800e26c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	7b5b      	ldrb	r3, [r3, #13]
 800e272:	f003 0302 	and.w	r3, r3, #2
 800e276:	2b00      	cmp	r3, #0
 800e278:	d011      	beq.n	800e29e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d106      	bne.n	800e294 <pbuf_free+0x90>
 800e286:	4b1d      	ldr	r3, [pc, #116]	; (800e2fc <pbuf_free+0xf8>)
 800e288:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e28c:	491f      	ldr	r1, [pc, #124]	; (800e30c <pbuf_free+0x108>)
 800e28e:	481d      	ldr	r0, [pc, #116]	; (800e304 <pbuf_free+0x100>)
 800e290:	f009 f8c6 	bl	8017420 <iprintf>
        pc->custom_free_function(p);
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	691b      	ldr	r3, [r3, #16]
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	4798      	blx	r3
 800e29c:	e01d      	b.n	800e2da <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
 800e2a0:	2b02      	cmp	r3, #2
 800e2a2:	d104      	bne.n	800e2ae <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e2a4:	6879      	ldr	r1, [r7, #4]
 800e2a6:	2008      	movs	r0, #8
 800e2a8:	f7ff f99a 	bl	800d5e0 <memp_free>
 800e2ac:	e015      	b.n	800e2da <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e2ae:	7bfb      	ldrb	r3, [r7, #15]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d104      	bne.n	800e2be <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e2b4:	6879      	ldr	r1, [r7, #4]
 800e2b6:	2007      	movs	r0, #7
 800e2b8:	f7ff f992 	bl	800d5e0 <memp_free>
 800e2bc:	e00d      	b.n	800e2da <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d103      	bne.n	800e2cc <pbuf_free+0xc8>
          mem_free(p);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7fe fe6b 	bl	800cfa0 <mem_free>
 800e2ca:	e006      	b.n	800e2da <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e2cc:	4b0b      	ldr	r3, [pc, #44]	; (800e2fc <pbuf_free+0xf8>)
 800e2ce:	f240 320f 	movw	r2, #783	; 0x30f
 800e2d2:	490f      	ldr	r1, [pc, #60]	; (800e310 <pbuf_free+0x10c>)
 800e2d4:	480b      	ldr	r0, [pc, #44]	; (800e304 <pbuf_free+0x100>)
 800e2d6:	f009 f8a3 	bl	8017420 <iprintf>
        }
      }
      count++;
 800e2da:	7dfb      	ldrb	r3, [r7, #23]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	607b      	str	r3, [r7, #4]
 800e2e4:	e001      	b.n	800e2ea <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d19f      	bne.n	800e230 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e2f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3718      	adds	r7, #24
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	0801a27c 	.word	0x0801a27c
 800e300:	0801a3e0 	.word	0x0801a3e0
 800e304:	0801a2dc 	.word	0x0801a2dc
 800e308:	0801a40c 	.word	0x0801a40c
 800e30c:	0801a424 	.word	0x0801a424
 800e310:	0801a448 	.word	0x0801a448

0800e314 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e31c:	2300      	movs	r3, #0
 800e31e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e320:	e005      	b.n	800e32e <pbuf_clen+0x1a>
    ++len;
 800e322:	89fb      	ldrh	r3, [r7, #14]
 800e324:	3301      	adds	r3, #1
 800e326:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1f6      	bne.n	800e322 <pbuf_clen+0xe>
  }
  return len;
 800e334:	89fb      	ldrh	r3, [r7, #14]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
	...

0800e344 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d010      	beq.n	800e374 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	7b9b      	ldrb	r3, [r3, #14]
 800e356:	3301      	adds	r3, #1
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	7b9b      	ldrb	r3, [r3, #14]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d106      	bne.n	800e374 <pbuf_ref+0x30>
 800e366:	4b05      	ldr	r3, [pc, #20]	; (800e37c <pbuf_ref+0x38>)
 800e368:	f240 3242 	movw	r2, #834	; 0x342
 800e36c:	4904      	ldr	r1, [pc, #16]	; (800e380 <pbuf_ref+0x3c>)
 800e36e:	4805      	ldr	r0, [pc, #20]	; (800e384 <pbuf_ref+0x40>)
 800e370:	f009 f856 	bl	8017420 <iprintf>
  }
}
 800e374:	bf00      	nop
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	0801a27c 	.word	0x0801a27c
 800e380:	0801a45c 	.word	0x0801a45c
 800e384:	0801a2dc 	.word	0x0801a2dc

0800e388 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d002      	beq.n	800e39e <pbuf_cat+0x16>
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d107      	bne.n	800e3ae <pbuf_cat+0x26>
 800e39e:	4b20      	ldr	r3, [pc, #128]	; (800e420 <pbuf_cat+0x98>)
 800e3a0:	f240 3259 	movw	r2, #857	; 0x359
 800e3a4:	491f      	ldr	r1, [pc, #124]	; (800e424 <pbuf_cat+0x9c>)
 800e3a6:	4820      	ldr	r0, [pc, #128]	; (800e428 <pbuf_cat+0xa0>)
 800e3a8:	f009 f83a 	bl	8017420 <iprintf>
 800e3ac:	e034      	b.n	800e418 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	60fb      	str	r3, [r7, #12]
 800e3b2:	e00a      	b.n	800e3ca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	891a      	ldrh	r2, [r3, #8]
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	891b      	ldrh	r3, [r3, #8]
 800e3bc:	4413      	add	r3, r2
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	60fb      	str	r3, [r7, #12]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1f0      	bne.n	800e3b4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	891a      	ldrh	r2, [r3, #8]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	895b      	ldrh	r3, [r3, #10]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d006      	beq.n	800e3ec <pbuf_cat+0x64>
 800e3de:	4b10      	ldr	r3, [pc, #64]	; (800e420 <pbuf_cat+0x98>)
 800e3e0:	f240 3262 	movw	r2, #866	; 0x362
 800e3e4:	4911      	ldr	r1, [pc, #68]	; (800e42c <pbuf_cat+0xa4>)
 800e3e6:	4810      	ldr	r0, [pc, #64]	; (800e428 <pbuf_cat+0xa0>)
 800e3e8:	f009 f81a 	bl	8017420 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d006      	beq.n	800e402 <pbuf_cat+0x7a>
 800e3f4:	4b0a      	ldr	r3, [pc, #40]	; (800e420 <pbuf_cat+0x98>)
 800e3f6:	f240 3263 	movw	r2, #867	; 0x363
 800e3fa:	490d      	ldr	r1, [pc, #52]	; (800e430 <pbuf_cat+0xa8>)
 800e3fc:	480a      	ldr	r0, [pc, #40]	; (800e428 <pbuf_cat+0xa0>)
 800e3fe:	f009 f80f 	bl	8017420 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	891a      	ldrh	r2, [r3, #8]
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	891b      	ldrh	r3, [r3, #8]
 800e40a:	4413      	add	r3, r2
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	683a      	ldr	r2, [r7, #0]
 800e416:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	0801a27c 	.word	0x0801a27c
 800e424:	0801a470 	.word	0x0801a470
 800e428:	0801a2dc 	.word	0x0801a2dc
 800e42c:	0801a4a8 	.word	0x0801a4a8
 800e430:	0801a4d8 	.word	0x0801a4d8

0800e434 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b086      	sub	sp, #24
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e43e:	2300      	movs	r3, #0
 800e440:	617b      	str	r3, [r7, #20]
 800e442:	2300      	movs	r3, #0
 800e444:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d008      	beq.n	800e45e <pbuf_copy+0x2a>
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d005      	beq.n	800e45e <pbuf_copy+0x2a>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	891a      	ldrh	r2, [r3, #8]
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	891b      	ldrh	r3, [r3, #8]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d209      	bcs.n	800e472 <pbuf_copy+0x3e>
 800e45e:	4b57      	ldr	r3, [pc, #348]	; (800e5bc <pbuf_copy+0x188>)
 800e460:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e464:	4956      	ldr	r1, [pc, #344]	; (800e5c0 <pbuf_copy+0x18c>)
 800e466:	4857      	ldr	r0, [pc, #348]	; (800e5c4 <pbuf_copy+0x190>)
 800e468:	f008 ffda 	bl	8017420 <iprintf>
 800e46c:	f06f 030f 	mvn.w	r3, #15
 800e470:	e09f      	b.n	800e5b2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	895b      	ldrh	r3, [r3, #10]
 800e476:	461a      	mov	r2, r3
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	1ad2      	subs	r2, r2, r3
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	895b      	ldrh	r3, [r3, #10]
 800e480:	4619      	mov	r1, r3
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	1acb      	subs	r3, r1, r3
 800e486:	429a      	cmp	r2, r3
 800e488:	d306      	bcc.n	800e498 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	895b      	ldrh	r3, [r3, #10]
 800e48e:	461a      	mov	r2, r3
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	1ad3      	subs	r3, r2, r3
 800e494:	60fb      	str	r3, [r7, #12]
 800e496:	e005      	b.n	800e4a4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	895b      	ldrh	r3, [r3, #10]
 800e49c:	461a      	mov	r2, r3
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	685a      	ldr	r2, [r3, #4]
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	18d0      	adds	r0, r2, r3
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	685a      	ldr	r2, [r3, #4]
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	f008 ff82 	bl	80173c0 <memcpy>
    offset_to += len;
 800e4bc:	697a      	ldr	r2, [r7, #20]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e4c4:	693a      	ldr	r2, [r7, #16]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	895b      	ldrh	r3, [r3, #10]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d906      	bls.n	800e4e6 <pbuf_copy+0xb2>
 800e4d8:	4b38      	ldr	r3, [pc, #224]	; (800e5bc <pbuf_copy+0x188>)
 800e4da:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e4de:	493a      	ldr	r1, [pc, #232]	; (800e5c8 <pbuf_copy+0x194>)
 800e4e0:	4838      	ldr	r0, [pc, #224]	; (800e5c4 <pbuf_copy+0x190>)
 800e4e2:	f008 ff9d 	bl	8017420 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	895b      	ldrh	r3, [r3, #10]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d906      	bls.n	800e500 <pbuf_copy+0xcc>
 800e4f2:	4b32      	ldr	r3, [pc, #200]	; (800e5bc <pbuf_copy+0x188>)
 800e4f4:	f240 32da 	movw	r2, #986	; 0x3da
 800e4f8:	4934      	ldr	r1, [pc, #208]	; (800e5cc <pbuf_copy+0x198>)
 800e4fa:	4832      	ldr	r0, [pc, #200]	; (800e5c4 <pbuf_copy+0x190>)
 800e4fc:	f008 ff90 	bl	8017420 <iprintf>
    if (offset_from >= p_from->len) {
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	895b      	ldrh	r3, [r3, #10]
 800e504:	461a      	mov	r2, r3
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	4293      	cmp	r3, r2
 800e50a:	d304      	bcc.n	800e516 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e50c:	2300      	movs	r3, #0
 800e50e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	895b      	ldrh	r3, [r3, #10]
 800e51a:	461a      	mov	r2, r3
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	4293      	cmp	r3, r2
 800e520:	d114      	bne.n	800e54c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d10c      	bne.n	800e54c <pbuf_copy+0x118>
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d009      	beq.n	800e54c <pbuf_copy+0x118>
 800e538:	4b20      	ldr	r3, [pc, #128]	; (800e5bc <pbuf_copy+0x188>)
 800e53a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e53e:	4924      	ldr	r1, [pc, #144]	; (800e5d0 <pbuf_copy+0x19c>)
 800e540:	4820      	ldr	r0, [pc, #128]	; (800e5c4 <pbuf_copy+0x190>)
 800e542:	f008 ff6d 	bl	8017420 <iprintf>
 800e546:	f06f 030f 	mvn.w	r3, #15
 800e54a:	e032      	b.n	800e5b2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d013      	beq.n	800e57a <pbuf_copy+0x146>
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	895a      	ldrh	r2, [r3, #10]
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	891b      	ldrh	r3, [r3, #8]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d10d      	bne.n	800e57a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d009      	beq.n	800e57a <pbuf_copy+0x146>
 800e566:	4b15      	ldr	r3, [pc, #84]	; (800e5bc <pbuf_copy+0x188>)
 800e568:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e56c:	4919      	ldr	r1, [pc, #100]	; (800e5d4 <pbuf_copy+0x1a0>)
 800e56e:	4815      	ldr	r0, [pc, #84]	; (800e5c4 <pbuf_copy+0x190>)
 800e570:	f008 ff56 	bl	8017420 <iprintf>
 800e574:	f06f 0305 	mvn.w	r3, #5
 800e578:	e01b      	b.n	800e5b2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d013      	beq.n	800e5a8 <pbuf_copy+0x174>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	895a      	ldrh	r2, [r3, #10]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	891b      	ldrh	r3, [r3, #8]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d10d      	bne.n	800e5a8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d009      	beq.n	800e5a8 <pbuf_copy+0x174>
 800e594:	4b09      	ldr	r3, [pc, #36]	; (800e5bc <pbuf_copy+0x188>)
 800e596:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e59a:	490e      	ldr	r1, [pc, #56]	; (800e5d4 <pbuf_copy+0x1a0>)
 800e59c:	4809      	ldr	r0, [pc, #36]	; (800e5c4 <pbuf_copy+0x190>)
 800e59e:	f008 ff3f 	bl	8017420 <iprintf>
 800e5a2:	f06f 0305 	mvn.w	r3, #5
 800e5a6:	e004      	b.n	800e5b2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f47f af61 	bne.w	800e472 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e5b0:	2300      	movs	r3, #0
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3718      	adds	r7, #24
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	0801a27c 	.word	0x0801a27c
 800e5c0:	0801a524 	.word	0x0801a524
 800e5c4:	0801a2dc 	.word	0x0801a2dc
 800e5c8:	0801a554 	.word	0x0801a554
 800e5cc:	0801a56c 	.word	0x0801a56c
 800e5d0:	0801a588 	.word	0x0801a588
 800e5d4:	0801a598 	.word	0x0801a598

0800e5d8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b088      	sub	sp, #32
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	4611      	mov	r1, r2
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	80fb      	strh	r3, [r7, #6]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d108      	bne.n	800e60e <pbuf_copy_partial+0x36>
 800e5fc:	4b2b      	ldr	r3, [pc, #172]	; (800e6ac <pbuf_copy_partial+0xd4>)
 800e5fe:	f240 420a 	movw	r2, #1034	; 0x40a
 800e602:	492b      	ldr	r1, [pc, #172]	; (800e6b0 <pbuf_copy_partial+0xd8>)
 800e604:	482b      	ldr	r0, [pc, #172]	; (800e6b4 <pbuf_copy_partial+0xdc>)
 800e606:	f008 ff0b 	bl	8017420 <iprintf>
 800e60a:	2300      	movs	r3, #0
 800e60c:	e04a      	b.n	800e6a4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d108      	bne.n	800e626 <pbuf_copy_partial+0x4e>
 800e614:	4b25      	ldr	r3, [pc, #148]	; (800e6ac <pbuf_copy_partial+0xd4>)
 800e616:	f240 420b 	movw	r2, #1035	; 0x40b
 800e61a:	4927      	ldr	r1, [pc, #156]	; (800e6b8 <pbuf_copy_partial+0xe0>)
 800e61c:	4825      	ldr	r0, [pc, #148]	; (800e6b4 <pbuf_copy_partial+0xdc>)
 800e61e:	f008 feff 	bl	8017420 <iprintf>
 800e622:	2300      	movs	r3, #0
 800e624:	e03e      	b.n	800e6a4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	61fb      	str	r3, [r7, #28]
 800e62a:	e034      	b.n	800e696 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e62c:	88bb      	ldrh	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00a      	beq.n	800e648 <pbuf_copy_partial+0x70>
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	895b      	ldrh	r3, [r3, #10]
 800e636:	88ba      	ldrh	r2, [r7, #4]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d305      	bcc.n	800e648 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	895b      	ldrh	r3, [r3, #10]
 800e640:	88ba      	ldrh	r2, [r7, #4]
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	80bb      	strh	r3, [r7, #4]
 800e646:	e023      	b.n	800e690 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	895a      	ldrh	r2, [r3, #10]
 800e64c:	88bb      	ldrh	r3, [r7, #4]
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e652:	8b3a      	ldrh	r2, [r7, #24]
 800e654:	88fb      	ldrh	r3, [r7, #6]
 800e656:	429a      	cmp	r2, r3
 800e658:	d901      	bls.n	800e65e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e65a:	88fb      	ldrh	r3, [r7, #6]
 800e65c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e65e:	8b7b      	ldrh	r3, [r7, #26]
 800e660:	68ba      	ldr	r2, [r7, #8]
 800e662:	18d0      	adds	r0, r2, r3
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	685a      	ldr	r2, [r3, #4]
 800e668:	88bb      	ldrh	r3, [r7, #4]
 800e66a:	4413      	add	r3, r2
 800e66c:	8b3a      	ldrh	r2, [r7, #24]
 800e66e:	4619      	mov	r1, r3
 800e670:	f008 fea6 	bl	80173c0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e674:	8afa      	ldrh	r2, [r7, #22]
 800e676:	8b3b      	ldrh	r3, [r7, #24]
 800e678:	4413      	add	r3, r2
 800e67a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e67c:	8b7a      	ldrh	r2, [r7, #26]
 800e67e:	8b3b      	ldrh	r3, [r7, #24]
 800e680:	4413      	add	r3, r2
 800e682:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e684:	88fa      	ldrh	r2, [r7, #6]
 800e686:	8b3b      	ldrh	r3, [r7, #24]
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e68c:	2300      	movs	r3, #0
 800e68e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	61fb      	str	r3, [r7, #28]
 800e696:	88fb      	ldrh	r3, [r7, #6]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <pbuf_copy_partial+0xca>
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1c4      	bne.n	800e62c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e6a2:	8afb      	ldrh	r3, [r7, #22]
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3720      	adds	r7, #32
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	0801a27c 	.word	0x0801a27c
 800e6b0:	0801a5c4 	.word	0x0801a5c4
 800e6b4:	0801a2dc 	.word	0x0801a2dc
 800e6b8:	0801a5e4 	.word	0x0801a5e4

0800e6bc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	603a      	str	r2, [r7, #0]
 800e6c6:	71fb      	strb	r3, [r7, #7]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	8919      	ldrh	r1, [r3, #8]
 800e6d0:	88ba      	ldrh	r2, [r7, #4]
 800e6d2:	79fb      	ldrb	r3, [r7, #7]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7ff fab1 	bl	800dc3c <pbuf_alloc>
 800e6da:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d101      	bne.n	800e6e6 <pbuf_clone+0x2a>
    return NULL;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	e011      	b.n	800e70a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e6e6:	6839      	ldr	r1, [r7, #0]
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f7ff fea3 	bl	800e434 <pbuf_copy>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e6f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d006      	beq.n	800e708 <pbuf_clone+0x4c>
 800e6fa:	4b06      	ldr	r3, [pc, #24]	; (800e714 <pbuf_clone+0x58>)
 800e6fc:	f240 5224 	movw	r2, #1316	; 0x524
 800e700:	4905      	ldr	r1, [pc, #20]	; (800e718 <pbuf_clone+0x5c>)
 800e702:	4806      	ldr	r0, [pc, #24]	; (800e71c <pbuf_clone+0x60>)
 800e704:	f008 fe8c 	bl	8017420 <iprintf>
  return q;
 800e708:	68fb      	ldr	r3, [r7, #12]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	0801a27c 	.word	0x0801a27c
 800e718:	0801a6f0 	.word	0x0801a6f0
 800e71c:	0801a2dc 	.word	0x0801a2dc

0800e720 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e724:	f008 ff0a 	bl	801753c <rand>
 800e728:	4603      	mov	r3, r0
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e730:	b29b      	uxth	r3, r3
 800e732:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e736:	b29a      	uxth	r2, r3
 800e738:	4b01      	ldr	r3, [pc, #4]	; (800e740 <tcp_init+0x20>)
 800e73a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e73c:	bf00      	nop
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	200004a6 	.word	0x200004a6

0800e744 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	7d1b      	ldrb	r3, [r3, #20]
 800e750:	2b01      	cmp	r3, #1
 800e752:	d105      	bne.n	800e760 <tcp_free+0x1c>
 800e754:	4b06      	ldr	r3, [pc, #24]	; (800e770 <tcp_free+0x2c>)
 800e756:	22d4      	movs	r2, #212	; 0xd4
 800e758:	4906      	ldr	r1, [pc, #24]	; (800e774 <tcp_free+0x30>)
 800e75a:	4807      	ldr	r0, [pc, #28]	; (800e778 <tcp_free+0x34>)
 800e75c:	f008 fe60 	bl	8017420 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e760:	6879      	ldr	r1, [r7, #4]
 800e762:	2001      	movs	r0, #1
 800e764:	f7fe ff3c 	bl	800d5e0 <memp_free>
}
 800e768:	bf00      	nop
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	0801a77c 	.word	0x0801a77c
 800e774:	0801a7ac 	.word	0x0801a7ac
 800e778:	0801a7c0 	.word	0x0801a7c0

0800e77c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	7d1b      	ldrb	r3, [r3, #20]
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d105      	bne.n	800e798 <tcp_free_listen+0x1c>
 800e78c:	4b06      	ldr	r3, [pc, #24]	; (800e7a8 <tcp_free_listen+0x2c>)
 800e78e:	22df      	movs	r2, #223	; 0xdf
 800e790:	4906      	ldr	r1, [pc, #24]	; (800e7ac <tcp_free_listen+0x30>)
 800e792:	4807      	ldr	r0, [pc, #28]	; (800e7b0 <tcp_free_listen+0x34>)
 800e794:	f008 fe44 	bl	8017420 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e798:	6879      	ldr	r1, [r7, #4]
 800e79a:	2002      	movs	r0, #2
 800e79c:	f7fe ff20 	bl	800d5e0 <memp_free>
}
 800e7a0:	bf00      	nop
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	0801a77c 	.word	0x0801a77c
 800e7ac:	0801a7e8 	.word	0x0801a7e8
 800e7b0:	0801a7c0 	.word	0x0801a7c0

0800e7b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e7b8:	f001 f85c 	bl	800f874 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e7bc:	4b07      	ldr	r3, [pc, #28]	; (800e7dc <tcp_tmr+0x28>)
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	b2da      	uxtb	r2, r3
 800e7c4:	4b05      	ldr	r3, [pc, #20]	; (800e7dc <tcp_tmr+0x28>)
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	4b04      	ldr	r3, [pc, #16]	; (800e7dc <tcp_tmr+0x28>)
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	f003 0301 	and.w	r3, r3, #1
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d001      	beq.n	800e7d8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e7d4:	f000 fd0e 	bl	800f1f4 <tcp_slowtmr>
  }
}
 800e7d8:	bf00      	nop
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20001a09 	.word	0x20001a09

0800e7e0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d105      	bne.n	800e7fc <tcp_remove_listener+0x1c>
 800e7f0:	4b0d      	ldr	r3, [pc, #52]	; (800e828 <tcp_remove_listener+0x48>)
 800e7f2:	22ff      	movs	r2, #255	; 0xff
 800e7f4:	490d      	ldr	r1, [pc, #52]	; (800e82c <tcp_remove_listener+0x4c>)
 800e7f6:	480e      	ldr	r0, [pc, #56]	; (800e830 <tcp_remove_listener+0x50>)
 800e7f8:	f008 fe12 	bl	8017420 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	60fb      	str	r3, [r7, #12]
 800e800:	e00a      	b.n	800e818 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e806:	683a      	ldr	r2, [r7, #0]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d102      	bne.n	800e812 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2200      	movs	r2, #0
 800e810:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	60fb      	str	r3, [r7, #12]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1f1      	bne.n	800e802 <tcp_remove_listener+0x22>
    }
  }
}
 800e81e:	bf00      	nop
 800e820:	bf00      	nop
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	0801a77c 	.word	0x0801a77c
 800e82c:	0801a804 	.word	0x0801a804
 800e830:	0801a7c0 	.word	0x0801a7c0

0800e834 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d106      	bne.n	800e850 <tcp_listen_closed+0x1c>
 800e842:	4b14      	ldr	r3, [pc, #80]	; (800e894 <tcp_listen_closed+0x60>)
 800e844:	f240 1211 	movw	r2, #273	; 0x111
 800e848:	4913      	ldr	r1, [pc, #76]	; (800e898 <tcp_listen_closed+0x64>)
 800e84a:	4814      	ldr	r0, [pc, #80]	; (800e89c <tcp_listen_closed+0x68>)
 800e84c:	f008 fde8 	bl	8017420 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	7d1b      	ldrb	r3, [r3, #20]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d006      	beq.n	800e866 <tcp_listen_closed+0x32>
 800e858:	4b0e      	ldr	r3, [pc, #56]	; (800e894 <tcp_listen_closed+0x60>)
 800e85a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e85e:	4910      	ldr	r1, [pc, #64]	; (800e8a0 <tcp_listen_closed+0x6c>)
 800e860:	480e      	ldr	r0, [pc, #56]	; (800e89c <tcp_listen_closed+0x68>)
 800e862:	f008 fddd 	bl	8017420 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e866:	2301      	movs	r3, #1
 800e868:	60fb      	str	r3, [r7, #12]
 800e86a:	e00b      	b.n	800e884 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e86c:	4a0d      	ldr	r2, [pc, #52]	; (800e8a4 <tcp_listen_closed+0x70>)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	6879      	ldr	r1, [r7, #4]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7ff ffb1 	bl	800e7e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3301      	adds	r3, #1
 800e882:	60fb      	str	r3, [r7, #12]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2b03      	cmp	r3, #3
 800e888:	d9f0      	bls.n	800e86c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e88a:	bf00      	nop
 800e88c:	bf00      	nop
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	0801a77c 	.word	0x0801a77c
 800e898:	0801a82c 	.word	0x0801a82c
 800e89c:	0801a7c0 	.word	0x0801a7c0
 800e8a0:	0801a838 	.word	0x0801a838
 800e8a4:	0801ee74 	.word	0x0801ee74

0800e8a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e8a8:	b5b0      	push	{r4, r5, r7, lr}
 800e8aa:	b088      	sub	sp, #32
 800e8ac:	af04      	add	r7, sp, #16
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d106      	bne.n	800e8c8 <tcp_close_shutdown+0x20>
 800e8ba:	4b63      	ldr	r3, [pc, #396]	; (800ea48 <tcp_close_shutdown+0x1a0>)
 800e8bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e8c0:	4962      	ldr	r1, [pc, #392]	; (800ea4c <tcp_close_shutdown+0x1a4>)
 800e8c2:	4863      	ldr	r0, [pc, #396]	; (800ea50 <tcp_close_shutdown+0x1a8>)
 800e8c4:	f008 fdac 	bl	8017420 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e8c8:	78fb      	ldrb	r3, [r7, #3]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d066      	beq.n	800e99c <tcp_close_shutdown+0xf4>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	7d1b      	ldrb	r3, [r3, #20]
 800e8d2:	2b04      	cmp	r3, #4
 800e8d4:	d003      	beq.n	800e8de <tcp_close_shutdown+0x36>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	7d1b      	ldrb	r3, [r3, #20]
 800e8da:	2b07      	cmp	r3, #7
 800e8dc:	d15e      	bne.n	800e99c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d104      	bne.n	800e8f0 <tcp_close_shutdown+0x48>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e8ee:	d055      	beq.n	800e99c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	8b5b      	ldrh	r3, [r3, #26]
 800e8f4:	f003 0310 	and.w	r3, r3, #16
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d106      	bne.n	800e90a <tcp_close_shutdown+0x62>
 800e8fc:	4b52      	ldr	r3, [pc, #328]	; (800ea48 <tcp_close_shutdown+0x1a0>)
 800e8fe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e902:	4954      	ldr	r1, [pc, #336]	; (800ea54 <tcp_close_shutdown+0x1ac>)
 800e904:	4852      	ldr	r0, [pc, #328]	; (800ea50 <tcp_close_shutdown+0x1a8>)
 800e906:	f008 fd8b 	bl	8017420 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e912:	687d      	ldr	r5, [r7, #4]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	3304      	adds	r3, #4
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	8ad2      	ldrh	r2, [r2, #22]
 800e91c:	6879      	ldr	r1, [r7, #4]
 800e91e:	8b09      	ldrh	r1, [r1, #24]
 800e920:	9102      	str	r1, [sp, #8]
 800e922:	9201      	str	r2, [sp, #4]
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	462b      	mov	r3, r5
 800e928:	4622      	mov	r2, r4
 800e92a:	4601      	mov	r1, r0
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f005 fd8b 	bl	8014448 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f001 fb6c 	bl	8010010 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e938:	4b47      	ldr	r3, [pc, #284]	; (800ea58 <tcp_close_shutdown+0x1b0>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d105      	bne.n	800e94e <tcp_close_shutdown+0xa6>
 800e942:	4b45      	ldr	r3, [pc, #276]	; (800ea58 <tcp_close_shutdown+0x1b0>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	4a43      	ldr	r2, [pc, #268]	; (800ea58 <tcp_close_shutdown+0x1b0>)
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	e013      	b.n	800e976 <tcp_close_shutdown+0xce>
 800e94e:	4b42      	ldr	r3, [pc, #264]	; (800ea58 <tcp_close_shutdown+0x1b0>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	60fb      	str	r3, [r7, #12]
 800e954:	e00c      	b.n	800e970 <tcp_close_shutdown+0xc8>
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d104      	bne.n	800e96a <tcp_close_shutdown+0xc2>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	68da      	ldr	r2, [r3, #12]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	60da      	str	r2, [r3, #12]
 800e968:	e005      	b.n	800e976 <tcp_close_shutdown+0xce>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	60fb      	str	r3, [r7, #12]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1ef      	bne.n	800e956 <tcp_close_shutdown+0xae>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	60da      	str	r2, [r3, #12]
 800e97c:	4b37      	ldr	r3, [pc, #220]	; (800ea5c <tcp_close_shutdown+0x1b4>)
 800e97e:	2201      	movs	r2, #1
 800e980:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e982:	4b37      	ldr	r3, [pc, #220]	; (800ea60 <tcp_close_shutdown+0x1b8>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d102      	bne.n	800e992 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e98c:	f004 f800 	bl	8012990 <tcp_trigger_input_pcb_close>
 800e990:	e002      	b.n	800e998 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7ff fed6 	bl	800e744 <tcp_free>
      }
      return ERR_OK;
 800e998:	2300      	movs	r3, #0
 800e99a:	e050      	b.n	800ea3e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	7d1b      	ldrb	r3, [r3, #20]
 800e9a0:	2b02      	cmp	r3, #2
 800e9a2:	d03b      	beq.n	800ea1c <tcp_close_shutdown+0x174>
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	dc44      	bgt.n	800ea32 <tcp_close_shutdown+0x18a>
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d002      	beq.n	800e9b2 <tcp_close_shutdown+0x10a>
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d02a      	beq.n	800ea06 <tcp_close_shutdown+0x15e>
 800e9b0:	e03f      	b.n	800ea32 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	8adb      	ldrh	r3, [r3, #22]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d021      	beq.n	800e9fe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e9ba:	4b2a      	ldr	r3, [pc, #168]	; (800ea64 <tcp_close_shutdown+0x1bc>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d105      	bne.n	800e9d0 <tcp_close_shutdown+0x128>
 800e9c4:	4b27      	ldr	r3, [pc, #156]	; (800ea64 <tcp_close_shutdown+0x1bc>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	4a26      	ldr	r2, [pc, #152]	; (800ea64 <tcp_close_shutdown+0x1bc>)
 800e9cc:	6013      	str	r3, [r2, #0]
 800e9ce:	e013      	b.n	800e9f8 <tcp_close_shutdown+0x150>
 800e9d0:	4b24      	ldr	r3, [pc, #144]	; (800ea64 <tcp_close_shutdown+0x1bc>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	60bb      	str	r3, [r7, #8]
 800e9d6:	e00c      	b.n	800e9f2 <tcp_close_shutdown+0x14a>
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d104      	bne.n	800e9ec <tcp_close_shutdown+0x144>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	68da      	ldr	r2, [r3, #12]
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	60da      	str	r2, [r3, #12]
 800e9ea:	e005      	b.n	800e9f8 <tcp_close_shutdown+0x150>
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	60bb      	str	r3, [r7, #8]
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d1ef      	bne.n	800e9d8 <tcp_close_shutdown+0x130>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff fea0 	bl	800e744 <tcp_free>
      break;
 800ea04:	e01a      	b.n	800ea3c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7ff ff14 	bl	800e834 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ea0c:	6879      	ldr	r1, [r7, #4]
 800ea0e:	4816      	ldr	r0, [pc, #88]	; (800ea68 <tcp_close_shutdown+0x1c0>)
 800ea10:	f001 fb4e 	bl	80100b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7ff feb1 	bl	800e77c <tcp_free_listen>
      break;
 800ea1a:	e00f      	b.n	800ea3c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ea1c:	6879      	ldr	r1, [r7, #4]
 800ea1e:	480e      	ldr	r0, [pc, #56]	; (800ea58 <tcp_close_shutdown+0x1b0>)
 800ea20:	f001 fb46 	bl	80100b0 <tcp_pcb_remove>
 800ea24:	4b0d      	ldr	r3, [pc, #52]	; (800ea5c <tcp_close_shutdown+0x1b4>)
 800ea26:	2201      	movs	r2, #1
 800ea28:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f7ff fe8a 	bl	800e744 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ea30:	e004      	b.n	800ea3c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f81a 	bl	800ea6c <tcp_close_shutdown_fin>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	e000      	b.n	800ea3e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3710      	adds	r7, #16
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bdb0      	pop	{r4, r5, r7, pc}
 800ea46:	bf00      	nop
 800ea48:	0801a77c 	.word	0x0801a77c
 800ea4c:	0801a850 	.word	0x0801a850
 800ea50:	0801a7c0 	.word	0x0801a7c0
 800ea54:	0801a870 	.word	0x0801a870
 800ea58:	20011830 	.word	0x20011830
 800ea5c:	2001182c 	.word	0x2001182c
 800ea60:	20011844 	.word	0x20011844
 800ea64:	2001183c 	.word	0x2001183c
 800ea68:	20011838 	.word	0x20011838

0800ea6c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d106      	bne.n	800ea88 <tcp_close_shutdown_fin+0x1c>
 800ea7a:	4b2e      	ldr	r3, [pc, #184]	; (800eb34 <tcp_close_shutdown_fin+0xc8>)
 800ea7c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ea80:	492d      	ldr	r1, [pc, #180]	; (800eb38 <tcp_close_shutdown_fin+0xcc>)
 800ea82:	482e      	ldr	r0, [pc, #184]	; (800eb3c <tcp_close_shutdown_fin+0xd0>)
 800ea84:	f008 fccc 	bl	8017420 <iprintf>

  switch (pcb->state) {
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	7d1b      	ldrb	r3, [r3, #20]
 800ea8c:	2b07      	cmp	r3, #7
 800ea8e:	d020      	beq.n	800ead2 <tcp_close_shutdown_fin+0x66>
 800ea90:	2b07      	cmp	r3, #7
 800ea92:	dc2b      	bgt.n	800eaec <tcp_close_shutdown_fin+0x80>
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d002      	beq.n	800ea9e <tcp_close_shutdown_fin+0x32>
 800ea98:	2b04      	cmp	r3, #4
 800ea9a:	d00d      	beq.n	800eab8 <tcp_close_shutdown_fin+0x4c>
 800ea9c:	e026      	b.n	800eaec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f004 fde0 	bl	8013664 <tcp_send_fin>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eaa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d11f      	bne.n	800eaf0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2205      	movs	r2, #5
 800eab4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eab6:	e01b      	b.n	800eaf0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f004 fdd3 	bl	8013664 <tcp_send_fin>
 800eabe:	4603      	mov	r3, r0
 800eac0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d114      	bne.n	800eaf4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2205      	movs	r2, #5
 800eace:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ead0:	e010      	b.n	800eaf4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f004 fdc6 	bl	8013664 <tcp_send_fin>
 800ead8:	4603      	mov	r3, r0
 800eada:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d109      	bne.n	800eaf8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2209      	movs	r2, #9
 800eae8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eaea:	e005      	b.n	800eaf8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800eaec:	2300      	movs	r3, #0
 800eaee:	e01c      	b.n	800eb2a <tcp_close_shutdown_fin+0xbe>
      break;
 800eaf0:	bf00      	nop
 800eaf2:	e002      	b.n	800eafa <tcp_close_shutdown_fin+0x8e>
      break;
 800eaf4:	bf00      	nop
 800eaf6:	e000      	b.n	800eafa <tcp_close_shutdown_fin+0x8e>
      break;
 800eaf8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800eafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d103      	bne.n	800eb0a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f004 feec 	bl	80138e0 <tcp_output>
 800eb08:	e00d      	b.n	800eb26 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800eb0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb12:	d108      	bne.n	800eb26 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	8b5b      	ldrh	r3, [r3, #26]
 800eb18:	f043 0308 	orr.w	r3, r3, #8
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	e001      	b.n	800eb2a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800eb26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	0801a77c 	.word	0x0801a77c
 800eb38:	0801a82c 	.word	0x0801a82c
 800eb3c:	0801a7c0 	.word	0x0801a7c0

0800eb40 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d109      	bne.n	800eb62 <tcp_close+0x22>
 800eb4e:	4b0f      	ldr	r3, [pc, #60]	; (800eb8c <tcp_close+0x4c>)
 800eb50:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800eb54:	490e      	ldr	r1, [pc, #56]	; (800eb90 <tcp_close+0x50>)
 800eb56:	480f      	ldr	r0, [pc, #60]	; (800eb94 <tcp_close+0x54>)
 800eb58:	f008 fc62 	bl	8017420 <iprintf>
 800eb5c:	f06f 030f 	mvn.w	r3, #15
 800eb60:	e00f      	b.n	800eb82 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	7d1b      	ldrb	r3, [r3, #20]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d006      	beq.n	800eb78 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	8b5b      	ldrh	r3, [r3, #26]
 800eb6e:	f043 0310 	orr.w	r3, r3, #16
 800eb72:	b29a      	uxth	r2, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800eb78:	2101      	movs	r1, #1
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f7ff fe94 	bl	800e8a8 <tcp_close_shutdown>
 800eb80:	4603      	mov	r3, r0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	0801a77c 	.word	0x0801a77c
 800eb90:	0801a88c 	.word	0x0801a88c
 800eb94:	0801a7c0 	.word	0x0801a7c0

0800eb98 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b08e      	sub	sp, #56	; 0x38
 800eb9c:	af04      	add	r7, sp, #16
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d107      	bne.n	800ebb8 <tcp_abandon+0x20>
 800eba8:	4b52      	ldr	r3, [pc, #328]	; (800ecf4 <tcp_abandon+0x15c>)
 800ebaa:	f240 223d 	movw	r2, #573	; 0x23d
 800ebae:	4952      	ldr	r1, [pc, #328]	; (800ecf8 <tcp_abandon+0x160>)
 800ebb0:	4852      	ldr	r0, [pc, #328]	; (800ecfc <tcp_abandon+0x164>)
 800ebb2:	f008 fc35 	bl	8017420 <iprintf>
 800ebb6:	e099      	b.n	800ecec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	7d1b      	ldrb	r3, [r3, #20]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d106      	bne.n	800ebce <tcp_abandon+0x36>
 800ebc0:	4b4c      	ldr	r3, [pc, #304]	; (800ecf4 <tcp_abandon+0x15c>)
 800ebc2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ebc6:	494e      	ldr	r1, [pc, #312]	; (800ed00 <tcp_abandon+0x168>)
 800ebc8:	484c      	ldr	r0, [pc, #304]	; (800ecfc <tcp_abandon+0x164>)
 800ebca:	f008 fc29 	bl	8017420 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	7d1b      	ldrb	r3, [r3, #20]
 800ebd2:	2b0a      	cmp	r3, #10
 800ebd4:	d107      	bne.n	800ebe6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ebd6:	6879      	ldr	r1, [r7, #4]
 800ebd8:	484a      	ldr	r0, [pc, #296]	; (800ed04 <tcp_abandon+0x16c>)
 800ebda:	f001 fa69 	bl	80100b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f7ff fdb0 	bl	800e744 <tcp_free>
 800ebe4:	e082      	b.n	800ecec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ebea:	2300      	movs	r3, #0
 800ebec:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebf2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec00:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	7d1b      	ldrb	r3, [r3, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d126      	bne.n	800ec5e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	8adb      	ldrh	r3, [r3, #22]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d02e      	beq.n	800ec76 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ec18:	4b3b      	ldr	r3, [pc, #236]	; (800ed08 <tcp_abandon+0x170>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d105      	bne.n	800ec2e <tcp_abandon+0x96>
 800ec22:	4b39      	ldr	r3, [pc, #228]	; (800ed08 <tcp_abandon+0x170>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	4a37      	ldr	r2, [pc, #220]	; (800ed08 <tcp_abandon+0x170>)
 800ec2a:	6013      	str	r3, [r2, #0]
 800ec2c:	e013      	b.n	800ec56 <tcp_abandon+0xbe>
 800ec2e:	4b36      	ldr	r3, [pc, #216]	; (800ed08 <tcp_abandon+0x170>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	61fb      	str	r3, [r7, #28]
 800ec34:	e00c      	b.n	800ec50 <tcp_abandon+0xb8>
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d104      	bne.n	800ec4a <tcp_abandon+0xb2>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	68da      	ldr	r2, [r3, #12]
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	60da      	str	r2, [r3, #12]
 800ec48:	e005      	b.n	800ec56 <tcp_abandon+0xbe>
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	61fb      	str	r3, [r7, #28]
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1ef      	bne.n	800ec36 <tcp_abandon+0x9e>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	60da      	str	r2, [r3, #12]
 800ec5c:	e00b      	b.n	800ec76 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	8adb      	ldrh	r3, [r3, #22]
 800ec66:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ec68:	6879      	ldr	r1, [r7, #4]
 800ec6a:	4828      	ldr	r0, [pc, #160]	; (800ed0c <tcp_abandon+0x174>)
 800ec6c:	f001 fa20 	bl	80100b0 <tcp_pcb_remove>
 800ec70:	4b27      	ldr	r3, [pc, #156]	; (800ed10 <tcp_abandon+0x178>)
 800ec72:	2201      	movs	r2, #1
 800ec74:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d004      	beq.n	800ec88 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec82:	4618      	mov	r0, r3
 800ec84:	f000 fed6 	bl	800fa34 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d004      	beq.n	800ec9a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec94:	4618      	mov	r0, r3
 800ec96:	f000 fecd 	bl	800fa34 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d004      	beq.n	800ecac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eca6:	4618      	mov	r0, r3
 800eca8:	f000 fec4 	bl	800fa34 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00e      	beq.n	800ecd0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ecb2:	6879      	ldr	r1, [r7, #4]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	8b12      	ldrh	r2, [r2, #24]
 800ecbc:	9202      	str	r2, [sp, #8]
 800ecbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ecc0:	9201      	str	r2, [sp, #4]
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	69b9      	ldr	r1, [r7, #24]
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f005 fbbc 	bl	8014448 <tcp_rst>
    }
    last_state = pcb->state;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	7d1b      	ldrb	r3, [r3, #20]
 800ecd4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7ff fd34 	bl	800e744 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d004      	beq.n	800ecec <tcp_abandon+0x154>
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	f06f 010c 	mvn.w	r1, #12
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	4798      	blx	r3
  }
}
 800ecec:	3728      	adds	r7, #40	; 0x28
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	0801a77c 	.word	0x0801a77c
 800ecf8:	0801a8c0 	.word	0x0801a8c0
 800ecfc:	0801a7c0 	.word	0x0801a7c0
 800ed00:	0801a8dc 	.word	0x0801a8dc
 800ed04:	20011840 	.word	0x20011840
 800ed08:	2001183c 	.word	0x2001183c
 800ed0c:	20011830 	.word	0x20011830
 800ed10:	2001182c 	.word	0x2001182c

0800ed14 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ed1c:	2101      	movs	r1, #1
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7ff ff3a 	bl	800eb98 <tcp_abandon>
}
 800ed24:	bf00      	nop
 800ed26:	3708      	adds	r7, #8
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b088      	sub	sp, #32
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	4613      	mov	r3, r2
 800ed38:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ed3a:	2304      	movs	r3, #4
 800ed3c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d101      	bne.n	800ed48 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ed44:	4b3e      	ldr	r3, [pc, #248]	; (800ee40 <tcp_bind+0x114>)
 800ed46:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d109      	bne.n	800ed62 <tcp_bind+0x36>
 800ed4e:	4b3d      	ldr	r3, [pc, #244]	; (800ee44 <tcp_bind+0x118>)
 800ed50:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ed54:	493c      	ldr	r1, [pc, #240]	; (800ee48 <tcp_bind+0x11c>)
 800ed56:	483d      	ldr	r0, [pc, #244]	; (800ee4c <tcp_bind+0x120>)
 800ed58:	f008 fb62 	bl	8017420 <iprintf>
 800ed5c:	f06f 030f 	mvn.w	r3, #15
 800ed60:	e06a      	b.n	800ee38 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	7d1b      	ldrb	r3, [r3, #20]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d009      	beq.n	800ed7e <tcp_bind+0x52>
 800ed6a:	4b36      	ldr	r3, [pc, #216]	; (800ee44 <tcp_bind+0x118>)
 800ed6c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ed70:	4937      	ldr	r1, [pc, #220]	; (800ee50 <tcp_bind+0x124>)
 800ed72:	4836      	ldr	r0, [pc, #216]	; (800ee4c <tcp_bind+0x120>)
 800ed74:	f008 fb54 	bl	8017420 <iprintf>
 800ed78:	f06f 0305 	mvn.w	r3, #5
 800ed7c:	e05c      	b.n	800ee38 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ed7e:	88fb      	ldrh	r3, [r7, #6]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d109      	bne.n	800ed98 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ed84:	f000 f9f0 	bl	800f168 <tcp_new_port>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ed8c:	88fb      	ldrh	r3, [r7, #6]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d135      	bne.n	800edfe <tcp_bind+0xd2>
      return ERR_BUF;
 800ed92:	f06f 0301 	mvn.w	r3, #1
 800ed96:	e04f      	b.n	800ee38 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ed98:	2300      	movs	r3, #0
 800ed9a:	61fb      	str	r3, [r7, #28]
 800ed9c:	e02b      	b.n	800edf6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ed9e:	4a2d      	ldr	r2, [pc, #180]	; (800ee54 <tcp_bind+0x128>)
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	61bb      	str	r3, [r7, #24]
 800edaa:	e01e      	b.n	800edea <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	8adb      	ldrh	r3, [r3, #22]
 800edb0:	88fa      	ldrh	r2, [r7, #6]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d116      	bne.n	800ede4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800edb6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d010      	beq.n	800edde <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d00c      	beq.n	800edde <tcp_bind+0xb2>
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d009      	beq.n	800edde <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d005      	beq.n	800edde <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800edd2:	69bb      	ldr	r3, [r7, #24]
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800edda:	429a      	cmp	r2, r3
 800eddc:	d102      	bne.n	800ede4 <tcp_bind+0xb8>
              return ERR_USE;
 800edde:	f06f 0307 	mvn.w	r3, #7
 800ede2:	e029      	b.n	800ee38 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	61bb      	str	r3, [r7, #24]
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1dd      	bne.n	800edac <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	3301      	adds	r3, #1
 800edf4:	61fb      	str	r3, [r7, #28]
 800edf6:	69fa      	ldr	r2, [r7, #28]
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	dbcf      	blt.n	800ed9e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00c      	beq.n	800ee1e <tcp_bind+0xf2>
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d008      	beq.n	800ee1e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d002      	beq.n	800ee18 <tcp_bind+0xec>
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	e000      	b.n	800ee1a <tcp_bind+0xee>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	88fa      	ldrh	r2, [r7, #6]
 800ee22:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ee24:	4b0c      	ldr	r3, [pc, #48]	; (800ee58 <tcp_bind+0x12c>)
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	60da      	str	r2, [r3, #12]
 800ee2c:	4a0a      	ldr	r2, [pc, #40]	; (800ee58 <tcp_bind+0x12c>)
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6013      	str	r3, [r2, #0]
 800ee32:	f005 fccb 	bl	80147cc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ee36:	2300      	movs	r3, #0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3720      	adds	r7, #32
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	0801ee9c 	.word	0x0801ee9c
 800ee44:	0801a77c 	.word	0x0801a77c
 800ee48:	0801a910 	.word	0x0801a910
 800ee4c:	0801a7c0 	.word	0x0801a7c0
 800ee50:	0801a928 	.word	0x0801a928
 800ee54:	0801ee74 	.word	0x0801ee74
 800ee58:	2001183c 	.word	0x2001183c

0800ee5c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	4613      	mov	r3, r2
 800ee68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d106      	bne.n	800ee7e <tcp_accept_null+0x22>
 800ee70:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <tcp_accept_null+0x34>)
 800ee72:	f240 320f 	movw	r2, #783	; 0x30f
 800ee76:	4907      	ldr	r1, [pc, #28]	; (800ee94 <tcp_accept_null+0x38>)
 800ee78:	4807      	ldr	r0, [pc, #28]	; (800ee98 <tcp_accept_null+0x3c>)
 800ee7a:	f008 fad1 	bl	8017420 <iprintf>

  tcp_abort(pcb);
 800ee7e:	68b8      	ldr	r0, [r7, #8]
 800ee80:	f7ff ff48 	bl	800ed14 <tcp_abort>

  return ERR_ABRT;
 800ee84:	f06f 030c 	mvn.w	r3, #12
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	0801a77c 	.word	0x0801a77c
 800ee94:	0801a950 	.word	0x0801a950
 800ee98:	0801a7c0 	.word	0x0801a7c0

0800ee9c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	460b      	mov	r3, r1
 800eea6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800eea8:	78fb      	ldrb	r3, [r7, #3]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	4619      	mov	r1, r3
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 f806 	bl	800eec0 <tcp_listen_with_backlog_and_err>
 800eeb4:	4603      	mov	r3, r0
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
	...

0800eec0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b088      	sub	sp, #32
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	460b      	mov	r3, r1
 800eeca:	607a      	str	r2, [r7, #4]
 800eecc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800eece:	2300      	movs	r3, #0
 800eed0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d109      	bne.n	800eeec <tcp_listen_with_backlog_and_err+0x2c>
 800eed8:	4b47      	ldr	r3, [pc, #284]	; (800eff8 <tcp_listen_with_backlog_and_err+0x138>)
 800eeda:	f240 3259 	movw	r2, #857	; 0x359
 800eede:	4947      	ldr	r1, [pc, #284]	; (800effc <tcp_listen_with_backlog_and_err+0x13c>)
 800eee0:	4847      	ldr	r0, [pc, #284]	; (800f000 <tcp_listen_with_backlog_and_err+0x140>)
 800eee2:	f008 fa9d 	bl	8017420 <iprintf>
 800eee6:	23f0      	movs	r3, #240	; 0xf0
 800eee8:	76fb      	strb	r3, [r7, #27]
 800eeea:	e079      	b.n	800efe0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	7d1b      	ldrb	r3, [r3, #20]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d009      	beq.n	800ef08 <tcp_listen_with_backlog_and_err+0x48>
 800eef4:	4b40      	ldr	r3, [pc, #256]	; (800eff8 <tcp_listen_with_backlog_and_err+0x138>)
 800eef6:	f240 325a 	movw	r2, #858	; 0x35a
 800eefa:	4942      	ldr	r1, [pc, #264]	; (800f004 <tcp_listen_with_backlog_and_err+0x144>)
 800eefc:	4840      	ldr	r0, [pc, #256]	; (800f000 <tcp_listen_with_backlog_and_err+0x140>)
 800eefe:	f008 fa8f 	bl	8017420 <iprintf>
 800ef02:	23f1      	movs	r3, #241	; 0xf1
 800ef04:	76fb      	strb	r3, [r7, #27]
 800ef06:	e06b      	b.n	800efe0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	7d1b      	ldrb	r3, [r3, #20]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d104      	bne.n	800ef1a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ef14:	23f7      	movs	r3, #247	; 0xf7
 800ef16:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ef18:	e062      	b.n	800efe0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ef1a:	2002      	movs	r0, #2
 800ef1c:	f7fe fb14 	bl	800d548 <memp_malloc>
 800ef20:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d102      	bne.n	800ef2e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ef28:	23ff      	movs	r3, #255	; 0xff
 800ef2a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ef2c:	e058      	b.n	800efe0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	691a      	ldr	r2, [r3, #16]
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	8ada      	ldrh	r2, [r3, #22]
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	2201      	movs	r2, #1
 800ef42:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	7d5a      	ldrb	r2, [r3, #21]
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	7a5a      	ldrb	r2, [r3, #9]
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	2200      	movs	r2, #0
 800ef58:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	7ada      	ldrb	r2, [r3, #11]
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	7a9a      	ldrb	r2, [r3, #10]
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	8adb      	ldrh	r3, [r3, #22]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d021      	beq.n	800efbe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ef7a:	4b23      	ldr	r3, [pc, #140]	; (800f008 <tcp_listen_with_backlog_and_err+0x148>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68fa      	ldr	r2, [r7, #12]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d105      	bne.n	800ef90 <tcp_listen_with_backlog_and_err+0xd0>
 800ef84:	4b20      	ldr	r3, [pc, #128]	; (800f008 <tcp_listen_with_backlog_and_err+0x148>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	4a1f      	ldr	r2, [pc, #124]	; (800f008 <tcp_listen_with_backlog_and_err+0x148>)
 800ef8c:	6013      	str	r3, [r2, #0]
 800ef8e:	e013      	b.n	800efb8 <tcp_listen_with_backlog_and_err+0xf8>
 800ef90:	4b1d      	ldr	r3, [pc, #116]	; (800f008 <tcp_listen_with_backlog_and_err+0x148>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	617b      	str	r3, [r7, #20]
 800ef96:	e00c      	b.n	800efb2 <tcp_listen_with_backlog_and_err+0xf2>
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d104      	bne.n	800efac <tcp_listen_with_backlog_and_err+0xec>
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	68da      	ldr	r2, [r3, #12]
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	60da      	str	r2, [r3, #12]
 800efaa:	e005      	b.n	800efb8 <tcp_listen_with_backlog_and_err+0xf8>
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	617b      	str	r3, [r7, #20]
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1ef      	bne.n	800ef98 <tcp_listen_with_backlog_and_err+0xd8>
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2200      	movs	r2, #0
 800efbc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f7ff fbc0 	bl	800e744 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	4a11      	ldr	r2, [pc, #68]	; (800f00c <tcp_listen_with_backlog_and_err+0x14c>)
 800efc8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800efca:	4b11      	ldr	r3, [pc, #68]	; (800f010 <tcp_listen_with_backlog_and_err+0x150>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	60da      	str	r2, [r3, #12]
 800efd2:	4a0f      	ldr	r2, [pc, #60]	; (800f010 <tcp_listen_with_backlog_and_err+0x150>)
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	6013      	str	r3, [r2, #0]
 800efd8:	f005 fbf8 	bl	80147cc <tcp_timer_needed>
  res = ERR_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d002      	beq.n	800efec <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	7efa      	ldrb	r2, [r7, #27]
 800efea:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800efec:	69fb      	ldr	r3, [r7, #28]
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3720      	adds	r7, #32
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	0801a77c 	.word	0x0801a77c
 800effc:	0801a970 	.word	0x0801a970
 800f000:	0801a7c0 	.word	0x0801a7c0
 800f004:	0801a9a0 	.word	0x0801a9a0
 800f008:	2001183c 	.word	0x2001183c
 800f00c:	0800ee5d 	.word	0x0800ee5d
 800f010:	20011838 	.word	0x20011838

0800f014 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d106      	bne.n	800f030 <tcp_update_rcv_ann_wnd+0x1c>
 800f022:	4b25      	ldr	r3, [pc, #148]	; (800f0b8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f024:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f028:	4924      	ldr	r1, [pc, #144]	; (800f0bc <tcp_update_rcv_ann_wnd+0xa8>)
 800f02a:	4825      	ldr	r0, [pc, #148]	; (800f0c0 <tcp_update_rcv_ann_wnd+0xac>)
 800f02c:	f008 f9f8 	bl	8017420 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f038:	4413      	add	r3, r2
 800f03a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f044:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f048:	bf28      	it	cs
 800f04a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f04e:	b292      	uxth	r2, r2
 800f050:	4413      	add	r3, r2
 800f052:	68fa      	ldr	r2, [r7, #12]
 800f054:	1ad3      	subs	r3, r2, r3
 800f056:	2b00      	cmp	r3, #0
 800f058:	db08      	blt.n	800f06c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	1ad3      	subs	r3, r2, r3
 800f06a:	e020      	b.n	800f0ae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	2b00      	cmp	r3, #0
 800f078:	dd03      	ble.n	800f082 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f080:	e014      	b.n	800f0ac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f08a:	1ad3      	subs	r3, r2, r3
 800f08c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f094:	d306      	bcc.n	800f0a4 <tcp_update_rcv_ann_wnd+0x90>
 800f096:	4b08      	ldr	r3, [pc, #32]	; (800f0b8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f098:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f09c:	4909      	ldr	r1, [pc, #36]	; (800f0c4 <tcp_update_rcv_ann_wnd+0xb0>)
 800f09e:	4808      	ldr	r0, [pc, #32]	; (800f0c0 <tcp_update_rcv_ann_wnd+0xac>)
 800f0a0:	f008 f9be 	bl	8017420 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f0ac:	2300      	movs	r3, #0
  }
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	0801a77c 	.word	0x0801a77c
 800f0bc:	0801a9d8 	.word	0x0801a9d8
 800f0c0:	0801a7c0 	.word	0x0801a7c0
 800f0c4:	0801a9fc 	.word	0x0801a9fc

0800f0c8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d107      	bne.n	800f0ea <tcp_recved+0x22>
 800f0da:	4b1f      	ldr	r3, [pc, #124]	; (800f158 <tcp_recved+0x90>)
 800f0dc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f0e0:	491e      	ldr	r1, [pc, #120]	; (800f15c <tcp_recved+0x94>)
 800f0e2:	481f      	ldr	r0, [pc, #124]	; (800f160 <tcp_recved+0x98>)
 800f0e4:	f008 f99c 	bl	8017420 <iprintf>
 800f0e8:	e032      	b.n	800f150 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	7d1b      	ldrb	r3, [r3, #20]
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d106      	bne.n	800f100 <tcp_recved+0x38>
 800f0f2:	4b19      	ldr	r3, [pc, #100]	; (800f158 <tcp_recved+0x90>)
 800f0f4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f0f8:	491a      	ldr	r1, [pc, #104]	; (800f164 <tcp_recved+0x9c>)
 800f0fa:	4819      	ldr	r0, [pc, #100]	; (800f160 <tcp_recved+0x98>)
 800f0fc:	f008 f990 	bl	8017420 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f104:	887b      	ldrh	r3, [r7, #2]
 800f106:	4413      	add	r3, r2
 800f108:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f10a:	89fb      	ldrh	r3, [r7, #14]
 800f10c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f110:	d804      	bhi.n	800f11c <tcp_recved+0x54>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f116:	89fa      	ldrh	r2, [r7, #14]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d204      	bcs.n	800f126 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f122:	851a      	strh	r2, [r3, #40]	; 0x28
 800f124:	e002      	b.n	800f12c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	89fa      	ldrh	r2, [r7, #14]
 800f12a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff ff71 	bl	800f014 <tcp_update_rcv_ann_wnd>
 800f132:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f13a:	d309      	bcc.n	800f150 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	8b5b      	ldrh	r3, [r3, #26]
 800f140:	f043 0302 	orr.w	r3, r3, #2
 800f144:	b29a      	uxth	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f004 fbc8 	bl	80138e0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	0801a77c 	.word	0x0801a77c
 800f15c:	0801aa18 	.word	0x0801aa18
 800f160:	0801a7c0 	.word	0x0801a7c0
 800f164:	0801aa30 	.word	0x0801aa30

0800f168 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f16e:	2300      	movs	r3, #0
 800f170:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f172:	4b1e      	ldr	r3, [pc, #120]	; (800f1ec <tcp_new_port+0x84>)
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	3301      	adds	r3, #1
 800f178:	b29a      	uxth	r2, r3
 800f17a:	4b1c      	ldr	r3, [pc, #112]	; (800f1ec <tcp_new_port+0x84>)
 800f17c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f17e:	4b1b      	ldr	r3, [pc, #108]	; (800f1ec <tcp_new_port+0x84>)
 800f180:	881b      	ldrh	r3, [r3, #0]
 800f182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f186:	4293      	cmp	r3, r2
 800f188:	d103      	bne.n	800f192 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f18a:	4b18      	ldr	r3, [pc, #96]	; (800f1ec <tcp_new_port+0x84>)
 800f18c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f190:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f192:	2300      	movs	r3, #0
 800f194:	71fb      	strb	r3, [r7, #7]
 800f196:	e01e      	b.n	800f1d6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f198:	79fb      	ldrb	r3, [r7, #7]
 800f19a:	4a15      	ldr	r2, [pc, #84]	; (800f1f0 <tcp_new_port+0x88>)
 800f19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	e011      	b.n	800f1ca <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	8ada      	ldrh	r2, [r3, #22]
 800f1aa:	4b10      	ldr	r3, [pc, #64]	; (800f1ec <tcp_new_port+0x84>)
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d108      	bne.n	800f1c4 <tcp_new_port+0x5c>
        n++;
 800f1b2:	88bb      	ldrh	r3, [r7, #4]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f1b8:	88bb      	ldrh	r3, [r7, #4]
 800f1ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1be:	d3d8      	bcc.n	800f172 <tcp_new_port+0xa>
          return 0;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	e00d      	b.n	800f1e0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	603b      	str	r3, [r7, #0]
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d1ea      	bne.n	800f1a6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	71fb      	strb	r3, [r7, #7]
 800f1d6:	79fb      	ldrb	r3, [r7, #7]
 800f1d8:	2b03      	cmp	r3, #3
 800f1da:	d9dd      	bls.n	800f198 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f1dc:	4b03      	ldr	r3, [pc, #12]	; (800f1ec <tcp_new_port+0x84>)
 800f1de:	881b      	ldrh	r3, [r3, #0]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr
 800f1ec:	200004a6 	.word	0x200004a6
 800f1f0:	0801ee74 	.word	0x0801ee74

0800f1f4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f1f4:	b5b0      	push	{r4, r5, r7, lr}
 800f1f6:	b090      	sub	sp, #64	; 0x40
 800f1f8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f200:	4b94      	ldr	r3, [pc, #592]	; (800f454 <tcp_slowtmr+0x260>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	3301      	adds	r3, #1
 800f206:	4a93      	ldr	r2, [pc, #588]	; (800f454 <tcp_slowtmr+0x260>)
 800f208:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f20a:	4b93      	ldr	r3, [pc, #588]	; (800f458 <tcp_slowtmr+0x264>)
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	3301      	adds	r3, #1
 800f210:	b2da      	uxtb	r2, r3
 800f212:	4b91      	ldr	r3, [pc, #580]	; (800f458 <tcp_slowtmr+0x264>)
 800f214:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f216:	2300      	movs	r3, #0
 800f218:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f21a:	4b90      	ldr	r3, [pc, #576]	; (800f45c <tcp_slowtmr+0x268>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f220:	e29f      	b.n	800f762 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f224:	7d1b      	ldrb	r3, [r3, #20]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d106      	bne.n	800f238 <tcp_slowtmr+0x44>
 800f22a:	4b8d      	ldr	r3, [pc, #564]	; (800f460 <tcp_slowtmr+0x26c>)
 800f22c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f230:	498c      	ldr	r1, [pc, #560]	; (800f464 <tcp_slowtmr+0x270>)
 800f232:	488d      	ldr	r0, [pc, #564]	; (800f468 <tcp_slowtmr+0x274>)
 800f234:	f008 f8f4 	bl	8017420 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23a:	7d1b      	ldrb	r3, [r3, #20]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d106      	bne.n	800f24e <tcp_slowtmr+0x5a>
 800f240:	4b87      	ldr	r3, [pc, #540]	; (800f460 <tcp_slowtmr+0x26c>)
 800f242:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f246:	4989      	ldr	r1, [pc, #548]	; (800f46c <tcp_slowtmr+0x278>)
 800f248:	4887      	ldr	r0, [pc, #540]	; (800f468 <tcp_slowtmr+0x274>)
 800f24a:	f008 f8e9 	bl	8017420 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	7d1b      	ldrb	r3, [r3, #20]
 800f252:	2b0a      	cmp	r3, #10
 800f254:	d106      	bne.n	800f264 <tcp_slowtmr+0x70>
 800f256:	4b82      	ldr	r3, [pc, #520]	; (800f460 <tcp_slowtmr+0x26c>)
 800f258:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f25c:	4984      	ldr	r1, [pc, #528]	; (800f470 <tcp_slowtmr+0x27c>)
 800f25e:	4882      	ldr	r0, [pc, #520]	; (800f468 <tcp_slowtmr+0x274>)
 800f260:	f008 f8de 	bl	8017420 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f266:	7f9a      	ldrb	r2, [r3, #30]
 800f268:	4b7b      	ldr	r3, [pc, #492]	; (800f458 <tcp_slowtmr+0x264>)
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d105      	bne.n	800f27c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f27a:	e272      	b.n	800f762 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f27c:	4b76      	ldr	r3, [pc, #472]	; (800f458 <tcp_slowtmr+0x264>)
 800f27e:	781a      	ldrb	r2, [r3, #0]
 800f280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f282:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f292:	7d1b      	ldrb	r3, [r3, #20]
 800f294:	2b02      	cmp	r3, #2
 800f296:	d10a      	bne.n	800f2ae <tcp_slowtmr+0xba>
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f29e:	2b05      	cmp	r3, #5
 800f2a0:	d905      	bls.n	800f2ae <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2ac:	e11e      	b.n	800f4ec <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f2b4:	2b0b      	cmp	r3, #11
 800f2b6:	d905      	bls.n	800f2c4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2bc:	3301      	adds	r3, #1
 800f2be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2c2:	e113      	b.n	800f4ec <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d075      	beq.n	800f3ba <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d006      	beq.n	800f2e4 <tcp_slowtmr+0xf0>
 800f2d6:	4b62      	ldr	r3, [pc, #392]	; (800f460 <tcp_slowtmr+0x26c>)
 800f2d8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f2dc:	4965      	ldr	r1, [pc, #404]	; (800f474 <tcp_slowtmr+0x280>)
 800f2de:	4862      	ldr	r0, [pc, #392]	; (800f468 <tcp_slowtmr+0x274>)
 800f2e0:	f008 f89e 	bl	8017420 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d106      	bne.n	800f2fa <tcp_slowtmr+0x106>
 800f2ec:	4b5c      	ldr	r3, [pc, #368]	; (800f460 <tcp_slowtmr+0x26c>)
 800f2ee:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f2f2:	4961      	ldr	r1, [pc, #388]	; (800f478 <tcp_slowtmr+0x284>)
 800f2f4:	485c      	ldr	r0, [pc, #368]	; (800f468 <tcp_slowtmr+0x274>)
 800f2f6:	f008 f893 	bl	8017420 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f300:	2b0b      	cmp	r3, #11
 800f302:	d905      	bls.n	800f310 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f308:	3301      	adds	r3, #1
 800f30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f30e:	e0ed      	b.n	800f4ec <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f316:	3b01      	subs	r3, #1
 800f318:	4a58      	ldr	r2, [pc, #352]	; (800f47c <tcp_slowtmr+0x288>)
 800f31a:	5cd3      	ldrb	r3, [r2, r3]
 800f31c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f320:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f324:	7c7a      	ldrb	r2, [r7, #17]
 800f326:	429a      	cmp	r2, r3
 800f328:	d907      	bls.n	800f33a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f330:	3301      	adds	r3, #1
 800f332:	b2da      	uxtb	r2, r3
 800f334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f336:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f340:	7c7a      	ldrb	r2, [r7, #17]
 800f342:	429a      	cmp	r2, r3
 800f344:	f200 80d2 	bhi.w	800f4ec <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f348:	2301      	movs	r3, #1
 800f34a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f352:	2b00      	cmp	r3, #0
 800f354:	d108      	bne.n	800f368 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f358:	f005 f96a 	bl	8014630 <tcp_zero_window_probe>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d014      	beq.n	800f38c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f362:	2300      	movs	r3, #0
 800f364:	623b      	str	r3, [r7, #32]
 800f366:	e011      	b.n	800f38c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f36e:	4619      	mov	r1, r3
 800f370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f372:	f004 f82f 	bl	80133d4 <tcp_split_unsent_seg>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d107      	bne.n	800f38c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f37c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f37e:	f004 faaf 	bl	80138e0 <tcp_output>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d101      	bne.n	800f38c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f388:	2300      	movs	r3, #0
 800f38a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 80ac 	beq.w	800f4ec <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	2200      	movs	r2, #0
 800f398:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f3a2:	2b06      	cmp	r3, #6
 800f3a4:	f200 80a2 	bhi.w	800f4ec <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	b2da      	uxtb	r2, r3
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f3b8:	e098      	b.n	800f4ec <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	db0f      	blt.n	800f3e4 <tcp_slowtmr+0x1f0>
 800f3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f3ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d008      	beq.n	800f3e4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	3301      	adds	r3, #1
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	b21a      	sxth	r2, r3
 800f3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	db7b      	blt.n	800f4ec <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f3f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3f6:	f004 fd65 	bl	8013ec4 <tcp_rexmit_rto_prepare>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d007      	beq.n	800f410 <tcp_slowtmr+0x21c>
 800f400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f404:	2b00      	cmp	r3, #0
 800f406:	d171      	bne.n	800f4ec <tcp_slowtmr+0x2f8>
 800f408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d06d      	beq.n	800f4ec <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f412:	7d1b      	ldrb	r3, [r3, #20]
 800f414:	2b02      	cmp	r3, #2
 800f416:	d03a      	beq.n	800f48e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f41e:	2b0c      	cmp	r3, #12
 800f420:	bf28      	it	cs
 800f422:	230c      	movcs	r3, #12
 800f424:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f428:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f42c:	10db      	asrs	r3, r3, #3
 800f42e:	b21b      	sxth	r3, r3
 800f430:	461a      	mov	r2, r3
 800f432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f434:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f438:	4413      	add	r3, r2
 800f43a:	7efa      	ldrb	r2, [r7, #27]
 800f43c:	4910      	ldr	r1, [pc, #64]	; (800f480 <tcp_slowtmr+0x28c>)
 800f43e:	5c8a      	ldrb	r2, [r1, r2]
 800f440:	4093      	lsls	r3, r2
 800f442:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f44a:	4293      	cmp	r3, r2
 800f44c:	dc1a      	bgt.n	800f484 <tcp_slowtmr+0x290>
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	b21a      	sxth	r2, r3
 800f452:	e019      	b.n	800f488 <tcp_slowtmr+0x294>
 800f454:	20011834 	.word	0x20011834
 800f458:	20001a0a 	.word	0x20001a0a
 800f45c:	20011830 	.word	0x20011830
 800f460:	0801a77c 	.word	0x0801a77c
 800f464:	0801aac0 	.word	0x0801aac0
 800f468:	0801a7c0 	.word	0x0801a7c0
 800f46c:	0801aaec 	.word	0x0801aaec
 800f470:	0801ab18 	.word	0x0801ab18
 800f474:	0801ab48 	.word	0x0801ab48
 800f478:	0801ab7c 	.word	0x0801ab7c
 800f47c:	0801ee6c 	.word	0x0801ee6c
 800f480:	0801ee5c 	.word	0x0801ee5c
 800f484:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f490:	2200      	movs	r2, #0
 800f492:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f496:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	bf28      	it	cs
 800f4a4:	4613      	movcs	r3, r2
 800f4a6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f4a8:	8a7b      	ldrh	r3, [r7, #18]
 800f4aa:	085b      	lsrs	r3, r3, #1
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4be:	005b      	lsls	r3, r3, #1
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d206      	bcs.n	800f4d4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4ca:	005b      	lsls	r3, r3, #1
 800f4cc:	b29a      	uxth	r2, r3
 800f4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f4e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4e8:	f004 fd5c 	bl	8013fa4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ee:	7d1b      	ldrb	r3, [r3, #20]
 800f4f0:	2b06      	cmp	r3, #6
 800f4f2:	d111      	bne.n	800f518 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f6:	8b5b      	ldrh	r3, [r3, #26]
 800f4f8:	f003 0310 	and.w	r3, r3, #16
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00b      	beq.n	800f518 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f500:	4b9d      	ldr	r3, [pc, #628]	; (800f778 <tcp_slowtmr+0x584>)
 800f502:	681a      	ldr	r2, [r3, #0]
 800f504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f506:	6a1b      	ldr	r3, [r3, #32]
 800f508:	1ad3      	subs	r3, r2, r3
 800f50a:	2b28      	cmp	r3, #40	; 0x28
 800f50c:	d904      	bls.n	800f518 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f50e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f512:	3301      	adds	r3, #1
 800f514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f51a:	7a5b      	ldrb	r3, [r3, #9]
 800f51c:	f003 0308 	and.w	r3, r3, #8
 800f520:	2b00      	cmp	r3, #0
 800f522:	d04c      	beq.n	800f5be <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f526:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f528:	2b04      	cmp	r3, #4
 800f52a:	d003      	beq.n	800f534 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f530:	2b07      	cmp	r3, #7
 800f532:	d144      	bne.n	800f5be <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f534:	4b90      	ldr	r3, [pc, #576]	; (800f778 <tcp_slowtmr+0x584>)
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53a:	6a1b      	ldr	r3, [r3, #32]
 800f53c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f544:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f548:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f54c:	498b      	ldr	r1, [pc, #556]	; (800f77c <tcp_slowtmr+0x588>)
 800f54e:	fba1 1303 	umull	r1, r3, r1, r3
 800f552:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f554:	429a      	cmp	r2, r3
 800f556:	d90a      	bls.n	800f56e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f55c:	3301      	adds	r3, #1
 800f55e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f566:	3301      	adds	r3, #1
 800f568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f56c:	e027      	b.n	800f5be <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f56e:	4b82      	ldr	r3, [pc, #520]	; (800f778 <tcp_slowtmr+0x584>)
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f574:	6a1b      	ldr	r3, [r3, #32]
 800f576:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f580:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f584:	4618      	mov	r0, r3
 800f586:	4b7e      	ldr	r3, [pc, #504]	; (800f780 <tcp_slowtmr+0x58c>)
 800f588:	fb03 f300 	mul.w	r3, r3, r0
 800f58c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f58e:	497b      	ldr	r1, [pc, #492]	; (800f77c <tcp_slowtmr+0x588>)
 800f590:	fba1 1303 	umull	r1, r3, r1, r3
 800f594:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f596:	429a      	cmp	r2, r3
 800f598:	d911      	bls.n	800f5be <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f59a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f59c:	f005 f808 	bl	80145b0 <tcp_keepalive>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f5a6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d107      	bne.n	800f5be <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	b2da      	uxtb	r2, r3
 800f5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ba:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d011      	beq.n	800f5ea <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f5c6:	4b6c      	ldr	r3, [pc, #432]	; (800f778 <tcp_slowtmr+0x584>)
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	1ad2      	subs	r2, r2, r3
 800f5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	460b      	mov	r3, r1
 800f5da:	005b      	lsls	r3, r3, #1
 800f5dc:	440b      	add	r3, r1
 800f5de:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d302      	bcc.n	800f5ea <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f5e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5e6:	f000 fec7 	bl	8010378 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ec:	7d1b      	ldrb	r3, [r3, #20]
 800f5ee:	2b03      	cmp	r3, #3
 800f5f0:	d10b      	bne.n	800f60a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5f2:	4b61      	ldr	r3, [pc, #388]	; (800f778 <tcp_slowtmr+0x584>)
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	2b28      	cmp	r3, #40	; 0x28
 800f5fe:	d904      	bls.n	800f60a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f604:	3301      	adds	r3, #1
 800f606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60c:	7d1b      	ldrb	r3, [r3, #20]
 800f60e:	2b09      	cmp	r3, #9
 800f610:	d10b      	bne.n	800f62a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f612:	4b59      	ldr	r3, [pc, #356]	; (800f778 <tcp_slowtmr+0x584>)
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f618:	6a1b      	ldr	r3, [r3, #32]
 800f61a:	1ad3      	subs	r3, r2, r3
 800f61c:	2bf0      	cmp	r3, #240	; 0xf0
 800f61e:	d904      	bls.n	800f62a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f624:	3301      	adds	r3, #1
 800f626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f62a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d060      	beq.n	800f6f4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f638:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f63a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f63c:	f000 fce8 	bl	8010010 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f642:	2b00      	cmp	r3, #0
 800f644:	d010      	beq.n	800f668 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f646:	4b4f      	ldr	r3, [pc, #316]	; (800f784 <tcp_slowtmr+0x590>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d106      	bne.n	800f65e <tcp_slowtmr+0x46a>
 800f650:	4b4d      	ldr	r3, [pc, #308]	; (800f788 <tcp_slowtmr+0x594>)
 800f652:	f240 526d 	movw	r2, #1389	; 0x56d
 800f656:	494d      	ldr	r1, [pc, #308]	; (800f78c <tcp_slowtmr+0x598>)
 800f658:	484d      	ldr	r0, [pc, #308]	; (800f790 <tcp_slowtmr+0x59c>)
 800f65a:	f007 fee1 	bl	8017420 <iprintf>
        prev->next = pcb->next;
 800f65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f660:	68da      	ldr	r2, [r3, #12]
 800f662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f664:	60da      	str	r2, [r3, #12]
 800f666:	e00f      	b.n	800f688 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f668:	4b46      	ldr	r3, [pc, #280]	; (800f784 <tcp_slowtmr+0x590>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f66e:	429a      	cmp	r2, r3
 800f670:	d006      	beq.n	800f680 <tcp_slowtmr+0x48c>
 800f672:	4b45      	ldr	r3, [pc, #276]	; (800f788 <tcp_slowtmr+0x594>)
 800f674:	f240 5271 	movw	r2, #1393	; 0x571
 800f678:	4946      	ldr	r1, [pc, #280]	; (800f794 <tcp_slowtmr+0x5a0>)
 800f67a:	4845      	ldr	r0, [pc, #276]	; (800f790 <tcp_slowtmr+0x59c>)
 800f67c:	f007 fed0 	bl	8017420 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	4a3f      	ldr	r2, [pc, #252]	; (800f784 <tcp_slowtmr+0x590>)
 800f686:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d013      	beq.n	800f6b8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f692:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f696:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f698:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69c:	3304      	adds	r3, #4
 800f69e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6a0:	8ad2      	ldrh	r2, [r2, #22]
 800f6a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6a4:	8b09      	ldrh	r1, [r1, #24]
 800f6a6:	9102      	str	r1, [sp, #8]
 800f6a8:	9201      	str	r2, [sp, #4]
 800f6aa:	9300      	str	r3, [sp, #0]
 800f6ac:	462b      	mov	r3, r5
 800f6ae:	4622      	mov	r2, r4
 800f6b0:	4601      	mov	r1, r0
 800f6b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6b4:	f004 fec8 	bl	8014448 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ba:	691b      	ldr	r3, [r3, #16]
 800f6bc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c0:	7d1b      	ldrb	r3, [r3, #20]
 800f6c2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f6ce:	6838      	ldr	r0, [r7, #0]
 800f6d0:	f7ff f838 	bl	800e744 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f6d4:	4b30      	ldr	r3, [pc, #192]	; (800f798 <tcp_slowtmr+0x5a4>)
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d004      	beq.n	800f6ea <tcp_slowtmr+0x4f6>
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f06f 010c 	mvn.w	r1, #12
 800f6e6:	68b8      	ldr	r0, [r7, #8]
 800f6e8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f6ea:	4b2b      	ldr	r3, [pc, #172]	; (800f798 <tcp_slowtmr+0x5a4>)
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d037      	beq.n	800f762 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f6f2:	e590      	b.n	800f216 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f700:	7f1b      	ldrb	r3, [r3, #28]
 800f702:	3301      	adds	r3, #1
 800f704:	b2da      	uxtb	r2, r3
 800f706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f708:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70c:	7f1a      	ldrb	r2, [r3, #28]
 800f70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f710:	7f5b      	ldrb	r3, [r3, #29]
 800f712:	429a      	cmp	r2, r3
 800f714:	d325      	bcc.n	800f762 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f718:	2200      	movs	r2, #0
 800f71a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f71c:	4b1e      	ldr	r3, [pc, #120]	; (800f798 <tcp_slowtmr+0x5a4>)
 800f71e:	2200      	movs	r2, #0
 800f720:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00b      	beq.n	800f744 <tcp_slowtmr+0x550>
 800f72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f734:	6912      	ldr	r2, [r2, #16]
 800f736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f738:	4610      	mov	r0, r2
 800f73a:	4798      	blx	r3
 800f73c:	4603      	mov	r3, r0
 800f73e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f742:	e002      	b.n	800f74a <tcp_slowtmr+0x556>
 800f744:	2300      	movs	r3, #0
 800f746:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f74a:	4b13      	ldr	r3, [pc, #76]	; (800f798 <tcp_slowtmr+0x5a4>)
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d000      	beq.n	800f754 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f752:	e560      	b.n	800f216 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f754:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d102      	bne.n	800f762 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f75e:	f004 f8bf 	bl	80138e0 <tcp_output>
  while (pcb != NULL) {
 800f762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f764:	2b00      	cmp	r3, #0
 800f766:	f47f ad5c 	bne.w	800f222 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f76e:	4b0b      	ldr	r3, [pc, #44]	; (800f79c <tcp_slowtmr+0x5a8>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f774:	e067      	b.n	800f846 <tcp_slowtmr+0x652>
 800f776:	bf00      	nop
 800f778:	20011834 	.word	0x20011834
 800f77c:	10624dd3 	.word	0x10624dd3
 800f780:	000124f8 	.word	0x000124f8
 800f784:	20011830 	.word	0x20011830
 800f788:	0801a77c 	.word	0x0801a77c
 800f78c:	0801abb4 	.word	0x0801abb4
 800f790:	0801a7c0 	.word	0x0801a7c0
 800f794:	0801abe0 	.word	0x0801abe0
 800f798:	2001182c 	.word	0x2001182c
 800f79c:	20011840 	.word	0x20011840
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a2:	7d1b      	ldrb	r3, [r3, #20]
 800f7a4:	2b0a      	cmp	r3, #10
 800f7a6:	d006      	beq.n	800f7b6 <tcp_slowtmr+0x5c2>
 800f7a8:	4b2b      	ldr	r3, [pc, #172]	; (800f858 <tcp_slowtmr+0x664>)
 800f7aa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f7ae:	492b      	ldr	r1, [pc, #172]	; (800f85c <tcp_slowtmr+0x668>)
 800f7b0:	482b      	ldr	r0, [pc, #172]	; (800f860 <tcp_slowtmr+0x66c>)
 800f7b2:	f007 fe35 	bl	8017420 <iprintf>
    pcb_remove = 0;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f7bc:	4b29      	ldr	r3, [pc, #164]	; (800f864 <tcp_slowtmr+0x670>)
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	6a1b      	ldr	r3, [r3, #32]
 800f7c4:	1ad3      	subs	r3, r2, r3
 800f7c6:	2bf0      	cmp	r3, #240	; 0xf0
 800f7c8:	d904      	bls.n	800f7d4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f7ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d02f      	beq.n	800f83c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f7dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7de:	f000 fc17 	bl	8010010 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d010      	beq.n	800f80a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f7e8:	4b1f      	ldr	r3, [pc, #124]	; (800f868 <tcp_slowtmr+0x674>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d106      	bne.n	800f800 <tcp_slowtmr+0x60c>
 800f7f2:	4b19      	ldr	r3, [pc, #100]	; (800f858 <tcp_slowtmr+0x664>)
 800f7f4:	f240 52af 	movw	r2, #1455	; 0x5af
 800f7f8:	491c      	ldr	r1, [pc, #112]	; (800f86c <tcp_slowtmr+0x678>)
 800f7fa:	4819      	ldr	r0, [pc, #100]	; (800f860 <tcp_slowtmr+0x66c>)
 800f7fc:	f007 fe10 	bl	8017420 <iprintf>
        prev->next = pcb->next;
 800f800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f802:	68da      	ldr	r2, [r3, #12]
 800f804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f806:	60da      	str	r2, [r3, #12]
 800f808:	e00f      	b.n	800f82a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f80a:	4b17      	ldr	r3, [pc, #92]	; (800f868 <tcp_slowtmr+0x674>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f810:	429a      	cmp	r2, r3
 800f812:	d006      	beq.n	800f822 <tcp_slowtmr+0x62e>
 800f814:	4b10      	ldr	r3, [pc, #64]	; (800f858 <tcp_slowtmr+0x664>)
 800f816:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f81a:	4915      	ldr	r1, [pc, #84]	; (800f870 <tcp_slowtmr+0x67c>)
 800f81c:	4810      	ldr	r0, [pc, #64]	; (800f860 <tcp_slowtmr+0x66c>)
 800f81e:	f007 fdff 	bl	8017420 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	4a10      	ldr	r2, [pc, #64]	; (800f868 <tcp_slowtmr+0x674>)
 800f828:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f834:	69f8      	ldr	r0, [r7, #28]
 800f836:	f7fe ff85 	bl	800e744 <tcp_free>
 800f83a:	e004      	b.n	800f846 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d1a9      	bne.n	800f7a0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f84c:	bf00      	nop
 800f84e:	bf00      	nop
 800f850:	3730      	adds	r7, #48	; 0x30
 800f852:	46bd      	mov	sp, r7
 800f854:	bdb0      	pop	{r4, r5, r7, pc}
 800f856:	bf00      	nop
 800f858:	0801a77c 	.word	0x0801a77c
 800f85c:	0801ac0c 	.word	0x0801ac0c
 800f860:	0801a7c0 	.word	0x0801a7c0
 800f864:	20011834 	.word	0x20011834
 800f868:	20011840 	.word	0x20011840
 800f86c:	0801ac3c 	.word	0x0801ac3c
 800f870:	0801ac64 	.word	0x0801ac64

0800f874 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f87a:	4b2d      	ldr	r3, [pc, #180]	; (800f930 <tcp_fasttmr+0xbc>)
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	3301      	adds	r3, #1
 800f880:	b2da      	uxtb	r2, r3
 800f882:	4b2b      	ldr	r3, [pc, #172]	; (800f930 <tcp_fasttmr+0xbc>)
 800f884:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f886:	4b2b      	ldr	r3, [pc, #172]	; (800f934 <tcp_fasttmr+0xc0>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f88c:	e048      	b.n	800f920 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	7f9a      	ldrb	r2, [r3, #30]
 800f892:	4b27      	ldr	r3, [pc, #156]	; (800f930 <tcp_fasttmr+0xbc>)
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	429a      	cmp	r2, r3
 800f898:	d03f      	beq.n	800f91a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f89a:	4b25      	ldr	r3, [pc, #148]	; (800f930 <tcp_fasttmr+0xbc>)
 800f89c:	781a      	ldrb	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	8b5b      	ldrh	r3, [r3, #26]
 800f8a6:	f003 0301 	and.w	r3, r3, #1
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d010      	beq.n	800f8d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	8b5b      	ldrh	r3, [r3, #26]
 800f8b2:	f043 0302 	orr.w	r3, r3, #2
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f004 f80f 	bl	80138e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	8b5b      	ldrh	r3, [r3, #26]
 800f8c6:	f023 0303 	bic.w	r3, r3, #3
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	8b5b      	ldrh	r3, [r3, #26]
 800f8d4:	f003 0308 	and.w	r3, r3, #8
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d009      	beq.n	800f8f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	8b5b      	ldrh	r3, [r3, #26]
 800f8e0:	f023 0308 	bic.w	r3, r3, #8
 800f8e4:	b29a      	uxth	r2, r3
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f7ff f8be 	bl	800ea6c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d00a      	beq.n	800f914 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f8fe:	4b0e      	ldr	r3, [pc, #56]	; (800f938 <tcp_fasttmr+0xc4>)
 800f900:	2200      	movs	r2, #0
 800f902:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f819 	bl	800f93c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f90a:	4b0b      	ldr	r3, [pc, #44]	; (800f938 <tcp_fasttmr+0xc4>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d000      	beq.n	800f914 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f912:	e7b8      	b.n	800f886 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	607b      	str	r3, [r7, #4]
 800f918:	e002      	b.n	800f920 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d1b3      	bne.n	800f88e <tcp_fasttmr+0x1a>
    }
  }
}
 800f926:	bf00      	nop
 800f928:	bf00      	nop
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	20001a0a 	.word	0x20001a0a
 800f934:	20011830 	.word	0x20011830
 800f938:	2001182c 	.word	0x2001182c

0800f93c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f93c:	b590      	push	{r4, r7, lr}
 800f93e:	b085      	sub	sp, #20
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d109      	bne.n	800f95e <tcp_process_refused_data+0x22>
 800f94a:	4b37      	ldr	r3, [pc, #220]	; (800fa28 <tcp_process_refused_data+0xec>)
 800f94c:	f240 6209 	movw	r2, #1545	; 0x609
 800f950:	4936      	ldr	r1, [pc, #216]	; (800fa2c <tcp_process_refused_data+0xf0>)
 800f952:	4837      	ldr	r0, [pc, #220]	; (800fa30 <tcp_process_refused_data+0xf4>)
 800f954:	f007 fd64 	bl	8017420 <iprintf>
 800f958:	f06f 030f 	mvn.w	r3, #15
 800f95c:	e060      	b.n	800fa20 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f962:	7b5b      	ldrb	r3, [r3, #13]
 800f964:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f96a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2200      	movs	r2, #0
 800f970:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d00b      	beq.n	800f994 <tcp_process_refused_data+0x58>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6918      	ldr	r0, [r3, #16]
 800f986:	2300      	movs	r3, #0
 800f988:	68ba      	ldr	r2, [r7, #8]
 800f98a:	6879      	ldr	r1, [r7, #4]
 800f98c:	47a0      	blx	r4
 800f98e:	4603      	mov	r3, r0
 800f990:	73fb      	strb	r3, [r7, #15]
 800f992:	e007      	b.n	800f9a4 <tcp_process_refused_data+0x68>
 800f994:	2300      	movs	r3, #0
 800f996:	68ba      	ldr	r2, [r7, #8]
 800f998:	6879      	ldr	r1, [r7, #4]
 800f99a:	2000      	movs	r0, #0
 800f99c:	f000 f8c2 	bl	800fb24 <tcp_recv_null>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f9a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d12a      	bne.n	800fa02 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f9ac:	7bbb      	ldrb	r3, [r7, #14]
 800f9ae:	f003 0320 	and.w	r3, r3, #32
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d033      	beq.n	800fa1e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f9be:	d005      	beq.n	800f9cc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	b29a      	uxth	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00b      	beq.n	800f9ee <tcp_process_refused_data+0xb2>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6918      	ldr	r0, [r3, #16]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	6879      	ldr	r1, [r7, #4]
 800f9e6:	47a0      	blx	r4
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	73fb      	strb	r3, [r7, #15]
 800f9ec:	e001      	b.n	800f9f2 <tcp_process_refused_data+0xb6>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f9f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9f6:	f113 0f0d 	cmn.w	r3, #13
 800f9fa:	d110      	bne.n	800fa1e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f9fc:	f06f 030c 	mvn.w	r3, #12
 800fa00:	e00e      	b.n	800fa20 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fa02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa06:	f113 0f0d 	cmn.w	r3, #13
 800fa0a:	d102      	bne.n	800fa12 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fa0c:	f06f 030c 	mvn.w	r3, #12
 800fa10:	e006      	b.n	800fa20 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	68ba      	ldr	r2, [r7, #8]
 800fa16:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fa18:	f06f 0304 	mvn.w	r3, #4
 800fa1c:	e000      	b.n	800fa20 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3714      	adds	r7, #20
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd90      	pop	{r4, r7, pc}
 800fa28:	0801a77c 	.word	0x0801a77c
 800fa2c:	0801ac8c 	.word	0x0801ac8c
 800fa30:	0801a7c0 	.word	0x0801a7c0

0800fa34 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fa3c:	e007      	b.n	800fa4e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 f80a 	bl	800fa5e <tcp_seg_free>
    seg = next;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1f4      	bne.n	800fa3e <tcp_segs_free+0xa>
  }
}
 800fa54:	bf00      	nop
 800fa56:	bf00      	nop
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b082      	sub	sp, #8
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00c      	beq.n	800fa86 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d004      	beq.n	800fa7e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fe fbc3 	bl	800e204 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fa7e:	6879      	ldr	r1, [r7, #4]
 800fa80:	2003      	movs	r0, #3
 800fa82:	f7fd fdad 	bl	800d5e0 <memp_free>
  }
}
 800fa86:	bf00      	nop
 800fa88:	3708      	adds	r7, #8
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
	...

0800fa90 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d107      	bne.n	800fab2 <tcp_setprio+0x22>
 800faa2:	4b07      	ldr	r3, [pc, #28]	; (800fac0 <tcp_setprio+0x30>)
 800faa4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800faa8:	4906      	ldr	r1, [pc, #24]	; (800fac4 <tcp_setprio+0x34>)
 800faaa:	4807      	ldr	r0, [pc, #28]	; (800fac8 <tcp_setprio+0x38>)
 800faac:	f007 fcb8 	bl	8017420 <iprintf>
 800fab0:	e002      	b.n	800fab8 <tcp_setprio+0x28>

  pcb->prio = prio;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	78fa      	ldrb	r2, [r7, #3]
 800fab6:	755a      	strb	r2, [r3, #21]
}
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	0801a77c 	.word	0x0801a77c
 800fac4:	0801acb4 	.word	0x0801acb4
 800fac8:	0801a7c0 	.word	0x0801a7c0

0800facc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d106      	bne.n	800fae8 <tcp_seg_copy+0x1c>
 800fada:	4b0f      	ldr	r3, [pc, #60]	; (800fb18 <tcp_seg_copy+0x4c>)
 800fadc:	f240 6282 	movw	r2, #1666	; 0x682
 800fae0:	490e      	ldr	r1, [pc, #56]	; (800fb1c <tcp_seg_copy+0x50>)
 800fae2:	480f      	ldr	r0, [pc, #60]	; (800fb20 <tcp_seg_copy+0x54>)
 800fae4:	f007 fc9c 	bl	8017420 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fae8:	2003      	movs	r0, #3
 800faea:	f7fd fd2d 	bl	800d548 <memp_malloc>
 800faee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d101      	bne.n	800fafa <tcp_seg_copy+0x2e>
    return NULL;
 800faf6:	2300      	movs	r3, #0
 800faf8:	e00a      	b.n	800fb10 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fafa:	2210      	movs	r2, #16
 800fafc:	6879      	ldr	r1, [r7, #4]
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	f007 fc5e 	bl	80173c0 <memcpy>
  pbuf_ref(cseg->p);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fe fc1b 	bl	800e344 <pbuf_ref>
  return cseg;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	0801a77c 	.word	0x0801a77c
 800fb1c:	0801acd0 	.word	0x0801acd0
 800fb20:	0801a7c0 	.word	0x0801a7c0

0800fb24 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	607a      	str	r2, [r7, #4]
 800fb30:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d109      	bne.n	800fb4c <tcp_recv_null+0x28>
 800fb38:	4b12      	ldr	r3, [pc, #72]	; (800fb84 <tcp_recv_null+0x60>)
 800fb3a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fb3e:	4912      	ldr	r1, [pc, #72]	; (800fb88 <tcp_recv_null+0x64>)
 800fb40:	4812      	ldr	r0, [pc, #72]	; (800fb8c <tcp_recv_null+0x68>)
 800fb42:	f007 fc6d 	bl	8017420 <iprintf>
 800fb46:	f06f 030f 	mvn.w	r3, #15
 800fb4a:	e016      	b.n	800fb7a <tcp_recv_null+0x56>

  if (p != NULL) {
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d009      	beq.n	800fb66 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	891b      	ldrh	r3, [r3, #8]
 800fb56:	4619      	mov	r1, r3
 800fb58:	68b8      	ldr	r0, [r7, #8]
 800fb5a:	f7ff fab5 	bl	800f0c8 <tcp_recved>
    pbuf_free(p);
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7fe fb50 	bl	800e204 <pbuf_free>
 800fb64:	e008      	b.n	800fb78 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fb66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d104      	bne.n	800fb78 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fb6e:	68b8      	ldr	r0, [r7, #8]
 800fb70:	f7fe ffe6 	bl	800eb40 <tcp_close>
 800fb74:	4603      	mov	r3, r0
 800fb76:	e000      	b.n	800fb7a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	0801a77c 	.word	0x0801a77c
 800fb88:	0801acec 	.word	0x0801acec
 800fb8c:	0801a7c0 	.word	0x0801a7c0

0800fb90 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	4603      	mov	r3, r0
 800fb98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fb9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	db01      	blt.n	800fba6 <tcp_kill_prio+0x16>
 800fba2:	79fb      	ldrb	r3, [r7, #7]
 800fba4:	e000      	b.n	800fba8 <tcp_kill_prio+0x18>
 800fba6:	237f      	movs	r3, #127	; 0x7f
 800fba8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800fbaa:	7afb      	ldrb	r3, [r7, #11]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d034      	beq.n	800fc1a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fbb0:	7afb      	ldrb	r3, [r7, #11]
 800fbb2:	3b01      	subs	r3, #1
 800fbb4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbbe:	4b19      	ldr	r3, [pc, #100]	; (800fc24 <tcp_kill_prio+0x94>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	617b      	str	r3, [r7, #20]
 800fbc4:	e01f      	b.n	800fc06 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	7d5b      	ldrb	r3, [r3, #21]
 800fbca:	7afa      	ldrb	r2, [r7, #11]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d80c      	bhi.n	800fbea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fbd4:	7afa      	ldrb	r2, [r7, #11]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d112      	bne.n	800fc00 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fbda:	4b13      	ldr	r3, [pc, #76]	; (800fc28 <tcp_kill_prio+0x98>)
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	6a1b      	ldr	r3, [r3, #32]
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d80a      	bhi.n	800fc00 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fbea:	4b0f      	ldr	r3, [pc, #60]	; (800fc28 <tcp_kill_prio+0x98>)
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	6a1b      	ldr	r3, [r3, #32]
 800fbf2:	1ad3      	subs	r3, r2, r3
 800fbf4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	7d5b      	ldrb	r3, [r3, #21]
 800fbfe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	617b      	str	r3, [r7, #20]
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1dc      	bne.n	800fbc6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d004      	beq.n	800fc1c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fc12:	6938      	ldr	r0, [r7, #16]
 800fc14:	f7ff f87e 	bl	800ed14 <tcp_abort>
 800fc18:	e000      	b.n	800fc1c <tcp_kill_prio+0x8c>
    return;
 800fc1a:	bf00      	nop
  }
}
 800fc1c:	3718      	adds	r7, #24
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	20011830 	.word	0x20011830
 800fc28:	20011834 	.word	0x20011834

0800fc2c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b086      	sub	sp, #24
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	4603      	mov	r3, r0
 800fc34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fc36:	79fb      	ldrb	r3, [r7, #7]
 800fc38:	2b08      	cmp	r3, #8
 800fc3a:	d009      	beq.n	800fc50 <tcp_kill_state+0x24>
 800fc3c:	79fb      	ldrb	r3, [r7, #7]
 800fc3e:	2b09      	cmp	r3, #9
 800fc40:	d006      	beq.n	800fc50 <tcp_kill_state+0x24>
 800fc42:	4b1a      	ldr	r3, [pc, #104]	; (800fcac <tcp_kill_state+0x80>)
 800fc44:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fc48:	4919      	ldr	r1, [pc, #100]	; (800fcb0 <tcp_kill_state+0x84>)
 800fc4a:	481a      	ldr	r0, [pc, #104]	; (800fcb4 <tcp_kill_state+0x88>)
 800fc4c:	f007 fbe8 	bl	8017420 <iprintf>

  inactivity = 0;
 800fc50:	2300      	movs	r3, #0
 800fc52:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fc54:	2300      	movs	r3, #0
 800fc56:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc58:	4b17      	ldr	r3, [pc, #92]	; (800fcb8 <tcp_kill_state+0x8c>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	617b      	str	r3, [r7, #20]
 800fc5e:	e017      	b.n	800fc90 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	7d1b      	ldrb	r3, [r3, #20]
 800fc64:	79fa      	ldrb	r2, [r7, #7]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d10f      	bne.n	800fc8a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fc6a:	4b14      	ldr	r3, [pc, #80]	; (800fcbc <tcp_kill_state+0x90>)
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	1ad3      	subs	r3, r2, r3
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d807      	bhi.n	800fc8a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fc7a:	4b10      	ldr	r3, [pc, #64]	; (800fcbc <tcp_kill_state+0x90>)
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	6a1b      	ldr	r3, [r3, #32]
 800fc82:	1ad3      	subs	r3, r2, r3
 800fc84:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	617b      	str	r3, [r7, #20]
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1e4      	bne.n	800fc60 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d003      	beq.n	800fca4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	6938      	ldr	r0, [r7, #16]
 800fca0:	f7fe ff7a 	bl	800eb98 <tcp_abandon>
  }
}
 800fca4:	bf00      	nop
 800fca6:	3718      	adds	r7, #24
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	0801a77c 	.word	0x0801a77c
 800fcb0:	0801ad08 	.word	0x0801ad08
 800fcb4:	0801a7c0 	.word	0x0801a7c0
 800fcb8:	20011830 	.word	0x20011830
 800fcbc:	20011834 	.word	0x20011834

0800fcc0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fcca:	2300      	movs	r3, #0
 800fccc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcce:	4b12      	ldr	r3, [pc, #72]	; (800fd18 <tcp_kill_timewait+0x58>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	60fb      	str	r3, [r7, #12]
 800fcd4:	e012      	b.n	800fcfc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fcd6:	4b11      	ldr	r3, [pc, #68]	; (800fd1c <tcp_kill_timewait+0x5c>)
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	6a1b      	ldr	r3, [r3, #32]
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d807      	bhi.n	800fcf6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fce6:	4b0d      	ldr	r3, [pc, #52]	; (800fd1c <tcp_kill_timewait+0x5c>)
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	6a1b      	ldr	r3, [r3, #32]
 800fcee:	1ad3      	subs	r3, r2, r3
 800fcf0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	60fb      	str	r3, [r7, #12]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d1e9      	bne.n	800fcd6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d002      	beq.n	800fd0e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fd08:	68b8      	ldr	r0, [r7, #8]
 800fd0a:	f7ff f803 	bl	800ed14 <tcp_abort>
  }
}
 800fd0e:	bf00      	nop
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	20011840 	.word	0x20011840
 800fd1c:	20011834 	.word	0x20011834

0800fd20 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fd26:	4b10      	ldr	r3, [pc, #64]	; (800fd68 <tcp_handle_closepend+0x48>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fd2c:	e014      	b.n	800fd58 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	8b5b      	ldrh	r3, [r3, #26]
 800fd38:	f003 0308 	and.w	r3, r3, #8
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d009      	beq.n	800fd54 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	8b5b      	ldrh	r3, [r3, #26]
 800fd44:	f023 0308 	bic.w	r3, r3, #8
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f7fe fe8c 	bl	800ea6c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d1e7      	bne.n	800fd2e <tcp_handle_closepend+0xe>
  }
}
 800fd5e:	bf00      	nop
 800fd60:	bf00      	nop
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	20011830 	.word	0x20011830

0800fd6c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd76:	2001      	movs	r0, #1
 800fd78:	f7fd fbe6 	bl	800d548 <memp_malloc>
 800fd7c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d126      	bne.n	800fdd2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fd84:	f7ff ffcc 	bl	800fd20 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fd88:	f7ff ff9a 	bl	800fcc0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	f7fd fbdb 	bl	800d548 <memp_malloc>
 800fd92:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d11b      	bne.n	800fdd2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fd9a:	2009      	movs	r0, #9
 800fd9c:	f7ff ff46 	bl	800fc2c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fda0:	2001      	movs	r0, #1
 800fda2:	f7fd fbd1 	bl	800d548 <memp_malloc>
 800fda6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d111      	bne.n	800fdd2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fdae:	2008      	movs	r0, #8
 800fdb0:	f7ff ff3c 	bl	800fc2c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdb4:	2001      	movs	r0, #1
 800fdb6:	f7fd fbc7 	bl	800d548 <memp_malloc>
 800fdba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d107      	bne.n	800fdd2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fdc2:	79fb      	ldrb	r3, [r7, #7]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7ff fee3 	bl	800fb90 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdca:	2001      	movs	r0, #1
 800fdcc:	f7fd fbbc 	bl	800d548 <memp_malloc>
 800fdd0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d03f      	beq.n	800fe58 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fdd8:	229c      	movs	r2, #156	; 0x9c
 800fdda:	2100      	movs	r1, #0
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f007 fb17 	bl	8017410 <memset>
    pcb->prio = prio;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	79fa      	ldrb	r2, [r7, #7]
 800fde6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fdee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fdf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	22ff      	movs	r2, #255	; 0xff
 800fe06:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fe0e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2206      	movs	r2, #6
 800fe14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2206      	movs	r2, #6
 800fe1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe24:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fe2e:	4b0d      	ldr	r3, [pc, #52]	; (800fe64 <tcp_alloc+0xf8>)
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fe36:	4b0c      	ldr	r3, [pc, #48]	; (800fe68 <tcp_alloc+0xfc>)
 800fe38:	781a      	ldrb	r2, [r3, #0]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fe44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	4a08      	ldr	r2, [pc, #32]	; (800fe6c <tcp_alloc+0x100>)
 800fe4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4a07      	ldr	r2, [pc, #28]	; (800fe70 <tcp_alloc+0x104>)
 800fe54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fe58:	68fb      	ldr	r3, [r7, #12]
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	20011834 	.word	0x20011834
 800fe68:	20001a0a 	.word	0x20001a0a
 800fe6c:	0800fb25 	.word	0x0800fb25
 800fe70:	006ddd00 	.word	0x006ddd00

0800fe74 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fe7e:	2040      	movs	r0, #64	; 0x40
 800fe80:	f7ff ff74 	bl	800fd6c <tcp_alloc>
 800fe84:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fe86:	68fb      	ldr	r3, [r7, #12]
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d002      	beq.n	800fea6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	683a      	ldr	r2, [r7, #0]
 800fea4:	611a      	str	r2, [r3, #16]
  }
}
 800fea6:	bf00      	nop
 800fea8:	370c      	adds	r7, #12
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr
	...

0800feb4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00e      	beq.n	800fee2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	7d1b      	ldrb	r3, [r3, #20]
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d106      	bne.n	800feda <tcp_recv+0x26>
 800fecc:	4b07      	ldr	r3, [pc, #28]	; (800feec <tcp_recv+0x38>)
 800fece:	f240 72df 	movw	r2, #2015	; 0x7df
 800fed2:	4907      	ldr	r1, [pc, #28]	; (800fef0 <tcp_recv+0x3c>)
 800fed4:	4807      	ldr	r0, [pc, #28]	; (800fef4 <tcp_recv+0x40>)
 800fed6:	f007 faa3 	bl	8017420 <iprintf>
    pcb->recv = recv;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	683a      	ldr	r2, [r7, #0]
 800fede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fee2:	bf00      	nop
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	0801a77c 	.word	0x0801a77c
 800fef0:	0801ad18 	.word	0x0801ad18
 800fef4:	0801a7c0 	.word	0x0801a7c0

0800fef8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d00e      	beq.n	800ff26 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	7d1b      	ldrb	r3, [r3, #20]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d106      	bne.n	800ff1e <tcp_sent+0x26>
 800ff10:	4b07      	ldr	r3, [pc, #28]	; (800ff30 <tcp_sent+0x38>)
 800ff12:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ff16:	4907      	ldr	r1, [pc, #28]	; (800ff34 <tcp_sent+0x3c>)
 800ff18:	4807      	ldr	r0, [pc, #28]	; (800ff38 <tcp_sent+0x40>)
 800ff1a:	f007 fa81 	bl	8017420 <iprintf>
    pcb->sent = sent;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ff26:	bf00      	nop
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	0801a77c 	.word	0x0801a77c
 800ff34:	0801ad40 	.word	0x0801ad40
 800ff38:	0801a7c0 	.word	0x0801a7c0

0800ff3c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d00e      	beq.n	800ff6a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	7d1b      	ldrb	r3, [r3, #20]
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d106      	bne.n	800ff62 <tcp_err+0x26>
 800ff54:	4b07      	ldr	r3, [pc, #28]	; (800ff74 <tcp_err+0x38>)
 800ff56:	f640 020d 	movw	r2, #2061	; 0x80d
 800ff5a:	4907      	ldr	r1, [pc, #28]	; (800ff78 <tcp_err+0x3c>)
 800ff5c:	4807      	ldr	r0, [pc, #28]	; (800ff7c <tcp_err+0x40>)
 800ff5e:	f007 fa5f 	bl	8017420 <iprintf>
    pcb->errf = err;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ff6a:	bf00      	nop
 800ff6c:	3708      	adds	r7, #8
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	0801a77c 	.word	0x0801a77c
 800ff78:	0801ad68 	.word	0x0801ad68
 800ff7c:	0801a7c0 	.word	0x0801a7c0

0800ff80 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d008      	beq.n	800ffa2 <tcp_accept+0x22>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	7d1b      	ldrb	r3, [r3, #20]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d104      	bne.n	800ffa2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	683a      	ldr	r2, [r7, #0]
 800ffa0:	619a      	str	r2, [r3, #24]
  }
}
 800ffa2:	bf00      	nop
 800ffa4:	3714      	adds	r7, #20
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
	...

0800ffb0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d107      	bne.n	800ffd4 <tcp_poll+0x24>
 800ffc4:	4b0e      	ldr	r3, [pc, #56]	; (8010000 <tcp_poll+0x50>)
 800ffc6:	f640 023d 	movw	r2, #2109	; 0x83d
 800ffca:	490e      	ldr	r1, [pc, #56]	; (8010004 <tcp_poll+0x54>)
 800ffcc:	480e      	ldr	r0, [pc, #56]	; (8010008 <tcp_poll+0x58>)
 800ffce:	f007 fa27 	bl	8017420 <iprintf>
 800ffd2:	e011      	b.n	800fff8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	7d1b      	ldrb	r3, [r3, #20]
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d106      	bne.n	800ffea <tcp_poll+0x3a>
 800ffdc:	4b08      	ldr	r3, [pc, #32]	; (8010000 <tcp_poll+0x50>)
 800ffde:	f640 023e 	movw	r2, #2110	; 0x83e
 800ffe2:	490a      	ldr	r1, [pc, #40]	; (801000c <tcp_poll+0x5c>)
 800ffe4:	4808      	ldr	r0, [pc, #32]	; (8010008 <tcp_poll+0x58>)
 800ffe6:	f007 fa1b 	bl	8017420 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	68ba      	ldr	r2, [r7, #8]
 800ffee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	79fa      	ldrb	r2, [r7, #7]
 800fff6:	775a      	strb	r2, [r3, #29]
}
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	0801a77c 	.word	0x0801a77c
 8010004:	0801ad90 	.word	0x0801ad90
 8010008:	0801a7c0 	.word	0x0801a7c0
 801000c:	0801ada8 	.word	0x0801ada8

08010010 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d107      	bne.n	801002e <tcp_pcb_purge+0x1e>
 801001e:	4b21      	ldr	r3, [pc, #132]	; (80100a4 <tcp_pcb_purge+0x94>)
 8010020:	f640 0251 	movw	r2, #2129	; 0x851
 8010024:	4920      	ldr	r1, [pc, #128]	; (80100a8 <tcp_pcb_purge+0x98>)
 8010026:	4821      	ldr	r0, [pc, #132]	; (80100ac <tcp_pcb_purge+0x9c>)
 8010028:	f007 f9fa 	bl	8017420 <iprintf>
 801002c:	e037      	b.n	801009e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7d1b      	ldrb	r3, [r3, #20]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d033      	beq.n	801009e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801003a:	2b0a      	cmp	r3, #10
 801003c:	d02f      	beq.n	801009e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010042:	2b01      	cmp	r3, #1
 8010044:	d02b      	beq.n	801009e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801004a:	2b00      	cmp	r3, #0
 801004c:	d007      	beq.n	801005e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010052:	4618      	mov	r0, r3
 8010054:	f7fe f8d6 	bl	800e204 <pbuf_free>
      pcb->refused_data = NULL;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2200      	movs	r2, #0
 801005c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010062:	2b00      	cmp	r3, #0
 8010064:	d002      	beq.n	801006c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f000 f986 	bl	8010378 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010072:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010078:	4618      	mov	r0, r3
 801007a:	f7ff fcdb 	bl	800fa34 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010082:	4618      	mov	r0, r3
 8010084:	f7ff fcd6 	bl	800fa34 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	66da      	str	r2, [r3, #108]	; 0x6c
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	0801a77c 	.word	0x0801a77c
 80100a8:	0801adc8 	.word	0x0801adc8
 80100ac:	0801a7c0 	.word	0x0801a7c0

080100b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d106      	bne.n	80100ce <tcp_pcb_remove+0x1e>
 80100c0:	4b3e      	ldr	r3, [pc, #248]	; (80101bc <tcp_pcb_remove+0x10c>)
 80100c2:	f640 0283 	movw	r2, #2179	; 0x883
 80100c6:	493e      	ldr	r1, [pc, #248]	; (80101c0 <tcp_pcb_remove+0x110>)
 80100c8:	483e      	ldr	r0, [pc, #248]	; (80101c4 <tcp_pcb_remove+0x114>)
 80100ca:	f007 f9a9 	bl	8017420 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d106      	bne.n	80100e2 <tcp_pcb_remove+0x32>
 80100d4:	4b39      	ldr	r3, [pc, #228]	; (80101bc <tcp_pcb_remove+0x10c>)
 80100d6:	f640 0284 	movw	r2, #2180	; 0x884
 80100da:	493b      	ldr	r1, [pc, #236]	; (80101c8 <tcp_pcb_remove+0x118>)
 80100dc:	4839      	ldr	r0, [pc, #228]	; (80101c4 <tcp_pcb_remove+0x114>)
 80100de:	f007 f99f 	bl	8017420 <iprintf>

  TCP_RMV(pcblist, pcb);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	683a      	ldr	r2, [r7, #0]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d105      	bne.n	80100f8 <tcp_pcb_remove+0x48>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	68da      	ldr	r2, [r3, #12]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	e013      	b.n	8010120 <tcp_pcb_remove+0x70>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	60fb      	str	r3, [r7, #12]
 80100fe:	e00c      	b.n	801011a <tcp_pcb_remove+0x6a>
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	683a      	ldr	r2, [r7, #0]
 8010106:	429a      	cmp	r2, r3
 8010108:	d104      	bne.n	8010114 <tcp_pcb_remove+0x64>
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	68da      	ldr	r2, [r3, #12]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	60da      	str	r2, [r3, #12]
 8010112:	e005      	b.n	8010120 <tcp_pcb_remove+0x70>
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	60fb      	str	r3, [r7, #12]
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1ef      	bne.n	8010100 <tcp_pcb_remove+0x50>
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	2200      	movs	r2, #0
 8010124:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010126:	6838      	ldr	r0, [r7, #0]
 8010128:	f7ff ff72 	bl	8010010 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	7d1b      	ldrb	r3, [r3, #20]
 8010130:	2b0a      	cmp	r3, #10
 8010132:	d013      	beq.n	801015c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010138:	2b01      	cmp	r3, #1
 801013a:	d00f      	beq.n	801015c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	8b5b      	ldrh	r3, [r3, #26]
 8010140:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010144:	2b00      	cmp	r3, #0
 8010146:	d009      	beq.n	801015c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	8b5b      	ldrh	r3, [r3, #26]
 801014c:	f043 0302 	orr.w	r3, r3, #2
 8010150:	b29a      	uxth	r2, r3
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010156:	6838      	ldr	r0, [r7, #0]
 8010158:	f003 fbc2 	bl	80138e0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	7d1b      	ldrb	r3, [r3, #20]
 8010160:	2b01      	cmp	r3, #1
 8010162:	d020      	beq.n	80101a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010168:	2b00      	cmp	r3, #0
 801016a:	d006      	beq.n	801017a <tcp_pcb_remove+0xca>
 801016c:	4b13      	ldr	r3, [pc, #76]	; (80101bc <tcp_pcb_remove+0x10c>)
 801016e:	f640 0293 	movw	r2, #2195	; 0x893
 8010172:	4916      	ldr	r1, [pc, #88]	; (80101cc <tcp_pcb_remove+0x11c>)
 8010174:	4813      	ldr	r0, [pc, #76]	; (80101c4 <tcp_pcb_remove+0x114>)
 8010176:	f007 f953 	bl	8017420 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801017e:	2b00      	cmp	r3, #0
 8010180:	d006      	beq.n	8010190 <tcp_pcb_remove+0xe0>
 8010182:	4b0e      	ldr	r3, [pc, #56]	; (80101bc <tcp_pcb_remove+0x10c>)
 8010184:	f640 0294 	movw	r2, #2196	; 0x894
 8010188:	4911      	ldr	r1, [pc, #68]	; (80101d0 <tcp_pcb_remove+0x120>)
 801018a:	480e      	ldr	r0, [pc, #56]	; (80101c4 <tcp_pcb_remove+0x114>)
 801018c:	f007 f948 	bl	8017420 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010194:	2b00      	cmp	r3, #0
 8010196:	d006      	beq.n	80101a6 <tcp_pcb_remove+0xf6>
 8010198:	4b08      	ldr	r3, [pc, #32]	; (80101bc <tcp_pcb_remove+0x10c>)
 801019a:	f640 0296 	movw	r2, #2198	; 0x896
 801019e:	490d      	ldr	r1, [pc, #52]	; (80101d4 <tcp_pcb_remove+0x124>)
 80101a0:	4808      	ldr	r0, [pc, #32]	; (80101c4 <tcp_pcb_remove+0x114>)
 80101a2:	f007 f93d 	bl	8017420 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	2200      	movs	r2, #0
 80101aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	2200      	movs	r2, #0
 80101b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80101b2:	bf00      	nop
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	0801a77c 	.word	0x0801a77c
 80101c0:	0801ade4 	.word	0x0801ade4
 80101c4:	0801a7c0 	.word	0x0801a7c0
 80101c8:	0801ae00 	.word	0x0801ae00
 80101cc:	0801ae20 	.word	0x0801ae20
 80101d0:	0801ae38 	.word	0x0801ae38
 80101d4:	0801ae54 	.word	0x0801ae54

080101d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d106      	bne.n	80101f4 <tcp_next_iss+0x1c>
 80101e6:	4b0a      	ldr	r3, [pc, #40]	; (8010210 <tcp_next_iss+0x38>)
 80101e8:	f640 02af 	movw	r2, #2223	; 0x8af
 80101ec:	4909      	ldr	r1, [pc, #36]	; (8010214 <tcp_next_iss+0x3c>)
 80101ee:	480a      	ldr	r0, [pc, #40]	; (8010218 <tcp_next_iss+0x40>)
 80101f0:	f007 f916 	bl	8017420 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80101f4:	4b09      	ldr	r3, [pc, #36]	; (801021c <tcp_next_iss+0x44>)
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	4b09      	ldr	r3, [pc, #36]	; (8010220 <tcp_next_iss+0x48>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4413      	add	r3, r2
 80101fe:	4a07      	ldr	r2, [pc, #28]	; (801021c <tcp_next_iss+0x44>)
 8010200:	6013      	str	r3, [r2, #0]
  return iss;
 8010202:	4b06      	ldr	r3, [pc, #24]	; (801021c <tcp_next_iss+0x44>)
 8010204:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010206:	4618      	mov	r0, r3
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	0801a77c 	.word	0x0801a77c
 8010214:	0801ae6c 	.word	0x0801ae6c
 8010218:	0801a7c0 	.word	0x0801a7c0
 801021c:	200004a8 	.word	0x200004a8
 8010220:	20011834 	.word	0x20011834

08010224 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b086      	sub	sp, #24
 8010228:	af00      	add	r7, sp, #0
 801022a:	4603      	mov	r3, r0
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	607a      	str	r2, [r7, #4]
 8010230:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d106      	bne.n	8010246 <tcp_eff_send_mss_netif+0x22>
 8010238:	4b14      	ldr	r3, [pc, #80]	; (801028c <tcp_eff_send_mss_netif+0x68>)
 801023a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801023e:	4914      	ldr	r1, [pc, #80]	; (8010290 <tcp_eff_send_mss_netif+0x6c>)
 8010240:	4814      	ldr	r0, [pc, #80]	; (8010294 <tcp_eff_send_mss_netif+0x70>)
 8010242:	f007 f8ed 	bl	8017420 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d101      	bne.n	8010250 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801024c:	89fb      	ldrh	r3, [r7, #14]
 801024e:	e019      	b.n	8010284 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010254:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010256:	8afb      	ldrh	r3, [r7, #22]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d012      	beq.n	8010282 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801025c:	2328      	movs	r3, #40	; 0x28
 801025e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010260:	8afa      	ldrh	r2, [r7, #22]
 8010262:	8abb      	ldrh	r3, [r7, #20]
 8010264:	429a      	cmp	r2, r3
 8010266:	d904      	bls.n	8010272 <tcp_eff_send_mss_netif+0x4e>
 8010268:	8afa      	ldrh	r2, [r7, #22]
 801026a:	8abb      	ldrh	r3, [r7, #20]
 801026c:	1ad3      	subs	r3, r2, r3
 801026e:	b29b      	uxth	r3, r3
 8010270:	e000      	b.n	8010274 <tcp_eff_send_mss_netif+0x50>
 8010272:	2300      	movs	r3, #0
 8010274:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010276:	8a7a      	ldrh	r2, [r7, #18]
 8010278:	89fb      	ldrh	r3, [r7, #14]
 801027a:	4293      	cmp	r3, r2
 801027c:	bf28      	it	cs
 801027e:	4613      	movcs	r3, r2
 8010280:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010282:	89fb      	ldrh	r3, [r7, #14]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3718      	adds	r7, #24
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	0801a77c 	.word	0x0801a77c
 8010290:	0801ae88 	.word	0x0801ae88
 8010294:	0801a7c0 	.word	0x0801a7c0

08010298 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b084      	sub	sp, #16
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d119      	bne.n	80102e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80102ac:	4b10      	ldr	r3, [pc, #64]	; (80102f0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80102ae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80102b2:	4910      	ldr	r1, [pc, #64]	; (80102f4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80102b4:	4810      	ldr	r0, [pc, #64]	; (80102f8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80102b6:	f007 f8b3 	bl	8017420 <iprintf>

  while (pcb != NULL) {
 80102ba:	e011      	b.n	80102e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d108      	bne.n	80102da <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80102ce:	68f8      	ldr	r0, [r7, #12]
 80102d0:	f7fe fd20 	bl	800ed14 <tcp_abort>
      pcb = next;
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	60fb      	str	r3, [r7, #12]
 80102d8:	e002      	b.n	80102e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	68db      	ldr	r3, [r3, #12]
 80102de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1ea      	bne.n	80102bc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80102e6:	bf00      	nop
 80102e8:	bf00      	nop
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	0801a77c 	.word	0x0801a77c
 80102f4:	0801aeb0 	.word	0x0801aeb0
 80102f8:	0801a7c0 	.word	0x0801a7c0

080102fc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d02a      	beq.n	8010362 <tcp_netif_ip_addr_changed+0x66>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d026      	beq.n	8010362 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010314:	4b15      	ldr	r3, [pc, #84]	; (801036c <tcp_netif_ip_addr_changed+0x70>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4619      	mov	r1, r3
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f7ff ffbc 	bl	8010298 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010320:	4b13      	ldr	r3, [pc, #76]	; (8010370 <tcp_netif_ip_addr_changed+0x74>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4619      	mov	r1, r3
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f7ff ffb6 	bl	8010298 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d017      	beq.n	8010362 <tcp_netif_ip_addr_changed+0x66>
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d013      	beq.n	8010362 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801033a:	4b0e      	ldr	r3, [pc, #56]	; (8010374 <tcp_netif_ip_addr_changed+0x78>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	60fb      	str	r3, [r7, #12]
 8010340:	e00c      	b.n	801035c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	429a      	cmp	r2, r3
 801034c:	d103      	bne.n	8010356 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	681a      	ldr	r2, [r3, #0]
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	60fb      	str	r3, [r7, #12]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1ef      	bne.n	8010342 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010362:	bf00      	nop
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	20011830 	.word	0x20011830
 8010370:	2001183c 	.word	0x2001183c
 8010374:	20011838 	.word	0x20011838

08010378 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010384:	2b00      	cmp	r3, #0
 8010386:	d007      	beq.n	8010398 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801038c:	4618      	mov	r0, r3
 801038e:	f7ff fb51 	bl	800fa34 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2200      	movs	r2, #0
 8010396:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010398:	bf00      	nop
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80103a0:	b590      	push	{r4, r7, lr}
 80103a2:	b08d      	sub	sp, #52	; 0x34
 80103a4:	af04      	add	r7, sp, #16
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d105      	bne.n	80103bc <tcp_input+0x1c>
 80103b0:	4b9b      	ldr	r3, [pc, #620]	; (8010620 <tcp_input+0x280>)
 80103b2:	2283      	movs	r2, #131	; 0x83
 80103b4:	499b      	ldr	r1, [pc, #620]	; (8010624 <tcp_input+0x284>)
 80103b6:	489c      	ldr	r0, [pc, #624]	; (8010628 <tcp_input+0x288>)
 80103b8:	f007 f832 	bl	8017420 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	4a9a      	ldr	r2, [pc, #616]	; (801062c <tcp_input+0x28c>)
 80103c2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	895b      	ldrh	r3, [r3, #10]
 80103c8:	2b13      	cmp	r3, #19
 80103ca:	f240 83c4 	bls.w	8010b56 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80103ce:	4b98      	ldr	r3, [pc, #608]	; (8010630 <tcp_input+0x290>)
 80103d0:	695b      	ldr	r3, [r3, #20]
 80103d2:	4a97      	ldr	r2, [pc, #604]	; (8010630 <tcp_input+0x290>)
 80103d4:	6812      	ldr	r2, [r2, #0]
 80103d6:	4611      	mov	r1, r2
 80103d8:	4618      	mov	r0, r3
 80103da:	f006 f86b 	bl	80164b4 <ip4_addr_isbroadcast_u32>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f040 83ba 	bne.w	8010b5a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80103e6:	4b92      	ldr	r3, [pc, #584]	; (8010630 <tcp_input+0x290>)
 80103e8:	695b      	ldr	r3, [r3, #20]
 80103ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80103ee:	2be0      	cmp	r3, #224	; 0xe0
 80103f0:	f000 83b3 	beq.w	8010b5a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80103f4:	4b8d      	ldr	r3, [pc, #564]	; (801062c <tcp_input+0x28c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	899b      	ldrh	r3, [r3, #12]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fc fb6f 	bl	800cae0 <lwip_htons>
 8010402:	4603      	mov	r3, r0
 8010404:	0b1b      	lsrs	r3, r3, #12
 8010406:	b29b      	uxth	r3, r3
 8010408:	b2db      	uxtb	r3, r3
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801040e:	7cbb      	ldrb	r3, [r7, #18]
 8010410:	2b13      	cmp	r3, #19
 8010412:	f240 83a4 	bls.w	8010b5e <tcp_input+0x7be>
 8010416:	7cbb      	ldrb	r3, [r7, #18]
 8010418:	b29a      	uxth	r2, r3
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	891b      	ldrh	r3, [r3, #8]
 801041e:	429a      	cmp	r2, r3
 8010420:	f200 839d 	bhi.w	8010b5e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010424:	7cbb      	ldrb	r3, [r7, #18]
 8010426:	b29b      	uxth	r3, r3
 8010428:	3b14      	subs	r3, #20
 801042a:	b29a      	uxth	r2, r3
 801042c:	4b81      	ldr	r3, [pc, #516]	; (8010634 <tcp_input+0x294>)
 801042e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010430:	4b81      	ldr	r3, [pc, #516]	; (8010638 <tcp_input+0x298>)
 8010432:	2200      	movs	r2, #0
 8010434:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	895a      	ldrh	r2, [r3, #10]
 801043a:	7cbb      	ldrb	r3, [r7, #18]
 801043c:	b29b      	uxth	r3, r3
 801043e:	429a      	cmp	r2, r3
 8010440:	d309      	bcc.n	8010456 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010442:	4b7c      	ldr	r3, [pc, #496]	; (8010634 <tcp_input+0x294>)
 8010444:	881a      	ldrh	r2, [r3, #0]
 8010446:	4b7d      	ldr	r3, [pc, #500]	; (801063c <tcp_input+0x29c>)
 8010448:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801044a:	7cbb      	ldrb	r3, [r7, #18]
 801044c:	4619      	mov	r1, r3
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f7fd fe52 	bl	800e0f8 <pbuf_remove_header>
 8010454:	e04e      	b.n	80104f4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d105      	bne.n	801046a <tcp_input+0xca>
 801045e:	4b70      	ldr	r3, [pc, #448]	; (8010620 <tcp_input+0x280>)
 8010460:	22c2      	movs	r2, #194	; 0xc2
 8010462:	4977      	ldr	r1, [pc, #476]	; (8010640 <tcp_input+0x2a0>)
 8010464:	4870      	ldr	r0, [pc, #448]	; (8010628 <tcp_input+0x288>)
 8010466:	f006 ffdb 	bl	8017420 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801046a:	2114      	movs	r1, #20
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7fd fe43 	bl	800e0f8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	895a      	ldrh	r2, [r3, #10]
 8010476:	4b71      	ldr	r3, [pc, #452]	; (801063c <tcp_input+0x29c>)
 8010478:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801047a:	4b6e      	ldr	r3, [pc, #440]	; (8010634 <tcp_input+0x294>)
 801047c:	881a      	ldrh	r2, [r3, #0]
 801047e:	4b6f      	ldr	r3, [pc, #444]	; (801063c <tcp_input+0x29c>)
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010486:	4b6d      	ldr	r3, [pc, #436]	; (801063c <tcp_input+0x29c>)
 8010488:	881b      	ldrh	r3, [r3, #0]
 801048a:	4619      	mov	r1, r3
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f7fd fe33 	bl	800e0f8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	895b      	ldrh	r3, [r3, #10]
 8010498:	8a3a      	ldrh	r2, [r7, #16]
 801049a:	429a      	cmp	r2, r3
 801049c:	f200 8361 	bhi.w	8010b62 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	4a64      	ldr	r2, [pc, #400]	; (8010638 <tcp_input+0x298>)
 80104a8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	8a3a      	ldrh	r2, [r7, #16]
 80104b0:	4611      	mov	r1, r2
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fd fe20 	bl	800e0f8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	891a      	ldrh	r2, [r3, #8]
 80104bc:	8a3b      	ldrh	r3, [r7, #16]
 80104be:	1ad3      	subs	r3, r2, r3
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	895b      	ldrh	r3, [r3, #10]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d005      	beq.n	80104da <tcp_input+0x13a>
 80104ce:	4b54      	ldr	r3, [pc, #336]	; (8010620 <tcp_input+0x280>)
 80104d0:	22df      	movs	r2, #223	; 0xdf
 80104d2:	495c      	ldr	r1, [pc, #368]	; (8010644 <tcp_input+0x2a4>)
 80104d4:	4854      	ldr	r0, [pc, #336]	; (8010628 <tcp_input+0x288>)
 80104d6:	f006 ffa3 	bl	8017420 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	891a      	ldrh	r2, [r3, #8]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	891b      	ldrh	r3, [r3, #8]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d005      	beq.n	80104f4 <tcp_input+0x154>
 80104e8:	4b4d      	ldr	r3, [pc, #308]	; (8010620 <tcp_input+0x280>)
 80104ea:	22e0      	movs	r2, #224	; 0xe0
 80104ec:	4956      	ldr	r1, [pc, #344]	; (8010648 <tcp_input+0x2a8>)
 80104ee:	484e      	ldr	r0, [pc, #312]	; (8010628 <tcp_input+0x288>)
 80104f0:	f006 ff96 	bl	8017420 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80104f4:	4b4d      	ldr	r3, [pc, #308]	; (801062c <tcp_input+0x28c>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	881b      	ldrh	r3, [r3, #0]
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	4a4b      	ldr	r2, [pc, #300]	; (801062c <tcp_input+0x28c>)
 80104fe:	6814      	ldr	r4, [r2, #0]
 8010500:	4618      	mov	r0, r3
 8010502:	f7fc faed 	bl	800cae0 <lwip_htons>
 8010506:	4603      	mov	r3, r0
 8010508:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801050a:	4b48      	ldr	r3, [pc, #288]	; (801062c <tcp_input+0x28c>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	885b      	ldrh	r3, [r3, #2]
 8010510:	b29b      	uxth	r3, r3
 8010512:	4a46      	ldr	r2, [pc, #280]	; (801062c <tcp_input+0x28c>)
 8010514:	6814      	ldr	r4, [r2, #0]
 8010516:	4618      	mov	r0, r3
 8010518:	f7fc fae2 	bl	800cae0 <lwip_htons>
 801051c:	4603      	mov	r3, r0
 801051e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010520:	4b42      	ldr	r3, [pc, #264]	; (801062c <tcp_input+0x28c>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	4a41      	ldr	r2, [pc, #260]	; (801062c <tcp_input+0x28c>)
 8010528:	6814      	ldr	r4, [r2, #0]
 801052a:	4618      	mov	r0, r3
 801052c:	f7fc faed 	bl	800cb0a <lwip_htonl>
 8010530:	4603      	mov	r3, r0
 8010532:	6063      	str	r3, [r4, #4]
 8010534:	6863      	ldr	r3, [r4, #4]
 8010536:	4a45      	ldr	r2, [pc, #276]	; (801064c <tcp_input+0x2ac>)
 8010538:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801053a:	4b3c      	ldr	r3, [pc, #240]	; (801062c <tcp_input+0x28c>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	689b      	ldr	r3, [r3, #8]
 8010540:	4a3a      	ldr	r2, [pc, #232]	; (801062c <tcp_input+0x28c>)
 8010542:	6814      	ldr	r4, [r2, #0]
 8010544:	4618      	mov	r0, r3
 8010546:	f7fc fae0 	bl	800cb0a <lwip_htonl>
 801054a:	4603      	mov	r3, r0
 801054c:	60a3      	str	r3, [r4, #8]
 801054e:	68a3      	ldr	r3, [r4, #8]
 8010550:	4a3f      	ldr	r2, [pc, #252]	; (8010650 <tcp_input+0x2b0>)
 8010552:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010554:	4b35      	ldr	r3, [pc, #212]	; (801062c <tcp_input+0x28c>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	89db      	ldrh	r3, [r3, #14]
 801055a:	b29b      	uxth	r3, r3
 801055c:	4a33      	ldr	r2, [pc, #204]	; (801062c <tcp_input+0x28c>)
 801055e:	6814      	ldr	r4, [r2, #0]
 8010560:	4618      	mov	r0, r3
 8010562:	f7fc fabd 	bl	800cae0 <lwip_htons>
 8010566:	4603      	mov	r3, r0
 8010568:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801056a:	4b30      	ldr	r3, [pc, #192]	; (801062c <tcp_input+0x28c>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	899b      	ldrh	r3, [r3, #12]
 8010570:	b29b      	uxth	r3, r3
 8010572:	4618      	mov	r0, r3
 8010574:	f7fc fab4 	bl	800cae0 <lwip_htons>
 8010578:	4603      	mov	r3, r0
 801057a:	b2db      	uxtb	r3, r3
 801057c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010580:	b2da      	uxtb	r2, r3
 8010582:	4b34      	ldr	r3, [pc, #208]	; (8010654 <tcp_input+0x2b4>)
 8010584:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	891a      	ldrh	r2, [r3, #8]
 801058a:	4b33      	ldr	r3, [pc, #204]	; (8010658 <tcp_input+0x2b8>)
 801058c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801058e:	4b31      	ldr	r3, [pc, #196]	; (8010654 <tcp_input+0x2b4>)
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	f003 0303 	and.w	r3, r3, #3
 8010596:	2b00      	cmp	r3, #0
 8010598:	d00c      	beq.n	80105b4 <tcp_input+0x214>
    tcplen++;
 801059a:	4b2f      	ldr	r3, [pc, #188]	; (8010658 <tcp_input+0x2b8>)
 801059c:	881b      	ldrh	r3, [r3, #0]
 801059e:	3301      	adds	r3, #1
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	4b2d      	ldr	r3, [pc, #180]	; (8010658 <tcp_input+0x2b8>)
 80105a4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	891a      	ldrh	r2, [r3, #8]
 80105aa:	4b2b      	ldr	r3, [pc, #172]	; (8010658 <tcp_input+0x2b8>)
 80105ac:	881b      	ldrh	r3, [r3, #0]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	f200 82d9 	bhi.w	8010b66 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80105b4:	2300      	movs	r3, #0
 80105b6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80105b8:	4b28      	ldr	r3, [pc, #160]	; (801065c <tcp_input+0x2bc>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	61fb      	str	r3, [r7, #28]
 80105be:	e09d      	b.n	80106fc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	7d1b      	ldrb	r3, [r3, #20]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d105      	bne.n	80105d4 <tcp_input+0x234>
 80105c8:	4b15      	ldr	r3, [pc, #84]	; (8010620 <tcp_input+0x280>)
 80105ca:	22fb      	movs	r2, #251	; 0xfb
 80105cc:	4924      	ldr	r1, [pc, #144]	; (8010660 <tcp_input+0x2c0>)
 80105ce:	4816      	ldr	r0, [pc, #88]	; (8010628 <tcp_input+0x288>)
 80105d0:	f006 ff26 	bl	8017420 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	7d1b      	ldrb	r3, [r3, #20]
 80105d8:	2b0a      	cmp	r3, #10
 80105da:	d105      	bne.n	80105e8 <tcp_input+0x248>
 80105dc:	4b10      	ldr	r3, [pc, #64]	; (8010620 <tcp_input+0x280>)
 80105de:	22fc      	movs	r2, #252	; 0xfc
 80105e0:	4920      	ldr	r1, [pc, #128]	; (8010664 <tcp_input+0x2c4>)
 80105e2:	4811      	ldr	r0, [pc, #68]	; (8010628 <tcp_input+0x288>)
 80105e4:	f006 ff1c 	bl	8017420 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	7d1b      	ldrb	r3, [r3, #20]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d105      	bne.n	80105fc <tcp_input+0x25c>
 80105f0:	4b0b      	ldr	r3, [pc, #44]	; (8010620 <tcp_input+0x280>)
 80105f2:	22fd      	movs	r2, #253	; 0xfd
 80105f4:	491c      	ldr	r1, [pc, #112]	; (8010668 <tcp_input+0x2c8>)
 80105f6:	480c      	ldr	r0, [pc, #48]	; (8010628 <tcp_input+0x288>)
 80105f8:	f006 ff12 	bl	8017420 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	7a1b      	ldrb	r3, [r3, #8]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d033      	beq.n	801066c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	7a1a      	ldrb	r2, [r3, #8]
 8010608:	4b09      	ldr	r3, [pc, #36]	; (8010630 <tcp_input+0x290>)
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010610:	3301      	adds	r3, #1
 8010612:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010614:	429a      	cmp	r2, r3
 8010616:	d029      	beq.n	801066c <tcp_input+0x2cc>
      prev = pcb;
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	61bb      	str	r3, [r7, #24]
      continue;
 801061c:	e06b      	b.n	80106f6 <tcp_input+0x356>
 801061e:	bf00      	nop
 8010620:	0801aee4 	.word	0x0801aee4
 8010624:	0801af18 	.word	0x0801af18
 8010628:	0801af30 	.word	0x0801af30
 801062c:	20001a1c 	.word	0x20001a1c
 8010630:	2000e2ec 	.word	0x2000e2ec
 8010634:	20001a20 	.word	0x20001a20
 8010638:	20001a24 	.word	0x20001a24
 801063c:	20001a22 	.word	0x20001a22
 8010640:	0801af58 	.word	0x0801af58
 8010644:	0801af68 	.word	0x0801af68
 8010648:	0801af74 	.word	0x0801af74
 801064c:	20001a2c 	.word	0x20001a2c
 8010650:	20001a30 	.word	0x20001a30
 8010654:	20001a38 	.word	0x20001a38
 8010658:	20001a36 	.word	0x20001a36
 801065c:	20011830 	.word	0x20011830
 8010660:	0801af94 	.word	0x0801af94
 8010664:	0801afbc 	.word	0x0801afbc
 8010668:	0801afe8 	.word	0x0801afe8
    }

    if (pcb->remote_port == tcphdr->src &&
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	8b1a      	ldrh	r2, [r3, #24]
 8010670:	4b94      	ldr	r3, [pc, #592]	; (80108c4 <tcp_input+0x524>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	881b      	ldrh	r3, [r3, #0]
 8010676:	b29b      	uxth	r3, r3
 8010678:	429a      	cmp	r2, r3
 801067a:	d13a      	bne.n	80106f2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	8ada      	ldrh	r2, [r3, #22]
 8010680:	4b90      	ldr	r3, [pc, #576]	; (80108c4 <tcp_input+0x524>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	885b      	ldrh	r3, [r3, #2]
 8010686:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010688:	429a      	cmp	r2, r3
 801068a:	d132      	bne.n	80106f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	685a      	ldr	r2, [r3, #4]
 8010690:	4b8d      	ldr	r3, [pc, #564]	; (80108c8 <tcp_input+0x528>)
 8010692:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010694:	429a      	cmp	r2, r3
 8010696:	d12c      	bne.n	80106f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	4b8a      	ldr	r3, [pc, #552]	; (80108c8 <tcp_input+0x528>)
 801069e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d126      	bne.n	80106f2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	69fa      	ldr	r2, [r7, #28]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d106      	bne.n	80106bc <tcp_input+0x31c>
 80106ae:	4b87      	ldr	r3, [pc, #540]	; (80108cc <tcp_input+0x52c>)
 80106b0:	f240 120d 	movw	r2, #269	; 0x10d
 80106b4:	4986      	ldr	r1, [pc, #536]	; (80108d0 <tcp_input+0x530>)
 80106b6:	4887      	ldr	r0, [pc, #540]	; (80108d4 <tcp_input+0x534>)
 80106b8:	f006 feb2 	bl	8017420 <iprintf>
      if (prev != NULL) {
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00a      	beq.n	80106d8 <tcp_input+0x338>
        prev->next = pcb->next;
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	68da      	ldr	r2, [r3, #12]
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80106ca:	4b83      	ldr	r3, [pc, #524]	; (80108d8 <tcp_input+0x538>)
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	69fb      	ldr	r3, [r7, #28]
 80106d0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80106d2:	4a81      	ldr	r2, [pc, #516]	; (80108d8 <tcp_input+0x538>)
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	69fa      	ldr	r2, [r7, #28]
 80106de:	429a      	cmp	r2, r3
 80106e0:	d111      	bne.n	8010706 <tcp_input+0x366>
 80106e2:	4b7a      	ldr	r3, [pc, #488]	; (80108cc <tcp_input+0x52c>)
 80106e4:	f240 1215 	movw	r2, #277	; 0x115
 80106e8:	497c      	ldr	r1, [pc, #496]	; (80108dc <tcp_input+0x53c>)
 80106ea:	487a      	ldr	r0, [pc, #488]	; (80108d4 <tcp_input+0x534>)
 80106ec:	f006 fe98 	bl	8017420 <iprintf>
      break;
 80106f0:	e009      	b.n	8010706 <tcp_input+0x366>
    }
    prev = pcb;
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	61fb      	str	r3, [r7, #28]
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	f47f af5e 	bne.w	80105c0 <tcp_input+0x220>
 8010704:	e000      	b.n	8010708 <tcp_input+0x368>
      break;
 8010706:	bf00      	nop
  }

  if (pcb == NULL) {
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	2b00      	cmp	r3, #0
 801070c:	f040 8095 	bne.w	801083a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010710:	4b73      	ldr	r3, [pc, #460]	; (80108e0 <tcp_input+0x540>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	61fb      	str	r3, [r7, #28]
 8010716:	e03f      	b.n	8010798 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	7d1b      	ldrb	r3, [r3, #20]
 801071c:	2b0a      	cmp	r3, #10
 801071e:	d006      	beq.n	801072e <tcp_input+0x38e>
 8010720:	4b6a      	ldr	r3, [pc, #424]	; (80108cc <tcp_input+0x52c>)
 8010722:	f240 121f 	movw	r2, #287	; 0x11f
 8010726:	496f      	ldr	r1, [pc, #444]	; (80108e4 <tcp_input+0x544>)
 8010728:	486a      	ldr	r0, [pc, #424]	; (80108d4 <tcp_input+0x534>)
 801072a:	f006 fe79 	bl	8017420 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801072e:	69fb      	ldr	r3, [r7, #28]
 8010730:	7a1b      	ldrb	r3, [r3, #8]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d009      	beq.n	801074a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	7a1a      	ldrb	r2, [r3, #8]
 801073a:	4b63      	ldr	r3, [pc, #396]	; (80108c8 <tcp_input+0x528>)
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010742:	3301      	adds	r3, #1
 8010744:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010746:	429a      	cmp	r2, r3
 8010748:	d122      	bne.n	8010790 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	8b1a      	ldrh	r2, [r3, #24]
 801074e:	4b5d      	ldr	r3, [pc, #372]	; (80108c4 <tcp_input+0x524>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	881b      	ldrh	r3, [r3, #0]
 8010754:	b29b      	uxth	r3, r3
 8010756:	429a      	cmp	r2, r3
 8010758:	d11b      	bne.n	8010792 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801075a:	69fb      	ldr	r3, [r7, #28]
 801075c:	8ada      	ldrh	r2, [r3, #22]
 801075e:	4b59      	ldr	r3, [pc, #356]	; (80108c4 <tcp_input+0x524>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	885b      	ldrh	r3, [r3, #2]
 8010764:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010766:	429a      	cmp	r2, r3
 8010768:	d113      	bne.n	8010792 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801076a:	69fb      	ldr	r3, [r7, #28]
 801076c:	685a      	ldr	r2, [r3, #4]
 801076e:	4b56      	ldr	r3, [pc, #344]	; (80108c8 <tcp_input+0x528>)
 8010770:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010772:	429a      	cmp	r2, r3
 8010774:	d10d      	bne.n	8010792 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	4b53      	ldr	r3, [pc, #332]	; (80108c8 <tcp_input+0x528>)
 801077c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801077e:	429a      	cmp	r2, r3
 8010780:	d107      	bne.n	8010792 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010782:	69f8      	ldr	r0, [r7, #28]
 8010784:	f000 fb54 	bl	8010e30 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7fd fd3b 	bl	800e204 <pbuf_free>
        return;
 801078e:	e1f0      	b.n	8010b72 <tcp_input+0x7d2>
        continue;
 8010790:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010792:	69fb      	ldr	r3, [r7, #28]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	61fb      	str	r3, [r7, #28]
 8010798:	69fb      	ldr	r3, [r7, #28]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d1bc      	bne.n	8010718 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801079e:	2300      	movs	r3, #0
 80107a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80107a2:	4b51      	ldr	r3, [pc, #324]	; (80108e8 <tcp_input+0x548>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	617b      	str	r3, [r7, #20]
 80107a8:	e02a      	b.n	8010800 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	7a1b      	ldrb	r3, [r3, #8]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d00c      	beq.n	80107cc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	7a1a      	ldrb	r2, [r3, #8]
 80107b6:	4b44      	ldr	r3, [pc, #272]	; (80108c8 <tcp_input+0x528>)
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107be:	3301      	adds	r3, #1
 80107c0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d002      	beq.n	80107cc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	61bb      	str	r3, [r7, #24]
        continue;
 80107ca:	e016      	b.n	80107fa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	8ada      	ldrh	r2, [r3, #22]
 80107d0:	4b3c      	ldr	r3, [pc, #240]	; (80108c4 <tcp_input+0x524>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	885b      	ldrh	r3, [r3, #2]
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	429a      	cmp	r2, r3
 80107da:	d10c      	bne.n	80107f6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	681a      	ldr	r2, [r3, #0]
 80107e0:	4b39      	ldr	r3, [pc, #228]	; (80108c8 <tcp_input+0x528>)
 80107e2:	695b      	ldr	r3, [r3, #20]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d00f      	beq.n	8010808 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00d      	beq.n	801080a <tcp_input+0x46a>
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d009      	beq.n	801080a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	68db      	ldr	r3, [r3, #12]
 80107fe:	617b      	str	r3, [r7, #20]
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d1d1      	bne.n	80107aa <tcp_input+0x40a>
 8010806:	e000      	b.n	801080a <tcp_input+0x46a>
            break;
 8010808:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d014      	beq.n	801083a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00a      	beq.n	801082c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	68da      	ldr	r2, [r3, #12]
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801081e:	4b32      	ldr	r3, [pc, #200]	; (80108e8 <tcp_input+0x548>)
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010826:	4a30      	ldr	r2, [pc, #192]	; (80108e8 <tcp_input+0x548>)
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801082c:	6978      	ldr	r0, [r7, #20]
 801082e:	f000 fa01 	bl	8010c34 <tcp_listen_input>
      }
      pbuf_free(p);
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f7fd fce6 	bl	800e204 <pbuf_free>
      return;
 8010838:	e19b      	b.n	8010b72 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801083a:	69fb      	ldr	r3, [r7, #28]
 801083c:	2b00      	cmp	r3, #0
 801083e:	f000 8160 	beq.w	8010b02 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010842:	4b2a      	ldr	r3, [pc, #168]	; (80108ec <tcp_input+0x54c>)
 8010844:	2200      	movs	r2, #0
 8010846:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	891a      	ldrh	r2, [r3, #8]
 801084c:	4b27      	ldr	r3, [pc, #156]	; (80108ec <tcp_input+0x54c>)
 801084e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010850:	4a26      	ldr	r2, [pc, #152]	; (80108ec <tcp_input+0x54c>)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010856:	4b1b      	ldr	r3, [pc, #108]	; (80108c4 <tcp_input+0x524>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4a24      	ldr	r2, [pc, #144]	; (80108ec <tcp_input+0x54c>)
 801085c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801085e:	4b24      	ldr	r3, [pc, #144]	; (80108f0 <tcp_input+0x550>)
 8010860:	2200      	movs	r2, #0
 8010862:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010864:	4b23      	ldr	r3, [pc, #140]	; (80108f4 <tcp_input+0x554>)
 8010866:	2200      	movs	r2, #0
 8010868:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801086a:	4b23      	ldr	r3, [pc, #140]	; (80108f8 <tcp_input+0x558>)
 801086c:	2200      	movs	r2, #0
 801086e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010870:	4b22      	ldr	r3, [pc, #136]	; (80108fc <tcp_input+0x55c>)
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	f003 0308 	and.w	r3, r3, #8
 8010878:	2b00      	cmp	r3, #0
 801087a:	d006      	beq.n	801088a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	7b5b      	ldrb	r3, [r3, #13]
 8010880:	f043 0301 	orr.w	r3, r3, #1
 8010884:	b2da      	uxtb	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801088e:	2b00      	cmp	r3, #0
 8010890:	d038      	beq.n	8010904 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010892:	69f8      	ldr	r0, [r7, #28]
 8010894:	f7ff f852 	bl	800f93c <tcp_process_refused_data>
 8010898:	4603      	mov	r3, r0
 801089a:	f113 0f0d 	cmn.w	r3, #13
 801089e:	d007      	beq.n	80108b0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80108a0:	69fb      	ldr	r3, [r7, #28]
 80108a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d02d      	beq.n	8010904 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80108a8:	4b15      	ldr	r3, [pc, #84]	; (8010900 <tcp_input+0x560>)
 80108aa:	881b      	ldrh	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d029      	beq.n	8010904 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	f040 8104 	bne.w	8010ac2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80108ba:	69f8      	ldr	r0, [r7, #28]
 80108bc:	f003 fe16 	bl	80144ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80108c0:	e0ff      	b.n	8010ac2 <tcp_input+0x722>
 80108c2:	bf00      	nop
 80108c4:	20001a1c 	.word	0x20001a1c
 80108c8:	2000e2ec 	.word	0x2000e2ec
 80108cc:	0801aee4 	.word	0x0801aee4
 80108d0:	0801b010 	.word	0x0801b010
 80108d4:	0801af30 	.word	0x0801af30
 80108d8:	20011830 	.word	0x20011830
 80108dc:	0801b03c 	.word	0x0801b03c
 80108e0:	20011840 	.word	0x20011840
 80108e4:	0801b068 	.word	0x0801b068
 80108e8:	20011838 	.word	0x20011838
 80108ec:	20001a0c 	.word	0x20001a0c
 80108f0:	20001a3c 	.word	0x20001a3c
 80108f4:	20001a39 	.word	0x20001a39
 80108f8:	20001a34 	.word	0x20001a34
 80108fc:	20001a38 	.word	0x20001a38
 8010900:	20001a36 	.word	0x20001a36
      }
    }
    tcp_input_pcb = pcb;
 8010904:	4a9c      	ldr	r2, [pc, #624]	; (8010b78 <tcp_input+0x7d8>)
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801090a:	69f8      	ldr	r0, [r7, #28]
 801090c:	f000 fb0a 	bl	8010f24 <tcp_process>
 8010910:	4603      	mov	r3, r0
 8010912:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010914:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010918:	f113 0f0d 	cmn.w	r3, #13
 801091c:	f000 80d3 	beq.w	8010ac6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010920:	4b96      	ldr	r3, [pc, #600]	; (8010b7c <tcp_input+0x7dc>)
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	f003 0308 	and.w	r3, r3, #8
 8010928:	2b00      	cmp	r3, #0
 801092a:	d015      	beq.n	8010958 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010932:	2b00      	cmp	r3, #0
 8010934:	d008      	beq.n	8010948 <tcp_input+0x5a8>
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801093c:	69fa      	ldr	r2, [r7, #28]
 801093e:	6912      	ldr	r2, [r2, #16]
 8010940:	f06f 010d 	mvn.w	r1, #13
 8010944:	4610      	mov	r0, r2
 8010946:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010948:	69f9      	ldr	r1, [r7, #28]
 801094a:	488d      	ldr	r0, [pc, #564]	; (8010b80 <tcp_input+0x7e0>)
 801094c:	f7ff fbb0 	bl	80100b0 <tcp_pcb_remove>
        tcp_free(pcb);
 8010950:	69f8      	ldr	r0, [r7, #28]
 8010952:	f7fd fef7 	bl	800e744 <tcp_free>
 8010956:	e0c1      	b.n	8010adc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010958:	2300      	movs	r3, #0
 801095a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801095c:	4b89      	ldr	r3, [pc, #548]	; (8010b84 <tcp_input+0x7e4>)
 801095e:	881b      	ldrh	r3, [r3, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d01d      	beq.n	80109a0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010964:	4b87      	ldr	r3, [pc, #540]	; (8010b84 <tcp_input+0x7e4>)
 8010966:	881b      	ldrh	r3, [r3, #0]
 8010968:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00a      	beq.n	801098a <tcp_input+0x5ea>
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801097a:	69fa      	ldr	r2, [r7, #28]
 801097c:	6910      	ldr	r0, [r2, #16]
 801097e:	89fa      	ldrh	r2, [r7, #14]
 8010980:	69f9      	ldr	r1, [r7, #28]
 8010982:	4798      	blx	r3
 8010984:	4603      	mov	r3, r0
 8010986:	74fb      	strb	r3, [r7, #19]
 8010988:	e001      	b.n	801098e <tcp_input+0x5ee>
 801098a:	2300      	movs	r3, #0
 801098c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801098e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010992:	f113 0f0d 	cmn.w	r3, #13
 8010996:	f000 8098 	beq.w	8010aca <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801099a:	4b7a      	ldr	r3, [pc, #488]	; (8010b84 <tcp_input+0x7e4>)
 801099c:	2200      	movs	r2, #0
 801099e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80109a0:	69f8      	ldr	r0, [r7, #28]
 80109a2:	f000 f907 	bl	8010bb4 <tcp_input_delayed_close>
 80109a6:	4603      	mov	r3, r0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f040 8090 	bne.w	8010ace <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80109ae:	4b76      	ldr	r3, [pc, #472]	; (8010b88 <tcp_input+0x7e8>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d041      	beq.n	8010a3a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d006      	beq.n	80109cc <tcp_input+0x62c>
 80109be:	4b73      	ldr	r3, [pc, #460]	; (8010b8c <tcp_input+0x7ec>)
 80109c0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80109c4:	4972      	ldr	r1, [pc, #456]	; (8010b90 <tcp_input+0x7f0>)
 80109c6:	4873      	ldr	r0, [pc, #460]	; (8010b94 <tcp_input+0x7f4>)
 80109c8:	f006 fd2a 	bl	8017420 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	8b5b      	ldrh	r3, [r3, #26]
 80109d0:	f003 0310 	and.w	r3, r3, #16
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d008      	beq.n	80109ea <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80109d8:	4b6b      	ldr	r3, [pc, #428]	; (8010b88 <tcp_input+0x7e8>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fd fc11 	bl	800e204 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80109e2:	69f8      	ldr	r0, [r7, #28]
 80109e4:	f7fe f996 	bl	800ed14 <tcp_abort>
            goto aborted;
 80109e8:	e078      	b.n	8010adc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80109ea:	69fb      	ldr	r3, [r7, #28]
 80109ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00c      	beq.n	8010a0e <tcp_input+0x66e>
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	6918      	ldr	r0, [r3, #16]
 80109fe:	4b62      	ldr	r3, [pc, #392]	; (8010b88 <tcp_input+0x7e8>)
 8010a00:	681a      	ldr	r2, [r3, #0]
 8010a02:	2300      	movs	r3, #0
 8010a04:	69f9      	ldr	r1, [r7, #28]
 8010a06:	47a0      	blx	r4
 8010a08:	4603      	mov	r3, r0
 8010a0a:	74fb      	strb	r3, [r7, #19]
 8010a0c:	e008      	b.n	8010a20 <tcp_input+0x680>
 8010a0e:	4b5e      	ldr	r3, [pc, #376]	; (8010b88 <tcp_input+0x7e8>)
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	2300      	movs	r3, #0
 8010a14:	69f9      	ldr	r1, [r7, #28]
 8010a16:	2000      	movs	r0, #0
 8010a18:	f7ff f884 	bl	800fb24 <tcp_recv_null>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010a20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a24:	f113 0f0d 	cmn.w	r3, #13
 8010a28:	d053      	beq.n	8010ad2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010a2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d003      	beq.n	8010a3a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010a32:	4b55      	ldr	r3, [pc, #340]	; (8010b88 <tcp_input+0x7e8>)
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010a3a:	4b50      	ldr	r3, [pc, #320]	; (8010b7c <tcp_input+0x7dc>)
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	f003 0320 	and.w	r3, r3, #32
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d030      	beq.n	8010aa8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d009      	beq.n	8010a62 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a52:	7b5a      	ldrb	r2, [r3, #13]
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a58:	f042 0220 	orr.w	r2, r2, #32
 8010a5c:	b2d2      	uxtb	r2, r2
 8010a5e:	735a      	strb	r2, [r3, #13]
 8010a60:	e022      	b.n	8010aa8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010a62:	69fb      	ldr	r3, [r7, #28]
 8010a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010a6a:	d005      	beq.n	8010a78 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a70:	3301      	adds	r3, #1
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010a78:	69fb      	ldr	r3, [r7, #28]
 8010a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d00b      	beq.n	8010a9a <tcp_input+0x6fa>
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	6918      	ldr	r0, [r3, #16]
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	2200      	movs	r2, #0
 8010a90:	69f9      	ldr	r1, [r7, #28]
 8010a92:	47a0      	blx	r4
 8010a94:	4603      	mov	r3, r0
 8010a96:	74fb      	strb	r3, [r7, #19]
 8010a98:	e001      	b.n	8010a9e <tcp_input+0x6fe>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010a9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010aa2:	f113 0f0d 	cmn.w	r3, #13
 8010aa6:	d016      	beq.n	8010ad6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010aa8:	4b33      	ldr	r3, [pc, #204]	; (8010b78 <tcp_input+0x7d8>)
 8010aaa:	2200      	movs	r2, #0
 8010aac:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010aae:	69f8      	ldr	r0, [r7, #28]
 8010ab0:	f000 f880 	bl	8010bb4 <tcp_input_delayed_close>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d10f      	bne.n	8010ada <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010aba:	69f8      	ldr	r0, [r7, #28]
 8010abc:	f002 ff10 	bl	80138e0 <tcp_output>
 8010ac0:	e00c      	b.n	8010adc <tcp_input+0x73c>
        goto aborted;
 8010ac2:	bf00      	nop
 8010ac4:	e00a      	b.n	8010adc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010ac6:	bf00      	nop
 8010ac8:	e008      	b.n	8010adc <tcp_input+0x73c>
              goto aborted;
 8010aca:	bf00      	nop
 8010acc:	e006      	b.n	8010adc <tcp_input+0x73c>
          goto aborted;
 8010ace:	bf00      	nop
 8010ad0:	e004      	b.n	8010adc <tcp_input+0x73c>
            goto aborted;
 8010ad2:	bf00      	nop
 8010ad4:	e002      	b.n	8010adc <tcp_input+0x73c>
              goto aborted;
 8010ad6:	bf00      	nop
 8010ad8:	e000      	b.n	8010adc <tcp_input+0x73c>
          goto aborted;
 8010ada:	bf00      	nop
    tcp_input_pcb = NULL;
 8010adc:	4b26      	ldr	r3, [pc, #152]	; (8010b78 <tcp_input+0x7d8>)
 8010ade:	2200      	movs	r2, #0
 8010ae0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010ae2:	4b29      	ldr	r3, [pc, #164]	; (8010b88 <tcp_input+0x7e8>)
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010ae8:	4b2b      	ldr	r3, [pc, #172]	; (8010b98 <tcp_input+0x7f8>)
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d03f      	beq.n	8010b70 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010af0:	4b29      	ldr	r3, [pc, #164]	; (8010b98 <tcp_input+0x7f8>)
 8010af2:	685b      	ldr	r3, [r3, #4]
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7fd fb85 	bl	800e204 <pbuf_free>
      inseg.p = NULL;
 8010afa:	4b27      	ldr	r3, [pc, #156]	; (8010b98 <tcp_input+0x7f8>)
 8010afc:	2200      	movs	r2, #0
 8010afe:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010b00:	e036      	b.n	8010b70 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010b02:	4b26      	ldr	r3, [pc, #152]	; (8010b9c <tcp_input+0x7fc>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	899b      	ldrh	r3, [r3, #12]
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fb ffe8 	bl	800cae0 <lwip_htons>
 8010b10:	4603      	mov	r3, r0
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	f003 0304 	and.w	r3, r3, #4
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d118      	bne.n	8010b4e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b1c:	4b20      	ldr	r3, [pc, #128]	; (8010ba0 <tcp_input+0x800>)
 8010b1e:	6819      	ldr	r1, [r3, #0]
 8010b20:	4b20      	ldr	r3, [pc, #128]	; (8010ba4 <tcp_input+0x804>)
 8010b22:	881b      	ldrh	r3, [r3, #0]
 8010b24:	461a      	mov	r2, r3
 8010b26:	4b20      	ldr	r3, [pc, #128]	; (8010ba8 <tcp_input+0x808>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b2c:	4b1b      	ldr	r3, [pc, #108]	; (8010b9c <tcp_input+0x7fc>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b30:	885b      	ldrh	r3, [r3, #2]
 8010b32:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b34:	4a19      	ldr	r2, [pc, #100]	; (8010b9c <tcp_input+0x7fc>)
 8010b36:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b38:	8812      	ldrh	r2, [r2, #0]
 8010b3a:	b292      	uxth	r2, r2
 8010b3c:	9202      	str	r2, [sp, #8]
 8010b3e:	9301      	str	r3, [sp, #4]
 8010b40:	4b1a      	ldr	r3, [pc, #104]	; (8010bac <tcp_input+0x80c>)
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	4b1a      	ldr	r3, [pc, #104]	; (8010bb0 <tcp_input+0x810>)
 8010b46:	4602      	mov	r2, r0
 8010b48:	2000      	movs	r0, #0
 8010b4a:	f003 fc7d 	bl	8014448 <tcp_rst>
    pbuf_free(p);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7fd fb58 	bl	800e204 <pbuf_free>
  return;
 8010b54:	e00c      	b.n	8010b70 <tcp_input+0x7d0>
    goto dropped;
 8010b56:	bf00      	nop
 8010b58:	e006      	b.n	8010b68 <tcp_input+0x7c8>
    goto dropped;
 8010b5a:	bf00      	nop
 8010b5c:	e004      	b.n	8010b68 <tcp_input+0x7c8>
    goto dropped;
 8010b5e:	bf00      	nop
 8010b60:	e002      	b.n	8010b68 <tcp_input+0x7c8>
      goto dropped;
 8010b62:	bf00      	nop
 8010b64:	e000      	b.n	8010b68 <tcp_input+0x7c8>
      goto dropped;
 8010b66:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f7fd fb4b 	bl	800e204 <pbuf_free>
 8010b6e:	e000      	b.n	8010b72 <tcp_input+0x7d2>
  return;
 8010b70:	bf00      	nop
}
 8010b72:	3724      	adds	r7, #36	; 0x24
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd90      	pop	{r4, r7, pc}
 8010b78:	20011844 	.word	0x20011844
 8010b7c:	20001a39 	.word	0x20001a39
 8010b80:	20011830 	.word	0x20011830
 8010b84:	20001a34 	.word	0x20001a34
 8010b88:	20001a3c 	.word	0x20001a3c
 8010b8c:	0801aee4 	.word	0x0801aee4
 8010b90:	0801b098 	.word	0x0801b098
 8010b94:	0801af30 	.word	0x0801af30
 8010b98:	20001a0c 	.word	0x20001a0c
 8010b9c:	20001a1c 	.word	0x20001a1c
 8010ba0:	20001a30 	.word	0x20001a30
 8010ba4:	20001a36 	.word	0x20001a36
 8010ba8:	20001a2c 	.word	0x20001a2c
 8010bac:	2000e2fc 	.word	0x2000e2fc
 8010bb0:	2000e300 	.word	0x2000e300

08010bb4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d106      	bne.n	8010bd0 <tcp_input_delayed_close+0x1c>
 8010bc2:	4b17      	ldr	r3, [pc, #92]	; (8010c20 <tcp_input_delayed_close+0x6c>)
 8010bc4:	f240 225a 	movw	r2, #602	; 0x25a
 8010bc8:	4916      	ldr	r1, [pc, #88]	; (8010c24 <tcp_input_delayed_close+0x70>)
 8010bca:	4817      	ldr	r0, [pc, #92]	; (8010c28 <tcp_input_delayed_close+0x74>)
 8010bcc:	f006 fc28 	bl	8017420 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010bd0:	4b16      	ldr	r3, [pc, #88]	; (8010c2c <tcp_input_delayed_close+0x78>)
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	f003 0310 	and.w	r3, r3, #16
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d01c      	beq.n	8010c16 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	8b5b      	ldrh	r3, [r3, #26]
 8010be0:	f003 0310 	and.w	r3, r3, #16
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d10d      	bne.n	8010c04 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d008      	beq.n	8010c04 <tcp_input_delayed_close+0x50>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	6912      	ldr	r2, [r2, #16]
 8010bfc:	f06f 010e 	mvn.w	r1, #14
 8010c00:	4610      	mov	r0, r2
 8010c02:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010c04:	6879      	ldr	r1, [r7, #4]
 8010c06:	480a      	ldr	r0, [pc, #40]	; (8010c30 <tcp_input_delayed_close+0x7c>)
 8010c08:	f7ff fa52 	bl	80100b0 <tcp_pcb_remove>
    tcp_free(pcb);
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7fd fd99 	bl	800e744 <tcp_free>
    return 1;
 8010c12:	2301      	movs	r3, #1
 8010c14:	e000      	b.n	8010c18 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010c16:	2300      	movs	r3, #0
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3708      	adds	r7, #8
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	0801aee4 	.word	0x0801aee4
 8010c24:	0801b0b4 	.word	0x0801b0b4
 8010c28:	0801af30 	.word	0x0801af30
 8010c2c:	20001a39 	.word	0x20001a39
 8010c30:	20011830 	.word	0x20011830

08010c34 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010c34:	b590      	push	{r4, r7, lr}
 8010c36:	b08b      	sub	sp, #44	; 0x2c
 8010c38:	af04      	add	r7, sp, #16
 8010c3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010c3c:	4b6f      	ldr	r3, [pc, #444]	; (8010dfc <tcp_listen_input+0x1c8>)
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	f003 0304 	and.w	r3, r3, #4
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f040 80d2 	bne.w	8010dee <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d106      	bne.n	8010c5e <tcp_listen_input+0x2a>
 8010c50:	4b6b      	ldr	r3, [pc, #428]	; (8010e00 <tcp_listen_input+0x1cc>)
 8010c52:	f240 2281 	movw	r2, #641	; 0x281
 8010c56:	496b      	ldr	r1, [pc, #428]	; (8010e04 <tcp_listen_input+0x1d0>)
 8010c58:	486b      	ldr	r0, [pc, #428]	; (8010e08 <tcp_listen_input+0x1d4>)
 8010c5a:	f006 fbe1 	bl	8017420 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010c5e:	4b67      	ldr	r3, [pc, #412]	; (8010dfc <tcp_listen_input+0x1c8>)
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	f003 0310 	and.w	r3, r3, #16
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d019      	beq.n	8010c9e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c6a:	4b68      	ldr	r3, [pc, #416]	; (8010e0c <tcp_listen_input+0x1d8>)
 8010c6c:	6819      	ldr	r1, [r3, #0]
 8010c6e:	4b68      	ldr	r3, [pc, #416]	; (8010e10 <tcp_listen_input+0x1dc>)
 8010c70:	881b      	ldrh	r3, [r3, #0]
 8010c72:	461a      	mov	r2, r3
 8010c74:	4b67      	ldr	r3, [pc, #412]	; (8010e14 <tcp_listen_input+0x1e0>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c7a:	4b67      	ldr	r3, [pc, #412]	; (8010e18 <tcp_listen_input+0x1e4>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c7e:	885b      	ldrh	r3, [r3, #2]
 8010c80:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c82:	4a65      	ldr	r2, [pc, #404]	; (8010e18 <tcp_listen_input+0x1e4>)
 8010c84:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c86:	8812      	ldrh	r2, [r2, #0]
 8010c88:	b292      	uxth	r2, r2
 8010c8a:	9202      	str	r2, [sp, #8]
 8010c8c:	9301      	str	r3, [sp, #4]
 8010c8e:	4b63      	ldr	r3, [pc, #396]	; (8010e1c <tcp_listen_input+0x1e8>)
 8010c90:	9300      	str	r3, [sp, #0]
 8010c92:	4b63      	ldr	r3, [pc, #396]	; (8010e20 <tcp_listen_input+0x1ec>)
 8010c94:	4602      	mov	r2, r0
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f003 fbd6 	bl	8014448 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010c9c:	e0a9      	b.n	8010df2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010c9e:	4b57      	ldr	r3, [pc, #348]	; (8010dfc <tcp_listen_input+0x1c8>)
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	f003 0302 	and.w	r3, r3, #2
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	f000 80a3 	beq.w	8010df2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	7d5b      	ldrb	r3, [r3, #21]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7ff f85b 	bl	800fd6c <tcp_alloc>
 8010cb6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d111      	bne.n	8010ce2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	699b      	ldr	r3, [r3, #24]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d00a      	beq.n	8010cdc <tcp_listen_input+0xa8>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	699b      	ldr	r3, [r3, #24]
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	6910      	ldr	r0, [r2, #16]
 8010cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	4798      	blx	r3
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	73bb      	strb	r3, [r7, #14]
      return;
 8010cda:	e08b      	b.n	8010df4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010cdc:	23f0      	movs	r3, #240	; 0xf0
 8010cde:	73bb      	strb	r3, [r7, #14]
      return;
 8010ce0:	e088      	b.n	8010df4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010ce2:	4b50      	ldr	r3, [pc, #320]	; (8010e24 <tcp_listen_input+0x1f0>)
 8010ce4:	695a      	ldr	r2, [r3, #20]
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010cea:	4b4e      	ldr	r3, [pc, #312]	; (8010e24 <tcp_listen_input+0x1f0>)
 8010cec:	691a      	ldr	r2, [r3, #16]
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	8ada      	ldrh	r2, [r3, #22]
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010cfa:	4b47      	ldr	r3, [pc, #284]	; (8010e18 <tcp_listen_input+0x1e4>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	881b      	ldrh	r3, [r3, #0]
 8010d00:	b29a      	uxth	r2, r3
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	2203      	movs	r2, #3
 8010d0a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010d0c:	4b41      	ldr	r3, [pc, #260]	; (8010e14 <tcp_listen_input+0x1e0>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	1c5a      	adds	r2, r3, #1
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010d1e:	6978      	ldr	r0, [r7, #20]
 8010d20:	f7ff fa5a 	bl	80101d8 <tcp_next_iss>
 8010d24:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	693a      	ldr	r2, [r7, #16]
 8010d2a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	693a      	ldr	r2, [r7, #16]
 8010d30:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	693a      	ldr	r2, [r7, #16]
 8010d36:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	693a      	ldr	r2, [r7, #16]
 8010d3c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010d3e:	4b35      	ldr	r3, [pc, #212]	; (8010e14 <tcp_listen_input+0x1e0>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	1e5a      	subs	r2, r3, #1
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	691a      	ldr	r2, [r3, #16]
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	7a5b      	ldrb	r3, [r3, #9]
 8010d5a:	f003 030c 	and.w	r3, r3, #12
 8010d5e:	b2da      	uxtb	r2, r3
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	7a1a      	ldrb	r2, [r3, #8]
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010d6c:	4b2e      	ldr	r3, [pc, #184]	; (8010e28 <tcp_listen_input+0x1f4>)
 8010d6e:	681a      	ldr	r2, [r3, #0]
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	60da      	str	r2, [r3, #12]
 8010d74:	4a2c      	ldr	r2, [pc, #176]	; (8010e28 <tcp_listen_input+0x1f4>)
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	6013      	str	r3, [r2, #0]
 8010d7a:	f003 fd27 	bl	80147cc <tcp_timer_needed>
 8010d7e:	4b2b      	ldr	r3, [pc, #172]	; (8010e2c <tcp_listen_input+0x1f8>)
 8010d80:	2201      	movs	r2, #1
 8010d82:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010d84:	6978      	ldr	r0, [r7, #20]
 8010d86:	f001 fd8d 	bl	80128a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010d8a:	4b23      	ldr	r3, [pc, #140]	; (8010e18 <tcp_listen_input+0x1e4>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	89db      	ldrh	r3, [r3, #14]
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	3304      	adds	r3, #4
 8010dac:	4618      	mov	r0, r3
 8010dae:	f005 f8eb 	bl	8015f88 <ip4_route>
 8010db2:	4601      	mov	r1, r0
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	3304      	adds	r3, #4
 8010db8:	461a      	mov	r2, r3
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f7ff fa32 	bl	8010224 <tcp_eff_send_mss_netif>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010dc8:	2112      	movs	r1, #18
 8010dca:	6978      	ldr	r0, [r7, #20]
 8010dcc:	f002 fc9a 	bl	8013704 <tcp_enqueue_flags>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d004      	beq.n	8010de6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010ddc:	2100      	movs	r1, #0
 8010dde:	6978      	ldr	r0, [r7, #20]
 8010de0:	f7fd feda 	bl	800eb98 <tcp_abandon>
      return;
 8010de4:	e006      	b.n	8010df4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010de6:	6978      	ldr	r0, [r7, #20]
 8010de8:	f002 fd7a 	bl	80138e0 <tcp_output>
  return;
 8010dec:	e001      	b.n	8010df2 <tcp_listen_input+0x1be>
    return;
 8010dee:	bf00      	nop
 8010df0:	e000      	b.n	8010df4 <tcp_listen_input+0x1c0>
  return;
 8010df2:	bf00      	nop
}
 8010df4:	371c      	adds	r7, #28
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd90      	pop	{r4, r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	20001a38 	.word	0x20001a38
 8010e00:	0801aee4 	.word	0x0801aee4
 8010e04:	0801b0dc 	.word	0x0801b0dc
 8010e08:	0801af30 	.word	0x0801af30
 8010e0c:	20001a30 	.word	0x20001a30
 8010e10:	20001a36 	.word	0x20001a36
 8010e14:	20001a2c 	.word	0x20001a2c
 8010e18:	20001a1c 	.word	0x20001a1c
 8010e1c:	2000e2fc 	.word	0x2000e2fc
 8010e20:	2000e300 	.word	0x2000e300
 8010e24:	2000e2ec 	.word	0x2000e2ec
 8010e28:	20011830 	.word	0x20011830
 8010e2c:	2001182c 	.word	0x2001182c

08010e30 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af04      	add	r7, sp, #16
 8010e36:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010e38:	4b2f      	ldr	r3, [pc, #188]	; (8010ef8 <tcp_timewait_input+0xc8>)
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	f003 0304 	and.w	r3, r3, #4
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d153      	bne.n	8010eec <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d106      	bne.n	8010e58 <tcp_timewait_input+0x28>
 8010e4a:	4b2c      	ldr	r3, [pc, #176]	; (8010efc <tcp_timewait_input+0xcc>)
 8010e4c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010e50:	492b      	ldr	r1, [pc, #172]	; (8010f00 <tcp_timewait_input+0xd0>)
 8010e52:	482c      	ldr	r0, [pc, #176]	; (8010f04 <tcp_timewait_input+0xd4>)
 8010e54:	f006 fae4 	bl	8017420 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010e58:	4b27      	ldr	r3, [pc, #156]	; (8010ef8 <tcp_timewait_input+0xc8>)
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	f003 0302 	and.w	r3, r3, #2
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d02a      	beq.n	8010eba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010e64:	4b28      	ldr	r3, [pc, #160]	; (8010f08 <tcp_timewait_input+0xd8>)
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	db2d      	blt.n	8010ece <tcp_timewait_input+0x9e>
 8010e72:	4b25      	ldr	r3, [pc, #148]	; (8010f08 <tcp_timewait_input+0xd8>)
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e7a:	6879      	ldr	r1, [r7, #4]
 8010e7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e7e:	440b      	add	r3, r1
 8010e80:	1ad3      	subs	r3, r2, r3
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	dc23      	bgt.n	8010ece <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e86:	4b21      	ldr	r3, [pc, #132]	; (8010f0c <tcp_timewait_input+0xdc>)
 8010e88:	6819      	ldr	r1, [r3, #0]
 8010e8a:	4b21      	ldr	r3, [pc, #132]	; (8010f10 <tcp_timewait_input+0xe0>)
 8010e8c:	881b      	ldrh	r3, [r3, #0]
 8010e8e:	461a      	mov	r2, r3
 8010e90:	4b1d      	ldr	r3, [pc, #116]	; (8010f08 <tcp_timewait_input+0xd8>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e96:	4b1f      	ldr	r3, [pc, #124]	; (8010f14 <tcp_timewait_input+0xe4>)
 8010e98:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e9a:	885b      	ldrh	r3, [r3, #2]
 8010e9c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e9e:	4a1d      	ldr	r2, [pc, #116]	; (8010f14 <tcp_timewait_input+0xe4>)
 8010ea0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ea2:	8812      	ldrh	r2, [r2, #0]
 8010ea4:	b292      	uxth	r2, r2
 8010ea6:	9202      	str	r2, [sp, #8]
 8010ea8:	9301      	str	r3, [sp, #4]
 8010eaa:	4b1b      	ldr	r3, [pc, #108]	; (8010f18 <tcp_timewait_input+0xe8>)
 8010eac:	9300      	str	r3, [sp, #0]
 8010eae:	4b1b      	ldr	r3, [pc, #108]	; (8010f1c <tcp_timewait_input+0xec>)
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f003 fac8 	bl	8014448 <tcp_rst>
      return;
 8010eb8:	e01b      	b.n	8010ef2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010eba:	4b0f      	ldr	r3, [pc, #60]	; (8010ef8 <tcp_timewait_input+0xc8>)
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	f003 0301 	and.w	r3, r3, #1
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d003      	beq.n	8010ece <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010ec6:	4b16      	ldr	r3, [pc, #88]	; (8010f20 <tcp_timewait_input+0xf0>)
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010ece:	4b10      	ldr	r3, [pc, #64]	; (8010f10 <tcp_timewait_input+0xe0>)
 8010ed0:	881b      	ldrh	r3, [r3, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d00c      	beq.n	8010ef0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	8b5b      	ldrh	r3, [r3, #26]
 8010eda:	f043 0302 	orr.w	r3, r3, #2
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f002 fcfb 	bl	80138e0 <tcp_output>
  }
  return;
 8010eea:	e001      	b.n	8010ef0 <tcp_timewait_input+0xc0>
    return;
 8010eec:	bf00      	nop
 8010eee:	e000      	b.n	8010ef2 <tcp_timewait_input+0xc2>
  return;
 8010ef0:	bf00      	nop
}
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}
 8010ef8:	20001a38 	.word	0x20001a38
 8010efc:	0801aee4 	.word	0x0801aee4
 8010f00:	0801b0fc 	.word	0x0801b0fc
 8010f04:	0801af30 	.word	0x0801af30
 8010f08:	20001a2c 	.word	0x20001a2c
 8010f0c:	20001a30 	.word	0x20001a30
 8010f10:	20001a36 	.word	0x20001a36
 8010f14:	20001a1c 	.word	0x20001a1c
 8010f18:	2000e2fc 	.word	0x2000e2fc
 8010f1c:	2000e300 	.word	0x2000e300
 8010f20:	20011834 	.word	0x20011834

08010f24 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010f24:	b590      	push	{r4, r7, lr}
 8010f26:	b08d      	sub	sp, #52	; 0x34
 8010f28:	af04      	add	r7, sp, #16
 8010f2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010f30:	2300      	movs	r3, #0
 8010f32:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d106      	bne.n	8010f48 <tcp_process+0x24>
 8010f3a:	4ba5      	ldr	r3, [pc, #660]	; (80111d0 <tcp_process+0x2ac>)
 8010f3c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010f40:	49a4      	ldr	r1, [pc, #656]	; (80111d4 <tcp_process+0x2b0>)
 8010f42:	48a5      	ldr	r0, [pc, #660]	; (80111d8 <tcp_process+0x2b4>)
 8010f44:	f006 fa6c 	bl	8017420 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010f48:	4ba4      	ldr	r3, [pc, #656]	; (80111dc <tcp_process+0x2b8>)
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	f003 0304 	and.w	r3, r3, #4
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d04e      	beq.n	8010ff2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	7d1b      	ldrb	r3, [r3, #20]
 8010f58:	2b02      	cmp	r3, #2
 8010f5a:	d108      	bne.n	8010f6e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f60:	4b9f      	ldr	r3, [pc, #636]	; (80111e0 <tcp_process+0x2bc>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d123      	bne.n	8010fb0 <tcp_process+0x8c>
        acceptable = 1;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	76fb      	strb	r3, [r7, #27]
 8010f6c:	e020      	b.n	8010fb0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f72:	4b9c      	ldr	r3, [pc, #624]	; (80111e4 <tcp_process+0x2c0>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d102      	bne.n	8010f80 <tcp_process+0x5c>
        acceptable = 1;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	76fb      	strb	r3, [r7, #27]
 8010f7e:	e017      	b.n	8010fb0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010f80:	4b98      	ldr	r3, [pc, #608]	; (80111e4 <tcp_process+0x2c0>)
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f88:	1ad3      	subs	r3, r2, r3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	db10      	blt.n	8010fb0 <tcp_process+0x8c>
 8010f8e:	4b95      	ldr	r3, [pc, #596]	; (80111e4 <tcp_process+0x2c0>)
 8010f90:	681a      	ldr	r2, [r3, #0]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f96:	6879      	ldr	r1, [r7, #4]
 8010f98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f9a:	440b      	add	r3, r1
 8010f9c:	1ad3      	subs	r3, r2, r3
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	dc06      	bgt.n	8010fb0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	8b5b      	ldrh	r3, [r3, #26]
 8010fa6:	f043 0302 	orr.w	r3, r3, #2
 8010faa:	b29a      	uxth	r2, r3
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010fb0:	7efb      	ldrb	r3, [r7, #27]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d01b      	beq.n	8010fee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	7d1b      	ldrb	r3, [r3, #20]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d106      	bne.n	8010fcc <tcp_process+0xa8>
 8010fbe:	4b84      	ldr	r3, [pc, #528]	; (80111d0 <tcp_process+0x2ac>)
 8010fc0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010fc4:	4988      	ldr	r1, [pc, #544]	; (80111e8 <tcp_process+0x2c4>)
 8010fc6:	4884      	ldr	r0, [pc, #528]	; (80111d8 <tcp_process+0x2b4>)
 8010fc8:	f006 fa2a 	bl	8017420 <iprintf>
      recv_flags |= TF_RESET;
 8010fcc:	4b87      	ldr	r3, [pc, #540]	; (80111ec <tcp_process+0x2c8>)
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	f043 0308 	orr.w	r3, r3, #8
 8010fd4:	b2da      	uxtb	r2, r3
 8010fd6:	4b85      	ldr	r3, [pc, #532]	; (80111ec <tcp_process+0x2c8>)
 8010fd8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	8b5b      	ldrh	r3, [r3, #26]
 8010fde:	f023 0301 	bic.w	r3, r3, #1
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010fe8:	f06f 030d 	mvn.w	r3, #13
 8010fec:	e37a      	b.n	80116e4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	e378      	b.n	80116e4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010ff2:	4b7a      	ldr	r3, [pc, #488]	; (80111dc <tcp_process+0x2b8>)
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	f003 0302 	and.w	r3, r3, #2
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d010      	beq.n	8011020 <tcp_process+0xfc>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	7d1b      	ldrb	r3, [r3, #20]
 8011002:	2b02      	cmp	r3, #2
 8011004:	d00c      	beq.n	8011020 <tcp_process+0xfc>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	7d1b      	ldrb	r3, [r3, #20]
 801100a:	2b03      	cmp	r3, #3
 801100c:	d008      	beq.n	8011020 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	8b5b      	ldrh	r3, [r3, #26]
 8011012:	f043 0302 	orr.w	r3, r3, #2
 8011016:	b29a      	uxth	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	e361      	b.n	80116e4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	8b5b      	ldrh	r3, [r3, #26]
 8011024:	f003 0310 	and.w	r3, r3, #16
 8011028:	2b00      	cmp	r3, #0
 801102a:	d103      	bne.n	8011034 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801102c:	4b70      	ldr	r3, [pc, #448]	; (80111f0 <tcp_process+0x2cc>)
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2200      	movs	r2, #0
 8011040:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f001 fc2d 	bl	80128a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	7d1b      	ldrb	r3, [r3, #20]
 801104e:	3b02      	subs	r3, #2
 8011050:	2b07      	cmp	r3, #7
 8011052:	f200 8337 	bhi.w	80116c4 <tcp_process+0x7a0>
 8011056:	a201      	add	r2, pc, #4	; (adr r2, 801105c <tcp_process+0x138>)
 8011058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801105c:	0801107d 	.word	0x0801107d
 8011060:	080112ad 	.word	0x080112ad
 8011064:	08011425 	.word	0x08011425
 8011068:	0801144f 	.word	0x0801144f
 801106c:	08011573 	.word	0x08011573
 8011070:	08011425 	.word	0x08011425
 8011074:	080115ff 	.word	0x080115ff
 8011078:	0801168f 	.word	0x0801168f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801107c:	4b57      	ldr	r3, [pc, #348]	; (80111dc <tcp_process+0x2b8>)
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	f003 0310 	and.w	r3, r3, #16
 8011084:	2b00      	cmp	r3, #0
 8011086:	f000 80e4 	beq.w	8011252 <tcp_process+0x32e>
 801108a:	4b54      	ldr	r3, [pc, #336]	; (80111dc <tcp_process+0x2b8>)
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	f003 0302 	and.w	r3, r3, #2
 8011092:	2b00      	cmp	r3, #0
 8011094:	f000 80dd 	beq.w	8011252 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801109c:	1c5a      	adds	r2, r3, #1
 801109e:	4b50      	ldr	r3, [pc, #320]	; (80111e0 <tcp_process+0x2bc>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	429a      	cmp	r2, r3
 80110a4:	f040 80d5 	bne.w	8011252 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80110a8:	4b4e      	ldr	r3, [pc, #312]	; (80111e4 <tcp_process+0x2c0>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	1c5a      	adds	r2, r3, #1
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80110ba:	4b49      	ldr	r3, [pc, #292]	; (80111e0 <tcp_process+0x2bc>)
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80110c2:	4b4c      	ldr	r3, [pc, #304]	; (80111f4 <tcp_process+0x2d0>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	89db      	ldrh	r3, [r3, #14]
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80110dc:	4b41      	ldr	r3, [pc, #260]	; (80111e4 <tcp_process+0x2c0>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	1e5a      	subs	r2, r3, #1
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2204      	movs	r2, #4
 80110ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	3304      	adds	r3, #4
 80110f4:	4618      	mov	r0, r3
 80110f6:	f004 ff47 	bl	8015f88 <ip4_route>
 80110fa:	4601      	mov	r1, r0
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	3304      	adds	r3, #4
 8011100:	461a      	mov	r2, r3
 8011102:	4620      	mov	r0, r4
 8011104:	f7ff f88e 	bl	8010224 <tcp_eff_send_mss_netif>
 8011108:	4603      	mov	r3, r0
 801110a:	461a      	mov	r2, r3
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011114:	009a      	lsls	r2, r3, #2
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801111a:	005b      	lsls	r3, r3, #1
 801111c:	f241 111c 	movw	r1, #4380	; 0x111c
 8011120:	428b      	cmp	r3, r1
 8011122:	bf38      	it	cc
 8011124:	460b      	movcc	r3, r1
 8011126:	429a      	cmp	r2, r3
 8011128:	d204      	bcs.n	8011134 <tcp_process+0x210>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	b29b      	uxth	r3, r3
 8011132:	e00d      	b.n	8011150 <tcp_process+0x22c>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011138:	005b      	lsls	r3, r3, #1
 801113a:	f241 121c 	movw	r2, #4380	; 0x111c
 801113e:	4293      	cmp	r3, r2
 8011140:	d904      	bls.n	801114c <tcp_process+0x228>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011146:	005b      	lsls	r3, r3, #1
 8011148:	b29b      	uxth	r3, r3
 801114a:	e001      	b.n	8011150 <tcp_process+0x22c>
 801114c:	f241 131c 	movw	r3, #4380	; 0x111c
 8011150:	687a      	ldr	r2, [r7, #4]
 8011152:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801115c:	2b00      	cmp	r3, #0
 801115e:	d106      	bne.n	801116e <tcp_process+0x24a>
 8011160:	4b1b      	ldr	r3, [pc, #108]	; (80111d0 <tcp_process+0x2ac>)
 8011162:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011166:	4924      	ldr	r1, [pc, #144]	; (80111f8 <tcp_process+0x2d4>)
 8011168:	481b      	ldr	r0, [pc, #108]	; (80111d8 <tcp_process+0x2b4>)
 801116a:	f006 f959 	bl	8017420 <iprintf>
        --pcb->snd_queuelen;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011174:	3b01      	subs	r3, #1
 8011176:	b29a      	uxth	r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011182:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d111      	bne.n	80111ae <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801118e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d106      	bne.n	80111a4 <tcp_process+0x280>
 8011196:	4b0e      	ldr	r3, [pc, #56]	; (80111d0 <tcp_process+0x2ac>)
 8011198:	f44f 725d 	mov.w	r2, #884	; 0x374
 801119c:	4917      	ldr	r1, [pc, #92]	; (80111fc <tcp_process+0x2d8>)
 801119e:	480e      	ldr	r0, [pc, #56]	; (80111d8 <tcp_process+0x2b4>)
 80111a0:	f006 f93e 	bl	8017420 <iprintf>
          pcb->unsent = rseg->next;
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80111ac:	e003      	b.n	80111b6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80111ae:	69fb      	ldr	r3, [r7, #28]
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80111b6:	69f8      	ldr	r0, [r7, #28]
 80111b8:	f7fe fc51 	bl	800fa5e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d11d      	bne.n	8011200 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111ca:	861a      	strh	r2, [r3, #48]	; 0x30
 80111cc:	e01f      	b.n	801120e <tcp_process+0x2ea>
 80111ce:	bf00      	nop
 80111d0:	0801aee4 	.word	0x0801aee4
 80111d4:	0801b11c 	.word	0x0801b11c
 80111d8:	0801af30 	.word	0x0801af30
 80111dc:	20001a38 	.word	0x20001a38
 80111e0:	20001a30 	.word	0x20001a30
 80111e4:	20001a2c 	.word	0x20001a2c
 80111e8:	0801b138 	.word	0x0801b138
 80111ec:	20001a39 	.word	0x20001a39
 80111f0:	20011834 	.word	0x20011834
 80111f4:	20001a1c 	.word	0x20001a1c
 80111f8:	0801b158 	.word	0x0801b158
 80111fc:	0801b170 	.word	0x0801b170
        } else {
          pcb->rtime = 0;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2200      	movs	r2, #0
 8011204:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2200      	movs	r2, #0
 801120a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011214:	2b00      	cmp	r3, #0
 8011216:	d00a      	beq.n	801122e <tcp_process+0x30a>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	6910      	ldr	r0, [r2, #16]
 8011222:	2200      	movs	r2, #0
 8011224:	6879      	ldr	r1, [r7, #4]
 8011226:	4798      	blx	r3
 8011228:	4603      	mov	r3, r0
 801122a:	76bb      	strb	r3, [r7, #26]
 801122c:	e001      	b.n	8011232 <tcp_process+0x30e>
 801122e:	2300      	movs	r3, #0
 8011230:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011232:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011236:	f113 0f0d 	cmn.w	r3, #13
 801123a:	d102      	bne.n	8011242 <tcp_process+0x31e>
          return ERR_ABRT;
 801123c:	f06f 030c 	mvn.w	r3, #12
 8011240:	e250      	b.n	80116e4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	8b5b      	ldrh	r3, [r3, #26]
 8011246:	f043 0302 	orr.w	r3, r3, #2
 801124a:	b29a      	uxth	r2, r3
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011250:	e23a      	b.n	80116c8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011252:	4b9d      	ldr	r3, [pc, #628]	; (80114c8 <tcp_process+0x5a4>)
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	f003 0310 	and.w	r3, r3, #16
 801125a:	2b00      	cmp	r3, #0
 801125c:	f000 8234 	beq.w	80116c8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011260:	4b9a      	ldr	r3, [pc, #616]	; (80114cc <tcp_process+0x5a8>)
 8011262:	6819      	ldr	r1, [r3, #0]
 8011264:	4b9a      	ldr	r3, [pc, #616]	; (80114d0 <tcp_process+0x5ac>)
 8011266:	881b      	ldrh	r3, [r3, #0]
 8011268:	461a      	mov	r2, r3
 801126a:	4b9a      	ldr	r3, [pc, #616]	; (80114d4 <tcp_process+0x5b0>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011270:	4b99      	ldr	r3, [pc, #612]	; (80114d8 <tcp_process+0x5b4>)
 8011272:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011274:	885b      	ldrh	r3, [r3, #2]
 8011276:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011278:	4a97      	ldr	r2, [pc, #604]	; (80114d8 <tcp_process+0x5b4>)
 801127a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801127c:	8812      	ldrh	r2, [r2, #0]
 801127e:	b292      	uxth	r2, r2
 8011280:	9202      	str	r2, [sp, #8]
 8011282:	9301      	str	r3, [sp, #4]
 8011284:	4b95      	ldr	r3, [pc, #596]	; (80114dc <tcp_process+0x5b8>)
 8011286:	9300      	str	r3, [sp, #0]
 8011288:	4b95      	ldr	r3, [pc, #596]	; (80114e0 <tcp_process+0x5bc>)
 801128a:	4602      	mov	r2, r0
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f003 f8db 	bl	8014448 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011298:	2b05      	cmp	r3, #5
 801129a:	f200 8215 	bhi.w	80116c8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2200      	movs	r2, #0
 80112a2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f002 fea5 	bl	8013ff4 <tcp_rexmit_rto>
      break;
 80112aa:	e20d      	b.n	80116c8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80112ac:	4b86      	ldr	r3, [pc, #536]	; (80114c8 <tcp_process+0x5a4>)
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	f003 0310 	and.w	r3, r3, #16
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	f000 80a1 	beq.w	80113fc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80112ba:	4b84      	ldr	r3, [pc, #528]	; (80114cc <tcp_process+0x5a8>)
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112c2:	1ad3      	subs	r3, r2, r3
 80112c4:	3b01      	subs	r3, #1
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	db7e      	blt.n	80113c8 <tcp_process+0x4a4>
 80112ca:	4b80      	ldr	r3, [pc, #512]	; (80114cc <tcp_process+0x5a8>)
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	dc77      	bgt.n	80113c8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2204      	movs	r2, #4
 80112dc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d102      	bne.n	80112ec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80112e6:	23fa      	movs	r3, #250	; 0xfa
 80112e8:	76bb      	strb	r3, [r7, #26]
 80112ea:	e01d      	b.n	8011328 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112f0:	699b      	ldr	r3, [r3, #24]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d106      	bne.n	8011304 <tcp_process+0x3e0>
 80112f6:	4b7b      	ldr	r3, [pc, #492]	; (80114e4 <tcp_process+0x5c0>)
 80112f8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80112fc:	497a      	ldr	r1, [pc, #488]	; (80114e8 <tcp_process+0x5c4>)
 80112fe:	487b      	ldr	r0, [pc, #492]	; (80114ec <tcp_process+0x5c8>)
 8011300:	f006 f88e 	bl	8017420 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011308:	699b      	ldr	r3, [r3, #24]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d00a      	beq.n	8011324 <tcp_process+0x400>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011312:	699b      	ldr	r3, [r3, #24]
 8011314:	687a      	ldr	r2, [r7, #4]
 8011316:	6910      	ldr	r0, [r2, #16]
 8011318:	2200      	movs	r2, #0
 801131a:	6879      	ldr	r1, [r7, #4]
 801131c:	4798      	blx	r3
 801131e:	4603      	mov	r3, r0
 8011320:	76bb      	strb	r3, [r7, #26]
 8011322:	e001      	b.n	8011328 <tcp_process+0x404>
 8011324:	23f0      	movs	r3, #240	; 0xf0
 8011326:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011328:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d00a      	beq.n	8011346 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011330:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011334:	f113 0f0d 	cmn.w	r3, #13
 8011338:	d002      	beq.n	8011340 <tcp_process+0x41c>
              tcp_abort(pcb);
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f7fd fcea 	bl	800ed14 <tcp_abort>
            }
            return ERR_ABRT;
 8011340:	f06f 030c 	mvn.w	r3, #12
 8011344:	e1ce      	b.n	80116e4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f000 fae0 	bl	801190c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801134c:	4b68      	ldr	r3, [pc, #416]	; (80114f0 <tcp_process+0x5cc>)
 801134e:	881b      	ldrh	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d005      	beq.n	8011360 <tcp_process+0x43c>
            recv_acked--;
 8011354:	4b66      	ldr	r3, [pc, #408]	; (80114f0 <tcp_process+0x5cc>)
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	3b01      	subs	r3, #1
 801135a:	b29a      	uxth	r2, r3
 801135c:	4b64      	ldr	r3, [pc, #400]	; (80114f0 <tcp_process+0x5cc>)
 801135e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011364:	009a      	lsls	r2, r3, #2
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801136a:	005b      	lsls	r3, r3, #1
 801136c:	f241 111c 	movw	r1, #4380	; 0x111c
 8011370:	428b      	cmp	r3, r1
 8011372:	bf38      	it	cc
 8011374:	460b      	movcc	r3, r1
 8011376:	429a      	cmp	r2, r3
 8011378:	d204      	bcs.n	8011384 <tcp_process+0x460>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801137e:	009b      	lsls	r3, r3, #2
 8011380:	b29b      	uxth	r3, r3
 8011382:	e00d      	b.n	80113a0 <tcp_process+0x47c>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011388:	005b      	lsls	r3, r3, #1
 801138a:	f241 121c 	movw	r2, #4380	; 0x111c
 801138e:	4293      	cmp	r3, r2
 8011390:	d904      	bls.n	801139c <tcp_process+0x478>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011396:	005b      	lsls	r3, r3, #1
 8011398:	b29b      	uxth	r3, r3
 801139a:	e001      	b.n	80113a0 <tcp_process+0x47c>
 801139c:	f241 131c 	movw	r3, #4380	; 0x111c
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80113a6:	4b53      	ldr	r3, [pc, #332]	; (80114f4 <tcp_process+0x5d0>)
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	f003 0320 	and.w	r3, r3, #32
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d037      	beq.n	8011422 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	8b5b      	ldrh	r3, [r3, #26]
 80113b6:	f043 0302 	orr.w	r3, r3, #2
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2207      	movs	r2, #7
 80113c4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80113c6:	e02c      	b.n	8011422 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113c8:	4b40      	ldr	r3, [pc, #256]	; (80114cc <tcp_process+0x5a8>)
 80113ca:	6819      	ldr	r1, [r3, #0]
 80113cc:	4b40      	ldr	r3, [pc, #256]	; (80114d0 <tcp_process+0x5ac>)
 80113ce:	881b      	ldrh	r3, [r3, #0]
 80113d0:	461a      	mov	r2, r3
 80113d2:	4b40      	ldr	r3, [pc, #256]	; (80114d4 <tcp_process+0x5b0>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113d8:	4b3f      	ldr	r3, [pc, #252]	; (80114d8 <tcp_process+0x5b4>)
 80113da:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113dc:	885b      	ldrh	r3, [r3, #2]
 80113de:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113e0:	4a3d      	ldr	r2, [pc, #244]	; (80114d8 <tcp_process+0x5b4>)
 80113e2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113e4:	8812      	ldrh	r2, [r2, #0]
 80113e6:	b292      	uxth	r2, r2
 80113e8:	9202      	str	r2, [sp, #8]
 80113ea:	9301      	str	r3, [sp, #4]
 80113ec:	4b3b      	ldr	r3, [pc, #236]	; (80114dc <tcp_process+0x5b8>)
 80113ee:	9300      	str	r3, [sp, #0]
 80113f0:	4b3b      	ldr	r3, [pc, #236]	; (80114e0 <tcp_process+0x5bc>)
 80113f2:	4602      	mov	r2, r0
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f003 f827 	bl	8014448 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80113fa:	e167      	b.n	80116cc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80113fc:	4b32      	ldr	r3, [pc, #200]	; (80114c8 <tcp_process+0x5a4>)
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	f003 0302 	and.w	r3, r3, #2
 8011404:	2b00      	cmp	r3, #0
 8011406:	f000 8161 	beq.w	80116cc <tcp_process+0x7a8>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801140e:	1e5a      	subs	r2, r3, #1
 8011410:	4b30      	ldr	r3, [pc, #192]	; (80114d4 <tcp_process+0x5b0>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	429a      	cmp	r2, r3
 8011416:	f040 8159 	bne.w	80116cc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f002 fe0c 	bl	8014038 <tcp_rexmit>
      break;
 8011420:	e154      	b.n	80116cc <tcp_process+0x7a8>
 8011422:	e153      	b.n	80116cc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f000 fa71 	bl	801190c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801142a:	4b32      	ldr	r3, [pc, #200]	; (80114f4 <tcp_process+0x5d0>)
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	f003 0320 	and.w	r3, r3, #32
 8011432:	2b00      	cmp	r3, #0
 8011434:	f000 814c 	beq.w	80116d0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	8b5b      	ldrh	r3, [r3, #26]
 801143c:	f043 0302 	orr.w	r3, r3, #2
 8011440:	b29a      	uxth	r2, r3
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2207      	movs	r2, #7
 801144a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801144c:	e140      	b.n	80116d0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f000 fa5c 	bl	801190c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011454:	4b27      	ldr	r3, [pc, #156]	; (80114f4 <tcp_process+0x5d0>)
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f003 0320 	and.w	r3, r3, #32
 801145c:	2b00      	cmp	r3, #0
 801145e:	d071      	beq.n	8011544 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011460:	4b19      	ldr	r3, [pc, #100]	; (80114c8 <tcp_process+0x5a4>)
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	f003 0310 	and.w	r3, r3, #16
 8011468:	2b00      	cmp	r3, #0
 801146a:	d060      	beq.n	801152e <tcp_process+0x60a>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011470:	4b16      	ldr	r3, [pc, #88]	; (80114cc <tcp_process+0x5a8>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	429a      	cmp	r2, r3
 8011476:	d15a      	bne.n	801152e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801147c:	2b00      	cmp	r3, #0
 801147e:	d156      	bne.n	801152e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	8b5b      	ldrh	r3, [r3, #26]
 8011484:	f043 0302 	orr.w	r3, r3, #2
 8011488:	b29a      	uxth	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7fe fdbe 	bl	8010010 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011494:	4b18      	ldr	r3, [pc, #96]	; (80114f8 <tcp_process+0x5d4>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	429a      	cmp	r2, r3
 801149c:	d105      	bne.n	80114aa <tcp_process+0x586>
 801149e:	4b16      	ldr	r3, [pc, #88]	; (80114f8 <tcp_process+0x5d4>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	4a14      	ldr	r2, [pc, #80]	; (80114f8 <tcp_process+0x5d4>)
 80114a6:	6013      	str	r3, [r2, #0]
 80114a8:	e02e      	b.n	8011508 <tcp_process+0x5e4>
 80114aa:	4b13      	ldr	r3, [pc, #76]	; (80114f8 <tcp_process+0x5d4>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	617b      	str	r3, [r7, #20]
 80114b0:	e027      	b.n	8011502 <tcp_process+0x5de>
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d11f      	bne.n	80114fc <tcp_process+0x5d8>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	68da      	ldr	r2, [r3, #12]
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	60da      	str	r2, [r3, #12]
 80114c4:	e020      	b.n	8011508 <tcp_process+0x5e4>
 80114c6:	bf00      	nop
 80114c8:	20001a38 	.word	0x20001a38
 80114cc:	20001a30 	.word	0x20001a30
 80114d0:	20001a36 	.word	0x20001a36
 80114d4:	20001a2c 	.word	0x20001a2c
 80114d8:	20001a1c 	.word	0x20001a1c
 80114dc:	2000e2fc 	.word	0x2000e2fc
 80114e0:	2000e300 	.word	0x2000e300
 80114e4:	0801aee4 	.word	0x0801aee4
 80114e8:	0801b184 	.word	0x0801b184
 80114ec:	0801af30 	.word	0x0801af30
 80114f0:	20001a34 	.word	0x20001a34
 80114f4:	20001a39 	.word	0x20001a39
 80114f8:	20011830 	.word	0x20011830
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	68db      	ldr	r3, [r3, #12]
 8011500:	617b      	str	r3, [r7, #20]
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d1d4      	bne.n	80114b2 <tcp_process+0x58e>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	60da      	str	r2, [r3, #12]
 801150e:	4b77      	ldr	r3, [pc, #476]	; (80116ec <tcp_process+0x7c8>)
 8011510:	2201      	movs	r2, #1
 8011512:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	220a      	movs	r2, #10
 8011518:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801151a:	4b75      	ldr	r3, [pc, #468]	; (80116f0 <tcp_process+0x7cc>)
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	60da      	str	r2, [r3, #12]
 8011522:	4a73      	ldr	r2, [pc, #460]	; (80116f0 <tcp_process+0x7cc>)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6013      	str	r3, [r2, #0]
 8011528:	f003 f950 	bl	80147cc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801152c:	e0d2      	b.n	80116d4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	8b5b      	ldrh	r3, [r3, #26]
 8011532:	f043 0302 	orr.w	r3, r3, #2
 8011536:	b29a      	uxth	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2208      	movs	r2, #8
 8011540:	751a      	strb	r2, [r3, #20]
      break;
 8011542:	e0c7      	b.n	80116d4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011544:	4b6b      	ldr	r3, [pc, #428]	; (80116f4 <tcp_process+0x7d0>)
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	f003 0310 	and.w	r3, r3, #16
 801154c:	2b00      	cmp	r3, #0
 801154e:	f000 80c1 	beq.w	80116d4 <tcp_process+0x7b0>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011556:	4b68      	ldr	r3, [pc, #416]	; (80116f8 <tcp_process+0x7d4>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	429a      	cmp	r2, r3
 801155c:	f040 80ba 	bne.w	80116d4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011564:	2b00      	cmp	r3, #0
 8011566:	f040 80b5 	bne.w	80116d4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2206      	movs	r2, #6
 801156e:	751a      	strb	r2, [r3, #20]
      break;
 8011570:	e0b0      	b.n	80116d4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 f9ca 	bl	801190c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011578:	4b60      	ldr	r3, [pc, #384]	; (80116fc <tcp_process+0x7d8>)
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	f003 0320 	and.w	r3, r3, #32
 8011580:	2b00      	cmp	r3, #0
 8011582:	f000 80a9 	beq.w	80116d8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	8b5b      	ldrh	r3, [r3, #26]
 801158a:	f043 0302 	orr.w	r3, r3, #2
 801158e:	b29a      	uxth	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f7fe fd3b 	bl	8010010 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801159a:	4b59      	ldr	r3, [pc, #356]	; (8011700 <tcp_process+0x7dc>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d105      	bne.n	80115b0 <tcp_process+0x68c>
 80115a4:	4b56      	ldr	r3, [pc, #344]	; (8011700 <tcp_process+0x7dc>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	4a55      	ldr	r2, [pc, #340]	; (8011700 <tcp_process+0x7dc>)
 80115ac:	6013      	str	r3, [r2, #0]
 80115ae:	e013      	b.n	80115d8 <tcp_process+0x6b4>
 80115b0:	4b53      	ldr	r3, [pc, #332]	; (8011700 <tcp_process+0x7dc>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	613b      	str	r3, [r7, #16]
 80115b6:	e00c      	b.n	80115d2 <tcp_process+0x6ae>
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	429a      	cmp	r2, r3
 80115c0:	d104      	bne.n	80115cc <tcp_process+0x6a8>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	68da      	ldr	r2, [r3, #12]
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	60da      	str	r2, [r3, #12]
 80115ca:	e005      	b.n	80115d8 <tcp_process+0x6b4>
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	613b      	str	r3, [r7, #16]
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d1ef      	bne.n	80115b8 <tcp_process+0x694>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2200      	movs	r2, #0
 80115dc:	60da      	str	r2, [r3, #12]
 80115de:	4b43      	ldr	r3, [pc, #268]	; (80116ec <tcp_process+0x7c8>)
 80115e0:	2201      	movs	r2, #1
 80115e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	220a      	movs	r2, #10
 80115e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80115ea:	4b41      	ldr	r3, [pc, #260]	; (80116f0 <tcp_process+0x7cc>)
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	60da      	str	r2, [r3, #12]
 80115f2:	4a3f      	ldr	r2, [pc, #252]	; (80116f0 <tcp_process+0x7cc>)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6013      	str	r3, [r2, #0]
 80115f8:	f003 f8e8 	bl	80147cc <tcp_timer_needed>
      }
      break;
 80115fc:	e06c      	b.n	80116d8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f000 f984 	bl	801190c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011604:	4b3b      	ldr	r3, [pc, #236]	; (80116f4 <tcp_process+0x7d0>)
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	f003 0310 	and.w	r3, r3, #16
 801160c:	2b00      	cmp	r3, #0
 801160e:	d065      	beq.n	80116dc <tcp_process+0x7b8>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011614:	4b38      	ldr	r3, [pc, #224]	; (80116f8 <tcp_process+0x7d4>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	429a      	cmp	r2, r3
 801161a:	d15f      	bne.n	80116dc <tcp_process+0x7b8>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011620:	2b00      	cmp	r3, #0
 8011622:	d15b      	bne.n	80116dc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7fe fcf3 	bl	8010010 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801162a:	4b35      	ldr	r3, [pc, #212]	; (8011700 <tcp_process+0x7dc>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	687a      	ldr	r2, [r7, #4]
 8011630:	429a      	cmp	r2, r3
 8011632:	d105      	bne.n	8011640 <tcp_process+0x71c>
 8011634:	4b32      	ldr	r3, [pc, #200]	; (8011700 <tcp_process+0x7dc>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	4a31      	ldr	r2, [pc, #196]	; (8011700 <tcp_process+0x7dc>)
 801163c:	6013      	str	r3, [r2, #0]
 801163e:	e013      	b.n	8011668 <tcp_process+0x744>
 8011640:	4b2f      	ldr	r3, [pc, #188]	; (8011700 <tcp_process+0x7dc>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	60fb      	str	r3, [r7, #12]
 8011646:	e00c      	b.n	8011662 <tcp_process+0x73e>
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	429a      	cmp	r2, r3
 8011650:	d104      	bne.n	801165c <tcp_process+0x738>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	68da      	ldr	r2, [r3, #12]
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	60da      	str	r2, [r3, #12]
 801165a:	e005      	b.n	8011668 <tcp_process+0x744>
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	60fb      	str	r3, [r7, #12]
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d1ef      	bne.n	8011648 <tcp_process+0x724>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2200      	movs	r2, #0
 801166c:	60da      	str	r2, [r3, #12]
 801166e:	4b1f      	ldr	r3, [pc, #124]	; (80116ec <tcp_process+0x7c8>)
 8011670:	2201      	movs	r2, #1
 8011672:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	220a      	movs	r2, #10
 8011678:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801167a:	4b1d      	ldr	r3, [pc, #116]	; (80116f0 <tcp_process+0x7cc>)
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	60da      	str	r2, [r3, #12]
 8011682:	4a1b      	ldr	r2, [pc, #108]	; (80116f0 <tcp_process+0x7cc>)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6013      	str	r3, [r2, #0]
 8011688:	f003 f8a0 	bl	80147cc <tcp_timer_needed>
      }
      break;
 801168c:	e026      	b.n	80116dc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f000 f93c 	bl	801190c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011694:	4b17      	ldr	r3, [pc, #92]	; (80116f4 <tcp_process+0x7d0>)
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	f003 0310 	and.w	r3, r3, #16
 801169c:	2b00      	cmp	r3, #0
 801169e:	d01f      	beq.n	80116e0 <tcp_process+0x7bc>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80116a4:	4b14      	ldr	r3, [pc, #80]	; (80116f8 <tcp_process+0x7d4>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d119      	bne.n	80116e0 <tcp_process+0x7bc>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d115      	bne.n	80116e0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80116b4:	4b11      	ldr	r3, [pc, #68]	; (80116fc <tcp_process+0x7d8>)
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	f043 0310 	orr.w	r3, r3, #16
 80116bc:	b2da      	uxtb	r2, r3
 80116be:	4b0f      	ldr	r3, [pc, #60]	; (80116fc <tcp_process+0x7d8>)
 80116c0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80116c2:	e00d      	b.n	80116e0 <tcp_process+0x7bc>
    default:
      break;
 80116c4:	bf00      	nop
 80116c6:	e00c      	b.n	80116e2 <tcp_process+0x7be>
      break;
 80116c8:	bf00      	nop
 80116ca:	e00a      	b.n	80116e2 <tcp_process+0x7be>
      break;
 80116cc:	bf00      	nop
 80116ce:	e008      	b.n	80116e2 <tcp_process+0x7be>
      break;
 80116d0:	bf00      	nop
 80116d2:	e006      	b.n	80116e2 <tcp_process+0x7be>
      break;
 80116d4:	bf00      	nop
 80116d6:	e004      	b.n	80116e2 <tcp_process+0x7be>
      break;
 80116d8:	bf00      	nop
 80116da:	e002      	b.n	80116e2 <tcp_process+0x7be>
      break;
 80116dc:	bf00      	nop
 80116de:	e000      	b.n	80116e2 <tcp_process+0x7be>
      break;
 80116e0:	bf00      	nop
  }
  return ERR_OK;
 80116e2:	2300      	movs	r3, #0
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3724      	adds	r7, #36	; 0x24
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd90      	pop	{r4, r7, pc}
 80116ec:	2001182c 	.word	0x2001182c
 80116f0:	20011840 	.word	0x20011840
 80116f4:	20001a38 	.word	0x20001a38
 80116f8:	20001a30 	.word	0x20001a30
 80116fc:	20001a39 	.word	0x20001a39
 8011700:	20011830 	.word	0x20011830

08011704 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011704:	b590      	push	{r4, r7, lr}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d106      	bne.n	8011722 <tcp_oos_insert_segment+0x1e>
 8011714:	4b3b      	ldr	r3, [pc, #236]	; (8011804 <tcp_oos_insert_segment+0x100>)
 8011716:	f240 421f 	movw	r2, #1055	; 0x41f
 801171a:	493b      	ldr	r1, [pc, #236]	; (8011808 <tcp_oos_insert_segment+0x104>)
 801171c:	483b      	ldr	r0, [pc, #236]	; (801180c <tcp_oos_insert_segment+0x108>)
 801171e:	f005 fe7f 	bl	8017420 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	899b      	ldrh	r3, [r3, #12]
 8011728:	b29b      	uxth	r3, r3
 801172a:	4618      	mov	r0, r3
 801172c:	f7fb f9d8 	bl	800cae0 <lwip_htons>
 8011730:	4603      	mov	r3, r0
 8011732:	b2db      	uxtb	r3, r3
 8011734:	f003 0301 	and.w	r3, r3, #1
 8011738:	2b00      	cmp	r3, #0
 801173a:	d028      	beq.n	801178e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801173c:	6838      	ldr	r0, [r7, #0]
 801173e:	f7fe f979 	bl	800fa34 <tcp_segs_free>
    next = NULL;
 8011742:	2300      	movs	r3, #0
 8011744:	603b      	str	r3, [r7, #0]
 8011746:	e056      	b.n	80117f6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	68db      	ldr	r3, [r3, #12]
 801174c:	899b      	ldrh	r3, [r3, #12]
 801174e:	b29b      	uxth	r3, r3
 8011750:	4618      	mov	r0, r3
 8011752:	f7fb f9c5 	bl	800cae0 <lwip_htons>
 8011756:	4603      	mov	r3, r0
 8011758:	b2db      	uxtb	r3, r3
 801175a:	f003 0301 	and.w	r3, r3, #1
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00d      	beq.n	801177e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	899b      	ldrh	r3, [r3, #12]
 8011768:	b29c      	uxth	r4, r3
 801176a:	2001      	movs	r0, #1
 801176c:	f7fb f9b8 	bl	800cae0 <lwip_htons>
 8011770:	4603      	mov	r3, r0
 8011772:	461a      	mov	r2, r3
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	4322      	orrs	r2, r4
 801177a:	b292      	uxth	r2, r2
 801177c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	f7fe f968 	bl	800fa5e <tcp_seg_free>
    while (next &&
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d00e      	beq.n	80117b2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	891b      	ldrh	r3, [r3, #8]
 8011798:	461a      	mov	r2, r3
 801179a:	4b1d      	ldr	r3, [pc, #116]	; (8011810 <tcp_oos_insert_segment+0x10c>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	441a      	add	r2, r3
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	6839      	ldr	r1, [r7, #0]
 80117a8:	8909      	ldrh	r1, [r1, #8]
 80117aa:	440b      	add	r3, r1
 80117ac:	1ad3      	subs	r3, r2, r3
    while (next &&
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	daca      	bge.n	8011748 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d01e      	beq.n	80117f6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	891b      	ldrh	r3, [r3, #8]
 80117bc:	461a      	mov	r2, r3
 80117be:	4b14      	ldr	r3, [pc, #80]	; (8011810 <tcp_oos_insert_segment+0x10c>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	441a      	add	r2, r3
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	1ad3      	subs	r3, r2, r3
    if (next &&
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	dd12      	ble.n	80117f6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	b29a      	uxth	r2, r3
 80117d8:	4b0d      	ldr	r3, [pc, #52]	; (8011810 <tcp_oos_insert_segment+0x10c>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	b29b      	uxth	r3, r3
 80117de:	1ad3      	subs	r3, r2, r3
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	685a      	ldr	r2, [r3, #4]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	891b      	ldrh	r3, [r3, #8]
 80117ee:	4619      	mov	r1, r3
 80117f0:	4610      	mov	r0, r2
 80117f2:	f7fc fb81 	bl	800def8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	683a      	ldr	r2, [r7, #0]
 80117fa:	601a      	str	r2, [r3, #0]
}
 80117fc:	bf00      	nop
 80117fe:	3714      	adds	r7, #20
 8011800:	46bd      	mov	sp, r7
 8011802:	bd90      	pop	{r4, r7, pc}
 8011804:	0801aee4 	.word	0x0801aee4
 8011808:	0801b1a4 	.word	0x0801b1a4
 801180c:	0801af30 	.word	0x0801af30
 8011810:	20001a2c 	.word	0x20001a2c

08011814 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011814:	b5b0      	push	{r4, r5, r7, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	607a      	str	r2, [r7, #4]
 8011820:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011822:	e03e      	b.n	80118a2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	4618      	mov	r0, r3
 8011834:	f7fc fd6e 	bl	800e314 <pbuf_clen>
 8011838:	4603      	mov	r3, r0
 801183a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011842:	8a7a      	ldrh	r2, [r7, #18]
 8011844:	429a      	cmp	r2, r3
 8011846:	d906      	bls.n	8011856 <tcp_free_acked_segments+0x42>
 8011848:	4b2a      	ldr	r3, [pc, #168]	; (80118f4 <tcp_free_acked_segments+0xe0>)
 801184a:	f240 4257 	movw	r2, #1111	; 0x457
 801184e:	492a      	ldr	r1, [pc, #168]	; (80118f8 <tcp_free_acked_segments+0xe4>)
 8011850:	482a      	ldr	r0, [pc, #168]	; (80118fc <tcp_free_acked_segments+0xe8>)
 8011852:	f005 fde5 	bl	8017420 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801185c:	8a7b      	ldrh	r3, [r7, #18]
 801185e:	1ad3      	subs	r3, r2, r3
 8011860:	b29a      	uxth	r2, r3
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	891a      	ldrh	r2, [r3, #8]
 801186c:	4b24      	ldr	r3, [pc, #144]	; (8011900 <tcp_free_acked_segments+0xec>)
 801186e:	881b      	ldrh	r3, [r3, #0]
 8011870:	4413      	add	r3, r2
 8011872:	b29a      	uxth	r2, r3
 8011874:	4b22      	ldr	r3, [pc, #136]	; (8011900 <tcp_free_acked_segments+0xec>)
 8011876:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011878:	6978      	ldr	r0, [r7, #20]
 801187a:	f7fe f8f0 	bl	800fa5e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00c      	beq.n	80118a2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d109      	bne.n	80118a2 <tcp_free_acked_segments+0x8e>
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d106      	bne.n	80118a2 <tcp_free_acked_segments+0x8e>
 8011894:	4b17      	ldr	r3, [pc, #92]	; (80118f4 <tcp_free_acked_segments+0xe0>)
 8011896:	f240 4261 	movw	r2, #1121	; 0x461
 801189a:	491a      	ldr	r1, [pc, #104]	; (8011904 <tcp_free_acked_segments+0xf0>)
 801189c:	4817      	ldr	r0, [pc, #92]	; (80118fc <tcp_free_acked_segments+0xe8>)
 801189e:	f005 fdbf 	bl	8017420 <iprintf>
  while (seg_list != NULL &&
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d020      	beq.n	80118ea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7fb f92b 	bl	800cb0a <lwip_htonl>
 80118b4:	4604      	mov	r4, r0
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	891b      	ldrh	r3, [r3, #8]
 80118ba:	461d      	mov	r5, r3
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	899b      	ldrh	r3, [r3, #12]
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fb f90b 	bl	800cae0 <lwip_htons>
 80118ca:	4603      	mov	r3, r0
 80118cc:	b2db      	uxtb	r3, r3
 80118ce:	f003 0303 	and.w	r3, r3, #3
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d001      	beq.n	80118da <tcp_free_acked_segments+0xc6>
 80118d6:	2301      	movs	r3, #1
 80118d8:	e000      	b.n	80118dc <tcp_free_acked_segments+0xc8>
 80118da:	2300      	movs	r3, #0
 80118dc:	442b      	add	r3, r5
 80118de:	18e2      	adds	r2, r4, r3
 80118e0:	4b09      	ldr	r3, [pc, #36]	; (8011908 <tcp_free_acked_segments+0xf4>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	dd9c      	ble.n	8011824 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80118ea:	68bb      	ldr	r3, [r7, #8]
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3718      	adds	r7, #24
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bdb0      	pop	{r4, r5, r7, pc}
 80118f4:	0801aee4 	.word	0x0801aee4
 80118f8:	0801b1cc 	.word	0x0801b1cc
 80118fc:	0801af30 	.word	0x0801af30
 8011900:	20001a34 	.word	0x20001a34
 8011904:	0801b1f4 	.word	0x0801b1f4
 8011908:	20001a30 	.word	0x20001a30

0801190c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801190c:	b5b0      	push	{r4, r5, r7, lr}
 801190e:	b094      	sub	sp, #80	; 0x50
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011914:	2300      	movs	r3, #0
 8011916:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d106      	bne.n	801192c <tcp_receive+0x20>
 801191e:	4ba6      	ldr	r3, [pc, #664]	; (8011bb8 <tcp_receive+0x2ac>)
 8011920:	f240 427b 	movw	r2, #1147	; 0x47b
 8011924:	49a5      	ldr	r1, [pc, #660]	; (8011bbc <tcp_receive+0x2b0>)
 8011926:	48a6      	ldr	r0, [pc, #664]	; (8011bc0 <tcp_receive+0x2b4>)
 8011928:	f005 fd7a 	bl	8017420 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	7d1b      	ldrb	r3, [r3, #20]
 8011930:	2b03      	cmp	r3, #3
 8011932:	d806      	bhi.n	8011942 <tcp_receive+0x36>
 8011934:	4ba0      	ldr	r3, [pc, #640]	; (8011bb8 <tcp_receive+0x2ac>)
 8011936:	f240 427c 	movw	r2, #1148	; 0x47c
 801193a:	49a2      	ldr	r1, [pc, #648]	; (8011bc4 <tcp_receive+0x2b8>)
 801193c:	48a0      	ldr	r0, [pc, #640]	; (8011bc0 <tcp_receive+0x2b4>)
 801193e:	f005 fd6f 	bl	8017420 <iprintf>

  if (flags & TCP_ACK) {
 8011942:	4ba1      	ldr	r3, [pc, #644]	; (8011bc8 <tcp_receive+0x2bc>)
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	f003 0310 	and.w	r3, r3, #16
 801194a:	2b00      	cmp	r3, #0
 801194c:	f000 8263 	beq.w	8011e16 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011956:	461a      	mov	r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801195c:	4413      	add	r3, r2
 801195e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011964:	4b99      	ldr	r3, [pc, #612]	; (8011bcc <tcp_receive+0x2c0>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	1ad3      	subs	r3, r2, r3
 801196a:	2b00      	cmp	r3, #0
 801196c:	db1b      	blt.n	80119a6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011972:	4b96      	ldr	r3, [pc, #600]	; (8011bcc <tcp_receive+0x2c0>)
 8011974:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011976:	429a      	cmp	r2, r3
 8011978:	d106      	bne.n	8011988 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801197e:	4b94      	ldr	r3, [pc, #592]	; (8011bd0 <tcp_receive+0x2c4>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	2b00      	cmp	r3, #0
 8011986:	db0e      	blt.n	80119a6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801198c:	4b90      	ldr	r3, [pc, #576]	; (8011bd0 <tcp_receive+0x2c4>)
 801198e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011990:	429a      	cmp	r2, r3
 8011992:	d125      	bne.n	80119e0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011994:	4b8f      	ldr	r3, [pc, #572]	; (8011bd4 <tcp_receive+0x2c8>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	89db      	ldrh	r3, [r3, #14]
 801199a:	b29a      	uxth	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d91c      	bls.n	80119e0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80119a6:	4b8b      	ldr	r3, [pc, #556]	; (8011bd4 <tcp_receive+0x2c8>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	89db      	ldrh	r3, [r3, #14]
 80119ac:	b29a      	uxth	r2, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d205      	bcs.n	80119d0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80119d0:	4b7e      	ldr	r3, [pc, #504]	; (8011bcc <tcp_receive+0x2c0>)
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80119d8:	4b7d      	ldr	r3, [pc, #500]	; (8011bd0 <tcp_receive+0x2c4>)
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80119e0:	4b7b      	ldr	r3, [pc, #492]	; (8011bd0 <tcp_receive+0x2c4>)
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119e8:	1ad3      	subs	r3, r2, r3
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	dc58      	bgt.n	8011aa0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80119ee:	4b7a      	ldr	r3, [pc, #488]	; (8011bd8 <tcp_receive+0x2cc>)
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d14b      	bne.n	8011a8e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011a00:	4413      	add	r3, r2
 8011a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d142      	bne.n	8011a8e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	db3d      	blt.n	8011a8e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a16:	4b6e      	ldr	r3, [pc, #440]	; (8011bd0 <tcp_receive+0x2c4>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d137      	bne.n	8011a8e <tcp_receive+0x182>
              found_dupack = 1;
 8011a1e:	2301      	movs	r3, #1
 8011a20:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011a28:	2bff      	cmp	r3, #255	; 0xff
 8011a2a:	d007      	beq.n	8011a3c <tcp_receive+0x130>
                ++pcb->dupacks;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011a32:	3301      	adds	r3, #1
 8011a34:	b2da      	uxtb	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011a42:	2b03      	cmp	r3, #3
 8011a44:	d91b      	bls.n	8011a7e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a50:	4413      	add	r3, r2
 8011a52:	b29a      	uxth	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d30a      	bcc.n	8011a74 <tcp_receive+0x168>
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a68:	4413      	add	r3, r2
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a72:	e004      	b.n	8011a7e <tcp_receive+0x172>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011a84:	2b02      	cmp	r3, #2
 8011a86:	d902      	bls.n	8011a8e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f002 fb41 	bl	8014110 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	f040 8160 	bne.w	8011d56 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011a9e:	e15a      	b.n	8011d56 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011aa0:	4b4b      	ldr	r3, [pc, #300]	; (8011bd0 <tcp_receive+0x2c4>)
 8011aa2:	681a      	ldr	r2, [r3, #0]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aa8:	1ad3      	subs	r3, r2, r3
 8011aaa:	3b01      	subs	r3, #1
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	f2c0 814d 	blt.w	8011d4c <tcp_receive+0x440>
 8011ab2:	4b47      	ldr	r3, [pc, #284]	; (8011bd0 <tcp_receive+0x2c4>)
 8011ab4:	681a      	ldr	r2, [r3, #0]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aba:	1ad3      	subs	r3, r2, r3
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f300 8145 	bgt.w	8011d4c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	8b5b      	ldrh	r3, [r3, #26]
 8011ac6:	f003 0304 	and.w	r3, r3, #4
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d010      	beq.n	8011af0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	8b5b      	ldrh	r3, [r3, #26]
 8011ad2:	f023 0304 	bic.w	r3, r3, #4
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2200      	movs	r2, #0
 8011aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011afe:	10db      	asrs	r3, r3, #3
 8011b00:	b21b      	sxth	r3, r3
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	4413      	add	r3, r2
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	b21a      	sxth	r2, r3
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011b18:	4b2d      	ldr	r3, [pc, #180]	; (8011bd0 <tcp_receive+0x2c4>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	b29a      	uxth	r2, r3
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011b30:	4b27      	ldr	r3, [pc, #156]	; (8011bd0 <tcp_receive+0x2c4>)
 8011b32:	681a      	ldr	r2, [r3, #0]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	7d1b      	ldrb	r3, [r3, #20]
 8011b3c:	2b03      	cmp	r3, #3
 8011b3e:	f240 8096 	bls.w	8011c6e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d244      	bcs.n	8011bdc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	8b5b      	ldrh	r3, [r3, #26]
 8011b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d001      	beq.n	8011b62 <tcp_receive+0x256>
 8011b5e:	2301      	movs	r3, #1
 8011b60:	e000      	b.n	8011b64 <tcp_receive+0x258>
 8011b62:	2302      	movs	r3, #2
 8011b64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011b68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b72:	fb12 f303 	smulbb	r3, r2, r3
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	bf28      	it	cs
 8011b7e:	4613      	movcs	r3, r2
 8011b80:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011b8a:	4413      	add	r3, r2
 8011b8c:	b29a      	uxth	r2, r3
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d309      	bcc.n	8011bac <tcp_receive+0x2a0>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011ba0:	4413      	add	r3, r2
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011baa:	e060      	b.n	8011c6e <tcp_receive+0x362>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011bb6:	e05a      	b.n	8011c6e <tcp_receive+0x362>
 8011bb8:	0801aee4 	.word	0x0801aee4
 8011bbc:	0801b214 	.word	0x0801b214
 8011bc0:	0801af30 	.word	0x0801af30
 8011bc4:	0801b230 	.word	0x0801b230
 8011bc8:	20001a38 	.word	0x20001a38
 8011bcc:	20001a2c 	.word	0x20001a2c
 8011bd0:	20001a30 	.word	0x20001a30
 8011bd4:	20001a1c 	.word	0x20001a1c
 8011bd8:	20001a36 	.word	0x20001a36
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011be2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011be4:	4413      	add	r3, r2
 8011be6:	b29a      	uxth	r2, r3
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d309      	bcc.n	8011c06 <tcp_receive+0x2fa>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011bf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011bfa:	4413      	add	r3, r2
 8011bfc:	b29a      	uxth	r2, r3
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011c04:	e004      	b.n	8011c10 <tcp_receive+0x304>
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d326      	bcc.n	8011c6e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011c2c:	1ad3      	subs	r3, r2, r3
 8011c2e:	b29a      	uxth	r2, r3
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c40:	4413      	add	r3, r2
 8011c42:	b29a      	uxth	r2, r3
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d30a      	bcc.n	8011c64 <tcp_receive+0x358>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c58:	4413      	add	r3, r2
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011c62:	e004      	b.n	8011c6e <tcp_receive+0x362>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c76:	4a98      	ldr	r2, [pc, #608]	; (8011ed8 <tcp_receive+0x5cc>)
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f7ff fdcb 	bl	8011814 <tcp_free_acked_segments>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c8c:	4a93      	ldr	r2, [pc, #588]	; (8011edc <tcp_receive+0x5d0>)
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f7ff fdc0 	bl	8011814 <tcp_free_acked_segments>
 8011c94:	4602      	mov	r2, r0
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d104      	bne.n	8011cac <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ca8:	861a      	strh	r2, [r3, #48]	; 0x30
 8011caa:	e002      	b.n	8011cb2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d103      	bne.n	8011cc8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011cce:	4b84      	ldr	r3, [pc, #528]	; (8011ee0 <tcp_receive+0x5d4>)
 8011cd0:	881b      	ldrh	r3, [r3, #0]
 8011cd2:	4413      	add	r3, r2
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	8b5b      	ldrh	r3, [r3, #26]
 8011ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d035      	beq.n	8011d54 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d118      	bne.n	8011d22 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d00c      	beq.n	8011d12 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7fa ff00 	bl	800cb0a <lwip_htonl>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	dc20      	bgt.n	8011d54 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	8b5b      	ldrh	r3, [r3, #26]
 8011d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011d1a:	b29a      	uxth	r2, r3
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011d20:	e018      	b.n	8011d54 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7fa feeb 	bl	800cb0a <lwip_htonl>
 8011d34:	4603      	mov	r3, r0
 8011d36:	1ae3      	subs	r3, r4, r3
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	dc0b      	bgt.n	8011d54 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	8b5b      	ldrh	r3, [r3, #26]
 8011d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011d4a:	e003      	b.n	8011d54 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f002 fbcd 	bl	80144ec <tcp_send_empty_ack>
 8011d52:	e000      	b.n	8011d56 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011d54:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d05b      	beq.n	8011e16 <tcp_receive+0x50a>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d62:	4b60      	ldr	r3, [pc, #384]	; (8011ee4 <tcp_receive+0x5d8>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	1ad3      	subs	r3, r2, r3
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	da54      	bge.n	8011e16 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011d6c:	4b5e      	ldr	r3, [pc, #376]	; (8011ee8 <tcp_receive+0x5dc>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	b29a      	uxth	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	1ad3      	subs	r3, r2, r3
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011d80:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011d8a:	10db      	asrs	r3, r3, #3
 8011d8c:	b21b      	sxth	r3, r3
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011d9e:	b29a      	uxth	r2, r3
 8011da0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011da4:	4413      	add	r3, r2
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	b21a      	sxth	r2, r3
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011dae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	da05      	bge.n	8011dc2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011db6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011dba:	425b      	negs	r3, r3
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011dc2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011dcc:	109b      	asrs	r3, r3, #2
 8011dce:	b21b      	sxth	r3, r3
 8011dd0:	b29b      	uxth	r3, r3
 8011dd2:	1ad3      	subs	r3, r2, r3
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011de0:	b29a      	uxth	r2, r3
 8011de2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011de6:	4413      	add	r3, r2
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	b21a      	sxth	r2, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011df6:	10db      	asrs	r3, r3, #3
 8011df8:	b21b      	sxth	r3, r3
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	4413      	add	r3, r2
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	b21a      	sxth	r2, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011e16:	4b35      	ldr	r3, [pc, #212]	; (8011eec <tcp_receive+0x5e0>)
 8011e18:	881b      	ldrh	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f000 84e1 	beq.w	80127e2 <tcp_receive+0xed6>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	7d1b      	ldrb	r3, [r3, #20]
 8011e24:	2b06      	cmp	r3, #6
 8011e26:	f200 84dc 	bhi.w	80127e2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e2e:	4b30      	ldr	r3, [pc, #192]	; (8011ef0 <tcp_receive+0x5e4>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	1ad3      	subs	r3, r2, r3
 8011e34:	3b01      	subs	r3, #1
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	f2c0 808e 	blt.w	8011f58 <tcp_receive+0x64c>
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e40:	4b2a      	ldr	r3, [pc, #168]	; (8011eec <tcp_receive+0x5e0>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	4619      	mov	r1, r3
 8011e46:	4b2a      	ldr	r3, [pc, #168]	; (8011ef0 <tcp_receive+0x5e4>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	440b      	add	r3, r1
 8011e4c:	1ad3      	subs	r3, r2, r3
 8011e4e:	3301      	adds	r3, #1
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	f300 8081 	bgt.w	8011f58 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011e56:	4b27      	ldr	r3, [pc, #156]	; (8011ef4 <tcp_receive+0x5e8>)
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e60:	4b23      	ldr	r3, [pc, #140]	; (8011ef0 <tcp_receive+0x5e4>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	1ad3      	subs	r3, r2, r3
 8011e66:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011e68:	4b22      	ldr	r3, [pc, #136]	; (8011ef4 <tcp_receive+0x5e8>)
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d106      	bne.n	8011e7e <tcp_receive+0x572>
 8011e70:	4b21      	ldr	r3, [pc, #132]	; (8011ef8 <tcp_receive+0x5ec>)
 8011e72:	f240 5294 	movw	r2, #1428	; 0x594
 8011e76:	4921      	ldr	r1, [pc, #132]	; (8011efc <tcp_receive+0x5f0>)
 8011e78:	4821      	ldr	r0, [pc, #132]	; (8011f00 <tcp_receive+0x5f4>)
 8011e7a:	f005 fad1 	bl	8017420 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011e84:	4293      	cmp	r3, r2
 8011e86:	d906      	bls.n	8011e96 <tcp_receive+0x58a>
 8011e88:	4b1b      	ldr	r3, [pc, #108]	; (8011ef8 <tcp_receive+0x5ec>)
 8011e8a:	f240 5295 	movw	r2, #1429	; 0x595
 8011e8e:	491d      	ldr	r1, [pc, #116]	; (8011f04 <tcp_receive+0x5f8>)
 8011e90:	481b      	ldr	r0, [pc, #108]	; (8011f00 <tcp_receive+0x5f4>)
 8011e92:	f005 fac5 	bl	8017420 <iprintf>
      off = (u16_t)off32;
 8011e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011e9c:	4b15      	ldr	r3, [pc, #84]	; (8011ef4 <tcp_receive+0x5e8>)
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	891b      	ldrh	r3, [r3, #8]
 8011ea2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d906      	bls.n	8011eb8 <tcp_receive+0x5ac>
 8011eaa:	4b13      	ldr	r3, [pc, #76]	; (8011ef8 <tcp_receive+0x5ec>)
 8011eac:	f240 5297 	movw	r2, #1431	; 0x597
 8011eb0:	4915      	ldr	r1, [pc, #84]	; (8011f08 <tcp_receive+0x5fc>)
 8011eb2:	4813      	ldr	r0, [pc, #76]	; (8011f00 <tcp_receive+0x5f4>)
 8011eb4:	f005 fab4 	bl	8017420 <iprintf>
      inseg.len -= off;
 8011eb8:	4b0e      	ldr	r3, [pc, #56]	; (8011ef4 <tcp_receive+0x5e8>)
 8011eba:	891a      	ldrh	r2, [r3, #8]
 8011ebc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ec0:	1ad3      	subs	r3, r2, r3
 8011ec2:	b29a      	uxth	r2, r3
 8011ec4:	4b0b      	ldr	r3, [pc, #44]	; (8011ef4 <tcp_receive+0x5e8>)
 8011ec6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011ec8:	4b0a      	ldr	r3, [pc, #40]	; (8011ef4 <tcp_receive+0x5e8>)
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	891a      	ldrh	r2, [r3, #8]
 8011ece:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ed2:	1ad3      	subs	r3, r2, r3
 8011ed4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011ed6:	e029      	b.n	8011f2c <tcp_receive+0x620>
 8011ed8:	0801b24c 	.word	0x0801b24c
 8011edc:	0801b254 	.word	0x0801b254
 8011ee0:	20001a34 	.word	0x20001a34
 8011ee4:	20001a30 	.word	0x20001a30
 8011ee8:	20011834 	.word	0x20011834
 8011eec:	20001a36 	.word	0x20001a36
 8011ef0:	20001a2c 	.word	0x20001a2c
 8011ef4:	20001a0c 	.word	0x20001a0c
 8011ef8:	0801aee4 	.word	0x0801aee4
 8011efc:	0801b25c 	.word	0x0801b25c
 8011f00:	0801af30 	.word	0x0801af30
 8011f04:	0801b26c 	.word	0x0801b26c
 8011f08:	0801b27c 	.word	0x0801b27c
        off -= p->len;
 8011f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f0e:	895b      	ldrh	r3, [r3, #10]
 8011f10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f14:	1ad3      	subs	r3, r2, r3
 8011f16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011f1e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f22:	2200      	movs	r2, #0
 8011f24:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f2e:	895b      	ldrh	r3, [r3, #10]
 8011f30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d8e9      	bhi.n	8011f0c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011f38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011f40:	f7fc f8da 	bl	800e0f8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f48:	4a91      	ldr	r2, [pc, #580]	; (8012190 <tcp_receive+0x884>)
 8011f4a:	6013      	str	r3, [r2, #0]
 8011f4c:	4b91      	ldr	r3, [pc, #580]	; (8012194 <tcp_receive+0x888>)
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	4a8f      	ldr	r2, [pc, #572]	; (8012190 <tcp_receive+0x884>)
 8011f52:	6812      	ldr	r2, [r2, #0]
 8011f54:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011f56:	e00d      	b.n	8011f74 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011f58:	4b8d      	ldr	r3, [pc, #564]	; (8012190 <tcp_receive+0x884>)
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	da06      	bge.n	8011f74 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	8b5b      	ldrh	r3, [r3, #26]
 8011f6a:	f043 0302 	orr.w	r3, r3, #2
 8011f6e:	b29a      	uxth	r2, r3
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011f74:	4b86      	ldr	r3, [pc, #536]	; (8012190 <tcp_receive+0x884>)
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7c:	1ad3      	subs	r3, r2, r3
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	f2c0 842a 	blt.w	80127d8 <tcp_receive+0xecc>
 8011f84:	4b82      	ldr	r3, [pc, #520]	; (8012190 <tcp_receive+0x884>)
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f8c:	6879      	ldr	r1, [r7, #4]
 8011f8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011f90:	440b      	add	r3, r1
 8011f92:	1ad3      	subs	r3, r2, r3
 8011f94:	3301      	adds	r3, #1
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f300 841e 	bgt.w	80127d8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fa0:	4b7b      	ldr	r3, [pc, #492]	; (8012190 <tcp_receive+0x884>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	f040 829a 	bne.w	80124de <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011faa:	4b7a      	ldr	r3, [pc, #488]	; (8012194 <tcp_receive+0x888>)
 8011fac:	891c      	ldrh	r4, [r3, #8]
 8011fae:	4b79      	ldr	r3, [pc, #484]	; (8012194 <tcp_receive+0x888>)
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	899b      	ldrh	r3, [r3, #12]
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7fa fd92 	bl	800cae0 <lwip_htons>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	f003 0303 	and.w	r3, r3, #3
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d001      	beq.n	8011fcc <tcp_receive+0x6c0>
 8011fc8:	2301      	movs	r3, #1
 8011fca:	e000      	b.n	8011fce <tcp_receive+0x6c2>
 8011fcc:	2300      	movs	r3, #0
 8011fce:	4423      	add	r3, r4
 8011fd0:	b29a      	uxth	r2, r3
 8011fd2:	4b71      	ldr	r3, [pc, #452]	; (8012198 <tcp_receive+0x88c>)
 8011fd4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011fda:	4b6f      	ldr	r3, [pc, #444]	; (8012198 <tcp_receive+0x88c>)
 8011fdc:	881b      	ldrh	r3, [r3, #0]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d275      	bcs.n	80120ce <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011fe2:	4b6c      	ldr	r3, [pc, #432]	; (8012194 <tcp_receive+0x888>)
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	899b      	ldrh	r3, [r3, #12]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7fa fd78 	bl	800cae0 <lwip_htons>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	f003 0301 	and.w	r3, r3, #1
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d01f      	beq.n	801203c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011ffc:	4b65      	ldr	r3, [pc, #404]	; (8012194 <tcp_receive+0x888>)
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	899b      	ldrh	r3, [r3, #12]
 8012002:	b29b      	uxth	r3, r3
 8012004:	b21b      	sxth	r3, r3
 8012006:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801200a:	b21c      	sxth	r4, r3
 801200c:	4b61      	ldr	r3, [pc, #388]	; (8012194 <tcp_receive+0x888>)
 801200e:	68db      	ldr	r3, [r3, #12]
 8012010:	899b      	ldrh	r3, [r3, #12]
 8012012:	b29b      	uxth	r3, r3
 8012014:	4618      	mov	r0, r3
 8012016:	f7fa fd63 	bl	800cae0 <lwip_htons>
 801201a:	4603      	mov	r3, r0
 801201c:	b2db      	uxtb	r3, r3
 801201e:	b29b      	uxth	r3, r3
 8012020:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012024:	b29b      	uxth	r3, r3
 8012026:	4618      	mov	r0, r3
 8012028:	f7fa fd5a 	bl	800cae0 <lwip_htons>
 801202c:	4603      	mov	r3, r0
 801202e:	b21b      	sxth	r3, r3
 8012030:	4323      	orrs	r3, r4
 8012032:	b21a      	sxth	r2, r3
 8012034:	4b57      	ldr	r3, [pc, #348]	; (8012194 <tcp_receive+0x888>)
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	b292      	uxth	r2, r2
 801203a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012040:	4b54      	ldr	r3, [pc, #336]	; (8012194 <tcp_receive+0x888>)
 8012042:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012044:	4b53      	ldr	r3, [pc, #332]	; (8012194 <tcp_receive+0x888>)
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	899b      	ldrh	r3, [r3, #12]
 801204a:	b29b      	uxth	r3, r3
 801204c:	4618      	mov	r0, r3
 801204e:	f7fa fd47 	bl	800cae0 <lwip_htons>
 8012052:	4603      	mov	r3, r0
 8012054:	b2db      	uxtb	r3, r3
 8012056:	f003 0302 	and.w	r3, r3, #2
 801205a:	2b00      	cmp	r3, #0
 801205c:	d005      	beq.n	801206a <tcp_receive+0x75e>
            inseg.len -= 1;
 801205e:	4b4d      	ldr	r3, [pc, #308]	; (8012194 <tcp_receive+0x888>)
 8012060:	891b      	ldrh	r3, [r3, #8]
 8012062:	3b01      	subs	r3, #1
 8012064:	b29a      	uxth	r2, r3
 8012066:	4b4b      	ldr	r3, [pc, #300]	; (8012194 <tcp_receive+0x888>)
 8012068:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801206a:	4b4a      	ldr	r3, [pc, #296]	; (8012194 <tcp_receive+0x888>)
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	4a49      	ldr	r2, [pc, #292]	; (8012194 <tcp_receive+0x888>)
 8012070:	8912      	ldrh	r2, [r2, #8]
 8012072:	4611      	mov	r1, r2
 8012074:	4618      	mov	r0, r3
 8012076:	f7fb ff3f 	bl	800def8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801207a:	4b46      	ldr	r3, [pc, #280]	; (8012194 <tcp_receive+0x888>)
 801207c:	891c      	ldrh	r4, [r3, #8]
 801207e:	4b45      	ldr	r3, [pc, #276]	; (8012194 <tcp_receive+0x888>)
 8012080:	68db      	ldr	r3, [r3, #12]
 8012082:	899b      	ldrh	r3, [r3, #12]
 8012084:	b29b      	uxth	r3, r3
 8012086:	4618      	mov	r0, r3
 8012088:	f7fa fd2a 	bl	800cae0 <lwip_htons>
 801208c:	4603      	mov	r3, r0
 801208e:	b2db      	uxtb	r3, r3
 8012090:	f003 0303 	and.w	r3, r3, #3
 8012094:	2b00      	cmp	r3, #0
 8012096:	d001      	beq.n	801209c <tcp_receive+0x790>
 8012098:	2301      	movs	r3, #1
 801209a:	e000      	b.n	801209e <tcp_receive+0x792>
 801209c:	2300      	movs	r3, #0
 801209e:	4423      	add	r3, r4
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	4b3d      	ldr	r3, [pc, #244]	; (8012198 <tcp_receive+0x88c>)
 80120a4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80120a6:	4b3c      	ldr	r3, [pc, #240]	; (8012198 <tcp_receive+0x88c>)
 80120a8:	881b      	ldrh	r3, [r3, #0]
 80120aa:	461a      	mov	r2, r3
 80120ac:	4b38      	ldr	r3, [pc, #224]	; (8012190 <tcp_receive+0x884>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	441a      	add	r2, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b6:	6879      	ldr	r1, [r7, #4]
 80120b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80120ba:	440b      	add	r3, r1
 80120bc:	429a      	cmp	r2, r3
 80120be:	d006      	beq.n	80120ce <tcp_receive+0x7c2>
 80120c0:	4b36      	ldr	r3, [pc, #216]	; (801219c <tcp_receive+0x890>)
 80120c2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80120c6:	4936      	ldr	r1, [pc, #216]	; (80121a0 <tcp_receive+0x894>)
 80120c8:	4836      	ldr	r0, [pc, #216]	; (80121a4 <tcp_receive+0x898>)
 80120ca:	f005 f9a9 	bl	8017420 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	f000 80e7 	beq.w	80122a6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80120d8:	4b2e      	ldr	r3, [pc, #184]	; (8012194 <tcp_receive+0x888>)
 80120da:	68db      	ldr	r3, [r3, #12]
 80120dc:	899b      	ldrh	r3, [r3, #12]
 80120de:	b29b      	uxth	r3, r3
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7fa fcfd 	bl	800cae0 <lwip_htons>
 80120e6:	4603      	mov	r3, r0
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	f003 0301 	and.w	r3, r3, #1
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d010      	beq.n	8012114 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80120f2:	e00a      	b.n	801210a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120f8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012104:	68f8      	ldr	r0, [r7, #12]
 8012106:	f7fd fcaa 	bl	800fa5e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801210e:	2b00      	cmp	r3, #0
 8012110:	d1f0      	bne.n	80120f4 <tcp_receive+0x7e8>
 8012112:	e0c8      	b.n	80122a6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012118:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801211a:	e052      	b.n	80121c2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801211c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801211e:	68db      	ldr	r3, [r3, #12]
 8012120:	899b      	ldrh	r3, [r3, #12]
 8012122:	b29b      	uxth	r3, r3
 8012124:	4618      	mov	r0, r3
 8012126:	f7fa fcdb 	bl	800cae0 <lwip_htons>
 801212a:	4603      	mov	r3, r0
 801212c:	b2db      	uxtb	r3, r3
 801212e:	f003 0301 	and.w	r3, r3, #1
 8012132:	2b00      	cmp	r3, #0
 8012134:	d03d      	beq.n	80121b2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012136:	4b17      	ldr	r3, [pc, #92]	; (8012194 <tcp_receive+0x888>)
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	899b      	ldrh	r3, [r3, #12]
 801213c:	b29b      	uxth	r3, r3
 801213e:	4618      	mov	r0, r3
 8012140:	f7fa fcce 	bl	800cae0 <lwip_htons>
 8012144:	4603      	mov	r3, r0
 8012146:	b2db      	uxtb	r3, r3
 8012148:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801214c:	2b00      	cmp	r3, #0
 801214e:	d130      	bne.n	80121b2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012150:	4b10      	ldr	r3, [pc, #64]	; (8012194 <tcp_receive+0x888>)
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	899b      	ldrh	r3, [r3, #12]
 8012156:	b29c      	uxth	r4, r3
 8012158:	2001      	movs	r0, #1
 801215a:	f7fa fcc1 	bl	800cae0 <lwip_htons>
 801215e:	4603      	mov	r3, r0
 8012160:	461a      	mov	r2, r3
 8012162:	4b0c      	ldr	r3, [pc, #48]	; (8012194 <tcp_receive+0x888>)
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	4322      	orrs	r2, r4
 8012168:	b292      	uxth	r2, r2
 801216a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801216c:	4b09      	ldr	r3, [pc, #36]	; (8012194 <tcp_receive+0x888>)
 801216e:	891c      	ldrh	r4, [r3, #8]
 8012170:	4b08      	ldr	r3, [pc, #32]	; (8012194 <tcp_receive+0x888>)
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	899b      	ldrh	r3, [r3, #12]
 8012176:	b29b      	uxth	r3, r3
 8012178:	4618      	mov	r0, r3
 801217a:	f7fa fcb1 	bl	800cae0 <lwip_htons>
 801217e:	4603      	mov	r3, r0
 8012180:	b2db      	uxtb	r3, r3
 8012182:	f003 0303 	and.w	r3, r3, #3
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00e      	beq.n	80121a8 <tcp_receive+0x89c>
 801218a:	2301      	movs	r3, #1
 801218c:	e00d      	b.n	80121aa <tcp_receive+0x89e>
 801218e:	bf00      	nop
 8012190:	20001a2c 	.word	0x20001a2c
 8012194:	20001a0c 	.word	0x20001a0c
 8012198:	20001a36 	.word	0x20001a36
 801219c:	0801aee4 	.word	0x0801aee4
 80121a0:	0801b28c 	.word	0x0801b28c
 80121a4:	0801af30 	.word	0x0801af30
 80121a8:	2300      	movs	r3, #0
 80121aa:	4423      	add	r3, r4
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	4b98      	ldr	r3, [pc, #608]	; (8012410 <tcp_receive+0xb04>)
 80121b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80121b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80121b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80121bc:	6938      	ldr	r0, [r7, #16]
 80121be:	f7fd fc4e 	bl	800fa5e <tcp_seg_free>
            while (next &&
 80121c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d00e      	beq.n	80121e6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80121c8:	4b91      	ldr	r3, [pc, #580]	; (8012410 <tcp_receive+0xb04>)
 80121ca:	881b      	ldrh	r3, [r3, #0]
 80121cc:	461a      	mov	r2, r3
 80121ce:	4b91      	ldr	r3, [pc, #580]	; (8012414 <tcp_receive+0xb08>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	441a      	add	r2, r3
 80121d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80121dc:	8909      	ldrh	r1, [r1, #8]
 80121de:	440b      	add	r3, r1
 80121e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	da9a      	bge.n	801211c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80121e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d059      	beq.n	80122a0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80121ec:	4b88      	ldr	r3, [pc, #544]	; (8012410 <tcp_receive+0xb04>)
 80121ee:	881b      	ldrh	r3, [r3, #0]
 80121f0:	461a      	mov	r2, r3
 80121f2:	4b88      	ldr	r3, [pc, #544]	; (8012414 <tcp_receive+0xb08>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	441a      	add	r2, r3
 80121f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121fa:	68db      	ldr	r3, [r3, #12]
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012200:	2b00      	cmp	r3, #0
 8012202:	dd4d      	ble.n	80122a0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	b29a      	uxth	r2, r3
 801220c:	4b81      	ldr	r3, [pc, #516]	; (8012414 <tcp_receive+0xb08>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	b29b      	uxth	r3, r3
 8012212:	1ad3      	subs	r3, r2, r3
 8012214:	b29a      	uxth	r2, r3
 8012216:	4b80      	ldr	r3, [pc, #512]	; (8012418 <tcp_receive+0xb0c>)
 8012218:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801221a:	4b7f      	ldr	r3, [pc, #508]	; (8012418 <tcp_receive+0xb0c>)
 801221c:	68db      	ldr	r3, [r3, #12]
 801221e:	899b      	ldrh	r3, [r3, #12]
 8012220:	b29b      	uxth	r3, r3
 8012222:	4618      	mov	r0, r3
 8012224:	f7fa fc5c 	bl	800cae0 <lwip_htons>
 8012228:	4603      	mov	r3, r0
 801222a:	b2db      	uxtb	r3, r3
 801222c:	f003 0302 	and.w	r3, r3, #2
 8012230:	2b00      	cmp	r3, #0
 8012232:	d005      	beq.n	8012240 <tcp_receive+0x934>
                inseg.len -= 1;
 8012234:	4b78      	ldr	r3, [pc, #480]	; (8012418 <tcp_receive+0xb0c>)
 8012236:	891b      	ldrh	r3, [r3, #8]
 8012238:	3b01      	subs	r3, #1
 801223a:	b29a      	uxth	r2, r3
 801223c:	4b76      	ldr	r3, [pc, #472]	; (8012418 <tcp_receive+0xb0c>)
 801223e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012240:	4b75      	ldr	r3, [pc, #468]	; (8012418 <tcp_receive+0xb0c>)
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	4a74      	ldr	r2, [pc, #464]	; (8012418 <tcp_receive+0xb0c>)
 8012246:	8912      	ldrh	r2, [r2, #8]
 8012248:	4611      	mov	r1, r2
 801224a:	4618      	mov	r0, r3
 801224c:	f7fb fe54 	bl	800def8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012250:	4b71      	ldr	r3, [pc, #452]	; (8012418 <tcp_receive+0xb0c>)
 8012252:	891c      	ldrh	r4, [r3, #8]
 8012254:	4b70      	ldr	r3, [pc, #448]	; (8012418 <tcp_receive+0xb0c>)
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	899b      	ldrh	r3, [r3, #12]
 801225a:	b29b      	uxth	r3, r3
 801225c:	4618      	mov	r0, r3
 801225e:	f7fa fc3f 	bl	800cae0 <lwip_htons>
 8012262:	4603      	mov	r3, r0
 8012264:	b2db      	uxtb	r3, r3
 8012266:	f003 0303 	and.w	r3, r3, #3
 801226a:	2b00      	cmp	r3, #0
 801226c:	d001      	beq.n	8012272 <tcp_receive+0x966>
 801226e:	2301      	movs	r3, #1
 8012270:	e000      	b.n	8012274 <tcp_receive+0x968>
 8012272:	2300      	movs	r3, #0
 8012274:	4423      	add	r3, r4
 8012276:	b29a      	uxth	r2, r3
 8012278:	4b65      	ldr	r3, [pc, #404]	; (8012410 <tcp_receive+0xb04>)
 801227a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801227c:	4b64      	ldr	r3, [pc, #400]	; (8012410 <tcp_receive+0xb04>)
 801227e:	881b      	ldrh	r3, [r3, #0]
 8012280:	461a      	mov	r2, r3
 8012282:	4b64      	ldr	r3, [pc, #400]	; (8012414 <tcp_receive+0xb08>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	441a      	add	r2, r3
 8012288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801228a:	68db      	ldr	r3, [r3, #12]
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	429a      	cmp	r2, r3
 8012290:	d006      	beq.n	80122a0 <tcp_receive+0x994>
 8012292:	4b62      	ldr	r3, [pc, #392]	; (801241c <tcp_receive+0xb10>)
 8012294:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012298:	4961      	ldr	r1, [pc, #388]	; (8012420 <tcp_receive+0xb14>)
 801229a:	4862      	ldr	r0, [pc, #392]	; (8012424 <tcp_receive+0xb18>)
 801229c:	f005 f8c0 	bl	8017420 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122a4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80122a6:	4b5a      	ldr	r3, [pc, #360]	; (8012410 <tcp_receive+0xb04>)
 80122a8:	881b      	ldrh	r3, [r3, #0]
 80122aa:	461a      	mov	r2, r3
 80122ac:	4b59      	ldr	r3, [pc, #356]	; (8012414 <tcp_receive+0xb08>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	441a      	add	r2, r3
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80122ba:	4b55      	ldr	r3, [pc, #340]	; (8012410 <tcp_receive+0xb04>)
 80122bc:	881b      	ldrh	r3, [r3, #0]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d206      	bcs.n	80122d0 <tcp_receive+0x9c4>
 80122c2:	4b56      	ldr	r3, [pc, #344]	; (801241c <tcp_receive+0xb10>)
 80122c4:	f240 6207 	movw	r2, #1543	; 0x607
 80122c8:	4957      	ldr	r1, [pc, #348]	; (8012428 <tcp_receive+0xb1c>)
 80122ca:	4856      	ldr	r0, [pc, #344]	; (8012424 <tcp_receive+0xb18>)
 80122cc:	f005 f8a8 	bl	8017420 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80122d4:	4b4e      	ldr	r3, [pc, #312]	; (8012410 <tcp_receive+0xb04>)
 80122d6:	881b      	ldrh	r3, [r3, #0]
 80122d8:	1ad3      	subs	r3, r2, r3
 80122da:	b29a      	uxth	r2, r3
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7fc fe97 	bl	800f014 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80122e6:	4b4c      	ldr	r3, [pc, #304]	; (8012418 <tcp_receive+0xb0c>)
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	891b      	ldrh	r3, [r3, #8]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d006      	beq.n	80122fe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80122f0:	4b49      	ldr	r3, [pc, #292]	; (8012418 <tcp_receive+0xb0c>)
 80122f2:	685b      	ldr	r3, [r3, #4]
 80122f4:	4a4d      	ldr	r2, [pc, #308]	; (801242c <tcp_receive+0xb20>)
 80122f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80122f8:	4b47      	ldr	r3, [pc, #284]	; (8012418 <tcp_receive+0xb0c>)
 80122fa:	2200      	movs	r2, #0
 80122fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80122fe:	4b46      	ldr	r3, [pc, #280]	; (8012418 <tcp_receive+0xb0c>)
 8012300:	68db      	ldr	r3, [r3, #12]
 8012302:	899b      	ldrh	r3, [r3, #12]
 8012304:	b29b      	uxth	r3, r3
 8012306:	4618      	mov	r0, r3
 8012308:	f7fa fbea 	bl	800cae0 <lwip_htons>
 801230c:	4603      	mov	r3, r0
 801230e:	b2db      	uxtb	r3, r3
 8012310:	f003 0301 	and.w	r3, r3, #1
 8012314:	2b00      	cmp	r3, #0
 8012316:	f000 80b8 	beq.w	801248a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801231a:	4b45      	ldr	r3, [pc, #276]	; (8012430 <tcp_receive+0xb24>)
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	f043 0320 	orr.w	r3, r3, #32
 8012322:	b2da      	uxtb	r2, r3
 8012324:	4b42      	ldr	r3, [pc, #264]	; (8012430 <tcp_receive+0xb24>)
 8012326:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012328:	e0af      	b.n	801248a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801232e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012334:	68db      	ldr	r3, [r3, #12]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	4a36      	ldr	r2, [pc, #216]	; (8012414 <tcp_receive+0xb08>)
 801233a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	891b      	ldrh	r3, [r3, #8]
 8012340:	461c      	mov	r4, r3
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	899b      	ldrh	r3, [r3, #12]
 8012348:	b29b      	uxth	r3, r3
 801234a:	4618      	mov	r0, r3
 801234c:	f7fa fbc8 	bl	800cae0 <lwip_htons>
 8012350:	4603      	mov	r3, r0
 8012352:	b2db      	uxtb	r3, r3
 8012354:	f003 0303 	and.w	r3, r3, #3
 8012358:	2b00      	cmp	r3, #0
 801235a:	d001      	beq.n	8012360 <tcp_receive+0xa54>
 801235c:	2301      	movs	r3, #1
 801235e:	e000      	b.n	8012362 <tcp_receive+0xa56>
 8012360:	2300      	movs	r3, #0
 8012362:	191a      	adds	r2, r3, r4
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012368:	441a      	add	r2, r3
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012372:	461c      	mov	r4, r3
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	891b      	ldrh	r3, [r3, #8]
 8012378:	461d      	mov	r5, r3
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	899b      	ldrh	r3, [r3, #12]
 8012380:	b29b      	uxth	r3, r3
 8012382:	4618      	mov	r0, r3
 8012384:	f7fa fbac 	bl	800cae0 <lwip_htons>
 8012388:	4603      	mov	r3, r0
 801238a:	b2db      	uxtb	r3, r3
 801238c:	f003 0303 	and.w	r3, r3, #3
 8012390:	2b00      	cmp	r3, #0
 8012392:	d001      	beq.n	8012398 <tcp_receive+0xa8c>
 8012394:	2301      	movs	r3, #1
 8012396:	e000      	b.n	801239a <tcp_receive+0xa8e>
 8012398:	2300      	movs	r3, #0
 801239a:	442b      	add	r3, r5
 801239c:	429c      	cmp	r4, r3
 801239e:	d206      	bcs.n	80123ae <tcp_receive+0xaa2>
 80123a0:	4b1e      	ldr	r3, [pc, #120]	; (801241c <tcp_receive+0xb10>)
 80123a2:	f240 622b 	movw	r2, #1579	; 0x62b
 80123a6:	4923      	ldr	r1, [pc, #140]	; (8012434 <tcp_receive+0xb28>)
 80123a8:	481e      	ldr	r0, [pc, #120]	; (8012424 <tcp_receive+0xb18>)
 80123aa:	f005 f839 	bl	8017420 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	891b      	ldrh	r3, [r3, #8]
 80123b2:	461c      	mov	r4, r3
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	68db      	ldr	r3, [r3, #12]
 80123b8:	899b      	ldrh	r3, [r3, #12]
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fa fb8f 	bl	800cae0 <lwip_htons>
 80123c2:	4603      	mov	r3, r0
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	f003 0303 	and.w	r3, r3, #3
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d001      	beq.n	80123d2 <tcp_receive+0xac6>
 80123ce:	2301      	movs	r3, #1
 80123d0:	e000      	b.n	80123d4 <tcp_receive+0xac8>
 80123d2:	2300      	movs	r3, #0
 80123d4:	1919      	adds	r1, r3, r4
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123da:	b28b      	uxth	r3, r1
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	b29a      	uxth	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f7fc fe15 	bl	800f014 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	891b      	ldrh	r3, [r3, #8]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d028      	beq.n	8012446 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80123f4:	4b0d      	ldr	r3, [pc, #52]	; (801242c <tcp_receive+0xb20>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d01d      	beq.n	8012438 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80123fc:	4b0b      	ldr	r3, [pc, #44]	; (801242c <tcp_receive+0xb20>)
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	4619      	mov	r1, r3
 8012406:	4610      	mov	r0, r2
 8012408:	f7fb ffbe 	bl	800e388 <pbuf_cat>
 801240c:	e018      	b.n	8012440 <tcp_receive+0xb34>
 801240e:	bf00      	nop
 8012410:	20001a36 	.word	0x20001a36
 8012414:	20001a2c 	.word	0x20001a2c
 8012418:	20001a0c 	.word	0x20001a0c
 801241c:	0801aee4 	.word	0x0801aee4
 8012420:	0801b2c4 	.word	0x0801b2c4
 8012424:	0801af30 	.word	0x0801af30
 8012428:	0801b300 	.word	0x0801b300
 801242c:	20001a3c 	.word	0x20001a3c
 8012430:	20001a39 	.word	0x20001a39
 8012434:	0801b320 	.word	0x0801b320
            } else {
              recv_data = cseg->p;
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	685b      	ldr	r3, [r3, #4]
 801243c:	4a70      	ldr	r2, [pc, #448]	; (8012600 <tcp_receive+0xcf4>)
 801243e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	2200      	movs	r2, #0
 8012444:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	68db      	ldr	r3, [r3, #12]
 801244a:	899b      	ldrh	r3, [r3, #12]
 801244c:	b29b      	uxth	r3, r3
 801244e:	4618      	mov	r0, r3
 8012450:	f7fa fb46 	bl	800cae0 <lwip_htons>
 8012454:	4603      	mov	r3, r0
 8012456:	b2db      	uxtb	r3, r3
 8012458:	f003 0301 	and.w	r3, r3, #1
 801245c:	2b00      	cmp	r3, #0
 801245e:	d00d      	beq.n	801247c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012460:	4b68      	ldr	r3, [pc, #416]	; (8012604 <tcp_receive+0xcf8>)
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	f043 0320 	orr.w	r3, r3, #32
 8012468:	b2da      	uxtb	r2, r3
 801246a:	4b66      	ldr	r3, [pc, #408]	; (8012604 <tcp_receive+0xcf8>)
 801246c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	7d1b      	ldrb	r3, [r3, #20]
 8012472:	2b04      	cmp	r3, #4
 8012474:	d102      	bne.n	801247c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2207      	movs	r2, #7
 801247a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	681a      	ldr	r2, [r3, #0]
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012484:	68b8      	ldr	r0, [r7, #8]
 8012486:	f7fd faea 	bl	800fa5e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801248e:	2b00      	cmp	r3, #0
 8012490:	d008      	beq.n	80124a4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	685a      	ldr	r2, [r3, #4]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801249e:	429a      	cmp	r2, r3
 80124a0:	f43f af43 	beq.w	801232a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	8b5b      	ldrh	r3, [r3, #26]
 80124a8:	f003 0301 	and.w	r3, r3, #1
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00e      	beq.n	80124ce <tcp_receive+0xbc2>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	8b5b      	ldrh	r3, [r3, #26]
 80124b4:	f023 0301 	bic.w	r3, r3, #1
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	835a      	strh	r2, [r3, #26]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	8b5b      	ldrh	r3, [r3, #26]
 80124c2:	f043 0302 	orr.w	r3, r3, #2
 80124c6:	b29a      	uxth	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80124cc:	e188      	b.n	80127e0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	8b5b      	ldrh	r3, [r3, #26]
 80124d2:	f043 0301 	orr.w	r3, r3, #1
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80124dc:	e180      	b.n	80127e0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d106      	bne.n	80124f4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80124e6:	4848      	ldr	r0, [pc, #288]	; (8012608 <tcp_receive+0xcfc>)
 80124e8:	f7fd faf0 	bl	800facc <tcp_seg_copy>
 80124ec:	4602      	mov	r2, r0
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	675a      	str	r2, [r3, #116]	; 0x74
 80124f2:	e16d      	b.n	80127d0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80124f4:	2300      	movs	r3, #0
 80124f6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80124fe:	e157      	b.n	80127b0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	685a      	ldr	r2, [r3, #4]
 8012506:	4b41      	ldr	r3, [pc, #260]	; (801260c <tcp_receive+0xd00>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	429a      	cmp	r2, r3
 801250c:	d11d      	bne.n	801254a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801250e:	4b3e      	ldr	r3, [pc, #248]	; (8012608 <tcp_receive+0xcfc>)
 8012510:	891a      	ldrh	r2, [r3, #8]
 8012512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012514:	891b      	ldrh	r3, [r3, #8]
 8012516:	429a      	cmp	r2, r3
 8012518:	f240 814f 	bls.w	80127ba <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801251c:	483a      	ldr	r0, [pc, #232]	; (8012608 <tcp_receive+0xcfc>)
 801251e:	f7fd fad5 	bl	800facc <tcp_seg_copy>
 8012522:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	2b00      	cmp	r3, #0
 8012528:	f000 8149 	beq.w	80127be <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801252c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801252e:	2b00      	cmp	r3, #0
 8012530:	d003      	beq.n	801253a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012534:	697a      	ldr	r2, [r7, #20]
 8012536:	601a      	str	r2, [r3, #0]
 8012538:	e002      	b.n	8012540 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	697a      	ldr	r2, [r7, #20]
 801253e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012540:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012542:	6978      	ldr	r0, [r7, #20]
 8012544:	f7ff f8de 	bl	8011704 <tcp_oos_insert_segment>
                }
                break;
 8012548:	e139      	b.n	80127be <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801254c:	2b00      	cmp	r3, #0
 801254e:	d117      	bne.n	8012580 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012550:	4b2e      	ldr	r3, [pc, #184]	; (801260c <tcp_receive+0xd00>)
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012556:	68db      	ldr	r3, [r3, #12]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	1ad3      	subs	r3, r2, r3
 801255c:	2b00      	cmp	r3, #0
 801255e:	da57      	bge.n	8012610 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012560:	4829      	ldr	r0, [pc, #164]	; (8012608 <tcp_receive+0xcfc>)
 8012562:	f7fd fab3 	bl	800facc <tcp_seg_copy>
 8012566:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	2b00      	cmp	r3, #0
 801256c:	f000 8129 	beq.w	80127c2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	69ba      	ldr	r2, [r7, #24]
 8012574:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012576:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012578:	69b8      	ldr	r0, [r7, #24]
 801257a:	f7ff f8c3 	bl	8011704 <tcp_oos_insert_segment>
                  }
                  break;
 801257e:	e120      	b.n	80127c2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012580:	4b22      	ldr	r3, [pc, #136]	; (801260c <tcp_receive+0xd00>)
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	1ad3      	subs	r3, r2, r3
 801258c:	3b01      	subs	r3, #1
 801258e:	2b00      	cmp	r3, #0
 8012590:	db3e      	blt.n	8012610 <tcp_receive+0xd04>
 8012592:	4b1e      	ldr	r3, [pc, #120]	; (801260c <tcp_receive+0xd00>)
 8012594:	681a      	ldr	r2, [r3, #0]
 8012596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	3301      	adds	r3, #1
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	dc35      	bgt.n	8012610 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80125a4:	4818      	ldr	r0, [pc, #96]	; (8012608 <tcp_receive+0xcfc>)
 80125a6:	f7fd fa91 	bl	800facc <tcp_seg_copy>
 80125aa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	f000 8109 	beq.w	80127c6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80125b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125bc:	8912      	ldrh	r2, [r2, #8]
 80125be:	441a      	add	r2, r3
 80125c0:	4b12      	ldr	r3, [pc, #72]	; (801260c <tcp_receive+0xd00>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	1ad3      	subs	r3, r2, r3
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	dd12      	ble.n	80125f0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80125ca:	4b10      	ldr	r3, [pc, #64]	; (801260c <tcp_receive+0xd00>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	b29a      	uxth	r2, r3
 80125d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	1ad3      	subs	r3, r2, r3
 80125da:	b29a      	uxth	r2, r3
 80125dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125de:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80125e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125e2:	685a      	ldr	r2, [r3, #4]
 80125e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125e6:	891b      	ldrh	r3, [r3, #8]
 80125e8:	4619      	mov	r1, r3
 80125ea:	4610      	mov	r0, r2
 80125ec:	f7fb fc84 	bl	800def8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80125f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125f2:	69fa      	ldr	r2, [r7, #28]
 80125f4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80125f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80125f8:	69f8      	ldr	r0, [r7, #28]
 80125fa:	f7ff f883 	bl	8011704 <tcp_oos_insert_segment>
                  }
                  break;
 80125fe:	e0e2      	b.n	80127c6 <tcp_receive+0xeba>
 8012600:	20001a3c 	.word	0x20001a3c
 8012604:	20001a39 	.word	0x20001a39
 8012608:	20001a0c 	.word	0x20001a0c
 801260c:	20001a2c 	.word	0x20001a2c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012612:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	f040 80c6 	bne.w	80127aa <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801261e:	4b80      	ldr	r3, [pc, #512]	; (8012820 <tcp_receive+0xf14>)
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012624:	68db      	ldr	r3, [r3, #12]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801262a:	2b00      	cmp	r3, #0
 801262c:	f340 80bd 	ble.w	80127aa <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	899b      	ldrh	r3, [r3, #12]
 8012636:	b29b      	uxth	r3, r3
 8012638:	4618      	mov	r0, r3
 801263a:	f7fa fa51 	bl	800cae0 <lwip_htons>
 801263e:	4603      	mov	r3, r0
 8012640:	b2db      	uxtb	r3, r3
 8012642:	f003 0301 	and.w	r3, r3, #1
 8012646:	2b00      	cmp	r3, #0
 8012648:	f040 80bf 	bne.w	80127ca <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801264c:	4875      	ldr	r0, [pc, #468]	; (8012824 <tcp_receive+0xf18>)
 801264e:	f7fd fa3d 	bl	800facc <tcp_seg_copy>
 8012652:	4602      	mov	r2, r0
 8012654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012656:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	f000 80b6 	beq.w	80127ce <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012664:	68db      	ldr	r3, [r3, #12]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801266a:	8912      	ldrh	r2, [r2, #8]
 801266c:	441a      	add	r2, r3
 801266e:	4b6c      	ldr	r3, [pc, #432]	; (8012820 <tcp_receive+0xf14>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	1ad3      	subs	r3, r2, r3
 8012674:	2b00      	cmp	r3, #0
 8012676:	dd12      	ble.n	801269e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012678:	4b69      	ldr	r3, [pc, #420]	; (8012820 <tcp_receive+0xf14>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	b29a      	uxth	r2, r3
 801267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012680:	68db      	ldr	r3, [r3, #12]
 8012682:	685b      	ldr	r3, [r3, #4]
 8012684:	b29b      	uxth	r3, r3
 8012686:	1ad3      	subs	r3, r2, r3
 8012688:	b29a      	uxth	r2, r3
 801268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012690:	685a      	ldr	r2, [r3, #4]
 8012692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012694:	891b      	ldrh	r3, [r3, #8]
 8012696:	4619      	mov	r1, r3
 8012698:	4610      	mov	r0, r2
 801269a:	f7fb fc2d 	bl	800def8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801269e:	4b62      	ldr	r3, [pc, #392]	; (8012828 <tcp_receive+0xf1c>)
 80126a0:	881b      	ldrh	r3, [r3, #0]
 80126a2:	461a      	mov	r2, r3
 80126a4:	4b5e      	ldr	r3, [pc, #376]	; (8012820 <tcp_receive+0xf14>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	441a      	add	r2, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ae:	6879      	ldr	r1, [r7, #4]
 80126b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80126b2:	440b      	add	r3, r1
 80126b4:	1ad3      	subs	r3, r2, r3
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f340 8089 	ble.w	80127ce <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80126bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	899b      	ldrh	r3, [r3, #12]
 80126c4:	b29b      	uxth	r3, r3
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fa fa0a 	bl	800cae0 <lwip_htons>
 80126cc:	4603      	mov	r3, r0
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	f003 0301 	and.w	r3, r3, #1
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d022      	beq.n	801271e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80126d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	899b      	ldrh	r3, [r3, #12]
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	b21b      	sxth	r3, r3
 80126e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80126e8:	b21c      	sxth	r4, r3
 80126ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	899b      	ldrh	r3, [r3, #12]
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7fa f9f3 	bl	800cae0 <lwip_htons>
 80126fa:	4603      	mov	r3, r0
 80126fc:	b2db      	uxtb	r3, r3
 80126fe:	b29b      	uxth	r3, r3
 8012700:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012704:	b29b      	uxth	r3, r3
 8012706:	4618      	mov	r0, r3
 8012708:	f7fa f9ea 	bl	800cae0 <lwip_htons>
 801270c:	4603      	mov	r3, r0
 801270e:	b21b      	sxth	r3, r3
 8012710:	4323      	orrs	r3, r4
 8012712:	b21a      	sxth	r2, r3
 8012714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	68db      	ldr	r3, [r3, #12]
 801271a:	b292      	uxth	r2, r2
 801271c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012722:	b29a      	uxth	r2, r3
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012728:	4413      	add	r3, r2
 801272a:	b299      	uxth	r1, r3
 801272c:	4b3c      	ldr	r3, [pc, #240]	; (8012820 <tcp_receive+0xf14>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	b29a      	uxth	r2, r3
 8012732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	1a8a      	subs	r2, r1, r2
 8012738:	b292      	uxth	r2, r2
 801273a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	685a      	ldr	r2, [r3, #4]
 8012742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	891b      	ldrh	r3, [r3, #8]
 8012748:	4619      	mov	r1, r3
 801274a:	4610      	mov	r0, r2
 801274c:	f7fb fbd4 	bl	800def8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	891c      	ldrh	r4, [r3, #8]
 8012756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	899b      	ldrh	r3, [r3, #12]
 801275e:	b29b      	uxth	r3, r3
 8012760:	4618      	mov	r0, r3
 8012762:	f7fa f9bd 	bl	800cae0 <lwip_htons>
 8012766:	4603      	mov	r3, r0
 8012768:	b2db      	uxtb	r3, r3
 801276a:	f003 0303 	and.w	r3, r3, #3
 801276e:	2b00      	cmp	r3, #0
 8012770:	d001      	beq.n	8012776 <tcp_receive+0xe6a>
 8012772:	2301      	movs	r3, #1
 8012774:	e000      	b.n	8012778 <tcp_receive+0xe6c>
 8012776:	2300      	movs	r3, #0
 8012778:	4423      	add	r3, r4
 801277a:	b29a      	uxth	r2, r3
 801277c:	4b2a      	ldr	r3, [pc, #168]	; (8012828 <tcp_receive+0xf1c>)
 801277e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012780:	4b29      	ldr	r3, [pc, #164]	; (8012828 <tcp_receive+0xf1c>)
 8012782:	881b      	ldrh	r3, [r3, #0]
 8012784:	461a      	mov	r2, r3
 8012786:	4b26      	ldr	r3, [pc, #152]	; (8012820 <tcp_receive+0xf14>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	441a      	add	r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012790:	6879      	ldr	r1, [r7, #4]
 8012792:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012794:	440b      	add	r3, r1
 8012796:	429a      	cmp	r2, r3
 8012798:	d019      	beq.n	80127ce <tcp_receive+0xec2>
 801279a:	4b24      	ldr	r3, [pc, #144]	; (801282c <tcp_receive+0xf20>)
 801279c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80127a0:	4923      	ldr	r1, [pc, #140]	; (8012830 <tcp_receive+0xf24>)
 80127a2:	4824      	ldr	r0, [pc, #144]	; (8012834 <tcp_receive+0xf28>)
 80127a4:	f004 fe3c 	bl	8017420 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80127a8:	e011      	b.n	80127ce <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80127aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80127b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f47f aea4 	bne.w	8012500 <tcp_receive+0xbf4>
 80127b8:	e00a      	b.n	80127d0 <tcp_receive+0xec4>
                break;
 80127ba:	bf00      	nop
 80127bc:	e008      	b.n	80127d0 <tcp_receive+0xec4>
                break;
 80127be:	bf00      	nop
 80127c0:	e006      	b.n	80127d0 <tcp_receive+0xec4>
                  break;
 80127c2:	bf00      	nop
 80127c4:	e004      	b.n	80127d0 <tcp_receive+0xec4>
                  break;
 80127c6:	bf00      	nop
 80127c8:	e002      	b.n	80127d0 <tcp_receive+0xec4>
                  break;
 80127ca:	bf00      	nop
 80127cc:	e000      	b.n	80127d0 <tcp_receive+0xec4>
                break;
 80127ce:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f001 fe8b 	bl	80144ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80127d6:	e003      	b.n	80127e0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f001 fe87 	bl	80144ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80127de:	e01a      	b.n	8012816 <tcp_receive+0xf0a>
 80127e0:	e019      	b.n	8012816 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80127e2:	4b0f      	ldr	r3, [pc, #60]	; (8012820 <tcp_receive+0xf14>)
 80127e4:	681a      	ldr	r2, [r3, #0]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	db0a      	blt.n	8012806 <tcp_receive+0xefa>
 80127f0:	4b0b      	ldr	r3, [pc, #44]	; (8012820 <tcp_receive+0xf14>)
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f8:	6879      	ldr	r1, [r7, #4]
 80127fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80127fc:	440b      	add	r3, r1
 80127fe:	1ad3      	subs	r3, r2, r3
 8012800:	3301      	adds	r3, #1
 8012802:	2b00      	cmp	r3, #0
 8012804:	dd07      	ble.n	8012816 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	8b5b      	ldrh	r3, [r3, #26]
 801280a:	f043 0302 	orr.w	r3, r3, #2
 801280e:	b29a      	uxth	r2, r3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012814:	e7ff      	b.n	8012816 <tcp_receive+0xf0a>
 8012816:	bf00      	nop
 8012818:	3750      	adds	r7, #80	; 0x50
 801281a:	46bd      	mov	sp, r7
 801281c:	bdb0      	pop	{r4, r5, r7, pc}
 801281e:	bf00      	nop
 8012820:	20001a2c 	.word	0x20001a2c
 8012824:	20001a0c 	.word	0x20001a0c
 8012828:	20001a36 	.word	0x20001a36
 801282c:	0801aee4 	.word	0x0801aee4
 8012830:	0801b28c 	.word	0x0801b28c
 8012834:	0801af30 	.word	0x0801af30

08012838 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012838:	b480      	push	{r7}
 801283a:	b083      	sub	sp, #12
 801283c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801283e:	4b15      	ldr	r3, [pc, #84]	; (8012894 <tcp_get_next_optbyte+0x5c>)
 8012840:	881b      	ldrh	r3, [r3, #0]
 8012842:	1c5a      	adds	r2, r3, #1
 8012844:	b291      	uxth	r1, r2
 8012846:	4a13      	ldr	r2, [pc, #76]	; (8012894 <tcp_get_next_optbyte+0x5c>)
 8012848:	8011      	strh	r1, [r2, #0]
 801284a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801284c:	4b12      	ldr	r3, [pc, #72]	; (8012898 <tcp_get_next_optbyte+0x60>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d004      	beq.n	801285e <tcp_get_next_optbyte+0x26>
 8012854:	4b11      	ldr	r3, [pc, #68]	; (801289c <tcp_get_next_optbyte+0x64>)
 8012856:	881b      	ldrh	r3, [r3, #0]
 8012858:	88fa      	ldrh	r2, [r7, #6]
 801285a:	429a      	cmp	r2, r3
 801285c:	d208      	bcs.n	8012870 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801285e:	4b10      	ldr	r3, [pc, #64]	; (80128a0 <tcp_get_next_optbyte+0x68>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	3314      	adds	r3, #20
 8012864:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012866:	88fb      	ldrh	r3, [r7, #6]
 8012868:	683a      	ldr	r2, [r7, #0]
 801286a:	4413      	add	r3, r2
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	e00b      	b.n	8012888 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012870:	88fb      	ldrh	r3, [r7, #6]
 8012872:	b2da      	uxtb	r2, r3
 8012874:	4b09      	ldr	r3, [pc, #36]	; (801289c <tcp_get_next_optbyte+0x64>)
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	b2db      	uxtb	r3, r3
 801287a:	1ad3      	subs	r3, r2, r3
 801287c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801287e:	4b06      	ldr	r3, [pc, #24]	; (8012898 <tcp_get_next_optbyte+0x60>)
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	797b      	ldrb	r3, [r7, #5]
 8012884:	4413      	add	r3, r2
 8012886:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012888:	4618      	mov	r0, r3
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr
 8012894:	20001a28 	.word	0x20001a28
 8012898:	20001a24 	.word	0x20001a24
 801289c:	20001a22 	.word	0x20001a22
 80128a0:	20001a1c 	.word	0x20001a1c

080128a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d106      	bne.n	80128c0 <tcp_parseopt+0x1c>
 80128b2:	4b32      	ldr	r3, [pc, #200]	; (801297c <tcp_parseopt+0xd8>)
 80128b4:	f240 727d 	movw	r2, #1917	; 0x77d
 80128b8:	4931      	ldr	r1, [pc, #196]	; (8012980 <tcp_parseopt+0xdc>)
 80128ba:	4832      	ldr	r0, [pc, #200]	; (8012984 <tcp_parseopt+0xe0>)
 80128bc:	f004 fdb0 	bl	8017420 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80128c0:	4b31      	ldr	r3, [pc, #196]	; (8012988 <tcp_parseopt+0xe4>)
 80128c2:	881b      	ldrh	r3, [r3, #0]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d055      	beq.n	8012974 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80128c8:	4b30      	ldr	r3, [pc, #192]	; (801298c <tcp_parseopt+0xe8>)
 80128ca:	2200      	movs	r2, #0
 80128cc:	801a      	strh	r2, [r3, #0]
 80128ce:	e045      	b.n	801295c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80128d0:	f7ff ffb2 	bl	8012838 <tcp_get_next_optbyte>
 80128d4:	4603      	mov	r3, r0
 80128d6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80128d8:	7bfb      	ldrb	r3, [r7, #15]
 80128da:	2b02      	cmp	r3, #2
 80128dc:	d006      	beq.n	80128ec <tcp_parseopt+0x48>
 80128de:	2b02      	cmp	r3, #2
 80128e0:	dc2b      	bgt.n	801293a <tcp_parseopt+0x96>
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d041      	beq.n	801296a <tcp_parseopt+0xc6>
 80128e6:	2b01      	cmp	r3, #1
 80128e8:	d127      	bne.n	801293a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80128ea:	e037      	b.n	801295c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80128ec:	f7ff ffa4 	bl	8012838 <tcp_get_next_optbyte>
 80128f0:	4603      	mov	r3, r0
 80128f2:	2b04      	cmp	r3, #4
 80128f4:	d13b      	bne.n	801296e <tcp_parseopt+0xca>
 80128f6:	4b25      	ldr	r3, [pc, #148]	; (801298c <tcp_parseopt+0xe8>)
 80128f8:	881b      	ldrh	r3, [r3, #0]
 80128fa:	3301      	adds	r3, #1
 80128fc:	4a22      	ldr	r2, [pc, #136]	; (8012988 <tcp_parseopt+0xe4>)
 80128fe:	8812      	ldrh	r2, [r2, #0]
 8012900:	4293      	cmp	r3, r2
 8012902:	da34      	bge.n	801296e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012904:	f7ff ff98 	bl	8012838 <tcp_get_next_optbyte>
 8012908:	4603      	mov	r3, r0
 801290a:	b29b      	uxth	r3, r3
 801290c:	021b      	lsls	r3, r3, #8
 801290e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012910:	f7ff ff92 	bl	8012838 <tcp_get_next_optbyte>
 8012914:	4603      	mov	r3, r0
 8012916:	b29a      	uxth	r2, r3
 8012918:	89bb      	ldrh	r3, [r7, #12]
 801291a:	4313      	orrs	r3, r2
 801291c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801291e:	89bb      	ldrh	r3, [r7, #12]
 8012920:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012924:	d804      	bhi.n	8012930 <tcp_parseopt+0x8c>
 8012926:	89bb      	ldrh	r3, [r7, #12]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d001      	beq.n	8012930 <tcp_parseopt+0x8c>
 801292c:	89ba      	ldrh	r2, [r7, #12]
 801292e:	e001      	b.n	8012934 <tcp_parseopt+0x90>
 8012930:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012938:	e010      	b.n	801295c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801293a:	f7ff ff7d 	bl	8012838 <tcp_get_next_optbyte>
 801293e:	4603      	mov	r3, r0
 8012940:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012942:	7afb      	ldrb	r3, [r7, #11]
 8012944:	2b01      	cmp	r3, #1
 8012946:	d914      	bls.n	8012972 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012948:	7afb      	ldrb	r3, [r7, #11]
 801294a:	b29a      	uxth	r2, r3
 801294c:	4b0f      	ldr	r3, [pc, #60]	; (801298c <tcp_parseopt+0xe8>)
 801294e:	881b      	ldrh	r3, [r3, #0]
 8012950:	4413      	add	r3, r2
 8012952:	b29b      	uxth	r3, r3
 8012954:	3b02      	subs	r3, #2
 8012956:	b29a      	uxth	r2, r3
 8012958:	4b0c      	ldr	r3, [pc, #48]	; (801298c <tcp_parseopt+0xe8>)
 801295a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801295c:	4b0b      	ldr	r3, [pc, #44]	; (801298c <tcp_parseopt+0xe8>)
 801295e:	881a      	ldrh	r2, [r3, #0]
 8012960:	4b09      	ldr	r3, [pc, #36]	; (8012988 <tcp_parseopt+0xe4>)
 8012962:	881b      	ldrh	r3, [r3, #0]
 8012964:	429a      	cmp	r2, r3
 8012966:	d3b3      	bcc.n	80128d0 <tcp_parseopt+0x2c>
 8012968:	e004      	b.n	8012974 <tcp_parseopt+0xd0>
          return;
 801296a:	bf00      	nop
 801296c:	e002      	b.n	8012974 <tcp_parseopt+0xd0>
            return;
 801296e:	bf00      	nop
 8012970:	e000      	b.n	8012974 <tcp_parseopt+0xd0>
            return;
 8012972:	bf00      	nop
      }
    }
  }
}
 8012974:	3710      	adds	r7, #16
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
 801297a:	bf00      	nop
 801297c:	0801aee4 	.word	0x0801aee4
 8012980:	0801b348 	.word	0x0801b348
 8012984:	0801af30 	.word	0x0801af30
 8012988:	20001a20 	.word	0x20001a20
 801298c:	20001a28 	.word	0x20001a28

08012990 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012990:	b480      	push	{r7}
 8012992:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012994:	4b05      	ldr	r3, [pc, #20]	; (80129ac <tcp_trigger_input_pcb_close+0x1c>)
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	f043 0310 	orr.w	r3, r3, #16
 801299c:	b2da      	uxtb	r2, r3
 801299e:	4b03      	ldr	r3, [pc, #12]	; (80129ac <tcp_trigger_input_pcb_close+0x1c>)
 80129a0:	701a      	strb	r2, [r3, #0]
}
 80129a2:	bf00      	nop
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr
 80129ac:	20001a39 	.word	0x20001a39

080129b0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d00a      	beq.n	80129d8 <tcp_route+0x28>
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	7a1b      	ldrb	r3, [r3, #8]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d006      	beq.n	80129d8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	7a1b      	ldrb	r3, [r3, #8]
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7fb f8b8 	bl	800db44 <netif_get_by_index>
 80129d4:	4603      	mov	r3, r0
 80129d6:	e003      	b.n	80129e0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f003 fad5 	bl	8015f88 <ip4_route>
 80129de:	4603      	mov	r3, r0
  }
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80129e8:	b590      	push	{r4, r7, lr}
 80129ea:	b087      	sub	sp, #28
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	603b      	str	r3, [r7, #0]
 80129f4:	4613      	mov	r3, r2
 80129f6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d105      	bne.n	8012a0a <tcp_create_segment+0x22>
 80129fe:	4b44      	ldr	r3, [pc, #272]	; (8012b10 <tcp_create_segment+0x128>)
 8012a00:	22a3      	movs	r2, #163	; 0xa3
 8012a02:	4944      	ldr	r1, [pc, #272]	; (8012b14 <tcp_create_segment+0x12c>)
 8012a04:	4844      	ldr	r0, [pc, #272]	; (8012b18 <tcp_create_segment+0x130>)
 8012a06:	f004 fd0b 	bl	8017420 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d105      	bne.n	8012a1c <tcp_create_segment+0x34>
 8012a10:	4b3f      	ldr	r3, [pc, #252]	; (8012b10 <tcp_create_segment+0x128>)
 8012a12:	22a4      	movs	r2, #164	; 0xa4
 8012a14:	4941      	ldr	r1, [pc, #260]	; (8012b1c <tcp_create_segment+0x134>)
 8012a16:	4840      	ldr	r0, [pc, #256]	; (8012b18 <tcp_create_segment+0x130>)
 8012a18:	f004 fd02 	bl	8017420 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012a1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	b2db      	uxtb	r3, r3
 8012a24:	f003 0304 	and.w	r3, r3, #4
 8012a28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012a2a:	2003      	movs	r0, #3
 8012a2c:	f7fa fd8c 	bl	800d548 <memp_malloc>
 8012a30:	6138      	str	r0, [r7, #16]
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d104      	bne.n	8012a42 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012a38:	68b8      	ldr	r0, [r7, #8]
 8012a3a:	f7fb fbe3 	bl	800e204 <pbuf_free>
    return NULL;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	e061      	b.n	8012b06 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012a48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	68ba      	ldr	r2, [r7, #8]
 8012a54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	891a      	ldrh	r2, [r3, #8]
 8012a5a:	7dfb      	ldrb	r3, [r7, #23]
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d205      	bcs.n	8012a6e <tcp_create_segment+0x86>
 8012a62:	4b2b      	ldr	r3, [pc, #172]	; (8012b10 <tcp_create_segment+0x128>)
 8012a64:	22b0      	movs	r2, #176	; 0xb0
 8012a66:	492e      	ldr	r1, [pc, #184]	; (8012b20 <tcp_create_segment+0x138>)
 8012a68:	482b      	ldr	r0, [pc, #172]	; (8012b18 <tcp_create_segment+0x130>)
 8012a6a:	f004 fcd9 	bl	8017420 <iprintf>
  seg->len = p->tot_len - optlen;
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	891a      	ldrh	r2, [r3, #8]
 8012a72:	7dfb      	ldrb	r3, [r7, #23]
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	1ad3      	subs	r3, r2, r3
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012a7e:	2114      	movs	r1, #20
 8012a80:	68b8      	ldr	r0, [r7, #8]
 8012a82:	f7fb fb29 	bl	800e0d8 <pbuf_add_header>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d004      	beq.n	8012a96 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012a8c:	6938      	ldr	r0, [r7, #16]
 8012a8e:	f7fc ffe6 	bl	800fa5e <tcp_seg_free>
    return NULL;
 8012a92:	2300      	movs	r3, #0
 8012a94:	e037      	b.n	8012b06 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	685a      	ldr	r2, [r3, #4]
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	8ada      	ldrh	r2, [r3, #22]
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	68dc      	ldr	r4, [r3, #12]
 8012aa8:	4610      	mov	r0, r2
 8012aaa:	f7fa f819 	bl	800cae0 <lwip_htons>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	8b1a      	ldrh	r2, [r3, #24]
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	68dc      	ldr	r4, [r3, #12]
 8012aba:	4610      	mov	r0, r2
 8012abc:	f7fa f810 	bl	800cae0 <lwip_htons>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	68dc      	ldr	r4, [r3, #12]
 8012ac8:	6838      	ldr	r0, [r7, #0]
 8012aca:	f7fa f81e 	bl	800cb0a <lwip_htonl>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012ad2:	7dfb      	ldrb	r3, [r7, #23]
 8012ad4:	089b      	lsrs	r3, r3, #2
 8012ad6:	b2db      	uxtb	r3, r3
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	3305      	adds	r3, #5
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	031b      	lsls	r3, r3, #12
 8012ae0:	b29a      	uxth	r2, r3
 8012ae2:	79fb      	ldrb	r3, [r7, #7]
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	b29a      	uxth	r2, r3
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	68dc      	ldr	r4, [r3, #12]
 8012aee:	4610      	mov	r0, r2
 8012af0:	f7f9 fff6 	bl	800cae0 <lwip_htons>
 8012af4:	4603      	mov	r3, r0
 8012af6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	2200      	movs	r2, #0
 8012afe:	749a      	strb	r2, [r3, #18]
 8012b00:	2200      	movs	r2, #0
 8012b02:	74da      	strb	r2, [r3, #19]
  return seg;
 8012b04:	693b      	ldr	r3, [r7, #16]
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	371c      	adds	r7, #28
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bd90      	pop	{r4, r7, pc}
 8012b0e:	bf00      	nop
 8012b10:	0801b364 	.word	0x0801b364
 8012b14:	0801b398 	.word	0x0801b398
 8012b18:	0801b3b8 	.word	0x0801b3b8
 8012b1c:	0801b3e0 	.word	0x0801b3e0
 8012b20:	0801b404 	.word	0x0801b404

08012b24 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b086      	sub	sp, #24
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	607b      	str	r3, [r7, #4]
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	73fb      	strb	r3, [r7, #15]
 8012b30:	460b      	mov	r3, r1
 8012b32:	81bb      	strh	r3, [r7, #12]
 8012b34:	4613      	mov	r3, r2
 8012b36:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012b38:	89bb      	ldrh	r3, [r7, #12]
 8012b3a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d105      	bne.n	8012b4e <tcp_pbuf_prealloc+0x2a>
 8012b42:	4b30      	ldr	r3, [pc, #192]	; (8012c04 <tcp_pbuf_prealloc+0xe0>)
 8012b44:	22e8      	movs	r2, #232	; 0xe8
 8012b46:	4930      	ldr	r1, [pc, #192]	; (8012c08 <tcp_pbuf_prealloc+0xe4>)
 8012b48:	4830      	ldr	r0, [pc, #192]	; (8012c0c <tcp_pbuf_prealloc+0xe8>)
 8012b4a:	f004 fc69 	bl	8017420 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012b4e:	6a3b      	ldr	r3, [r7, #32]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d105      	bne.n	8012b60 <tcp_pbuf_prealloc+0x3c>
 8012b54:	4b2b      	ldr	r3, [pc, #172]	; (8012c04 <tcp_pbuf_prealloc+0xe0>)
 8012b56:	22e9      	movs	r2, #233	; 0xe9
 8012b58:	492d      	ldr	r1, [pc, #180]	; (8012c10 <tcp_pbuf_prealloc+0xec>)
 8012b5a:	482c      	ldr	r0, [pc, #176]	; (8012c0c <tcp_pbuf_prealloc+0xe8>)
 8012b5c:	f004 fc60 	bl	8017420 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012b60:	89ba      	ldrh	r2, [r7, #12]
 8012b62:	897b      	ldrh	r3, [r7, #10]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d221      	bcs.n	8012bac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012b68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012b6c:	f003 0302 	and.w	r3, r3, #2
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d111      	bne.n	8012b98 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012b74:	6a3b      	ldr	r3, [r7, #32]
 8012b76:	8b5b      	ldrh	r3, [r3, #26]
 8012b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d115      	bne.n	8012bac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012b80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d007      	beq.n	8012b98 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012b88:	6a3b      	ldr	r3, [r7, #32]
 8012b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d103      	bne.n	8012b98 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012b90:	6a3b      	ldr	r3, [r7, #32]
 8012b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d009      	beq.n	8012bac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012b98:	89bb      	ldrh	r3, [r7, #12]
 8012b9a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012b9e:	f023 0203 	bic.w	r2, r3, #3
 8012ba2:	897b      	ldrh	r3, [r7, #10]
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	bf28      	it	cs
 8012ba8:	4613      	movcs	r3, r2
 8012baa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012bac:	8af9      	ldrh	r1, [r7, #22]
 8012bae:	7bfb      	ldrb	r3, [r7, #15]
 8012bb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fb f841 	bl	800dc3c <pbuf_alloc>
 8012bba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012bbc:	693b      	ldr	r3, [r7, #16]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d101      	bne.n	8012bc6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	e019      	b.n	8012bfa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012bc6:	693b      	ldr	r3, [r7, #16]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d006      	beq.n	8012bdc <tcp_pbuf_prealloc+0xb8>
 8012bce:	4b0d      	ldr	r3, [pc, #52]	; (8012c04 <tcp_pbuf_prealloc+0xe0>)
 8012bd0:	f240 120b 	movw	r2, #267	; 0x10b
 8012bd4:	490f      	ldr	r1, [pc, #60]	; (8012c14 <tcp_pbuf_prealloc+0xf0>)
 8012bd6:	480d      	ldr	r0, [pc, #52]	; (8012c0c <tcp_pbuf_prealloc+0xe8>)
 8012bd8:	f004 fc22 	bl	8017420 <iprintf>
  *oversize = p->len - length;
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	895a      	ldrh	r2, [r3, #10]
 8012be0:	89bb      	ldrh	r3, [r7, #12]
 8012be2:	1ad3      	subs	r3, r2, r3
 8012be4:	b29a      	uxth	r2, r3
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	89ba      	ldrh	r2, [r7, #12]
 8012bee:	811a      	strh	r2, [r3, #8]
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	891a      	ldrh	r2, [r3, #8]
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	815a      	strh	r2, [r3, #10]
  return p;
 8012bf8:	693b      	ldr	r3, [r7, #16]
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3718      	adds	r7, #24
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	0801b364 	.word	0x0801b364
 8012c08:	0801b41c 	.word	0x0801b41c
 8012c0c:	0801b3b8 	.word	0x0801b3b8
 8012c10:	0801b440 	.word	0x0801b440
 8012c14:	0801b460 	.word	0x0801b460

08012c18 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	460b      	mov	r3, r1
 8012c22:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d106      	bne.n	8012c38 <tcp_write_checks+0x20>
 8012c2a:	4b33      	ldr	r3, [pc, #204]	; (8012cf8 <tcp_write_checks+0xe0>)
 8012c2c:	f240 1233 	movw	r2, #307	; 0x133
 8012c30:	4932      	ldr	r1, [pc, #200]	; (8012cfc <tcp_write_checks+0xe4>)
 8012c32:	4833      	ldr	r0, [pc, #204]	; (8012d00 <tcp_write_checks+0xe8>)
 8012c34:	f004 fbf4 	bl	8017420 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	7d1b      	ldrb	r3, [r3, #20]
 8012c3c:	2b04      	cmp	r3, #4
 8012c3e:	d00e      	beq.n	8012c5e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012c44:	2b07      	cmp	r3, #7
 8012c46:	d00a      	beq.n	8012c5e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012c4c:	2b02      	cmp	r3, #2
 8012c4e:	d006      	beq.n	8012c5e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012c54:	2b03      	cmp	r3, #3
 8012c56:	d002      	beq.n	8012c5e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012c58:	f06f 030a 	mvn.w	r3, #10
 8012c5c:	e048      	b.n	8012cf0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012c5e:	887b      	ldrh	r3, [r7, #2]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d101      	bne.n	8012c68 <tcp_write_checks+0x50>
    return ERR_OK;
 8012c64:	2300      	movs	r3, #0
 8012c66:	e043      	b.n	8012cf0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012c6e:	887a      	ldrh	r2, [r7, #2]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d909      	bls.n	8012c88 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	8b5b      	ldrh	r3, [r3, #26]
 8012c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c7c:	b29a      	uxth	r2, r3
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c86:	e033      	b.n	8012cf0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c8e:	2b08      	cmp	r3, #8
 8012c90:	d909      	bls.n	8012ca6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	8b5b      	ldrh	r3, [r3, #26]
 8012c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ca4:	e024      	b.n	8012cf0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00f      	beq.n	8012cd0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d11a      	bne.n	8012cee <tcp_write_checks+0xd6>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d116      	bne.n	8012cee <tcp_write_checks+0xd6>
 8012cc0:	4b0d      	ldr	r3, [pc, #52]	; (8012cf8 <tcp_write_checks+0xe0>)
 8012cc2:	f240 1255 	movw	r2, #341	; 0x155
 8012cc6:	490f      	ldr	r1, [pc, #60]	; (8012d04 <tcp_write_checks+0xec>)
 8012cc8:	480d      	ldr	r0, [pc, #52]	; (8012d00 <tcp_write_checks+0xe8>)
 8012cca:	f004 fba9 	bl	8017420 <iprintf>
 8012cce:	e00e      	b.n	8012cee <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d103      	bne.n	8012ce0 <tcp_write_checks+0xc8>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d006      	beq.n	8012cee <tcp_write_checks+0xd6>
 8012ce0:	4b05      	ldr	r3, [pc, #20]	; (8012cf8 <tcp_write_checks+0xe0>)
 8012ce2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012ce6:	4908      	ldr	r1, [pc, #32]	; (8012d08 <tcp_write_checks+0xf0>)
 8012ce8:	4805      	ldr	r0, [pc, #20]	; (8012d00 <tcp_write_checks+0xe8>)
 8012cea:	f004 fb99 	bl	8017420 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012cee:	2300      	movs	r3, #0
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3708      	adds	r7, #8
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	0801b364 	.word	0x0801b364
 8012cfc:	0801b474 	.word	0x0801b474
 8012d00:	0801b3b8 	.word	0x0801b3b8
 8012d04:	0801b494 	.word	0x0801b494
 8012d08:	0801b4d0 	.word	0x0801b4d0

08012d0c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012d0c:	b590      	push	{r4, r7, lr}
 8012d0e:	b09b      	sub	sp, #108	; 0x6c
 8012d10:	af04      	add	r7, sp, #16
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	4611      	mov	r1, r2
 8012d18:	461a      	mov	r2, r3
 8012d1a:	460b      	mov	r3, r1
 8012d1c:	80fb      	strh	r3, [r7, #6]
 8012d1e:	4613      	mov	r3, r2
 8012d20:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012d22:	2300      	movs	r3, #0
 8012d24:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012d26:	2300      	movs	r3, #0
 8012d28:	653b      	str	r3, [r7, #80]	; 0x50
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d2e:	2300      	movs	r3, #0
 8012d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d32:	2300      	movs	r3, #0
 8012d34:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012d36:	2300      	movs	r3, #0
 8012d38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012d42:	2300      	movs	r3, #0
 8012d44:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012d46:	2300      	movs	r3, #0
 8012d48:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d109      	bne.n	8012d68 <tcp_write+0x5c>
 8012d54:	4ba4      	ldr	r3, [pc, #656]	; (8012fe8 <tcp_write+0x2dc>)
 8012d56:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012d5a:	49a4      	ldr	r1, [pc, #656]	; (8012fec <tcp_write+0x2e0>)
 8012d5c:	48a4      	ldr	r0, [pc, #656]	; (8012ff0 <tcp_write+0x2e4>)
 8012d5e:	f004 fb5f 	bl	8017420 <iprintf>
 8012d62:	f06f 030f 	mvn.w	r3, #15
 8012d66:	e32a      	b.n	80133be <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012d6e:	085b      	lsrs	r3, r3, #1
 8012d70:	b29a      	uxth	r2, r3
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d76:	4293      	cmp	r3, r2
 8012d78:	bf28      	it	cs
 8012d7a:	4613      	movcs	r3, r2
 8012d7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d102      	bne.n	8012d8a <tcp_write+0x7e>
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d88:	e000      	b.n	8012d8c <tcp_write+0x80>
 8012d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d109      	bne.n	8012da8 <tcp_write+0x9c>
 8012d94:	4b94      	ldr	r3, [pc, #592]	; (8012fe8 <tcp_write+0x2dc>)
 8012d96:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012d9a:	4996      	ldr	r1, [pc, #600]	; (8012ff4 <tcp_write+0x2e8>)
 8012d9c:	4894      	ldr	r0, [pc, #592]	; (8012ff0 <tcp_write+0x2e4>)
 8012d9e:	f004 fb3f 	bl	8017420 <iprintf>
 8012da2:	f06f 030f 	mvn.w	r3, #15
 8012da6:	e30a      	b.n	80133be <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012da8:	88fb      	ldrh	r3, [r7, #6]
 8012daa:	4619      	mov	r1, r3
 8012dac:	68f8      	ldr	r0, [r7, #12]
 8012dae:	f7ff ff33 	bl	8012c18 <tcp_write_checks>
 8012db2:	4603      	mov	r3, r0
 8012db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012db8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d002      	beq.n	8012dc6 <tcp_write+0xba>
    return err;
 8012dc0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012dc4:	e2fb      	b.n	80133be <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012dcc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f000 80f6 	beq.w	8012fcc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012de4:	653b      	str	r3, [r7, #80]	; 0x50
 8012de6:	e002      	b.n	8012dee <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d1f8      	bne.n	8012de8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df8:	7a9b      	ldrb	r3, [r3, #10]
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	f003 0304 	and.w	r3, r3, #4
 8012e02:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012e04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e08:	891b      	ldrh	r3, [r3, #8]
 8012e0a:	4619      	mov	r1, r3
 8012e0c:	8c3b      	ldrh	r3, [r7, #32]
 8012e0e:	440b      	add	r3, r1
 8012e10:	429a      	cmp	r2, r3
 8012e12:	da06      	bge.n	8012e22 <tcp_write+0x116>
 8012e14:	4b74      	ldr	r3, [pc, #464]	; (8012fe8 <tcp_write+0x2dc>)
 8012e16:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012e1a:	4977      	ldr	r1, [pc, #476]	; (8012ff8 <tcp_write+0x2ec>)
 8012e1c:	4874      	ldr	r0, [pc, #464]	; (8012ff0 <tcp_write+0x2e4>)
 8012e1e:	f004 faff 	bl	8017420 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e24:	891a      	ldrh	r2, [r3, #8]
 8012e26:	8c3b      	ldrh	r3, [r7, #32]
 8012e28:	4413      	add	r3, r2
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012e2e:	1ad3      	subs	r3, r2, r3
 8012e30:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012e38:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012e3a:	8a7b      	ldrh	r3, [r7, #18]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d026      	beq.n	8012e8e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012e40:	8a7b      	ldrh	r3, [r7, #18]
 8012e42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d206      	bcs.n	8012e56 <tcp_write+0x14a>
 8012e48:	4b67      	ldr	r3, [pc, #412]	; (8012fe8 <tcp_write+0x2dc>)
 8012e4a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012e4e:	496b      	ldr	r1, [pc, #428]	; (8012ffc <tcp_write+0x2f0>)
 8012e50:	4867      	ldr	r0, [pc, #412]	; (8012ff0 <tcp_write+0x2e4>)
 8012e52:	f004 fae5 	bl	8017420 <iprintf>
      seg = last_unsent;
 8012e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e58:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012e5a:	8a7b      	ldrh	r3, [r7, #18]
 8012e5c:	88fa      	ldrh	r2, [r7, #6]
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	bf28      	it	cs
 8012e62:	4613      	movcs	r3, r2
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	bf28      	it	cs
 8012e6c:	4613      	movcs	r3, r2
 8012e6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012e70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e76:	4413      	add	r3, r2
 8012e78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012e7c:	8a7a      	ldrh	r2, [r7, #18]
 8012e7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e80:	1ad3      	subs	r3, r2, r3
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012e86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e8a:	1ad3      	subs	r3, r2, r3
 8012e8c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012e8e:	8a7b      	ldrh	r3, [r7, #18]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d00b      	beq.n	8012eac <tcp_write+0x1a0>
 8012e94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e98:	88fb      	ldrh	r3, [r7, #6]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d006      	beq.n	8012eac <tcp_write+0x1a0>
 8012e9e:	4b52      	ldr	r3, [pc, #328]	; (8012fe8 <tcp_write+0x2dc>)
 8012ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ea4:	4956      	ldr	r1, [pc, #344]	; (8013000 <tcp_write+0x2f4>)
 8012ea6:	4852      	ldr	r0, [pc, #328]	; (8012ff0 <tcp_write+0x2e4>)
 8012ea8:	f004 faba 	bl	8017420 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012eac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012eb0:	88fb      	ldrh	r3, [r7, #6]
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	f080 8167 	bcs.w	8013186 <tcp_write+0x47a>
 8012eb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f000 8163 	beq.w	8013186 <tcp_write+0x47a>
 8012ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ec2:	891b      	ldrh	r3, [r3, #8]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f000 815e 	beq.w	8013186 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012eca:	88fa      	ldrh	r2, [r7, #6]
 8012ecc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ed0:	1ad2      	subs	r2, r2, r3
 8012ed2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ed4:	4293      	cmp	r3, r2
 8012ed6:	bfa8      	it	ge
 8012ed8:	4613      	movge	r3, r2
 8012eda:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ede:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012ee0:	797b      	ldrb	r3, [r7, #5]
 8012ee2:	f003 0301 	and.w	r3, r3, #1
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d027      	beq.n	8012f3a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012eea:	f107 0012 	add.w	r0, r7, #18
 8012eee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ef0:	8bf9      	ldrh	r1, [r7, #30]
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	9302      	str	r3, [sp, #8]
 8012ef6:	797b      	ldrb	r3, [r7, #5]
 8012ef8:	9301      	str	r3, [sp, #4]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	9300      	str	r3, [sp, #0]
 8012efe:	4603      	mov	r3, r0
 8012f00:	2000      	movs	r0, #0
 8012f02:	f7ff fe0f 	bl	8012b24 <tcp_pbuf_prealloc>
 8012f06:	6578      	str	r0, [r7, #84]	; 0x54
 8012f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	f000 8225 	beq.w	801335a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f12:	6858      	ldr	r0, [r3, #4]
 8012f14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f18:	68ba      	ldr	r2, [r7, #8]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	8bfa      	ldrh	r2, [r7, #30]
 8012f1e:	4619      	mov	r1, r3
 8012f20:	f004 fa4e 	bl	80173c0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012f24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012f26:	f7fb f9f5 	bl	800e314 <pbuf_clen>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	461a      	mov	r2, r3
 8012f2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012f32:	4413      	add	r3, r2
 8012f34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012f38:	e041      	b.n	8012fbe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8012f40:	e002      	b.n	8012f48 <tcp_write+0x23c>
 8012f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	637b      	str	r3, [r7, #52]	; 0x34
 8012f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1f8      	bne.n	8012f42 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f52:	7b1b      	ldrb	r3, [r3, #12]
 8012f54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d115      	bne.n	8012f88 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f62:	8952      	ldrh	r2, [r2, #10]
 8012f64:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012f66:	68ba      	ldr	r2, [r7, #8]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d10d      	bne.n	8012f88 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012f6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d006      	beq.n	8012f82 <tcp_write+0x276>
 8012f74:	4b1c      	ldr	r3, [pc, #112]	; (8012fe8 <tcp_write+0x2dc>)
 8012f76:	f240 2231 	movw	r2, #561	; 0x231
 8012f7a:	4922      	ldr	r1, [pc, #136]	; (8013004 <tcp_write+0x2f8>)
 8012f7c:	481c      	ldr	r0, [pc, #112]	; (8012ff0 <tcp_write+0x2e4>)
 8012f7e:	f004 fa4f 	bl	8017420 <iprintf>
          extendlen = seglen;
 8012f82:	8bfb      	ldrh	r3, [r7, #30]
 8012f84:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012f86:	e01a      	b.n	8012fbe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012f88:	8bfb      	ldrh	r3, [r7, #30]
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	2000      	movs	r0, #0
 8012f90:	f7fa fe54 	bl	800dc3c <pbuf_alloc>
 8012f94:	6578      	str	r0, [r7, #84]	; 0x54
 8012f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	f000 81e0 	beq.w	801335e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012f9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012fa2:	68ba      	ldr	r2, [r7, #8]
 8012fa4:	441a      	add	r2, r3
 8012fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fa8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012faa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012fac:	f7fb f9b2 	bl	800e314 <pbuf_clen>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012fb8:	4413      	add	r3, r2
 8012fba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012fbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012fc2:	8bfb      	ldrh	r3, [r7, #30]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012fca:	e0dc      	b.n	8013186 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	f000 80d7 	beq.w	8013186 <tcp_write+0x47a>
 8012fd8:	4b03      	ldr	r3, [pc, #12]	; (8012fe8 <tcp_write+0x2dc>)
 8012fda:	f240 224a 	movw	r2, #586	; 0x24a
 8012fde:	490a      	ldr	r1, [pc, #40]	; (8013008 <tcp_write+0x2fc>)
 8012fe0:	4803      	ldr	r0, [pc, #12]	; (8012ff0 <tcp_write+0x2e4>)
 8012fe2:	f004 fa1d 	bl	8017420 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012fe6:	e0ce      	b.n	8013186 <tcp_write+0x47a>
 8012fe8:	0801b364 	.word	0x0801b364
 8012fec:	0801b504 	.word	0x0801b504
 8012ff0:	0801b3b8 	.word	0x0801b3b8
 8012ff4:	0801b51c 	.word	0x0801b51c
 8012ff8:	0801b550 	.word	0x0801b550
 8012ffc:	0801b568 	.word	0x0801b568
 8013000:	0801b588 	.word	0x0801b588
 8013004:	0801b5a8 	.word	0x0801b5a8
 8013008:	0801b5d4 	.word	0x0801b5d4
    struct pbuf *p;
    u16_t left = len - pos;
 801300c:	88fa      	ldrh	r2, [r7, #6]
 801300e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013012:	1ad3      	subs	r3, r2, r3
 8013014:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013016:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801301a:	b29b      	uxth	r3, r3
 801301c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801301e:	1ad3      	subs	r3, r2, r3
 8013020:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013022:	8b7a      	ldrh	r2, [r7, #26]
 8013024:	8bbb      	ldrh	r3, [r7, #28]
 8013026:	4293      	cmp	r3, r2
 8013028:	bf28      	it	cs
 801302a:	4613      	movcs	r3, r2
 801302c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801302e:	797b      	ldrb	r3, [r7, #5]
 8013030:	f003 0301 	and.w	r3, r3, #1
 8013034:	2b00      	cmp	r3, #0
 8013036:	d036      	beq.n	80130a6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013038:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801303c:	b29a      	uxth	r2, r3
 801303e:	8b3b      	ldrh	r3, [r7, #24]
 8013040:	4413      	add	r3, r2
 8013042:	b299      	uxth	r1, r3
 8013044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013046:	2b00      	cmp	r3, #0
 8013048:	bf0c      	ite	eq
 801304a:	2301      	moveq	r3, #1
 801304c:	2300      	movne	r3, #0
 801304e:	b2db      	uxtb	r3, r3
 8013050:	f107 0012 	add.w	r0, r7, #18
 8013054:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013056:	9302      	str	r3, [sp, #8]
 8013058:	797b      	ldrb	r3, [r7, #5]
 801305a:	9301      	str	r3, [sp, #4]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	9300      	str	r3, [sp, #0]
 8013060:	4603      	mov	r3, r0
 8013062:	2036      	movs	r0, #54	; 0x36
 8013064:	f7ff fd5e 	bl	8012b24 <tcp_pbuf_prealloc>
 8013068:	6338      	str	r0, [r7, #48]	; 0x30
 801306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306c:	2b00      	cmp	r3, #0
 801306e:	f000 8178 	beq.w	8013362 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013074:	895b      	ldrh	r3, [r3, #10]
 8013076:	8b3a      	ldrh	r2, [r7, #24]
 8013078:	429a      	cmp	r2, r3
 801307a:	d906      	bls.n	801308a <tcp_write+0x37e>
 801307c:	4b8c      	ldr	r3, [pc, #560]	; (80132b0 <tcp_write+0x5a4>)
 801307e:	f240 2266 	movw	r2, #614	; 0x266
 8013082:	498c      	ldr	r1, [pc, #560]	; (80132b4 <tcp_write+0x5a8>)
 8013084:	488c      	ldr	r0, [pc, #560]	; (80132b8 <tcp_write+0x5ac>)
 8013086:	f004 f9cb 	bl	8017420 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801308c:	685a      	ldr	r2, [r3, #4]
 801308e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013092:	18d0      	adds	r0, r2, r3
 8013094:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013098:	68ba      	ldr	r2, [r7, #8]
 801309a:	4413      	add	r3, r2
 801309c:	8b3a      	ldrh	r2, [r7, #24]
 801309e:	4619      	mov	r1, r3
 80130a0:	f004 f98e 	bl	80173c0 <memcpy>
 80130a4:	e02f      	b.n	8013106 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80130a6:	8a7b      	ldrh	r3, [r7, #18]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d006      	beq.n	80130ba <tcp_write+0x3ae>
 80130ac:	4b80      	ldr	r3, [pc, #512]	; (80132b0 <tcp_write+0x5a4>)
 80130ae:	f240 2271 	movw	r2, #625	; 0x271
 80130b2:	4982      	ldr	r1, [pc, #520]	; (80132bc <tcp_write+0x5b0>)
 80130b4:	4880      	ldr	r0, [pc, #512]	; (80132b8 <tcp_write+0x5ac>)
 80130b6:	f004 f9b3 	bl	8017420 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80130ba:	8b3b      	ldrh	r3, [r7, #24]
 80130bc:	2201      	movs	r2, #1
 80130be:	4619      	mov	r1, r3
 80130c0:	2036      	movs	r0, #54	; 0x36
 80130c2:	f7fa fdbb 	bl	800dc3c <pbuf_alloc>
 80130c6:	6178      	str	r0, [r7, #20]
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f000 814b 	beq.w	8013366 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80130d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80130d4:	68ba      	ldr	r2, [r7, #8]
 80130d6:	441a      	add	r2, r3
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80130dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130e6:	4619      	mov	r1, r3
 80130e8:	2036      	movs	r0, #54	; 0x36
 80130ea:	f7fa fda7 	bl	800dc3c <pbuf_alloc>
 80130ee:	6338      	str	r0, [r7, #48]	; 0x30
 80130f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d103      	bne.n	80130fe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80130f6:	6978      	ldr	r0, [r7, #20]
 80130f8:	f7fb f884 	bl	800e204 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80130fc:	e136      	b.n	801336c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80130fe:	6979      	ldr	r1, [r7, #20]
 8013100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013102:	f7fb f941 	bl	800e388 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013108:	f7fb f904 	bl	800e314 <pbuf_clen>
 801310c:	4603      	mov	r3, r0
 801310e:	461a      	mov	r2, r3
 8013110:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013114:	4413      	add	r3, r2
 8013116:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801311a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801311e:	2b09      	cmp	r3, #9
 8013120:	d903      	bls.n	801312a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013124:	f7fb f86e 	bl	800e204 <pbuf_free>
      goto memerr;
 8013128:	e120      	b.n	801336c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801312e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013132:	441a      	add	r2, r3
 8013134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	4613      	mov	r3, r2
 801313c:	2200      	movs	r2, #0
 801313e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013140:	68f8      	ldr	r0, [r7, #12]
 8013142:	f7ff fc51 	bl	80129e8 <tcp_create_segment>
 8013146:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801314a:	2b00      	cmp	r3, #0
 801314c:	f000 810d 	beq.w	801336a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013152:	2b00      	cmp	r3, #0
 8013154:	d102      	bne.n	801315c <tcp_write+0x450>
      queue = seg;
 8013156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013158:	647b      	str	r3, [r7, #68]	; 0x44
 801315a:	e00c      	b.n	8013176 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801315c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801315e:	2b00      	cmp	r3, #0
 8013160:	d106      	bne.n	8013170 <tcp_write+0x464>
 8013162:	4b53      	ldr	r3, [pc, #332]	; (80132b0 <tcp_write+0x5a4>)
 8013164:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013168:	4955      	ldr	r1, [pc, #340]	; (80132c0 <tcp_write+0x5b4>)
 801316a:	4853      	ldr	r0, [pc, #332]	; (80132b8 <tcp_write+0x5ac>)
 801316c:	f004 f958 	bl	8017420 <iprintf>
      prev_seg->next = seg;
 8013170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013174:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013178:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801317a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801317e:	8b3b      	ldrh	r3, [r7, #24]
 8013180:	4413      	add	r3, r2
 8013182:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013186:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801318a:	88fb      	ldrh	r3, [r7, #6]
 801318c:	429a      	cmp	r2, r3
 801318e:	f4ff af3d 	bcc.w	801300c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013192:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013194:	2b00      	cmp	r3, #0
 8013196:	d02c      	beq.n	80131f2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801319e:	e01e      	b.n	80131de <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80131a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a2:	891a      	ldrh	r2, [r3, #8]
 80131a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80131a6:	4413      	add	r3, r2
 80131a8:	b29a      	uxth	r2, r3
 80131aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ac:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80131ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d110      	bne.n	80131d8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80131b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131bc:	8952      	ldrh	r2, [r2, #10]
 80131be:	4413      	add	r3, r2
 80131c0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80131c2:	68b9      	ldr	r1, [r7, #8]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f004 f8fb 	bl	80173c0 <memcpy>
        p->len += oversize_used;
 80131ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131cc:	895a      	ldrh	r2, [r3, #10]
 80131ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80131d0:	4413      	add	r3, r2
 80131d2:	b29a      	uxth	r2, r3
 80131d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80131d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d1dd      	bne.n	80131a0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80131e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131e6:	891a      	ldrh	r2, [r3, #8]
 80131e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80131ea:	4413      	add	r3, r2
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131f0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80131f2:	8a7a      	ldrh	r2, [r7, #18]
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80131fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d018      	beq.n	8013232 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013202:	2b00      	cmp	r3, #0
 8013204:	d106      	bne.n	8013214 <tcp_write+0x508>
 8013206:	4b2a      	ldr	r3, [pc, #168]	; (80132b0 <tcp_write+0x5a4>)
 8013208:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801320c:	492d      	ldr	r1, [pc, #180]	; (80132c4 <tcp_write+0x5b8>)
 801320e:	482a      	ldr	r0, [pc, #168]	; (80132b8 <tcp_write+0x5ac>)
 8013210:	f004 f906 	bl	8017420 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801321a:	4618      	mov	r0, r3
 801321c:	f7fb f8b4 	bl	800e388 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013222:	891a      	ldrh	r2, [r3, #8]
 8013224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013226:	891b      	ldrh	r3, [r3, #8]
 8013228:	4413      	add	r3, r2
 801322a:	b29a      	uxth	r2, r3
 801322c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801322e:	811a      	strh	r2, [r3, #8]
 8013230:	e037      	b.n	80132a2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013232:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013234:	2b00      	cmp	r3, #0
 8013236:	d034      	beq.n	80132a2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801323a:	2b00      	cmp	r3, #0
 801323c:	d003      	beq.n	8013246 <tcp_write+0x53a>
 801323e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013240:	685b      	ldr	r3, [r3, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d106      	bne.n	8013254 <tcp_write+0x548>
 8013246:	4b1a      	ldr	r3, [pc, #104]	; (80132b0 <tcp_write+0x5a4>)
 8013248:	f240 22e6 	movw	r2, #742	; 0x2e6
 801324c:	491e      	ldr	r1, [pc, #120]	; (80132c8 <tcp_write+0x5bc>)
 801324e:	481a      	ldr	r0, [pc, #104]	; (80132b8 <tcp_write+0x5ac>)
 8013250:	f004 f8e6 	bl	8017420 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013256:	685b      	ldr	r3, [r3, #4]
 8013258:	62bb      	str	r3, [r7, #40]	; 0x28
 801325a:	e009      	b.n	8013270 <tcp_write+0x564>
      p->tot_len += extendlen;
 801325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801325e:	891a      	ldrh	r2, [r3, #8]
 8013260:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013262:	4413      	add	r3, r2
 8013264:	b29a      	uxth	r2, r3
 8013266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013268:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d1f1      	bne.n	801325c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801327a:	891a      	ldrh	r2, [r3, #8]
 801327c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801327e:	4413      	add	r3, r2
 8013280:	b29a      	uxth	r2, r3
 8013282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013284:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013288:	895a      	ldrh	r2, [r3, #10]
 801328a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801328c:	4413      	add	r3, r2
 801328e:	b29a      	uxth	r2, r3
 8013290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013292:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013296:	891a      	ldrh	r2, [r3, #8]
 8013298:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801329a:	4413      	add	r3, r2
 801329c:	b29a      	uxth	r2, r3
 801329e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132a0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80132a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d111      	bne.n	80132cc <tcp_write+0x5c0>
    pcb->unsent = queue;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80132ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80132ae:	e010      	b.n	80132d2 <tcp_write+0x5c6>
 80132b0:	0801b364 	.word	0x0801b364
 80132b4:	0801b604 	.word	0x0801b604
 80132b8:	0801b3b8 	.word	0x0801b3b8
 80132bc:	0801b644 	.word	0x0801b644
 80132c0:	0801b654 	.word	0x0801b654
 80132c4:	0801b668 	.word	0x0801b668
 80132c8:	0801b6a0 	.word	0x0801b6a0
  } else {
    last_unsent->next = queue;
 80132cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80132d0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80132d6:	88fb      	ldrh	r3, [r7, #6]
 80132d8:	441a      	add	r2, r3
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80132e4:	88fb      	ldrh	r3, [r7, #6]
 80132e6:	1ad3      	subs	r3, r2, r3
 80132e8:	b29a      	uxth	r2, r3
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80132f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013300:	2b00      	cmp	r3, #0
 8013302:	d00e      	beq.n	8013322 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013308:	2b00      	cmp	r3, #0
 801330a:	d10a      	bne.n	8013322 <tcp_write+0x616>
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013310:	2b00      	cmp	r3, #0
 8013312:	d106      	bne.n	8013322 <tcp_write+0x616>
 8013314:	4b2c      	ldr	r3, [pc, #176]	; (80133c8 <tcp_write+0x6bc>)
 8013316:	f240 3212 	movw	r2, #786	; 0x312
 801331a:	492c      	ldr	r1, [pc, #176]	; (80133cc <tcp_write+0x6c0>)
 801331c:	482c      	ldr	r0, [pc, #176]	; (80133d0 <tcp_write+0x6c4>)
 801331e:	f004 f87f 	bl	8017420 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013324:	2b00      	cmp	r3, #0
 8013326:	d016      	beq.n	8013356 <tcp_write+0x64a>
 8013328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801332a:	68db      	ldr	r3, [r3, #12]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d012      	beq.n	8013356 <tcp_write+0x64a>
 8013330:	797b      	ldrb	r3, [r7, #5]
 8013332:	f003 0302 	and.w	r3, r3, #2
 8013336:	2b00      	cmp	r3, #0
 8013338:	d10d      	bne.n	8013356 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801333a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801333c:	68db      	ldr	r3, [r3, #12]
 801333e:	899b      	ldrh	r3, [r3, #12]
 8013340:	b29c      	uxth	r4, r3
 8013342:	2008      	movs	r0, #8
 8013344:	f7f9 fbcc 	bl	800cae0 <lwip_htons>
 8013348:	4603      	mov	r3, r0
 801334a:	461a      	mov	r2, r3
 801334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801334e:	68db      	ldr	r3, [r3, #12]
 8013350:	4322      	orrs	r2, r4
 8013352:	b292      	uxth	r2, r2
 8013354:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013356:	2300      	movs	r3, #0
 8013358:	e031      	b.n	80133be <tcp_write+0x6b2>
          goto memerr;
 801335a:	bf00      	nop
 801335c:	e006      	b.n	801336c <tcp_write+0x660>
            goto memerr;
 801335e:	bf00      	nop
 8013360:	e004      	b.n	801336c <tcp_write+0x660>
        goto memerr;
 8013362:	bf00      	nop
 8013364:	e002      	b.n	801336c <tcp_write+0x660>
        goto memerr;
 8013366:	bf00      	nop
 8013368:	e000      	b.n	801336c <tcp_write+0x660>
      goto memerr;
 801336a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	8b5b      	ldrh	r3, [r3, #26]
 8013370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013374:	b29a      	uxth	r2, r3
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801337a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801337c:	2b00      	cmp	r3, #0
 801337e:	d002      	beq.n	8013386 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013380:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013382:	f7fa ff3f 	bl	800e204 <pbuf_free>
  }
  if (queue != NULL) {
 8013386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013388:	2b00      	cmp	r3, #0
 801338a:	d002      	beq.n	8013392 <tcp_write+0x686>
    tcp_segs_free(queue);
 801338c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801338e:	f7fc fb51 	bl	800fa34 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013398:	2b00      	cmp	r3, #0
 801339a:	d00e      	beq.n	80133ba <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10a      	bne.n	80133ba <tcp_write+0x6ae>
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d106      	bne.n	80133ba <tcp_write+0x6ae>
 80133ac:	4b06      	ldr	r3, [pc, #24]	; (80133c8 <tcp_write+0x6bc>)
 80133ae:	f240 3227 	movw	r2, #807	; 0x327
 80133b2:	4906      	ldr	r1, [pc, #24]	; (80133cc <tcp_write+0x6c0>)
 80133b4:	4806      	ldr	r0, [pc, #24]	; (80133d0 <tcp_write+0x6c4>)
 80133b6:	f004 f833 	bl	8017420 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80133ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80133be:	4618      	mov	r0, r3
 80133c0:	375c      	adds	r7, #92	; 0x5c
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd90      	pop	{r4, r7, pc}
 80133c6:	bf00      	nop
 80133c8:	0801b364 	.word	0x0801b364
 80133cc:	0801b6d8 	.word	0x0801b6d8
 80133d0:	0801b3b8 	.word	0x0801b3b8

080133d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80133d4:	b590      	push	{r4, r7, lr}
 80133d6:	b08b      	sub	sp, #44	; 0x2c
 80133d8:	af02      	add	r7, sp, #8
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	460b      	mov	r3, r1
 80133de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80133e0:	2300      	movs	r3, #0
 80133e2:	61fb      	str	r3, [r7, #28]
 80133e4:	2300      	movs	r3, #0
 80133e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80133e8:	2300      	movs	r3, #0
 80133ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d106      	bne.n	8013400 <tcp_split_unsent_seg+0x2c>
 80133f2:	4b95      	ldr	r3, [pc, #596]	; (8013648 <tcp_split_unsent_seg+0x274>)
 80133f4:	f240 324b 	movw	r2, #843	; 0x34b
 80133f8:	4994      	ldr	r1, [pc, #592]	; (801364c <tcp_split_unsent_seg+0x278>)
 80133fa:	4895      	ldr	r0, [pc, #596]	; (8013650 <tcp_split_unsent_seg+0x27c>)
 80133fc:	f004 f810 	bl	8017420 <iprintf>

  useg = pcb->unsent;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013404:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d102      	bne.n	8013412 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801340c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013410:	e116      	b.n	8013640 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013412:	887b      	ldrh	r3, [r7, #2]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d109      	bne.n	801342c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013418:	4b8b      	ldr	r3, [pc, #556]	; (8013648 <tcp_split_unsent_seg+0x274>)
 801341a:	f240 3253 	movw	r2, #851	; 0x353
 801341e:	498d      	ldr	r1, [pc, #564]	; (8013654 <tcp_split_unsent_seg+0x280>)
 8013420:	488b      	ldr	r0, [pc, #556]	; (8013650 <tcp_split_unsent_seg+0x27c>)
 8013422:	f003 fffd 	bl	8017420 <iprintf>
    return ERR_VAL;
 8013426:	f06f 0305 	mvn.w	r3, #5
 801342a:	e109      	b.n	8013640 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	891b      	ldrh	r3, [r3, #8]
 8013430:	887a      	ldrh	r2, [r7, #2]
 8013432:	429a      	cmp	r2, r3
 8013434:	d301      	bcc.n	801343a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013436:	2300      	movs	r3, #0
 8013438:	e102      	b.n	8013640 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801343e:	887a      	ldrh	r2, [r7, #2]
 8013440:	429a      	cmp	r2, r3
 8013442:	d906      	bls.n	8013452 <tcp_split_unsent_seg+0x7e>
 8013444:	4b80      	ldr	r3, [pc, #512]	; (8013648 <tcp_split_unsent_seg+0x274>)
 8013446:	f240 325b 	movw	r2, #859	; 0x35b
 801344a:	4983      	ldr	r1, [pc, #524]	; (8013658 <tcp_split_unsent_seg+0x284>)
 801344c:	4880      	ldr	r0, [pc, #512]	; (8013650 <tcp_split_unsent_seg+0x27c>)
 801344e:	f003 ffe7 	bl	8017420 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	891b      	ldrh	r3, [r3, #8]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d106      	bne.n	8013468 <tcp_split_unsent_seg+0x94>
 801345a:	4b7b      	ldr	r3, [pc, #492]	; (8013648 <tcp_split_unsent_seg+0x274>)
 801345c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013460:	497e      	ldr	r1, [pc, #504]	; (801365c <tcp_split_unsent_seg+0x288>)
 8013462:	487b      	ldr	r0, [pc, #492]	; (8013650 <tcp_split_unsent_seg+0x27c>)
 8013464:	f003 ffdc 	bl	8017420 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	7a9b      	ldrb	r3, [r3, #10]
 801346c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801346e:	7bfb      	ldrb	r3, [r7, #15]
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	b2db      	uxtb	r3, r3
 8013474:	f003 0304 	and.w	r3, r3, #4
 8013478:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	891a      	ldrh	r2, [r3, #8]
 801347e:	887b      	ldrh	r3, [r7, #2]
 8013480:	1ad3      	subs	r3, r2, r3
 8013482:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013484:	7bbb      	ldrb	r3, [r7, #14]
 8013486:	b29a      	uxth	r2, r3
 8013488:	89bb      	ldrh	r3, [r7, #12]
 801348a:	4413      	add	r3, r2
 801348c:	b29b      	uxth	r3, r3
 801348e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013492:	4619      	mov	r1, r3
 8013494:	2036      	movs	r0, #54	; 0x36
 8013496:	f7fa fbd1 	bl	800dc3c <pbuf_alloc>
 801349a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	f000 80b7 	beq.w	8013612 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	891a      	ldrh	r2, [r3, #8]
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	891b      	ldrh	r3, [r3, #8]
 80134ae:	1ad3      	subs	r3, r2, r3
 80134b0:	b29a      	uxth	r2, r3
 80134b2:	887b      	ldrh	r3, [r7, #2]
 80134b4:	4413      	add	r3, r2
 80134b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	6858      	ldr	r0, [r3, #4]
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	685a      	ldr	r2, [r3, #4]
 80134c0:	7bbb      	ldrb	r3, [r7, #14]
 80134c2:	18d1      	adds	r1, r2, r3
 80134c4:	897b      	ldrh	r3, [r7, #10]
 80134c6:	89ba      	ldrh	r2, [r7, #12]
 80134c8:	f7fb f886 	bl	800e5d8 <pbuf_copy_partial>
 80134cc:	4603      	mov	r3, r0
 80134ce:	461a      	mov	r2, r3
 80134d0:	89bb      	ldrh	r3, [r7, #12]
 80134d2:	4293      	cmp	r3, r2
 80134d4:	f040 809f 	bne.w	8013616 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	68db      	ldr	r3, [r3, #12]
 80134dc:	899b      	ldrh	r3, [r3, #12]
 80134de:	b29b      	uxth	r3, r3
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7f9 fafd 	bl	800cae0 <lwip_htons>
 80134e6:	4603      	mov	r3, r0
 80134e8:	b2db      	uxtb	r3, r3
 80134ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80134ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80134f0:	2300      	movs	r3, #0
 80134f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80134f4:	7efb      	ldrb	r3, [r7, #27]
 80134f6:	f003 0308 	and.w	r3, r3, #8
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d007      	beq.n	801350e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80134fe:	7efb      	ldrb	r3, [r7, #27]
 8013500:	f023 0308 	bic.w	r3, r3, #8
 8013504:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013506:	7ebb      	ldrb	r3, [r7, #26]
 8013508:	f043 0308 	orr.w	r3, r3, #8
 801350c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801350e:	7efb      	ldrb	r3, [r7, #27]
 8013510:	f003 0301 	and.w	r3, r3, #1
 8013514:	2b00      	cmp	r3, #0
 8013516:	d007      	beq.n	8013528 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013518:	7efb      	ldrb	r3, [r7, #27]
 801351a:	f023 0301 	bic.w	r3, r3, #1
 801351e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013520:	7ebb      	ldrb	r3, [r7, #26]
 8013522:	f043 0301 	orr.w	r3, r3, #1
 8013526:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	68db      	ldr	r3, [r3, #12]
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	4618      	mov	r0, r3
 8013530:	f7f9 faeb 	bl	800cb0a <lwip_htonl>
 8013534:	4602      	mov	r2, r0
 8013536:	887b      	ldrh	r3, [r7, #2]
 8013538:	18d1      	adds	r1, r2, r3
 801353a:	7eba      	ldrb	r2, [r7, #26]
 801353c:	7bfb      	ldrb	r3, [r7, #15]
 801353e:	9300      	str	r3, [sp, #0]
 8013540:	460b      	mov	r3, r1
 8013542:	6939      	ldr	r1, [r7, #16]
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f7ff fa4f 	bl	80129e8 <tcp_create_segment>
 801354a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801354c:	69fb      	ldr	r3, [r7, #28]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d063      	beq.n	801361a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	4618      	mov	r0, r3
 8013558:	f7fa fedc 	bl	800e314 <pbuf_clen>
 801355c:	4603      	mov	r3, r0
 801355e:	461a      	mov	r2, r3
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013566:	1a9b      	subs	r3, r3, r2
 8013568:	b29a      	uxth	r2, r3
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	6858      	ldr	r0, [r3, #4]
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	891a      	ldrh	r2, [r3, #8]
 801357a:	89bb      	ldrh	r3, [r7, #12]
 801357c:	1ad3      	subs	r3, r2, r3
 801357e:	b29b      	uxth	r3, r3
 8013580:	4619      	mov	r1, r3
 8013582:	f7fa fcb9 	bl	800def8 <pbuf_realloc>
  useg->len -= remainder;
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	891a      	ldrh	r2, [r3, #8]
 801358a:	89bb      	ldrh	r3, [r7, #12]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	b29a      	uxth	r2, r3
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	68db      	ldr	r3, [r3, #12]
 8013598:	899b      	ldrh	r3, [r3, #12]
 801359a:	b29c      	uxth	r4, r3
 801359c:	7efb      	ldrb	r3, [r7, #27]
 801359e:	b29b      	uxth	r3, r3
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7f9 fa9d 	bl	800cae0 <lwip_htons>
 80135a6:	4603      	mov	r3, r0
 80135a8:	461a      	mov	r2, r3
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	68db      	ldr	r3, [r3, #12]
 80135ae:	4322      	orrs	r2, r4
 80135b0:	b292      	uxth	r2, r2
 80135b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	685b      	ldr	r3, [r3, #4]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fa feab 	bl	800e314 <pbuf_clen>
 80135be:	4603      	mov	r3, r0
 80135c0:	461a      	mov	r2, r3
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135c8:	4413      	add	r3, r2
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80135d2:	69fb      	ldr	r3, [r7, #28]
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7fa fe9c 	bl	800e314 <pbuf_clen>
 80135dc:	4603      	mov	r3, r0
 80135de:	461a      	mov	r2, r3
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135e6:	4413      	add	r3, r2
 80135e8:	b29a      	uxth	r2, r3
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	69fb      	ldr	r3, [r7, #28]
 80135f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	69fa      	ldr	r2, [r7, #28]
 80135fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80135fe:	69fb      	ldr	r3, [r7, #28]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d103      	bne.n	801360e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2200      	movs	r2, #0
 801360a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801360e:	2300      	movs	r3, #0
 8013610:	e016      	b.n	8013640 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013612:	bf00      	nop
 8013614:	e002      	b.n	801361c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013616:	bf00      	nop
 8013618:	e000      	b.n	801361c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801361a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801361c:	69fb      	ldr	r3, [r7, #28]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d006      	beq.n	8013630 <tcp_split_unsent_seg+0x25c>
 8013622:	4b09      	ldr	r3, [pc, #36]	; (8013648 <tcp_split_unsent_seg+0x274>)
 8013624:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013628:	490d      	ldr	r1, [pc, #52]	; (8013660 <tcp_split_unsent_seg+0x28c>)
 801362a:	4809      	ldr	r0, [pc, #36]	; (8013650 <tcp_split_unsent_seg+0x27c>)
 801362c:	f003 fef8 	bl	8017420 <iprintf>
  if (p != NULL) {
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d002      	beq.n	801363c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013636:	6938      	ldr	r0, [r7, #16]
 8013638:	f7fa fde4 	bl	800e204 <pbuf_free>
  }

  return ERR_MEM;
 801363c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013640:	4618      	mov	r0, r3
 8013642:	3724      	adds	r7, #36	; 0x24
 8013644:	46bd      	mov	sp, r7
 8013646:	bd90      	pop	{r4, r7, pc}
 8013648:	0801b364 	.word	0x0801b364
 801364c:	0801b6f8 	.word	0x0801b6f8
 8013650:	0801b3b8 	.word	0x0801b3b8
 8013654:	0801b71c 	.word	0x0801b71c
 8013658:	0801b740 	.word	0x0801b740
 801365c:	0801b750 	.word	0x0801b750
 8013660:	0801b760 	.word	0x0801b760

08013664 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013664:	b590      	push	{r4, r7, lr}
 8013666:	b085      	sub	sp, #20
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d106      	bne.n	8013680 <tcp_send_fin+0x1c>
 8013672:	4b21      	ldr	r3, [pc, #132]	; (80136f8 <tcp_send_fin+0x94>)
 8013674:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013678:	4920      	ldr	r1, [pc, #128]	; (80136fc <tcp_send_fin+0x98>)
 801367a:	4821      	ldr	r0, [pc, #132]	; (8013700 <tcp_send_fin+0x9c>)
 801367c:	f003 fed0 	bl	8017420 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013684:	2b00      	cmp	r3, #0
 8013686:	d02e      	beq.n	80136e6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801368c:	60fb      	str	r3, [r7, #12]
 801368e:	e002      	b.n	8013696 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d1f8      	bne.n	8013690 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	68db      	ldr	r3, [r3, #12]
 80136a2:	899b      	ldrh	r3, [r3, #12]
 80136a4:	b29b      	uxth	r3, r3
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7f9 fa1a 	bl	800cae0 <lwip_htons>
 80136ac:	4603      	mov	r3, r0
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	f003 0307 	and.w	r3, r3, #7
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d116      	bne.n	80136e6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	68db      	ldr	r3, [r3, #12]
 80136bc:	899b      	ldrh	r3, [r3, #12]
 80136be:	b29c      	uxth	r4, r3
 80136c0:	2001      	movs	r0, #1
 80136c2:	f7f9 fa0d 	bl	800cae0 <lwip_htons>
 80136c6:	4603      	mov	r3, r0
 80136c8:	461a      	mov	r2, r3
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	68db      	ldr	r3, [r3, #12]
 80136ce:	4322      	orrs	r2, r4
 80136d0:	b292      	uxth	r2, r2
 80136d2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	8b5b      	ldrh	r3, [r3, #26]
 80136d8:	f043 0320 	orr.w	r3, r3, #32
 80136dc:	b29a      	uxth	r2, r3
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80136e2:	2300      	movs	r3, #0
 80136e4:	e004      	b.n	80136f0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80136e6:	2101      	movs	r1, #1
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f000 f80b 	bl	8013704 <tcp_enqueue_flags>
 80136ee:	4603      	mov	r3, r0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3714      	adds	r7, #20
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd90      	pop	{r4, r7, pc}
 80136f8:	0801b364 	.word	0x0801b364
 80136fc:	0801b76c 	.word	0x0801b76c
 8013700:	0801b3b8 	.word	0x0801b3b8

08013704 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b08a      	sub	sp, #40	; 0x28
 8013708:	af02      	add	r7, sp, #8
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	460b      	mov	r3, r1
 801370e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013710:	2300      	movs	r3, #0
 8013712:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013714:	2300      	movs	r3, #0
 8013716:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013718:	78fb      	ldrb	r3, [r7, #3]
 801371a:	f003 0303 	and.w	r3, r3, #3
 801371e:	2b00      	cmp	r3, #0
 8013720:	d106      	bne.n	8013730 <tcp_enqueue_flags+0x2c>
 8013722:	4b67      	ldr	r3, [pc, #412]	; (80138c0 <tcp_enqueue_flags+0x1bc>)
 8013724:	f240 4211 	movw	r2, #1041	; 0x411
 8013728:	4966      	ldr	r1, [pc, #408]	; (80138c4 <tcp_enqueue_flags+0x1c0>)
 801372a:	4867      	ldr	r0, [pc, #412]	; (80138c8 <tcp_enqueue_flags+0x1c4>)
 801372c:	f003 fe78 	bl	8017420 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d106      	bne.n	8013744 <tcp_enqueue_flags+0x40>
 8013736:	4b62      	ldr	r3, [pc, #392]	; (80138c0 <tcp_enqueue_flags+0x1bc>)
 8013738:	f240 4213 	movw	r2, #1043	; 0x413
 801373c:	4963      	ldr	r1, [pc, #396]	; (80138cc <tcp_enqueue_flags+0x1c8>)
 801373e:	4862      	ldr	r0, [pc, #392]	; (80138c8 <tcp_enqueue_flags+0x1c4>)
 8013740:	f003 fe6e 	bl	8017420 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013744:	78fb      	ldrb	r3, [r7, #3]
 8013746:	f003 0302 	and.w	r3, r3, #2
 801374a:	2b00      	cmp	r3, #0
 801374c:	d001      	beq.n	8013752 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801374e:	2301      	movs	r3, #1
 8013750:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013752:	7ffb      	ldrb	r3, [r7, #31]
 8013754:	009b      	lsls	r3, r3, #2
 8013756:	b2db      	uxtb	r3, r3
 8013758:	f003 0304 	and.w	r3, r3, #4
 801375c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801375e:	7dfb      	ldrb	r3, [r7, #23]
 8013760:	b29b      	uxth	r3, r3
 8013762:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013766:	4619      	mov	r1, r3
 8013768:	2036      	movs	r0, #54	; 0x36
 801376a:	f7fa fa67 	bl	800dc3c <pbuf_alloc>
 801376e:	6138      	str	r0, [r7, #16]
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d109      	bne.n	801378a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	8b5b      	ldrh	r3, [r3, #26]
 801377a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801377e:	b29a      	uxth	r2, r3
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013788:	e095      	b.n	80138b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	895a      	ldrh	r2, [r3, #10]
 801378e:	7dfb      	ldrb	r3, [r7, #23]
 8013790:	b29b      	uxth	r3, r3
 8013792:	429a      	cmp	r2, r3
 8013794:	d206      	bcs.n	80137a4 <tcp_enqueue_flags+0xa0>
 8013796:	4b4a      	ldr	r3, [pc, #296]	; (80138c0 <tcp_enqueue_flags+0x1bc>)
 8013798:	f240 4239 	movw	r2, #1081	; 0x439
 801379c:	494c      	ldr	r1, [pc, #304]	; (80138d0 <tcp_enqueue_flags+0x1cc>)
 801379e:	484a      	ldr	r0, [pc, #296]	; (80138c8 <tcp_enqueue_flags+0x1c4>)
 80137a0:	f003 fe3e 	bl	8017420 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80137a8:	78fa      	ldrb	r2, [r7, #3]
 80137aa:	7ffb      	ldrb	r3, [r7, #31]
 80137ac:	9300      	str	r3, [sp, #0]
 80137ae:	460b      	mov	r3, r1
 80137b0:	6939      	ldr	r1, [r7, #16]
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f7ff f918 	bl	80129e8 <tcp_create_segment>
 80137b8:	60f8      	str	r0, [r7, #12]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d109      	bne.n	80137d4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	8b5b      	ldrh	r3, [r3, #26]
 80137c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137c8:	b29a      	uxth	r2, r3
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80137ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137d2:	e070      	b.n	80138b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	68db      	ldr	r3, [r3, #12]
 80137d8:	f003 0303 	and.w	r3, r3, #3
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d006      	beq.n	80137ee <tcp_enqueue_flags+0xea>
 80137e0:	4b37      	ldr	r3, [pc, #220]	; (80138c0 <tcp_enqueue_flags+0x1bc>)
 80137e2:	f240 4242 	movw	r2, #1090	; 0x442
 80137e6:	493b      	ldr	r1, [pc, #236]	; (80138d4 <tcp_enqueue_flags+0x1d0>)
 80137e8:	4837      	ldr	r0, [pc, #220]	; (80138c8 <tcp_enqueue_flags+0x1c4>)
 80137ea:	f003 fe19 	bl	8017420 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	891b      	ldrh	r3, [r3, #8]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d006      	beq.n	8013804 <tcp_enqueue_flags+0x100>
 80137f6:	4b32      	ldr	r3, [pc, #200]	; (80138c0 <tcp_enqueue_flags+0x1bc>)
 80137f8:	f240 4243 	movw	r2, #1091	; 0x443
 80137fc:	4936      	ldr	r1, [pc, #216]	; (80138d8 <tcp_enqueue_flags+0x1d4>)
 80137fe:	4832      	ldr	r0, [pc, #200]	; (80138c8 <tcp_enqueue_flags+0x1c4>)
 8013800:	f003 fe0e 	bl	8017420 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013808:	2b00      	cmp	r3, #0
 801380a:	d103      	bne.n	8013814 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	68fa      	ldr	r2, [r7, #12]
 8013810:	66da      	str	r2, [r3, #108]	; 0x6c
 8013812:	e00d      	b.n	8013830 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013818:	61bb      	str	r3, [r7, #24]
 801381a:	e002      	b.n	8013822 <tcp_enqueue_flags+0x11e>
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	61bb      	str	r3, [r7, #24]
 8013822:	69bb      	ldr	r3, [r7, #24]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d1f8      	bne.n	801381c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2200      	movs	r2, #0
 8013834:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013838:	78fb      	ldrb	r3, [r7, #3]
 801383a:	f003 0302 	and.w	r3, r3, #2
 801383e:	2b00      	cmp	r3, #0
 8013840:	d104      	bne.n	801384c <tcp_enqueue_flags+0x148>
 8013842:	78fb      	ldrb	r3, [r7, #3]
 8013844:	f003 0301 	and.w	r3, r3, #1
 8013848:	2b00      	cmp	r3, #0
 801384a:	d004      	beq.n	8013856 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013850:	1c5a      	adds	r2, r3, #1
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013856:	78fb      	ldrb	r3, [r7, #3]
 8013858:	f003 0301 	and.w	r3, r3, #1
 801385c:	2b00      	cmp	r3, #0
 801385e:	d006      	beq.n	801386e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	8b5b      	ldrh	r3, [r3, #26]
 8013864:	f043 0320 	orr.w	r3, r3, #32
 8013868:	b29a      	uxth	r2, r3
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	4618      	mov	r0, r3
 8013874:	f7fa fd4e 	bl	800e314 <pbuf_clen>
 8013878:	4603      	mov	r3, r0
 801387a:	461a      	mov	r2, r3
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013882:	4413      	add	r3, r2
 8013884:	b29a      	uxth	r2, r3
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013892:	2b00      	cmp	r3, #0
 8013894:	d00e      	beq.n	80138b4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801389a:	2b00      	cmp	r3, #0
 801389c:	d10a      	bne.n	80138b4 <tcp_enqueue_flags+0x1b0>
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d106      	bne.n	80138b4 <tcp_enqueue_flags+0x1b0>
 80138a6:	4b06      	ldr	r3, [pc, #24]	; (80138c0 <tcp_enqueue_flags+0x1bc>)
 80138a8:	f240 4265 	movw	r2, #1125	; 0x465
 80138ac:	490b      	ldr	r1, [pc, #44]	; (80138dc <tcp_enqueue_flags+0x1d8>)
 80138ae:	4806      	ldr	r0, [pc, #24]	; (80138c8 <tcp_enqueue_flags+0x1c4>)
 80138b0:	f003 fdb6 	bl	8017420 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80138b4:	2300      	movs	r3, #0
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3720      	adds	r7, #32
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
 80138be:	bf00      	nop
 80138c0:	0801b364 	.word	0x0801b364
 80138c4:	0801b788 	.word	0x0801b788
 80138c8:	0801b3b8 	.word	0x0801b3b8
 80138cc:	0801b7e0 	.word	0x0801b7e0
 80138d0:	0801b800 	.word	0x0801b800
 80138d4:	0801b83c 	.word	0x0801b83c
 80138d8:	0801b854 	.word	0x0801b854
 80138dc:	0801b880 	.word	0x0801b880

080138e0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80138e0:	b5b0      	push	{r4, r5, r7, lr}
 80138e2:	b08a      	sub	sp, #40	; 0x28
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d106      	bne.n	80138fc <tcp_output+0x1c>
 80138ee:	4b9e      	ldr	r3, [pc, #632]	; (8013b68 <tcp_output+0x288>)
 80138f0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80138f4:	499d      	ldr	r1, [pc, #628]	; (8013b6c <tcp_output+0x28c>)
 80138f6:	489e      	ldr	r0, [pc, #632]	; (8013b70 <tcp_output+0x290>)
 80138f8:	f003 fd92 	bl	8017420 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	7d1b      	ldrb	r3, [r3, #20]
 8013900:	2b01      	cmp	r3, #1
 8013902:	d106      	bne.n	8013912 <tcp_output+0x32>
 8013904:	4b98      	ldr	r3, [pc, #608]	; (8013b68 <tcp_output+0x288>)
 8013906:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801390a:	499a      	ldr	r1, [pc, #616]	; (8013b74 <tcp_output+0x294>)
 801390c:	4898      	ldr	r0, [pc, #608]	; (8013b70 <tcp_output+0x290>)
 801390e:	f003 fd87 	bl	8017420 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013912:	4b99      	ldr	r3, [pc, #612]	; (8013b78 <tcp_output+0x298>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	429a      	cmp	r2, r3
 801391a:	d101      	bne.n	8013920 <tcp_output+0x40>
    return ERR_OK;
 801391c:	2300      	movs	r3, #0
 801391e:	e1ce      	b.n	8013cbe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801392c:	4293      	cmp	r3, r2
 801392e:	bf28      	it	cs
 8013930:	4613      	movcs	r3, r2
 8013932:	b29b      	uxth	r3, r3
 8013934:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801393a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393e:	2b00      	cmp	r3, #0
 8013940:	d10b      	bne.n	801395a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	8b5b      	ldrh	r3, [r3, #26]
 8013946:	f003 0302 	and.w	r3, r3, #2
 801394a:	2b00      	cmp	r3, #0
 801394c:	f000 81aa 	beq.w	8013ca4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f000 fdcb 	bl	80144ec <tcp_send_empty_ack>
 8013956:	4603      	mov	r3, r0
 8013958:	e1b1      	b.n	8013cbe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801395a:	6879      	ldr	r1, [r7, #4]
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	3304      	adds	r3, #4
 8013960:	461a      	mov	r2, r3
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f7ff f824 	bl	80129b0 <tcp_route>
 8013968:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d102      	bne.n	8013976 <tcp_output+0x96>
    return ERR_RTE;
 8013970:	f06f 0303 	mvn.w	r3, #3
 8013974:	e1a3      	b.n	8013cbe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d003      	beq.n	8013984 <tcp_output+0xa4>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d111      	bne.n	80139a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d002      	beq.n	8013990 <tcp_output+0xb0>
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	3304      	adds	r3, #4
 801398e:	e000      	b.n	8013992 <tcp_output+0xb2>
 8013990:	2300      	movs	r3, #0
 8013992:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d102      	bne.n	80139a0 <tcp_output+0xc0>
      return ERR_RTE;
 801399a:	f06f 0303 	mvn.w	r3, #3
 801399e:	e18e      	b.n	8013cbe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80139a0:	693b      	ldr	r3, [r7, #16]
 80139a2:	681a      	ldr	r2, [r3, #0]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80139a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139aa:	68db      	ldr	r3, [r3, #12]
 80139ac:	685b      	ldr	r3, [r3, #4]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7f9 f8ab 	bl	800cb0a <lwip_htonl>
 80139b4:	4602      	mov	r2, r0
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139ba:	1ad3      	subs	r3, r2, r3
 80139bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139be:	8912      	ldrh	r2, [r2, #8]
 80139c0:	4413      	add	r3, r2
 80139c2:	69ba      	ldr	r2, [r7, #24]
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d227      	bcs.n	8013a18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80139ce:	461a      	mov	r2, r3
 80139d0:	69bb      	ldr	r3, [r7, #24]
 80139d2:	4293      	cmp	r3, r2
 80139d4:	d114      	bne.n	8013a00 <tcp_output+0x120>
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d110      	bne.n	8013a00 <tcp_output+0x120>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d10b      	bne.n	8013a00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2200      	movs	r2, #0
 80139ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2201      	movs	r2, #1
 80139f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	8b5b      	ldrh	r3, [r3, #26]
 8013a04:	f003 0302 	and.w	r3, r3, #2
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f000 814d 	beq.w	8013ca8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013a0e:	6878      	ldr	r0, [r7, #4]
 8013a10:	f000 fd6c 	bl	80144ec <tcp_send_empty_ack>
 8013a14:	4603      	mov	r3, r0
 8013a16:	e152      	b.n	8013cbe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013a26:	6a3b      	ldr	r3, [r7, #32]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f000 811c 	beq.w	8013c66 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013a2e:	e002      	b.n	8013a36 <tcp_output+0x156>
 8013a30:	6a3b      	ldr	r3, [r7, #32]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	623b      	str	r3, [r7, #32]
 8013a36:	6a3b      	ldr	r3, [r7, #32]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d1f8      	bne.n	8013a30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013a3e:	e112      	b.n	8013c66 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a42:	68db      	ldr	r3, [r3, #12]
 8013a44:	899b      	ldrh	r3, [r3, #12]
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7f9 f849 	bl	800cae0 <lwip_htons>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	f003 0304 	and.w	r3, r3, #4
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d006      	beq.n	8013a68 <tcp_output+0x188>
 8013a5a:	4b43      	ldr	r3, [pc, #268]	; (8013b68 <tcp_output+0x288>)
 8013a5c:	f240 5236 	movw	r2, #1334	; 0x536
 8013a60:	4946      	ldr	r1, [pc, #280]	; (8013b7c <tcp_output+0x29c>)
 8013a62:	4843      	ldr	r0, [pc, #268]	; (8013b70 <tcp_output+0x290>)
 8013a64:	f003 fcdc 	bl	8017420 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d01f      	beq.n	8013ab0 <tcp_output+0x1d0>
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	8b5b      	ldrh	r3, [r3, #26]
 8013a74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d119      	bne.n	8013ab0 <tcp_output+0x1d0>
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d00b      	beq.n	8013a9c <tcp_output+0x1bc>
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d110      	bne.n	8013ab0 <tcp_output+0x1d0>
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a92:	891a      	ldrh	r2, [r3, #8]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d209      	bcs.n	8013ab0 <tcp_output+0x1d0>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d004      	beq.n	8013ab0 <tcp_output+0x1d0>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013aac:	2b08      	cmp	r3, #8
 8013aae:	d901      	bls.n	8013ab4 <tcp_output+0x1d4>
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e000      	b.n	8013ab6 <tcp_output+0x1d6>
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d106      	bne.n	8013ac8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	8b5b      	ldrh	r3, [r3, #26]
 8013abe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	f000 80e4 	beq.w	8013c90 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	7d1b      	ldrb	r3, [r3, #20]
 8013acc:	2b02      	cmp	r3, #2
 8013ace:	d00d      	beq.n	8013aec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad2:	68db      	ldr	r3, [r3, #12]
 8013ad4:	899b      	ldrh	r3, [r3, #12]
 8013ad6:	b29c      	uxth	r4, r3
 8013ad8:	2010      	movs	r0, #16
 8013ada:	f7f9 f801 	bl	800cae0 <lwip_htons>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae4:	68db      	ldr	r3, [r3, #12]
 8013ae6:	4322      	orrs	r2, r4
 8013ae8:	b292      	uxth	r2, r2
 8013aea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013aec:	697a      	ldr	r2, [r7, #20]
 8013aee:	6879      	ldr	r1, [r7, #4]
 8013af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013af2:	f000 f909 	bl	8013d08 <tcp_output_segment>
 8013af6:	4603      	mov	r3, r0
 8013af8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d009      	beq.n	8013b16 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	8b5b      	ldrh	r3, [r3, #26]
 8013b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	835a      	strh	r2, [r3, #26]
      return err;
 8013b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b14:	e0d3      	b.n	8013cbe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	7d1b      	ldrb	r3, [r3, #20]
 8013b22:	2b02      	cmp	r3, #2
 8013b24:	d006      	beq.n	8013b34 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	8b5b      	ldrh	r3, [r3, #26]
 8013b2a:	f023 0303 	bic.w	r3, r3, #3
 8013b2e:	b29a      	uxth	r2, r3
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f7f8 ffe5 	bl	800cb0a <lwip_htonl>
 8013b40:	4604      	mov	r4, r0
 8013b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b44:	891b      	ldrh	r3, [r3, #8]
 8013b46:	461d      	mov	r5, r3
 8013b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	899b      	ldrh	r3, [r3, #12]
 8013b4e:	b29b      	uxth	r3, r3
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7f8 ffc5 	bl	800cae0 <lwip_htons>
 8013b56:	4603      	mov	r3, r0
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	f003 0303 	and.w	r3, r3, #3
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d00e      	beq.n	8013b80 <tcp_output+0x2a0>
 8013b62:	2301      	movs	r3, #1
 8013b64:	e00d      	b.n	8013b82 <tcp_output+0x2a2>
 8013b66:	bf00      	nop
 8013b68:	0801b364 	.word	0x0801b364
 8013b6c:	0801b8a8 	.word	0x0801b8a8
 8013b70:	0801b3b8 	.word	0x0801b3b8
 8013b74:	0801b8c0 	.word	0x0801b8c0
 8013b78:	20011844 	.word	0x20011844
 8013b7c:	0801b8e8 	.word	0x0801b8e8
 8013b80:	2300      	movs	r3, #0
 8013b82:	442b      	add	r3, r5
 8013b84:	4423      	add	r3, r4
 8013b86:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	1ad3      	subs	r3, r2, r3
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	da02      	bge.n	8013b9a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	68ba      	ldr	r2, [r7, #8]
 8013b98:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9c:	891b      	ldrh	r3, [r3, #8]
 8013b9e:	461c      	mov	r4, r3
 8013ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	899b      	ldrh	r3, [r3, #12]
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7f8 ff99 	bl	800cae0 <lwip_htons>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	b2db      	uxtb	r3, r3
 8013bb2:	f003 0303 	and.w	r3, r3, #3
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d001      	beq.n	8013bbe <tcp_output+0x2de>
 8013bba:	2301      	movs	r3, #1
 8013bbc:	e000      	b.n	8013bc0 <tcp_output+0x2e0>
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	4423      	add	r3, r4
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d049      	beq.n	8013c5a <tcp_output+0x37a>
      seg->next = NULL;
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc8:	2200      	movs	r2, #0
 8013bca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d105      	bne.n	8013be0 <tcp_output+0x300>
        pcb->unacked = seg;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bd8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bdc:	623b      	str	r3, [r7, #32]
 8013bde:	e03f      	b.n	8013c60 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7f8 ff8f 	bl	800cb0a <lwip_htonl>
 8013bec:	4604      	mov	r4, r0
 8013bee:	6a3b      	ldr	r3, [r7, #32]
 8013bf0:	68db      	ldr	r3, [r3, #12]
 8013bf2:	685b      	ldr	r3, [r3, #4]
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7f8 ff88 	bl	800cb0a <lwip_htonl>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	1ae3      	subs	r3, r4, r3
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	da24      	bge.n	8013c4c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	3370      	adds	r3, #112	; 0x70
 8013c06:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013c08:	e002      	b.n	8013c10 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013c0a:	69fb      	ldr	r3, [r7, #28]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013c10:	69fb      	ldr	r3, [r7, #28]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d011      	beq.n	8013c3c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7f8 ff72 	bl	800cb0a <lwip_htonl>
 8013c26:	4604      	mov	r4, r0
 8013c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2a:	68db      	ldr	r3, [r3, #12]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7f8 ff6b 	bl	800cb0a <lwip_htonl>
 8013c34:	4603      	mov	r3, r0
 8013c36:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	dbe6      	blt.n	8013c0a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013c3c:	69fb      	ldr	r3, [r7, #28]
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c42:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013c44:	69fb      	ldr	r3, [r7, #28]
 8013c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c48:	601a      	str	r2, [r3, #0]
 8013c4a:	e009      	b.n	8013c60 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013c4c:	6a3b      	ldr	r3, [r7, #32]
 8013c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c50:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013c52:	6a3b      	ldr	r3, [r7, #32]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	623b      	str	r3, [r7, #32]
 8013c58:	e002      	b.n	8013c60 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013c5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c5c:	f7fb feff 	bl	800fa5e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c64:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d012      	beq.n	8013c92 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6e:	68db      	ldr	r3, [r3, #12]
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7f8 ff49 	bl	800cb0a <lwip_htonl>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c7e:	1ad3      	subs	r3, r2, r3
 8013c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c82:	8912      	ldrh	r2, [r2, #8]
 8013c84:	4413      	add	r3, r2
  while (seg != NULL &&
 8013c86:	69ba      	ldr	r2, [r7, #24]
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	f4bf aed9 	bcs.w	8013a40 <tcp_output+0x160>
 8013c8e:	e000      	b.n	8013c92 <tcp_output+0x3b2>
      break;
 8013c90:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d108      	bne.n	8013cac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013ca2:	e004      	b.n	8013cae <tcp_output+0x3ce>
    goto output_done;
 8013ca4:	bf00      	nop
 8013ca6:	e002      	b.n	8013cae <tcp_output+0x3ce>
    goto output_done;
 8013ca8:	bf00      	nop
 8013caa:	e000      	b.n	8013cae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013cac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	8b5b      	ldrh	r3, [r3, #26]
 8013cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013cb6:	b29a      	uxth	r2, r3
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3728      	adds	r7, #40	; 0x28
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8013cc6:	bf00      	nop

08013cc8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d106      	bne.n	8013ce4 <tcp_output_segment_busy+0x1c>
 8013cd6:	4b09      	ldr	r3, [pc, #36]	; (8013cfc <tcp_output_segment_busy+0x34>)
 8013cd8:	f240 529a 	movw	r2, #1434	; 0x59a
 8013cdc:	4908      	ldr	r1, [pc, #32]	; (8013d00 <tcp_output_segment_busy+0x38>)
 8013cde:	4809      	ldr	r0, [pc, #36]	; (8013d04 <tcp_output_segment_busy+0x3c>)
 8013ce0:	f003 fb9e 	bl	8017420 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	685b      	ldr	r3, [r3, #4]
 8013ce8:	7b9b      	ldrb	r3, [r3, #14]
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d001      	beq.n	8013cf2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013cee:	2301      	movs	r3, #1
 8013cf0:	e000      	b.n	8013cf4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013cf2:	2300      	movs	r3, #0
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	0801b364 	.word	0x0801b364
 8013d00:	0801b900 	.word	0x0801b900
 8013d04:	0801b3b8 	.word	0x0801b3b8

08013d08 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013d08:	b5b0      	push	{r4, r5, r7, lr}
 8013d0a:	b08c      	sub	sp, #48	; 0x30
 8013d0c:	af04      	add	r7, sp, #16
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d106      	bne.n	8013d28 <tcp_output_segment+0x20>
 8013d1a:	4b63      	ldr	r3, [pc, #396]	; (8013ea8 <tcp_output_segment+0x1a0>)
 8013d1c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013d20:	4962      	ldr	r1, [pc, #392]	; (8013eac <tcp_output_segment+0x1a4>)
 8013d22:	4863      	ldr	r0, [pc, #396]	; (8013eb0 <tcp_output_segment+0x1a8>)
 8013d24:	f003 fb7c 	bl	8017420 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d106      	bne.n	8013d3c <tcp_output_segment+0x34>
 8013d2e:	4b5e      	ldr	r3, [pc, #376]	; (8013ea8 <tcp_output_segment+0x1a0>)
 8013d30:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013d34:	495f      	ldr	r1, [pc, #380]	; (8013eb4 <tcp_output_segment+0x1ac>)
 8013d36:	485e      	ldr	r0, [pc, #376]	; (8013eb0 <tcp_output_segment+0x1a8>)
 8013d38:	f003 fb72 	bl	8017420 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d106      	bne.n	8013d50 <tcp_output_segment+0x48>
 8013d42:	4b59      	ldr	r3, [pc, #356]	; (8013ea8 <tcp_output_segment+0x1a0>)
 8013d44:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013d48:	495b      	ldr	r1, [pc, #364]	; (8013eb8 <tcp_output_segment+0x1b0>)
 8013d4a:	4859      	ldr	r0, [pc, #356]	; (8013eb0 <tcp_output_segment+0x1a8>)
 8013d4c:	f003 fb68 	bl	8017420 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013d50:	68f8      	ldr	r0, [r7, #12]
 8013d52:	f7ff ffb9 	bl	8013cc8 <tcp_output_segment_busy>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d001      	beq.n	8013d60 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	e09f      	b.n	8013ea0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	68dc      	ldr	r4, [r3, #12]
 8013d68:	4610      	mov	r0, r2
 8013d6a:	f7f8 fece 	bl	800cb0a <lwip_htonl>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	68dc      	ldr	r4, [r3, #12]
 8013d7a:	4610      	mov	r0, r2
 8013d7c:	f7f8 feb0 	bl	800cae0 <lwip_htons>
 8013d80:	4603      	mov	r3, r0
 8013d82:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d88:	68ba      	ldr	r2, [r7, #8]
 8013d8a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013d8c:	441a      	add	r2, r3
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	68db      	ldr	r3, [r3, #12]
 8013d96:	3314      	adds	r3, #20
 8013d98:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	7a9b      	ldrb	r3, [r3, #10]
 8013d9e:	f003 0301 	and.w	r3, r3, #1
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d015      	beq.n	8013dd2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	3304      	adds	r3, #4
 8013daa:	461a      	mov	r2, r3
 8013dac:	6879      	ldr	r1, [r7, #4]
 8013dae:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013db2:	f7fc fa37 	bl	8010224 <tcp_eff_send_mss_netif>
 8013db6:	4603      	mov	r3, r0
 8013db8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013dba:	8b7b      	ldrh	r3, [r7, #26]
 8013dbc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7f8 fea2 	bl	800cb0a <lwip_htonl>
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	69fb      	ldr	r3, [r7, #28]
 8013dca:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013dcc:	69fb      	ldr	r3, [r7, #28]
 8013dce:	3304      	adds	r3, #4
 8013dd0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	da02      	bge.n	8013de2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	2200      	movs	r2, #0
 8013de0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d10c      	bne.n	8013e04 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013dea:	4b34      	ldr	r3, [pc, #208]	; (8013ebc <tcp_output_segment+0x1b4>)
 8013dec:	681a      	ldr	r2, [r3, #0]
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	68db      	ldr	r3, [r3, #12]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7f8 fe86 	bl	800cb0a <lwip_htonl>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	68da      	ldr	r2, [r3, #12]
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	685b      	ldr	r3, [r3, #4]
 8013e0c:	685b      	ldr	r3, [r3, #4]
 8013e0e:	1ad3      	subs	r3, r2, r3
 8013e10:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	8959      	ldrh	r1, [r3, #10]
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	685b      	ldr	r3, [r3, #4]
 8013e1c:	8b3a      	ldrh	r2, [r7, #24]
 8013e1e:	1a8a      	subs	r2, r1, r2
 8013e20:	b292      	uxth	r2, r2
 8013e22:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	8919      	ldrh	r1, [r3, #8]
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	685b      	ldr	r3, [r3, #4]
 8013e2e:	8b3a      	ldrh	r2, [r7, #24]
 8013e30:	1a8a      	subs	r2, r1, r2
 8013e32:	b292      	uxth	r2, r2
 8013e34:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	685b      	ldr	r3, [r3, #4]
 8013e3a:	68fa      	ldr	r2, [r7, #12]
 8013e3c:	68d2      	ldr	r2, [r2, #12]
 8013e3e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	2200      	movs	r2, #0
 8013e46:	741a      	strb	r2, [r3, #16]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	68db      	ldr	r3, [r3, #12]
 8013e50:	f103 0214 	add.w	r2, r3, #20
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	7a9b      	ldrb	r3, [r3, #10]
 8013e58:	009b      	lsls	r3, r3, #2
 8013e5a:	f003 0304 	and.w	r3, r3, #4
 8013e5e:	4413      	add	r3, r2
 8013e60:	69fa      	ldr	r2, [r7, #28]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d006      	beq.n	8013e74 <tcp_output_segment+0x16c>
 8013e66:	4b10      	ldr	r3, [pc, #64]	; (8013ea8 <tcp_output_segment+0x1a0>)
 8013e68:	f240 621c 	movw	r2, #1564	; 0x61c
 8013e6c:	4914      	ldr	r1, [pc, #80]	; (8013ec0 <tcp_output_segment+0x1b8>)
 8013e6e:	4810      	ldr	r0, [pc, #64]	; (8013eb0 <tcp_output_segment+0x1a8>)
 8013e70:	f003 fad6 	bl	8017420 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	6858      	ldr	r0, [r3, #4]
 8013e78:	68b9      	ldr	r1, [r7, #8]
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	1d1c      	adds	r4, r3, #4
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	7add      	ldrb	r5, [r3, #11]
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	7a9b      	ldrb	r3, [r3, #10]
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	9202      	str	r2, [sp, #8]
 8013e8a:	2206      	movs	r2, #6
 8013e8c:	9201      	str	r2, [sp, #4]
 8013e8e:	9300      	str	r3, [sp, #0]
 8013e90:	462b      	mov	r3, r5
 8013e92:	4622      	mov	r2, r4
 8013e94:	f002 fa36 	bl	8016304 <ip4_output_if>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013e9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3720      	adds	r7, #32
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ea8:	0801b364 	.word	0x0801b364
 8013eac:	0801b928 	.word	0x0801b928
 8013eb0:	0801b3b8 	.word	0x0801b3b8
 8013eb4:	0801b948 	.word	0x0801b948
 8013eb8:	0801b968 	.word	0x0801b968
 8013ebc:	20011834 	.word	0x20011834
 8013ec0:	0801b98c 	.word	0x0801b98c

08013ec4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013ec4:	b5b0      	push	{r4, r5, r7, lr}
 8013ec6:	b084      	sub	sp, #16
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d106      	bne.n	8013ee0 <tcp_rexmit_rto_prepare+0x1c>
 8013ed2:	4b31      	ldr	r3, [pc, #196]	; (8013f98 <tcp_rexmit_rto_prepare+0xd4>)
 8013ed4:	f240 6263 	movw	r2, #1635	; 0x663
 8013ed8:	4930      	ldr	r1, [pc, #192]	; (8013f9c <tcp_rexmit_rto_prepare+0xd8>)
 8013eda:	4831      	ldr	r0, [pc, #196]	; (8013fa0 <tcp_rexmit_rto_prepare+0xdc>)
 8013edc:	f003 faa0 	bl	8017420 <iprintf>

  if (pcb->unacked == NULL) {
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d102      	bne.n	8013eee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013ee8:	f06f 0305 	mvn.w	r3, #5
 8013eec:	e050      	b.n	8013f90 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ef2:	60fb      	str	r3, [r7, #12]
 8013ef4:	e00b      	b.n	8013f0e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013ef6:	68f8      	ldr	r0, [r7, #12]
 8013ef8:	f7ff fee6 	bl	8013cc8 <tcp_output_segment_busy>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d002      	beq.n	8013f08 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013f02:	f06f 0305 	mvn.w	r3, #5
 8013f06:	e043      	b.n	8013f90 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	60fb      	str	r3, [r7, #12]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d1ef      	bne.n	8013ef6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013f16:	68f8      	ldr	r0, [r7, #12]
 8013f18:	f7ff fed6 	bl	8013cc8 <tcp_output_segment_busy>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d002      	beq.n	8013f28 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013f22:	f06f 0305 	mvn.w	r3, #5
 8013f26:	e033      	b.n	8013f90 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	8b5b      	ldrh	r3, [r3, #26]
 8013f42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7f8 fdd9 	bl	800cb0a <lwip_htonl>
 8013f58:	4604      	mov	r4, r0
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	891b      	ldrh	r3, [r3, #8]
 8013f5e:	461d      	mov	r5, r3
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	68db      	ldr	r3, [r3, #12]
 8013f64:	899b      	ldrh	r3, [r3, #12]
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7f8 fdb9 	bl	800cae0 <lwip_htons>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	b2db      	uxtb	r3, r3
 8013f72:	f003 0303 	and.w	r3, r3, #3
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d001      	beq.n	8013f7e <tcp_rexmit_rto_prepare+0xba>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	e000      	b.n	8013f80 <tcp_rexmit_rto_prepare+0xbc>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	442b      	add	r3, r5
 8013f82:	18e2      	adds	r2, r4, r3
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013f8e:	2300      	movs	r3, #0
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	3710      	adds	r7, #16
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bdb0      	pop	{r4, r5, r7, pc}
 8013f98:	0801b364 	.word	0x0801b364
 8013f9c:	0801b9a0 	.word	0x0801b9a0
 8013fa0:	0801b3b8 	.word	0x0801b3b8

08013fa4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b082      	sub	sp, #8
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d106      	bne.n	8013fc0 <tcp_rexmit_rto_commit+0x1c>
 8013fb2:	4b0d      	ldr	r3, [pc, #52]	; (8013fe8 <tcp_rexmit_rto_commit+0x44>)
 8013fb4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013fb8:	490c      	ldr	r1, [pc, #48]	; (8013fec <tcp_rexmit_rto_commit+0x48>)
 8013fba:	480d      	ldr	r0, [pc, #52]	; (8013ff0 <tcp_rexmit_rto_commit+0x4c>)
 8013fbc:	f003 fa30 	bl	8017420 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013fc6:	2bff      	cmp	r3, #255	; 0xff
 8013fc8:	d007      	beq.n	8013fda <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	b2da      	uxtb	r2, r3
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f7ff fc80 	bl	80138e0 <tcp_output>
}
 8013fe0:	bf00      	nop
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}
 8013fe8:	0801b364 	.word	0x0801b364
 8013fec:	0801b9c4 	.word	0x0801b9c4
 8013ff0:	0801b3b8 	.word	0x0801b3b8

08013ff4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b082      	sub	sp, #8
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d106      	bne.n	8014010 <tcp_rexmit_rto+0x1c>
 8014002:	4b0a      	ldr	r3, [pc, #40]	; (801402c <tcp_rexmit_rto+0x38>)
 8014004:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014008:	4909      	ldr	r1, [pc, #36]	; (8014030 <tcp_rexmit_rto+0x3c>)
 801400a:	480a      	ldr	r0, [pc, #40]	; (8014034 <tcp_rexmit_rto+0x40>)
 801400c:	f003 fa08 	bl	8017420 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f7ff ff57 	bl	8013ec4 <tcp_rexmit_rto_prepare>
 8014016:	4603      	mov	r3, r0
 8014018:	2b00      	cmp	r3, #0
 801401a:	d102      	bne.n	8014022 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f7ff ffc1 	bl	8013fa4 <tcp_rexmit_rto_commit>
  }
}
 8014022:	bf00      	nop
 8014024:	3708      	adds	r7, #8
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}
 801402a:	bf00      	nop
 801402c:	0801b364 	.word	0x0801b364
 8014030:	0801b9e8 	.word	0x0801b9e8
 8014034:	0801b3b8 	.word	0x0801b3b8

08014038 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014038:	b590      	push	{r4, r7, lr}
 801403a:	b085      	sub	sp, #20
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d106      	bne.n	8014054 <tcp_rexmit+0x1c>
 8014046:	4b2f      	ldr	r3, [pc, #188]	; (8014104 <tcp_rexmit+0xcc>)
 8014048:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801404c:	492e      	ldr	r1, [pc, #184]	; (8014108 <tcp_rexmit+0xd0>)
 801404e:	482f      	ldr	r0, [pc, #188]	; (801410c <tcp_rexmit+0xd4>)
 8014050:	f003 f9e6 	bl	8017420 <iprintf>

  if (pcb->unacked == NULL) {
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014058:	2b00      	cmp	r3, #0
 801405a:	d102      	bne.n	8014062 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801405c:	f06f 0305 	mvn.w	r3, #5
 8014060:	e04c      	b.n	80140fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014066:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014068:	68b8      	ldr	r0, [r7, #8]
 801406a:	f7ff fe2d 	bl	8013cc8 <tcp_output_segment_busy>
 801406e:	4603      	mov	r3, r0
 8014070:	2b00      	cmp	r3, #0
 8014072:	d002      	beq.n	801407a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014074:	f06f 0305 	mvn.w	r3, #5
 8014078:	e040      	b.n	80140fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	681a      	ldr	r2, [r3, #0]
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	336c      	adds	r3, #108	; 0x6c
 8014086:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014088:	e002      	b.n	8014090 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d011      	beq.n	80140bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7f8 fd32 	bl	800cb0a <lwip_htonl>
 80140a6:	4604      	mov	r4, r0
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	68db      	ldr	r3, [r3, #12]
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7f8 fd2b 	bl	800cb0a <lwip_htonl>
 80140b4:	4603      	mov	r3, r0
 80140b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	dbe6      	blt.n	801408a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	681a      	ldr	r2, [r3, #0]
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	68ba      	ldr	r2, [r7, #8]
 80140c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d103      	bne.n	80140da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2200      	movs	r2, #0
 80140d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80140e0:	2bff      	cmp	r3, #255	; 0xff
 80140e2:	d007      	beq.n	80140f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80140ea:	3301      	adds	r3, #1
 80140ec:	b2da      	uxtb	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2200      	movs	r2, #0
 80140f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80140fa:	2300      	movs	r3, #0
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3714      	adds	r7, #20
 8014100:	46bd      	mov	sp, r7
 8014102:	bd90      	pop	{r4, r7, pc}
 8014104:	0801b364 	.word	0x0801b364
 8014108:	0801ba04 	.word	0x0801ba04
 801410c:	0801b3b8 	.word	0x0801b3b8

08014110 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d106      	bne.n	801412c <tcp_rexmit_fast+0x1c>
 801411e:	4b2a      	ldr	r3, [pc, #168]	; (80141c8 <tcp_rexmit_fast+0xb8>)
 8014120:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014124:	4929      	ldr	r1, [pc, #164]	; (80141cc <tcp_rexmit_fast+0xbc>)
 8014126:	482a      	ldr	r0, [pc, #168]	; (80141d0 <tcp_rexmit_fast+0xc0>)
 8014128:	f003 f97a 	bl	8017420 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014130:	2b00      	cmp	r3, #0
 8014132:	d044      	beq.n	80141be <tcp_rexmit_fast+0xae>
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	8b5b      	ldrh	r3, [r3, #26]
 8014138:	f003 0304 	and.w	r3, r3, #4
 801413c:	2b00      	cmp	r3, #0
 801413e:	d13e      	bne.n	80141be <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f7ff ff79 	bl	8014038 <tcp_rexmit>
 8014146:	4603      	mov	r3, r0
 8014148:	2b00      	cmp	r3, #0
 801414a:	d138      	bne.n	80141be <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014158:	4293      	cmp	r3, r2
 801415a:	bf28      	it	cs
 801415c:	4613      	movcs	r3, r2
 801415e:	b29b      	uxth	r3, r3
 8014160:	0fda      	lsrs	r2, r3, #31
 8014162:	4413      	add	r3, r2
 8014164:	105b      	asrs	r3, r3, #1
 8014166:	b29a      	uxth	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014174:	461a      	mov	r2, r3
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	429a      	cmp	r2, r3
 801417e:	d206      	bcs.n	801418e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014184:	005b      	lsls	r3, r3, #1
 8014186:	b29a      	uxth	r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014198:	4619      	mov	r1, r3
 801419a:	0049      	lsls	r1, r1, #1
 801419c:	440b      	add	r3, r1
 801419e:	b29b      	uxth	r3, r3
 80141a0:	4413      	add	r3, r2
 80141a2:	b29a      	uxth	r2, r3
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	8b5b      	ldrh	r3, [r3, #26]
 80141ae:	f043 0304 	orr.w	r3, r3, #4
 80141b2:	b29a      	uxth	r2, r3
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	2200      	movs	r2, #0
 80141bc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80141be:	bf00      	nop
 80141c0:	3708      	adds	r7, #8
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
 80141c6:	bf00      	nop
 80141c8:	0801b364 	.word	0x0801b364
 80141cc:	0801ba1c 	.word	0x0801ba1c
 80141d0:	0801b3b8 	.word	0x0801b3b8

080141d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b086      	sub	sp, #24
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	607b      	str	r3, [r7, #4]
 80141de:	460b      	mov	r3, r1
 80141e0:	817b      	strh	r3, [r7, #10]
 80141e2:	4613      	mov	r3, r2
 80141e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80141e6:	897a      	ldrh	r2, [r7, #10]
 80141e8:	893b      	ldrh	r3, [r7, #8]
 80141ea:	4413      	add	r3, r2
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	3314      	adds	r3, #20
 80141f0:	b29b      	uxth	r3, r3
 80141f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141f6:	4619      	mov	r1, r3
 80141f8:	2022      	movs	r0, #34	; 0x22
 80141fa:	f7f9 fd1f 	bl	800dc3c <pbuf_alloc>
 80141fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d04d      	beq.n	80142a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014206:	897b      	ldrh	r3, [r7, #10]
 8014208:	3313      	adds	r3, #19
 801420a:	697a      	ldr	r2, [r7, #20]
 801420c:	8952      	ldrh	r2, [r2, #10]
 801420e:	4293      	cmp	r3, r2
 8014210:	db06      	blt.n	8014220 <tcp_output_alloc_header_common+0x4c>
 8014212:	4b26      	ldr	r3, [pc, #152]	; (80142ac <tcp_output_alloc_header_common+0xd8>)
 8014214:	f240 7223 	movw	r2, #1827	; 0x723
 8014218:	4925      	ldr	r1, [pc, #148]	; (80142b0 <tcp_output_alloc_header_common+0xdc>)
 801421a:	4826      	ldr	r0, [pc, #152]	; (80142b4 <tcp_output_alloc_header_common+0xe0>)
 801421c:	f003 f900 	bl	8017420 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014226:	8c3b      	ldrh	r3, [r7, #32]
 8014228:	4618      	mov	r0, r3
 801422a:	f7f8 fc59 	bl	800cae0 <lwip_htons>
 801422e:	4603      	mov	r3, r0
 8014230:	461a      	mov	r2, r3
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014238:	4618      	mov	r0, r3
 801423a:	f7f8 fc51 	bl	800cae0 <lwip_htons>
 801423e:	4603      	mov	r3, r0
 8014240:	461a      	mov	r2, r3
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014246:	693b      	ldr	r3, [r7, #16]
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801424c:	68f8      	ldr	r0, [r7, #12]
 801424e:	f7f8 fc5c 	bl	800cb0a <lwip_htonl>
 8014252:	4602      	mov	r2, r0
 8014254:	693b      	ldr	r3, [r7, #16]
 8014256:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014258:	897b      	ldrh	r3, [r7, #10]
 801425a:	089b      	lsrs	r3, r3, #2
 801425c:	b29b      	uxth	r3, r3
 801425e:	3305      	adds	r3, #5
 8014260:	b29b      	uxth	r3, r3
 8014262:	031b      	lsls	r3, r3, #12
 8014264:	b29a      	uxth	r2, r3
 8014266:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801426a:	b29b      	uxth	r3, r3
 801426c:	4313      	orrs	r3, r2
 801426e:	b29b      	uxth	r3, r3
 8014270:	4618      	mov	r0, r3
 8014272:	f7f8 fc35 	bl	800cae0 <lwip_htons>
 8014276:	4603      	mov	r3, r0
 8014278:	461a      	mov	r2, r3
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801427e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014280:	4618      	mov	r0, r3
 8014282:	f7f8 fc2d 	bl	800cae0 <lwip_htons>
 8014286:	4603      	mov	r3, r0
 8014288:	461a      	mov	r2, r3
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	2200      	movs	r2, #0
 8014292:	741a      	strb	r2, [r3, #16]
 8014294:	2200      	movs	r2, #0
 8014296:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	2200      	movs	r2, #0
 801429c:	749a      	strb	r2, [r3, #18]
 801429e:	2200      	movs	r2, #0
 80142a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80142a2:	697b      	ldr	r3, [r7, #20]
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3718      	adds	r7, #24
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	0801b364 	.word	0x0801b364
 80142b0:	0801ba3c 	.word	0x0801ba3c
 80142b4:	0801b3b8 	.word	0x0801b3b8

080142b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80142b8:	b5b0      	push	{r4, r5, r7, lr}
 80142ba:	b08a      	sub	sp, #40	; 0x28
 80142bc:	af04      	add	r7, sp, #16
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	607b      	str	r3, [r7, #4]
 80142c2:	460b      	mov	r3, r1
 80142c4:	817b      	strh	r3, [r7, #10]
 80142c6:	4613      	mov	r3, r2
 80142c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d106      	bne.n	80142de <tcp_output_alloc_header+0x26>
 80142d0:	4b15      	ldr	r3, [pc, #84]	; (8014328 <tcp_output_alloc_header+0x70>)
 80142d2:	f240 7242 	movw	r2, #1858	; 0x742
 80142d6:	4915      	ldr	r1, [pc, #84]	; (801432c <tcp_output_alloc_header+0x74>)
 80142d8:	4815      	ldr	r0, [pc, #84]	; (8014330 <tcp_output_alloc_header+0x78>)
 80142da:	f003 f8a1 	bl	8017420 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	8adb      	ldrh	r3, [r3, #22]
 80142e6:	68fa      	ldr	r2, [r7, #12]
 80142e8:	8b12      	ldrh	r2, [r2, #24]
 80142ea:	68f9      	ldr	r1, [r7, #12]
 80142ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80142ee:	893d      	ldrh	r5, [r7, #8]
 80142f0:	897c      	ldrh	r4, [r7, #10]
 80142f2:	9103      	str	r1, [sp, #12]
 80142f4:	2110      	movs	r1, #16
 80142f6:	9102      	str	r1, [sp, #8]
 80142f8:	9201      	str	r2, [sp, #4]
 80142fa:	9300      	str	r3, [sp, #0]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	462a      	mov	r2, r5
 8014300:	4621      	mov	r1, r4
 8014302:	f7ff ff67 	bl	80141d4 <tcp_output_alloc_header_common>
 8014306:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d006      	beq.n	801431c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014312:	68fa      	ldr	r2, [r7, #12]
 8014314:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014316:	441a      	add	r2, r3
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801431c:	697b      	ldr	r3, [r7, #20]
}
 801431e:	4618      	mov	r0, r3
 8014320:	3718      	adds	r7, #24
 8014322:	46bd      	mov	sp, r7
 8014324:	bdb0      	pop	{r4, r5, r7, pc}
 8014326:	bf00      	nop
 8014328:	0801b364 	.word	0x0801b364
 801432c:	0801ba6c 	.word	0x0801ba6c
 8014330:	0801b3b8 	.word	0x0801b3b8

08014334 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b088      	sub	sp, #32
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	60b9      	str	r1, [r7, #8]
 801433e:	4611      	mov	r1, r2
 8014340:	461a      	mov	r2, r3
 8014342:	460b      	mov	r3, r1
 8014344:	71fb      	strb	r3, [r7, #7]
 8014346:	4613      	mov	r3, r2
 8014348:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801434a:	2300      	movs	r3, #0
 801434c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d106      	bne.n	8014362 <tcp_output_fill_options+0x2e>
 8014354:	4b13      	ldr	r3, [pc, #76]	; (80143a4 <tcp_output_fill_options+0x70>)
 8014356:	f240 7256 	movw	r2, #1878	; 0x756
 801435a:	4913      	ldr	r1, [pc, #76]	; (80143a8 <tcp_output_fill_options+0x74>)
 801435c:	4813      	ldr	r0, [pc, #76]	; (80143ac <tcp_output_fill_options+0x78>)
 801435e:	f003 f85f 	bl	8017420 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	3314      	adds	r3, #20
 801436c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801436e:	69bb      	ldr	r3, [r7, #24]
 8014370:	f103 0214 	add.w	r2, r3, #20
 8014374:	8bfb      	ldrh	r3, [r7, #30]
 8014376:	009b      	lsls	r3, r3, #2
 8014378:	4619      	mov	r1, r3
 801437a:	79fb      	ldrb	r3, [r7, #7]
 801437c:	009b      	lsls	r3, r3, #2
 801437e:	f003 0304 	and.w	r3, r3, #4
 8014382:	440b      	add	r3, r1
 8014384:	4413      	add	r3, r2
 8014386:	697a      	ldr	r2, [r7, #20]
 8014388:	429a      	cmp	r2, r3
 801438a:	d006      	beq.n	801439a <tcp_output_fill_options+0x66>
 801438c:	4b05      	ldr	r3, [pc, #20]	; (80143a4 <tcp_output_fill_options+0x70>)
 801438e:	f240 7275 	movw	r2, #1909	; 0x775
 8014392:	4907      	ldr	r1, [pc, #28]	; (80143b0 <tcp_output_fill_options+0x7c>)
 8014394:	4805      	ldr	r0, [pc, #20]	; (80143ac <tcp_output_fill_options+0x78>)
 8014396:	f003 f843 	bl	8017420 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801439a:	bf00      	nop
 801439c:	3720      	adds	r7, #32
 801439e:	46bd      	mov	sp, r7
 80143a0:	bd80      	pop	{r7, pc}
 80143a2:	bf00      	nop
 80143a4:	0801b364 	.word	0x0801b364
 80143a8:	0801ba94 	.word	0x0801ba94
 80143ac:	0801b3b8 	.word	0x0801b3b8
 80143b0:	0801b98c 	.word	0x0801b98c

080143b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b08a      	sub	sp, #40	; 0x28
 80143b8:	af04      	add	r7, sp, #16
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	607a      	str	r2, [r7, #4]
 80143c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d106      	bne.n	80143d6 <tcp_output_control_segment+0x22>
 80143c8:	4b1c      	ldr	r3, [pc, #112]	; (801443c <tcp_output_control_segment+0x88>)
 80143ca:	f240 7287 	movw	r2, #1927	; 0x787
 80143ce:	491c      	ldr	r1, [pc, #112]	; (8014440 <tcp_output_control_segment+0x8c>)
 80143d0:	481c      	ldr	r0, [pc, #112]	; (8014444 <tcp_output_control_segment+0x90>)
 80143d2:	f003 f825 	bl	8017420 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80143d6:	683a      	ldr	r2, [r7, #0]
 80143d8:	6879      	ldr	r1, [r7, #4]
 80143da:	68f8      	ldr	r0, [r7, #12]
 80143dc:	f7fe fae8 	bl	80129b0 <tcp_route>
 80143e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d102      	bne.n	80143ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80143e8:	23fc      	movs	r3, #252	; 0xfc
 80143ea:	75fb      	strb	r3, [r7, #23]
 80143ec:	e01c      	b.n	8014428 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d006      	beq.n	8014402 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	7adb      	ldrb	r3, [r3, #11]
 80143f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	7a9b      	ldrb	r3, [r3, #10]
 80143fe:	757b      	strb	r3, [r7, #21]
 8014400:	e003      	b.n	801440a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014402:	23ff      	movs	r3, #255	; 0xff
 8014404:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014406:	2300      	movs	r3, #0
 8014408:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801440a:	7dba      	ldrb	r2, [r7, #22]
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	9302      	str	r3, [sp, #8]
 8014410:	2306      	movs	r3, #6
 8014412:	9301      	str	r3, [sp, #4]
 8014414:	7d7b      	ldrb	r3, [r7, #21]
 8014416:	9300      	str	r3, [sp, #0]
 8014418:	4613      	mov	r3, r2
 801441a:	683a      	ldr	r2, [r7, #0]
 801441c:	6879      	ldr	r1, [r7, #4]
 801441e:	68b8      	ldr	r0, [r7, #8]
 8014420:	f001 ff70 	bl	8016304 <ip4_output_if>
 8014424:	4603      	mov	r3, r0
 8014426:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014428:	68b8      	ldr	r0, [r7, #8]
 801442a:	f7f9 feeb 	bl	800e204 <pbuf_free>
  return err;
 801442e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014432:	4618      	mov	r0, r3
 8014434:	3718      	adds	r7, #24
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	0801b364 	.word	0x0801b364
 8014440:	0801babc 	.word	0x0801babc
 8014444:	0801b3b8 	.word	0x0801b3b8

08014448 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014448:	b590      	push	{r4, r7, lr}
 801444a:	b08b      	sub	sp, #44	; 0x2c
 801444c:	af04      	add	r7, sp, #16
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	60b9      	str	r1, [r7, #8]
 8014452:	607a      	str	r2, [r7, #4]
 8014454:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d106      	bne.n	801446a <tcp_rst+0x22>
 801445c:	4b1f      	ldr	r3, [pc, #124]	; (80144dc <tcp_rst+0x94>)
 801445e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014462:	491f      	ldr	r1, [pc, #124]	; (80144e0 <tcp_rst+0x98>)
 8014464:	481f      	ldr	r0, [pc, #124]	; (80144e4 <tcp_rst+0x9c>)
 8014466:	f002 ffdb 	bl	8017420 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801446c:	2b00      	cmp	r3, #0
 801446e:	d106      	bne.n	801447e <tcp_rst+0x36>
 8014470:	4b1a      	ldr	r3, [pc, #104]	; (80144dc <tcp_rst+0x94>)
 8014472:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014476:	491c      	ldr	r1, [pc, #112]	; (80144e8 <tcp_rst+0xa0>)
 8014478:	481a      	ldr	r0, [pc, #104]	; (80144e4 <tcp_rst+0x9c>)
 801447a:	f002 ffd1 	bl	8017420 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801447e:	2300      	movs	r3, #0
 8014480:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014482:	f246 0308 	movw	r3, #24584	; 0x6008
 8014486:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014488:	7dfb      	ldrb	r3, [r7, #23]
 801448a:	b29c      	uxth	r4, r3
 801448c:	68b8      	ldr	r0, [r7, #8]
 801448e:	f7f8 fb3c 	bl	800cb0a <lwip_htonl>
 8014492:	4602      	mov	r2, r0
 8014494:	8abb      	ldrh	r3, [r7, #20]
 8014496:	9303      	str	r3, [sp, #12]
 8014498:	2314      	movs	r3, #20
 801449a:	9302      	str	r3, [sp, #8]
 801449c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801449e:	9301      	str	r3, [sp, #4]
 80144a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80144a2:	9300      	str	r3, [sp, #0]
 80144a4:	4613      	mov	r3, r2
 80144a6:	2200      	movs	r2, #0
 80144a8:	4621      	mov	r1, r4
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f7ff fe92 	bl	80141d4 <tcp_output_alloc_header_common>
 80144b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d00c      	beq.n	80144d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80144b8:	7dfb      	ldrb	r3, [r7, #23]
 80144ba:	2200      	movs	r2, #0
 80144bc:	6939      	ldr	r1, [r7, #16]
 80144be:	68f8      	ldr	r0, [r7, #12]
 80144c0:	f7ff ff38 	bl	8014334 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80144c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c6:	683a      	ldr	r2, [r7, #0]
 80144c8:	6939      	ldr	r1, [r7, #16]
 80144ca:	68f8      	ldr	r0, [r7, #12]
 80144cc:	f7ff ff72 	bl	80143b4 <tcp_output_control_segment>
 80144d0:	e000      	b.n	80144d4 <tcp_rst+0x8c>
    return;
 80144d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80144d4:	371c      	adds	r7, #28
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd90      	pop	{r4, r7, pc}
 80144da:	bf00      	nop
 80144dc:	0801b364 	.word	0x0801b364
 80144e0:	0801bae8 	.word	0x0801bae8
 80144e4:	0801b3b8 	.word	0x0801b3b8
 80144e8:	0801bb04 	.word	0x0801bb04

080144ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80144ec:	b590      	push	{r4, r7, lr}
 80144ee:	b087      	sub	sp, #28
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80144f4:	2300      	movs	r3, #0
 80144f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80144f8:	2300      	movs	r3, #0
 80144fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d106      	bne.n	8014510 <tcp_send_empty_ack+0x24>
 8014502:	4b28      	ldr	r3, [pc, #160]	; (80145a4 <tcp_send_empty_ack+0xb8>)
 8014504:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014508:	4927      	ldr	r1, [pc, #156]	; (80145a8 <tcp_send_empty_ack+0xbc>)
 801450a:	4828      	ldr	r0, [pc, #160]	; (80145ac <tcp_send_empty_ack+0xc0>)
 801450c:	f002 ff88 	bl	8017420 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014510:	7dfb      	ldrb	r3, [r7, #23]
 8014512:	009b      	lsls	r3, r3, #2
 8014514:	b2db      	uxtb	r3, r3
 8014516:	f003 0304 	and.w	r3, r3, #4
 801451a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801451c:	7d7b      	ldrb	r3, [r7, #21]
 801451e:	b29c      	uxth	r4, r3
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014524:	4618      	mov	r0, r3
 8014526:	f7f8 faf0 	bl	800cb0a <lwip_htonl>
 801452a:	4603      	mov	r3, r0
 801452c:	2200      	movs	r2, #0
 801452e:	4621      	mov	r1, r4
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f7ff fec1 	bl	80142b8 <tcp_output_alloc_header>
 8014536:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d109      	bne.n	8014552 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	8b5b      	ldrh	r3, [r3, #26]
 8014542:	f043 0303 	orr.w	r3, r3, #3
 8014546:	b29a      	uxth	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801454c:	f06f 0301 	mvn.w	r3, #1
 8014550:	e023      	b.n	801459a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014552:	7dbb      	ldrb	r3, [r7, #22]
 8014554:	7dfa      	ldrb	r2, [r7, #23]
 8014556:	6939      	ldr	r1, [r7, #16]
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f7ff feeb 	bl	8014334 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801455e:	687a      	ldr	r2, [r7, #4]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	3304      	adds	r3, #4
 8014564:	6939      	ldr	r1, [r7, #16]
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f7ff ff24 	bl	80143b4 <tcp_output_control_segment>
 801456c:	4603      	mov	r3, r0
 801456e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d007      	beq.n	8014588 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	8b5b      	ldrh	r3, [r3, #26]
 801457c:	f043 0303 	orr.w	r3, r3, #3
 8014580:	b29a      	uxth	r2, r3
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	835a      	strh	r2, [r3, #26]
 8014586:	e006      	b.n	8014596 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	8b5b      	ldrh	r3, [r3, #26]
 801458c:	f023 0303 	bic.w	r3, r3, #3
 8014590:	b29a      	uxth	r2, r3
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801459a:	4618      	mov	r0, r3
 801459c:	371c      	adds	r7, #28
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd90      	pop	{r4, r7, pc}
 80145a2:	bf00      	nop
 80145a4:	0801b364 	.word	0x0801b364
 80145a8:	0801bb20 	.word	0x0801bb20
 80145ac:	0801b3b8 	.word	0x0801b3b8

080145b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80145b0:	b590      	push	{r4, r7, lr}
 80145b2:	b087      	sub	sp, #28
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80145b8:	2300      	movs	r3, #0
 80145ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d106      	bne.n	80145d0 <tcp_keepalive+0x20>
 80145c2:	4b18      	ldr	r3, [pc, #96]	; (8014624 <tcp_keepalive+0x74>)
 80145c4:	f640 0224 	movw	r2, #2084	; 0x824
 80145c8:	4917      	ldr	r1, [pc, #92]	; (8014628 <tcp_keepalive+0x78>)
 80145ca:	4818      	ldr	r0, [pc, #96]	; (801462c <tcp_keepalive+0x7c>)
 80145cc:	f002 ff28 	bl	8017420 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80145d0:	7dfb      	ldrb	r3, [r7, #23]
 80145d2:	b29c      	uxth	r4, r3
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145d8:	3b01      	subs	r3, #1
 80145da:	4618      	mov	r0, r3
 80145dc:	f7f8 fa95 	bl	800cb0a <lwip_htonl>
 80145e0:	4603      	mov	r3, r0
 80145e2:	2200      	movs	r2, #0
 80145e4:	4621      	mov	r1, r4
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f7ff fe66 	bl	80142b8 <tcp_output_alloc_header>
 80145ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d102      	bne.n	80145fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80145f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145f8:	e010      	b.n	801461c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80145fa:	7dfb      	ldrb	r3, [r7, #23]
 80145fc:	2200      	movs	r2, #0
 80145fe:	6939      	ldr	r1, [r7, #16]
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7ff fe97 	bl	8014334 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014606:	687a      	ldr	r2, [r7, #4]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	3304      	adds	r3, #4
 801460c:	6939      	ldr	r1, [r7, #16]
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f7ff fed0 	bl	80143b4 <tcp_output_control_segment>
 8014614:	4603      	mov	r3, r0
 8014616:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801461c:	4618      	mov	r0, r3
 801461e:	371c      	adds	r7, #28
 8014620:	46bd      	mov	sp, r7
 8014622:	bd90      	pop	{r4, r7, pc}
 8014624:	0801b364 	.word	0x0801b364
 8014628:	0801bb40 	.word	0x0801bb40
 801462c:	0801b3b8 	.word	0x0801b3b8

08014630 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014630:	b590      	push	{r4, r7, lr}
 8014632:	b08b      	sub	sp, #44	; 0x2c
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014638:	2300      	movs	r3, #0
 801463a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d106      	bne.n	8014652 <tcp_zero_window_probe+0x22>
 8014644:	4b4c      	ldr	r3, [pc, #304]	; (8014778 <tcp_zero_window_probe+0x148>)
 8014646:	f640 024f 	movw	r2, #2127	; 0x84f
 801464a:	494c      	ldr	r1, [pc, #304]	; (801477c <tcp_zero_window_probe+0x14c>)
 801464c:	484c      	ldr	r0, [pc, #304]	; (8014780 <tcp_zero_window_probe+0x150>)
 801464e:	f002 fee7 	bl	8017420 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014656:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014658:	6a3b      	ldr	r3, [r7, #32]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d101      	bne.n	8014662 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801465e:	2300      	movs	r3, #0
 8014660:	e086      	b.n	8014770 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014668:	2bff      	cmp	r3, #255	; 0xff
 801466a:	d007      	beq.n	801467c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014672:	3301      	adds	r3, #1
 8014674:	b2da      	uxtb	r2, r3
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801467c:	6a3b      	ldr	r3, [r7, #32]
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	899b      	ldrh	r3, [r3, #12]
 8014682:	b29b      	uxth	r3, r3
 8014684:	4618      	mov	r0, r3
 8014686:	f7f8 fa2b 	bl	800cae0 <lwip_htons>
 801468a:	4603      	mov	r3, r0
 801468c:	b2db      	uxtb	r3, r3
 801468e:	f003 0301 	and.w	r3, r3, #1
 8014692:	2b00      	cmp	r3, #0
 8014694:	d005      	beq.n	80146a2 <tcp_zero_window_probe+0x72>
 8014696:	6a3b      	ldr	r3, [r7, #32]
 8014698:	891b      	ldrh	r3, [r3, #8]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d101      	bne.n	80146a2 <tcp_zero_window_probe+0x72>
 801469e:	2301      	movs	r3, #1
 80146a0:	e000      	b.n	80146a4 <tcp_zero_window_probe+0x74>
 80146a2:	2300      	movs	r3, #0
 80146a4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80146a6:	7ffb      	ldrb	r3, [r7, #31]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	bf0c      	ite	eq
 80146ac:	2301      	moveq	r3, #1
 80146ae:	2300      	movne	r3, #0
 80146b0:	b2db      	uxtb	r3, r3
 80146b2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80146b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80146b8:	b299      	uxth	r1, r3
 80146ba:	6a3b      	ldr	r3, [r7, #32]
 80146bc:	68db      	ldr	r3, [r3, #12]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	8bba      	ldrh	r2, [r7, #28]
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f7ff fdf8 	bl	80142b8 <tcp_output_alloc_header>
 80146c8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d102      	bne.n	80146d6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80146d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146d4:	e04c      	b.n	8014770 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	685b      	ldr	r3, [r3, #4]
 80146da:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80146dc:	7ffb      	ldrb	r3, [r7, #31]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d011      	beq.n	8014706 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	899b      	ldrh	r3, [r3, #12]
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	b21b      	sxth	r3, r3
 80146ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80146ee:	b21c      	sxth	r4, r3
 80146f0:	2011      	movs	r0, #17
 80146f2:	f7f8 f9f5 	bl	800cae0 <lwip_htons>
 80146f6:	4603      	mov	r3, r0
 80146f8:	b21b      	sxth	r3, r3
 80146fa:	4323      	orrs	r3, r4
 80146fc:	b21b      	sxth	r3, r3
 80146fe:	b29a      	uxth	r2, r3
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	819a      	strh	r2, [r3, #12]
 8014704:	e010      	b.n	8014728 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	3314      	adds	r3, #20
 801470c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801470e:	6a3b      	ldr	r3, [r7, #32]
 8014710:	6858      	ldr	r0, [r3, #4]
 8014712:	6a3b      	ldr	r3, [r7, #32]
 8014714:	685b      	ldr	r3, [r3, #4]
 8014716:	891a      	ldrh	r2, [r3, #8]
 8014718:	6a3b      	ldr	r3, [r7, #32]
 801471a:	891b      	ldrh	r3, [r3, #8]
 801471c:	1ad3      	subs	r3, r2, r3
 801471e:	b29b      	uxth	r3, r3
 8014720:	2201      	movs	r2, #1
 8014722:	6939      	ldr	r1, [r7, #16]
 8014724:	f7f9 ff58 	bl	800e5d8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014728:	6a3b      	ldr	r3, [r7, #32]
 801472a:	68db      	ldr	r3, [r3, #12]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	4618      	mov	r0, r3
 8014730:	f7f8 f9eb 	bl	800cb0a <lwip_htonl>
 8014734:	4603      	mov	r3, r0
 8014736:	3301      	adds	r3, #1
 8014738:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	1ad3      	subs	r3, r2, r3
 8014742:	2b00      	cmp	r3, #0
 8014744:	da02      	bge.n	801474c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	68fa      	ldr	r2, [r7, #12]
 801474a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801474c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014750:	2200      	movs	r2, #0
 8014752:	69b9      	ldr	r1, [r7, #24]
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f7ff fded 	bl	8014334 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	3304      	adds	r3, #4
 8014760:	69b9      	ldr	r1, [r7, #24]
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f7ff fe26 	bl	80143b4 <tcp_output_control_segment>
 8014768:	4603      	mov	r3, r0
 801476a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801476c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014770:	4618      	mov	r0, r3
 8014772:	372c      	adds	r7, #44	; 0x2c
 8014774:	46bd      	mov	sp, r7
 8014776:	bd90      	pop	{r4, r7, pc}
 8014778:	0801b364 	.word	0x0801b364
 801477c:	0801bb5c 	.word	0x0801bb5c
 8014780:	0801b3b8 	.word	0x0801b3b8

08014784 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801478c:	f7fa f812 	bl	800e7b4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014790:	4b0a      	ldr	r3, [pc, #40]	; (80147bc <tcpip_tcp_timer+0x38>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d103      	bne.n	80147a0 <tcpip_tcp_timer+0x1c>
 8014798:	4b09      	ldr	r3, [pc, #36]	; (80147c0 <tcpip_tcp_timer+0x3c>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d005      	beq.n	80147ac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80147a0:	2200      	movs	r2, #0
 80147a2:	4908      	ldr	r1, [pc, #32]	; (80147c4 <tcpip_tcp_timer+0x40>)
 80147a4:	20fa      	movs	r0, #250	; 0xfa
 80147a6:	f000 f8f3 	bl	8014990 <sys_timeout>
 80147aa:	e003      	b.n	80147b4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80147ac:	4b06      	ldr	r3, [pc, #24]	; (80147c8 <tcpip_tcp_timer+0x44>)
 80147ae:	2200      	movs	r2, #0
 80147b0:	601a      	str	r2, [r3, #0]
  }
}
 80147b2:	bf00      	nop
 80147b4:	bf00      	nop
 80147b6:	3708      	adds	r7, #8
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	20011830 	.word	0x20011830
 80147c0:	20011840 	.word	0x20011840
 80147c4:	08014785 	.word	0x08014785
 80147c8:	20001a48 	.word	0x20001a48

080147cc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80147d0:	4b0a      	ldr	r3, [pc, #40]	; (80147fc <tcp_timer_needed+0x30>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d10f      	bne.n	80147f8 <tcp_timer_needed+0x2c>
 80147d8:	4b09      	ldr	r3, [pc, #36]	; (8014800 <tcp_timer_needed+0x34>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d103      	bne.n	80147e8 <tcp_timer_needed+0x1c>
 80147e0:	4b08      	ldr	r3, [pc, #32]	; (8014804 <tcp_timer_needed+0x38>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d007      	beq.n	80147f8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80147e8:	4b04      	ldr	r3, [pc, #16]	; (80147fc <tcp_timer_needed+0x30>)
 80147ea:	2201      	movs	r2, #1
 80147ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80147ee:	2200      	movs	r2, #0
 80147f0:	4905      	ldr	r1, [pc, #20]	; (8014808 <tcp_timer_needed+0x3c>)
 80147f2:	20fa      	movs	r0, #250	; 0xfa
 80147f4:	f000 f8cc 	bl	8014990 <sys_timeout>
  }
}
 80147f8:	bf00      	nop
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	20001a48 	.word	0x20001a48
 8014800:	20011830 	.word	0x20011830
 8014804:	20011840 	.word	0x20011840
 8014808:	08014785 	.word	0x08014785

0801480c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b086      	sub	sp, #24
 8014810:	af00      	add	r7, sp, #0
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014818:	2006      	movs	r0, #6
 801481a:	f7f8 fe95 	bl	800d548 <memp_malloc>
 801481e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d109      	bne.n	801483a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d151      	bne.n	80148d0 <sys_timeout_abs+0xc4>
 801482c:	4b2a      	ldr	r3, [pc, #168]	; (80148d8 <sys_timeout_abs+0xcc>)
 801482e:	22be      	movs	r2, #190	; 0xbe
 8014830:	492a      	ldr	r1, [pc, #168]	; (80148dc <sys_timeout_abs+0xd0>)
 8014832:	482b      	ldr	r0, [pc, #172]	; (80148e0 <sys_timeout_abs+0xd4>)
 8014834:	f002 fdf4 	bl	8017420 <iprintf>
    return;
 8014838:	e04a      	b.n	80148d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801483a:	693b      	ldr	r3, [r7, #16]
 801483c:	2200      	movs	r2, #0
 801483e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	68ba      	ldr	r2, [r7, #8]
 8014844:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014852:	4b24      	ldr	r3, [pc, #144]	; (80148e4 <sys_timeout_abs+0xd8>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d103      	bne.n	8014862 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801485a:	4a22      	ldr	r2, [pc, #136]	; (80148e4 <sys_timeout_abs+0xd8>)
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	6013      	str	r3, [r2, #0]
    return;
 8014860:	e037      	b.n	80148d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	685a      	ldr	r2, [r3, #4]
 8014866:	4b1f      	ldr	r3, [pc, #124]	; (80148e4 <sys_timeout_abs+0xd8>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	685b      	ldr	r3, [r3, #4]
 801486c:	1ad3      	subs	r3, r2, r3
 801486e:	0fdb      	lsrs	r3, r3, #31
 8014870:	f003 0301 	and.w	r3, r3, #1
 8014874:	b2db      	uxtb	r3, r3
 8014876:	2b00      	cmp	r3, #0
 8014878:	d007      	beq.n	801488a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801487a:	4b1a      	ldr	r3, [pc, #104]	; (80148e4 <sys_timeout_abs+0xd8>)
 801487c:	681a      	ldr	r2, [r3, #0]
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014882:	4a18      	ldr	r2, [pc, #96]	; (80148e4 <sys_timeout_abs+0xd8>)
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	6013      	str	r3, [r2, #0]
 8014888:	e023      	b.n	80148d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801488a:	4b16      	ldr	r3, [pc, #88]	; (80148e4 <sys_timeout_abs+0xd8>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	617b      	str	r3, [r7, #20]
 8014890:	e01a      	b.n	80148c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d00b      	beq.n	80148b2 <sys_timeout_abs+0xa6>
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	685a      	ldr	r2, [r3, #4]
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	1ad3      	subs	r3, r2, r3
 80148a6:	0fdb      	lsrs	r3, r3, #31
 80148a8:	f003 0301 	and.w	r3, r3, #1
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d007      	beq.n	80148c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	681a      	ldr	r2, [r3, #0]
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	693a      	ldr	r2, [r7, #16]
 80148be:	601a      	str	r2, [r3, #0]
        break;
 80148c0:	e007      	b.n	80148d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	617b      	str	r3, [r7, #20]
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d1e1      	bne.n	8014892 <sys_timeout_abs+0x86>
 80148ce:	e000      	b.n	80148d2 <sys_timeout_abs+0xc6>
    return;
 80148d0:	bf00      	nop
      }
    }
  }
}
 80148d2:	3718      	adds	r7, #24
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	0801bb80 	.word	0x0801bb80
 80148dc:	0801bbb4 	.word	0x0801bbb4
 80148e0:	0801bbf4 	.word	0x0801bbf4
 80148e4:	20001a40 	.word	0x20001a40

080148e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b086      	sub	sp, #24
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80148f4:	697b      	ldr	r3, [r7, #20]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	4798      	blx	r3

  now = sys_now();
 80148fa:	f7f3 fc9b 	bl	8008234 <sys_now>
 80148fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	4b0f      	ldr	r3, [pc, #60]	; (8014944 <lwip_cyclic_timer+0x5c>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	4413      	add	r3, r2
 801490a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801490c:	68fa      	ldr	r2, [r7, #12]
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	1ad3      	subs	r3, r2, r3
 8014912:	0fdb      	lsrs	r3, r3, #31
 8014914:	f003 0301 	and.w	r3, r3, #1
 8014918:	b2db      	uxtb	r3, r3
 801491a:	2b00      	cmp	r3, #0
 801491c:	d009      	beq.n	8014932 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	4413      	add	r3, r2
 8014926:	687a      	ldr	r2, [r7, #4]
 8014928:	4907      	ldr	r1, [pc, #28]	; (8014948 <lwip_cyclic_timer+0x60>)
 801492a:	4618      	mov	r0, r3
 801492c:	f7ff ff6e 	bl	801480c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014930:	e004      	b.n	801493c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	4904      	ldr	r1, [pc, #16]	; (8014948 <lwip_cyclic_timer+0x60>)
 8014936:	68f8      	ldr	r0, [r7, #12]
 8014938:	f7ff ff68 	bl	801480c <sys_timeout_abs>
}
 801493c:	bf00      	nop
 801493e:	3718      	adds	r7, #24
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	20001a44 	.word	0x20001a44
 8014948:	080148e9 	.word	0x080148e9

0801494c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014952:	2301      	movs	r3, #1
 8014954:	607b      	str	r3, [r7, #4]
 8014956:	e00e      	b.n	8014976 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014958:	4a0b      	ldr	r2, [pc, #44]	; (8014988 <sys_timeouts_init+0x3c>)
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	00db      	lsls	r3, r3, #3
 8014964:	4a08      	ldr	r2, [pc, #32]	; (8014988 <sys_timeouts_init+0x3c>)
 8014966:	4413      	add	r3, r2
 8014968:	461a      	mov	r2, r3
 801496a:	4908      	ldr	r1, [pc, #32]	; (801498c <sys_timeouts_init+0x40>)
 801496c:	f000 f810 	bl	8014990 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	3301      	adds	r3, #1
 8014974:	607b      	str	r3, [r7, #4]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2b02      	cmp	r3, #2
 801497a:	d9ed      	bls.n	8014958 <sys_timeouts_init+0xc>
  }
}
 801497c:	bf00      	nop
 801497e:	bf00      	nop
 8014980:	3708      	adds	r7, #8
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
 8014986:	bf00      	nop
 8014988:	0801ee84 	.word	0x0801ee84
 801498c:	080148e9 	.word	0x080148e9

08014990 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b086      	sub	sp, #24
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	60b9      	str	r1, [r7, #8]
 801499a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80149a2:	d306      	bcc.n	80149b2 <sys_timeout+0x22>
 80149a4:	4b0a      	ldr	r3, [pc, #40]	; (80149d0 <sys_timeout+0x40>)
 80149a6:	f240 1229 	movw	r2, #297	; 0x129
 80149aa:	490a      	ldr	r1, [pc, #40]	; (80149d4 <sys_timeout+0x44>)
 80149ac:	480a      	ldr	r0, [pc, #40]	; (80149d8 <sys_timeout+0x48>)
 80149ae:	f002 fd37 	bl	8017420 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80149b2:	f7f3 fc3f 	bl	8008234 <sys_now>
 80149b6:	4602      	mov	r2, r0
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	4413      	add	r3, r2
 80149bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	68b9      	ldr	r1, [r7, #8]
 80149c2:	6978      	ldr	r0, [r7, #20]
 80149c4:	f7ff ff22 	bl	801480c <sys_timeout_abs>
#endif
}
 80149c8:	bf00      	nop
 80149ca:	3718      	adds	r7, #24
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	0801bb80 	.word	0x0801bb80
 80149d4:	0801bc1c 	.word	0x0801bc1c
 80149d8:	0801bbf4 	.word	0x0801bbf4

080149dc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b084      	sub	sp, #16
 80149e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80149e2:	f7f3 fc27 	bl	8008234 <sys_now>
 80149e6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80149e8:	4b1a      	ldr	r3, [pc, #104]	; (8014a54 <sys_check_timeouts+0x78>)
 80149ea:	781b      	ldrb	r3, [r3, #0]
 80149ec:	b2db      	uxtb	r3, r3
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d001      	beq.n	80149f6 <sys_check_timeouts+0x1a>
 80149f2:	f7f9 f8cd 	bl	800db90 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80149f6:	4b18      	ldr	r3, [pc, #96]	; (8014a58 <sys_check_timeouts+0x7c>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d022      	beq.n	8014a48 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	685b      	ldr	r3, [r3, #4]
 8014a06:	68fa      	ldr	r2, [r7, #12]
 8014a08:	1ad3      	subs	r3, r2, r3
 8014a0a:	0fdb      	lsrs	r3, r3, #31
 8014a0c:	f003 0301 	and.w	r3, r3, #1
 8014a10:	b2db      	uxtb	r3, r3
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d11a      	bne.n	8014a4c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	4a0f      	ldr	r2, [pc, #60]	; (8014a58 <sys_check_timeouts+0x7c>)
 8014a1c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	689b      	ldr	r3, [r3, #8]
 8014a22:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	68db      	ldr	r3, [r3, #12]
 8014a28:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	685b      	ldr	r3, [r3, #4]
 8014a2e:	4a0b      	ldr	r2, [pc, #44]	; (8014a5c <sys_check_timeouts+0x80>)
 8014a30:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014a32:	68b9      	ldr	r1, [r7, #8]
 8014a34:	2006      	movs	r0, #6
 8014a36:	f7f8 fdd3 	bl	800d5e0 <memp_free>
    if (handler != NULL) {
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d0d3      	beq.n	80149e8 <sys_check_timeouts+0xc>
      handler(arg);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6838      	ldr	r0, [r7, #0]
 8014a44:	4798      	blx	r3
  do {
 8014a46:	e7cf      	b.n	80149e8 <sys_check_timeouts+0xc>
      return;
 8014a48:	bf00      	nop
 8014a4a:	e000      	b.n	8014a4e <sys_check_timeouts+0x72>
      return;
 8014a4c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014a4e:	3710      	adds	r7, #16
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}
 8014a54:	20011828 	.word	0x20011828
 8014a58:	20001a40 	.word	0x20001a40
 8014a5c:	20001a44 	.word	0x20001a44

08014a60 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014a64:	f002 fd6a 	bl	801753c <rand>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	b29b      	uxth	r3, r3
 8014a6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014a76:	b29a      	uxth	r2, r3
 8014a78:	4b01      	ldr	r3, [pc, #4]	; (8014a80 <udp_init+0x20>)
 8014a7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014a7c:	bf00      	nop
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	200004ac 	.word	0x200004ac

08014a84 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b084      	sub	sp, #16
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	4613      	mov	r3, r2
 8014a90:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d105      	bne.n	8014aa4 <udp_input_local_match+0x20>
 8014a98:	4b27      	ldr	r3, [pc, #156]	; (8014b38 <udp_input_local_match+0xb4>)
 8014a9a:	2287      	movs	r2, #135	; 0x87
 8014a9c:	4927      	ldr	r1, [pc, #156]	; (8014b3c <udp_input_local_match+0xb8>)
 8014a9e:	4828      	ldr	r0, [pc, #160]	; (8014b40 <udp_input_local_match+0xbc>)
 8014aa0:	f002 fcbe 	bl	8017420 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d105      	bne.n	8014ab6 <udp_input_local_match+0x32>
 8014aaa:	4b23      	ldr	r3, [pc, #140]	; (8014b38 <udp_input_local_match+0xb4>)
 8014aac:	2288      	movs	r2, #136	; 0x88
 8014aae:	4925      	ldr	r1, [pc, #148]	; (8014b44 <udp_input_local_match+0xc0>)
 8014ab0:	4823      	ldr	r0, [pc, #140]	; (8014b40 <udp_input_local_match+0xbc>)
 8014ab2:	f002 fcb5 	bl	8017420 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	7a1b      	ldrb	r3, [r3, #8]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d00b      	beq.n	8014ad6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	7a1a      	ldrb	r2, [r3, #8]
 8014ac2:	4b21      	ldr	r3, [pc, #132]	; (8014b48 <udp_input_local_match+0xc4>)
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014aca:	3301      	adds	r3, #1
 8014acc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d001      	beq.n	8014ad6 <udp_input_local_match+0x52>
    return 0;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	e02b      	b.n	8014b2e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014ad6:	79fb      	ldrb	r3, [r7, #7]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d018      	beq.n	8014b0e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d013      	beq.n	8014b0a <udp_input_local_match+0x86>
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d00f      	beq.n	8014b0a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014aea:	4b17      	ldr	r3, [pc, #92]	; (8014b48 <udp_input_local_match+0xc4>)
 8014aec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014af2:	d00a      	beq.n	8014b0a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681a      	ldr	r2, [r3, #0]
 8014af8:	4b13      	ldr	r3, [pc, #76]	; (8014b48 <udp_input_local_match+0xc4>)
 8014afa:	695b      	ldr	r3, [r3, #20]
 8014afc:	405a      	eors	r2, r3
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	3308      	adds	r3, #8
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d110      	bne.n	8014b2c <udp_input_local_match+0xa8>
          return 1;
 8014b0a:	2301      	movs	r3, #1
 8014b0c:	e00f      	b.n	8014b2e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d009      	beq.n	8014b28 <udp_input_local_match+0xa4>
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d005      	beq.n	8014b28 <udp_input_local_match+0xa4>
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <udp_input_local_match+0xc4>)
 8014b22:	695b      	ldr	r3, [r3, #20]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d101      	bne.n	8014b2c <udp_input_local_match+0xa8>
        return 1;
 8014b28:	2301      	movs	r3, #1
 8014b2a:	e000      	b.n	8014b2e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014b2c:	2300      	movs	r3, #0
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3710      	adds	r7, #16
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	0801bc68 	.word	0x0801bc68
 8014b3c:	0801bc98 	.word	0x0801bc98
 8014b40:	0801bcbc 	.word	0x0801bcbc
 8014b44:	0801bce4 	.word	0x0801bce4
 8014b48:	2000e2ec 	.word	0x2000e2ec

08014b4c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014b4c:	b590      	push	{r4, r7, lr}
 8014b4e:	b08d      	sub	sp, #52	; 0x34
 8014b50:	af02      	add	r7, sp, #8
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014b56:	2300      	movs	r3, #0
 8014b58:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d105      	bne.n	8014b6c <udp_input+0x20>
 8014b60:	4b7c      	ldr	r3, [pc, #496]	; (8014d54 <udp_input+0x208>)
 8014b62:	22cf      	movs	r2, #207	; 0xcf
 8014b64:	497c      	ldr	r1, [pc, #496]	; (8014d58 <udp_input+0x20c>)
 8014b66:	487d      	ldr	r0, [pc, #500]	; (8014d5c <udp_input+0x210>)
 8014b68:	f002 fc5a 	bl	8017420 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d105      	bne.n	8014b7e <udp_input+0x32>
 8014b72:	4b78      	ldr	r3, [pc, #480]	; (8014d54 <udp_input+0x208>)
 8014b74:	22d0      	movs	r2, #208	; 0xd0
 8014b76:	497a      	ldr	r1, [pc, #488]	; (8014d60 <udp_input+0x214>)
 8014b78:	4878      	ldr	r0, [pc, #480]	; (8014d5c <udp_input+0x210>)
 8014b7a:	f002 fc51 	bl	8017420 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	895b      	ldrh	r3, [r3, #10]
 8014b82:	2b07      	cmp	r3, #7
 8014b84:	d803      	bhi.n	8014b8e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f7f9 fb3c 	bl	800e204 <pbuf_free>
    goto end;
 8014b8c:	e0de      	b.n	8014d4c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014b94:	4b73      	ldr	r3, [pc, #460]	; (8014d64 <udp_input+0x218>)
 8014b96:	695b      	ldr	r3, [r3, #20]
 8014b98:	4a72      	ldr	r2, [pc, #456]	; (8014d64 <udp_input+0x218>)
 8014b9a:	6812      	ldr	r2, [r2, #0]
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f001 fc88 	bl	80164b4 <ip4_addr_isbroadcast_u32>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014ba8:	697b      	ldr	r3, [r7, #20]
 8014baa:	881b      	ldrh	r3, [r3, #0]
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7f7 ff96 	bl	800cae0 <lwip_htons>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	885b      	ldrh	r3, [r3, #2]
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7f7 ff8e 	bl	800cae0 <lwip_htons>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bd4:	4b64      	ldr	r3, [pc, #400]	; (8014d68 <udp_input+0x21c>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8014bda:	e054      	b.n	8014c86 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bde:	8a5b      	ldrh	r3, [r3, #18]
 8014be0:	89fa      	ldrh	r2, [r7, #14]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d14a      	bne.n	8014c7c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014be6:	7cfb      	ldrb	r3, [r7, #19]
 8014be8:	461a      	mov	r2, r3
 8014bea:	6839      	ldr	r1, [r7, #0]
 8014bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bee:	f7ff ff49 	bl	8014a84 <udp_input_local_match>
 8014bf2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d041      	beq.n	8014c7c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfa:	7c1b      	ldrb	r3, [r3, #16]
 8014bfc:	f003 0304 	and.w	r3, r3, #4
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d11d      	bne.n	8014c40 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d102      	bne.n	8014c10 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c0c:	61fb      	str	r3, [r7, #28]
 8014c0e:	e017      	b.n	8014c40 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014c10:	7cfb      	ldrb	r3, [r7, #19]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d014      	beq.n	8014c40 <udp_input+0xf4>
 8014c16:	4b53      	ldr	r3, [pc, #332]	; (8014d64 <udp_input+0x218>)
 8014c18:	695b      	ldr	r3, [r3, #20]
 8014c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014c1e:	d10f      	bne.n	8014c40 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014c20:	69fb      	ldr	r3, [r7, #28]
 8014c22:	681a      	ldr	r2, [r3, #0]
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	3304      	adds	r3, #4
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d008      	beq.n	8014c40 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c30:	681a      	ldr	r2, [r3, #0]
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	3304      	adds	r3, #4
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d101      	bne.n	8014c40 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c42:	8a9b      	ldrh	r3, [r3, #20]
 8014c44:	8a3a      	ldrh	r2, [r7, #16]
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d118      	bne.n	8014c7c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c4c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d005      	beq.n	8014c5e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c54:	685a      	ldr	r2, [r3, #4]
 8014c56:	4b43      	ldr	r3, [pc, #268]	; (8014d64 <udp_input+0x218>)
 8014c58:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d10e      	bne.n	8014c7c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014c5e:	6a3b      	ldr	r3, [r7, #32]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d014      	beq.n	8014c8e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c66:	68da      	ldr	r2, [r3, #12]
 8014c68:	6a3b      	ldr	r3, [r7, #32]
 8014c6a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014c6c:	4b3e      	ldr	r3, [pc, #248]	; (8014d68 <udp_input+0x21c>)
 8014c6e:	681a      	ldr	r2, [r3, #0]
 8014c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c72:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014c74:	4a3c      	ldr	r2, [pc, #240]	; (8014d68 <udp_input+0x21c>)
 8014c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c78:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014c7a:	e008      	b.n	8014c8e <udp_input+0x142>
      }
    }

    prev = pcb;
 8014c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c7e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c82:	68db      	ldr	r3, [r3, #12]
 8014c84:	627b      	str	r3, [r7, #36]	; 0x24
 8014c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d1a7      	bne.n	8014bdc <udp_input+0x90>
 8014c8c:	e000      	b.n	8014c90 <udp_input+0x144>
        break;
 8014c8e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d101      	bne.n	8014c9a <udp_input+0x14e>
    pcb = uncon_pcb;
 8014c96:	69fb      	ldr	r3, [r7, #28]
 8014c98:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d002      	beq.n	8014ca6 <udp_input+0x15a>
    for_us = 1;
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	76fb      	strb	r3, [r7, #27]
 8014ca4:	e00a      	b.n	8014cbc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	3304      	adds	r3, #4
 8014caa:	681a      	ldr	r2, [r3, #0]
 8014cac:	4b2d      	ldr	r3, [pc, #180]	; (8014d64 <udp_input+0x218>)
 8014cae:	695b      	ldr	r3, [r3, #20]
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	bf0c      	ite	eq
 8014cb4:	2301      	moveq	r3, #1
 8014cb6:	2300      	movne	r3, #0
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014cbc:	7efb      	ldrb	r3, [r7, #27]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d041      	beq.n	8014d46 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014cc2:	2108      	movs	r1, #8
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f7f9 fa17 	bl	800e0f8 <pbuf_remove_header>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d00a      	beq.n	8014ce6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014cd0:	4b20      	ldr	r3, [pc, #128]	; (8014d54 <udp_input+0x208>)
 8014cd2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014cd6:	4925      	ldr	r1, [pc, #148]	; (8014d6c <udp_input+0x220>)
 8014cd8:	4820      	ldr	r0, [pc, #128]	; (8014d5c <udp_input+0x210>)
 8014cda:	f002 fba1 	bl	8017420 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f7f9 fa90 	bl	800e204 <pbuf_free>
      goto end;
 8014ce4:	e032      	b.n	8014d4c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d012      	beq.n	8014d12 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cee:	699b      	ldr	r3, [r3, #24]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d00a      	beq.n	8014d0a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf6:	699c      	ldr	r4, [r3, #24]
 8014cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cfa:	69d8      	ldr	r0, [r3, #28]
 8014cfc:	8a3b      	ldrh	r3, [r7, #16]
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	4b1b      	ldr	r3, [pc, #108]	; (8014d70 <udp_input+0x224>)
 8014d02:	687a      	ldr	r2, [r7, #4]
 8014d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d06:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014d08:	e021      	b.n	8014d4e <udp_input+0x202>
        pbuf_free(p);
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f7f9 fa7a 	bl	800e204 <pbuf_free>
        goto end;
 8014d10:	e01c      	b.n	8014d4c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014d12:	7cfb      	ldrb	r3, [r7, #19]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d112      	bne.n	8014d3e <udp_input+0x1f2>
 8014d18:	4b12      	ldr	r3, [pc, #72]	; (8014d64 <udp_input+0x218>)
 8014d1a:	695b      	ldr	r3, [r3, #20]
 8014d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014d20:	2be0      	cmp	r3, #224	; 0xe0
 8014d22:	d00c      	beq.n	8014d3e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014d24:	4b0f      	ldr	r3, [pc, #60]	; (8014d64 <udp_input+0x218>)
 8014d26:	899b      	ldrh	r3, [r3, #12]
 8014d28:	3308      	adds	r3, #8
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	b21b      	sxth	r3, r3
 8014d2e:	4619      	mov	r1, r3
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f7f9 fa54 	bl	800e1de <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014d36:	2103      	movs	r1, #3
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f001 f89b 	bl	8015e74 <icmp_dest_unreach>
      pbuf_free(p);
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f7f9 fa60 	bl	800e204 <pbuf_free>
  return;
 8014d44:	e003      	b.n	8014d4e <udp_input+0x202>
    pbuf_free(p);
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f7f9 fa5c 	bl	800e204 <pbuf_free>
  return;
 8014d4c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014d4e:	372c      	adds	r7, #44	; 0x2c
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd90      	pop	{r4, r7, pc}
 8014d54:	0801bc68 	.word	0x0801bc68
 8014d58:	0801bd0c 	.word	0x0801bd0c
 8014d5c:	0801bcbc 	.word	0x0801bcbc
 8014d60:	0801bd24 	.word	0x0801bd24
 8014d64:	2000e2ec 	.word	0x2000e2ec
 8014d68:	20011848 	.word	0x20011848
 8014d6c:	0801bd40 	.word	0x0801bd40
 8014d70:	2000e2fc 	.word	0x2000e2fc

08014d74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014d74:	b480      	push	{r7}
 8014d76:	b085      	sub	sp, #20
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d01e      	beq.n	8014dc2 <udp_netif_ip_addr_changed+0x4e>
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d01a      	beq.n	8014dc2 <udp_netif_ip_addr_changed+0x4e>
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d017      	beq.n	8014dc2 <udp_netif_ip_addr_changed+0x4e>
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d013      	beq.n	8014dc2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d9a:	4b0d      	ldr	r3, [pc, #52]	; (8014dd0 <udp_netif_ip_addr_changed+0x5c>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	60fb      	str	r3, [r7, #12]
 8014da0:	e00c      	b.n	8014dbc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	681a      	ldr	r2, [r3, #0]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d103      	bne.n	8014db6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	681a      	ldr	r2, [r3, #0]
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	60fb      	str	r3, [r7, #12]
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d1ef      	bne.n	8014da2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014dc2:	bf00      	nop
 8014dc4:	3714      	adds	r7, #20
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dcc:	4770      	bx	lr
 8014dce:	bf00      	nop
 8014dd0:	20011848 	.word	0x20011848

08014dd4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014ddc:	4915      	ldr	r1, [pc, #84]	; (8014e34 <etharp_free_entry+0x60>)
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	4613      	mov	r3, r2
 8014de2:	005b      	lsls	r3, r3, #1
 8014de4:	4413      	add	r3, r2
 8014de6:	00db      	lsls	r3, r3, #3
 8014de8:	440b      	add	r3, r1
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d013      	beq.n	8014e18 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014df0:	4910      	ldr	r1, [pc, #64]	; (8014e34 <etharp_free_entry+0x60>)
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	4613      	mov	r3, r2
 8014df6:	005b      	lsls	r3, r3, #1
 8014df8:	4413      	add	r3, r2
 8014dfa:	00db      	lsls	r3, r3, #3
 8014dfc:	440b      	add	r3, r1
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7f9 f9ff 	bl	800e204 <pbuf_free>
    arp_table[i].q = NULL;
 8014e06:	490b      	ldr	r1, [pc, #44]	; (8014e34 <etharp_free_entry+0x60>)
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	4613      	mov	r3, r2
 8014e0c:	005b      	lsls	r3, r3, #1
 8014e0e:	4413      	add	r3, r2
 8014e10:	00db      	lsls	r3, r3, #3
 8014e12:	440b      	add	r3, r1
 8014e14:	2200      	movs	r2, #0
 8014e16:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014e18:	4906      	ldr	r1, [pc, #24]	; (8014e34 <etharp_free_entry+0x60>)
 8014e1a:	687a      	ldr	r2, [r7, #4]
 8014e1c:	4613      	mov	r3, r2
 8014e1e:	005b      	lsls	r3, r3, #1
 8014e20:	4413      	add	r3, r2
 8014e22:	00db      	lsls	r3, r3, #3
 8014e24:	440b      	add	r3, r1
 8014e26:	3314      	adds	r3, #20
 8014e28:	2200      	movs	r2, #0
 8014e2a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014e2c:	bf00      	nop
 8014e2e:	3708      	adds	r7, #8
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}
 8014e34:	20001a4c 	.word	0x20001a4c

08014e38 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e3e:	2300      	movs	r3, #0
 8014e40:	607b      	str	r3, [r7, #4]
 8014e42:	e096      	b.n	8014f72 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014e44:	494f      	ldr	r1, [pc, #316]	; (8014f84 <etharp_tmr+0x14c>)
 8014e46:	687a      	ldr	r2, [r7, #4]
 8014e48:	4613      	mov	r3, r2
 8014e4a:	005b      	lsls	r3, r3, #1
 8014e4c:	4413      	add	r3, r2
 8014e4e:	00db      	lsls	r3, r3, #3
 8014e50:	440b      	add	r3, r1
 8014e52:	3314      	adds	r3, #20
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014e58:	78fb      	ldrb	r3, [r7, #3]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	f000 8086 	beq.w	8014f6c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014e60:	4948      	ldr	r1, [pc, #288]	; (8014f84 <etharp_tmr+0x14c>)
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	4613      	mov	r3, r2
 8014e66:	005b      	lsls	r3, r3, #1
 8014e68:	4413      	add	r3, r2
 8014e6a:	00db      	lsls	r3, r3, #3
 8014e6c:	440b      	add	r3, r1
 8014e6e:	3312      	adds	r3, #18
 8014e70:	881b      	ldrh	r3, [r3, #0]
 8014e72:	3301      	adds	r3, #1
 8014e74:	b298      	uxth	r0, r3
 8014e76:	4943      	ldr	r1, [pc, #268]	; (8014f84 <etharp_tmr+0x14c>)
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	005b      	lsls	r3, r3, #1
 8014e7e:	4413      	add	r3, r2
 8014e80:	00db      	lsls	r3, r3, #3
 8014e82:	440b      	add	r3, r1
 8014e84:	3312      	adds	r3, #18
 8014e86:	4602      	mov	r2, r0
 8014e88:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014e8a:	493e      	ldr	r1, [pc, #248]	; (8014f84 <etharp_tmr+0x14c>)
 8014e8c:	687a      	ldr	r2, [r7, #4]
 8014e8e:	4613      	mov	r3, r2
 8014e90:	005b      	lsls	r3, r3, #1
 8014e92:	4413      	add	r3, r2
 8014e94:	00db      	lsls	r3, r3, #3
 8014e96:	440b      	add	r3, r1
 8014e98:	3312      	adds	r3, #18
 8014e9a:	881b      	ldrh	r3, [r3, #0]
 8014e9c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014ea0:	d215      	bcs.n	8014ece <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014ea2:	4938      	ldr	r1, [pc, #224]	; (8014f84 <etharp_tmr+0x14c>)
 8014ea4:	687a      	ldr	r2, [r7, #4]
 8014ea6:	4613      	mov	r3, r2
 8014ea8:	005b      	lsls	r3, r3, #1
 8014eaa:	4413      	add	r3, r2
 8014eac:	00db      	lsls	r3, r3, #3
 8014eae:	440b      	add	r3, r1
 8014eb0:	3314      	adds	r3, #20
 8014eb2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014eb4:	2b01      	cmp	r3, #1
 8014eb6:	d10e      	bne.n	8014ed6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014eb8:	4932      	ldr	r1, [pc, #200]	; (8014f84 <etharp_tmr+0x14c>)
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	4413      	add	r3, r2
 8014ec2:	00db      	lsls	r3, r3, #3
 8014ec4:	440b      	add	r3, r1
 8014ec6:	3312      	adds	r3, #18
 8014ec8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014eca:	2b04      	cmp	r3, #4
 8014ecc:	d903      	bls.n	8014ed6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f7ff ff80 	bl	8014dd4 <etharp_free_entry>
 8014ed4:	e04a      	b.n	8014f6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014ed6:	492b      	ldr	r1, [pc, #172]	; (8014f84 <etharp_tmr+0x14c>)
 8014ed8:	687a      	ldr	r2, [r7, #4]
 8014eda:	4613      	mov	r3, r2
 8014edc:	005b      	lsls	r3, r3, #1
 8014ede:	4413      	add	r3, r2
 8014ee0:	00db      	lsls	r3, r3, #3
 8014ee2:	440b      	add	r3, r1
 8014ee4:	3314      	adds	r3, #20
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	2b03      	cmp	r3, #3
 8014eea:	d10a      	bne.n	8014f02 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014eec:	4925      	ldr	r1, [pc, #148]	; (8014f84 <etharp_tmr+0x14c>)
 8014eee:	687a      	ldr	r2, [r7, #4]
 8014ef0:	4613      	mov	r3, r2
 8014ef2:	005b      	lsls	r3, r3, #1
 8014ef4:	4413      	add	r3, r2
 8014ef6:	00db      	lsls	r3, r3, #3
 8014ef8:	440b      	add	r3, r1
 8014efa:	3314      	adds	r3, #20
 8014efc:	2204      	movs	r2, #4
 8014efe:	701a      	strb	r2, [r3, #0]
 8014f00:	e034      	b.n	8014f6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014f02:	4920      	ldr	r1, [pc, #128]	; (8014f84 <etharp_tmr+0x14c>)
 8014f04:	687a      	ldr	r2, [r7, #4]
 8014f06:	4613      	mov	r3, r2
 8014f08:	005b      	lsls	r3, r3, #1
 8014f0a:	4413      	add	r3, r2
 8014f0c:	00db      	lsls	r3, r3, #3
 8014f0e:	440b      	add	r3, r1
 8014f10:	3314      	adds	r3, #20
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	2b04      	cmp	r3, #4
 8014f16:	d10a      	bne.n	8014f2e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014f18:	491a      	ldr	r1, [pc, #104]	; (8014f84 <etharp_tmr+0x14c>)
 8014f1a:	687a      	ldr	r2, [r7, #4]
 8014f1c:	4613      	mov	r3, r2
 8014f1e:	005b      	lsls	r3, r3, #1
 8014f20:	4413      	add	r3, r2
 8014f22:	00db      	lsls	r3, r3, #3
 8014f24:	440b      	add	r3, r1
 8014f26:	3314      	adds	r3, #20
 8014f28:	2202      	movs	r2, #2
 8014f2a:	701a      	strb	r2, [r3, #0]
 8014f2c:	e01e      	b.n	8014f6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014f2e:	4915      	ldr	r1, [pc, #84]	; (8014f84 <etharp_tmr+0x14c>)
 8014f30:	687a      	ldr	r2, [r7, #4]
 8014f32:	4613      	mov	r3, r2
 8014f34:	005b      	lsls	r3, r3, #1
 8014f36:	4413      	add	r3, r2
 8014f38:	00db      	lsls	r3, r3, #3
 8014f3a:	440b      	add	r3, r1
 8014f3c:	3314      	adds	r3, #20
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	2b01      	cmp	r3, #1
 8014f42:	d113      	bne.n	8014f6c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014f44:	490f      	ldr	r1, [pc, #60]	; (8014f84 <etharp_tmr+0x14c>)
 8014f46:	687a      	ldr	r2, [r7, #4]
 8014f48:	4613      	mov	r3, r2
 8014f4a:	005b      	lsls	r3, r3, #1
 8014f4c:	4413      	add	r3, r2
 8014f4e:	00db      	lsls	r3, r3, #3
 8014f50:	440b      	add	r3, r1
 8014f52:	3308      	adds	r3, #8
 8014f54:	6818      	ldr	r0, [r3, #0]
 8014f56:	687a      	ldr	r2, [r7, #4]
 8014f58:	4613      	mov	r3, r2
 8014f5a:	005b      	lsls	r3, r3, #1
 8014f5c:	4413      	add	r3, r2
 8014f5e:	00db      	lsls	r3, r3, #3
 8014f60:	4a08      	ldr	r2, [pc, #32]	; (8014f84 <etharp_tmr+0x14c>)
 8014f62:	4413      	add	r3, r2
 8014f64:	3304      	adds	r3, #4
 8014f66:	4619      	mov	r1, r3
 8014f68:	f000 fe6e 	bl	8015c48 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	3301      	adds	r3, #1
 8014f70:	607b      	str	r3, [r7, #4]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2b09      	cmp	r3, #9
 8014f76:	f77f af65 	ble.w	8014e44 <etharp_tmr+0xc>
      }
    }
  }
}
 8014f7a:	bf00      	nop
 8014f7c:	bf00      	nop
 8014f7e:	3708      	adds	r7, #8
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}
 8014f84:	20001a4c 	.word	0x20001a4c

08014f88 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b08a      	sub	sp, #40	; 0x28
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	60f8      	str	r0, [r7, #12]
 8014f90:	460b      	mov	r3, r1
 8014f92:	607a      	str	r2, [r7, #4]
 8014f94:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014f96:	230a      	movs	r3, #10
 8014f98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014f9a:	230a      	movs	r3, #10
 8014f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014f9e:	230a      	movs	r3, #10
 8014fa0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014fa6:	230a      	movs	r3, #10
 8014fa8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014faa:	2300      	movs	r3, #0
 8014fac:	83bb      	strh	r3, [r7, #28]
 8014fae:	2300      	movs	r3, #0
 8014fb0:	837b      	strh	r3, [r7, #26]
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	843b      	strh	r3, [r7, #32]
 8014fba:	e0ae      	b.n	801511a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014fbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fc0:	49a6      	ldr	r1, [pc, #664]	; (801525c <etharp_find_entry+0x2d4>)
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	005b      	lsls	r3, r3, #1
 8014fc6:	4413      	add	r3, r2
 8014fc8:	00db      	lsls	r3, r3, #3
 8014fca:	440b      	add	r3, r1
 8014fcc:	3314      	adds	r3, #20
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014fd2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014fd6:	2b0a      	cmp	r3, #10
 8014fd8:	d105      	bne.n	8014fe6 <etharp_find_entry+0x5e>
 8014fda:	7dfb      	ldrb	r3, [r7, #23]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d102      	bne.n	8014fe6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014fe0:	8c3b      	ldrh	r3, [r7, #32]
 8014fe2:	847b      	strh	r3, [r7, #34]	; 0x22
 8014fe4:	e095      	b.n	8015112 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014fe6:	7dfb      	ldrb	r3, [r7, #23]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f000 8092 	beq.w	8015112 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014fee:	7dfb      	ldrb	r3, [r7, #23]
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	d009      	beq.n	8015008 <etharp_find_entry+0x80>
 8014ff4:	7dfb      	ldrb	r3, [r7, #23]
 8014ff6:	2b01      	cmp	r3, #1
 8014ff8:	d806      	bhi.n	8015008 <etharp_find_entry+0x80>
 8014ffa:	4b99      	ldr	r3, [pc, #612]	; (8015260 <etharp_find_entry+0x2d8>)
 8014ffc:	f240 1223 	movw	r2, #291	; 0x123
 8015000:	4998      	ldr	r1, [pc, #608]	; (8015264 <etharp_find_entry+0x2dc>)
 8015002:	4899      	ldr	r0, [pc, #612]	; (8015268 <etharp_find_entry+0x2e0>)
 8015004:	f002 fa0c 	bl	8017420 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d020      	beq.n	8015050 <etharp_find_entry+0xc8>
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	6819      	ldr	r1, [r3, #0]
 8015012:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015016:	4891      	ldr	r0, [pc, #580]	; (801525c <etharp_find_entry+0x2d4>)
 8015018:	4613      	mov	r3, r2
 801501a:	005b      	lsls	r3, r3, #1
 801501c:	4413      	add	r3, r2
 801501e:	00db      	lsls	r3, r3, #3
 8015020:	4403      	add	r3, r0
 8015022:	3304      	adds	r3, #4
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	4299      	cmp	r1, r3
 8015028:	d112      	bne.n	8015050 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d00c      	beq.n	801504a <etharp_find_entry+0xc2>
 8015030:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015034:	4989      	ldr	r1, [pc, #548]	; (801525c <etharp_find_entry+0x2d4>)
 8015036:	4613      	mov	r3, r2
 8015038:	005b      	lsls	r3, r3, #1
 801503a:	4413      	add	r3, r2
 801503c:	00db      	lsls	r3, r3, #3
 801503e:	440b      	add	r3, r1
 8015040:	3308      	adds	r3, #8
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	429a      	cmp	r2, r3
 8015048:	d102      	bne.n	8015050 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801504a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801504e:	e100      	b.n	8015252 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015050:	7dfb      	ldrb	r3, [r7, #23]
 8015052:	2b01      	cmp	r3, #1
 8015054:	d140      	bne.n	80150d8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015056:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801505a:	4980      	ldr	r1, [pc, #512]	; (801525c <etharp_find_entry+0x2d4>)
 801505c:	4613      	mov	r3, r2
 801505e:	005b      	lsls	r3, r3, #1
 8015060:	4413      	add	r3, r2
 8015062:	00db      	lsls	r3, r3, #3
 8015064:	440b      	add	r3, r1
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d01a      	beq.n	80150a2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801506c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015070:	497a      	ldr	r1, [pc, #488]	; (801525c <etharp_find_entry+0x2d4>)
 8015072:	4613      	mov	r3, r2
 8015074:	005b      	lsls	r3, r3, #1
 8015076:	4413      	add	r3, r2
 8015078:	00db      	lsls	r3, r3, #3
 801507a:	440b      	add	r3, r1
 801507c:	3312      	adds	r3, #18
 801507e:	881b      	ldrh	r3, [r3, #0]
 8015080:	8bba      	ldrh	r2, [r7, #28]
 8015082:	429a      	cmp	r2, r3
 8015084:	d845      	bhi.n	8015112 <etharp_find_entry+0x18a>
            old_queue = i;
 8015086:	8c3b      	ldrh	r3, [r7, #32]
 8015088:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801508a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801508e:	4973      	ldr	r1, [pc, #460]	; (801525c <etharp_find_entry+0x2d4>)
 8015090:	4613      	mov	r3, r2
 8015092:	005b      	lsls	r3, r3, #1
 8015094:	4413      	add	r3, r2
 8015096:	00db      	lsls	r3, r3, #3
 8015098:	440b      	add	r3, r1
 801509a:	3312      	adds	r3, #18
 801509c:	881b      	ldrh	r3, [r3, #0]
 801509e:	83bb      	strh	r3, [r7, #28]
 80150a0:	e037      	b.n	8015112 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80150a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150a6:	496d      	ldr	r1, [pc, #436]	; (801525c <etharp_find_entry+0x2d4>)
 80150a8:	4613      	mov	r3, r2
 80150aa:	005b      	lsls	r3, r3, #1
 80150ac:	4413      	add	r3, r2
 80150ae:	00db      	lsls	r3, r3, #3
 80150b0:	440b      	add	r3, r1
 80150b2:	3312      	adds	r3, #18
 80150b4:	881b      	ldrh	r3, [r3, #0]
 80150b6:	8b7a      	ldrh	r2, [r7, #26]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d82a      	bhi.n	8015112 <etharp_find_entry+0x18a>
            old_pending = i;
 80150bc:	8c3b      	ldrh	r3, [r7, #32]
 80150be:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80150c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150c4:	4965      	ldr	r1, [pc, #404]	; (801525c <etharp_find_entry+0x2d4>)
 80150c6:	4613      	mov	r3, r2
 80150c8:	005b      	lsls	r3, r3, #1
 80150ca:	4413      	add	r3, r2
 80150cc:	00db      	lsls	r3, r3, #3
 80150ce:	440b      	add	r3, r1
 80150d0:	3312      	adds	r3, #18
 80150d2:	881b      	ldrh	r3, [r3, #0]
 80150d4:	837b      	strh	r3, [r7, #26]
 80150d6:	e01c      	b.n	8015112 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80150d8:	7dfb      	ldrb	r3, [r7, #23]
 80150da:	2b01      	cmp	r3, #1
 80150dc:	d919      	bls.n	8015112 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80150de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150e2:	495e      	ldr	r1, [pc, #376]	; (801525c <etharp_find_entry+0x2d4>)
 80150e4:	4613      	mov	r3, r2
 80150e6:	005b      	lsls	r3, r3, #1
 80150e8:	4413      	add	r3, r2
 80150ea:	00db      	lsls	r3, r3, #3
 80150ec:	440b      	add	r3, r1
 80150ee:	3312      	adds	r3, #18
 80150f0:	881b      	ldrh	r3, [r3, #0]
 80150f2:	8b3a      	ldrh	r2, [r7, #24]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d80c      	bhi.n	8015112 <etharp_find_entry+0x18a>
            old_stable = i;
 80150f8:	8c3b      	ldrh	r3, [r7, #32]
 80150fa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80150fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015100:	4956      	ldr	r1, [pc, #344]	; (801525c <etharp_find_entry+0x2d4>)
 8015102:	4613      	mov	r3, r2
 8015104:	005b      	lsls	r3, r3, #1
 8015106:	4413      	add	r3, r2
 8015108:	00db      	lsls	r3, r3, #3
 801510a:	440b      	add	r3, r1
 801510c:	3312      	adds	r3, #18
 801510e:	881b      	ldrh	r3, [r3, #0]
 8015110:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015112:	8c3b      	ldrh	r3, [r7, #32]
 8015114:	3301      	adds	r3, #1
 8015116:	b29b      	uxth	r3, r3
 8015118:	843b      	strh	r3, [r7, #32]
 801511a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801511e:	2b09      	cmp	r3, #9
 8015120:	f77f af4c 	ble.w	8014fbc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015124:	7afb      	ldrb	r3, [r7, #11]
 8015126:	f003 0302 	and.w	r3, r3, #2
 801512a:	2b00      	cmp	r3, #0
 801512c:	d108      	bne.n	8015140 <etharp_find_entry+0x1b8>
 801512e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015132:	2b0a      	cmp	r3, #10
 8015134:	d107      	bne.n	8015146 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015136:	7afb      	ldrb	r3, [r7, #11]
 8015138:	f003 0301 	and.w	r3, r3, #1
 801513c:	2b00      	cmp	r3, #0
 801513e:	d102      	bne.n	8015146 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015144:	e085      	b.n	8015252 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015146:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801514a:	2b09      	cmp	r3, #9
 801514c:	dc02      	bgt.n	8015154 <etharp_find_entry+0x1cc>
    i = empty;
 801514e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015150:	843b      	strh	r3, [r7, #32]
 8015152:	e039      	b.n	80151c8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015154:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015158:	2b09      	cmp	r3, #9
 801515a:	dc14      	bgt.n	8015186 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801515c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801515e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015160:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015164:	493d      	ldr	r1, [pc, #244]	; (801525c <etharp_find_entry+0x2d4>)
 8015166:	4613      	mov	r3, r2
 8015168:	005b      	lsls	r3, r3, #1
 801516a:	4413      	add	r3, r2
 801516c:	00db      	lsls	r3, r3, #3
 801516e:	440b      	add	r3, r1
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d018      	beq.n	80151a8 <etharp_find_entry+0x220>
 8015176:	4b3a      	ldr	r3, [pc, #232]	; (8015260 <etharp_find_entry+0x2d8>)
 8015178:	f240 126d 	movw	r2, #365	; 0x16d
 801517c:	493b      	ldr	r1, [pc, #236]	; (801526c <etharp_find_entry+0x2e4>)
 801517e:	483a      	ldr	r0, [pc, #232]	; (8015268 <etharp_find_entry+0x2e0>)
 8015180:	f002 f94e 	bl	8017420 <iprintf>
 8015184:	e010      	b.n	80151a8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015186:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801518a:	2b09      	cmp	r3, #9
 801518c:	dc02      	bgt.n	8015194 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801518e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015190:	843b      	strh	r3, [r7, #32]
 8015192:	e009      	b.n	80151a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015194:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015198:	2b09      	cmp	r3, #9
 801519a:	dc02      	bgt.n	80151a2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801519c:	8bfb      	ldrh	r3, [r7, #30]
 801519e:	843b      	strh	r3, [r7, #32]
 80151a0:	e002      	b.n	80151a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80151a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151a6:	e054      	b.n	8015252 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80151a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80151ac:	2b09      	cmp	r3, #9
 80151ae:	dd06      	ble.n	80151be <etharp_find_entry+0x236>
 80151b0:	4b2b      	ldr	r3, [pc, #172]	; (8015260 <etharp_find_entry+0x2d8>)
 80151b2:	f240 127f 	movw	r2, #383	; 0x17f
 80151b6:	492e      	ldr	r1, [pc, #184]	; (8015270 <etharp_find_entry+0x2e8>)
 80151b8:	482b      	ldr	r0, [pc, #172]	; (8015268 <etharp_find_entry+0x2e0>)
 80151ba:	f002 f931 	bl	8017420 <iprintf>
    etharp_free_entry(i);
 80151be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7ff fe06 	bl	8014dd4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80151c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80151cc:	2b09      	cmp	r3, #9
 80151ce:	dd06      	ble.n	80151de <etharp_find_entry+0x256>
 80151d0:	4b23      	ldr	r3, [pc, #140]	; (8015260 <etharp_find_entry+0x2d8>)
 80151d2:	f240 1283 	movw	r2, #387	; 0x183
 80151d6:	4926      	ldr	r1, [pc, #152]	; (8015270 <etharp_find_entry+0x2e8>)
 80151d8:	4823      	ldr	r0, [pc, #140]	; (8015268 <etharp_find_entry+0x2e0>)
 80151da:	f002 f921 	bl	8017420 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80151de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151e2:	491e      	ldr	r1, [pc, #120]	; (801525c <etharp_find_entry+0x2d4>)
 80151e4:	4613      	mov	r3, r2
 80151e6:	005b      	lsls	r3, r3, #1
 80151e8:	4413      	add	r3, r2
 80151ea:	00db      	lsls	r3, r3, #3
 80151ec:	440b      	add	r3, r1
 80151ee:	3314      	adds	r3, #20
 80151f0:	781b      	ldrb	r3, [r3, #0]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d006      	beq.n	8015204 <etharp_find_entry+0x27c>
 80151f6:	4b1a      	ldr	r3, [pc, #104]	; (8015260 <etharp_find_entry+0x2d8>)
 80151f8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80151fc:	491d      	ldr	r1, [pc, #116]	; (8015274 <etharp_find_entry+0x2ec>)
 80151fe:	481a      	ldr	r0, [pc, #104]	; (8015268 <etharp_find_entry+0x2e0>)
 8015200:	f002 f90e 	bl	8017420 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d00b      	beq.n	8015222 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801520a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	6819      	ldr	r1, [r3, #0]
 8015212:	4812      	ldr	r0, [pc, #72]	; (801525c <etharp_find_entry+0x2d4>)
 8015214:	4613      	mov	r3, r2
 8015216:	005b      	lsls	r3, r3, #1
 8015218:	4413      	add	r3, r2
 801521a:	00db      	lsls	r3, r3, #3
 801521c:	4403      	add	r3, r0
 801521e:	3304      	adds	r3, #4
 8015220:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015222:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015226:	490d      	ldr	r1, [pc, #52]	; (801525c <etharp_find_entry+0x2d4>)
 8015228:	4613      	mov	r3, r2
 801522a:	005b      	lsls	r3, r3, #1
 801522c:	4413      	add	r3, r2
 801522e:	00db      	lsls	r3, r3, #3
 8015230:	440b      	add	r3, r1
 8015232:	3312      	adds	r3, #18
 8015234:	2200      	movs	r2, #0
 8015236:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801523c:	4907      	ldr	r1, [pc, #28]	; (801525c <etharp_find_entry+0x2d4>)
 801523e:	4613      	mov	r3, r2
 8015240:	005b      	lsls	r3, r3, #1
 8015242:	4413      	add	r3, r2
 8015244:	00db      	lsls	r3, r3, #3
 8015246:	440b      	add	r3, r1
 8015248:	3308      	adds	r3, #8
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801524e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015252:	4618      	mov	r0, r3
 8015254:	3728      	adds	r7, #40	; 0x28
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	20001a4c 	.word	0x20001a4c
 8015260:	0801bfcc 	.word	0x0801bfcc
 8015264:	0801c004 	.word	0x0801c004
 8015268:	0801c044 	.word	0x0801c044
 801526c:	0801c06c 	.word	0x0801c06c
 8015270:	0801c084 	.word	0x0801c084
 8015274:	0801c098 	.word	0x0801c098

08015278 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b088      	sub	sp, #32
 801527c:	af02      	add	r7, sp, #8
 801527e:	60f8      	str	r0, [r7, #12]
 8015280:	60b9      	str	r1, [r7, #8]
 8015282:	607a      	str	r2, [r7, #4]
 8015284:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801528c:	2b06      	cmp	r3, #6
 801528e:	d006      	beq.n	801529e <etharp_update_arp_entry+0x26>
 8015290:	4b48      	ldr	r3, [pc, #288]	; (80153b4 <etharp_update_arp_entry+0x13c>)
 8015292:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015296:	4948      	ldr	r1, [pc, #288]	; (80153b8 <etharp_update_arp_entry+0x140>)
 8015298:	4848      	ldr	r0, [pc, #288]	; (80153bc <etharp_update_arp_entry+0x144>)
 801529a:	f002 f8c1 	bl	8017420 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d012      	beq.n	80152ca <etharp_update_arp_entry+0x52>
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d00e      	beq.n	80152ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	68f9      	ldr	r1, [r7, #12]
 80152b2:	4618      	mov	r0, r3
 80152b4:	f001 f8fe 	bl	80164b4 <ip4_addr_isbroadcast_u32>
 80152b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d105      	bne.n	80152ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80152be:	68bb      	ldr	r3, [r7, #8]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80152c6:	2be0      	cmp	r3, #224	; 0xe0
 80152c8:	d102      	bne.n	80152d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80152ca:	f06f 030f 	mvn.w	r3, #15
 80152ce:	e06c      	b.n	80153aa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80152d0:	78fb      	ldrb	r3, [r7, #3]
 80152d2:	68fa      	ldr	r2, [r7, #12]
 80152d4:	4619      	mov	r1, r3
 80152d6:	68b8      	ldr	r0, [r7, #8]
 80152d8:	f7ff fe56 	bl	8014f88 <etharp_find_entry>
 80152dc:	4603      	mov	r3, r0
 80152de:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80152e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	da02      	bge.n	80152ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80152e8:	8afb      	ldrh	r3, [r7, #22]
 80152ea:	b25b      	sxtb	r3, r3
 80152ec:	e05d      	b.n	80153aa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80152ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152f2:	4933      	ldr	r1, [pc, #204]	; (80153c0 <etharp_update_arp_entry+0x148>)
 80152f4:	4613      	mov	r3, r2
 80152f6:	005b      	lsls	r3, r3, #1
 80152f8:	4413      	add	r3, r2
 80152fa:	00db      	lsls	r3, r3, #3
 80152fc:	440b      	add	r3, r1
 80152fe:	3314      	adds	r3, #20
 8015300:	2202      	movs	r2, #2
 8015302:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015304:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015308:	492d      	ldr	r1, [pc, #180]	; (80153c0 <etharp_update_arp_entry+0x148>)
 801530a:	4613      	mov	r3, r2
 801530c:	005b      	lsls	r3, r3, #1
 801530e:	4413      	add	r3, r2
 8015310:	00db      	lsls	r3, r3, #3
 8015312:	440b      	add	r3, r1
 8015314:	3308      	adds	r3, #8
 8015316:	68fa      	ldr	r2, [r7, #12]
 8015318:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801531a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801531e:	4613      	mov	r3, r2
 8015320:	005b      	lsls	r3, r3, #1
 8015322:	4413      	add	r3, r2
 8015324:	00db      	lsls	r3, r3, #3
 8015326:	3308      	adds	r3, #8
 8015328:	4a25      	ldr	r2, [pc, #148]	; (80153c0 <etharp_update_arp_entry+0x148>)
 801532a:	4413      	add	r3, r2
 801532c:	3304      	adds	r3, #4
 801532e:	2206      	movs	r2, #6
 8015330:	6879      	ldr	r1, [r7, #4]
 8015332:	4618      	mov	r0, r3
 8015334:	f002 f844 	bl	80173c0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015338:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801533c:	4920      	ldr	r1, [pc, #128]	; (80153c0 <etharp_update_arp_entry+0x148>)
 801533e:	4613      	mov	r3, r2
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	00db      	lsls	r3, r3, #3
 8015346:	440b      	add	r3, r1
 8015348:	3312      	adds	r3, #18
 801534a:	2200      	movs	r2, #0
 801534c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801534e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015352:	491b      	ldr	r1, [pc, #108]	; (80153c0 <etharp_update_arp_entry+0x148>)
 8015354:	4613      	mov	r3, r2
 8015356:	005b      	lsls	r3, r3, #1
 8015358:	4413      	add	r3, r2
 801535a:	00db      	lsls	r3, r3, #3
 801535c:	440b      	add	r3, r1
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d021      	beq.n	80153a8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015364:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015368:	4915      	ldr	r1, [pc, #84]	; (80153c0 <etharp_update_arp_entry+0x148>)
 801536a:	4613      	mov	r3, r2
 801536c:	005b      	lsls	r3, r3, #1
 801536e:	4413      	add	r3, r2
 8015370:	00db      	lsls	r3, r3, #3
 8015372:	440b      	add	r3, r1
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015378:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801537c:	4910      	ldr	r1, [pc, #64]	; (80153c0 <etharp_update_arp_entry+0x148>)
 801537e:	4613      	mov	r3, r2
 8015380:	005b      	lsls	r3, r3, #1
 8015382:	4413      	add	r3, r2
 8015384:	00db      	lsls	r3, r3, #3
 8015386:	440b      	add	r3, r1
 8015388:	2200      	movs	r2, #0
 801538a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015396:	9300      	str	r3, [sp, #0]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6939      	ldr	r1, [r7, #16]
 801539c:	68f8      	ldr	r0, [r7, #12]
 801539e:	f001 ff91 	bl	80172c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80153a2:	6938      	ldr	r0, [r7, #16]
 80153a4:	f7f8 ff2e 	bl	800e204 <pbuf_free>
  }
  return ERR_OK;
 80153a8:	2300      	movs	r3, #0
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3718      	adds	r7, #24
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	0801bfcc 	.word	0x0801bfcc
 80153b8:	0801c0c4 	.word	0x0801c0c4
 80153bc:	0801c044 	.word	0x0801c044
 80153c0:	20001a4c 	.word	0x20001a4c

080153c4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b084      	sub	sp, #16
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153cc:	2300      	movs	r3, #0
 80153ce:	60fb      	str	r3, [r7, #12]
 80153d0:	e01e      	b.n	8015410 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80153d2:	4913      	ldr	r1, [pc, #76]	; (8015420 <etharp_cleanup_netif+0x5c>)
 80153d4:	68fa      	ldr	r2, [r7, #12]
 80153d6:	4613      	mov	r3, r2
 80153d8:	005b      	lsls	r3, r3, #1
 80153da:	4413      	add	r3, r2
 80153dc:	00db      	lsls	r3, r3, #3
 80153de:	440b      	add	r3, r1
 80153e0:	3314      	adds	r3, #20
 80153e2:	781b      	ldrb	r3, [r3, #0]
 80153e4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80153e6:	7afb      	ldrb	r3, [r7, #11]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d00e      	beq.n	801540a <etharp_cleanup_netif+0x46>
 80153ec:	490c      	ldr	r1, [pc, #48]	; (8015420 <etharp_cleanup_netif+0x5c>)
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	4613      	mov	r3, r2
 80153f2:	005b      	lsls	r3, r3, #1
 80153f4:	4413      	add	r3, r2
 80153f6:	00db      	lsls	r3, r3, #3
 80153f8:	440b      	add	r3, r1
 80153fa:	3308      	adds	r3, #8
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	687a      	ldr	r2, [r7, #4]
 8015400:	429a      	cmp	r2, r3
 8015402:	d102      	bne.n	801540a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015404:	68f8      	ldr	r0, [r7, #12]
 8015406:	f7ff fce5 	bl	8014dd4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	3301      	adds	r3, #1
 801540e:	60fb      	str	r3, [r7, #12]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2b09      	cmp	r3, #9
 8015414:	dddd      	ble.n	80153d2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015416:	bf00      	nop
 8015418:	bf00      	nop
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}
 8015420:	20001a4c 	.word	0x20001a4c

08015424 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015424:	b5b0      	push	{r4, r5, r7, lr}
 8015426:	b08a      	sub	sp, #40	; 0x28
 8015428:	af04      	add	r7, sp, #16
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d107      	bne.n	8015444 <etharp_input+0x20>
 8015434:	4b3d      	ldr	r3, [pc, #244]	; (801552c <etharp_input+0x108>)
 8015436:	f240 228a 	movw	r2, #650	; 0x28a
 801543a:	493d      	ldr	r1, [pc, #244]	; (8015530 <etharp_input+0x10c>)
 801543c:	483d      	ldr	r0, [pc, #244]	; (8015534 <etharp_input+0x110>)
 801543e:	f001 ffef 	bl	8017420 <iprintf>
 8015442:	e06f      	b.n	8015524 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	685b      	ldr	r3, [r3, #4]
 8015448:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801544a:	693b      	ldr	r3, [r7, #16]
 801544c:	881b      	ldrh	r3, [r3, #0]
 801544e:	b29b      	uxth	r3, r3
 8015450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015454:	d10c      	bne.n	8015470 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801545a:	2b06      	cmp	r3, #6
 801545c:	d108      	bne.n	8015470 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801545e:	693b      	ldr	r3, [r7, #16]
 8015460:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015462:	2b04      	cmp	r3, #4
 8015464:	d104      	bne.n	8015470 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015466:	693b      	ldr	r3, [r7, #16]
 8015468:	885b      	ldrh	r3, [r3, #2]
 801546a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801546c:	2b08      	cmp	r3, #8
 801546e:	d003      	beq.n	8015478 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f7f8 fec7 	bl	800e204 <pbuf_free>
    return;
 8015476:	e055      	b.n	8015524 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	330e      	adds	r3, #14
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015480:	693b      	ldr	r3, [r7, #16]
 8015482:	3318      	adds	r3, #24
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015488:	683b      	ldr	r3, [r7, #0]
 801548a:	3304      	adds	r3, #4
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d102      	bne.n	8015498 <etharp_input+0x74>
    for_us = 0;
 8015492:	2300      	movs	r3, #0
 8015494:	75fb      	strb	r3, [r7, #23]
 8015496:	e009      	b.n	80154ac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015498:	68ba      	ldr	r2, [r7, #8]
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	3304      	adds	r3, #4
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	429a      	cmp	r2, r3
 80154a2:	bf0c      	ite	eq
 80154a4:	2301      	moveq	r3, #1
 80154a6:	2300      	movne	r3, #0
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	f103 0208 	add.w	r2, r3, #8
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d001      	beq.n	80154bc <etharp_input+0x98>
 80154b8:	2301      	movs	r3, #1
 80154ba:	e000      	b.n	80154be <etharp_input+0x9a>
 80154bc:	2302      	movs	r3, #2
 80154be:	f107 010c 	add.w	r1, r7, #12
 80154c2:	6838      	ldr	r0, [r7, #0]
 80154c4:	f7ff fed8 	bl	8015278 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80154c8:	693b      	ldr	r3, [r7, #16]
 80154ca:	88db      	ldrh	r3, [r3, #6]
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154d2:	d003      	beq.n	80154dc <etharp_input+0xb8>
 80154d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80154d8:	d01e      	beq.n	8015518 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80154da:	e020      	b.n	801551e <etharp_input+0xfa>
      if (for_us) {
 80154dc:	7dfb      	ldrb	r3, [r7, #23]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d01c      	beq.n	801551c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80154e8:	693b      	ldr	r3, [r7, #16]
 80154ea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80154f8:	693a      	ldr	r2, [r7, #16]
 80154fa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80154fc:	2102      	movs	r1, #2
 80154fe:	9103      	str	r1, [sp, #12]
 8015500:	f107 010c 	add.w	r1, r7, #12
 8015504:	9102      	str	r1, [sp, #8]
 8015506:	9201      	str	r2, [sp, #4]
 8015508:	9300      	str	r3, [sp, #0]
 801550a:	462b      	mov	r3, r5
 801550c:	4622      	mov	r2, r4
 801550e:	4601      	mov	r1, r0
 8015510:	6838      	ldr	r0, [r7, #0]
 8015512:	f000 faeb 	bl	8015aec <etharp_raw>
      break;
 8015516:	e001      	b.n	801551c <etharp_input+0xf8>
      break;
 8015518:	bf00      	nop
 801551a:	e000      	b.n	801551e <etharp_input+0xfa>
      break;
 801551c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f7f8 fe70 	bl	800e204 <pbuf_free>
}
 8015524:	3718      	adds	r7, #24
 8015526:	46bd      	mov	sp, r7
 8015528:	bdb0      	pop	{r4, r5, r7, pc}
 801552a:	bf00      	nop
 801552c:	0801bfcc 	.word	0x0801bfcc
 8015530:	0801c11c 	.word	0x0801c11c
 8015534:	0801c044 	.word	0x0801c044

08015538 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b086      	sub	sp, #24
 801553c:	af02      	add	r7, sp, #8
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	4613      	mov	r3, r2
 8015544:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015546:	79fa      	ldrb	r2, [r7, #7]
 8015548:	4944      	ldr	r1, [pc, #272]	; (801565c <etharp_output_to_arp_index+0x124>)
 801554a:	4613      	mov	r3, r2
 801554c:	005b      	lsls	r3, r3, #1
 801554e:	4413      	add	r3, r2
 8015550:	00db      	lsls	r3, r3, #3
 8015552:	440b      	add	r3, r1
 8015554:	3314      	adds	r3, #20
 8015556:	781b      	ldrb	r3, [r3, #0]
 8015558:	2b01      	cmp	r3, #1
 801555a:	d806      	bhi.n	801556a <etharp_output_to_arp_index+0x32>
 801555c:	4b40      	ldr	r3, [pc, #256]	; (8015660 <etharp_output_to_arp_index+0x128>)
 801555e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015562:	4940      	ldr	r1, [pc, #256]	; (8015664 <etharp_output_to_arp_index+0x12c>)
 8015564:	4840      	ldr	r0, [pc, #256]	; (8015668 <etharp_output_to_arp_index+0x130>)
 8015566:	f001 ff5b 	bl	8017420 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801556a:	79fa      	ldrb	r2, [r7, #7]
 801556c:	493b      	ldr	r1, [pc, #236]	; (801565c <etharp_output_to_arp_index+0x124>)
 801556e:	4613      	mov	r3, r2
 8015570:	005b      	lsls	r3, r3, #1
 8015572:	4413      	add	r3, r2
 8015574:	00db      	lsls	r3, r3, #3
 8015576:	440b      	add	r3, r1
 8015578:	3314      	adds	r3, #20
 801557a:	781b      	ldrb	r3, [r3, #0]
 801557c:	2b02      	cmp	r3, #2
 801557e:	d153      	bne.n	8015628 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015580:	79fa      	ldrb	r2, [r7, #7]
 8015582:	4936      	ldr	r1, [pc, #216]	; (801565c <etharp_output_to_arp_index+0x124>)
 8015584:	4613      	mov	r3, r2
 8015586:	005b      	lsls	r3, r3, #1
 8015588:	4413      	add	r3, r2
 801558a:	00db      	lsls	r3, r3, #3
 801558c:	440b      	add	r3, r1
 801558e:	3312      	adds	r3, #18
 8015590:	881b      	ldrh	r3, [r3, #0]
 8015592:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015596:	d919      	bls.n	80155cc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015598:	79fa      	ldrb	r2, [r7, #7]
 801559a:	4613      	mov	r3, r2
 801559c:	005b      	lsls	r3, r3, #1
 801559e:	4413      	add	r3, r2
 80155a0:	00db      	lsls	r3, r3, #3
 80155a2:	4a2e      	ldr	r2, [pc, #184]	; (801565c <etharp_output_to_arp_index+0x124>)
 80155a4:	4413      	add	r3, r2
 80155a6:	3304      	adds	r3, #4
 80155a8:	4619      	mov	r1, r3
 80155aa:	68f8      	ldr	r0, [r7, #12]
 80155ac:	f000 fb4c 	bl	8015c48 <etharp_request>
 80155b0:	4603      	mov	r3, r0
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d138      	bne.n	8015628 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80155b6:	79fa      	ldrb	r2, [r7, #7]
 80155b8:	4928      	ldr	r1, [pc, #160]	; (801565c <etharp_output_to_arp_index+0x124>)
 80155ba:	4613      	mov	r3, r2
 80155bc:	005b      	lsls	r3, r3, #1
 80155be:	4413      	add	r3, r2
 80155c0:	00db      	lsls	r3, r3, #3
 80155c2:	440b      	add	r3, r1
 80155c4:	3314      	adds	r3, #20
 80155c6:	2203      	movs	r2, #3
 80155c8:	701a      	strb	r2, [r3, #0]
 80155ca:	e02d      	b.n	8015628 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80155cc:	79fa      	ldrb	r2, [r7, #7]
 80155ce:	4923      	ldr	r1, [pc, #140]	; (801565c <etharp_output_to_arp_index+0x124>)
 80155d0:	4613      	mov	r3, r2
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	4413      	add	r3, r2
 80155d6:	00db      	lsls	r3, r3, #3
 80155d8:	440b      	add	r3, r1
 80155da:	3312      	adds	r3, #18
 80155dc:	881b      	ldrh	r3, [r3, #0]
 80155de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80155e2:	d321      	bcc.n	8015628 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80155e4:	79fa      	ldrb	r2, [r7, #7]
 80155e6:	4613      	mov	r3, r2
 80155e8:	005b      	lsls	r3, r3, #1
 80155ea:	4413      	add	r3, r2
 80155ec:	00db      	lsls	r3, r3, #3
 80155ee:	4a1b      	ldr	r2, [pc, #108]	; (801565c <etharp_output_to_arp_index+0x124>)
 80155f0:	4413      	add	r3, r2
 80155f2:	1d19      	adds	r1, r3, #4
 80155f4:	79fa      	ldrb	r2, [r7, #7]
 80155f6:	4613      	mov	r3, r2
 80155f8:	005b      	lsls	r3, r3, #1
 80155fa:	4413      	add	r3, r2
 80155fc:	00db      	lsls	r3, r3, #3
 80155fe:	3308      	adds	r3, #8
 8015600:	4a16      	ldr	r2, [pc, #88]	; (801565c <etharp_output_to_arp_index+0x124>)
 8015602:	4413      	add	r3, r2
 8015604:	3304      	adds	r3, #4
 8015606:	461a      	mov	r2, r3
 8015608:	68f8      	ldr	r0, [r7, #12]
 801560a:	f000 fafb 	bl	8015c04 <etharp_request_dst>
 801560e:	4603      	mov	r3, r0
 8015610:	2b00      	cmp	r3, #0
 8015612:	d109      	bne.n	8015628 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015614:	79fa      	ldrb	r2, [r7, #7]
 8015616:	4911      	ldr	r1, [pc, #68]	; (801565c <etharp_output_to_arp_index+0x124>)
 8015618:	4613      	mov	r3, r2
 801561a:	005b      	lsls	r3, r3, #1
 801561c:	4413      	add	r3, r2
 801561e:	00db      	lsls	r3, r3, #3
 8015620:	440b      	add	r3, r1
 8015622:	3314      	adds	r3, #20
 8015624:	2203      	movs	r2, #3
 8015626:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801562e:	79fa      	ldrb	r2, [r7, #7]
 8015630:	4613      	mov	r3, r2
 8015632:	005b      	lsls	r3, r3, #1
 8015634:	4413      	add	r3, r2
 8015636:	00db      	lsls	r3, r3, #3
 8015638:	3308      	adds	r3, #8
 801563a:	4a08      	ldr	r2, [pc, #32]	; (801565c <etharp_output_to_arp_index+0x124>)
 801563c:	4413      	add	r3, r2
 801563e:	3304      	adds	r3, #4
 8015640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015644:	9200      	str	r2, [sp, #0]
 8015646:	460a      	mov	r2, r1
 8015648:	68b9      	ldr	r1, [r7, #8]
 801564a:	68f8      	ldr	r0, [r7, #12]
 801564c:	f001 fe3a 	bl	80172c4 <ethernet_output>
 8015650:	4603      	mov	r3, r0
}
 8015652:	4618      	mov	r0, r3
 8015654:	3710      	adds	r7, #16
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	20001a4c 	.word	0x20001a4c
 8015660:	0801bfcc 	.word	0x0801bfcc
 8015664:	0801c13c 	.word	0x0801c13c
 8015668:	0801c044 	.word	0x0801c044

0801566c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b08a      	sub	sp, #40	; 0x28
 8015670:	af02      	add	r7, sp, #8
 8015672:	60f8      	str	r0, [r7, #12]
 8015674:	60b9      	str	r1, [r7, #8]
 8015676:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d106      	bne.n	8015690 <etharp_output+0x24>
 8015682:	4b73      	ldr	r3, [pc, #460]	; (8015850 <etharp_output+0x1e4>)
 8015684:	f240 321e 	movw	r2, #798	; 0x31e
 8015688:	4972      	ldr	r1, [pc, #456]	; (8015854 <etharp_output+0x1e8>)
 801568a:	4873      	ldr	r0, [pc, #460]	; (8015858 <etharp_output+0x1ec>)
 801568c:	f001 fec8 	bl	8017420 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015690:	68bb      	ldr	r3, [r7, #8]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d106      	bne.n	80156a4 <etharp_output+0x38>
 8015696:	4b6e      	ldr	r3, [pc, #440]	; (8015850 <etharp_output+0x1e4>)
 8015698:	f240 321f 	movw	r2, #799	; 0x31f
 801569c:	496f      	ldr	r1, [pc, #444]	; (801585c <etharp_output+0x1f0>)
 801569e:	486e      	ldr	r0, [pc, #440]	; (8015858 <etharp_output+0x1ec>)
 80156a0:	f001 febe 	bl	8017420 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d106      	bne.n	80156b8 <etharp_output+0x4c>
 80156aa:	4b69      	ldr	r3, [pc, #420]	; (8015850 <etharp_output+0x1e4>)
 80156ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80156b0:	496b      	ldr	r1, [pc, #428]	; (8015860 <etharp_output+0x1f4>)
 80156b2:	4869      	ldr	r0, [pc, #420]	; (8015858 <etharp_output+0x1ec>)
 80156b4:	f001 feb4 	bl	8017420 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	68f9      	ldr	r1, [r7, #12]
 80156be:	4618      	mov	r0, r3
 80156c0:	f000 fef8 	bl	80164b4 <ip4_addr_isbroadcast_u32>
 80156c4:	4603      	mov	r3, r0
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d002      	beq.n	80156d0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80156ca:	4b66      	ldr	r3, [pc, #408]	; (8015864 <etharp_output+0x1f8>)
 80156cc:	61fb      	str	r3, [r7, #28]
 80156ce:	e0af      	b.n	8015830 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80156d8:	2be0      	cmp	r3, #224	; 0xe0
 80156da:	d118      	bne.n	801570e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80156dc:	2301      	movs	r3, #1
 80156de:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80156e0:	2300      	movs	r3, #0
 80156e2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80156e4:	235e      	movs	r3, #94	; 0x5e
 80156e6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	3301      	adds	r3, #1
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	3302      	adds	r3, #2
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	3303      	adds	r3, #3
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015706:	f107 0310 	add.w	r3, r7, #16
 801570a:	61fb      	str	r3, [r7, #28]
 801570c:	e090      	b.n	8015830 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681a      	ldr	r2, [r3, #0]
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	3304      	adds	r3, #4
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	405a      	eors	r2, r3
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	3308      	adds	r3, #8
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	4013      	ands	r3, r2
 8015722:	2b00      	cmp	r3, #0
 8015724:	d012      	beq.n	801574c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801572c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015730:	4293      	cmp	r3, r2
 8015732:	d00b      	beq.n	801574c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	330c      	adds	r3, #12
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d003      	beq.n	8015746 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	330c      	adds	r3, #12
 8015742:	61bb      	str	r3, [r7, #24]
 8015744:	e002      	b.n	801574c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015746:	f06f 0303 	mvn.w	r3, #3
 801574a:	e07d      	b.n	8015848 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801574c:	4b46      	ldr	r3, [pc, #280]	; (8015868 <etharp_output+0x1fc>)
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	4619      	mov	r1, r3
 8015752:	4a46      	ldr	r2, [pc, #280]	; (801586c <etharp_output+0x200>)
 8015754:	460b      	mov	r3, r1
 8015756:	005b      	lsls	r3, r3, #1
 8015758:	440b      	add	r3, r1
 801575a:	00db      	lsls	r3, r3, #3
 801575c:	4413      	add	r3, r2
 801575e:	3314      	adds	r3, #20
 8015760:	781b      	ldrb	r3, [r3, #0]
 8015762:	2b01      	cmp	r3, #1
 8015764:	d925      	bls.n	80157b2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015766:	4b40      	ldr	r3, [pc, #256]	; (8015868 <etharp_output+0x1fc>)
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	4619      	mov	r1, r3
 801576c:	4a3f      	ldr	r2, [pc, #252]	; (801586c <etharp_output+0x200>)
 801576e:	460b      	mov	r3, r1
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	440b      	add	r3, r1
 8015774:	00db      	lsls	r3, r3, #3
 8015776:	4413      	add	r3, r2
 8015778:	3308      	adds	r3, #8
 801577a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801577c:	68fa      	ldr	r2, [r7, #12]
 801577e:	429a      	cmp	r2, r3
 8015780:	d117      	bne.n	80157b2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	681a      	ldr	r2, [r3, #0]
 8015786:	4b38      	ldr	r3, [pc, #224]	; (8015868 <etharp_output+0x1fc>)
 8015788:	781b      	ldrb	r3, [r3, #0]
 801578a:	4618      	mov	r0, r3
 801578c:	4937      	ldr	r1, [pc, #220]	; (801586c <etharp_output+0x200>)
 801578e:	4603      	mov	r3, r0
 8015790:	005b      	lsls	r3, r3, #1
 8015792:	4403      	add	r3, r0
 8015794:	00db      	lsls	r3, r3, #3
 8015796:	440b      	add	r3, r1
 8015798:	3304      	adds	r3, #4
 801579a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801579c:	429a      	cmp	r2, r3
 801579e:	d108      	bne.n	80157b2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80157a0:	4b31      	ldr	r3, [pc, #196]	; (8015868 <etharp_output+0x1fc>)
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	461a      	mov	r2, r3
 80157a6:	68b9      	ldr	r1, [r7, #8]
 80157a8:	68f8      	ldr	r0, [r7, #12]
 80157aa:	f7ff fec5 	bl	8015538 <etharp_output_to_arp_index>
 80157ae:	4603      	mov	r3, r0
 80157b0:	e04a      	b.n	8015848 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80157b2:	2300      	movs	r3, #0
 80157b4:	75fb      	strb	r3, [r7, #23]
 80157b6:	e031      	b.n	801581c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80157b8:	7dfa      	ldrb	r2, [r7, #23]
 80157ba:	492c      	ldr	r1, [pc, #176]	; (801586c <etharp_output+0x200>)
 80157bc:	4613      	mov	r3, r2
 80157be:	005b      	lsls	r3, r3, #1
 80157c0:	4413      	add	r3, r2
 80157c2:	00db      	lsls	r3, r3, #3
 80157c4:	440b      	add	r3, r1
 80157c6:	3314      	adds	r3, #20
 80157c8:	781b      	ldrb	r3, [r3, #0]
 80157ca:	2b01      	cmp	r3, #1
 80157cc:	d923      	bls.n	8015816 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80157ce:	7dfa      	ldrb	r2, [r7, #23]
 80157d0:	4926      	ldr	r1, [pc, #152]	; (801586c <etharp_output+0x200>)
 80157d2:	4613      	mov	r3, r2
 80157d4:	005b      	lsls	r3, r3, #1
 80157d6:	4413      	add	r3, r2
 80157d8:	00db      	lsls	r3, r3, #3
 80157da:	440b      	add	r3, r1
 80157dc:	3308      	adds	r3, #8
 80157de:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80157e0:	68fa      	ldr	r2, [r7, #12]
 80157e2:	429a      	cmp	r2, r3
 80157e4:	d117      	bne.n	8015816 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80157e6:	69bb      	ldr	r3, [r7, #24]
 80157e8:	6819      	ldr	r1, [r3, #0]
 80157ea:	7dfa      	ldrb	r2, [r7, #23]
 80157ec:	481f      	ldr	r0, [pc, #124]	; (801586c <etharp_output+0x200>)
 80157ee:	4613      	mov	r3, r2
 80157f0:	005b      	lsls	r3, r3, #1
 80157f2:	4413      	add	r3, r2
 80157f4:	00db      	lsls	r3, r3, #3
 80157f6:	4403      	add	r3, r0
 80157f8:	3304      	adds	r3, #4
 80157fa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80157fc:	4299      	cmp	r1, r3
 80157fe:	d10a      	bne.n	8015816 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015800:	4a19      	ldr	r2, [pc, #100]	; (8015868 <etharp_output+0x1fc>)
 8015802:	7dfb      	ldrb	r3, [r7, #23]
 8015804:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015806:	7dfb      	ldrb	r3, [r7, #23]
 8015808:	461a      	mov	r2, r3
 801580a:	68b9      	ldr	r1, [r7, #8]
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f7ff fe93 	bl	8015538 <etharp_output_to_arp_index>
 8015812:	4603      	mov	r3, r0
 8015814:	e018      	b.n	8015848 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015816:	7dfb      	ldrb	r3, [r7, #23]
 8015818:	3301      	adds	r3, #1
 801581a:	75fb      	strb	r3, [r7, #23]
 801581c:	7dfb      	ldrb	r3, [r7, #23]
 801581e:	2b09      	cmp	r3, #9
 8015820:	d9ca      	bls.n	80157b8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015822:	68ba      	ldr	r2, [r7, #8]
 8015824:	69b9      	ldr	r1, [r7, #24]
 8015826:	68f8      	ldr	r0, [r7, #12]
 8015828:	f000 f822 	bl	8015870 <etharp_query>
 801582c:	4603      	mov	r3, r0
 801582e:	e00b      	b.n	8015848 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801583a:	9300      	str	r3, [sp, #0]
 801583c:	69fb      	ldr	r3, [r7, #28]
 801583e:	68b9      	ldr	r1, [r7, #8]
 8015840:	68f8      	ldr	r0, [r7, #12]
 8015842:	f001 fd3f 	bl	80172c4 <ethernet_output>
 8015846:	4603      	mov	r3, r0
}
 8015848:	4618      	mov	r0, r3
 801584a:	3720      	adds	r7, #32
 801584c:	46bd      	mov	sp, r7
 801584e:	bd80      	pop	{r7, pc}
 8015850:	0801bfcc 	.word	0x0801bfcc
 8015854:	0801c11c 	.word	0x0801c11c
 8015858:	0801c044 	.word	0x0801c044
 801585c:	0801c16c 	.word	0x0801c16c
 8015860:	0801c10c 	.word	0x0801c10c
 8015864:	0801eea0 	.word	0x0801eea0
 8015868:	20001b3c 	.word	0x20001b3c
 801586c:	20001a4c 	.word	0x20001a4c

08015870 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b08c      	sub	sp, #48	; 0x30
 8015874:	af02      	add	r7, sp, #8
 8015876:	60f8      	str	r0, [r7, #12]
 8015878:	60b9      	str	r1, [r7, #8]
 801587a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	3326      	adds	r3, #38	; 0x26
 8015880:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015882:	23ff      	movs	r3, #255	; 0xff
 8015884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015888:	2300      	movs	r3, #0
 801588a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	68f9      	ldr	r1, [r7, #12]
 8015892:	4618      	mov	r0, r3
 8015894:	f000 fe0e 	bl	80164b4 <ip4_addr_isbroadcast_u32>
 8015898:	4603      	mov	r3, r0
 801589a:	2b00      	cmp	r3, #0
 801589c:	d10c      	bne.n	80158b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80158a6:	2be0      	cmp	r3, #224	; 0xe0
 80158a8:	d006      	beq.n	80158b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d003      	beq.n	80158b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d102      	bne.n	80158be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80158b8:	f06f 030f 	mvn.w	r3, #15
 80158bc:	e101      	b.n	8015ac2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80158be:	68fa      	ldr	r2, [r7, #12]
 80158c0:	2101      	movs	r1, #1
 80158c2:	68b8      	ldr	r0, [r7, #8]
 80158c4:	f7ff fb60 	bl	8014f88 <etharp_find_entry>
 80158c8:	4603      	mov	r3, r0
 80158ca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80158cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	da02      	bge.n	80158da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80158d4:	8a7b      	ldrh	r3, [r7, #18]
 80158d6:	b25b      	sxtb	r3, r3
 80158d8:	e0f3      	b.n	8015ac2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80158da:	8a7b      	ldrh	r3, [r7, #18]
 80158dc:	2b7e      	cmp	r3, #126	; 0x7e
 80158de:	d906      	bls.n	80158ee <etharp_query+0x7e>
 80158e0:	4b7a      	ldr	r3, [pc, #488]	; (8015acc <etharp_query+0x25c>)
 80158e2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80158e6:	497a      	ldr	r1, [pc, #488]	; (8015ad0 <etharp_query+0x260>)
 80158e8:	487a      	ldr	r0, [pc, #488]	; (8015ad4 <etharp_query+0x264>)
 80158ea:	f001 fd99 	bl	8017420 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80158ee:	8a7b      	ldrh	r3, [r7, #18]
 80158f0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80158f2:	7c7a      	ldrb	r2, [r7, #17]
 80158f4:	4978      	ldr	r1, [pc, #480]	; (8015ad8 <etharp_query+0x268>)
 80158f6:	4613      	mov	r3, r2
 80158f8:	005b      	lsls	r3, r3, #1
 80158fa:	4413      	add	r3, r2
 80158fc:	00db      	lsls	r3, r3, #3
 80158fe:	440b      	add	r3, r1
 8015900:	3314      	adds	r3, #20
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d115      	bne.n	8015934 <etharp_query+0xc4>
    is_new_entry = 1;
 8015908:	2301      	movs	r3, #1
 801590a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801590c:	7c7a      	ldrb	r2, [r7, #17]
 801590e:	4972      	ldr	r1, [pc, #456]	; (8015ad8 <etharp_query+0x268>)
 8015910:	4613      	mov	r3, r2
 8015912:	005b      	lsls	r3, r3, #1
 8015914:	4413      	add	r3, r2
 8015916:	00db      	lsls	r3, r3, #3
 8015918:	440b      	add	r3, r1
 801591a:	3314      	adds	r3, #20
 801591c:	2201      	movs	r2, #1
 801591e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015920:	7c7a      	ldrb	r2, [r7, #17]
 8015922:	496d      	ldr	r1, [pc, #436]	; (8015ad8 <etharp_query+0x268>)
 8015924:	4613      	mov	r3, r2
 8015926:	005b      	lsls	r3, r3, #1
 8015928:	4413      	add	r3, r2
 801592a:	00db      	lsls	r3, r3, #3
 801592c:	440b      	add	r3, r1
 801592e:	3308      	adds	r3, #8
 8015930:	68fa      	ldr	r2, [r7, #12]
 8015932:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015934:	7c7a      	ldrb	r2, [r7, #17]
 8015936:	4968      	ldr	r1, [pc, #416]	; (8015ad8 <etharp_query+0x268>)
 8015938:	4613      	mov	r3, r2
 801593a:	005b      	lsls	r3, r3, #1
 801593c:	4413      	add	r3, r2
 801593e:	00db      	lsls	r3, r3, #3
 8015940:	440b      	add	r3, r1
 8015942:	3314      	adds	r3, #20
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	2b01      	cmp	r3, #1
 8015948:	d011      	beq.n	801596e <etharp_query+0xfe>
 801594a:	7c7a      	ldrb	r2, [r7, #17]
 801594c:	4962      	ldr	r1, [pc, #392]	; (8015ad8 <etharp_query+0x268>)
 801594e:	4613      	mov	r3, r2
 8015950:	005b      	lsls	r3, r3, #1
 8015952:	4413      	add	r3, r2
 8015954:	00db      	lsls	r3, r3, #3
 8015956:	440b      	add	r3, r1
 8015958:	3314      	adds	r3, #20
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	2b01      	cmp	r3, #1
 801595e:	d806      	bhi.n	801596e <etharp_query+0xfe>
 8015960:	4b5a      	ldr	r3, [pc, #360]	; (8015acc <etharp_query+0x25c>)
 8015962:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015966:	495d      	ldr	r1, [pc, #372]	; (8015adc <etharp_query+0x26c>)
 8015968:	485a      	ldr	r0, [pc, #360]	; (8015ad4 <etharp_query+0x264>)
 801596a:	f001 fd59 	bl	8017420 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801596e:	6a3b      	ldr	r3, [r7, #32]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d102      	bne.n	801597a <etharp_query+0x10a>
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d10c      	bne.n	8015994 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801597a:	68b9      	ldr	r1, [r7, #8]
 801597c:	68f8      	ldr	r0, [r7, #12]
 801597e:	f000 f963 	bl	8015c48 <etharp_request>
 8015982:	4603      	mov	r3, r0
 8015984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d102      	bne.n	8015994 <etharp_query+0x124>
      return result;
 801598e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015992:	e096      	b.n	8015ac2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d106      	bne.n	80159a8 <etharp_query+0x138>
 801599a:	4b4c      	ldr	r3, [pc, #304]	; (8015acc <etharp_query+0x25c>)
 801599c:	f240 32e1 	movw	r2, #993	; 0x3e1
 80159a0:	494f      	ldr	r1, [pc, #316]	; (8015ae0 <etharp_query+0x270>)
 80159a2:	484c      	ldr	r0, [pc, #304]	; (8015ad4 <etharp_query+0x264>)
 80159a4:	f001 fd3c 	bl	8017420 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80159a8:	7c7a      	ldrb	r2, [r7, #17]
 80159aa:	494b      	ldr	r1, [pc, #300]	; (8015ad8 <etharp_query+0x268>)
 80159ac:	4613      	mov	r3, r2
 80159ae:	005b      	lsls	r3, r3, #1
 80159b0:	4413      	add	r3, r2
 80159b2:	00db      	lsls	r3, r3, #3
 80159b4:	440b      	add	r3, r1
 80159b6:	3314      	adds	r3, #20
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d917      	bls.n	80159ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80159be:	4a49      	ldr	r2, [pc, #292]	; (8015ae4 <etharp_query+0x274>)
 80159c0:	7c7b      	ldrb	r3, [r7, #17]
 80159c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80159c4:	7c7a      	ldrb	r2, [r7, #17]
 80159c6:	4613      	mov	r3, r2
 80159c8:	005b      	lsls	r3, r3, #1
 80159ca:	4413      	add	r3, r2
 80159cc:	00db      	lsls	r3, r3, #3
 80159ce:	3308      	adds	r3, #8
 80159d0:	4a41      	ldr	r2, [pc, #260]	; (8015ad8 <etharp_query+0x268>)
 80159d2:	4413      	add	r3, r2
 80159d4:	3304      	adds	r3, #4
 80159d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80159da:	9200      	str	r2, [sp, #0]
 80159dc:	697a      	ldr	r2, [r7, #20]
 80159de:	6879      	ldr	r1, [r7, #4]
 80159e0:	68f8      	ldr	r0, [r7, #12]
 80159e2:	f001 fc6f 	bl	80172c4 <ethernet_output>
 80159e6:	4603      	mov	r3, r0
 80159e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80159ec:	e067      	b.n	8015abe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80159ee:	7c7a      	ldrb	r2, [r7, #17]
 80159f0:	4939      	ldr	r1, [pc, #228]	; (8015ad8 <etharp_query+0x268>)
 80159f2:	4613      	mov	r3, r2
 80159f4:	005b      	lsls	r3, r3, #1
 80159f6:	4413      	add	r3, r2
 80159f8:	00db      	lsls	r3, r3, #3
 80159fa:	440b      	add	r3, r1
 80159fc:	3314      	adds	r3, #20
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	d15c      	bne.n	8015abe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015a04:	2300      	movs	r3, #0
 8015a06:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015a0c:	e01c      	b.n	8015a48 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015a0e:	69fb      	ldr	r3, [r7, #28]
 8015a10:	895a      	ldrh	r2, [r3, #10]
 8015a12:	69fb      	ldr	r3, [r7, #28]
 8015a14:	891b      	ldrh	r3, [r3, #8]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d10a      	bne.n	8015a30 <etharp_query+0x1c0>
 8015a1a:	69fb      	ldr	r3, [r7, #28]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d006      	beq.n	8015a30 <etharp_query+0x1c0>
 8015a22:	4b2a      	ldr	r3, [pc, #168]	; (8015acc <etharp_query+0x25c>)
 8015a24:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015a28:	492f      	ldr	r1, [pc, #188]	; (8015ae8 <etharp_query+0x278>)
 8015a2a:	482a      	ldr	r0, [pc, #168]	; (8015ad4 <etharp_query+0x264>)
 8015a2c:	f001 fcf8 	bl	8017420 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015a30:	69fb      	ldr	r3, [r7, #28]
 8015a32:	7b1b      	ldrb	r3, [r3, #12]
 8015a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d002      	beq.n	8015a42 <etharp_query+0x1d2>
        copy_needed = 1;
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	61bb      	str	r3, [r7, #24]
        break;
 8015a40:	e005      	b.n	8015a4e <etharp_query+0x1de>
      }
      p = p->next;
 8015a42:	69fb      	ldr	r3, [r7, #28]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015a48:	69fb      	ldr	r3, [r7, #28]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d1df      	bne.n	8015a0e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d007      	beq.n	8015a64 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015a54:	687a      	ldr	r2, [r7, #4]
 8015a56:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015a5a:	200e      	movs	r0, #14
 8015a5c:	f7f8 fe2e 	bl	800e6bc <pbuf_clone>
 8015a60:	61f8      	str	r0, [r7, #28]
 8015a62:	e004      	b.n	8015a6e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015a68:	69f8      	ldr	r0, [r7, #28]
 8015a6a:	f7f8 fc6b 	bl	800e344 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015a6e:	69fb      	ldr	r3, [r7, #28]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d021      	beq.n	8015ab8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015a74:	7c7a      	ldrb	r2, [r7, #17]
 8015a76:	4918      	ldr	r1, [pc, #96]	; (8015ad8 <etharp_query+0x268>)
 8015a78:	4613      	mov	r3, r2
 8015a7a:	005b      	lsls	r3, r3, #1
 8015a7c:	4413      	add	r3, r2
 8015a7e:	00db      	lsls	r3, r3, #3
 8015a80:	440b      	add	r3, r1
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d00a      	beq.n	8015a9e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015a88:	7c7a      	ldrb	r2, [r7, #17]
 8015a8a:	4913      	ldr	r1, [pc, #76]	; (8015ad8 <etharp_query+0x268>)
 8015a8c:	4613      	mov	r3, r2
 8015a8e:	005b      	lsls	r3, r3, #1
 8015a90:	4413      	add	r3, r2
 8015a92:	00db      	lsls	r3, r3, #3
 8015a94:	440b      	add	r3, r1
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7f8 fbb3 	bl	800e204 <pbuf_free>
      }
      arp_table[i].q = p;
 8015a9e:	7c7a      	ldrb	r2, [r7, #17]
 8015aa0:	490d      	ldr	r1, [pc, #52]	; (8015ad8 <etharp_query+0x268>)
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	005b      	lsls	r3, r3, #1
 8015aa6:	4413      	add	r3, r2
 8015aa8:	00db      	lsls	r3, r3, #3
 8015aaa:	440b      	add	r3, r1
 8015aac:	69fa      	ldr	r2, [r7, #28]
 8015aae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ab6:	e002      	b.n	8015abe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015ab8:	23ff      	movs	r3, #255	; 0xff
 8015aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015abe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3728      	adds	r7, #40	; 0x28
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	0801bfcc 	.word	0x0801bfcc
 8015ad0:	0801c178 	.word	0x0801c178
 8015ad4:	0801c044 	.word	0x0801c044
 8015ad8:	20001a4c 	.word	0x20001a4c
 8015adc:	0801c188 	.word	0x0801c188
 8015ae0:	0801c16c 	.word	0x0801c16c
 8015ae4:	20001b3c 	.word	0x20001b3c
 8015ae8:	0801c1b0 	.word	0x0801c1b0

08015aec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b08a      	sub	sp, #40	; 0x28
 8015af0:	af02      	add	r7, sp, #8
 8015af2:	60f8      	str	r0, [r7, #12]
 8015af4:	60b9      	str	r1, [r7, #8]
 8015af6:	607a      	str	r2, [r7, #4]
 8015af8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015afa:	2300      	movs	r3, #0
 8015afc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d106      	bne.n	8015b12 <etharp_raw+0x26>
 8015b04:	4b3a      	ldr	r3, [pc, #232]	; (8015bf0 <etharp_raw+0x104>)
 8015b06:	f240 4257 	movw	r2, #1111	; 0x457
 8015b0a:	493a      	ldr	r1, [pc, #232]	; (8015bf4 <etharp_raw+0x108>)
 8015b0c:	483a      	ldr	r0, [pc, #232]	; (8015bf8 <etharp_raw+0x10c>)
 8015b0e:	f001 fc87 	bl	8017420 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015b12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015b16:	211c      	movs	r1, #28
 8015b18:	200e      	movs	r0, #14
 8015b1a:	f7f8 f88f 	bl	800dc3c <pbuf_alloc>
 8015b1e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015b20:	69bb      	ldr	r3, [r7, #24]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d102      	bne.n	8015b2c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b2a:	e05d      	b.n	8015be8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015b2c:	69bb      	ldr	r3, [r7, #24]
 8015b2e:	895b      	ldrh	r3, [r3, #10]
 8015b30:	2b1b      	cmp	r3, #27
 8015b32:	d806      	bhi.n	8015b42 <etharp_raw+0x56>
 8015b34:	4b2e      	ldr	r3, [pc, #184]	; (8015bf0 <etharp_raw+0x104>)
 8015b36:	f240 4262 	movw	r2, #1122	; 0x462
 8015b3a:	4930      	ldr	r1, [pc, #192]	; (8015bfc <etharp_raw+0x110>)
 8015b3c:	482e      	ldr	r0, [pc, #184]	; (8015bf8 <etharp_raw+0x10c>)
 8015b3e:	f001 fc6f 	bl	8017420 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015b42:	69bb      	ldr	r3, [r7, #24]
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015b48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7f6 ffc8 	bl	800cae0 <lwip_htons>
 8015b50:	4603      	mov	r3, r0
 8015b52:	461a      	mov	r2, r3
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b5e:	2b06      	cmp	r3, #6
 8015b60:	d006      	beq.n	8015b70 <etharp_raw+0x84>
 8015b62:	4b23      	ldr	r3, [pc, #140]	; (8015bf0 <etharp_raw+0x104>)
 8015b64:	f240 4269 	movw	r2, #1129	; 0x469
 8015b68:	4925      	ldr	r1, [pc, #148]	; (8015c00 <etharp_raw+0x114>)
 8015b6a:	4823      	ldr	r0, [pc, #140]	; (8015bf8 <etharp_raw+0x10c>)
 8015b6c:	f001 fc58 	bl	8017420 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	3308      	adds	r3, #8
 8015b74:	2206      	movs	r2, #6
 8015b76:	6839      	ldr	r1, [r7, #0]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f001 fc21 	bl	80173c0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015b7e:	697b      	ldr	r3, [r7, #20]
 8015b80:	3312      	adds	r3, #18
 8015b82:	2206      	movs	r2, #6
 8015b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b86:	4618      	mov	r0, r3
 8015b88:	f001 fc1a 	bl	80173c0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	330e      	adds	r3, #14
 8015b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b92:	6812      	ldr	r2, [r2, #0]
 8015b94:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	3318      	adds	r3, #24
 8015b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b9c:	6812      	ldr	r2, [r2, #0]
 8015b9e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015ba0:	697b      	ldr	r3, [r7, #20]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	701a      	strb	r2, [r3, #0]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	f042 0201 	orr.w	r2, r2, #1
 8015bac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	f042 0208 	orr.w	r2, r2, #8
 8015bb6:	709a      	strb	r2, [r3, #2]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	2206      	movs	r2, #6
 8015bc0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	2204      	movs	r2, #4
 8015bc6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015bc8:	f640 0306 	movw	r3, #2054	; 0x806
 8015bcc:	9300      	str	r3, [sp, #0]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	68ba      	ldr	r2, [r7, #8]
 8015bd2:	69b9      	ldr	r1, [r7, #24]
 8015bd4:	68f8      	ldr	r0, [r7, #12]
 8015bd6:	f001 fb75 	bl	80172c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015bda:	69b8      	ldr	r0, [r7, #24]
 8015bdc:	f7f8 fb12 	bl	800e204 <pbuf_free>
  p = NULL;
 8015be0:	2300      	movs	r3, #0
 8015be2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015be4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	3720      	adds	r7, #32
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	0801bfcc 	.word	0x0801bfcc
 8015bf4:	0801c11c 	.word	0x0801c11c
 8015bf8:	0801c044 	.word	0x0801c044
 8015bfc:	0801c1cc 	.word	0x0801c1cc
 8015c00:	0801c200 	.word	0x0801c200

08015c04 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b088      	sub	sp, #32
 8015c08:	af04      	add	r7, sp, #16
 8015c0a:	60f8      	str	r0, [r7, #12]
 8015c0c:	60b9      	str	r1, [r7, #8]
 8015c0e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015c20:	2201      	movs	r2, #1
 8015c22:	9203      	str	r2, [sp, #12]
 8015c24:	68ba      	ldr	r2, [r7, #8]
 8015c26:	9202      	str	r2, [sp, #8]
 8015c28:	4a06      	ldr	r2, [pc, #24]	; (8015c44 <etharp_request_dst+0x40>)
 8015c2a:	9201      	str	r2, [sp, #4]
 8015c2c:	9300      	str	r3, [sp, #0]
 8015c2e:	4603      	mov	r3, r0
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	68f8      	ldr	r0, [r7, #12]
 8015c34:	f7ff ff5a 	bl	8015aec <etharp_raw>
 8015c38:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3710      	adds	r7, #16
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop
 8015c44:	0801eea8 	.word	0x0801eea8

08015c48 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b082      	sub	sp, #8
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015c52:	4a05      	ldr	r2, [pc, #20]	; (8015c68 <etharp_request+0x20>)
 8015c54:	6839      	ldr	r1, [r7, #0]
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f7ff ffd4 	bl	8015c04 <etharp_request_dst>
 8015c5c:	4603      	mov	r3, r0
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	3708      	adds	r7, #8
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}
 8015c66:	bf00      	nop
 8015c68:	0801eea0 	.word	0x0801eea0

08015c6c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b08e      	sub	sp, #56	; 0x38
 8015c70:	af04      	add	r7, sp, #16
 8015c72:	6078      	str	r0, [r7, #4]
 8015c74:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015c76:	4b79      	ldr	r3, [pc, #484]	; (8015e5c <icmp_input+0x1f0>)
 8015c78:	689b      	ldr	r3, [r3, #8]
 8015c7a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7e:	781b      	ldrb	r3, [r3, #0]
 8015c80:	f003 030f 	and.w	r3, r3, #15
 8015c84:	b2db      	uxtb	r3, r3
 8015c86:	009b      	lsls	r3, r3, #2
 8015c88:	b2db      	uxtb	r3, r3
 8015c8a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c8e:	2b13      	cmp	r3, #19
 8015c90:	f240 80cd 	bls.w	8015e2e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	895b      	ldrh	r3, [r3, #10]
 8015c98:	2b03      	cmp	r3, #3
 8015c9a:	f240 80ca 	bls.w	8015e32 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015ca8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	f000 80b7 	beq.w	8015e20 <icmp_input+0x1b4>
 8015cb2:	2b08      	cmp	r3, #8
 8015cb4:	f040 80b7 	bne.w	8015e26 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015cb8:	4b69      	ldr	r3, [pc, #420]	; (8015e60 <icmp_input+0x1f4>)
 8015cba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015cbc:	4b67      	ldr	r3, [pc, #412]	; (8015e5c <icmp_input+0x1f0>)
 8015cbe:	695b      	ldr	r3, [r3, #20]
 8015cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015cc4:	2be0      	cmp	r3, #224	; 0xe0
 8015cc6:	f000 80bb 	beq.w	8015e40 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015cca:	4b64      	ldr	r3, [pc, #400]	; (8015e5c <icmp_input+0x1f0>)
 8015ccc:	695b      	ldr	r3, [r3, #20]
 8015cce:	4a63      	ldr	r2, [pc, #396]	; (8015e5c <icmp_input+0x1f0>)
 8015cd0:	6812      	ldr	r2, [r2, #0]
 8015cd2:	4611      	mov	r1, r2
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f000 fbed 	bl	80164b4 <ip4_addr_isbroadcast_u32>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	f040 80b1 	bne.w	8015e44 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	891b      	ldrh	r3, [r3, #8]
 8015ce6:	2b07      	cmp	r3, #7
 8015ce8:	f240 80a5 	bls.w	8015e36 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015cec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cee:	330e      	adds	r3, #14
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f7f8 f9f0 	bl	800e0d8 <pbuf_add_header>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d04b      	beq.n	8015d96 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	891a      	ldrh	r2, [r3, #8]
 8015d02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d04:	4413      	add	r3, r2
 8015d06:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	891b      	ldrh	r3, [r3, #8]
 8015d0c:	8b7a      	ldrh	r2, [r7, #26]
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	f0c0 809a 	bcc.w	8015e48 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015d14:	8b7b      	ldrh	r3, [r7, #26]
 8015d16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	200e      	movs	r0, #14
 8015d1e:	f7f7 ff8d 	bl	800dc3c <pbuf_alloc>
 8015d22:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	f000 8090 	beq.w	8015e4c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	895b      	ldrh	r3, [r3, #10]
 8015d30:	461a      	mov	r2, r3
 8015d32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d34:	3308      	adds	r3, #8
 8015d36:	429a      	cmp	r2, r3
 8015d38:	d203      	bcs.n	8015d42 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015d3a:	6978      	ldr	r0, [r7, #20]
 8015d3c:	f7f8 fa62 	bl	800e204 <pbuf_free>
          goto icmperr;
 8015d40:	e085      	b.n	8015e4e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	685b      	ldr	r3, [r3, #4]
 8015d46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	f001 fb38 	bl	80173c0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015d50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d52:	4619      	mov	r1, r3
 8015d54:	6978      	ldr	r0, [r7, #20]
 8015d56:	f7f8 f9cf 	bl	800e0f8 <pbuf_remove_header>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d009      	beq.n	8015d74 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015d60:	4b40      	ldr	r3, [pc, #256]	; (8015e64 <icmp_input+0x1f8>)
 8015d62:	22b6      	movs	r2, #182	; 0xb6
 8015d64:	4940      	ldr	r1, [pc, #256]	; (8015e68 <icmp_input+0x1fc>)
 8015d66:	4841      	ldr	r0, [pc, #260]	; (8015e6c <icmp_input+0x200>)
 8015d68:	f001 fb5a 	bl	8017420 <iprintf>
          pbuf_free(r);
 8015d6c:	6978      	ldr	r0, [r7, #20]
 8015d6e:	f7f8 fa49 	bl	800e204 <pbuf_free>
          goto icmperr;
 8015d72:	e06c      	b.n	8015e4e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015d74:	6879      	ldr	r1, [r7, #4]
 8015d76:	6978      	ldr	r0, [r7, #20]
 8015d78:	f7f8 fb5c 	bl	800e434 <pbuf_copy>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d003      	beq.n	8015d8a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015d82:	6978      	ldr	r0, [r7, #20]
 8015d84:	f7f8 fa3e 	bl	800e204 <pbuf_free>
          goto icmperr;
 8015d88:	e061      	b.n	8015e4e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f7f8 fa3a 	bl	800e204 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	607b      	str	r3, [r7, #4]
 8015d94:	e00f      	b.n	8015db6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015d96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d98:	330e      	adds	r3, #14
 8015d9a:	4619      	mov	r1, r3
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f7f8 f9ab 	bl	800e0f8 <pbuf_remove_header>
 8015da2:	4603      	mov	r3, r0
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d006      	beq.n	8015db6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015da8:	4b2e      	ldr	r3, [pc, #184]	; (8015e64 <icmp_input+0x1f8>)
 8015daa:	22c7      	movs	r2, #199	; 0xc7
 8015dac:	4930      	ldr	r1, [pc, #192]	; (8015e70 <icmp_input+0x204>)
 8015dae:	482f      	ldr	r0, [pc, #188]	; (8015e6c <icmp_input+0x200>)
 8015db0:	f001 fb36 	bl	8017420 <iprintf>
          goto icmperr;
 8015db4:	e04b      	b.n	8015e4e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	685b      	ldr	r3, [r3, #4]
 8015dba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015dbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015dbe:	4619      	mov	r1, r3
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	f7f8 f989 	bl	800e0d8 <pbuf_add_header>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d12b      	bne.n	8015e24 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015dd2:	69fb      	ldr	r3, [r7, #28]
 8015dd4:	681a      	ldr	r2, [r3, #0]
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015dda:	4b20      	ldr	r3, [pc, #128]	; (8015e5c <icmp_input+0x1f0>)
 8015ddc:	691a      	ldr	r2, [r3, #16]
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	2200      	movs	r2, #0
 8015de6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015de8:	693b      	ldr	r3, [r7, #16]
 8015dea:	2200      	movs	r2, #0
 8015dec:	709a      	strb	r2, [r3, #2]
 8015dee:	2200      	movs	r2, #0
 8015df0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	22ff      	movs	r2, #255	; 0xff
 8015df6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	729a      	strb	r2, [r3, #10]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	9302      	str	r3, [sp, #8]
 8015e06:	2301      	movs	r3, #1
 8015e08:	9301      	str	r3, [sp, #4]
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	9300      	str	r3, [sp, #0]
 8015e0e:	23ff      	movs	r3, #255	; 0xff
 8015e10:	2200      	movs	r2, #0
 8015e12:	69f9      	ldr	r1, [r7, #28]
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f000 fa75 	bl	8016304 <ip4_output_if>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015e1e:	e001      	b.n	8015e24 <icmp_input+0x1b8>
      break;
 8015e20:	bf00      	nop
 8015e22:	e000      	b.n	8015e26 <icmp_input+0x1ba>
      break;
 8015e24:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f7f8 f9ec 	bl	800e204 <pbuf_free>
  return;
 8015e2c:	e013      	b.n	8015e56 <icmp_input+0x1ea>
    goto lenerr;
 8015e2e:	bf00      	nop
 8015e30:	e002      	b.n	8015e38 <icmp_input+0x1cc>
    goto lenerr;
 8015e32:	bf00      	nop
 8015e34:	e000      	b.n	8015e38 <icmp_input+0x1cc>
        goto lenerr;
 8015e36:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f7f8 f9e3 	bl	800e204 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015e3e:	e00a      	b.n	8015e56 <icmp_input+0x1ea>
        goto icmperr;
 8015e40:	bf00      	nop
 8015e42:	e004      	b.n	8015e4e <icmp_input+0x1e2>
        goto icmperr;
 8015e44:	bf00      	nop
 8015e46:	e002      	b.n	8015e4e <icmp_input+0x1e2>
          goto icmperr;
 8015e48:	bf00      	nop
 8015e4a:	e000      	b.n	8015e4e <icmp_input+0x1e2>
          goto icmperr;
 8015e4c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f7f8 f9d8 	bl	800e204 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015e54:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015e56:	3728      	adds	r7, #40	; 0x28
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd80      	pop	{r7, pc}
 8015e5c:	2000e2ec 	.word	0x2000e2ec
 8015e60:	2000e300 	.word	0x2000e300
 8015e64:	0801c244 	.word	0x0801c244
 8015e68:	0801c27c 	.word	0x0801c27c
 8015e6c:	0801c2b4 	.word	0x0801c2b4
 8015e70:	0801c2dc 	.word	0x0801c2dc

08015e74 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b082      	sub	sp, #8
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	460b      	mov	r3, r1
 8015e7e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015e80:	78fb      	ldrb	r3, [r7, #3]
 8015e82:	461a      	mov	r2, r3
 8015e84:	2103      	movs	r1, #3
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 f814 	bl	8015eb4 <icmp_send_response>
}
 8015e8c:	bf00      	nop
 8015e8e:	3708      	adds	r7, #8
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}

08015e94 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b082      	sub	sp, #8
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
 8015e9c:	460b      	mov	r3, r1
 8015e9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015ea0:	78fb      	ldrb	r3, [r7, #3]
 8015ea2:	461a      	mov	r2, r3
 8015ea4:	210b      	movs	r1, #11
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	f000 f804 	bl	8015eb4 <icmp_send_response>
}
 8015eac:	bf00      	nop
 8015eae:	3708      	adds	r7, #8
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}

08015eb4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b08c      	sub	sp, #48	; 0x30
 8015eb8:	af04      	add	r7, sp, #16
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	460b      	mov	r3, r1
 8015ebe:	70fb      	strb	r3, [r7, #3]
 8015ec0:	4613      	mov	r3, r2
 8015ec2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015ec4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ec8:	2124      	movs	r1, #36	; 0x24
 8015eca:	2022      	movs	r0, #34	; 0x22
 8015ecc:	f7f7 feb6 	bl	800dc3c <pbuf_alloc>
 8015ed0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015ed2:	69fb      	ldr	r3, [r7, #28]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d04c      	beq.n	8015f72 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015ed8:	69fb      	ldr	r3, [r7, #28]
 8015eda:	895b      	ldrh	r3, [r3, #10]
 8015edc:	2b23      	cmp	r3, #35	; 0x23
 8015ede:	d806      	bhi.n	8015eee <icmp_send_response+0x3a>
 8015ee0:	4b26      	ldr	r3, [pc, #152]	; (8015f7c <icmp_send_response+0xc8>)
 8015ee2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015ee6:	4926      	ldr	r1, [pc, #152]	; (8015f80 <icmp_send_response+0xcc>)
 8015ee8:	4826      	ldr	r0, [pc, #152]	; (8015f84 <icmp_send_response+0xd0>)
 8015eea:	f001 fa99 	bl	8017420 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	685b      	ldr	r3, [r3, #4]
 8015ef2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015ef4:	69fb      	ldr	r3, [r7, #28]
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	78fa      	ldrb	r2, [r7, #3]
 8015efe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015f00:	697b      	ldr	r3, [r7, #20]
 8015f02:	78ba      	ldrb	r2, [r7, #2]
 8015f04:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	711a      	strb	r2, [r3, #4]
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	2200      	movs	r2, #0
 8015f14:	719a      	strb	r2, [r3, #6]
 8015f16:	2200      	movs	r2, #0
 8015f18:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015f1a:	69fb      	ldr	r3, [r7, #28]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	f103 0008 	add.w	r0, r3, #8
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	221c      	movs	r2, #28
 8015f28:	4619      	mov	r1, r3
 8015f2a:	f001 fa49 	bl	80173c0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015f2e:	69bb      	ldr	r3, [r7, #24]
 8015f30:	68db      	ldr	r3, [r3, #12]
 8015f32:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015f34:	f107 030c 	add.w	r3, r7, #12
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f000 f825 	bl	8015f88 <ip4_route>
 8015f3e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015f40:	693b      	ldr	r3, [r7, #16]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d011      	beq.n	8015f6a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	2200      	movs	r2, #0
 8015f4a:	709a      	strb	r2, [r3, #2]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015f50:	f107 020c 	add.w	r2, r7, #12
 8015f54:	693b      	ldr	r3, [r7, #16]
 8015f56:	9302      	str	r3, [sp, #8]
 8015f58:	2301      	movs	r3, #1
 8015f5a:	9301      	str	r3, [sp, #4]
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	9300      	str	r3, [sp, #0]
 8015f60:	23ff      	movs	r3, #255	; 0xff
 8015f62:	2100      	movs	r1, #0
 8015f64:	69f8      	ldr	r0, [r7, #28]
 8015f66:	f000 f9cd 	bl	8016304 <ip4_output_if>
  }
  pbuf_free(q);
 8015f6a:	69f8      	ldr	r0, [r7, #28]
 8015f6c:	f7f8 f94a 	bl	800e204 <pbuf_free>
 8015f70:	e000      	b.n	8015f74 <icmp_send_response+0xc0>
    return;
 8015f72:	bf00      	nop
}
 8015f74:	3720      	adds	r7, #32
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop
 8015f7c:	0801c244 	.word	0x0801c244
 8015f80:	0801c310 	.word	0x0801c310
 8015f84:	0801c2b4 	.word	0x0801c2b4

08015f88 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b085      	sub	sp, #20
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015f90:	4b33      	ldr	r3, [pc, #204]	; (8016060 <ip4_route+0xd8>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	60fb      	str	r3, [r7, #12]
 8015f96:	e036      	b.n	8016006 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f9e:	f003 0301 	and.w	r3, r3, #1
 8015fa2:	b2db      	uxtb	r3, r3
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d02b      	beq.n	8016000 <ip4_route+0x78>
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fae:	089b      	lsrs	r3, r3, #2
 8015fb0:	f003 0301 	and.w	r3, r3, #1
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d022      	beq.n	8016000 <ip4_route+0x78>
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	3304      	adds	r3, #4
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d01d      	beq.n	8016000 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681a      	ldr	r2, [r3, #0]
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	3304      	adds	r3, #4
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	405a      	eors	r2, r3
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	3308      	adds	r3, #8
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	4013      	ands	r3, r2
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d101      	bne.n	8015fe0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	e038      	b.n	8016052 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fe6:	f003 0302 	and.w	r3, r3, #2
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d108      	bne.n	8016000 <ip4_route+0x78>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681a      	ldr	r2, [r3, #0]
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	330c      	adds	r3, #12
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d101      	bne.n	8016000 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	e028      	b.n	8016052 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	60fb      	str	r3, [r7, #12]
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d1c5      	bne.n	8015f98 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801600c:	4b15      	ldr	r3, [pc, #84]	; (8016064 <ip4_route+0xdc>)
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d01a      	beq.n	801604a <ip4_route+0xc2>
 8016014:	4b13      	ldr	r3, [pc, #76]	; (8016064 <ip4_route+0xdc>)
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801601c:	f003 0301 	and.w	r3, r3, #1
 8016020:	2b00      	cmp	r3, #0
 8016022:	d012      	beq.n	801604a <ip4_route+0xc2>
 8016024:	4b0f      	ldr	r3, [pc, #60]	; (8016064 <ip4_route+0xdc>)
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801602c:	f003 0304 	and.w	r3, r3, #4
 8016030:	2b00      	cmp	r3, #0
 8016032:	d00a      	beq.n	801604a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016034:	4b0b      	ldr	r3, [pc, #44]	; (8016064 <ip4_route+0xdc>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	3304      	adds	r3, #4
 801603a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801603c:	2b00      	cmp	r3, #0
 801603e:	d004      	beq.n	801604a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	b2db      	uxtb	r3, r3
 8016046:	2b7f      	cmp	r3, #127	; 0x7f
 8016048:	d101      	bne.n	801604e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801604a:	2300      	movs	r3, #0
 801604c:	e001      	b.n	8016052 <ip4_route+0xca>
  }

  return netif_default;
 801604e:	4b05      	ldr	r3, [pc, #20]	; (8016064 <ip4_route+0xdc>)
 8016050:	681b      	ldr	r3, [r3, #0]
}
 8016052:	4618      	mov	r0, r3
 8016054:	3714      	adds	r7, #20
 8016056:	46bd      	mov	sp, r7
 8016058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605c:	4770      	bx	lr
 801605e:	bf00      	nop
 8016060:	20011820 	.word	0x20011820
 8016064:	20011824 	.word	0x20011824

08016068 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016076:	f003 0301 	and.w	r3, r3, #1
 801607a:	b2db      	uxtb	r3, r3
 801607c:	2b00      	cmp	r3, #0
 801607e:	d016      	beq.n	80160ae <ip4_input_accept+0x46>
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	3304      	adds	r3, #4
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d011      	beq.n	80160ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801608a:	4b0b      	ldr	r3, [pc, #44]	; (80160b8 <ip4_input_accept+0x50>)
 801608c:	695a      	ldr	r2, [r3, #20]
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	3304      	adds	r3, #4
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	429a      	cmp	r2, r3
 8016096:	d008      	beq.n	80160aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016098:	4b07      	ldr	r3, [pc, #28]	; (80160b8 <ip4_input_accept+0x50>)
 801609a:	695b      	ldr	r3, [r3, #20]
 801609c:	6879      	ldr	r1, [r7, #4]
 801609e:	4618      	mov	r0, r3
 80160a0:	f000 fa08 	bl	80164b4 <ip4_addr_isbroadcast_u32>
 80160a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d001      	beq.n	80160ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80160aa:	2301      	movs	r3, #1
 80160ac:	e000      	b.n	80160b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80160ae:	2300      	movs	r3, #0
}
 80160b0:	4618      	mov	r0, r3
 80160b2:	3708      	adds	r7, #8
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}
 80160b8:	2000e2ec 	.word	0x2000e2ec

080160bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b086      	sub	sp, #24
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	685b      	ldr	r3, [r3, #4]
 80160ca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80160cc:	697b      	ldr	r3, [r7, #20]
 80160ce:	781b      	ldrb	r3, [r3, #0]
 80160d0:	091b      	lsrs	r3, r3, #4
 80160d2:	b2db      	uxtb	r3, r3
 80160d4:	2b04      	cmp	r3, #4
 80160d6:	d004      	beq.n	80160e2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f7f8 f893 	bl	800e204 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80160de:	2300      	movs	r3, #0
 80160e0:	e107      	b.n	80162f2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80160e2:	697b      	ldr	r3, [r7, #20]
 80160e4:	781b      	ldrb	r3, [r3, #0]
 80160e6:	f003 030f 	and.w	r3, r3, #15
 80160ea:	b2db      	uxtb	r3, r3
 80160ec:	009b      	lsls	r3, r3, #2
 80160ee:	b2db      	uxtb	r3, r3
 80160f0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80160f2:	697b      	ldr	r3, [r7, #20]
 80160f4:	885b      	ldrh	r3, [r3, #2]
 80160f6:	b29b      	uxth	r3, r3
 80160f8:	4618      	mov	r0, r3
 80160fa:	f7f6 fcf1 	bl	800cae0 <lwip_htons>
 80160fe:	4603      	mov	r3, r0
 8016100:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	891b      	ldrh	r3, [r3, #8]
 8016106:	89ba      	ldrh	r2, [r7, #12]
 8016108:	429a      	cmp	r2, r3
 801610a:	d204      	bcs.n	8016116 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801610c:	89bb      	ldrh	r3, [r7, #12]
 801610e:	4619      	mov	r1, r3
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f7f7 fef1 	bl	800def8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	895b      	ldrh	r3, [r3, #10]
 801611a:	89fa      	ldrh	r2, [r7, #14]
 801611c:	429a      	cmp	r2, r3
 801611e:	d807      	bhi.n	8016130 <ip4_input+0x74>
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	891b      	ldrh	r3, [r3, #8]
 8016124:	89ba      	ldrh	r2, [r7, #12]
 8016126:	429a      	cmp	r2, r3
 8016128:	d802      	bhi.n	8016130 <ip4_input+0x74>
 801612a:	89fb      	ldrh	r3, [r7, #14]
 801612c:	2b13      	cmp	r3, #19
 801612e:	d804      	bhi.n	801613a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f7f8 f867 	bl	800e204 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016136:	2300      	movs	r3, #0
 8016138:	e0db      	b.n	80162f2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801613a:	697b      	ldr	r3, [r7, #20]
 801613c:	691b      	ldr	r3, [r3, #16]
 801613e:	4a6f      	ldr	r2, [pc, #444]	; (80162fc <ip4_input+0x240>)
 8016140:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016142:	697b      	ldr	r3, [r7, #20]
 8016144:	68db      	ldr	r3, [r3, #12]
 8016146:	4a6d      	ldr	r2, [pc, #436]	; (80162fc <ip4_input+0x240>)
 8016148:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801614a:	4b6c      	ldr	r3, [pc, #432]	; (80162fc <ip4_input+0x240>)
 801614c:	695b      	ldr	r3, [r3, #20]
 801614e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016152:	2be0      	cmp	r3, #224	; 0xe0
 8016154:	d112      	bne.n	801617c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016156:	683b      	ldr	r3, [r7, #0]
 8016158:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801615c:	f003 0301 	and.w	r3, r3, #1
 8016160:	b2db      	uxtb	r3, r3
 8016162:	2b00      	cmp	r3, #0
 8016164:	d007      	beq.n	8016176 <ip4_input+0xba>
 8016166:	683b      	ldr	r3, [r7, #0]
 8016168:	3304      	adds	r3, #4
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d002      	beq.n	8016176 <ip4_input+0xba>
      netif = inp;
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	613b      	str	r3, [r7, #16]
 8016174:	e02a      	b.n	80161cc <ip4_input+0x110>
    } else {
      netif = NULL;
 8016176:	2300      	movs	r3, #0
 8016178:	613b      	str	r3, [r7, #16]
 801617a:	e027      	b.n	80161cc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801617c:	6838      	ldr	r0, [r7, #0]
 801617e:	f7ff ff73 	bl	8016068 <ip4_input_accept>
 8016182:	4603      	mov	r3, r0
 8016184:	2b00      	cmp	r3, #0
 8016186:	d002      	beq.n	801618e <ip4_input+0xd2>
      netif = inp;
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	613b      	str	r3, [r7, #16]
 801618c:	e01e      	b.n	80161cc <ip4_input+0x110>
    } else {
      netif = NULL;
 801618e:	2300      	movs	r3, #0
 8016190:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016192:	4b5a      	ldr	r3, [pc, #360]	; (80162fc <ip4_input+0x240>)
 8016194:	695b      	ldr	r3, [r3, #20]
 8016196:	b2db      	uxtb	r3, r3
 8016198:	2b7f      	cmp	r3, #127	; 0x7f
 801619a:	d017      	beq.n	80161cc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801619c:	4b58      	ldr	r3, [pc, #352]	; (8016300 <ip4_input+0x244>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	613b      	str	r3, [r7, #16]
 80161a2:	e00e      	b.n	80161c2 <ip4_input+0x106>
          if (netif == inp) {
 80161a4:	693a      	ldr	r2, [r7, #16]
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	429a      	cmp	r2, r3
 80161aa:	d006      	beq.n	80161ba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80161ac:	6938      	ldr	r0, [r7, #16]
 80161ae:	f7ff ff5b 	bl	8016068 <ip4_input_accept>
 80161b2:	4603      	mov	r3, r0
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d108      	bne.n	80161ca <ip4_input+0x10e>
 80161b8:	e000      	b.n	80161bc <ip4_input+0x100>
            continue;
 80161ba:	bf00      	nop
        NETIF_FOREACH(netif) {
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	613b      	str	r3, [r7, #16]
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d1ed      	bne.n	80161a4 <ip4_input+0xe8>
 80161c8:	e000      	b.n	80161cc <ip4_input+0x110>
            break;
 80161ca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80161cc:	4b4b      	ldr	r3, [pc, #300]	; (80162fc <ip4_input+0x240>)
 80161ce:	691b      	ldr	r3, [r3, #16]
 80161d0:	6839      	ldr	r1, [r7, #0]
 80161d2:	4618      	mov	r0, r3
 80161d4:	f000 f96e 	bl	80164b4 <ip4_addr_isbroadcast_u32>
 80161d8:	4603      	mov	r3, r0
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d105      	bne.n	80161ea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80161de:	4b47      	ldr	r3, [pc, #284]	; (80162fc <ip4_input+0x240>)
 80161e0:	691b      	ldr	r3, [r3, #16]
 80161e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80161e6:	2be0      	cmp	r3, #224	; 0xe0
 80161e8:	d104      	bne.n	80161f4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f7f8 f80a 	bl	800e204 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80161f0:	2300      	movs	r3, #0
 80161f2:	e07e      	b.n	80162f2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80161f4:	693b      	ldr	r3, [r7, #16]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d104      	bne.n	8016204 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f7f8 f802 	bl	800e204 <pbuf_free>
    return ERR_OK;
 8016200:	2300      	movs	r3, #0
 8016202:	e076      	b.n	80162f2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	88db      	ldrh	r3, [r3, #6]
 8016208:	b29b      	uxth	r3, r3
 801620a:	461a      	mov	r2, r3
 801620c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016210:	4013      	ands	r3, r2
 8016212:	2b00      	cmp	r3, #0
 8016214:	d00b      	beq.n	801622e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f000 fc92 	bl	8016b40 <ip4_reass>
 801621c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d101      	bne.n	8016228 <ip4_input+0x16c>
      return ERR_OK;
 8016224:	2300      	movs	r3, #0
 8016226:	e064      	b.n	80162f2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	685b      	ldr	r3, [r3, #4]
 801622c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801622e:	4a33      	ldr	r2, [pc, #204]	; (80162fc <ip4_input+0x240>)
 8016230:	693b      	ldr	r3, [r7, #16]
 8016232:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016234:	4a31      	ldr	r2, [pc, #196]	; (80162fc <ip4_input+0x240>)
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801623a:	4a30      	ldr	r2, [pc, #192]	; (80162fc <ip4_input+0x240>)
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	781b      	ldrb	r3, [r3, #0]
 8016244:	f003 030f 	and.w	r3, r3, #15
 8016248:	b2db      	uxtb	r3, r3
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	b2db      	uxtb	r3, r3
 801624e:	b29a      	uxth	r2, r3
 8016250:	4b2a      	ldr	r3, [pc, #168]	; (80162fc <ip4_input+0x240>)
 8016252:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016254:	89fb      	ldrh	r3, [r7, #14]
 8016256:	4619      	mov	r1, r3
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f7f7 ff4d 	bl	800e0f8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801625e:	697b      	ldr	r3, [r7, #20]
 8016260:	7a5b      	ldrb	r3, [r3, #9]
 8016262:	2b11      	cmp	r3, #17
 8016264:	d006      	beq.n	8016274 <ip4_input+0x1b8>
 8016266:	2b11      	cmp	r3, #17
 8016268:	dc13      	bgt.n	8016292 <ip4_input+0x1d6>
 801626a:	2b01      	cmp	r3, #1
 801626c:	d00c      	beq.n	8016288 <ip4_input+0x1cc>
 801626e:	2b06      	cmp	r3, #6
 8016270:	d005      	beq.n	801627e <ip4_input+0x1c2>
 8016272:	e00e      	b.n	8016292 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016274:	6839      	ldr	r1, [r7, #0]
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f7fe fc68 	bl	8014b4c <udp_input>
        break;
 801627c:	e026      	b.n	80162cc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801627e:	6839      	ldr	r1, [r7, #0]
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f7fa f88d 	bl	80103a0 <tcp_input>
        break;
 8016286:	e021      	b.n	80162cc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016288:	6839      	ldr	r1, [r7, #0]
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f7ff fcee 	bl	8015c6c <icmp_input>
        break;
 8016290:	e01c      	b.n	80162cc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016292:	4b1a      	ldr	r3, [pc, #104]	; (80162fc <ip4_input+0x240>)
 8016294:	695b      	ldr	r3, [r3, #20]
 8016296:	6939      	ldr	r1, [r7, #16]
 8016298:	4618      	mov	r0, r3
 801629a:	f000 f90b 	bl	80164b4 <ip4_addr_isbroadcast_u32>
 801629e:	4603      	mov	r3, r0
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d10f      	bne.n	80162c4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80162a4:	4b15      	ldr	r3, [pc, #84]	; (80162fc <ip4_input+0x240>)
 80162a6:	695b      	ldr	r3, [r3, #20]
 80162a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80162ac:	2be0      	cmp	r3, #224	; 0xe0
 80162ae:	d009      	beq.n	80162c4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80162b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80162b4:	4619      	mov	r1, r3
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f7f7 ff91 	bl	800e1de <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80162bc:	2102      	movs	r1, #2
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	f7ff fdd8 	bl	8015e74 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f7f7 ff9d 	bl	800e204 <pbuf_free>
        break;
 80162ca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80162cc:	4b0b      	ldr	r3, [pc, #44]	; (80162fc <ip4_input+0x240>)
 80162ce:	2200      	movs	r2, #0
 80162d0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80162d2:	4b0a      	ldr	r3, [pc, #40]	; (80162fc <ip4_input+0x240>)
 80162d4:	2200      	movs	r2, #0
 80162d6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80162d8:	4b08      	ldr	r3, [pc, #32]	; (80162fc <ip4_input+0x240>)
 80162da:	2200      	movs	r2, #0
 80162dc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80162de:	4b07      	ldr	r3, [pc, #28]	; (80162fc <ip4_input+0x240>)
 80162e0:	2200      	movs	r2, #0
 80162e2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80162e4:	4b05      	ldr	r3, [pc, #20]	; (80162fc <ip4_input+0x240>)
 80162e6:	2200      	movs	r2, #0
 80162e8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80162ea:	4b04      	ldr	r3, [pc, #16]	; (80162fc <ip4_input+0x240>)
 80162ec:	2200      	movs	r2, #0
 80162ee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80162f0:	2300      	movs	r3, #0
}
 80162f2:	4618      	mov	r0, r3
 80162f4:	3718      	adds	r7, #24
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}
 80162fa:	bf00      	nop
 80162fc:	2000e2ec 	.word	0x2000e2ec
 8016300:	20011820 	.word	0x20011820

08016304 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b08a      	sub	sp, #40	; 0x28
 8016308:	af04      	add	r7, sp, #16
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
 8016310:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d009      	beq.n	8016330 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d003      	beq.n	801632a <ip4_output_if+0x26>
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d102      	bne.n	8016330 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632c:	3304      	adds	r3, #4
 801632e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016330:	78fa      	ldrb	r2, [r7, #3]
 8016332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016334:	9302      	str	r3, [sp, #8]
 8016336:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801633a:	9301      	str	r3, [sp, #4]
 801633c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016340:	9300      	str	r3, [sp, #0]
 8016342:	4613      	mov	r3, r2
 8016344:	687a      	ldr	r2, [r7, #4]
 8016346:	6979      	ldr	r1, [r7, #20]
 8016348:	68f8      	ldr	r0, [r7, #12]
 801634a:	f000 f805 	bl	8016358 <ip4_output_if_src>
 801634e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016350:	4618      	mov	r0, r3
 8016352:	3718      	adds	r7, #24
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}

08016358 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b088      	sub	sp, #32
 801635c:	af00      	add	r7, sp, #0
 801635e:	60f8      	str	r0, [r7, #12]
 8016360:	60b9      	str	r1, [r7, #8]
 8016362:	607a      	str	r2, [r7, #4]
 8016364:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	7b9b      	ldrb	r3, [r3, #14]
 801636a:	2b01      	cmp	r3, #1
 801636c:	d006      	beq.n	801637c <ip4_output_if_src+0x24>
 801636e:	4b4b      	ldr	r3, [pc, #300]	; (801649c <ip4_output_if_src+0x144>)
 8016370:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016374:	494a      	ldr	r1, [pc, #296]	; (80164a0 <ip4_output_if_src+0x148>)
 8016376:	484b      	ldr	r0, [pc, #300]	; (80164a4 <ip4_output_if_src+0x14c>)
 8016378:	f001 f852 	bl	8017420 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d060      	beq.n	8016444 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016382:	2314      	movs	r3, #20
 8016384:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016386:	2114      	movs	r1, #20
 8016388:	68f8      	ldr	r0, [r7, #12]
 801638a:	f7f7 fea5 	bl	800e0d8 <pbuf_add_header>
 801638e:	4603      	mov	r3, r0
 8016390:	2b00      	cmp	r3, #0
 8016392:	d002      	beq.n	801639a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016394:	f06f 0301 	mvn.w	r3, #1
 8016398:	e07c      	b.n	8016494 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	895b      	ldrh	r3, [r3, #10]
 80163a4:	2b13      	cmp	r3, #19
 80163a6:	d806      	bhi.n	80163b6 <ip4_output_if_src+0x5e>
 80163a8:	4b3c      	ldr	r3, [pc, #240]	; (801649c <ip4_output_if_src+0x144>)
 80163aa:	f44f 7262 	mov.w	r2, #904	; 0x388
 80163ae:	493e      	ldr	r1, [pc, #248]	; (80164a8 <ip4_output_if_src+0x150>)
 80163b0:	483c      	ldr	r0, [pc, #240]	; (80164a4 <ip4_output_if_src+0x14c>)
 80163b2:	f001 f835 	bl	8017420 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80163b6:	69fb      	ldr	r3, [r7, #28]
 80163b8:	78fa      	ldrb	r2, [r7, #3]
 80163ba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80163bc:	69fb      	ldr	r3, [r7, #28]
 80163be:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80163c2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681a      	ldr	r2, [r3, #0]
 80163c8:	69fb      	ldr	r3, [r7, #28]
 80163ca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80163cc:	8b7b      	ldrh	r3, [r7, #26]
 80163ce:	089b      	lsrs	r3, r3, #2
 80163d0:	b29b      	uxth	r3, r3
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163d8:	b2da      	uxtb	r2, r3
 80163da:	69fb      	ldr	r3, [r7, #28]
 80163dc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80163de:	69fb      	ldr	r3, [r7, #28]
 80163e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80163e4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	891b      	ldrh	r3, [r3, #8]
 80163ea:	4618      	mov	r0, r3
 80163ec:	f7f6 fb78 	bl	800cae0 <lwip_htons>
 80163f0:	4603      	mov	r3, r0
 80163f2:	461a      	mov	r2, r3
 80163f4:	69fb      	ldr	r3, [r7, #28]
 80163f6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80163f8:	69fb      	ldr	r3, [r7, #28]
 80163fa:	2200      	movs	r2, #0
 80163fc:	719a      	strb	r2, [r3, #6]
 80163fe:	2200      	movs	r2, #0
 8016400:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016402:	4b2a      	ldr	r3, [pc, #168]	; (80164ac <ip4_output_if_src+0x154>)
 8016404:	881b      	ldrh	r3, [r3, #0]
 8016406:	4618      	mov	r0, r3
 8016408:	f7f6 fb6a 	bl	800cae0 <lwip_htons>
 801640c:	4603      	mov	r3, r0
 801640e:	461a      	mov	r2, r3
 8016410:	69fb      	ldr	r3, [r7, #28]
 8016412:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016414:	4b25      	ldr	r3, [pc, #148]	; (80164ac <ip4_output_if_src+0x154>)
 8016416:	881b      	ldrh	r3, [r3, #0]
 8016418:	3301      	adds	r3, #1
 801641a:	b29a      	uxth	r2, r3
 801641c:	4b23      	ldr	r3, [pc, #140]	; (80164ac <ip4_output_if_src+0x154>)
 801641e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d104      	bne.n	8016430 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016426:	4b22      	ldr	r3, [pc, #136]	; (80164b0 <ip4_output_if_src+0x158>)
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	69fb      	ldr	r3, [r7, #28]
 801642c:	60da      	str	r2, [r3, #12]
 801642e:	e003      	b.n	8016438 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	681a      	ldr	r2, [r3, #0]
 8016434:	69fb      	ldr	r3, [r7, #28]
 8016436:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016438:	69fb      	ldr	r3, [r7, #28]
 801643a:	2200      	movs	r2, #0
 801643c:	729a      	strb	r2, [r3, #10]
 801643e:	2200      	movs	r2, #0
 8016440:	72da      	strb	r2, [r3, #11]
 8016442:	e00f      	b.n	8016464 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	895b      	ldrh	r3, [r3, #10]
 8016448:	2b13      	cmp	r3, #19
 801644a:	d802      	bhi.n	8016452 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801644c:	f06f 0301 	mvn.w	r3, #1
 8016450:	e020      	b.n	8016494 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016458:	69fb      	ldr	r3, [r7, #28]
 801645a:	691b      	ldr	r3, [r3, #16]
 801645c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801645e:	f107 0314 	add.w	r3, r7, #20
 8016462:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016466:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016468:	2b00      	cmp	r3, #0
 801646a:	d00c      	beq.n	8016486 <ip4_output_if_src+0x12e>
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	891a      	ldrh	r2, [r3, #8]
 8016470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016472:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016474:	429a      	cmp	r2, r3
 8016476:	d906      	bls.n	8016486 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016478:	687a      	ldr	r2, [r7, #4]
 801647a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801647c:	68f8      	ldr	r0, [r7, #12]
 801647e:	f000 fd4d 	bl	8016f1c <ip4_frag>
 8016482:	4603      	mov	r3, r0
 8016484:	e006      	b.n	8016494 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016488:	695b      	ldr	r3, [r3, #20]
 801648a:	687a      	ldr	r2, [r7, #4]
 801648c:	68f9      	ldr	r1, [r7, #12]
 801648e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016490:	4798      	blx	r3
 8016492:	4603      	mov	r3, r0
}
 8016494:	4618      	mov	r0, r3
 8016496:	3720      	adds	r7, #32
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}
 801649c:	0801c33c 	.word	0x0801c33c
 80164a0:	0801c370 	.word	0x0801c370
 80164a4:	0801c37c 	.word	0x0801c37c
 80164a8:	0801c3a4 	.word	0x0801c3a4
 80164ac:	20001b3e 	.word	0x20001b3e
 80164b0:	0801ee9c 	.word	0x0801ee9c

080164b4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80164b4:	b480      	push	{r7}
 80164b6:	b085      	sub	sp, #20
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
 80164bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164c8:	d002      	beq.n	80164d0 <ip4_addr_isbroadcast_u32+0x1c>
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d101      	bne.n	80164d4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80164d0:	2301      	movs	r3, #1
 80164d2:	e02a      	b.n	801652a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80164d4:	683b      	ldr	r3, [r7, #0]
 80164d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164da:	f003 0302 	and.w	r3, r3, #2
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d101      	bne.n	80164e6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80164e2:	2300      	movs	r3, #0
 80164e4:	e021      	b.n	801652a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80164e6:	683b      	ldr	r3, [r7, #0]
 80164e8:	3304      	adds	r3, #4
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	687a      	ldr	r2, [r7, #4]
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d101      	bne.n	80164f6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80164f2:	2300      	movs	r3, #0
 80164f4:	e019      	b.n	801652a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80164f6:	68fa      	ldr	r2, [r7, #12]
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	3304      	adds	r3, #4
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	405a      	eors	r2, r3
 8016500:	683b      	ldr	r3, [r7, #0]
 8016502:	3308      	adds	r3, #8
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	4013      	ands	r3, r2
 8016508:	2b00      	cmp	r3, #0
 801650a:	d10d      	bne.n	8016528 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	3308      	adds	r3, #8
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	43da      	mvns	r2, r3
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	3308      	adds	r3, #8
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016520:	429a      	cmp	r2, r3
 8016522:	d101      	bne.n	8016528 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016524:	2301      	movs	r3, #1
 8016526:	e000      	b.n	801652a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016528:	2300      	movs	r3, #0
  }
}
 801652a:	4618      	mov	r0, r3
 801652c:	3714      	adds	r7, #20
 801652e:	46bd      	mov	sp, r7
 8016530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016534:	4770      	bx	lr
	...

08016538 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b084      	sub	sp, #16
 801653c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801653e:	2300      	movs	r3, #0
 8016540:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016542:	4b12      	ldr	r3, [pc, #72]	; (801658c <ip_reass_tmr+0x54>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016548:	e018      	b.n	801657c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	7fdb      	ldrb	r3, [r3, #31]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00b      	beq.n	801656a <ip_reass_tmr+0x32>
      r->timer--;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	7fdb      	ldrb	r3, [r3, #31]
 8016556:	3b01      	subs	r3, #1
 8016558:	b2da      	uxtb	r2, r3
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	60fb      	str	r3, [r7, #12]
 8016568:	e008      	b.n	801657c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016574:	68b9      	ldr	r1, [r7, #8]
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f000 f80a 	bl	8016590 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d1e3      	bne.n	801654a <ip_reass_tmr+0x12>
    }
  }
}
 8016582:	bf00      	nop
 8016584:	bf00      	nop
 8016586:	3710      	adds	r7, #16
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	20001b40 	.word	0x20001b40

08016590 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b088      	sub	sp, #32
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801659a:	2300      	movs	r3, #0
 801659c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801659e:	683a      	ldr	r2, [r7, #0]
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	429a      	cmp	r2, r3
 80165a4:	d105      	bne.n	80165b2 <ip_reass_free_complete_datagram+0x22>
 80165a6:	4b45      	ldr	r3, [pc, #276]	; (80166bc <ip_reass_free_complete_datagram+0x12c>)
 80165a8:	22ab      	movs	r2, #171	; 0xab
 80165aa:	4945      	ldr	r1, [pc, #276]	; (80166c0 <ip_reass_free_complete_datagram+0x130>)
 80165ac:	4845      	ldr	r0, [pc, #276]	; (80166c4 <ip_reass_free_complete_datagram+0x134>)
 80165ae:	f000 ff37 	bl	8017420 <iprintf>
  if (prev != NULL) {
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d00a      	beq.n	80165ce <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80165b8:	683b      	ldr	r3, [r7, #0]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	687a      	ldr	r2, [r7, #4]
 80165be:	429a      	cmp	r2, r3
 80165c0:	d005      	beq.n	80165ce <ip_reass_free_complete_datagram+0x3e>
 80165c2:	4b3e      	ldr	r3, [pc, #248]	; (80166bc <ip_reass_free_complete_datagram+0x12c>)
 80165c4:	22ad      	movs	r2, #173	; 0xad
 80165c6:	4940      	ldr	r1, [pc, #256]	; (80166c8 <ip_reass_free_complete_datagram+0x138>)
 80165c8:	483e      	ldr	r0, [pc, #248]	; (80166c4 <ip_reass_free_complete_datagram+0x134>)
 80165ca:	f000 ff29 	bl	8017420 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	685b      	ldr	r3, [r3, #4]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80165d6:	697b      	ldr	r3, [r7, #20]
 80165d8:	889b      	ldrh	r3, [r3, #4]
 80165da:	b29b      	uxth	r3, r3
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d12a      	bne.n	8016636 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	685b      	ldr	r3, [r3, #4]
 80165e4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80165e6:	697b      	ldr	r3, [r7, #20]
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80165ee:	69bb      	ldr	r3, [r7, #24]
 80165f0:	6858      	ldr	r0, [r3, #4]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	3308      	adds	r3, #8
 80165f6:	2214      	movs	r2, #20
 80165f8:	4619      	mov	r1, r3
 80165fa:	f000 fee1 	bl	80173c0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80165fe:	2101      	movs	r1, #1
 8016600:	69b8      	ldr	r0, [r7, #24]
 8016602:	f7ff fc47 	bl	8015e94 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016606:	69b8      	ldr	r0, [r7, #24]
 8016608:	f7f7 fe84 	bl	800e314 <pbuf_clen>
 801660c:	4603      	mov	r3, r0
 801660e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016610:	8bfa      	ldrh	r2, [r7, #30]
 8016612:	8a7b      	ldrh	r3, [r7, #18]
 8016614:	4413      	add	r3, r2
 8016616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801661a:	db05      	blt.n	8016628 <ip_reass_free_complete_datagram+0x98>
 801661c:	4b27      	ldr	r3, [pc, #156]	; (80166bc <ip_reass_free_complete_datagram+0x12c>)
 801661e:	22bc      	movs	r2, #188	; 0xbc
 8016620:	492a      	ldr	r1, [pc, #168]	; (80166cc <ip_reass_free_complete_datagram+0x13c>)
 8016622:	4828      	ldr	r0, [pc, #160]	; (80166c4 <ip_reass_free_complete_datagram+0x134>)
 8016624:	f000 fefc 	bl	8017420 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016628:	8bfa      	ldrh	r2, [r7, #30]
 801662a:	8a7b      	ldrh	r3, [r7, #18]
 801662c:	4413      	add	r3, r2
 801662e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016630:	69b8      	ldr	r0, [r7, #24]
 8016632:	f7f7 fde7 	bl	800e204 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	685b      	ldr	r3, [r3, #4]
 801663a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801663c:	e01f      	b.n	801667e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801663e:	69bb      	ldr	r3, [r7, #24]
 8016640:	685b      	ldr	r3, [r3, #4]
 8016642:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016644:	69bb      	ldr	r3, [r7, #24]
 8016646:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016648:	697b      	ldr	r3, [r7, #20]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801664e:	68f8      	ldr	r0, [r7, #12]
 8016650:	f7f7 fe60 	bl	800e314 <pbuf_clen>
 8016654:	4603      	mov	r3, r0
 8016656:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016658:	8bfa      	ldrh	r2, [r7, #30]
 801665a:	8a7b      	ldrh	r3, [r7, #18]
 801665c:	4413      	add	r3, r2
 801665e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016662:	db05      	blt.n	8016670 <ip_reass_free_complete_datagram+0xe0>
 8016664:	4b15      	ldr	r3, [pc, #84]	; (80166bc <ip_reass_free_complete_datagram+0x12c>)
 8016666:	22cc      	movs	r2, #204	; 0xcc
 8016668:	4918      	ldr	r1, [pc, #96]	; (80166cc <ip_reass_free_complete_datagram+0x13c>)
 801666a:	4816      	ldr	r0, [pc, #88]	; (80166c4 <ip_reass_free_complete_datagram+0x134>)
 801666c:	f000 fed8 	bl	8017420 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016670:	8bfa      	ldrh	r2, [r7, #30]
 8016672:	8a7b      	ldrh	r3, [r7, #18]
 8016674:	4413      	add	r3, r2
 8016676:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016678:	68f8      	ldr	r0, [r7, #12]
 801667a:	f7f7 fdc3 	bl	800e204 <pbuf_free>
  while (p != NULL) {
 801667e:	69bb      	ldr	r3, [r7, #24]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d1dc      	bne.n	801663e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016684:	6839      	ldr	r1, [r7, #0]
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f000 f8c2 	bl	8016810 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801668c:	4b10      	ldr	r3, [pc, #64]	; (80166d0 <ip_reass_free_complete_datagram+0x140>)
 801668e:	881b      	ldrh	r3, [r3, #0]
 8016690:	8bfa      	ldrh	r2, [r7, #30]
 8016692:	429a      	cmp	r2, r3
 8016694:	d905      	bls.n	80166a2 <ip_reass_free_complete_datagram+0x112>
 8016696:	4b09      	ldr	r3, [pc, #36]	; (80166bc <ip_reass_free_complete_datagram+0x12c>)
 8016698:	22d2      	movs	r2, #210	; 0xd2
 801669a:	490e      	ldr	r1, [pc, #56]	; (80166d4 <ip_reass_free_complete_datagram+0x144>)
 801669c:	4809      	ldr	r0, [pc, #36]	; (80166c4 <ip_reass_free_complete_datagram+0x134>)
 801669e:	f000 febf 	bl	8017420 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80166a2:	4b0b      	ldr	r3, [pc, #44]	; (80166d0 <ip_reass_free_complete_datagram+0x140>)
 80166a4:	881a      	ldrh	r2, [r3, #0]
 80166a6:	8bfb      	ldrh	r3, [r7, #30]
 80166a8:	1ad3      	subs	r3, r2, r3
 80166aa:	b29a      	uxth	r2, r3
 80166ac:	4b08      	ldr	r3, [pc, #32]	; (80166d0 <ip_reass_free_complete_datagram+0x140>)
 80166ae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80166b0:	8bfb      	ldrh	r3, [r7, #30]
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3720      	adds	r7, #32
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	0801c3d4 	.word	0x0801c3d4
 80166c0:	0801c410 	.word	0x0801c410
 80166c4:	0801c41c 	.word	0x0801c41c
 80166c8:	0801c444 	.word	0x0801c444
 80166cc:	0801c458 	.word	0x0801c458
 80166d0:	20001b44 	.word	0x20001b44
 80166d4:	0801c478 	.word	0x0801c478

080166d8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b08a      	sub	sp, #40	; 0x28
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
 80166e0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80166e2:	2300      	movs	r3, #0
 80166e4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80166e6:	2300      	movs	r3, #0
 80166e8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80166ea:	2300      	movs	r3, #0
 80166ec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80166ee:	2300      	movs	r3, #0
 80166f0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80166f2:	2300      	movs	r3, #0
 80166f4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80166f6:	4b28      	ldr	r3, [pc, #160]	; (8016798 <ip_reass_remove_oldest_datagram+0xc0>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80166fc:	e030      	b.n	8016760 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80166fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016700:	695a      	ldr	r2, [r3, #20]
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	68db      	ldr	r3, [r3, #12]
 8016706:	429a      	cmp	r2, r3
 8016708:	d10c      	bne.n	8016724 <ip_reass_remove_oldest_datagram+0x4c>
 801670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670c:	699a      	ldr	r2, [r3, #24]
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	691b      	ldr	r3, [r3, #16]
 8016712:	429a      	cmp	r2, r3
 8016714:	d106      	bne.n	8016724 <ip_reass_remove_oldest_datagram+0x4c>
 8016716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016718:	899a      	ldrh	r2, [r3, #12]
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	889b      	ldrh	r3, [r3, #4]
 801671e:	b29b      	uxth	r3, r3
 8016720:	429a      	cmp	r2, r3
 8016722:	d014      	beq.n	801674e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016724:	693b      	ldr	r3, [r7, #16]
 8016726:	3301      	adds	r3, #1
 8016728:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801672a:	6a3b      	ldr	r3, [r7, #32]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d104      	bne.n	801673a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016732:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	61bb      	str	r3, [r7, #24]
 8016738:	e009      	b.n	801674e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801673c:	7fda      	ldrb	r2, [r3, #31]
 801673e:	6a3b      	ldr	r3, [r7, #32]
 8016740:	7fdb      	ldrb	r3, [r3, #31]
 8016742:	429a      	cmp	r2, r3
 8016744:	d803      	bhi.n	801674e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016748:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801674a:	69fb      	ldr	r3, [r7, #28]
 801674c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d001      	beq.n	801675a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016758:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016762:	2b00      	cmp	r3, #0
 8016764:	d1cb      	bne.n	80166fe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016766:	6a3b      	ldr	r3, [r7, #32]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d008      	beq.n	801677e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801676c:	69b9      	ldr	r1, [r7, #24]
 801676e:	6a38      	ldr	r0, [r7, #32]
 8016770:	f7ff ff0e 	bl	8016590 <ip_reass_free_complete_datagram>
 8016774:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016776:	697a      	ldr	r2, [r7, #20]
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	4413      	add	r3, r2
 801677c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801677e:	697a      	ldr	r2, [r7, #20]
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	429a      	cmp	r2, r3
 8016784:	da02      	bge.n	801678c <ip_reass_remove_oldest_datagram+0xb4>
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	2b01      	cmp	r3, #1
 801678a:	dcac      	bgt.n	80166e6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801678c:	697b      	ldr	r3, [r7, #20]
}
 801678e:	4618      	mov	r0, r3
 8016790:	3728      	adds	r7, #40	; 0x28
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}
 8016796:	bf00      	nop
 8016798:	20001b40 	.word	0x20001b40

0801679c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b084      	sub	sp, #16
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
 80167a4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80167a6:	2004      	movs	r0, #4
 80167a8:	f7f6 fece 	bl	800d548 <memp_malloc>
 80167ac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d110      	bne.n	80167d6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80167b4:	6839      	ldr	r1, [r7, #0]
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f7ff ff8e 	bl	80166d8 <ip_reass_remove_oldest_datagram>
 80167bc:	4602      	mov	r2, r0
 80167be:	683b      	ldr	r3, [r7, #0]
 80167c0:	4293      	cmp	r3, r2
 80167c2:	dc03      	bgt.n	80167cc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80167c4:	2004      	movs	r0, #4
 80167c6:	f7f6 febf 	bl	800d548 <memp_malloc>
 80167ca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d101      	bne.n	80167d6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80167d2:	2300      	movs	r3, #0
 80167d4:	e016      	b.n	8016804 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80167d6:	2220      	movs	r2, #32
 80167d8:	2100      	movs	r1, #0
 80167da:	68f8      	ldr	r0, [r7, #12]
 80167dc:	f000 fe18 	bl	8017410 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	220f      	movs	r2, #15
 80167e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80167e6:	4b09      	ldr	r3, [pc, #36]	; (801680c <ip_reass_enqueue_new_datagram+0x70>)
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80167ee:	4a07      	ldr	r2, [pc, #28]	; (801680c <ip_reass_enqueue_new_datagram+0x70>)
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	3308      	adds	r3, #8
 80167f8:	2214      	movs	r2, #20
 80167fa:	6879      	ldr	r1, [r7, #4]
 80167fc:	4618      	mov	r0, r3
 80167fe:	f000 fddf 	bl	80173c0 <memcpy>
  return ipr;
 8016802:	68fb      	ldr	r3, [r7, #12]
}
 8016804:	4618      	mov	r0, r3
 8016806:	3710      	adds	r7, #16
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}
 801680c:	20001b40 	.word	0x20001b40

08016810 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801681a:	4b10      	ldr	r3, [pc, #64]	; (801685c <ip_reass_dequeue_datagram+0x4c>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	687a      	ldr	r2, [r7, #4]
 8016820:	429a      	cmp	r2, r3
 8016822:	d104      	bne.n	801682e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	4a0c      	ldr	r2, [pc, #48]	; (801685c <ip_reass_dequeue_datagram+0x4c>)
 801682a:	6013      	str	r3, [r2, #0]
 801682c:	e00d      	b.n	801684a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d106      	bne.n	8016842 <ip_reass_dequeue_datagram+0x32>
 8016834:	4b0a      	ldr	r3, [pc, #40]	; (8016860 <ip_reass_dequeue_datagram+0x50>)
 8016836:	f240 1245 	movw	r2, #325	; 0x145
 801683a:	490a      	ldr	r1, [pc, #40]	; (8016864 <ip_reass_dequeue_datagram+0x54>)
 801683c:	480a      	ldr	r0, [pc, #40]	; (8016868 <ip_reass_dequeue_datagram+0x58>)
 801683e:	f000 fdef 	bl	8017420 <iprintf>
    prev->next = ipr->next;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681a      	ldr	r2, [r3, #0]
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801684a:	6879      	ldr	r1, [r7, #4]
 801684c:	2004      	movs	r0, #4
 801684e:	f7f6 fec7 	bl	800d5e0 <memp_free>
}
 8016852:	bf00      	nop
 8016854:	3708      	adds	r7, #8
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	20001b40 	.word	0x20001b40
 8016860:	0801c3d4 	.word	0x0801c3d4
 8016864:	0801c49c 	.word	0x0801c49c
 8016868:	0801c41c 	.word	0x0801c41c

0801686c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b08c      	sub	sp, #48	; 0x30
 8016870:	af00      	add	r7, sp, #0
 8016872:	60f8      	str	r0, [r7, #12]
 8016874:	60b9      	str	r1, [r7, #8]
 8016876:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016878:	2300      	movs	r3, #0
 801687a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801687c:	2301      	movs	r3, #1
 801687e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	685b      	ldr	r3, [r3, #4]
 8016884:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016886:	69fb      	ldr	r3, [r7, #28]
 8016888:	885b      	ldrh	r3, [r3, #2]
 801688a:	b29b      	uxth	r3, r3
 801688c:	4618      	mov	r0, r3
 801688e:	f7f6 f927 	bl	800cae0 <lwip_htons>
 8016892:	4603      	mov	r3, r0
 8016894:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016896:	69fb      	ldr	r3, [r7, #28]
 8016898:	781b      	ldrb	r3, [r3, #0]
 801689a:	f003 030f 	and.w	r3, r3, #15
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	009b      	lsls	r3, r3, #2
 80168a2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80168a4:	7e7b      	ldrb	r3, [r7, #25]
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	8b7a      	ldrh	r2, [r7, #26]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d202      	bcs.n	80168b4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80168ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80168b2:	e135      	b.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80168b4:	7e7b      	ldrb	r3, [r7, #25]
 80168b6:	b29b      	uxth	r3, r3
 80168b8:	8b7a      	ldrh	r2, [r7, #26]
 80168ba:	1ad3      	subs	r3, r2, r3
 80168bc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80168be:	69fb      	ldr	r3, [r7, #28]
 80168c0:	88db      	ldrh	r3, [r3, #6]
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7f6 f90b 	bl	800cae0 <lwip_htons>
 80168ca:	4603      	mov	r3, r0
 80168cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	00db      	lsls	r3, r3, #3
 80168d4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80168d6:	68bb      	ldr	r3, [r7, #8]
 80168d8:	685b      	ldr	r3, [r3, #4]
 80168da:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80168dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168de:	2200      	movs	r2, #0
 80168e0:	701a      	strb	r2, [r3, #0]
 80168e2:	2200      	movs	r2, #0
 80168e4:	705a      	strb	r2, [r3, #1]
 80168e6:	2200      	movs	r2, #0
 80168e8:	709a      	strb	r2, [r3, #2]
 80168ea:	2200      	movs	r2, #0
 80168ec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80168ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f0:	8afa      	ldrh	r2, [r7, #22]
 80168f2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80168f4:	8afa      	ldrh	r2, [r7, #22]
 80168f6:	8b7b      	ldrh	r3, [r7, #26]
 80168f8:	4413      	add	r3, r2
 80168fa:	b29a      	uxth	r2, r3
 80168fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016902:	88db      	ldrh	r3, [r3, #6]
 8016904:	b29b      	uxth	r3, r3
 8016906:	8afa      	ldrh	r2, [r7, #22]
 8016908:	429a      	cmp	r2, r3
 801690a:	d902      	bls.n	8016912 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801690c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016910:	e106      	b.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	685b      	ldr	r3, [r3, #4]
 8016916:	627b      	str	r3, [r7, #36]	; 0x24
 8016918:	e068      	b.n	80169ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016922:	889b      	ldrh	r3, [r3, #4]
 8016924:	b29a      	uxth	r2, r3
 8016926:	693b      	ldr	r3, [r7, #16]
 8016928:	889b      	ldrh	r3, [r3, #4]
 801692a:	b29b      	uxth	r3, r3
 801692c:	429a      	cmp	r2, r3
 801692e:	d235      	bcs.n	801699c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016934:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016938:	2b00      	cmp	r3, #0
 801693a:	d020      	beq.n	801697e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801693e:	889b      	ldrh	r3, [r3, #4]
 8016940:	b29a      	uxth	r2, r3
 8016942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016944:	88db      	ldrh	r3, [r3, #6]
 8016946:	b29b      	uxth	r3, r3
 8016948:	429a      	cmp	r2, r3
 801694a:	d307      	bcc.n	801695c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801694e:	88db      	ldrh	r3, [r3, #6]
 8016950:	b29a      	uxth	r2, r3
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	889b      	ldrh	r3, [r3, #4]
 8016956:	b29b      	uxth	r3, r3
 8016958:	429a      	cmp	r2, r3
 801695a:	d902      	bls.n	8016962 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801695c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016960:	e0de      	b.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016964:	68ba      	ldr	r2, [r7, #8]
 8016966:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801696a:	88db      	ldrh	r3, [r3, #6]
 801696c:	b29a      	uxth	r2, r3
 801696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016970:	889b      	ldrh	r3, [r3, #4]
 8016972:	b29b      	uxth	r3, r3
 8016974:	429a      	cmp	r2, r3
 8016976:	d03d      	beq.n	80169f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016978:	2300      	movs	r3, #0
 801697a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801697c:	e03a      	b.n	80169f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016980:	88db      	ldrh	r3, [r3, #6]
 8016982:	b29a      	uxth	r2, r3
 8016984:	693b      	ldr	r3, [r7, #16]
 8016986:	889b      	ldrh	r3, [r3, #4]
 8016988:	b29b      	uxth	r3, r3
 801698a:	429a      	cmp	r2, r3
 801698c:	d902      	bls.n	8016994 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801698e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016992:	e0c5      	b.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	68ba      	ldr	r2, [r7, #8]
 8016998:	605a      	str	r2, [r3, #4]
      break;
 801699a:	e02b      	b.n	80169f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801699e:	889b      	ldrh	r3, [r3, #4]
 80169a0:	b29a      	uxth	r2, r3
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	889b      	ldrh	r3, [r3, #4]
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d102      	bne.n	80169b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80169ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169b0:	e0b6      	b.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80169b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b4:	889b      	ldrh	r3, [r3, #4]
 80169b6:	b29a      	uxth	r2, r3
 80169b8:	693b      	ldr	r3, [r7, #16]
 80169ba:	88db      	ldrh	r3, [r3, #6]
 80169bc:	b29b      	uxth	r3, r3
 80169be:	429a      	cmp	r2, r3
 80169c0:	d202      	bcs.n	80169c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80169c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169c6:	e0ab      	b.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80169c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d009      	beq.n	80169e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80169ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169d0:	88db      	ldrh	r3, [r3, #6]
 80169d2:	b29a      	uxth	r2, r3
 80169d4:	693b      	ldr	r3, [r7, #16]
 80169d6:	889b      	ldrh	r3, [r3, #4]
 80169d8:	b29b      	uxth	r3, r3
 80169da:	429a      	cmp	r2, r3
 80169dc:	d001      	beq.n	80169e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80169de:	2300      	movs	r3, #0
 80169e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80169e2:	693b      	ldr	r3, [r7, #16]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80169e8:	693b      	ldr	r3, [r7, #16]
 80169ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d193      	bne.n	801691a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80169f2:	e000      	b.n	80169f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80169f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80169f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d12d      	bne.n	8016a58 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80169fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d01c      	beq.n	8016a3c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a04:	88db      	ldrh	r3, [r3, #6]
 8016a06:	b29a      	uxth	r2, r3
 8016a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a0a:	889b      	ldrh	r3, [r3, #4]
 8016a0c:	b29b      	uxth	r3, r3
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d906      	bls.n	8016a20 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016a12:	4b45      	ldr	r3, [pc, #276]	; (8016b28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a14:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016a18:	4944      	ldr	r1, [pc, #272]	; (8016b2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016a1a:	4845      	ldr	r0, [pc, #276]	; (8016b30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a1c:	f000 fd00 	bl	8017420 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a22:	68ba      	ldr	r2, [r7, #8]
 8016a24:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a28:	88db      	ldrh	r3, [r3, #6]
 8016a2a:	b29a      	uxth	r2, r3
 8016a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a2e:	889b      	ldrh	r3, [r3, #4]
 8016a30:	b29b      	uxth	r3, r3
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d010      	beq.n	8016a58 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016a36:	2300      	movs	r3, #0
 8016a38:	623b      	str	r3, [r7, #32]
 8016a3a:	e00d      	b.n	8016a58 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	685b      	ldr	r3, [r3, #4]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d006      	beq.n	8016a52 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016a44:	4b38      	ldr	r3, [pc, #224]	; (8016b28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a46:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016a4a:	493a      	ldr	r1, [pc, #232]	; (8016b34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016a4c:	4838      	ldr	r0, [pc, #224]	; (8016b30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a4e:	f000 fce7 	bl	8017420 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	68ba      	ldr	r2, [r7, #8]
 8016a56:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d105      	bne.n	8016a6a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	7f9b      	ldrb	r3, [r3, #30]
 8016a62:	f003 0301 	and.w	r3, r3, #1
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d059      	beq.n	8016b1e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016a6a:	6a3b      	ldr	r3, [r7, #32]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d04f      	beq.n	8016b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	685b      	ldr	r3, [r3, #4]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d006      	beq.n	8016a86 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	685b      	ldr	r3, [r3, #4]
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	889b      	ldrh	r3, [r3, #4]
 8016a80:	b29b      	uxth	r3, r3
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d002      	beq.n	8016a8c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016a86:	2300      	movs	r3, #0
 8016a88:	623b      	str	r3, [r7, #32]
 8016a8a:	e041      	b.n	8016b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a8e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016a96:	e012      	b.n	8016abe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a9a:	685b      	ldr	r3, [r3, #4]
 8016a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aa0:	88db      	ldrh	r3, [r3, #6]
 8016aa2:	b29a      	uxth	r2, r3
 8016aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa6:	889b      	ldrh	r3, [r3, #4]
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d002      	beq.n	8016ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	623b      	str	r3, [r7, #32]
            break;
 8016ab2:	e007      	b.n	8016ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ab6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d1e9      	bne.n	8016a98 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016ac4:	6a3b      	ldr	r3, [r7, #32]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d022      	beq.n	8016b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d106      	bne.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016ad2:	4b15      	ldr	r3, [pc, #84]	; (8016b28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ad4:	f240 12df 	movw	r2, #479	; 0x1df
 8016ad8:	4917      	ldr	r1, [pc, #92]	; (8016b38 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016ada:	4815      	ldr	r0, [pc, #84]	; (8016b30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016adc:	f000 fca0 	bl	8017420 <iprintf>
          LWIP_ASSERT("sanity check",
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	685b      	ldr	r3, [r3, #4]
 8016ae4:	685b      	ldr	r3, [r3, #4]
 8016ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ae8:	429a      	cmp	r2, r3
 8016aea:	d106      	bne.n	8016afa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016aec:	4b0e      	ldr	r3, [pc, #56]	; (8016b28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016aee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016af2:	4911      	ldr	r1, [pc, #68]	; (8016b38 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016af4:	480e      	ldr	r0, [pc, #56]	; (8016b30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016af6:	f000 fc93 	bl	8017420 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d006      	beq.n	8016b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016b02:	4b09      	ldr	r3, [pc, #36]	; (8016b28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b04:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016b08:	490c      	ldr	r1, [pc, #48]	; (8016b3c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016b0a:	4809      	ldr	r0, [pc, #36]	; (8016b30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b0c:	f000 fc88 	bl	8017420 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016b10:	6a3b      	ldr	r3, [r7, #32]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	bf14      	ite	ne
 8016b16:	2301      	movne	r3, #1
 8016b18:	2300      	moveq	r3, #0
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	e000      	b.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016b1e:	2300      	movs	r3, #0
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	3730      	adds	r7, #48	; 0x30
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}
 8016b28:	0801c3d4 	.word	0x0801c3d4
 8016b2c:	0801c4b8 	.word	0x0801c4b8
 8016b30:	0801c41c 	.word	0x0801c41c
 8016b34:	0801c4d8 	.word	0x0801c4d8
 8016b38:	0801c510 	.word	0x0801c510
 8016b3c:	0801c520 	.word	0x0801c520

08016b40 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b08e      	sub	sp, #56	; 0x38
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	685b      	ldr	r3, [r3, #4]
 8016b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	f003 030f 	and.w	r3, r3, #15
 8016b56:	b2db      	uxtb	r3, r3
 8016b58:	009b      	lsls	r3, r3, #2
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	2b14      	cmp	r3, #20
 8016b5e:	f040 8167 	bne.w	8016e30 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b64:	88db      	ldrh	r3, [r3, #6]
 8016b66:	b29b      	uxth	r3, r3
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7f5 ffb9 	bl	800cae0 <lwip_htons>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b74:	b29b      	uxth	r3, r3
 8016b76:	00db      	lsls	r3, r3, #3
 8016b78:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b7c:	885b      	ldrh	r3, [r3, #2]
 8016b7e:	b29b      	uxth	r3, r3
 8016b80:	4618      	mov	r0, r3
 8016b82:	f7f5 ffad 	bl	800cae0 <lwip_htons>
 8016b86:	4603      	mov	r3, r0
 8016b88:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b8c:	781b      	ldrb	r3, [r3, #0]
 8016b8e:	f003 030f 	and.w	r3, r3, #15
 8016b92:	b2db      	uxtb	r3, r3
 8016b94:	009b      	lsls	r3, r3, #2
 8016b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	f0c0 8146 	bcc.w	8016e34 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016bac:	b29b      	uxth	r3, r3
 8016bae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016bb0:	1ad3      	subs	r3, r2, r3
 8016bb2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f7f7 fbad 	bl	800e314 <pbuf_clen>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016bbe:	4b9f      	ldr	r3, [pc, #636]	; (8016e3c <ip4_reass+0x2fc>)
 8016bc0:	881b      	ldrh	r3, [r3, #0]
 8016bc2:	461a      	mov	r2, r3
 8016bc4:	8c3b      	ldrh	r3, [r7, #32]
 8016bc6:	4413      	add	r3, r2
 8016bc8:	2b0a      	cmp	r3, #10
 8016bca:	dd10      	ble.n	8016bee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016bcc:	8c3b      	ldrh	r3, [r7, #32]
 8016bce:	4619      	mov	r1, r3
 8016bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bd2:	f7ff fd81 	bl	80166d8 <ip_reass_remove_oldest_datagram>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	f000 812d 	beq.w	8016e38 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016bde:	4b97      	ldr	r3, [pc, #604]	; (8016e3c <ip4_reass+0x2fc>)
 8016be0:	881b      	ldrh	r3, [r3, #0]
 8016be2:	461a      	mov	r2, r3
 8016be4:	8c3b      	ldrh	r3, [r7, #32]
 8016be6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016be8:	2b0a      	cmp	r3, #10
 8016bea:	f300 8125 	bgt.w	8016e38 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016bee:	4b94      	ldr	r3, [pc, #592]	; (8016e40 <ip4_reass+0x300>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8016bf4:	e015      	b.n	8016c22 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bf8:	695a      	ldr	r2, [r3, #20]
 8016bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bfc:	68db      	ldr	r3, [r3, #12]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d10c      	bne.n	8016c1c <ip4_reass+0xdc>
 8016c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c04:	699a      	ldr	r2, [r3, #24]
 8016c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c08:	691b      	ldr	r3, [r3, #16]
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	d106      	bne.n	8016c1c <ip4_reass+0xdc>
 8016c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c10:	899a      	ldrh	r2, [r3, #12]
 8016c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c14:	889b      	ldrh	r3, [r3, #4]
 8016c16:	b29b      	uxth	r3, r3
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d006      	beq.n	8016c2a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	633b      	str	r3, [r7, #48]	; 0x30
 8016c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d1e6      	bne.n	8016bf6 <ip4_reass+0xb6>
 8016c28:	e000      	b.n	8016c2c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016c2a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d109      	bne.n	8016c46 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016c32:	8c3b      	ldrh	r3, [r7, #32]
 8016c34:	4619      	mov	r1, r3
 8016c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c38:	f7ff fdb0 	bl	801679c <ip_reass_enqueue_new_datagram>
 8016c3c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d11c      	bne.n	8016c7e <ip4_reass+0x13e>
      goto nullreturn;
 8016c44:	e109      	b.n	8016e5a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c48:	88db      	ldrh	r3, [r3, #6]
 8016c4a:	b29b      	uxth	r3, r3
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f7f5 ff47 	bl	800cae0 <lwip_htons>
 8016c52:	4603      	mov	r3, r0
 8016c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d110      	bne.n	8016c7e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c5e:	89db      	ldrh	r3, [r3, #14]
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7f5 ff3d 	bl	800cae0 <lwip_htons>
 8016c66:	4603      	mov	r3, r0
 8016c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d006      	beq.n	8016c7e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c72:	3308      	adds	r3, #8
 8016c74:	2214      	movs	r2, #20
 8016c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016c78:	4618      	mov	r0, r3
 8016c7a:	f000 fba1 	bl	80173c0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c80:	88db      	ldrh	r3, [r3, #6]
 8016c82:	b29b      	uxth	r3, r3
 8016c84:	f003 0320 	and.w	r3, r3, #32
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	bf0c      	ite	eq
 8016c8c:	2301      	moveq	r3, #1
 8016c8e:	2300      	movne	r3, #0
 8016c90:	b2db      	uxtb	r3, r3
 8016c92:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016c94:	69fb      	ldr	r3, [r7, #28]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d00e      	beq.n	8016cb8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016c9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c9e:	4413      	add	r3, r2
 8016ca0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016ca2:	8b7a      	ldrh	r2, [r7, #26]
 8016ca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	f0c0 80a0 	bcc.w	8016dec <ip4_reass+0x2ac>
 8016cac:	8b7b      	ldrh	r3, [r7, #26]
 8016cae:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016cb2:	4293      	cmp	r3, r2
 8016cb4:	f200 809a 	bhi.w	8016dec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016cb8:	69fa      	ldr	r2, [r7, #28]
 8016cba:	6879      	ldr	r1, [r7, #4]
 8016cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016cbe:	f7ff fdd5 	bl	801686c <ip_reass_chain_frag_into_datagram_and_validate>
 8016cc2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016cc4:	697b      	ldr	r3, [r7, #20]
 8016cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016cca:	f000 8091 	beq.w	8016df0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016cce:	4b5b      	ldr	r3, [pc, #364]	; (8016e3c <ip4_reass+0x2fc>)
 8016cd0:	881a      	ldrh	r2, [r3, #0]
 8016cd2:	8c3b      	ldrh	r3, [r7, #32]
 8016cd4:	4413      	add	r3, r2
 8016cd6:	b29a      	uxth	r2, r3
 8016cd8:	4b58      	ldr	r3, [pc, #352]	; (8016e3c <ip4_reass+0x2fc>)
 8016cda:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016cdc:	69fb      	ldr	r3, [r7, #28]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d00d      	beq.n	8016cfe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016ce2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016ce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ce6:	4413      	add	r3, r2
 8016ce8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cec:	8a7a      	ldrh	r2, [r7, #18]
 8016cee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf2:	7f9b      	ldrb	r3, [r3, #30]
 8016cf4:	f043 0301 	orr.w	r3, r3, #1
 8016cf8:	b2da      	uxtb	r2, r3
 8016cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	2b01      	cmp	r3, #1
 8016d02:	d171      	bne.n	8016de8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d06:	8b9b      	ldrh	r3, [r3, #28]
 8016d08:	3314      	adds	r3, #20
 8016d0a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d0e:	685b      	ldr	r3, [r3, #4]
 8016d10:	685b      	ldr	r3, [r3, #4]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d20:	3308      	adds	r3, #8
 8016d22:	2214      	movs	r2, #20
 8016d24:	4619      	mov	r1, r3
 8016d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d28:	f000 fb4a 	bl	80173c0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016d2c:	8a3b      	ldrh	r3, [r7, #16]
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7f5 fed6 	bl	800cae0 <lwip_htons>
 8016d34:	4603      	mov	r3, r0
 8016d36:	461a      	mov	r2, r3
 8016d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d3a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d3e:	2200      	movs	r2, #0
 8016d40:	719a      	strb	r2, [r3, #6]
 8016d42:	2200      	movs	r2, #0
 8016d44:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d48:	2200      	movs	r2, #0
 8016d4a:	729a      	strb	r2, [r3, #10]
 8016d4c:	2200      	movs	r2, #0
 8016d4e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d52:	685b      	ldr	r3, [r3, #4]
 8016d54:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016d56:	e00d      	b.n	8016d74 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d5a:	685b      	ldr	r3, [r3, #4]
 8016d5c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016d5e:	2114      	movs	r1, #20
 8016d60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016d62:	f7f7 f9c9 	bl	800e0f8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016d66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016d68:	6878      	ldr	r0, [r7, #4]
 8016d6a:	f7f7 fb0d 	bl	800e388 <pbuf_cat>
      r = iprh->next_pbuf;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d1ee      	bne.n	8016d58 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016d7a:	4b31      	ldr	r3, [pc, #196]	; (8016e40 <ip4_reass+0x300>)
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d80:	429a      	cmp	r2, r3
 8016d82:	d102      	bne.n	8016d8a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016d84:	2300      	movs	r3, #0
 8016d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d88:	e010      	b.n	8016dac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016d8a:	4b2d      	ldr	r3, [pc, #180]	; (8016e40 <ip4_reass+0x300>)
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d90:	e007      	b.n	8016da2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d98:	429a      	cmp	r2, r3
 8016d9a:	d006      	beq.n	8016daa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d1f4      	bne.n	8016d92 <ip4_reass+0x252>
 8016da8:	e000      	b.n	8016dac <ip4_reass+0x26c>
          break;
 8016daa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016dac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016db0:	f7ff fd2e 	bl	8016810 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f7f7 faad 	bl	800e314 <pbuf_clen>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016dbe:	4b1f      	ldr	r3, [pc, #124]	; (8016e3c <ip4_reass+0x2fc>)
 8016dc0:	881b      	ldrh	r3, [r3, #0]
 8016dc2:	8c3a      	ldrh	r2, [r7, #32]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	d906      	bls.n	8016dd6 <ip4_reass+0x296>
 8016dc8:	4b1e      	ldr	r3, [pc, #120]	; (8016e44 <ip4_reass+0x304>)
 8016dca:	f240 229b 	movw	r2, #667	; 0x29b
 8016dce:	491e      	ldr	r1, [pc, #120]	; (8016e48 <ip4_reass+0x308>)
 8016dd0:	481e      	ldr	r0, [pc, #120]	; (8016e4c <ip4_reass+0x30c>)
 8016dd2:	f000 fb25 	bl	8017420 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016dd6:	4b19      	ldr	r3, [pc, #100]	; (8016e3c <ip4_reass+0x2fc>)
 8016dd8:	881a      	ldrh	r2, [r3, #0]
 8016dda:	8c3b      	ldrh	r3, [r7, #32]
 8016ddc:	1ad3      	subs	r3, r2, r3
 8016dde:	b29a      	uxth	r2, r3
 8016de0:	4b16      	ldr	r3, [pc, #88]	; (8016e3c <ip4_reass+0x2fc>)
 8016de2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	e03c      	b.n	8016e62 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016de8:	2300      	movs	r3, #0
 8016dea:	e03a      	b.n	8016e62 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016dec:	bf00      	nop
 8016dee:	e000      	b.n	8016df2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016df0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d106      	bne.n	8016e06 <ip4_reass+0x2c6>
 8016df8:	4b12      	ldr	r3, [pc, #72]	; (8016e44 <ip4_reass+0x304>)
 8016dfa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016dfe:	4914      	ldr	r1, [pc, #80]	; (8016e50 <ip4_reass+0x310>)
 8016e00:	4812      	ldr	r0, [pc, #72]	; (8016e4c <ip4_reass+0x30c>)
 8016e02:	f000 fb0d 	bl	8017420 <iprintf>
  if (ipr->p == NULL) {
 8016e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e08:	685b      	ldr	r3, [r3, #4]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d124      	bne.n	8016e58 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016e0e:	4b0c      	ldr	r3, [pc, #48]	; (8016e40 <ip4_reass+0x300>)
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e14:	429a      	cmp	r2, r3
 8016e16:	d006      	beq.n	8016e26 <ip4_reass+0x2e6>
 8016e18:	4b0a      	ldr	r3, [pc, #40]	; (8016e44 <ip4_reass+0x304>)
 8016e1a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016e1e:	490d      	ldr	r1, [pc, #52]	; (8016e54 <ip4_reass+0x314>)
 8016e20:	480a      	ldr	r0, [pc, #40]	; (8016e4c <ip4_reass+0x30c>)
 8016e22:	f000 fafd 	bl	8017420 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016e26:	2100      	movs	r1, #0
 8016e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e2a:	f7ff fcf1 	bl	8016810 <ip_reass_dequeue_datagram>
 8016e2e:	e014      	b.n	8016e5a <ip4_reass+0x31a>
    goto nullreturn;
 8016e30:	bf00      	nop
 8016e32:	e012      	b.n	8016e5a <ip4_reass+0x31a>
    goto nullreturn;
 8016e34:	bf00      	nop
 8016e36:	e010      	b.n	8016e5a <ip4_reass+0x31a>
      goto nullreturn;
 8016e38:	bf00      	nop
 8016e3a:	e00e      	b.n	8016e5a <ip4_reass+0x31a>
 8016e3c:	20001b44 	.word	0x20001b44
 8016e40:	20001b40 	.word	0x20001b40
 8016e44:	0801c3d4 	.word	0x0801c3d4
 8016e48:	0801c544 	.word	0x0801c544
 8016e4c:	0801c41c 	.word	0x0801c41c
 8016e50:	0801c560 	.word	0x0801c560
 8016e54:	0801c56c 	.word	0x0801c56c
  }

nullreturn:
 8016e58:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016e5a:	6878      	ldr	r0, [r7, #4]
 8016e5c:	f7f7 f9d2 	bl	800e204 <pbuf_free>
  return NULL;
 8016e60:	2300      	movs	r3, #0
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	3738      	adds	r7, #56	; 0x38
 8016e66:	46bd      	mov	sp, r7
 8016e68:	bd80      	pop	{r7, pc}
 8016e6a:	bf00      	nop

08016e6c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016e70:	2005      	movs	r0, #5
 8016e72:	f7f6 fb69 	bl	800d548 <memp_malloc>
 8016e76:	4603      	mov	r3, r0
}
 8016e78:	4618      	mov	r0, r3
 8016e7a:	bd80      	pop	{r7, pc}

08016e7c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b082      	sub	sp, #8
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d106      	bne.n	8016e98 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016e8a:	4b07      	ldr	r3, [pc, #28]	; (8016ea8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016e8c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016e90:	4906      	ldr	r1, [pc, #24]	; (8016eac <ip_frag_free_pbuf_custom_ref+0x30>)
 8016e92:	4807      	ldr	r0, [pc, #28]	; (8016eb0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016e94:	f000 fac4 	bl	8017420 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016e98:	6879      	ldr	r1, [r7, #4]
 8016e9a:	2005      	movs	r0, #5
 8016e9c:	f7f6 fba0 	bl	800d5e0 <memp_free>
}
 8016ea0:	bf00      	nop
 8016ea2:	3708      	adds	r7, #8
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}
 8016ea8:	0801c3d4 	.word	0x0801c3d4
 8016eac:	0801c58c 	.word	0x0801c58c
 8016eb0:	0801c41c 	.word	0x0801c41c

08016eb4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b084      	sub	sp, #16
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d106      	bne.n	8016ed4 <ipfrag_free_pbuf_custom+0x20>
 8016ec6:	4b11      	ldr	r3, [pc, #68]	; (8016f0c <ipfrag_free_pbuf_custom+0x58>)
 8016ec8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016ecc:	4910      	ldr	r1, [pc, #64]	; (8016f10 <ipfrag_free_pbuf_custom+0x5c>)
 8016ece:	4811      	ldr	r0, [pc, #68]	; (8016f14 <ipfrag_free_pbuf_custom+0x60>)
 8016ed0:	f000 faa6 	bl	8017420 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016ed4:	68fa      	ldr	r2, [r7, #12]
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d006      	beq.n	8016eea <ipfrag_free_pbuf_custom+0x36>
 8016edc:	4b0b      	ldr	r3, [pc, #44]	; (8016f0c <ipfrag_free_pbuf_custom+0x58>)
 8016ede:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016ee2:	490d      	ldr	r1, [pc, #52]	; (8016f18 <ipfrag_free_pbuf_custom+0x64>)
 8016ee4:	480b      	ldr	r0, [pc, #44]	; (8016f14 <ipfrag_free_pbuf_custom+0x60>)
 8016ee6:	f000 fa9b 	bl	8017420 <iprintf>
  if (pcr->original != NULL) {
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	695b      	ldr	r3, [r3, #20]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d004      	beq.n	8016efc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	695b      	ldr	r3, [r3, #20]
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7f7 f984 	bl	800e204 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016efc:	68f8      	ldr	r0, [r7, #12]
 8016efe:	f7ff ffbd 	bl	8016e7c <ip_frag_free_pbuf_custom_ref>
}
 8016f02:	bf00      	nop
 8016f04:	3710      	adds	r7, #16
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}
 8016f0a:	bf00      	nop
 8016f0c:	0801c3d4 	.word	0x0801c3d4
 8016f10:	0801c598 	.word	0x0801c598
 8016f14:	0801c41c 	.word	0x0801c41c
 8016f18:	0801c5a4 	.word	0x0801c5a4

08016f1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b094      	sub	sp, #80	; 0x50
 8016f20:	af02      	add	r7, sp, #8
 8016f22:	60f8      	str	r0, [r7, #12]
 8016f24:	60b9      	str	r1, [r7, #8]
 8016f26:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016f28:	2300      	movs	r3, #0
 8016f2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016f2e:	68bb      	ldr	r3, [r7, #8]
 8016f30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016f32:	3b14      	subs	r3, #20
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	da00      	bge.n	8016f3a <ip4_frag+0x1e>
 8016f38:	3307      	adds	r3, #7
 8016f3a:	10db      	asrs	r3, r3, #3
 8016f3c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016f3e:	2314      	movs	r3, #20
 8016f40:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f4e:	781b      	ldrb	r3, [r3, #0]
 8016f50:	f003 030f 	and.w	r3, r3, #15
 8016f54:	b2db      	uxtb	r3, r3
 8016f56:	009b      	lsls	r3, r3, #2
 8016f58:	b2db      	uxtb	r3, r3
 8016f5a:	2b14      	cmp	r3, #20
 8016f5c:	d002      	beq.n	8016f64 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016f5e:	f06f 0305 	mvn.w	r3, #5
 8016f62:	e110      	b.n	8017186 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	895b      	ldrh	r3, [r3, #10]
 8016f68:	2b13      	cmp	r3, #19
 8016f6a:	d809      	bhi.n	8016f80 <ip4_frag+0x64>
 8016f6c:	4b88      	ldr	r3, [pc, #544]	; (8017190 <ip4_frag+0x274>)
 8016f6e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016f72:	4988      	ldr	r1, [pc, #544]	; (8017194 <ip4_frag+0x278>)
 8016f74:	4888      	ldr	r0, [pc, #544]	; (8017198 <ip4_frag+0x27c>)
 8016f76:	f000 fa53 	bl	8017420 <iprintf>
 8016f7a:	f06f 0305 	mvn.w	r3, #5
 8016f7e:	e102      	b.n	8017186 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f82:	88db      	ldrh	r3, [r3, #6]
 8016f84:	b29b      	uxth	r3, r3
 8016f86:	4618      	mov	r0, r3
 8016f88:	f7f5 fdaa 	bl	800cae0 <lwip_htons>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016f90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016f9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016fa0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	891b      	ldrh	r3, [r3, #8]
 8016fa6:	3b14      	subs	r3, #20
 8016fa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016fac:	e0e1      	b.n	8017172 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016fae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016fb0:	00db      	lsls	r3, r3, #3
 8016fb2:	b29b      	uxth	r3, r3
 8016fb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016fb8:	4293      	cmp	r3, r2
 8016fba:	bf28      	it	cs
 8016fbc:	4613      	movcs	r3, r2
 8016fbe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016fc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016fc4:	2114      	movs	r1, #20
 8016fc6:	200e      	movs	r0, #14
 8016fc8:	f7f6 fe38 	bl	800dc3c <pbuf_alloc>
 8016fcc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f000 80d5 	beq.w	8017180 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd8:	895b      	ldrh	r3, [r3, #10]
 8016fda:	2b13      	cmp	r3, #19
 8016fdc:	d806      	bhi.n	8016fec <ip4_frag+0xd0>
 8016fde:	4b6c      	ldr	r3, [pc, #432]	; (8017190 <ip4_frag+0x274>)
 8016fe0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016fe4:	496d      	ldr	r1, [pc, #436]	; (801719c <ip4_frag+0x280>)
 8016fe6:	486c      	ldr	r0, [pc, #432]	; (8017198 <ip4_frag+0x27c>)
 8016fe8:	f000 fa1a 	bl	8017420 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fee:	685b      	ldr	r3, [r3, #4]
 8016ff0:	2214      	movs	r2, #20
 8016ff2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f000 f9e3 	bl	80173c0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ffc:	685b      	ldr	r3, [r3, #4]
 8016ffe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017002:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017006:	e064      	b.n	80170d2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	895a      	ldrh	r2, [r3, #10]
 801700c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801700e:	1ad3      	subs	r3, r2, r3
 8017010:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	895b      	ldrh	r3, [r3, #10]
 8017016:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017018:	429a      	cmp	r2, r3
 801701a:	d906      	bls.n	801702a <ip4_frag+0x10e>
 801701c:	4b5c      	ldr	r3, [pc, #368]	; (8017190 <ip4_frag+0x274>)
 801701e:	f240 322d 	movw	r2, #813	; 0x32d
 8017022:	495f      	ldr	r1, [pc, #380]	; (80171a0 <ip4_frag+0x284>)
 8017024:	485c      	ldr	r0, [pc, #368]	; (8017198 <ip4_frag+0x27c>)
 8017026:	f000 f9fb 	bl	8017420 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801702a:	8bfa      	ldrh	r2, [r7, #30]
 801702c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017030:	4293      	cmp	r3, r2
 8017032:	bf28      	it	cs
 8017034:	4613      	movcs	r3, r2
 8017036:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801703a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801703e:	2b00      	cmp	r3, #0
 8017040:	d105      	bne.n	801704e <ip4_frag+0x132>
        poff = 0;
 8017042:	2300      	movs	r3, #0
 8017044:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	60fb      	str	r3, [r7, #12]
        continue;
 801704c:	e041      	b.n	80170d2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801704e:	f7ff ff0d 	bl	8016e6c <ip_frag_alloc_pbuf_custom_ref>
 8017052:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017054:	69bb      	ldr	r3, [r7, #24]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d103      	bne.n	8017062 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801705a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801705c:	f7f7 f8d2 	bl	800e204 <pbuf_free>
        goto memerr;
 8017060:	e08f      	b.n	8017182 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017062:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017068:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801706a:	4413      	add	r3, r2
 801706c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017070:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017074:	9201      	str	r2, [sp, #4]
 8017076:	9300      	str	r3, [sp, #0]
 8017078:	4603      	mov	r3, r0
 801707a:	2241      	movs	r2, #65	; 0x41
 801707c:	2000      	movs	r0, #0
 801707e:	f7f6 ff07 	bl	800de90 <pbuf_alloced_custom>
 8017082:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d106      	bne.n	8017098 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801708a:	69b8      	ldr	r0, [r7, #24]
 801708c:	f7ff fef6 	bl	8016e7c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017092:	f7f7 f8b7 	bl	800e204 <pbuf_free>
        goto memerr;
 8017096:	e074      	b.n	8017182 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017098:	68f8      	ldr	r0, [r7, #12]
 801709a:	f7f7 f953 	bl	800e344 <pbuf_ref>
      pcr->original = p;
 801709e:	69bb      	ldr	r3, [r7, #24]
 80170a0:	68fa      	ldr	r2, [r7, #12]
 80170a2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80170a4:	69bb      	ldr	r3, [r7, #24]
 80170a6:	4a3f      	ldr	r2, [pc, #252]	; (80171a4 <ip4_frag+0x288>)
 80170a8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80170aa:	6979      	ldr	r1, [r7, #20]
 80170ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170ae:	f7f7 f96b 	bl	800e388 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80170b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80170b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80170ba:	1ad3      	subs	r3, r2, r3
 80170bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80170c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d004      	beq.n	80170d2 <ip4_frag+0x1b6>
        poff = 0;
 80170c8:	2300      	movs	r3, #0
 80170ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80170d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d196      	bne.n	8017008 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80170da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80170dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80170e0:	4413      	add	r3, r2
 80170e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80170e8:	f1a3 0213 	sub.w	r2, r3, #19
 80170ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80170f0:	429a      	cmp	r2, r3
 80170f2:	bfcc      	ite	gt
 80170f4:	2301      	movgt	r3, #1
 80170f6:	2300      	movle	r3, #0
 80170f8:	b2db      	uxtb	r3, r3
 80170fa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80170fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017104:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017106:	6a3b      	ldr	r3, [r7, #32]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d002      	beq.n	8017112 <ip4_frag+0x1f6>
 801710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710e:	2b00      	cmp	r3, #0
 8017110:	d003      	beq.n	801711a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017112:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017114:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017118:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801711a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801711c:	4618      	mov	r0, r3
 801711e:	f7f5 fcdf 	bl	800cae0 <lwip_htons>
 8017122:	4603      	mov	r3, r0
 8017124:	461a      	mov	r2, r3
 8017126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017128:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801712a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801712c:	3314      	adds	r3, #20
 801712e:	b29b      	uxth	r3, r3
 8017130:	4618      	mov	r0, r3
 8017132:	f7f5 fcd5 	bl	800cae0 <lwip_htons>
 8017136:	4603      	mov	r3, r0
 8017138:	461a      	mov	r2, r3
 801713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801713c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017140:	2200      	movs	r2, #0
 8017142:	729a      	strb	r2, [r3, #10]
 8017144:	2200      	movs	r2, #0
 8017146:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017148:	68bb      	ldr	r3, [r7, #8]
 801714a:	695b      	ldr	r3, [r3, #20]
 801714c:	687a      	ldr	r2, [r7, #4]
 801714e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017150:	68b8      	ldr	r0, [r7, #8]
 8017152:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017156:	f7f7 f855 	bl	800e204 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801715a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801715e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017160:	1ad3      	subs	r3, r2, r3
 8017162:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017166:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801716a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801716c:	4413      	add	r3, r2
 801716e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017172:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017176:	2b00      	cmp	r3, #0
 8017178:	f47f af19 	bne.w	8016fae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801717c:	2300      	movs	r3, #0
 801717e:	e002      	b.n	8017186 <ip4_frag+0x26a>
      goto memerr;
 8017180:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017186:	4618      	mov	r0, r3
 8017188:	3748      	adds	r7, #72	; 0x48
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}
 801718e:	bf00      	nop
 8017190:	0801c3d4 	.word	0x0801c3d4
 8017194:	0801c5b0 	.word	0x0801c5b0
 8017198:	0801c41c 	.word	0x0801c41c
 801719c:	0801c5cc 	.word	0x0801c5cc
 80171a0:	0801c5ec 	.word	0x0801c5ec
 80171a4:	08016eb5 	.word	0x08016eb5

080171a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b086      	sub	sp, #24
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80171b2:	230e      	movs	r3, #14
 80171b4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	895b      	ldrh	r3, [r3, #10]
 80171ba:	2b0e      	cmp	r3, #14
 80171bc:	d96e      	bls.n	801729c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	7bdb      	ldrb	r3, [r3, #15]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d106      	bne.n	80171d4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80171cc:	3301      	adds	r3, #1
 80171ce:	b2da      	uxtb	r2, r3
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	685b      	ldr	r3, [r3, #4]
 80171d8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80171da:	693b      	ldr	r3, [r7, #16]
 80171dc:	7b1a      	ldrb	r2, [r3, #12]
 80171de:	7b5b      	ldrb	r3, [r3, #13]
 80171e0:	021b      	lsls	r3, r3, #8
 80171e2:	4313      	orrs	r3, r2
 80171e4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	781b      	ldrb	r3, [r3, #0]
 80171ea:	f003 0301 	and.w	r3, r3, #1
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d023      	beq.n	801723a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80171f2:	693b      	ldr	r3, [r7, #16]
 80171f4:	781b      	ldrb	r3, [r3, #0]
 80171f6:	2b01      	cmp	r3, #1
 80171f8:	d10f      	bne.n	801721a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80171fa:	693b      	ldr	r3, [r7, #16]
 80171fc:	785b      	ldrb	r3, [r3, #1]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d11b      	bne.n	801723a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017202:	693b      	ldr	r3, [r7, #16]
 8017204:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017206:	2b5e      	cmp	r3, #94	; 0x5e
 8017208:	d117      	bne.n	801723a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	7b5b      	ldrb	r3, [r3, #13]
 801720e:	f043 0310 	orr.w	r3, r3, #16
 8017212:	b2da      	uxtb	r2, r3
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	735a      	strb	r2, [r3, #13]
 8017218:	e00f      	b.n	801723a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801721a:	693b      	ldr	r3, [r7, #16]
 801721c:	2206      	movs	r2, #6
 801721e:	4928      	ldr	r1, [pc, #160]	; (80172c0 <ethernet_input+0x118>)
 8017220:	4618      	mov	r0, r3
 8017222:	f000 f8bf 	bl	80173a4 <memcmp>
 8017226:	4603      	mov	r3, r0
 8017228:	2b00      	cmp	r3, #0
 801722a:	d106      	bne.n	801723a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	7b5b      	ldrb	r3, [r3, #13]
 8017230:	f043 0308 	orr.w	r3, r3, #8
 8017234:	b2da      	uxtb	r2, r3
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801723a:	89fb      	ldrh	r3, [r7, #14]
 801723c:	2b08      	cmp	r3, #8
 801723e:	d003      	beq.n	8017248 <ethernet_input+0xa0>
 8017240:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017244:	d014      	beq.n	8017270 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017246:	e032      	b.n	80172ae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801724e:	f003 0308 	and.w	r3, r3, #8
 8017252:	2b00      	cmp	r3, #0
 8017254:	d024      	beq.n	80172a0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017256:	8afb      	ldrh	r3, [r7, #22]
 8017258:	4619      	mov	r1, r3
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f7f6 ff4c 	bl	800e0f8 <pbuf_remove_header>
 8017260:	4603      	mov	r3, r0
 8017262:	2b00      	cmp	r3, #0
 8017264:	d11e      	bne.n	80172a4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017266:	6839      	ldr	r1, [r7, #0]
 8017268:	6878      	ldr	r0, [r7, #4]
 801726a:	f7fe ff27 	bl	80160bc <ip4_input>
      break;
 801726e:	e013      	b.n	8017298 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017276:	f003 0308 	and.w	r3, r3, #8
 801727a:	2b00      	cmp	r3, #0
 801727c:	d014      	beq.n	80172a8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801727e:	8afb      	ldrh	r3, [r7, #22]
 8017280:	4619      	mov	r1, r3
 8017282:	6878      	ldr	r0, [r7, #4]
 8017284:	f7f6 ff38 	bl	800e0f8 <pbuf_remove_header>
 8017288:	4603      	mov	r3, r0
 801728a:	2b00      	cmp	r3, #0
 801728c:	d10e      	bne.n	80172ac <ethernet_input+0x104>
        etharp_input(p, netif);
 801728e:	6839      	ldr	r1, [r7, #0]
 8017290:	6878      	ldr	r0, [r7, #4]
 8017292:	f7fe f8c7 	bl	8015424 <etharp_input>
      break;
 8017296:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017298:	2300      	movs	r3, #0
 801729a:	e00c      	b.n	80172b6 <ethernet_input+0x10e>
    goto free_and_return;
 801729c:	bf00      	nop
 801729e:	e006      	b.n	80172ae <ethernet_input+0x106>
        goto free_and_return;
 80172a0:	bf00      	nop
 80172a2:	e004      	b.n	80172ae <ethernet_input+0x106>
        goto free_and_return;
 80172a4:	bf00      	nop
 80172a6:	e002      	b.n	80172ae <ethernet_input+0x106>
        goto free_and_return;
 80172a8:	bf00      	nop
 80172aa:	e000      	b.n	80172ae <ethernet_input+0x106>
        goto free_and_return;
 80172ac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80172ae:	6878      	ldr	r0, [r7, #4]
 80172b0:	f7f6 ffa8 	bl	800e204 <pbuf_free>
  return ERR_OK;
 80172b4:	2300      	movs	r3, #0
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3718      	adds	r7, #24
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}
 80172be:	bf00      	nop
 80172c0:	0801eea0 	.word	0x0801eea0

080172c4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b086      	sub	sp, #24
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	60f8      	str	r0, [r7, #12]
 80172cc:	60b9      	str	r1, [r7, #8]
 80172ce:	607a      	str	r2, [r7, #4]
 80172d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80172d2:	8c3b      	ldrh	r3, [r7, #32]
 80172d4:	4618      	mov	r0, r3
 80172d6:	f7f5 fc03 	bl	800cae0 <lwip_htons>
 80172da:	4603      	mov	r3, r0
 80172dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80172de:	210e      	movs	r1, #14
 80172e0:	68b8      	ldr	r0, [r7, #8]
 80172e2:	f7f6 fef9 	bl	800e0d8 <pbuf_add_header>
 80172e6:	4603      	mov	r3, r0
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d125      	bne.n	8017338 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	685b      	ldr	r3, [r3, #4]
 80172f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80172f2:	693b      	ldr	r3, [r7, #16]
 80172f4:	8afa      	ldrh	r2, [r7, #22]
 80172f6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80172f8:	693b      	ldr	r3, [r7, #16]
 80172fa:	2206      	movs	r2, #6
 80172fc:	6839      	ldr	r1, [r7, #0]
 80172fe:	4618      	mov	r0, r3
 8017300:	f000 f85e 	bl	80173c0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017304:	693b      	ldr	r3, [r7, #16]
 8017306:	3306      	adds	r3, #6
 8017308:	2206      	movs	r2, #6
 801730a:	6879      	ldr	r1, [r7, #4]
 801730c:	4618      	mov	r0, r3
 801730e:	f000 f857 	bl	80173c0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017318:	2b06      	cmp	r3, #6
 801731a:	d006      	beq.n	801732a <ethernet_output+0x66>
 801731c:	4b0a      	ldr	r3, [pc, #40]	; (8017348 <ethernet_output+0x84>)
 801731e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017322:	490a      	ldr	r1, [pc, #40]	; (801734c <ethernet_output+0x88>)
 8017324:	480a      	ldr	r0, [pc, #40]	; (8017350 <ethernet_output+0x8c>)
 8017326:	f000 f87b 	bl	8017420 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	699b      	ldr	r3, [r3, #24]
 801732e:	68b9      	ldr	r1, [r7, #8]
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	4798      	blx	r3
 8017334:	4603      	mov	r3, r0
 8017336:	e002      	b.n	801733e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017338:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801733a:	f06f 0301 	mvn.w	r3, #1
}
 801733e:	4618      	mov	r0, r3
 8017340:	3718      	adds	r7, #24
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	0801c5fc 	.word	0x0801c5fc
 801734c:	0801c634 	.word	0x0801c634
 8017350:	0801c668 	.word	0x0801c668

08017354 <atoi>:
 8017354:	220a      	movs	r2, #10
 8017356:	2100      	movs	r1, #0
 8017358:	f000 ba94 	b.w	8017884 <strtol>

0801735c <__libc_init_array>:
 801735c:	b570      	push	{r4, r5, r6, lr}
 801735e:	4d0d      	ldr	r5, [pc, #52]	; (8017394 <__libc_init_array+0x38>)
 8017360:	4c0d      	ldr	r4, [pc, #52]	; (8017398 <__libc_init_array+0x3c>)
 8017362:	1b64      	subs	r4, r4, r5
 8017364:	10a4      	asrs	r4, r4, #2
 8017366:	2600      	movs	r6, #0
 8017368:	42a6      	cmp	r6, r4
 801736a:	d109      	bne.n	8017380 <__libc_init_array+0x24>
 801736c:	4d0b      	ldr	r5, [pc, #44]	; (801739c <__libc_init_array+0x40>)
 801736e:	4c0c      	ldr	r4, [pc, #48]	; (80173a0 <__libc_init_array+0x44>)
 8017370:	f001 fbe4 	bl	8018b3c <_init>
 8017374:	1b64      	subs	r4, r4, r5
 8017376:	10a4      	asrs	r4, r4, #2
 8017378:	2600      	movs	r6, #0
 801737a:	42a6      	cmp	r6, r4
 801737c:	d105      	bne.n	801738a <__libc_init_array+0x2e>
 801737e:	bd70      	pop	{r4, r5, r6, pc}
 8017380:	f855 3b04 	ldr.w	r3, [r5], #4
 8017384:	4798      	blx	r3
 8017386:	3601      	adds	r6, #1
 8017388:	e7ee      	b.n	8017368 <__libc_init_array+0xc>
 801738a:	f855 3b04 	ldr.w	r3, [r5], #4
 801738e:	4798      	blx	r3
 8017390:	3601      	adds	r6, #1
 8017392:	e7f2      	b.n	801737a <__libc_init_array+0x1e>
 8017394:	0801f104 	.word	0x0801f104
 8017398:	0801f104 	.word	0x0801f104
 801739c:	0801f104 	.word	0x0801f104
 80173a0:	0801f108 	.word	0x0801f108

080173a4 <memcmp>:
 80173a4:	b530      	push	{r4, r5, lr}
 80173a6:	3901      	subs	r1, #1
 80173a8:	2400      	movs	r4, #0
 80173aa:	42a2      	cmp	r2, r4
 80173ac:	d101      	bne.n	80173b2 <memcmp+0xe>
 80173ae:	2000      	movs	r0, #0
 80173b0:	e005      	b.n	80173be <memcmp+0x1a>
 80173b2:	5d03      	ldrb	r3, [r0, r4]
 80173b4:	3401      	adds	r4, #1
 80173b6:	5d0d      	ldrb	r5, [r1, r4]
 80173b8:	42ab      	cmp	r3, r5
 80173ba:	d0f6      	beq.n	80173aa <memcmp+0x6>
 80173bc:	1b58      	subs	r0, r3, r5
 80173be:	bd30      	pop	{r4, r5, pc}

080173c0 <memcpy>:
 80173c0:	440a      	add	r2, r1
 80173c2:	4291      	cmp	r1, r2
 80173c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80173c8:	d100      	bne.n	80173cc <memcpy+0xc>
 80173ca:	4770      	bx	lr
 80173cc:	b510      	push	{r4, lr}
 80173ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80173d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80173d6:	4291      	cmp	r1, r2
 80173d8:	d1f9      	bne.n	80173ce <memcpy+0xe>
 80173da:	bd10      	pop	{r4, pc}

080173dc <memmove>:
 80173dc:	4288      	cmp	r0, r1
 80173de:	b510      	push	{r4, lr}
 80173e0:	eb01 0402 	add.w	r4, r1, r2
 80173e4:	d902      	bls.n	80173ec <memmove+0x10>
 80173e6:	4284      	cmp	r4, r0
 80173e8:	4623      	mov	r3, r4
 80173ea:	d807      	bhi.n	80173fc <memmove+0x20>
 80173ec:	1e43      	subs	r3, r0, #1
 80173ee:	42a1      	cmp	r1, r4
 80173f0:	d008      	beq.n	8017404 <memmove+0x28>
 80173f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80173f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80173fa:	e7f8      	b.n	80173ee <memmove+0x12>
 80173fc:	4402      	add	r2, r0
 80173fe:	4601      	mov	r1, r0
 8017400:	428a      	cmp	r2, r1
 8017402:	d100      	bne.n	8017406 <memmove+0x2a>
 8017404:	bd10      	pop	{r4, pc}
 8017406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801740a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801740e:	e7f7      	b.n	8017400 <memmove+0x24>

08017410 <memset>:
 8017410:	4402      	add	r2, r0
 8017412:	4603      	mov	r3, r0
 8017414:	4293      	cmp	r3, r2
 8017416:	d100      	bne.n	801741a <memset+0xa>
 8017418:	4770      	bx	lr
 801741a:	f803 1b01 	strb.w	r1, [r3], #1
 801741e:	e7f9      	b.n	8017414 <memset+0x4>

08017420 <iprintf>:
 8017420:	b40f      	push	{r0, r1, r2, r3}
 8017422:	4b0a      	ldr	r3, [pc, #40]	; (801744c <iprintf+0x2c>)
 8017424:	b513      	push	{r0, r1, r4, lr}
 8017426:	681c      	ldr	r4, [r3, #0]
 8017428:	b124      	cbz	r4, 8017434 <iprintf+0x14>
 801742a:	69a3      	ldr	r3, [r4, #24]
 801742c:	b913      	cbnz	r3, 8017434 <iprintf+0x14>
 801742e:	4620      	mov	r0, r4
 8017430:	f000 fc30 	bl	8017c94 <__sinit>
 8017434:	ab05      	add	r3, sp, #20
 8017436:	9a04      	ldr	r2, [sp, #16]
 8017438:	68a1      	ldr	r1, [r4, #8]
 801743a:	9301      	str	r3, [sp, #4]
 801743c:	4620      	mov	r0, r4
 801743e:	f000 ff77 	bl	8018330 <_vfiprintf_r>
 8017442:	b002      	add	sp, #8
 8017444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017448:	b004      	add	sp, #16
 801744a:	4770      	bx	lr
 801744c:	200004b0 	.word	0x200004b0

08017450 <_puts_r>:
 8017450:	b570      	push	{r4, r5, r6, lr}
 8017452:	460e      	mov	r6, r1
 8017454:	4605      	mov	r5, r0
 8017456:	b118      	cbz	r0, 8017460 <_puts_r+0x10>
 8017458:	6983      	ldr	r3, [r0, #24]
 801745a:	b90b      	cbnz	r3, 8017460 <_puts_r+0x10>
 801745c:	f000 fc1a 	bl	8017c94 <__sinit>
 8017460:	69ab      	ldr	r3, [r5, #24]
 8017462:	68ac      	ldr	r4, [r5, #8]
 8017464:	b913      	cbnz	r3, 801746c <_puts_r+0x1c>
 8017466:	4628      	mov	r0, r5
 8017468:	f000 fc14 	bl	8017c94 <__sinit>
 801746c:	4b2c      	ldr	r3, [pc, #176]	; (8017520 <_puts_r+0xd0>)
 801746e:	429c      	cmp	r4, r3
 8017470:	d120      	bne.n	80174b4 <_puts_r+0x64>
 8017472:	686c      	ldr	r4, [r5, #4]
 8017474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017476:	07db      	lsls	r3, r3, #31
 8017478:	d405      	bmi.n	8017486 <_puts_r+0x36>
 801747a:	89a3      	ldrh	r3, [r4, #12]
 801747c:	0598      	lsls	r0, r3, #22
 801747e:	d402      	bmi.n	8017486 <_puts_r+0x36>
 8017480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017482:	f000 fcb7 	bl	8017df4 <__retarget_lock_acquire_recursive>
 8017486:	89a3      	ldrh	r3, [r4, #12]
 8017488:	0719      	lsls	r1, r3, #28
 801748a:	d51d      	bpl.n	80174c8 <_puts_r+0x78>
 801748c:	6923      	ldr	r3, [r4, #16]
 801748e:	b1db      	cbz	r3, 80174c8 <_puts_r+0x78>
 8017490:	3e01      	subs	r6, #1
 8017492:	68a3      	ldr	r3, [r4, #8]
 8017494:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017498:	3b01      	subs	r3, #1
 801749a:	60a3      	str	r3, [r4, #8]
 801749c:	bb39      	cbnz	r1, 80174ee <_puts_r+0x9e>
 801749e:	2b00      	cmp	r3, #0
 80174a0:	da38      	bge.n	8017514 <_puts_r+0xc4>
 80174a2:	4622      	mov	r2, r4
 80174a4:	210a      	movs	r1, #10
 80174a6:	4628      	mov	r0, r5
 80174a8:	f000 f9f6 	bl	8017898 <__swbuf_r>
 80174ac:	3001      	adds	r0, #1
 80174ae:	d011      	beq.n	80174d4 <_puts_r+0x84>
 80174b0:	250a      	movs	r5, #10
 80174b2:	e011      	b.n	80174d8 <_puts_r+0x88>
 80174b4:	4b1b      	ldr	r3, [pc, #108]	; (8017524 <_puts_r+0xd4>)
 80174b6:	429c      	cmp	r4, r3
 80174b8:	d101      	bne.n	80174be <_puts_r+0x6e>
 80174ba:	68ac      	ldr	r4, [r5, #8]
 80174bc:	e7da      	b.n	8017474 <_puts_r+0x24>
 80174be:	4b1a      	ldr	r3, [pc, #104]	; (8017528 <_puts_r+0xd8>)
 80174c0:	429c      	cmp	r4, r3
 80174c2:	bf08      	it	eq
 80174c4:	68ec      	ldreq	r4, [r5, #12]
 80174c6:	e7d5      	b.n	8017474 <_puts_r+0x24>
 80174c8:	4621      	mov	r1, r4
 80174ca:	4628      	mov	r0, r5
 80174cc:	f000 fa36 	bl	801793c <__swsetup_r>
 80174d0:	2800      	cmp	r0, #0
 80174d2:	d0dd      	beq.n	8017490 <_puts_r+0x40>
 80174d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80174d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80174da:	07da      	lsls	r2, r3, #31
 80174dc:	d405      	bmi.n	80174ea <_puts_r+0x9a>
 80174de:	89a3      	ldrh	r3, [r4, #12]
 80174e0:	059b      	lsls	r3, r3, #22
 80174e2:	d402      	bmi.n	80174ea <_puts_r+0x9a>
 80174e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174e6:	f000 fc86 	bl	8017df6 <__retarget_lock_release_recursive>
 80174ea:	4628      	mov	r0, r5
 80174ec:	bd70      	pop	{r4, r5, r6, pc}
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	da04      	bge.n	80174fc <_puts_r+0xac>
 80174f2:	69a2      	ldr	r2, [r4, #24]
 80174f4:	429a      	cmp	r2, r3
 80174f6:	dc06      	bgt.n	8017506 <_puts_r+0xb6>
 80174f8:	290a      	cmp	r1, #10
 80174fa:	d004      	beq.n	8017506 <_puts_r+0xb6>
 80174fc:	6823      	ldr	r3, [r4, #0]
 80174fe:	1c5a      	adds	r2, r3, #1
 8017500:	6022      	str	r2, [r4, #0]
 8017502:	7019      	strb	r1, [r3, #0]
 8017504:	e7c5      	b.n	8017492 <_puts_r+0x42>
 8017506:	4622      	mov	r2, r4
 8017508:	4628      	mov	r0, r5
 801750a:	f000 f9c5 	bl	8017898 <__swbuf_r>
 801750e:	3001      	adds	r0, #1
 8017510:	d1bf      	bne.n	8017492 <_puts_r+0x42>
 8017512:	e7df      	b.n	80174d4 <_puts_r+0x84>
 8017514:	6823      	ldr	r3, [r4, #0]
 8017516:	250a      	movs	r5, #10
 8017518:	1c5a      	adds	r2, r3, #1
 801751a:	6022      	str	r2, [r4, #0]
 801751c:	701d      	strb	r5, [r3, #0]
 801751e:	e7db      	b.n	80174d8 <_puts_r+0x88>
 8017520:	0801f088 	.word	0x0801f088
 8017524:	0801f0a8 	.word	0x0801f0a8
 8017528:	0801f068 	.word	0x0801f068

0801752c <puts>:
 801752c:	4b02      	ldr	r3, [pc, #8]	; (8017538 <puts+0xc>)
 801752e:	4601      	mov	r1, r0
 8017530:	6818      	ldr	r0, [r3, #0]
 8017532:	f7ff bf8d 	b.w	8017450 <_puts_r>
 8017536:	bf00      	nop
 8017538:	200004b0 	.word	0x200004b0

0801753c <rand>:
 801753c:	4b17      	ldr	r3, [pc, #92]	; (801759c <rand+0x60>)
 801753e:	b510      	push	{r4, lr}
 8017540:	681c      	ldr	r4, [r3, #0]
 8017542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017544:	b9b3      	cbnz	r3, 8017574 <rand+0x38>
 8017546:	2018      	movs	r0, #24
 8017548:	f000 fcba 	bl	8017ec0 <malloc>
 801754c:	63a0      	str	r0, [r4, #56]	; 0x38
 801754e:	b928      	cbnz	r0, 801755c <rand+0x20>
 8017550:	4602      	mov	r2, r0
 8017552:	4b13      	ldr	r3, [pc, #76]	; (80175a0 <rand+0x64>)
 8017554:	4813      	ldr	r0, [pc, #76]	; (80175a4 <rand+0x68>)
 8017556:	214e      	movs	r1, #78	; 0x4e
 8017558:	f000 fa5e 	bl	8017a18 <__assert_func>
 801755c:	4a12      	ldr	r2, [pc, #72]	; (80175a8 <rand+0x6c>)
 801755e:	4b13      	ldr	r3, [pc, #76]	; (80175ac <rand+0x70>)
 8017560:	e9c0 2300 	strd	r2, r3, [r0]
 8017564:	4b12      	ldr	r3, [pc, #72]	; (80175b0 <rand+0x74>)
 8017566:	6083      	str	r3, [r0, #8]
 8017568:	230b      	movs	r3, #11
 801756a:	8183      	strh	r3, [r0, #12]
 801756c:	2201      	movs	r2, #1
 801756e:	2300      	movs	r3, #0
 8017570:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017574:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017576:	480f      	ldr	r0, [pc, #60]	; (80175b4 <rand+0x78>)
 8017578:	690a      	ldr	r2, [r1, #16]
 801757a:	694b      	ldr	r3, [r1, #20]
 801757c:	4c0e      	ldr	r4, [pc, #56]	; (80175b8 <rand+0x7c>)
 801757e:	4350      	muls	r0, r2
 8017580:	fb04 0003 	mla	r0, r4, r3, r0
 8017584:	fba2 3404 	umull	r3, r4, r2, r4
 8017588:	1c5a      	adds	r2, r3, #1
 801758a:	4404      	add	r4, r0
 801758c:	f144 0000 	adc.w	r0, r4, #0
 8017590:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017594:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017598:	bd10      	pop	{r4, pc}
 801759a:	bf00      	nop
 801759c:	200004b0 	.word	0x200004b0
 80175a0:	0801efb4 	.word	0x0801efb4
 80175a4:	0801efcb 	.word	0x0801efcb
 80175a8:	abcd330e 	.word	0xabcd330e
 80175ac:	e66d1234 	.word	0xe66d1234
 80175b0:	0005deec 	.word	0x0005deec
 80175b4:	5851f42d 	.word	0x5851f42d
 80175b8:	4c957f2d 	.word	0x4c957f2d

080175bc <sniprintf>:
 80175bc:	b40c      	push	{r2, r3}
 80175be:	b530      	push	{r4, r5, lr}
 80175c0:	4b17      	ldr	r3, [pc, #92]	; (8017620 <sniprintf+0x64>)
 80175c2:	1e0c      	subs	r4, r1, #0
 80175c4:	681d      	ldr	r5, [r3, #0]
 80175c6:	b09d      	sub	sp, #116	; 0x74
 80175c8:	da08      	bge.n	80175dc <sniprintf+0x20>
 80175ca:	238b      	movs	r3, #139	; 0x8b
 80175cc:	602b      	str	r3, [r5, #0]
 80175ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175d2:	b01d      	add	sp, #116	; 0x74
 80175d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80175d8:	b002      	add	sp, #8
 80175da:	4770      	bx	lr
 80175dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80175e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80175e4:	bf14      	ite	ne
 80175e6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80175ea:	4623      	moveq	r3, r4
 80175ec:	9304      	str	r3, [sp, #16]
 80175ee:	9307      	str	r3, [sp, #28]
 80175f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80175f4:	9002      	str	r0, [sp, #8]
 80175f6:	9006      	str	r0, [sp, #24]
 80175f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80175fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80175fe:	ab21      	add	r3, sp, #132	; 0x84
 8017600:	a902      	add	r1, sp, #8
 8017602:	4628      	mov	r0, r5
 8017604:	9301      	str	r3, [sp, #4]
 8017606:	f000 fd69 	bl	80180dc <_svfiprintf_r>
 801760a:	1c43      	adds	r3, r0, #1
 801760c:	bfbc      	itt	lt
 801760e:	238b      	movlt	r3, #139	; 0x8b
 8017610:	602b      	strlt	r3, [r5, #0]
 8017612:	2c00      	cmp	r4, #0
 8017614:	d0dd      	beq.n	80175d2 <sniprintf+0x16>
 8017616:	9b02      	ldr	r3, [sp, #8]
 8017618:	2200      	movs	r2, #0
 801761a:	701a      	strb	r2, [r3, #0]
 801761c:	e7d9      	b.n	80175d2 <sniprintf+0x16>
 801761e:	bf00      	nop
 8017620:	200004b0 	.word	0x200004b0

08017624 <siprintf>:
 8017624:	b40e      	push	{r1, r2, r3}
 8017626:	b500      	push	{lr}
 8017628:	b09c      	sub	sp, #112	; 0x70
 801762a:	ab1d      	add	r3, sp, #116	; 0x74
 801762c:	9002      	str	r0, [sp, #8]
 801762e:	9006      	str	r0, [sp, #24]
 8017630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017634:	4809      	ldr	r0, [pc, #36]	; (801765c <siprintf+0x38>)
 8017636:	9107      	str	r1, [sp, #28]
 8017638:	9104      	str	r1, [sp, #16]
 801763a:	4909      	ldr	r1, [pc, #36]	; (8017660 <siprintf+0x3c>)
 801763c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017640:	9105      	str	r1, [sp, #20]
 8017642:	6800      	ldr	r0, [r0, #0]
 8017644:	9301      	str	r3, [sp, #4]
 8017646:	a902      	add	r1, sp, #8
 8017648:	f000 fd48 	bl	80180dc <_svfiprintf_r>
 801764c:	9b02      	ldr	r3, [sp, #8]
 801764e:	2200      	movs	r2, #0
 8017650:	701a      	strb	r2, [r3, #0]
 8017652:	b01c      	add	sp, #112	; 0x70
 8017654:	f85d eb04 	ldr.w	lr, [sp], #4
 8017658:	b003      	add	sp, #12
 801765a:	4770      	bx	lr
 801765c:	200004b0 	.word	0x200004b0
 8017660:	ffff0208 	.word	0xffff0208

08017664 <strcat>:
 8017664:	b510      	push	{r4, lr}
 8017666:	4602      	mov	r2, r0
 8017668:	7814      	ldrb	r4, [r2, #0]
 801766a:	4613      	mov	r3, r2
 801766c:	3201      	adds	r2, #1
 801766e:	2c00      	cmp	r4, #0
 8017670:	d1fa      	bne.n	8017668 <strcat+0x4>
 8017672:	3b01      	subs	r3, #1
 8017674:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017678:	f803 2f01 	strb.w	r2, [r3, #1]!
 801767c:	2a00      	cmp	r2, #0
 801767e:	d1f9      	bne.n	8017674 <strcat+0x10>
 8017680:	bd10      	pop	{r4, pc}

08017682 <strchr>:
 8017682:	b2c9      	uxtb	r1, r1
 8017684:	4603      	mov	r3, r0
 8017686:	f810 2b01 	ldrb.w	r2, [r0], #1
 801768a:	b11a      	cbz	r2, 8017694 <strchr+0x12>
 801768c:	428a      	cmp	r2, r1
 801768e:	d1f9      	bne.n	8017684 <strchr+0x2>
 8017690:	4618      	mov	r0, r3
 8017692:	4770      	bx	lr
 8017694:	2900      	cmp	r1, #0
 8017696:	bf18      	it	ne
 8017698:	2300      	movne	r3, #0
 801769a:	e7f9      	b.n	8017690 <strchr+0xe>

0801769c <strcpy>:
 801769c:	4603      	mov	r3, r0
 801769e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80176a2:	f803 2b01 	strb.w	r2, [r3], #1
 80176a6:	2a00      	cmp	r2, #0
 80176a8:	d1f9      	bne.n	801769e <strcpy+0x2>
 80176aa:	4770      	bx	lr

080176ac <strncmp>:
 80176ac:	b510      	push	{r4, lr}
 80176ae:	b16a      	cbz	r2, 80176cc <strncmp+0x20>
 80176b0:	3901      	subs	r1, #1
 80176b2:	1884      	adds	r4, r0, r2
 80176b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80176b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80176bc:	4293      	cmp	r3, r2
 80176be:	d103      	bne.n	80176c8 <strncmp+0x1c>
 80176c0:	42a0      	cmp	r0, r4
 80176c2:	d001      	beq.n	80176c8 <strncmp+0x1c>
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d1f5      	bne.n	80176b4 <strncmp+0x8>
 80176c8:	1a98      	subs	r0, r3, r2
 80176ca:	bd10      	pop	{r4, pc}
 80176cc:	4610      	mov	r0, r2
 80176ce:	e7fc      	b.n	80176ca <strncmp+0x1e>

080176d0 <strncpy>:
 80176d0:	b510      	push	{r4, lr}
 80176d2:	3901      	subs	r1, #1
 80176d4:	4603      	mov	r3, r0
 80176d6:	b132      	cbz	r2, 80176e6 <strncpy+0x16>
 80176d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80176dc:	f803 4b01 	strb.w	r4, [r3], #1
 80176e0:	3a01      	subs	r2, #1
 80176e2:	2c00      	cmp	r4, #0
 80176e4:	d1f7      	bne.n	80176d6 <strncpy+0x6>
 80176e6:	441a      	add	r2, r3
 80176e8:	2100      	movs	r1, #0
 80176ea:	4293      	cmp	r3, r2
 80176ec:	d100      	bne.n	80176f0 <strncpy+0x20>
 80176ee:	bd10      	pop	{r4, pc}
 80176f0:	f803 1b01 	strb.w	r1, [r3], #1
 80176f4:	e7f9      	b.n	80176ea <strncpy+0x1a>

080176f6 <strstr>:
 80176f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176f8:	780c      	ldrb	r4, [r1, #0]
 80176fa:	b164      	cbz	r4, 8017716 <strstr+0x20>
 80176fc:	4603      	mov	r3, r0
 80176fe:	781a      	ldrb	r2, [r3, #0]
 8017700:	4618      	mov	r0, r3
 8017702:	1c5e      	adds	r6, r3, #1
 8017704:	b90a      	cbnz	r2, 801770a <strstr+0x14>
 8017706:	4610      	mov	r0, r2
 8017708:	e005      	b.n	8017716 <strstr+0x20>
 801770a:	4294      	cmp	r4, r2
 801770c:	d108      	bne.n	8017720 <strstr+0x2a>
 801770e:	460d      	mov	r5, r1
 8017710:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8017714:	b902      	cbnz	r2, 8017718 <strstr+0x22>
 8017716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017718:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801771c:	4297      	cmp	r7, r2
 801771e:	d0f7      	beq.n	8017710 <strstr+0x1a>
 8017720:	4633      	mov	r3, r6
 8017722:	e7ec      	b.n	80176fe <strstr+0x8>

08017724 <__strtok_r>:
 8017724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017726:	b908      	cbnz	r0, 801772c <__strtok_r+0x8>
 8017728:	6810      	ldr	r0, [r2, #0]
 801772a:	b188      	cbz	r0, 8017750 <__strtok_r+0x2c>
 801772c:	4604      	mov	r4, r0
 801772e:	4620      	mov	r0, r4
 8017730:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017734:	460f      	mov	r7, r1
 8017736:	f817 6b01 	ldrb.w	r6, [r7], #1
 801773a:	b91e      	cbnz	r6, 8017744 <__strtok_r+0x20>
 801773c:	b965      	cbnz	r5, 8017758 <__strtok_r+0x34>
 801773e:	6015      	str	r5, [r2, #0]
 8017740:	4628      	mov	r0, r5
 8017742:	e005      	b.n	8017750 <__strtok_r+0x2c>
 8017744:	42b5      	cmp	r5, r6
 8017746:	d1f6      	bne.n	8017736 <__strtok_r+0x12>
 8017748:	2b00      	cmp	r3, #0
 801774a:	d1f0      	bne.n	801772e <__strtok_r+0xa>
 801774c:	6014      	str	r4, [r2, #0]
 801774e:	7003      	strb	r3, [r0, #0]
 8017750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017752:	461c      	mov	r4, r3
 8017754:	e00c      	b.n	8017770 <__strtok_r+0x4c>
 8017756:	b915      	cbnz	r5, 801775e <__strtok_r+0x3a>
 8017758:	f814 3b01 	ldrb.w	r3, [r4], #1
 801775c:	460e      	mov	r6, r1
 801775e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8017762:	42ab      	cmp	r3, r5
 8017764:	d1f7      	bne.n	8017756 <__strtok_r+0x32>
 8017766:	2b00      	cmp	r3, #0
 8017768:	d0f3      	beq.n	8017752 <__strtok_r+0x2e>
 801776a:	2300      	movs	r3, #0
 801776c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017770:	6014      	str	r4, [r2, #0]
 8017772:	e7ed      	b.n	8017750 <__strtok_r+0x2c>

08017774 <strtok_r>:
 8017774:	2301      	movs	r3, #1
 8017776:	f7ff bfd5 	b.w	8017724 <__strtok_r>
	...

0801777c <_strtol_l.isra.0>:
 801777c:	2b01      	cmp	r3, #1
 801777e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017782:	d001      	beq.n	8017788 <_strtol_l.isra.0+0xc>
 8017784:	2b24      	cmp	r3, #36	; 0x24
 8017786:	d906      	bls.n	8017796 <_strtol_l.isra.0+0x1a>
 8017788:	f000 f964 	bl	8017a54 <__errno>
 801778c:	2316      	movs	r3, #22
 801778e:	6003      	str	r3, [r0, #0]
 8017790:	2000      	movs	r0, #0
 8017792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017796:	4f3a      	ldr	r7, [pc, #232]	; (8017880 <_strtol_l.isra.0+0x104>)
 8017798:	468e      	mov	lr, r1
 801779a:	4676      	mov	r6, lr
 801779c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80177a0:	5de5      	ldrb	r5, [r4, r7]
 80177a2:	f015 0508 	ands.w	r5, r5, #8
 80177a6:	d1f8      	bne.n	801779a <_strtol_l.isra.0+0x1e>
 80177a8:	2c2d      	cmp	r4, #45	; 0x2d
 80177aa:	d134      	bne.n	8017816 <_strtol_l.isra.0+0x9a>
 80177ac:	f89e 4000 	ldrb.w	r4, [lr]
 80177b0:	f04f 0801 	mov.w	r8, #1
 80177b4:	f106 0e02 	add.w	lr, r6, #2
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d05c      	beq.n	8017876 <_strtol_l.isra.0+0xfa>
 80177bc:	2b10      	cmp	r3, #16
 80177be:	d10c      	bne.n	80177da <_strtol_l.isra.0+0x5e>
 80177c0:	2c30      	cmp	r4, #48	; 0x30
 80177c2:	d10a      	bne.n	80177da <_strtol_l.isra.0+0x5e>
 80177c4:	f89e 4000 	ldrb.w	r4, [lr]
 80177c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80177cc:	2c58      	cmp	r4, #88	; 0x58
 80177ce:	d14d      	bne.n	801786c <_strtol_l.isra.0+0xf0>
 80177d0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80177d4:	2310      	movs	r3, #16
 80177d6:	f10e 0e02 	add.w	lr, lr, #2
 80177da:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80177de:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80177e2:	2600      	movs	r6, #0
 80177e4:	fbbc f9f3 	udiv	r9, ip, r3
 80177e8:	4635      	mov	r5, r6
 80177ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80177ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80177f2:	2f09      	cmp	r7, #9
 80177f4:	d818      	bhi.n	8017828 <_strtol_l.isra.0+0xac>
 80177f6:	463c      	mov	r4, r7
 80177f8:	42a3      	cmp	r3, r4
 80177fa:	dd24      	ble.n	8017846 <_strtol_l.isra.0+0xca>
 80177fc:	2e00      	cmp	r6, #0
 80177fe:	db1f      	blt.n	8017840 <_strtol_l.isra.0+0xc4>
 8017800:	45a9      	cmp	r9, r5
 8017802:	d31d      	bcc.n	8017840 <_strtol_l.isra.0+0xc4>
 8017804:	d101      	bne.n	801780a <_strtol_l.isra.0+0x8e>
 8017806:	45a2      	cmp	sl, r4
 8017808:	db1a      	blt.n	8017840 <_strtol_l.isra.0+0xc4>
 801780a:	fb05 4503 	mla	r5, r5, r3, r4
 801780e:	2601      	movs	r6, #1
 8017810:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017814:	e7eb      	b.n	80177ee <_strtol_l.isra.0+0x72>
 8017816:	2c2b      	cmp	r4, #43	; 0x2b
 8017818:	bf08      	it	eq
 801781a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801781e:	46a8      	mov	r8, r5
 8017820:	bf08      	it	eq
 8017822:	f106 0e02 	addeq.w	lr, r6, #2
 8017826:	e7c7      	b.n	80177b8 <_strtol_l.isra.0+0x3c>
 8017828:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801782c:	2f19      	cmp	r7, #25
 801782e:	d801      	bhi.n	8017834 <_strtol_l.isra.0+0xb8>
 8017830:	3c37      	subs	r4, #55	; 0x37
 8017832:	e7e1      	b.n	80177f8 <_strtol_l.isra.0+0x7c>
 8017834:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017838:	2f19      	cmp	r7, #25
 801783a:	d804      	bhi.n	8017846 <_strtol_l.isra.0+0xca>
 801783c:	3c57      	subs	r4, #87	; 0x57
 801783e:	e7db      	b.n	80177f8 <_strtol_l.isra.0+0x7c>
 8017840:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017844:	e7e4      	b.n	8017810 <_strtol_l.isra.0+0x94>
 8017846:	2e00      	cmp	r6, #0
 8017848:	da05      	bge.n	8017856 <_strtol_l.isra.0+0xda>
 801784a:	2322      	movs	r3, #34	; 0x22
 801784c:	6003      	str	r3, [r0, #0]
 801784e:	4665      	mov	r5, ip
 8017850:	b942      	cbnz	r2, 8017864 <_strtol_l.isra.0+0xe8>
 8017852:	4628      	mov	r0, r5
 8017854:	e79d      	b.n	8017792 <_strtol_l.isra.0+0x16>
 8017856:	f1b8 0f00 	cmp.w	r8, #0
 801785a:	d000      	beq.n	801785e <_strtol_l.isra.0+0xe2>
 801785c:	426d      	negs	r5, r5
 801785e:	2a00      	cmp	r2, #0
 8017860:	d0f7      	beq.n	8017852 <_strtol_l.isra.0+0xd6>
 8017862:	b10e      	cbz	r6, 8017868 <_strtol_l.isra.0+0xec>
 8017864:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8017868:	6011      	str	r1, [r2, #0]
 801786a:	e7f2      	b.n	8017852 <_strtol_l.isra.0+0xd6>
 801786c:	2430      	movs	r4, #48	; 0x30
 801786e:	2b00      	cmp	r3, #0
 8017870:	d1b3      	bne.n	80177da <_strtol_l.isra.0+0x5e>
 8017872:	2308      	movs	r3, #8
 8017874:	e7b1      	b.n	80177da <_strtol_l.isra.0+0x5e>
 8017876:	2c30      	cmp	r4, #48	; 0x30
 8017878:	d0a4      	beq.n	80177c4 <_strtol_l.isra.0+0x48>
 801787a:	230a      	movs	r3, #10
 801787c:	e7ad      	b.n	80177da <_strtol_l.isra.0+0x5e>
 801787e:	bf00      	nop
 8017880:	0801eeaf 	.word	0x0801eeaf

08017884 <strtol>:
 8017884:	4613      	mov	r3, r2
 8017886:	460a      	mov	r2, r1
 8017888:	4601      	mov	r1, r0
 801788a:	4802      	ldr	r0, [pc, #8]	; (8017894 <strtol+0x10>)
 801788c:	6800      	ldr	r0, [r0, #0]
 801788e:	f7ff bf75 	b.w	801777c <_strtol_l.isra.0>
 8017892:	bf00      	nop
 8017894:	200004b0 	.word	0x200004b0

08017898 <__swbuf_r>:
 8017898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801789a:	460e      	mov	r6, r1
 801789c:	4614      	mov	r4, r2
 801789e:	4605      	mov	r5, r0
 80178a0:	b118      	cbz	r0, 80178aa <__swbuf_r+0x12>
 80178a2:	6983      	ldr	r3, [r0, #24]
 80178a4:	b90b      	cbnz	r3, 80178aa <__swbuf_r+0x12>
 80178a6:	f000 f9f5 	bl	8017c94 <__sinit>
 80178aa:	4b21      	ldr	r3, [pc, #132]	; (8017930 <__swbuf_r+0x98>)
 80178ac:	429c      	cmp	r4, r3
 80178ae:	d12b      	bne.n	8017908 <__swbuf_r+0x70>
 80178b0:	686c      	ldr	r4, [r5, #4]
 80178b2:	69a3      	ldr	r3, [r4, #24]
 80178b4:	60a3      	str	r3, [r4, #8]
 80178b6:	89a3      	ldrh	r3, [r4, #12]
 80178b8:	071a      	lsls	r2, r3, #28
 80178ba:	d52f      	bpl.n	801791c <__swbuf_r+0x84>
 80178bc:	6923      	ldr	r3, [r4, #16]
 80178be:	b36b      	cbz	r3, 801791c <__swbuf_r+0x84>
 80178c0:	6923      	ldr	r3, [r4, #16]
 80178c2:	6820      	ldr	r0, [r4, #0]
 80178c4:	1ac0      	subs	r0, r0, r3
 80178c6:	6963      	ldr	r3, [r4, #20]
 80178c8:	b2f6      	uxtb	r6, r6
 80178ca:	4283      	cmp	r3, r0
 80178cc:	4637      	mov	r7, r6
 80178ce:	dc04      	bgt.n	80178da <__swbuf_r+0x42>
 80178d0:	4621      	mov	r1, r4
 80178d2:	4628      	mov	r0, r5
 80178d4:	f000 f94a 	bl	8017b6c <_fflush_r>
 80178d8:	bb30      	cbnz	r0, 8017928 <__swbuf_r+0x90>
 80178da:	68a3      	ldr	r3, [r4, #8]
 80178dc:	3b01      	subs	r3, #1
 80178de:	60a3      	str	r3, [r4, #8]
 80178e0:	6823      	ldr	r3, [r4, #0]
 80178e2:	1c5a      	adds	r2, r3, #1
 80178e4:	6022      	str	r2, [r4, #0]
 80178e6:	701e      	strb	r6, [r3, #0]
 80178e8:	6963      	ldr	r3, [r4, #20]
 80178ea:	3001      	adds	r0, #1
 80178ec:	4283      	cmp	r3, r0
 80178ee:	d004      	beq.n	80178fa <__swbuf_r+0x62>
 80178f0:	89a3      	ldrh	r3, [r4, #12]
 80178f2:	07db      	lsls	r3, r3, #31
 80178f4:	d506      	bpl.n	8017904 <__swbuf_r+0x6c>
 80178f6:	2e0a      	cmp	r6, #10
 80178f8:	d104      	bne.n	8017904 <__swbuf_r+0x6c>
 80178fa:	4621      	mov	r1, r4
 80178fc:	4628      	mov	r0, r5
 80178fe:	f000 f935 	bl	8017b6c <_fflush_r>
 8017902:	b988      	cbnz	r0, 8017928 <__swbuf_r+0x90>
 8017904:	4638      	mov	r0, r7
 8017906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017908:	4b0a      	ldr	r3, [pc, #40]	; (8017934 <__swbuf_r+0x9c>)
 801790a:	429c      	cmp	r4, r3
 801790c:	d101      	bne.n	8017912 <__swbuf_r+0x7a>
 801790e:	68ac      	ldr	r4, [r5, #8]
 8017910:	e7cf      	b.n	80178b2 <__swbuf_r+0x1a>
 8017912:	4b09      	ldr	r3, [pc, #36]	; (8017938 <__swbuf_r+0xa0>)
 8017914:	429c      	cmp	r4, r3
 8017916:	bf08      	it	eq
 8017918:	68ec      	ldreq	r4, [r5, #12]
 801791a:	e7ca      	b.n	80178b2 <__swbuf_r+0x1a>
 801791c:	4621      	mov	r1, r4
 801791e:	4628      	mov	r0, r5
 8017920:	f000 f80c 	bl	801793c <__swsetup_r>
 8017924:	2800      	cmp	r0, #0
 8017926:	d0cb      	beq.n	80178c0 <__swbuf_r+0x28>
 8017928:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801792c:	e7ea      	b.n	8017904 <__swbuf_r+0x6c>
 801792e:	bf00      	nop
 8017930:	0801f088 	.word	0x0801f088
 8017934:	0801f0a8 	.word	0x0801f0a8
 8017938:	0801f068 	.word	0x0801f068

0801793c <__swsetup_r>:
 801793c:	4b32      	ldr	r3, [pc, #200]	; (8017a08 <__swsetup_r+0xcc>)
 801793e:	b570      	push	{r4, r5, r6, lr}
 8017940:	681d      	ldr	r5, [r3, #0]
 8017942:	4606      	mov	r6, r0
 8017944:	460c      	mov	r4, r1
 8017946:	b125      	cbz	r5, 8017952 <__swsetup_r+0x16>
 8017948:	69ab      	ldr	r3, [r5, #24]
 801794a:	b913      	cbnz	r3, 8017952 <__swsetup_r+0x16>
 801794c:	4628      	mov	r0, r5
 801794e:	f000 f9a1 	bl	8017c94 <__sinit>
 8017952:	4b2e      	ldr	r3, [pc, #184]	; (8017a0c <__swsetup_r+0xd0>)
 8017954:	429c      	cmp	r4, r3
 8017956:	d10f      	bne.n	8017978 <__swsetup_r+0x3c>
 8017958:	686c      	ldr	r4, [r5, #4]
 801795a:	89a3      	ldrh	r3, [r4, #12]
 801795c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017960:	0719      	lsls	r1, r3, #28
 8017962:	d42c      	bmi.n	80179be <__swsetup_r+0x82>
 8017964:	06dd      	lsls	r5, r3, #27
 8017966:	d411      	bmi.n	801798c <__swsetup_r+0x50>
 8017968:	2309      	movs	r3, #9
 801796a:	6033      	str	r3, [r6, #0]
 801796c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017970:	81a3      	strh	r3, [r4, #12]
 8017972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017976:	e03e      	b.n	80179f6 <__swsetup_r+0xba>
 8017978:	4b25      	ldr	r3, [pc, #148]	; (8017a10 <__swsetup_r+0xd4>)
 801797a:	429c      	cmp	r4, r3
 801797c:	d101      	bne.n	8017982 <__swsetup_r+0x46>
 801797e:	68ac      	ldr	r4, [r5, #8]
 8017980:	e7eb      	b.n	801795a <__swsetup_r+0x1e>
 8017982:	4b24      	ldr	r3, [pc, #144]	; (8017a14 <__swsetup_r+0xd8>)
 8017984:	429c      	cmp	r4, r3
 8017986:	bf08      	it	eq
 8017988:	68ec      	ldreq	r4, [r5, #12]
 801798a:	e7e6      	b.n	801795a <__swsetup_r+0x1e>
 801798c:	0758      	lsls	r0, r3, #29
 801798e:	d512      	bpl.n	80179b6 <__swsetup_r+0x7a>
 8017990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017992:	b141      	cbz	r1, 80179a6 <__swsetup_r+0x6a>
 8017994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017998:	4299      	cmp	r1, r3
 801799a:	d002      	beq.n	80179a2 <__swsetup_r+0x66>
 801799c:	4630      	mov	r0, r6
 801799e:	f000 fa97 	bl	8017ed0 <_free_r>
 80179a2:	2300      	movs	r3, #0
 80179a4:	6363      	str	r3, [r4, #52]	; 0x34
 80179a6:	89a3      	ldrh	r3, [r4, #12]
 80179a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80179ac:	81a3      	strh	r3, [r4, #12]
 80179ae:	2300      	movs	r3, #0
 80179b0:	6063      	str	r3, [r4, #4]
 80179b2:	6923      	ldr	r3, [r4, #16]
 80179b4:	6023      	str	r3, [r4, #0]
 80179b6:	89a3      	ldrh	r3, [r4, #12]
 80179b8:	f043 0308 	orr.w	r3, r3, #8
 80179bc:	81a3      	strh	r3, [r4, #12]
 80179be:	6923      	ldr	r3, [r4, #16]
 80179c0:	b94b      	cbnz	r3, 80179d6 <__swsetup_r+0x9a>
 80179c2:	89a3      	ldrh	r3, [r4, #12]
 80179c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80179c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179cc:	d003      	beq.n	80179d6 <__swsetup_r+0x9a>
 80179ce:	4621      	mov	r1, r4
 80179d0:	4630      	mov	r0, r6
 80179d2:	f000 fa35 	bl	8017e40 <__smakebuf_r>
 80179d6:	89a0      	ldrh	r0, [r4, #12]
 80179d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179dc:	f010 0301 	ands.w	r3, r0, #1
 80179e0:	d00a      	beq.n	80179f8 <__swsetup_r+0xbc>
 80179e2:	2300      	movs	r3, #0
 80179e4:	60a3      	str	r3, [r4, #8]
 80179e6:	6963      	ldr	r3, [r4, #20]
 80179e8:	425b      	negs	r3, r3
 80179ea:	61a3      	str	r3, [r4, #24]
 80179ec:	6923      	ldr	r3, [r4, #16]
 80179ee:	b943      	cbnz	r3, 8017a02 <__swsetup_r+0xc6>
 80179f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80179f4:	d1ba      	bne.n	801796c <__swsetup_r+0x30>
 80179f6:	bd70      	pop	{r4, r5, r6, pc}
 80179f8:	0781      	lsls	r1, r0, #30
 80179fa:	bf58      	it	pl
 80179fc:	6963      	ldrpl	r3, [r4, #20]
 80179fe:	60a3      	str	r3, [r4, #8]
 8017a00:	e7f4      	b.n	80179ec <__swsetup_r+0xb0>
 8017a02:	2000      	movs	r0, #0
 8017a04:	e7f7      	b.n	80179f6 <__swsetup_r+0xba>
 8017a06:	bf00      	nop
 8017a08:	200004b0 	.word	0x200004b0
 8017a0c:	0801f088 	.word	0x0801f088
 8017a10:	0801f0a8 	.word	0x0801f0a8
 8017a14:	0801f068 	.word	0x0801f068

08017a18 <__assert_func>:
 8017a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017a1a:	4614      	mov	r4, r2
 8017a1c:	461a      	mov	r2, r3
 8017a1e:	4b09      	ldr	r3, [pc, #36]	; (8017a44 <__assert_func+0x2c>)
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	4605      	mov	r5, r0
 8017a24:	68d8      	ldr	r0, [r3, #12]
 8017a26:	b14c      	cbz	r4, 8017a3c <__assert_func+0x24>
 8017a28:	4b07      	ldr	r3, [pc, #28]	; (8017a48 <__assert_func+0x30>)
 8017a2a:	9100      	str	r1, [sp, #0]
 8017a2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017a30:	4906      	ldr	r1, [pc, #24]	; (8017a4c <__assert_func+0x34>)
 8017a32:	462b      	mov	r3, r5
 8017a34:	f000 f9ac 	bl	8017d90 <fiprintf>
 8017a38:	f000 ffa4 	bl	8018984 <abort>
 8017a3c:	4b04      	ldr	r3, [pc, #16]	; (8017a50 <__assert_func+0x38>)
 8017a3e:	461c      	mov	r4, r3
 8017a40:	e7f3      	b.n	8017a2a <__assert_func+0x12>
 8017a42:	bf00      	nop
 8017a44:	200004b0 	.word	0x200004b0
 8017a48:	0801f02a 	.word	0x0801f02a
 8017a4c:	0801f037 	.word	0x0801f037
 8017a50:	0801f065 	.word	0x0801f065

08017a54 <__errno>:
 8017a54:	4b01      	ldr	r3, [pc, #4]	; (8017a5c <__errno+0x8>)
 8017a56:	6818      	ldr	r0, [r3, #0]
 8017a58:	4770      	bx	lr
 8017a5a:	bf00      	nop
 8017a5c:	200004b0 	.word	0x200004b0

08017a60 <__sflush_r>:
 8017a60:	898a      	ldrh	r2, [r1, #12]
 8017a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a66:	4605      	mov	r5, r0
 8017a68:	0710      	lsls	r0, r2, #28
 8017a6a:	460c      	mov	r4, r1
 8017a6c:	d458      	bmi.n	8017b20 <__sflush_r+0xc0>
 8017a6e:	684b      	ldr	r3, [r1, #4]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	dc05      	bgt.n	8017a80 <__sflush_r+0x20>
 8017a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	dc02      	bgt.n	8017a80 <__sflush_r+0x20>
 8017a7a:	2000      	movs	r0, #0
 8017a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a82:	2e00      	cmp	r6, #0
 8017a84:	d0f9      	beq.n	8017a7a <__sflush_r+0x1a>
 8017a86:	2300      	movs	r3, #0
 8017a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a8c:	682f      	ldr	r7, [r5, #0]
 8017a8e:	602b      	str	r3, [r5, #0]
 8017a90:	d032      	beq.n	8017af8 <__sflush_r+0x98>
 8017a92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a94:	89a3      	ldrh	r3, [r4, #12]
 8017a96:	075a      	lsls	r2, r3, #29
 8017a98:	d505      	bpl.n	8017aa6 <__sflush_r+0x46>
 8017a9a:	6863      	ldr	r3, [r4, #4]
 8017a9c:	1ac0      	subs	r0, r0, r3
 8017a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017aa0:	b10b      	cbz	r3, 8017aa6 <__sflush_r+0x46>
 8017aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017aa4:	1ac0      	subs	r0, r0, r3
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	4602      	mov	r2, r0
 8017aaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017aac:	6a21      	ldr	r1, [r4, #32]
 8017aae:	4628      	mov	r0, r5
 8017ab0:	47b0      	blx	r6
 8017ab2:	1c43      	adds	r3, r0, #1
 8017ab4:	89a3      	ldrh	r3, [r4, #12]
 8017ab6:	d106      	bne.n	8017ac6 <__sflush_r+0x66>
 8017ab8:	6829      	ldr	r1, [r5, #0]
 8017aba:	291d      	cmp	r1, #29
 8017abc:	d82c      	bhi.n	8017b18 <__sflush_r+0xb8>
 8017abe:	4a2a      	ldr	r2, [pc, #168]	; (8017b68 <__sflush_r+0x108>)
 8017ac0:	40ca      	lsrs	r2, r1
 8017ac2:	07d6      	lsls	r6, r2, #31
 8017ac4:	d528      	bpl.n	8017b18 <__sflush_r+0xb8>
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	6062      	str	r2, [r4, #4]
 8017aca:	04d9      	lsls	r1, r3, #19
 8017acc:	6922      	ldr	r2, [r4, #16]
 8017ace:	6022      	str	r2, [r4, #0]
 8017ad0:	d504      	bpl.n	8017adc <__sflush_r+0x7c>
 8017ad2:	1c42      	adds	r2, r0, #1
 8017ad4:	d101      	bne.n	8017ada <__sflush_r+0x7a>
 8017ad6:	682b      	ldr	r3, [r5, #0]
 8017ad8:	b903      	cbnz	r3, 8017adc <__sflush_r+0x7c>
 8017ada:	6560      	str	r0, [r4, #84]	; 0x54
 8017adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ade:	602f      	str	r7, [r5, #0]
 8017ae0:	2900      	cmp	r1, #0
 8017ae2:	d0ca      	beq.n	8017a7a <__sflush_r+0x1a>
 8017ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ae8:	4299      	cmp	r1, r3
 8017aea:	d002      	beq.n	8017af2 <__sflush_r+0x92>
 8017aec:	4628      	mov	r0, r5
 8017aee:	f000 f9ef 	bl	8017ed0 <_free_r>
 8017af2:	2000      	movs	r0, #0
 8017af4:	6360      	str	r0, [r4, #52]	; 0x34
 8017af6:	e7c1      	b.n	8017a7c <__sflush_r+0x1c>
 8017af8:	6a21      	ldr	r1, [r4, #32]
 8017afa:	2301      	movs	r3, #1
 8017afc:	4628      	mov	r0, r5
 8017afe:	47b0      	blx	r6
 8017b00:	1c41      	adds	r1, r0, #1
 8017b02:	d1c7      	bne.n	8017a94 <__sflush_r+0x34>
 8017b04:	682b      	ldr	r3, [r5, #0]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d0c4      	beq.n	8017a94 <__sflush_r+0x34>
 8017b0a:	2b1d      	cmp	r3, #29
 8017b0c:	d001      	beq.n	8017b12 <__sflush_r+0xb2>
 8017b0e:	2b16      	cmp	r3, #22
 8017b10:	d101      	bne.n	8017b16 <__sflush_r+0xb6>
 8017b12:	602f      	str	r7, [r5, #0]
 8017b14:	e7b1      	b.n	8017a7a <__sflush_r+0x1a>
 8017b16:	89a3      	ldrh	r3, [r4, #12]
 8017b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b1c:	81a3      	strh	r3, [r4, #12]
 8017b1e:	e7ad      	b.n	8017a7c <__sflush_r+0x1c>
 8017b20:	690f      	ldr	r7, [r1, #16]
 8017b22:	2f00      	cmp	r7, #0
 8017b24:	d0a9      	beq.n	8017a7a <__sflush_r+0x1a>
 8017b26:	0793      	lsls	r3, r2, #30
 8017b28:	680e      	ldr	r6, [r1, #0]
 8017b2a:	bf08      	it	eq
 8017b2c:	694b      	ldreq	r3, [r1, #20]
 8017b2e:	600f      	str	r7, [r1, #0]
 8017b30:	bf18      	it	ne
 8017b32:	2300      	movne	r3, #0
 8017b34:	eba6 0807 	sub.w	r8, r6, r7
 8017b38:	608b      	str	r3, [r1, #8]
 8017b3a:	f1b8 0f00 	cmp.w	r8, #0
 8017b3e:	dd9c      	ble.n	8017a7a <__sflush_r+0x1a>
 8017b40:	6a21      	ldr	r1, [r4, #32]
 8017b42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017b44:	4643      	mov	r3, r8
 8017b46:	463a      	mov	r2, r7
 8017b48:	4628      	mov	r0, r5
 8017b4a:	47b0      	blx	r6
 8017b4c:	2800      	cmp	r0, #0
 8017b4e:	dc06      	bgt.n	8017b5e <__sflush_r+0xfe>
 8017b50:	89a3      	ldrh	r3, [r4, #12]
 8017b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b56:	81a3      	strh	r3, [r4, #12]
 8017b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b5c:	e78e      	b.n	8017a7c <__sflush_r+0x1c>
 8017b5e:	4407      	add	r7, r0
 8017b60:	eba8 0800 	sub.w	r8, r8, r0
 8017b64:	e7e9      	b.n	8017b3a <__sflush_r+0xda>
 8017b66:	bf00      	nop
 8017b68:	20400001 	.word	0x20400001

08017b6c <_fflush_r>:
 8017b6c:	b538      	push	{r3, r4, r5, lr}
 8017b6e:	690b      	ldr	r3, [r1, #16]
 8017b70:	4605      	mov	r5, r0
 8017b72:	460c      	mov	r4, r1
 8017b74:	b913      	cbnz	r3, 8017b7c <_fflush_r+0x10>
 8017b76:	2500      	movs	r5, #0
 8017b78:	4628      	mov	r0, r5
 8017b7a:	bd38      	pop	{r3, r4, r5, pc}
 8017b7c:	b118      	cbz	r0, 8017b86 <_fflush_r+0x1a>
 8017b7e:	6983      	ldr	r3, [r0, #24]
 8017b80:	b90b      	cbnz	r3, 8017b86 <_fflush_r+0x1a>
 8017b82:	f000 f887 	bl	8017c94 <__sinit>
 8017b86:	4b14      	ldr	r3, [pc, #80]	; (8017bd8 <_fflush_r+0x6c>)
 8017b88:	429c      	cmp	r4, r3
 8017b8a:	d11b      	bne.n	8017bc4 <_fflush_r+0x58>
 8017b8c:	686c      	ldr	r4, [r5, #4]
 8017b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d0ef      	beq.n	8017b76 <_fflush_r+0xa>
 8017b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b98:	07d0      	lsls	r0, r2, #31
 8017b9a:	d404      	bmi.n	8017ba6 <_fflush_r+0x3a>
 8017b9c:	0599      	lsls	r1, r3, #22
 8017b9e:	d402      	bmi.n	8017ba6 <_fflush_r+0x3a>
 8017ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ba2:	f000 f927 	bl	8017df4 <__retarget_lock_acquire_recursive>
 8017ba6:	4628      	mov	r0, r5
 8017ba8:	4621      	mov	r1, r4
 8017baa:	f7ff ff59 	bl	8017a60 <__sflush_r>
 8017bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017bb0:	07da      	lsls	r2, r3, #31
 8017bb2:	4605      	mov	r5, r0
 8017bb4:	d4e0      	bmi.n	8017b78 <_fflush_r+0xc>
 8017bb6:	89a3      	ldrh	r3, [r4, #12]
 8017bb8:	059b      	lsls	r3, r3, #22
 8017bba:	d4dd      	bmi.n	8017b78 <_fflush_r+0xc>
 8017bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017bbe:	f000 f91a 	bl	8017df6 <__retarget_lock_release_recursive>
 8017bc2:	e7d9      	b.n	8017b78 <_fflush_r+0xc>
 8017bc4:	4b05      	ldr	r3, [pc, #20]	; (8017bdc <_fflush_r+0x70>)
 8017bc6:	429c      	cmp	r4, r3
 8017bc8:	d101      	bne.n	8017bce <_fflush_r+0x62>
 8017bca:	68ac      	ldr	r4, [r5, #8]
 8017bcc:	e7df      	b.n	8017b8e <_fflush_r+0x22>
 8017bce:	4b04      	ldr	r3, [pc, #16]	; (8017be0 <_fflush_r+0x74>)
 8017bd0:	429c      	cmp	r4, r3
 8017bd2:	bf08      	it	eq
 8017bd4:	68ec      	ldreq	r4, [r5, #12]
 8017bd6:	e7da      	b.n	8017b8e <_fflush_r+0x22>
 8017bd8:	0801f088 	.word	0x0801f088
 8017bdc:	0801f0a8 	.word	0x0801f0a8
 8017be0:	0801f068 	.word	0x0801f068

08017be4 <std>:
 8017be4:	2300      	movs	r3, #0
 8017be6:	b510      	push	{r4, lr}
 8017be8:	4604      	mov	r4, r0
 8017bea:	e9c0 3300 	strd	r3, r3, [r0]
 8017bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017bf2:	6083      	str	r3, [r0, #8]
 8017bf4:	8181      	strh	r1, [r0, #12]
 8017bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8017bf8:	81c2      	strh	r2, [r0, #14]
 8017bfa:	6183      	str	r3, [r0, #24]
 8017bfc:	4619      	mov	r1, r3
 8017bfe:	2208      	movs	r2, #8
 8017c00:	305c      	adds	r0, #92	; 0x5c
 8017c02:	f7ff fc05 	bl	8017410 <memset>
 8017c06:	4b05      	ldr	r3, [pc, #20]	; (8017c1c <std+0x38>)
 8017c08:	6263      	str	r3, [r4, #36]	; 0x24
 8017c0a:	4b05      	ldr	r3, [pc, #20]	; (8017c20 <std+0x3c>)
 8017c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017c0e:	4b05      	ldr	r3, [pc, #20]	; (8017c24 <std+0x40>)
 8017c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017c12:	4b05      	ldr	r3, [pc, #20]	; (8017c28 <std+0x44>)
 8017c14:	6224      	str	r4, [r4, #32]
 8017c16:	6323      	str	r3, [r4, #48]	; 0x30
 8017c18:	bd10      	pop	{r4, pc}
 8017c1a:	bf00      	nop
 8017c1c:	080188d9 	.word	0x080188d9
 8017c20:	080188fb 	.word	0x080188fb
 8017c24:	08018933 	.word	0x08018933
 8017c28:	08018957 	.word	0x08018957

08017c2c <_cleanup_r>:
 8017c2c:	4901      	ldr	r1, [pc, #4]	; (8017c34 <_cleanup_r+0x8>)
 8017c2e:	f000 b8c1 	b.w	8017db4 <_fwalk_reent>
 8017c32:	bf00      	nop
 8017c34:	08017b6d 	.word	0x08017b6d

08017c38 <__sfmoreglue>:
 8017c38:	b570      	push	{r4, r5, r6, lr}
 8017c3a:	1e4a      	subs	r2, r1, #1
 8017c3c:	2568      	movs	r5, #104	; 0x68
 8017c3e:	4355      	muls	r5, r2
 8017c40:	460e      	mov	r6, r1
 8017c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017c46:	f000 f993 	bl	8017f70 <_malloc_r>
 8017c4a:	4604      	mov	r4, r0
 8017c4c:	b140      	cbz	r0, 8017c60 <__sfmoreglue+0x28>
 8017c4e:	2100      	movs	r1, #0
 8017c50:	e9c0 1600 	strd	r1, r6, [r0]
 8017c54:	300c      	adds	r0, #12
 8017c56:	60a0      	str	r0, [r4, #8]
 8017c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017c5c:	f7ff fbd8 	bl	8017410 <memset>
 8017c60:	4620      	mov	r0, r4
 8017c62:	bd70      	pop	{r4, r5, r6, pc}

08017c64 <__sfp_lock_acquire>:
 8017c64:	4801      	ldr	r0, [pc, #4]	; (8017c6c <__sfp_lock_acquire+0x8>)
 8017c66:	f000 b8c5 	b.w	8017df4 <__retarget_lock_acquire_recursive>
 8017c6a:	bf00      	nop
 8017c6c:	20011858 	.word	0x20011858

08017c70 <__sfp_lock_release>:
 8017c70:	4801      	ldr	r0, [pc, #4]	; (8017c78 <__sfp_lock_release+0x8>)
 8017c72:	f000 b8c0 	b.w	8017df6 <__retarget_lock_release_recursive>
 8017c76:	bf00      	nop
 8017c78:	20011858 	.word	0x20011858

08017c7c <__sinit_lock_acquire>:
 8017c7c:	4801      	ldr	r0, [pc, #4]	; (8017c84 <__sinit_lock_acquire+0x8>)
 8017c7e:	f000 b8b9 	b.w	8017df4 <__retarget_lock_acquire_recursive>
 8017c82:	bf00      	nop
 8017c84:	20011853 	.word	0x20011853

08017c88 <__sinit_lock_release>:
 8017c88:	4801      	ldr	r0, [pc, #4]	; (8017c90 <__sinit_lock_release+0x8>)
 8017c8a:	f000 b8b4 	b.w	8017df6 <__retarget_lock_release_recursive>
 8017c8e:	bf00      	nop
 8017c90:	20011853 	.word	0x20011853

08017c94 <__sinit>:
 8017c94:	b510      	push	{r4, lr}
 8017c96:	4604      	mov	r4, r0
 8017c98:	f7ff fff0 	bl	8017c7c <__sinit_lock_acquire>
 8017c9c:	69a3      	ldr	r3, [r4, #24]
 8017c9e:	b11b      	cbz	r3, 8017ca8 <__sinit+0x14>
 8017ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ca4:	f7ff bff0 	b.w	8017c88 <__sinit_lock_release>
 8017ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017cac:	6523      	str	r3, [r4, #80]	; 0x50
 8017cae:	4b13      	ldr	r3, [pc, #76]	; (8017cfc <__sinit+0x68>)
 8017cb0:	4a13      	ldr	r2, [pc, #76]	; (8017d00 <__sinit+0x6c>)
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8017cb6:	42a3      	cmp	r3, r4
 8017cb8:	bf04      	itt	eq
 8017cba:	2301      	moveq	r3, #1
 8017cbc:	61a3      	streq	r3, [r4, #24]
 8017cbe:	4620      	mov	r0, r4
 8017cc0:	f000 f820 	bl	8017d04 <__sfp>
 8017cc4:	6060      	str	r0, [r4, #4]
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	f000 f81c 	bl	8017d04 <__sfp>
 8017ccc:	60a0      	str	r0, [r4, #8]
 8017cce:	4620      	mov	r0, r4
 8017cd0:	f000 f818 	bl	8017d04 <__sfp>
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	60e0      	str	r0, [r4, #12]
 8017cd8:	2104      	movs	r1, #4
 8017cda:	6860      	ldr	r0, [r4, #4]
 8017cdc:	f7ff ff82 	bl	8017be4 <std>
 8017ce0:	68a0      	ldr	r0, [r4, #8]
 8017ce2:	2201      	movs	r2, #1
 8017ce4:	2109      	movs	r1, #9
 8017ce6:	f7ff ff7d 	bl	8017be4 <std>
 8017cea:	68e0      	ldr	r0, [r4, #12]
 8017cec:	2202      	movs	r2, #2
 8017cee:	2112      	movs	r1, #18
 8017cf0:	f7ff ff78 	bl	8017be4 <std>
 8017cf4:	2301      	movs	r3, #1
 8017cf6:	61a3      	str	r3, [r4, #24]
 8017cf8:	e7d2      	b.n	8017ca0 <__sinit+0xc>
 8017cfa:	bf00      	nop
 8017cfc:	0801efb0 	.word	0x0801efb0
 8017d00:	08017c2d 	.word	0x08017c2d

08017d04 <__sfp>:
 8017d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d06:	4607      	mov	r7, r0
 8017d08:	f7ff ffac 	bl	8017c64 <__sfp_lock_acquire>
 8017d0c:	4b1e      	ldr	r3, [pc, #120]	; (8017d88 <__sfp+0x84>)
 8017d0e:	681e      	ldr	r6, [r3, #0]
 8017d10:	69b3      	ldr	r3, [r6, #24]
 8017d12:	b913      	cbnz	r3, 8017d1a <__sfp+0x16>
 8017d14:	4630      	mov	r0, r6
 8017d16:	f7ff ffbd 	bl	8017c94 <__sinit>
 8017d1a:	3648      	adds	r6, #72	; 0x48
 8017d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017d20:	3b01      	subs	r3, #1
 8017d22:	d503      	bpl.n	8017d2c <__sfp+0x28>
 8017d24:	6833      	ldr	r3, [r6, #0]
 8017d26:	b30b      	cbz	r3, 8017d6c <__sfp+0x68>
 8017d28:	6836      	ldr	r6, [r6, #0]
 8017d2a:	e7f7      	b.n	8017d1c <__sfp+0x18>
 8017d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017d30:	b9d5      	cbnz	r5, 8017d68 <__sfp+0x64>
 8017d32:	4b16      	ldr	r3, [pc, #88]	; (8017d8c <__sfp+0x88>)
 8017d34:	60e3      	str	r3, [r4, #12]
 8017d36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8017d3c:	f000 f859 	bl	8017df2 <__retarget_lock_init_recursive>
 8017d40:	f7ff ff96 	bl	8017c70 <__sfp_lock_release>
 8017d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017d4c:	6025      	str	r5, [r4, #0]
 8017d4e:	61a5      	str	r5, [r4, #24]
 8017d50:	2208      	movs	r2, #8
 8017d52:	4629      	mov	r1, r5
 8017d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017d58:	f7ff fb5a 	bl	8017410 <memset>
 8017d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017d64:	4620      	mov	r0, r4
 8017d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d68:	3468      	adds	r4, #104	; 0x68
 8017d6a:	e7d9      	b.n	8017d20 <__sfp+0x1c>
 8017d6c:	2104      	movs	r1, #4
 8017d6e:	4638      	mov	r0, r7
 8017d70:	f7ff ff62 	bl	8017c38 <__sfmoreglue>
 8017d74:	4604      	mov	r4, r0
 8017d76:	6030      	str	r0, [r6, #0]
 8017d78:	2800      	cmp	r0, #0
 8017d7a:	d1d5      	bne.n	8017d28 <__sfp+0x24>
 8017d7c:	f7ff ff78 	bl	8017c70 <__sfp_lock_release>
 8017d80:	230c      	movs	r3, #12
 8017d82:	603b      	str	r3, [r7, #0]
 8017d84:	e7ee      	b.n	8017d64 <__sfp+0x60>
 8017d86:	bf00      	nop
 8017d88:	0801efb0 	.word	0x0801efb0
 8017d8c:	ffff0001 	.word	0xffff0001

08017d90 <fiprintf>:
 8017d90:	b40e      	push	{r1, r2, r3}
 8017d92:	b503      	push	{r0, r1, lr}
 8017d94:	4601      	mov	r1, r0
 8017d96:	ab03      	add	r3, sp, #12
 8017d98:	4805      	ldr	r0, [pc, #20]	; (8017db0 <fiprintf+0x20>)
 8017d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d9e:	6800      	ldr	r0, [r0, #0]
 8017da0:	9301      	str	r3, [sp, #4]
 8017da2:	f000 fac5 	bl	8018330 <_vfiprintf_r>
 8017da6:	b002      	add	sp, #8
 8017da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017dac:	b003      	add	sp, #12
 8017dae:	4770      	bx	lr
 8017db0:	200004b0 	.word	0x200004b0

08017db4 <_fwalk_reent>:
 8017db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017db8:	4606      	mov	r6, r0
 8017dba:	4688      	mov	r8, r1
 8017dbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017dc0:	2700      	movs	r7, #0
 8017dc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017dc6:	f1b9 0901 	subs.w	r9, r9, #1
 8017dca:	d505      	bpl.n	8017dd8 <_fwalk_reent+0x24>
 8017dcc:	6824      	ldr	r4, [r4, #0]
 8017dce:	2c00      	cmp	r4, #0
 8017dd0:	d1f7      	bne.n	8017dc2 <_fwalk_reent+0xe>
 8017dd2:	4638      	mov	r0, r7
 8017dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dd8:	89ab      	ldrh	r3, [r5, #12]
 8017dda:	2b01      	cmp	r3, #1
 8017ddc:	d907      	bls.n	8017dee <_fwalk_reent+0x3a>
 8017dde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017de2:	3301      	adds	r3, #1
 8017de4:	d003      	beq.n	8017dee <_fwalk_reent+0x3a>
 8017de6:	4629      	mov	r1, r5
 8017de8:	4630      	mov	r0, r6
 8017dea:	47c0      	blx	r8
 8017dec:	4307      	orrs	r7, r0
 8017dee:	3568      	adds	r5, #104	; 0x68
 8017df0:	e7e9      	b.n	8017dc6 <_fwalk_reent+0x12>

08017df2 <__retarget_lock_init_recursive>:
 8017df2:	4770      	bx	lr

08017df4 <__retarget_lock_acquire_recursive>:
 8017df4:	4770      	bx	lr

08017df6 <__retarget_lock_release_recursive>:
 8017df6:	4770      	bx	lr

08017df8 <__swhatbuf_r>:
 8017df8:	b570      	push	{r4, r5, r6, lr}
 8017dfa:	460e      	mov	r6, r1
 8017dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e00:	2900      	cmp	r1, #0
 8017e02:	b096      	sub	sp, #88	; 0x58
 8017e04:	4614      	mov	r4, r2
 8017e06:	461d      	mov	r5, r3
 8017e08:	da07      	bge.n	8017e1a <__swhatbuf_r+0x22>
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	602b      	str	r3, [r5, #0]
 8017e0e:	89b3      	ldrh	r3, [r6, #12]
 8017e10:	061a      	lsls	r2, r3, #24
 8017e12:	d410      	bmi.n	8017e36 <__swhatbuf_r+0x3e>
 8017e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e18:	e00e      	b.n	8017e38 <__swhatbuf_r+0x40>
 8017e1a:	466a      	mov	r2, sp
 8017e1c:	f000 fdca 	bl	80189b4 <_fstat_r>
 8017e20:	2800      	cmp	r0, #0
 8017e22:	dbf2      	blt.n	8017e0a <__swhatbuf_r+0x12>
 8017e24:	9a01      	ldr	r2, [sp, #4]
 8017e26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017e2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017e2e:	425a      	negs	r2, r3
 8017e30:	415a      	adcs	r2, r3
 8017e32:	602a      	str	r2, [r5, #0]
 8017e34:	e7ee      	b.n	8017e14 <__swhatbuf_r+0x1c>
 8017e36:	2340      	movs	r3, #64	; 0x40
 8017e38:	2000      	movs	r0, #0
 8017e3a:	6023      	str	r3, [r4, #0]
 8017e3c:	b016      	add	sp, #88	; 0x58
 8017e3e:	bd70      	pop	{r4, r5, r6, pc}

08017e40 <__smakebuf_r>:
 8017e40:	898b      	ldrh	r3, [r1, #12]
 8017e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017e44:	079d      	lsls	r5, r3, #30
 8017e46:	4606      	mov	r6, r0
 8017e48:	460c      	mov	r4, r1
 8017e4a:	d507      	bpl.n	8017e5c <__smakebuf_r+0x1c>
 8017e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017e50:	6023      	str	r3, [r4, #0]
 8017e52:	6123      	str	r3, [r4, #16]
 8017e54:	2301      	movs	r3, #1
 8017e56:	6163      	str	r3, [r4, #20]
 8017e58:	b002      	add	sp, #8
 8017e5a:	bd70      	pop	{r4, r5, r6, pc}
 8017e5c:	ab01      	add	r3, sp, #4
 8017e5e:	466a      	mov	r2, sp
 8017e60:	f7ff ffca 	bl	8017df8 <__swhatbuf_r>
 8017e64:	9900      	ldr	r1, [sp, #0]
 8017e66:	4605      	mov	r5, r0
 8017e68:	4630      	mov	r0, r6
 8017e6a:	f000 f881 	bl	8017f70 <_malloc_r>
 8017e6e:	b948      	cbnz	r0, 8017e84 <__smakebuf_r+0x44>
 8017e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e74:	059a      	lsls	r2, r3, #22
 8017e76:	d4ef      	bmi.n	8017e58 <__smakebuf_r+0x18>
 8017e78:	f023 0303 	bic.w	r3, r3, #3
 8017e7c:	f043 0302 	orr.w	r3, r3, #2
 8017e80:	81a3      	strh	r3, [r4, #12]
 8017e82:	e7e3      	b.n	8017e4c <__smakebuf_r+0xc>
 8017e84:	4b0d      	ldr	r3, [pc, #52]	; (8017ebc <__smakebuf_r+0x7c>)
 8017e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8017e88:	89a3      	ldrh	r3, [r4, #12]
 8017e8a:	6020      	str	r0, [r4, #0]
 8017e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e90:	81a3      	strh	r3, [r4, #12]
 8017e92:	9b00      	ldr	r3, [sp, #0]
 8017e94:	6163      	str	r3, [r4, #20]
 8017e96:	9b01      	ldr	r3, [sp, #4]
 8017e98:	6120      	str	r0, [r4, #16]
 8017e9a:	b15b      	cbz	r3, 8017eb4 <__smakebuf_r+0x74>
 8017e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	f000 fd99 	bl	80189d8 <_isatty_r>
 8017ea6:	b128      	cbz	r0, 8017eb4 <__smakebuf_r+0x74>
 8017ea8:	89a3      	ldrh	r3, [r4, #12]
 8017eaa:	f023 0303 	bic.w	r3, r3, #3
 8017eae:	f043 0301 	orr.w	r3, r3, #1
 8017eb2:	81a3      	strh	r3, [r4, #12]
 8017eb4:	89a0      	ldrh	r0, [r4, #12]
 8017eb6:	4305      	orrs	r5, r0
 8017eb8:	81a5      	strh	r5, [r4, #12]
 8017eba:	e7cd      	b.n	8017e58 <__smakebuf_r+0x18>
 8017ebc:	08017c2d 	.word	0x08017c2d

08017ec0 <malloc>:
 8017ec0:	4b02      	ldr	r3, [pc, #8]	; (8017ecc <malloc+0xc>)
 8017ec2:	4601      	mov	r1, r0
 8017ec4:	6818      	ldr	r0, [r3, #0]
 8017ec6:	f000 b853 	b.w	8017f70 <_malloc_r>
 8017eca:	bf00      	nop
 8017ecc:	200004b0 	.word	0x200004b0

08017ed0 <_free_r>:
 8017ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ed2:	2900      	cmp	r1, #0
 8017ed4:	d048      	beq.n	8017f68 <_free_r+0x98>
 8017ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017eda:	9001      	str	r0, [sp, #4]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	f1a1 0404 	sub.w	r4, r1, #4
 8017ee2:	bfb8      	it	lt
 8017ee4:	18e4      	addlt	r4, r4, r3
 8017ee6:	f000 fd99 	bl	8018a1c <__malloc_lock>
 8017eea:	4a20      	ldr	r2, [pc, #128]	; (8017f6c <_free_r+0x9c>)
 8017eec:	9801      	ldr	r0, [sp, #4]
 8017eee:	6813      	ldr	r3, [r2, #0]
 8017ef0:	4615      	mov	r5, r2
 8017ef2:	b933      	cbnz	r3, 8017f02 <_free_r+0x32>
 8017ef4:	6063      	str	r3, [r4, #4]
 8017ef6:	6014      	str	r4, [r2, #0]
 8017ef8:	b003      	add	sp, #12
 8017efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017efe:	f000 bd93 	b.w	8018a28 <__malloc_unlock>
 8017f02:	42a3      	cmp	r3, r4
 8017f04:	d90b      	bls.n	8017f1e <_free_r+0x4e>
 8017f06:	6821      	ldr	r1, [r4, #0]
 8017f08:	1862      	adds	r2, r4, r1
 8017f0a:	4293      	cmp	r3, r2
 8017f0c:	bf04      	itt	eq
 8017f0e:	681a      	ldreq	r2, [r3, #0]
 8017f10:	685b      	ldreq	r3, [r3, #4]
 8017f12:	6063      	str	r3, [r4, #4]
 8017f14:	bf04      	itt	eq
 8017f16:	1852      	addeq	r2, r2, r1
 8017f18:	6022      	streq	r2, [r4, #0]
 8017f1a:	602c      	str	r4, [r5, #0]
 8017f1c:	e7ec      	b.n	8017ef8 <_free_r+0x28>
 8017f1e:	461a      	mov	r2, r3
 8017f20:	685b      	ldr	r3, [r3, #4]
 8017f22:	b10b      	cbz	r3, 8017f28 <_free_r+0x58>
 8017f24:	42a3      	cmp	r3, r4
 8017f26:	d9fa      	bls.n	8017f1e <_free_r+0x4e>
 8017f28:	6811      	ldr	r1, [r2, #0]
 8017f2a:	1855      	adds	r5, r2, r1
 8017f2c:	42a5      	cmp	r5, r4
 8017f2e:	d10b      	bne.n	8017f48 <_free_r+0x78>
 8017f30:	6824      	ldr	r4, [r4, #0]
 8017f32:	4421      	add	r1, r4
 8017f34:	1854      	adds	r4, r2, r1
 8017f36:	42a3      	cmp	r3, r4
 8017f38:	6011      	str	r1, [r2, #0]
 8017f3a:	d1dd      	bne.n	8017ef8 <_free_r+0x28>
 8017f3c:	681c      	ldr	r4, [r3, #0]
 8017f3e:	685b      	ldr	r3, [r3, #4]
 8017f40:	6053      	str	r3, [r2, #4]
 8017f42:	4421      	add	r1, r4
 8017f44:	6011      	str	r1, [r2, #0]
 8017f46:	e7d7      	b.n	8017ef8 <_free_r+0x28>
 8017f48:	d902      	bls.n	8017f50 <_free_r+0x80>
 8017f4a:	230c      	movs	r3, #12
 8017f4c:	6003      	str	r3, [r0, #0]
 8017f4e:	e7d3      	b.n	8017ef8 <_free_r+0x28>
 8017f50:	6825      	ldr	r5, [r4, #0]
 8017f52:	1961      	adds	r1, r4, r5
 8017f54:	428b      	cmp	r3, r1
 8017f56:	bf04      	itt	eq
 8017f58:	6819      	ldreq	r1, [r3, #0]
 8017f5a:	685b      	ldreq	r3, [r3, #4]
 8017f5c:	6063      	str	r3, [r4, #4]
 8017f5e:	bf04      	itt	eq
 8017f60:	1949      	addeq	r1, r1, r5
 8017f62:	6021      	streq	r1, [r4, #0]
 8017f64:	6054      	str	r4, [r2, #4]
 8017f66:	e7c7      	b.n	8017ef8 <_free_r+0x28>
 8017f68:	b003      	add	sp, #12
 8017f6a:	bd30      	pop	{r4, r5, pc}
 8017f6c:	20001b48 	.word	0x20001b48

08017f70 <_malloc_r>:
 8017f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f72:	1ccd      	adds	r5, r1, #3
 8017f74:	f025 0503 	bic.w	r5, r5, #3
 8017f78:	3508      	adds	r5, #8
 8017f7a:	2d0c      	cmp	r5, #12
 8017f7c:	bf38      	it	cc
 8017f7e:	250c      	movcc	r5, #12
 8017f80:	2d00      	cmp	r5, #0
 8017f82:	4606      	mov	r6, r0
 8017f84:	db01      	blt.n	8017f8a <_malloc_r+0x1a>
 8017f86:	42a9      	cmp	r1, r5
 8017f88:	d903      	bls.n	8017f92 <_malloc_r+0x22>
 8017f8a:	230c      	movs	r3, #12
 8017f8c:	6033      	str	r3, [r6, #0]
 8017f8e:	2000      	movs	r0, #0
 8017f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f92:	f000 fd43 	bl	8018a1c <__malloc_lock>
 8017f96:	4921      	ldr	r1, [pc, #132]	; (801801c <_malloc_r+0xac>)
 8017f98:	680a      	ldr	r2, [r1, #0]
 8017f9a:	4614      	mov	r4, r2
 8017f9c:	b99c      	cbnz	r4, 8017fc6 <_malloc_r+0x56>
 8017f9e:	4f20      	ldr	r7, [pc, #128]	; (8018020 <_malloc_r+0xb0>)
 8017fa0:	683b      	ldr	r3, [r7, #0]
 8017fa2:	b923      	cbnz	r3, 8017fae <_malloc_r+0x3e>
 8017fa4:	4621      	mov	r1, r4
 8017fa6:	4630      	mov	r0, r6
 8017fa8:	f000 fc86 	bl	80188b8 <_sbrk_r>
 8017fac:	6038      	str	r0, [r7, #0]
 8017fae:	4629      	mov	r1, r5
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	f000 fc81 	bl	80188b8 <_sbrk_r>
 8017fb6:	1c43      	adds	r3, r0, #1
 8017fb8:	d123      	bne.n	8018002 <_malloc_r+0x92>
 8017fba:	230c      	movs	r3, #12
 8017fbc:	6033      	str	r3, [r6, #0]
 8017fbe:	4630      	mov	r0, r6
 8017fc0:	f000 fd32 	bl	8018a28 <__malloc_unlock>
 8017fc4:	e7e3      	b.n	8017f8e <_malloc_r+0x1e>
 8017fc6:	6823      	ldr	r3, [r4, #0]
 8017fc8:	1b5b      	subs	r3, r3, r5
 8017fca:	d417      	bmi.n	8017ffc <_malloc_r+0x8c>
 8017fcc:	2b0b      	cmp	r3, #11
 8017fce:	d903      	bls.n	8017fd8 <_malloc_r+0x68>
 8017fd0:	6023      	str	r3, [r4, #0]
 8017fd2:	441c      	add	r4, r3
 8017fd4:	6025      	str	r5, [r4, #0]
 8017fd6:	e004      	b.n	8017fe2 <_malloc_r+0x72>
 8017fd8:	6863      	ldr	r3, [r4, #4]
 8017fda:	42a2      	cmp	r2, r4
 8017fdc:	bf0c      	ite	eq
 8017fde:	600b      	streq	r3, [r1, #0]
 8017fe0:	6053      	strne	r3, [r2, #4]
 8017fe2:	4630      	mov	r0, r6
 8017fe4:	f000 fd20 	bl	8018a28 <__malloc_unlock>
 8017fe8:	f104 000b 	add.w	r0, r4, #11
 8017fec:	1d23      	adds	r3, r4, #4
 8017fee:	f020 0007 	bic.w	r0, r0, #7
 8017ff2:	1ac2      	subs	r2, r0, r3
 8017ff4:	d0cc      	beq.n	8017f90 <_malloc_r+0x20>
 8017ff6:	1a1b      	subs	r3, r3, r0
 8017ff8:	50a3      	str	r3, [r4, r2]
 8017ffa:	e7c9      	b.n	8017f90 <_malloc_r+0x20>
 8017ffc:	4622      	mov	r2, r4
 8017ffe:	6864      	ldr	r4, [r4, #4]
 8018000:	e7cc      	b.n	8017f9c <_malloc_r+0x2c>
 8018002:	1cc4      	adds	r4, r0, #3
 8018004:	f024 0403 	bic.w	r4, r4, #3
 8018008:	42a0      	cmp	r0, r4
 801800a:	d0e3      	beq.n	8017fd4 <_malloc_r+0x64>
 801800c:	1a21      	subs	r1, r4, r0
 801800e:	4630      	mov	r0, r6
 8018010:	f000 fc52 	bl	80188b8 <_sbrk_r>
 8018014:	3001      	adds	r0, #1
 8018016:	d1dd      	bne.n	8017fd4 <_malloc_r+0x64>
 8018018:	e7cf      	b.n	8017fba <_malloc_r+0x4a>
 801801a:	bf00      	nop
 801801c:	20001b48 	.word	0x20001b48
 8018020:	20001b4c 	.word	0x20001b4c

08018024 <__ssputs_r>:
 8018024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018028:	688e      	ldr	r6, [r1, #8]
 801802a:	429e      	cmp	r6, r3
 801802c:	4682      	mov	sl, r0
 801802e:	460c      	mov	r4, r1
 8018030:	4690      	mov	r8, r2
 8018032:	461f      	mov	r7, r3
 8018034:	d838      	bhi.n	80180a8 <__ssputs_r+0x84>
 8018036:	898a      	ldrh	r2, [r1, #12]
 8018038:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801803c:	d032      	beq.n	80180a4 <__ssputs_r+0x80>
 801803e:	6825      	ldr	r5, [r4, #0]
 8018040:	6909      	ldr	r1, [r1, #16]
 8018042:	eba5 0901 	sub.w	r9, r5, r1
 8018046:	6965      	ldr	r5, [r4, #20]
 8018048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801804c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018050:	3301      	adds	r3, #1
 8018052:	444b      	add	r3, r9
 8018054:	106d      	asrs	r5, r5, #1
 8018056:	429d      	cmp	r5, r3
 8018058:	bf38      	it	cc
 801805a:	461d      	movcc	r5, r3
 801805c:	0553      	lsls	r3, r2, #21
 801805e:	d531      	bpl.n	80180c4 <__ssputs_r+0xa0>
 8018060:	4629      	mov	r1, r5
 8018062:	f7ff ff85 	bl	8017f70 <_malloc_r>
 8018066:	4606      	mov	r6, r0
 8018068:	b950      	cbnz	r0, 8018080 <__ssputs_r+0x5c>
 801806a:	230c      	movs	r3, #12
 801806c:	f8ca 3000 	str.w	r3, [sl]
 8018070:	89a3      	ldrh	r3, [r4, #12]
 8018072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018076:	81a3      	strh	r3, [r4, #12]
 8018078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018080:	6921      	ldr	r1, [r4, #16]
 8018082:	464a      	mov	r2, r9
 8018084:	f7ff f99c 	bl	80173c0 <memcpy>
 8018088:	89a3      	ldrh	r3, [r4, #12]
 801808a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801808e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018092:	81a3      	strh	r3, [r4, #12]
 8018094:	6126      	str	r6, [r4, #16]
 8018096:	6165      	str	r5, [r4, #20]
 8018098:	444e      	add	r6, r9
 801809a:	eba5 0509 	sub.w	r5, r5, r9
 801809e:	6026      	str	r6, [r4, #0]
 80180a0:	60a5      	str	r5, [r4, #8]
 80180a2:	463e      	mov	r6, r7
 80180a4:	42be      	cmp	r6, r7
 80180a6:	d900      	bls.n	80180aa <__ssputs_r+0x86>
 80180a8:	463e      	mov	r6, r7
 80180aa:	4632      	mov	r2, r6
 80180ac:	6820      	ldr	r0, [r4, #0]
 80180ae:	4641      	mov	r1, r8
 80180b0:	f7ff f994 	bl	80173dc <memmove>
 80180b4:	68a3      	ldr	r3, [r4, #8]
 80180b6:	6822      	ldr	r2, [r4, #0]
 80180b8:	1b9b      	subs	r3, r3, r6
 80180ba:	4432      	add	r2, r6
 80180bc:	60a3      	str	r3, [r4, #8]
 80180be:	6022      	str	r2, [r4, #0]
 80180c0:	2000      	movs	r0, #0
 80180c2:	e7db      	b.n	801807c <__ssputs_r+0x58>
 80180c4:	462a      	mov	r2, r5
 80180c6:	f000 fcb5 	bl	8018a34 <_realloc_r>
 80180ca:	4606      	mov	r6, r0
 80180cc:	2800      	cmp	r0, #0
 80180ce:	d1e1      	bne.n	8018094 <__ssputs_r+0x70>
 80180d0:	6921      	ldr	r1, [r4, #16]
 80180d2:	4650      	mov	r0, sl
 80180d4:	f7ff fefc 	bl	8017ed0 <_free_r>
 80180d8:	e7c7      	b.n	801806a <__ssputs_r+0x46>
	...

080180dc <_svfiprintf_r>:
 80180dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180e0:	4698      	mov	r8, r3
 80180e2:	898b      	ldrh	r3, [r1, #12]
 80180e4:	061b      	lsls	r3, r3, #24
 80180e6:	b09d      	sub	sp, #116	; 0x74
 80180e8:	4607      	mov	r7, r0
 80180ea:	460d      	mov	r5, r1
 80180ec:	4614      	mov	r4, r2
 80180ee:	d50e      	bpl.n	801810e <_svfiprintf_r+0x32>
 80180f0:	690b      	ldr	r3, [r1, #16]
 80180f2:	b963      	cbnz	r3, 801810e <_svfiprintf_r+0x32>
 80180f4:	2140      	movs	r1, #64	; 0x40
 80180f6:	f7ff ff3b 	bl	8017f70 <_malloc_r>
 80180fa:	6028      	str	r0, [r5, #0]
 80180fc:	6128      	str	r0, [r5, #16]
 80180fe:	b920      	cbnz	r0, 801810a <_svfiprintf_r+0x2e>
 8018100:	230c      	movs	r3, #12
 8018102:	603b      	str	r3, [r7, #0]
 8018104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018108:	e0d1      	b.n	80182ae <_svfiprintf_r+0x1d2>
 801810a:	2340      	movs	r3, #64	; 0x40
 801810c:	616b      	str	r3, [r5, #20]
 801810e:	2300      	movs	r3, #0
 8018110:	9309      	str	r3, [sp, #36]	; 0x24
 8018112:	2320      	movs	r3, #32
 8018114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018118:	f8cd 800c 	str.w	r8, [sp, #12]
 801811c:	2330      	movs	r3, #48	; 0x30
 801811e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80182c8 <_svfiprintf_r+0x1ec>
 8018122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018126:	f04f 0901 	mov.w	r9, #1
 801812a:	4623      	mov	r3, r4
 801812c:	469a      	mov	sl, r3
 801812e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018132:	b10a      	cbz	r2, 8018138 <_svfiprintf_r+0x5c>
 8018134:	2a25      	cmp	r2, #37	; 0x25
 8018136:	d1f9      	bne.n	801812c <_svfiprintf_r+0x50>
 8018138:	ebba 0b04 	subs.w	fp, sl, r4
 801813c:	d00b      	beq.n	8018156 <_svfiprintf_r+0x7a>
 801813e:	465b      	mov	r3, fp
 8018140:	4622      	mov	r2, r4
 8018142:	4629      	mov	r1, r5
 8018144:	4638      	mov	r0, r7
 8018146:	f7ff ff6d 	bl	8018024 <__ssputs_r>
 801814a:	3001      	adds	r0, #1
 801814c:	f000 80aa 	beq.w	80182a4 <_svfiprintf_r+0x1c8>
 8018150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018152:	445a      	add	r2, fp
 8018154:	9209      	str	r2, [sp, #36]	; 0x24
 8018156:	f89a 3000 	ldrb.w	r3, [sl]
 801815a:	2b00      	cmp	r3, #0
 801815c:	f000 80a2 	beq.w	80182a4 <_svfiprintf_r+0x1c8>
 8018160:	2300      	movs	r3, #0
 8018162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801816a:	f10a 0a01 	add.w	sl, sl, #1
 801816e:	9304      	str	r3, [sp, #16]
 8018170:	9307      	str	r3, [sp, #28]
 8018172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018176:	931a      	str	r3, [sp, #104]	; 0x68
 8018178:	4654      	mov	r4, sl
 801817a:	2205      	movs	r2, #5
 801817c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018180:	4851      	ldr	r0, [pc, #324]	; (80182c8 <_svfiprintf_r+0x1ec>)
 8018182:	f7e8 f83d 	bl	8000200 <memchr>
 8018186:	9a04      	ldr	r2, [sp, #16]
 8018188:	b9d8      	cbnz	r0, 80181c2 <_svfiprintf_r+0xe6>
 801818a:	06d0      	lsls	r0, r2, #27
 801818c:	bf44      	itt	mi
 801818e:	2320      	movmi	r3, #32
 8018190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018194:	0711      	lsls	r1, r2, #28
 8018196:	bf44      	itt	mi
 8018198:	232b      	movmi	r3, #43	; 0x2b
 801819a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801819e:	f89a 3000 	ldrb.w	r3, [sl]
 80181a2:	2b2a      	cmp	r3, #42	; 0x2a
 80181a4:	d015      	beq.n	80181d2 <_svfiprintf_r+0xf6>
 80181a6:	9a07      	ldr	r2, [sp, #28]
 80181a8:	4654      	mov	r4, sl
 80181aa:	2000      	movs	r0, #0
 80181ac:	f04f 0c0a 	mov.w	ip, #10
 80181b0:	4621      	mov	r1, r4
 80181b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80181b6:	3b30      	subs	r3, #48	; 0x30
 80181b8:	2b09      	cmp	r3, #9
 80181ba:	d94e      	bls.n	801825a <_svfiprintf_r+0x17e>
 80181bc:	b1b0      	cbz	r0, 80181ec <_svfiprintf_r+0x110>
 80181be:	9207      	str	r2, [sp, #28]
 80181c0:	e014      	b.n	80181ec <_svfiprintf_r+0x110>
 80181c2:	eba0 0308 	sub.w	r3, r0, r8
 80181c6:	fa09 f303 	lsl.w	r3, r9, r3
 80181ca:	4313      	orrs	r3, r2
 80181cc:	9304      	str	r3, [sp, #16]
 80181ce:	46a2      	mov	sl, r4
 80181d0:	e7d2      	b.n	8018178 <_svfiprintf_r+0x9c>
 80181d2:	9b03      	ldr	r3, [sp, #12]
 80181d4:	1d19      	adds	r1, r3, #4
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	9103      	str	r1, [sp, #12]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	bfbb      	ittet	lt
 80181de:	425b      	neglt	r3, r3
 80181e0:	f042 0202 	orrlt.w	r2, r2, #2
 80181e4:	9307      	strge	r3, [sp, #28]
 80181e6:	9307      	strlt	r3, [sp, #28]
 80181e8:	bfb8      	it	lt
 80181ea:	9204      	strlt	r2, [sp, #16]
 80181ec:	7823      	ldrb	r3, [r4, #0]
 80181ee:	2b2e      	cmp	r3, #46	; 0x2e
 80181f0:	d10c      	bne.n	801820c <_svfiprintf_r+0x130>
 80181f2:	7863      	ldrb	r3, [r4, #1]
 80181f4:	2b2a      	cmp	r3, #42	; 0x2a
 80181f6:	d135      	bne.n	8018264 <_svfiprintf_r+0x188>
 80181f8:	9b03      	ldr	r3, [sp, #12]
 80181fa:	1d1a      	adds	r2, r3, #4
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	9203      	str	r2, [sp, #12]
 8018200:	2b00      	cmp	r3, #0
 8018202:	bfb8      	it	lt
 8018204:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018208:	3402      	adds	r4, #2
 801820a:	9305      	str	r3, [sp, #20]
 801820c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80182d8 <_svfiprintf_r+0x1fc>
 8018210:	7821      	ldrb	r1, [r4, #0]
 8018212:	2203      	movs	r2, #3
 8018214:	4650      	mov	r0, sl
 8018216:	f7e7 fff3 	bl	8000200 <memchr>
 801821a:	b140      	cbz	r0, 801822e <_svfiprintf_r+0x152>
 801821c:	2340      	movs	r3, #64	; 0x40
 801821e:	eba0 000a 	sub.w	r0, r0, sl
 8018222:	fa03 f000 	lsl.w	r0, r3, r0
 8018226:	9b04      	ldr	r3, [sp, #16]
 8018228:	4303      	orrs	r3, r0
 801822a:	3401      	adds	r4, #1
 801822c:	9304      	str	r3, [sp, #16]
 801822e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018232:	4826      	ldr	r0, [pc, #152]	; (80182cc <_svfiprintf_r+0x1f0>)
 8018234:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018238:	2206      	movs	r2, #6
 801823a:	f7e7 ffe1 	bl	8000200 <memchr>
 801823e:	2800      	cmp	r0, #0
 8018240:	d038      	beq.n	80182b4 <_svfiprintf_r+0x1d8>
 8018242:	4b23      	ldr	r3, [pc, #140]	; (80182d0 <_svfiprintf_r+0x1f4>)
 8018244:	bb1b      	cbnz	r3, 801828e <_svfiprintf_r+0x1b2>
 8018246:	9b03      	ldr	r3, [sp, #12]
 8018248:	3307      	adds	r3, #7
 801824a:	f023 0307 	bic.w	r3, r3, #7
 801824e:	3308      	adds	r3, #8
 8018250:	9303      	str	r3, [sp, #12]
 8018252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018254:	4433      	add	r3, r6
 8018256:	9309      	str	r3, [sp, #36]	; 0x24
 8018258:	e767      	b.n	801812a <_svfiprintf_r+0x4e>
 801825a:	fb0c 3202 	mla	r2, ip, r2, r3
 801825e:	460c      	mov	r4, r1
 8018260:	2001      	movs	r0, #1
 8018262:	e7a5      	b.n	80181b0 <_svfiprintf_r+0xd4>
 8018264:	2300      	movs	r3, #0
 8018266:	3401      	adds	r4, #1
 8018268:	9305      	str	r3, [sp, #20]
 801826a:	4619      	mov	r1, r3
 801826c:	f04f 0c0a 	mov.w	ip, #10
 8018270:	4620      	mov	r0, r4
 8018272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018276:	3a30      	subs	r2, #48	; 0x30
 8018278:	2a09      	cmp	r2, #9
 801827a:	d903      	bls.n	8018284 <_svfiprintf_r+0x1a8>
 801827c:	2b00      	cmp	r3, #0
 801827e:	d0c5      	beq.n	801820c <_svfiprintf_r+0x130>
 8018280:	9105      	str	r1, [sp, #20]
 8018282:	e7c3      	b.n	801820c <_svfiprintf_r+0x130>
 8018284:	fb0c 2101 	mla	r1, ip, r1, r2
 8018288:	4604      	mov	r4, r0
 801828a:	2301      	movs	r3, #1
 801828c:	e7f0      	b.n	8018270 <_svfiprintf_r+0x194>
 801828e:	ab03      	add	r3, sp, #12
 8018290:	9300      	str	r3, [sp, #0]
 8018292:	462a      	mov	r2, r5
 8018294:	4b0f      	ldr	r3, [pc, #60]	; (80182d4 <_svfiprintf_r+0x1f8>)
 8018296:	a904      	add	r1, sp, #16
 8018298:	4638      	mov	r0, r7
 801829a:	f3af 8000 	nop.w
 801829e:	1c42      	adds	r2, r0, #1
 80182a0:	4606      	mov	r6, r0
 80182a2:	d1d6      	bne.n	8018252 <_svfiprintf_r+0x176>
 80182a4:	89ab      	ldrh	r3, [r5, #12]
 80182a6:	065b      	lsls	r3, r3, #25
 80182a8:	f53f af2c 	bmi.w	8018104 <_svfiprintf_r+0x28>
 80182ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80182ae:	b01d      	add	sp, #116	; 0x74
 80182b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182b4:	ab03      	add	r3, sp, #12
 80182b6:	9300      	str	r3, [sp, #0]
 80182b8:	462a      	mov	r2, r5
 80182ba:	4b06      	ldr	r3, [pc, #24]	; (80182d4 <_svfiprintf_r+0x1f8>)
 80182bc:	a904      	add	r1, sp, #16
 80182be:	4638      	mov	r0, r7
 80182c0:	f000 f9d4 	bl	801866c <_printf_i>
 80182c4:	e7eb      	b.n	801829e <_svfiprintf_r+0x1c2>
 80182c6:	bf00      	nop
 80182c8:	0801f0c8 	.word	0x0801f0c8
 80182cc:	0801f0d2 	.word	0x0801f0d2
 80182d0:	00000000 	.word	0x00000000
 80182d4:	08018025 	.word	0x08018025
 80182d8:	0801f0ce 	.word	0x0801f0ce

080182dc <__sfputc_r>:
 80182dc:	6893      	ldr	r3, [r2, #8]
 80182de:	3b01      	subs	r3, #1
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	b410      	push	{r4}
 80182e4:	6093      	str	r3, [r2, #8]
 80182e6:	da08      	bge.n	80182fa <__sfputc_r+0x1e>
 80182e8:	6994      	ldr	r4, [r2, #24]
 80182ea:	42a3      	cmp	r3, r4
 80182ec:	db01      	blt.n	80182f2 <__sfputc_r+0x16>
 80182ee:	290a      	cmp	r1, #10
 80182f0:	d103      	bne.n	80182fa <__sfputc_r+0x1e>
 80182f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80182f6:	f7ff bacf 	b.w	8017898 <__swbuf_r>
 80182fa:	6813      	ldr	r3, [r2, #0]
 80182fc:	1c58      	adds	r0, r3, #1
 80182fe:	6010      	str	r0, [r2, #0]
 8018300:	7019      	strb	r1, [r3, #0]
 8018302:	4608      	mov	r0, r1
 8018304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018308:	4770      	bx	lr

0801830a <__sfputs_r>:
 801830a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801830c:	4606      	mov	r6, r0
 801830e:	460f      	mov	r7, r1
 8018310:	4614      	mov	r4, r2
 8018312:	18d5      	adds	r5, r2, r3
 8018314:	42ac      	cmp	r4, r5
 8018316:	d101      	bne.n	801831c <__sfputs_r+0x12>
 8018318:	2000      	movs	r0, #0
 801831a:	e007      	b.n	801832c <__sfputs_r+0x22>
 801831c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018320:	463a      	mov	r2, r7
 8018322:	4630      	mov	r0, r6
 8018324:	f7ff ffda 	bl	80182dc <__sfputc_r>
 8018328:	1c43      	adds	r3, r0, #1
 801832a:	d1f3      	bne.n	8018314 <__sfputs_r+0xa>
 801832c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018330 <_vfiprintf_r>:
 8018330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018334:	460d      	mov	r5, r1
 8018336:	b09d      	sub	sp, #116	; 0x74
 8018338:	4614      	mov	r4, r2
 801833a:	4698      	mov	r8, r3
 801833c:	4606      	mov	r6, r0
 801833e:	b118      	cbz	r0, 8018348 <_vfiprintf_r+0x18>
 8018340:	6983      	ldr	r3, [r0, #24]
 8018342:	b90b      	cbnz	r3, 8018348 <_vfiprintf_r+0x18>
 8018344:	f7ff fca6 	bl	8017c94 <__sinit>
 8018348:	4b89      	ldr	r3, [pc, #548]	; (8018570 <_vfiprintf_r+0x240>)
 801834a:	429d      	cmp	r5, r3
 801834c:	d11b      	bne.n	8018386 <_vfiprintf_r+0x56>
 801834e:	6875      	ldr	r5, [r6, #4]
 8018350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018352:	07d9      	lsls	r1, r3, #31
 8018354:	d405      	bmi.n	8018362 <_vfiprintf_r+0x32>
 8018356:	89ab      	ldrh	r3, [r5, #12]
 8018358:	059a      	lsls	r2, r3, #22
 801835a:	d402      	bmi.n	8018362 <_vfiprintf_r+0x32>
 801835c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801835e:	f7ff fd49 	bl	8017df4 <__retarget_lock_acquire_recursive>
 8018362:	89ab      	ldrh	r3, [r5, #12]
 8018364:	071b      	lsls	r3, r3, #28
 8018366:	d501      	bpl.n	801836c <_vfiprintf_r+0x3c>
 8018368:	692b      	ldr	r3, [r5, #16]
 801836a:	b9eb      	cbnz	r3, 80183a8 <_vfiprintf_r+0x78>
 801836c:	4629      	mov	r1, r5
 801836e:	4630      	mov	r0, r6
 8018370:	f7ff fae4 	bl	801793c <__swsetup_r>
 8018374:	b1c0      	cbz	r0, 80183a8 <_vfiprintf_r+0x78>
 8018376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018378:	07dc      	lsls	r4, r3, #31
 801837a:	d50e      	bpl.n	801839a <_vfiprintf_r+0x6a>
 801837c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018380:	b01d      	add	sp, #116	; 0x74
 8018382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018386:	4b7b      	ldr	r3, [pc, #492]	; (8018574 <_vfiprintf_r+0x244>)
 8018388:	429d      	cmp	r5, r3
 801838a:	d101      	bne.n	8018390 <_vfiprintf_r+0x60>
 801838c:	68b5      	ldr	r5, [r6, #8]
 801838e:	e7df      	b.n	8018350 <_vfiprintf_r+0x20>
 8018390:	4b79      	ldr	r3, [pc, #484]	; (8018578 <_vfiprintf_r+0x248>)
 8018392:	429d      	cmp	r5, r3
 8018394:	bf08      	it	eq
 8018396:	68f5      	ldreq	r5, [r6, #12]
 8018398:	e7da      	b.n	8018350 <_vfiprintf_r+0x20>
 801839a:	89ab      	ldrh	r3, [r5, #12]
 801839c:	0598      	lsls	r0, r3, #22
 801839e:	d4ed      	bmi.n	801837c <_vfiprintf_r+0x4c>
 80183a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80183a2:	f7ff fd28 	bl	8017df6 <__retarget_lock_release_recursive>
 80183a6:	e7e9      	b.n	801837c <_vfiprintf_r+0x4c>
 80183a8:	2300      	movs	r3, #0
 80183aa:	9309      	str	r3, [sp, #36]	; 0x24
 80183ac:	2320      	movs	r3, #32
 80183ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80183b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80183b6:	2330      	movs	r3, #48	; 0x30
 80183b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801857c <_vfiprintf_r+0x24c>
 80183bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80183c0:	f04f 0901 	mov.w	r9, #1
 80183c4:	4623      	mov	r3, r4
 80183c6:	469a      	mov	sl, r3
 80183c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80183cc:	b10a      	cbz	r2, 80183d2 <_vfiprintf_r+0xa2>
 80183ce:	2a25      	cmp	r2, #37	; 0x25
 80183d0:	d1f9      	bne.n	80183c6 <_vfiprintf_r+0x96>
 80183d2:	ebba 0b04 	subs.w	fp, sl, r4
 80183d6:	d00b      	beq.n	80183f0 <_vfiprintf_r+0xc0>
 80183d8:	465b      	mov	r3, fp
 80183da:	4622      	mov	r2, r4
 80183dc:	4629      	mov	r1, r5
 80183de:	4630      	mov	r0, r6
 80183e0:	f7ff ff93 	bl	801830a <__sfputs_r>
 80183e4:	3001      	adds	r0, #1
 80183e6:	f000 80aa 	beq.w	801853e <_vfiprintf_r+0x20e>
 80183ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183ec:	445a      	add	r2, fp
 80183ee:	9209      	str	r2, [sp, #36]	; 0x24
 80183f0:	f89a 3000 	ldrb.w	r3, [sl]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	f000 80a2 	beq.w	801853e <_vfiprintf_r+0x20e>
 80183fa:	2300      	movs	r3, #0
 80183fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018404:	f10a 0a01 	add.w	sl, sl, #1
 8018408:	9304      	str	r3, [sp, #16]
 801840a:	9307      	str	r3, [sp, #28]
 801840c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018410:	931a      	str	r3, [sp, #104]	; 0x68
 8018412:	4654      	mov	r4, sl
 8018414:	2205      	movs	r2, #5
 8018416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801841a:	4858      	ldr	r0, [pc, #352]	; (801857c <_vfiprintf_r+0x24c>)
 801841c:	f7e7 fef0 	bl	8000200 <memchr>
 8018420:	9a04      	ldr	r2, [sp, #16]
 8018422:	b9d8      	cbnz	r0, 801845c <_vfiprintf_r+0x12c>
 8018424:	06d1      	lsls	r1, r2, #27
 8018426:	bf44      	itt	mi
 8018428:	2320      	movmi	r3, #32
 801842a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801842e:	0713      	lsls	r3, r2, #28
 8018430:	bf44      	itt	mi
 8018432:	232b      	movmi	r3, #43	; 0x2b
 8018434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018438:	f89a 3000 	ldrb.w	r3, [sl]
 801843c:	2b2a      	cmp	r3, #42	; 0x2a
 801843e:	d015      	beq.n	801846c <_vfiprintf_r+0x13c>
 8018440:	9a07      	ldr	r2, [sp, #28]
 8018442:	4654      	mov	r4, sl
 8018444:	2000      	movs	r0, #0
 8018446:	f04f 0c0a 	mov.w	ip, #10
 801844a:	4621      	mov	r1, r4
 801844c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018450:	3b30      	subs	r3, #48	; 0x30
 8018452:	2b09      	cmp	r3, #9
 8018454:	d94e      	bls.n	80184f4 <_vfiprintf_r+0x1c4>
 8018456:	b1b0      	cbz	r0, 8018486 <_vfiprintf_r+0x156>
 8018458:	9207      	str	r2, [sp, #28]
 801845a:	e014      	b.n	8018486 <_vfiprintf_r+0x156>
 801845c:	eba0 0308 	sub.w	r3, r0, r8
 8018460:	fa09 f303 	lsl.w	r3, r9, r3
 8018464:	4313      	orrs	r3, r2
 8018466:	9304      	str	r3, [sp, #16]
 8018468:	46a2      	mov	sl, r4
 801846a:	e7d2      	b.n	8018412 <_vfiprintf_r+0xe2>
 801846c:	9b03      	ldr	r3, [sp, #12]
 801846e:	1d19      	adds	r1, r3, #4
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	9103      	str	r1, [sp, #12]
 8018474:	2b00      	cmp	r3, #0
 8018476:	bfbb      	ittet	lt
 8018478:	425b      	neglt	r3, r3
 801847a:	f042 0202 	orrlt.w	r2, r2, #2
 801847e:	9307      	strge	r3, [sp, #28]
 8018480:	9307      	strlt	r3, [sp, #28]
 8018482:	bfb8      	it	lt
 8018484:	9204      	strlt	r2, [sp, #16]
 8018486:	7823      	ldrb	r3, [r4, #0]
 8018488:	2b2e      	cmp	r3, #46	; 0x2e
 801848a:	d10c      	bne.n	80184a6 <_vfiprintf_r+0x176>
 801848c:	7863      	ldrb	r3, [r4, #1]
 801848e:	2b2a      	cmp	r3, #42	; 0x2a
 8018490:	d135      	bne.n	80184fe <_vfiprintf_r+0x1ce>
 8018492:	9b03      	ldr	r3, [sp, #12]
 8018494:	1d1a      	adds	r2, r3, #4
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	9203      	str	r2, [sp, #12]
 801849a:	2b00      	cmp	r3, #0
 801849c:	bfb8      	it	lt
 801849e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80184a2:	3402      	adds	r4, #2
 80184a4:	9305      	str	r3, [sp, #20]
 80184a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801858c <_vfiprintf_r+0x25c>
 80184aa:	7821      	ldrb	r1, [r4, #0]
 80184ac:	2203      	movs	r2, #3
 80184ae:	4650      	mov	r0, sl
 80184b0:	f7e7 fea6 	bl	8000200 <memchr>
 80184b4:	b140      	cbz	r0, 80184c8 <_vfiprintf_r+0x198>
 80184b6:	2340      	movs	r3, #64	; 0x40
 80184b8:	eba0 000a 	sub.w	r0, r0, sl
 80184bc:	fa03 f000 	lsl.w	r0, r3, r0
 80184c0:	9b04      	ldr	r3, [sp, #16]
 80184c2:	4303      	orrs	r3, r0
 80184c4:	3401      	adds	r4, #1
 80184c6:	9304      	str	r3, [sp, #16]
 80184c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184cc:	482c      	ldr	r0, [pc, #176]	; (8018580 <_vfiprintf_r+0x250>)
 80184ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80184d2:	2206      	movs	r2, #6
 80184d4:	f7e7 fe94 	bl	8000200 <memchr>
 80184d8:	2800      	cmp	r0, #0
 80184da:	d03f      	beq.n	801855c <_vfiprintf_r+0x22c>
 80184dc:	4b29      	ldr	r3, [pc, #164]	; (8018584 <_vfiprintf_r+0x254>)
 80184de:	bb1b      	cbnz	r3, 8018528 <_vfiprintf_r+0x1f8>
 80184e0:	9b03      	ldr	r3, [sp, #12]
 80184e2:	3307      	adds	r3, #7
 80184e4:	f023 0307 	bic.w	r3, r3, #7
 80184e8:	3308      	adds	r3, #8
 80184ea:	9303      	str	r3, [sp, #12]
 80184ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184ee:	443b      	add	r3, r7
 80184f0:	9309      	str	r3, [sp, #36]	; 0x24
 80184f2:	e767      	b.n	80183c4 <_vfiprintf_r+0x94>
 80184f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80184f8:	460c      	mov	r4, r1
 80184fa:	2001      	movs	r0, #1
 80184fc:	e7a5      	b.n	801844a <_vfiprintf_r+0x11a>
 80184fe:	2300      	movs	r3, #0
 8018500:	3401      	adds	r4, #1
 8018502:	9305      	str	r3, [sp, #20]
 8018504:	4619      	mov	r1, r3
 8018506:	f04f 0c0a 	mov.w	ip, #10
 801850a:	4620      	mov	r0, r4
 801850c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018510:	3a30      	subs	r2, #48	; 0x30
 8018512:	2a09      	cmp	r2, #9
 8018514:	d903      	bls.n	801851e <_vfiprintf_r+0x1ee>
 8018516:	2b00      	cmp	r3, #0
 8018518:	d0c5      	beq.n	80184a6 <_vfiprintf_r+0x176>
 801851a:	9105      	str	r1, [sp, #20]
 801851c:	e7c3      	b.n	80184a6 <_vfiprintf_r+0x176>
 801851e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018522:	4604      	mov	r4, r0
 8018524:	2301      	movs	r3, #1
 8018526:	e7f0      	b.n	801850a <_vfiprintf_r+0x1da>
 8018528:	ab03      	add	r3, sp, #12
 801852a:	9300      	str	r3, [sp, #0]
 801852c:	462a      	mov	r2, r5
 801852e:	4b16      	ldr	r3, [pc, #88]	; (8018588 <_vfiprintf_r+0x258>)
 8018530:	a904      	add	r1, sp, #16
 8018532:	4630      	mov	r0, r6
 8018534:	f3af 8000 	nop.w
 8018538:	4607      	mov	r7, r0
 801853a:	1c78      	adds	r0, r7, #1
 801853c:	d1d6      	bne.n	80184ec <_vfiprintf_r+0x1bc>
 801853e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018540:	07d9      	lsls	r1, r3, #31
 8018542:	d405      	bmi.n	8018550 <_vfiprintf_r+0x220>
 8018544:	89ab      	ldrh	r3, [r5, #12]
 8018546:	059a      	lsls	r2, r3, #22
 8018548:	d402      	bmi.n	8018550 <_vfiprintf_r+0x220>
 801854a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801854c:	f7ff fc53 	bl	8017df6 <__retarget_lock_release_recursive>
 8018550:	89ab      	ldrh	r3, [r5, #12]
 8018552:	065b      	lsls	r3, r3, #25
 8018554:	f53f af12 	bmi.w	801837c <_vfiprintf_r+0x4c>
 8018558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801855a:	e711      	b.n	8018380 <_vfiprintf_r+0x50>
 801855c:	ab03      	add	r3, sp, #12
 801855e:	9300      	str	r3, [sp, #0]
 8018560:	462a      	mov	r2, r5
 8018562:	4b09      	ldr	r3, [pc, #36]	; (8018588 <_vfiprintf_r+0x258>)
 8018564:	a904      	add	r1, sp, #16
 8018566:	4630      	mov	r0, r6
 8018568:	f000 f880 	bl	801866c <_printf_i>
 801856c:	e7e4      	b.n	8018538 <_vfiprintf_r+0x208>
 801856e:	bf00      	nop
 8018570:	0801f088 	.word	0x0801f088
 8018574:	0801f0a8 	.word	0x0801f0a8
 8018578:	0801f068 	.word	0x0801f068
 801857c:	0801f0c8 	.word	0x0801f0c8
 8018580:	0801f0d2 	.word	0x0801f0d2
 8018584:	00000000 	.word	0x00000000
 8018588:	0801830b 	.word	0x0801830b
 801858c:	0801f0ce 	.word	0x0801f0ce

08018590 <_printf_common>:
 8018590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018594:	4616      	mov	r6, r2
 8018596:	4699      	mov	r9, r3
 8018598:	688a      	ldr	r2, [r1, #8]
 801859a:	690b      	ldr	r3, [r1, #16]
 801859c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80185a0:	4293      	cmp	r3, r2
 80185a2:	bfb8      	it	lt
 80185a4:	4613      	movlt	r3, r2
 80185a6:	6033      	str	r3, [r6, #0]
 80185a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80185ac:	4607      	mov	r7, r0
 80185ae:	460c      	mov	r4, r1
 80185b0:	b10a      	cbz	r2, 80185b6 <_printf_common+0x26>
 80185b2:	3301      	adds	r3, #1
 80185b4:	6033      	str	r3, [r6, #0]
 80185b6:	6823      	ldr	r3, [r4, #0]
 80185b8:	0699      	lsls	r1, r3, #26
 80185ba:	bf42      	ittt	mi
 80185bc:	6833      	ldrmi	r3, [r6, #0]
 80185be:	3302      	addmi	r3, #2
 80185c0:	6033      	strmi	r3, [r6, #0]
 80185c2:	6825      	ldr	r5, [r4, #0]
 80185c4:	f015 0506 	ands.w	r5, r5, #6
 80185c8:	d106      	bne.n	80185d8 <_printf_common+0x48>
 80185ca:	f104 0a19 	add.w	sl, r4, #25
 80185ce:	68e3      	ldr	r3, [r4, #12]
 80185d0:	6832      	ldr	r2, [r6, #0]
 80185d2:	1a9b      	subs	r3, r3, r2
 80185d4:	42ab      	cmp	r3, r5
 80185d6:	dc26      	bgt.n	8018626 <_printf_common+0x96>
 80185d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80185dc:	1e13      	subs	r3, r2, #0
 80185de:	6822      	ldr	r2, [r4, #0]
 80185e0:	bf18      	it	ne
 80185e2:	2301      	movne	r3, #1
 80185e4:	0692      	lsls	r2, r2, #26
 80185e6:	d42b      	bmi.n	8018640 <_printf_common+0xb0>
 80185e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80185ec:	4649      	mov	r1, r9
 80185ee:	4638      	mov	r0, r7
 80185f0:	47c0      	blx	r8
 80185f2:	3001      	adds	r0, #1
 80185f4:	d01e      	beq.n	8018634 <_printf_common+0xa4>
 80185f6:	6823      	ldr	r3, [r4, #0]
 80185f8:	68e5      	ldr	r5, [r4, #12]
 80185fa:	6832      	ldr	r2, [r6, #0]
 80185fc:	f003 0306 	and.w	r3, r3, #6
 8018600:	2b04      	cmp	r3, #4
 8018602:	bf08      	it	eq
 8018604:	1aad      	subeq	r5, r5, r2
 8018606:	68a3      	ldr	r3, [r4, #8]
 8018608:	6922      	ldr	r2, [r4, #16]
 801860a:	bf0c      	ite	eq
 801860c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018610:	2500      	movne	r5, #0
 8018612:	4293      	cmp	r3, r2
 8018614:	bfc4      	itt	gt
 8018616:	1a9b      	subgt	r3, r3, r2
 8018618:	18ed      	addgt	r5, r5, r3
 801861a:	2600      	movs	r6, #0
 801861c:	341a      	adds	r4, #26
 801861e:	42b5      	cmp	r5, r6
 8018620:	d11a      	bne.n	8018658 <_printf_common+0xc8>
 8018622:	2000      	movs	r0, #0
 8018624:	e008      	b.n	8018638 <_printf_common+0xa8>
 8018626:	2301      	movs	r3, #1
 8018628:	4652      	mov	r2, sl
 801862a:	4649      	mov	r1, r9
 801862c:	4638      	mov	r0, r7
 801862e:	47c0      	blx	r8
 8018630:	3001      	adds	r0, #1
 8018632:	d103      	bne.n	801863c <_printf_common+0xac>
 8018634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801863c:	3501      	adds	r5, #1
 801863e:	e7c6      	b.n	80185ce <_printf_common+0x3e>
 8018640:	18e1      	adds	r1, r4, r3
 8018642:	1c5a      	adds	r2, r3, #1
 8018644:	2030      	movs	r0, #48	; 0x30
 8018646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801864a:	4422      	add	r2, r4
 801864c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018654:	3302      	adds	r3, #2
 8018656:	e7c7      	b.n	80185e8 <_printf_common+0x58>
 8018658:	2301      	movs	r3, #1
 801865a:	4622      	mov	r2, r4
 801865c:	4649      	mov	r1, r9
 801865e:	4638      	mov	r0, r7
 8018660:	47c0      	blx	r8
 8018662:	3001      	adds	r0, #1
 8018664:	d0e6      	beq.n	8018634 <_printf_common+0xa4>
 8018666:	3601      	adds	r6, #1
 8018668:	e7d9      	b.n	801861e <_printf_common+0x8e>
	...

0801866c <_printf_i>:
 801866c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018670:	460c      	mov	r4, r1
 8018672:	4691      	mov	r9, r2
 8018674:	7e27      	ldrb	r7, [r4, #24]
 8018676:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018678:	2f78      	cmp	r7, #120	; 0x78
 801867a:	4680      	mov	r8, r0
 801867c:	469a      	mov	sl, r3
 801867e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018682:	d807      	bhi.n	8018694 <_printf_i+0x28>
 8018684:	2f62      	cmp	r7, #98	; 0x62
 8018686:	d80a      	bhi.n	801869e <_printf_i+0x32>
 8018688:	2f00      	cmp	r7, #0
 801868a:	f000 80d8 	beq.w	801883e <_printf_i+0x1d2>
 801868e:	2f58      	cmp	r7, #88	; 0x58
 8018690:	f000 80a3 	beq.w	80187da <_printf_i+0x16e>
 8018694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801869c:	e03a      	b.n	8018714 <_printf_i+0xa8>
 801869e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80186a2:	2b15      	cmp	r3, #21
 80186a4:	d8f6      	bhi.n	8018694 <_printf_i+0x28>
 80186a6:	a001      	add	r0, pc, #4	; (adr r0, 80186ac <_printf_i+0x40>)
 80186a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80186ac:	08018705 	.word	0x08018705
 80186b0:	08018719 	.word	0x08018719
 80186b4:	08018695 	.word	0x08018695
 80186b8:	08018695 	.word	0x08018695
 80186bc:	08018695 	.word	0x08018695
 80186c0:	08018695 	.word	0x08018695
 80186c4:	08018719 	.word	0x08018719
 80186c8:	08018695 	.word	0x08018695
 80186cc:	08018695 	.word	0x08018695
 80186d0:	08018695 	.word	0x08018695
 80186d4:	08018695 	.word	0x08018695
 80186d8:	08018825 	.word	0x08018825
 80186dc:	08018749 	.word	0x08018749
 80186e0:	08018807 	.word	0x08018807
 80186e4:	08018695 	.word	0x08018695
 80186e8:	08018695 	.word	0x08018695
 80186ec:	08018847 	.word	0x08018847
 80186f0:	08018695 	.word	0x08018695
 80186f4:	08018749 	.word	0x08018749
 80186f8:	08018695 	.word	0x08018695
 80186fc:	08018695 	.word	0x08018695
 8018700:	0801880f 	.word	0x0801880f
 8018704:	680b      	ldr	r3, [r1, #0]
 8018706:	1d1a      	adds	r2, r3, #4
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	600a      	str	r2, [r1, #0]
 801870c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018714:	2301      	movs	r3, #1
 8018716:	e0a3      	b.n	8018860 <_printf_i+0x1f4>
 8018718:	6825      	ldr	r5, [r4, #0]
 801871a:	6808      	ldr	r0, [r1, #0]
 801871c:	062e      	lsls	r6, r5, #24
 801871e:	f100 0304 	add.w	r3, r0, #4
 8018722:	d50a      	bpl.n	801873a <_printf_i+0xce>
 8018724:	6805      	ldr	r5, [r0, #0]
 8018726:	600b      	str	r3, [r1, #0]
 8018728:	2d00      	cmp	r5, #0
 801872a:	da03      	bge.n	8018734 <_printf_i+0xc8>
 801872c:	232d      	movs	r3, #45	; 0x2d
 801872e:	426d      	negs	r5, r5
 8018730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018734:	485e      	ldr	r0, [pc, #376]	; (80188b0 <_printf_i+0x244>)
 8018736:	230a      	movs	r3, #10
 8018738:	e019      	b.n	801876e <_printf_i+0x102>
 801873a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801873e:	6805      	ldr	r5, [r0, #0]
 8018740:	600b      	str	r3, [r1, #0]
 8018742:	bf18      	it	ne
 8018744:	b22d      	sxthne	r5, r5
 8018746:	e7ef      	b.n	8018728 <_printf_i+0xbc>
 8018748:	680b      	ldr	r3, [r1, #0]
 801874a:	6825      	ldr	r5, [r4, #0]
 801874c:	1d18      	adds	r0, r3, #4
 801874e:	6008      	str	r0, [r1, #0]
 8018750:	0628      	lsls	r0, r5, #24
 8018752:	d501      	bpl.n	8018758 <_printf_i+0xec>
 8018754:	681d      	ldr	r5, [r3, #0]
 8018756:	e002      	b.n	801875e <_printf_i+0xf2>
 8018758:	0669      	lsls	r1, r5, #25
 801875a:	d5fb      	bpl.n	8018754 <_printf_i+0xe8>
 801875c:	881d      	ldrh	r5, [r3, #0]
 801875e:	4854      	ldr	r0, [pc, #336]	; (80188b0 <_printf_i+0x244>)
 8018760:	2f6f      	cmp	r7, #111	; 0x6f
 8018762:	bf0c      	ite	eq
 8018764:	2308      	moveq	r3, #8
 8018766:	230a      	movne	r3, #10
 8018768:	2100      	movs	r1, #0
 801876a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801876e:	6866      	ldr	r6, [r4, #4]
 8018770:	60a6      	str	r6, [r4, #8]
 8018772:	2e00      	cmp	r6, #0
 8018774:	bfa2      	ittt	ge
 8018776:	6821      	ldrge	r1, [r4, #0]
 8018778:	f021 0104 	bicge.w	r1, r1, #4
 801877c:	6021      	strge	r1, [r4, #0]
 801877e:	b90d      	cbnz	r5, 8018784 <_printf_i+0x118>
 8018780:	2e00      	cmp	r6, #0
 8018782:	d04d      	beq.n	8018820 <_printf_i+0x1b4>
 8018784:	4616      	mov	r6, r2
 8018786:	fbb5 f1f3 	udiv	r1, r5, r3
 801878a:	fb03 5711 	mls	r7, r3, r1, r5
 801878e:	5dc7      	ldrb	r7, [r0, r7]
 8018790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018794:	462f      	mov	r7, r5
 8018796:	42bb      	cmp	r3, r7
 8018798:	460d      	mov	r5, r1
 801879a:	d9f4      	bls.n	8018786 <_printf_i+0x11a>
 801879c:	2b08      	cmp	r3, #8
 801879e:	d10b      	bne.n	80187b8 <_printf_i+0x14c>
 80187a0:	6823      	ldr	r3, [r4, #0]
 80187a2:	07df      	lsls	r7, r3, #31
 80187a4:	d508      	bpl.n	80187b8 <_printf_i+0x14c>
 80187a6:	6923      	ldr	r3, [r4, #16]
 80187a8:	6861      	ldr	r1, [r4, #4]
 80187aa:	4299      	cmp	r1, r3
 80187ac:	bfde      	ittt	le
 80187ae:	2330      	movle	r3, #48	; 0x30
 80187b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80187b4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80187b8:	1b92      	subs	r2, r2, r6
 80187ba:	6122      	str	r2, [r4, #16]
 80187bc:	f8cd a000 	str.w	sl, [sp]
 80187c0:	464b      	mov	r3, r9
 80187c2:	aa03      	add	r2, sp, #12
 80187c4:	4621      	mov	r1, r4
 80187c6:	4640      	mov	r0, r8
 80187c8:	f7ff fee2 	bl	8018590 <_printf_common>
 80187cc:	3001      	adds	r0, #1
 80187ce:	d14c      	bne.n	801886a <_printf_i+0x1fe>
 80187d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80187d4:	b004      	add	sp, #16
 80187d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187da:	4835      	ldr	r0, [pc, #212]	; (80188b0 <_printf_i+0x244>)
 80187dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80187e0:	6823      	ldr	r3, [r4, #0]
 80187e2:	680e      	ldr	r6, [r1, #0]
 80187e4:	061f      	lsls	r7, r3, #24
 80187e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80187ea:	600e      	str	r6, [r1, #0]
 80187ec:	d514      	bpl.n	8018818 <_printf_i+0x1ac>
 80187ee:	07d9      	lsls	r1, r3, #31
 80187f0:	bf44      	itt	mi
 80187f2:	f043 0320 	orrmi.w	r3, r3, #32
 80187f6:	6023      	strmi	r3, [r4, #0]
 80187f8:	b91d      	cbnz	r5, 8018802 <_printf_i+0x196>
 80187fa:	6823      	ldr	r3, [r4, #0]
 80187fc:	f023 0320 	bic.w	r3, r3, #32
 8018800:	6023      	str	r3, [r4, #0]
 8018802:	2310      	movs	r3, #16
 8018804:	e7b0      	b.n	8018768 <_printf_i+0xfc>
 8018806:	6823      	ldr	r3, [r4, #0]
 8018808:	f043 0320 	orr.w	r3, r3, #32
 801880c:	6023      	str	r3, [r4, #0]
 801880e:	2378      	movs	r3, #120	; 0x78
 8018810:	4828      	ldr	r0, [pc, #160]	; (80188b4 <_printf_i+0x248>)
 8018812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018816:	e7e3      	b.n	80187e0 <_printf_i+0x174>
 8018818:	065e      	lsls	r6, r3, #25
 801881a:	bf48      	it	mi
 801881c:	b2ad      	uxthmi	r5, r5
 801881e:	e7e6      	b.n	80187ee <_printf_i+0x182>
 8018820:	4616      	mov	r6, r2
 8018822:	e7bb      	b.n	801879c <_printf_i+0x130>
 8018824:	680b      	ldr	r3, [r1, #0]
 8018826:	6826      	ldr	r6, [r4, #0]
 8018828:	6960      	ldr	r0, [r4, #20]
 801882a:	1d1d      	adds	r5, r3, #4
 801882c:	600d      	str	r5, [r1, #0]
 801882e:	0635      	lsls	r5, r6, #24
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	d501      	bpl.n	8018838 <_printf_i+0x1cc>
 8018834:	6018      	str	r0, [r3, #0]
 8018836:	e002      	b.n	801883e <_printf_i+0x1d2>
 8018838:	0671      	lsls	r1, r6, #25
 801883a:	d5fb      	bpl.n	8018834 <_printf_i+0x1c8>
 801883c:	8018      	strh	r0, [r3, #0]
 801883e:	2300      	movs	r3, #0
 8018840:	6123      	str	r3, [r4, #16]
 8018842:	4616      	mov	r6, r2
 8018844:	e7ba      	b.n	80187bc <_printf_i+0x150>
 8018846:	680b      	ldr	r3, [r1, #0]
 8018848:	1d1a      	adds	r2, r3, #4
 801884a:	600a      	str	r2, [r1, #0]
 801884c:	681e      	ldr	r6, [r3, #0]
 801884e:	6862      	ldr	r2, [r4, #4]
 8018850:	2100      	movs	r1, #0
 8018852:	4630      	mov	r0, r6
 8018854:	f7e7 fcd4 	bl	8000200 <memchr>
 8018858:	b108      	cbz	r0, 801885e <_printf_i+0x1f2>
 801885a:	1b80      	subs	r0, r0, r6
 801885c:	6060      	str	r0, [r4, #4]
 801885e:	6863      	ldr	r3, [r4, #4]
 8018860:	6123      	str	r3, [r4, #16]
 8018862:	2300      	movs	r3, #0
 8018864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018868:	e7a8      	b.n	80187bc <_printf_i+0x150>
 801886a:	6923      	ldr	r3, [r4, #16]
 801886c:	4632      	mov	r2, r6
 801886e:	4649      	mov	r1, r9
 8018870:	4640      	mov	r0, r8
 8018872:	47d0      	blx	sl
 8018874:	3001      	adds	r0, #1
 8018876:	d0ab      	beq.n	80187d0 <_printf_i+0x164>
 8018878:	6823      	ldr	r3, [r4, #0]
 801887a:	079b      	lsls	r3, r3, #30
 801887c:	d413      	bmi.n	80188a6 <_printf_i+0x23a>
 801887e:	68e0      	ldr	r0, [r4, #12]
 8018880:	9b03      	ldr	r3, [sp, #12]
 8018882:	4298      	cmp	r0, r3
 8018884:	bfb8      	it	lt
 8018886:	4618      	movlt	r0, r3
 8018888:	e7a4      	b.n	80187d4 <_printf_i+0x168>
 801888a:	2301      	movs	r3, #1
 801888c:	4632      	mov	r2, r6
 801888e:	4649      	mov	r1, r9
 8018890:	4640      	mov	r0, r8
 8018892:	47d0      	blx	sl
 8018894:	3001      	adds	r0, #1
 8018896:	d09b      	beq.n	80187d0 <_printf_i+0x164>
 8018898:	3501      	adds	r5, #1
 801889a:	68e3      	ldr	r3, [r4, #12]
 801889c:	9903      	ldr	r1, [sp, #12]
 801889e:	1a5b      	subs	r3, r3, r1
 80188a0:	42ab      	cmp	r3, r5
 80188a2:	dcf2      	bgt.n	801888a <_printf_i+0x21e>
 80188a4:	e7eb      	b.n	801887e <_printf_i+0x212>
 80188a6:	2500      	movs	r5, #0
 80188a8:	f104 0619 	add.w	r6, r4, #25
 80188ac:	e7f5      	b.n	801889a <_printf_i+0x22e>
 80188ae:	bf00      	nop
 80188b0:	0801f0d9 	.word	0x0801f0d9
 80188b4:	0801f0ea 	.word	0x0801f0ea

080188b8 <_sbrk_r>:
 80188b8:	b538      	push	{r3, r4, r5, lr}
 80188ba:	4d06      	ldr	r5, [pc, #24]	; (80188d4 <_sbrk_r+0x1c>)
 80188bc:	2300      	movs	r3, #0
 80188be:	4604      	mov	r4, r0
 80188c0:	4608      	mov	r0, r1
 80188c2:	602b      	str	r3, [r5, #0]
 80188c4:	f7e9 f8a0 	bl	8001a08 <_sbrk>
 80188c8:	1c43      	adds	r3, r0, #1
 80188ca:	d102      	bne.n	80188d2 <_sbrk_r+0x1a>
 80188cc:	682b      	ldr	r3, [r5, #0]
 80188ce:	b103      	cbz	r3, 80188d2 <_sbrk_r+0x1a>
 80188d0:	6023      	str	r3, [r4, #0]
 80188d2:	bd38      	pop	{r3, r4, r5, pc}
 80188d4:	2001184c 	.word	0x2001184c

080188d8 <__sread>:
 80188d8:	b510      	push	{r4, lr}
 80188da:	460c      	mov	r4, r1
 80188dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188e0:	f000 f8ce 	bl	8018a80 <_read_r>
 80188e4:	2800      	cmp	r0, #0
 80188e6:	bfab      	itete	ge
 80188e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80188ea:	89a3      	ldrhlt	r3, [r4, #12]
 80188ec:	181b      	addge	r3, r3, r0
 80188ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80188f2:	bfac      	ite	ge
 80188f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80188f6:	81a3      	strhlt	r3, [r4, #12]
 80188f8:	bd10      	pop	{r4, pc}

080188fa <__swrite>:
 80188fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188fe:	461f      	mov	r7, r3
 8018900:	898b      	ldrh	r3, [r1, #12]
 8018902:	05db      	lsls	r3, r3, #23
 8018904:	4605      	mov	r5, r0
 8018906:	460c      	mov	r4, r1
 8018908:	4616      	mov	r6, r2
 801890a:	d505      	bpl.n	8018918 <__swrite+0x1e>
 801890c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018910:	2302      	movs	r3, #2
 8018912:	2200      	movs	r2, #0
 8018914:	f000 f870 	bl	80189f8 <_lseek_r>
 8018918:	89a3      	ldrh	r3, [r4, #12]
 801891a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801891e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018922:	81a3      	strh	r3, [r4, #12]
 8018924:	4632      	mov	r2, r6
 8018926:	463b      	mov	r3, r7
 8018928:	4628      	mov	r0, r5
 801892a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801892e:	f000 b817 	b.w	8018960 <_write_r>

08018932 <__sseek>:
 8018932:	b510      	push	{r4, lr}
 8018934:	460c      	mov	r4, r1
 8018936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801893a:	f000 f85d 	bl	80189f8 <_lseek_r>
 801893e:	1c43      	adds	r3, r0, #1
 8018940:	89a3      	ldrh	r3, [r4, #12]
 8018942:	bf15      	itete	ne
 8018944:	6560      	strne	r0, [r4, #84]	; 0x54
 8018946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801894a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801894e:	81a3      	strheq	r3, [r4, #12]
 8018950:	bf18      	it	ne
 8018952:	81a3      	strhne	r3, [r4, #12]
 8018954:	bd10      	pop	{r4, pc}

08018956 <__sclose>:
 8018956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801895a:	f000 b81b 	b.w	8018994 <_close_r>
	...

08018960 <_write_r>:
 8018960:	b538      	push	{r3, r4, r5, lr}
 8018962:	4d07      	ldr	r5, [pc, #28]	; (8018980 <_write_r+0x20>)
 8018964:	4604      	mov	r4, r0
 8018966:	4608      	mov	r0, r1
 8018968:	4611      	mov	r1, r2
 801896a:	2200      	movs	r2, #0
 801896c:	602a      	str	r2, [r5, #0]
 801896e:	461a      	mov	r2, r3
 8018970:	f7e8 fc90 	bl	8001294 <_write>
 8018974:	1c43      	adds	r3, r0, #1
 8018976:	d102      	bne.n	801897e <_write_r+0x1e>
 8018978:	682b      	ldr	r3, [r5, #0]
 801897a:	b103      	cbz	r3, 801897e <_write_r+0x1e>
 801897c:	6023      	str	r3, [r4, #0]
 801897e:	bd38      	pop	{r3, r4, r5, pc}
 8018980:	2001184c 	.word	0x2001184c

08018984 <abort>:
 8018984:	b508      	push	{r3, lr}
 8018986:	2006      	movs	r0, #6
 8018988:	f000 f8b4 	bl	8018af4 <raise>
 801898c:	2001      	movs	r0, #1
 801898e:	f7e8 ffdf 	bl	8001950 <_exit>
	...

08018994 <_close_r>:
 8018994:	b538      	push	{r3, r4, r5, lr}
 8018996:	4d06      	ldr	r5, [pc, #24]	; (80189b0 <_close_r+0x1c>)
 8018998:	2300      	movs	r3, #0
 801899a:	4604      	mov	r4, r0
 801899c:	4608      	mov	r0, r1
 801899e:	602b      	str	r3, [r5, #0]
 80189a0:	f7e8 fffd 	bl	800199e <_close>
 80189a4:	1c43      	adds	r3, r0, #1
 80189a6:	d102      	bne.n	80189ae <_close_r+0x1a>
 80189a8:	682b      	ldr	r3, [r5, #0]
 80189aa:	b103      	cbz	r3, 80189ae <_close_r+0x1a>
 80189ac:	6023      	str	r3, [r4, #0]
 80189ae:	bd38      	pop	{r3, r4, r5, pc}
 80189b0:	2001184c 	.word	0x2001184c

080189b4 <_fstat_r>:
 80189b4:	b538      	push	{r3, r4, r5, lr}
 80189b6:	4d07      	ldr	r5, [pc, #28]	; (80189d4 <_fstat_r+0x20>)
 80189b8:	2300      	movs	r3, #0
 80189ba:	4604      	mov	r4, r0
 80189bc:	4608      	mov	r0, r1
 80189be:	4611      	mov	r1, r2
 80189c0:	602b      	str	r3, [r5, #0]
 80189c2:	f7e8 fff8 	bl	80019b6 <_fstat>
 80189c6:	1c43      	adds	r3, r0, #1
 80189c8:	d102      	bne.n	80189d0 <_fstat_r+0x1c>
 80189ca:	682b      	ldr	r3, [r5, #0]
 80189cc:	b103      	cbz	r3, 80189d0 <_fstat_r+0x1c>
 80189ce:	6023      	str	r3, [r4, #0]
 80189d0:	bd38      	pop	{r3, r4, r5, pc}
 80189d2:	bf00      	nop
 80189d4:	2001184c 	.word	0x2001184c

080189d8 <_isatty_r>:
 80189d8:	b538      	push	{r3, r4, r5, lr}
 80189da:	4d06      	ldr	r5, [pc, #24]	; (80189f4 <_isatty_r+0x1c>)
 80189dc:	2300      	movs	r3, #0
 80189de:	4604      	mov	r4, r0
 80189e0:	4608      	mov	r0, r1
 80189e2:	602b      	str	r3, [r5, #0]
 80189e4:	f7e8 fff7 	bl	80019d6 <_isatty>
 80189e8:	1c43      	adds	r3, r0, #1
 80189ea:	d102      	bne.n	80189f2 <_isatty_r+0x1a>
 80189ec:	682b      	ldr	r3, [r5, #0]
 80189ee:	b103      	cbz	r3, 80189f2 <_isatty_r+0x1a>
 80189f0:	6023      	str	r3, [r4, #0]
 80189f2:	bd38      	pop	{r3, r4, r5, pc}
 80189f4:	2001184c 	.word	0x2001184c

080189f8 <_lseek_r>:
 80189f8:	b538      	push	{r3, r4, r5, lr}
 80189fa:	4d07      	ldr	r5, [pc, #28]	; (8018a18 <_lseek_r+0x20>)
 80189fc:	4604      	mov	r4, r0
 80189fe:	4608      	mov	r0, r1
 8018a00:	4611      	mov	r1, r2
 8018a02:	2200      	movs	r2, #0
 8018a04:	602a      	str	r2, [r5, #0]
 8018a06:	461a      	mov	r2, r3
 8018a08:	f7e8 fff0 	bl	80019ec <_lseek>
 8018a0c:	1c43      	adds	r3, r0, #1
 8018a0e:	d102      	bne.n	8018a16 <_lseek_r+0x1e>
 8018a10:	682b      	ldr	r3, [r5, #0]
 8018a12:	b103      	cbz	r3, 8018a16 <_lseek_r+0x1e>
 8018a14:	6023      	str	r3, [r4, #0]
 8018a16:	bd38      	pop	{r3, r4, r5, pc}
 8018a18:	2001184c 	.word	0x2001184c

08018a1c <__malloc_lock>:
 8018a1c:	4801      	ldr	r0, [pc, #4]	; (8018a24 <__malloc_lock+0x8>)
 8018a1e:	f7ff b9e9 	b.w	8017df4 <__retarget_lock_acquire_recursive>
 8018a22:	bf00      	nop
 8018a24:	20011854 	.word	0x20011854

08018a28 <__malloc_unlock>:
 8018a28:	4801      	ldr	r0, [pc, #4]	; (8018a30 <__malloc_unlock+0x8>)
 8018a2a:	f7ff b9e4 	b.w	8017df6 <__retarget_lock_release_recursive>
 8018a2e:	bf00      	nop
 8018a30:	20011854 	.word	0x20011854

08018a34 <_realloc_r>:
 8018a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a36:	4607      	mov	r7, r0
 8018a38:	4614      	mov	r4, r2
 8018a3a:	460e      	mov	r6, r1
 8018a3c:	b921      	cbnz	r1, 8018a48 <_realloc_r+0x14>
 8018a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018a42:	4611      	mov	r1, r2
 8018a44:	f7ff ba94 	b.w	8017f70 <_malloc_r>
 8018a48:	b922      	cbnz	r2, 8018a54 <_realloc_r+0x20>
 8018a4a:	f7ff fa41 	bl	8017ed0 <_free_r>
 8018a4e:	4625      	mov	r5, r4
 8018a50:	4628      	mov	r0, r5
 8018a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a54:	f000 f86a 	bl	8018b2c <_malloc_usable_size_r>
 8018a58:	42a0      	cmp	r0, r4
 8018a5a:	d20f      	bcs.n	8018a7c <_realloc_r+0x48>
 8018a5c:	4621      	mov	r1, r4
 8018a5e:	4638      	mov	r0, r7
 8018a60:	f7ff fa86 	bl	8017f70 <_malloc_r>
 8018a64:	4605      	mov	r5, r0
 8018a66:	2800      	cmp	r0, #0
 8018a68:	d0f2      	beq.n	8018a50 <_realloc_r+0x1c>
 8018a6a:	4631      	mov	r1, r6
 8018a6c:	4622      	mov	r2, r4
 8018a6e:	f7fe fca7 	bl	80173c0 <memcpy>
 8018a72:	4631      	mov	r1, r6
 8018a74:	4638      	mov	r0, r7
 8018a76:	f7ff fa2b 	bl	8017ed0 <_free_r>
 8018a7a:	e7e9      	b.n	8018a50 <_realloc_r+0x1c>
 8018a7c:	4635      	mov	r5, r6
 8018a7e:	e7e7      	b.n	8018a50 <_realloc_r+0x1c>

08018a80 <_read_r>:
 8018a80:	b538      	push	{r3, r4, r5, lr}
 8018a82:	4d07      	ldr	r5, [pc, #28]	; (8018aa0 <_read_r+0x20>)
 8018a84:	4604      	mov	r4, r0
 8018a86:	4608      	mov	r0, r1
 8018a88:	4611      	mov	r1, r2
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	602a      	str	r2, [r5, #0]
 8018a8e:	461a      	mov	r2, r3
 8018a90:	f7e8 ff68 	bl	8001964 <_read>
 8018a94:	1c43      	adds	r3, r0, #1
 8018a96:	d102      	bne.n	8018a9e <_read_r+0x1e>
 8018a98:	682b      	ldr	r3, [r5, #0]
 8018a9a:	b103      	cbz	r3, 8018a9e <_read_r+0x1e>
 8018a9c:	6023      	str	r3, [r4, #0]
 8018a9e:	bd38      	pop	{r3, r4, r5, pc}
 8018aa0:	2001184c 	.word	0x2001184c

08018aa4 <_raise_r>:
 8018aa4:	291f      	cmp	r1, #31
 8018aa6:	b538      	push	{r3, r4, r5, lr}
 8018aa8:	4604      	mov	r4, r0
 8018aaa:	460d      	mov	r5, r1
 8018aac:	d904      	bls.n	8018ab8 <_raise_r+0x14>
 8018aae:	2316      	movs	r3, #22
 8018ab0:	6003      	str	r3, [r0, #0]
 8018ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ab6:	bd38      	pop	{r3, r4, r5, pc}
 8018ab8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018aba:	b112      	cbz	r2, 8018ac2 <_raise_r+0x1e>
 8018abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ac0:	b94b      	cbnz	r3, 8018ad6 <_raise_r+0x32>
 8018ac2:	4620      	mov	r0, r4
 8018ac4:	f000 f830 	bl	8018b28 <_getpid_r>
 8018ac8:	462a      	mov	r2, r5
 8018aca:	4601      	mov	r1, r0
 8018acc:	4620      	mov	r0, r4
 8018ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ad2:	f000 b817 	b.w	8018b04 <_kill_r>
 8018ad6:	2b01      	cmp	r3, #1
 8018ad8:	d00a      	beq.n	8018af0 <_raise_r+0x4c>
 8018ada:	1c59      	adds	r1, r3, #1
 8018adc:	d103      	bne.n	8018ae6 <_raise_r+0x42>
 8018ade:	2316      	movs	r3, #22
 8018ae0:	6003      	str	r3, [r0, #0]
 8018ae2:	2001      	movs	r0, #1
 8018ae4:	e7e7      	b.n	8018ab6 <_raise_r+0x12>
 8018ae6:	2400      	movs	r4, #0
 8018ae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018aec:	4628      	mov	r0, r5
 8018aee:	4798      	blx	r3
 8018af0:	2000      	movs	r0, #0
 8018af2:	e7e0      	b.n	8018ab6 <_raise_r+0x12>

08018af4 <raise>:
 8018af4:	4b02      	ldr	r3, [pc, #8]	; (8018b00 <raise+0xc>)
 8018af6:	4601      	mov	r1, r0
 8018af8:	6818      	ldr	r0, [r3, #0]
 8018afa:	f7ff bfd3 	b.w	8018aa4 <_raise_r>
 8018afe:	bf00      	nop
 8018b00:	200004b0 	.word	0x200004b0

08018b04 <_kill_r>:
 8018b04:	b538      	push	{r3, r4, r5, lr}
 8018b06:	4d07      	ldr	r5, [pc, #28]	; (8018b24 <_kill_r+0x20>)
 8018b08:	2300      	movs	r3, #0
 8018b0a:	4604      	mov	r4, r0
 8018b0c:	4608      	mov	r0, r1
 8018b0e:	4611      	mov	r1, r2
 8018b10:	602b      	str	r3, [r5, #0]
 8018b12:	f7e8 ff0b 	bl	800192c <_kill>
 8018b16:	1c43      	adds	r3, r0, #1
 8018b18:	d102      	bne.n	8018b20 <_kill_r+0x1c>
 8018b1a:	682b      	ldr	r3, [r5, #0]
 8018b1c:	b103      	cbz	r3, 8018b20 <_kill_r+0x1c>
 8018b1e:	6023      	str	r3, [r4, #0]
 8018b20:	bd38      	pop	{r3, r4, r5, pc}
 8018b22:	bf00      	nop
 8018b24:	2001184c 	.word	0x2001184c

08018b28 <_getpid_r>:
 8018b28:	f7e8 bef8 	b.w	800191c <_getpid>

08018b2c <_malloc_usable_size_r>:
 8018b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b30:	1f18      	subs	r0, r3, #4
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	bfbc      	itt	lt
 8018b36:	580b      	ldrlt	r3, [r1, r0]
 8018b38:	18c0      	addlt	r0, r0, r3
 8018b3a:	4770      	bx	lr

08018b3c <_init>:
 8018b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b3e:	bf00      	nop
 8018b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b42:	bc08      	pop	{r3}
 8018b44:	469e      	mov	lr, r3
 8018b46:	4770      	bx	lr

08018b48 <_fini>:
 8018b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b4a:	bf00      	nop
 8018b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b4e:	bc08      	pop	{r3}
 8018b50:	469e      	mov	lr, r3
 8018b52:	4770      	bx	lr
