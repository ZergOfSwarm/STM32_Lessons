
Web_interface_of_buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000066b4  08018680  08018680  00028680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ed34  0801ed34  000301b0  2**0
                  CONTENTS
  4 .ARM          00000008  0801ed34  0801ed34  0002ed34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ed3c  0801ed3c  000301b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ed3c  0801ed3c  0002ed3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ed40  0801ed40  0002ed40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  0801ed44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301b0  2**0
                  CONTENTS
 10 .bss          00011348  200001b0  200001b0  000301b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200114f8  200114f8  000301b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e2a3  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007700  00000000  00000000  0006e483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b80  00000000  00000000  00075b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a98  00000000  00000000  00077708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030b09  00000000  00000000  000791a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fdb6  00000000  00000000  000a9ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4be3  00000000  00000000  000d9a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001be642  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c34  00000000  00000000  001be698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018668 	.word	0x08018668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	08018668 	.word	0x08018668

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
		"PD3", "PD4", "PD5", "PD6", "PD7", "PD8", "PD9", "PD10", "PD11", "PD12",
		"PD13", "PD14", "PD15", "PE0", "PE1", "PE2", "PE3", "PE4", "PE5", "PE6",
		"PE7", "PE8", "PE9", "PE10", "PE11", "PE12", "PE13", "PE14", "PE15" };

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b091      	sub	sp, #68	; 0x44
 800059c:	af08      	add	r7, sp, #32
 800059e:	6178      	str	r0, [r7, #20]
 80005a0:	6139      	str	r1, [r7, #16]
 80005a2:	60fa      	str	r2, [r7, #12]
 80005a4:	817b      	strh	r3, [r7, #10]
	//char *info[30] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
	char *info;
	switch (iIndex) {
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	f000 81c5 	beq.w	8000938 <ssi_handler+0x3a0>
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	f300 81c3 	bgt.w	800093c <ssi_handler+0x3a4>
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d004      	beq.n	80005c6 <ssi_handler+0x2e>
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	f000 81a8 	beq.w	8000914 <ssi_handler+0x37c>
//		memset(json, '\0', sizeof(json));
//		memset(arrline, '\0', sizeof(arrline));
//		return strlen(pcInsert);
		break;
	default:
		break;
 80005c4:	e1ba      	b.n	800093c <ssi_handler+0x3a4>
		if (variable == num_lines) {
 80005c6:	4b8f      	ldr	r3, [pc, #572]	; (8000804 <ssi_handler+0x26c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b3a      	cmp	r3, #58	; 0x3a
 80005cc:	d103      	bne.n	80005d6 <ssi_handler+0x3e>
			variable = 0;
 80005ce:	4b8d      	ldr	r3, [pc, #564]	; (8000804 <ssi_handler+0x26c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
			break;
 80005d4:	e1b3      	b.n	800093e <ssi_handler+0x3a6>
			if (isalpha(T[variable].infofield[0])) {
 80005d6:	4b8b      	ldr	r3, [pc, #556]	; (8000804 <ssi_handler+0x26c>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	498b      	ldr	r1, [pc, #556]	; (8000808 <ssi_handler+0x270>)
 80005dc:	4613      	mov	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	440b      	add	r3, r1
 80005e6:	332c      	adds	r3, #44	; 0x2c
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a87      	ldr	r2, [pc, #540]	; (800080c <ssi_handler+0x274>)
 80005ee:	4413      	add	r3, r2
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	f003 0303 	and.w	r3, r3, #3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00b      	beq.n	8000612 <ssi_handler+0x7a>
				info = T[variable].infofield;
 80005fa:	4b82      	ldr	r3, [pc, #520]	; (8000804 <ssi_handler+0x26c>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	3328      	adds	r3, #40	; 0x28
 8000608:	4a7f      	ldr	r2, [pc, #508]	; (8000808 <ssi_handler+0x270>)
 800060a:	4413      	add	r3, r2
 800060c:	3304      	adds	r3, #4
 800060e:	61fb      	str	r3, [r7, #28]
 8000610:	e016      	b.n	8000640 <ssi_handler+0xa8>
			} else if (isdigit(T[variable].infofield[0])) {
 8000612:	4b7c      	ldr	r3, [pc, #496]	; (8000804 <ssi_handler+0x26c>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	497c      	ldr	r1, [pc, #496]	; (8000808 <ssi_handler+0x270>)
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	440b      	add	r3, r1
 8000622:	332c      	adds	r3, #44	; 0x2c
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	4a78      	ldr	r2, [pc, #480]	; (800080c <ssi_handler+0x274>)
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <ssi_handler+0xa4>
				info = NULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
 800063a:	e001      	b.n	8000640 <ssi_handler+0xa8>
				info = NULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
			if (variable == 0) {
 8000640:	4b70      	ldr	r3, [pc, #448]	; (8000804 <ssi_handler+0x26c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d16c      	bne.n	8000722 <ssi_handler+0x18a>
						tp[variable].pins, T[variable].pulluptype,
 8000648:	4b6e      	ldr	r3, [pc, #440]	; (8000804 <ssi_handler+0x26c>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4613      	mov	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	4a6f      	ldr	r2, [pc, #444]	; (8000810 <ssi_handler+0x278>)
 8000654:	eb03 0c02 	add.w	ip, r3, r2
 8000658:	4b6a      	ldr	r3, [pc, #424]	; (8000804 <ssi_handler+0x26c>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4613      	mov	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	4a68      	ldr	r2, [pc, #416]	; (8000808 <ssi_handler+0x270>)
 8000666:	eb03 0e02 	add.w	lr, r3, r2
				sprintf(pcInsert,
 800066a:	4b66      	ldr	r3, [pc, #408]	; (8000804 <ssi_handler+0x26c>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4966      	ldr	r1, [pc, #408]	; (8000808 <ssi_handler+0x270>)
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	440b      	add	r3, r1
 800067a:	3314      	adds	r3, #20
 800067c:	6819      	ldr	r1, [r3, #0]
 800067e:	4b61      	ldr	r3, [pc, #388]	; (8000804 <ssi_handler+0x26c>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4861      	ldr	r0, [pc, #388]	; (8000808 <ssi_handler+0x270>)
 8000684:	4613      	mov	r3, r2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4413      	add	r3, r2
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	4403      	add	r3, r0
 800068e:	3318      	adds	r3, #24
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	4b5c      	ldr	r3, [pc, #368]	; (8000804 <ssi_handler+0x26c>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4c5c      	ldr	r4, [pc, #368]	; (8000808 <ssi_handler+0x270>)
 8000698:	4613      	mov	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	4423      	add	r3, r4
 80006a2:	331c      	adds	r3, #28
 80006a4:	681c      	ldr	r4, [r3, #0]
 80006a6:	4b57      	ldr	r3, [pc, #348]	; (8000804 <ssi_handler+0x26c>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4d57      	ldr	r5, [pc, #348]	; (8000808 <ssi_handler+0x270>)
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	011b      	lsls	r3, r3, #4
 80006b4:	442b      	add	r3, r5
 80006b6:	3320      	adds	r3, #32
 80006b8:	681d      	ldr	r5, [r3, #0]
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <ssi_handler+0x26c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4e52      	ldr	r6, [pc, #328]	; (8000808 <ssi_handler+0x270>)
 80006c0:	4613      	mov	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	4433      	add	r3, r6
 80006ca:	3324      	adds	r3, #36	; 0x24
 80006cc:	681e      	ldr	r6, [r3, #0]
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <ssi_handler+0x26c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b4d      	ldr	r3, [pc, #308]	; (8000808 <ssi_handler+0x270>)
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4613      	mov	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	3328      	adds	r3, #40	; 0x28
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b46      	ldr	r3, [pc, #280]	; (8000804 <ssi_handler+0x26c>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <ssi_handler+0x270>)
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	334c      	adds	r3, #76	; 0x4c
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	9307      	str	r3, [sp, #28]
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	9306      	str	r3, [sp, #24]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	9305      	str	r3, [sp, #20]
 800070a:	9604      	str	r6, [sp, #16]
 800070c:	9503      	str	r5, [sp, #12]
 800070e:	9402      	str	r4, [sp, #8]
 8000710:	9001      	str	r0, [sp, #4]
 8000712:	9100      	str	r1, [sp, #0]
 8000714:	4673      	mov	r3, lr
 8000716:	4662      	mov	r2, ip
 8000718:	493e      	ldr	r1, [pc, #248]	; (8000814 <ssi_handler+0x27c>)
 800071a:	6938      	ldr	r0, [r7, #16]
 800071c:	f016 fd18 	bl	8017150 <siprintf>
 8000720:	e0e8      	b.n	80008f4 <ssi_handler+0x35c>
			} else if (variable == num_lines - 1) {
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <ssi_handler+0x26c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b39      	cmp	r3, #57	; 0x39
 8000728:	d178      	bne.n	800081c <ssi_handler+0x284>
						tp[variable].pins, T[variable].pulluptype,
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <ssi_handler+0x26c>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	4a36      	ldr	r2, [pc, #216]	; (8000810 <ssi_handler+0x278>)
 8000736:	eb03 0c02 	add.w	ip, r3, r2
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <ssi_handler+0x26c>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4a30      	ldr	r2, [pc, #192]	; (8000808 <ssi_handler+0x270>)
 8000748:	eb03 0e02 	add.w	lr, r3, r2
				sprintf(pcInsert,
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <ssi_handler+0x26c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	492d      	ldr	r1, [pc, #180]	; (8000808 <ssi_handler+0x270>)
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	440b      	add	r3, r1
 800075c:	3314      	adds	r3, #20
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <ssi_handler+0x26c>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4828      	ldr	r0, [pc, #160]	; (8000808 <ssi_handler+0x270>)
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	4403      	add	r3, r0
 8000770:	3318      	adds	r3, #24
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <ssi_handler+0x26c>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4c23      	ldr	r4, [pc, #140]	; (8000808 <ssi_handler+0x270>)
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	4423      	add	r3, r4
 8000784:	331c      	adds	r3, #28
 8000786:	681c      	ldr	r4, [r3, #0]
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <ssi_handler+0x26c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4d1e      	ldr	r5, [pc, #120]	; (8000808 <ssi_handler+0x270>)
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	442b      	add	r3, r5
 8000798:	3320      	adds	r3, #32
 800079a:	681d      	ldr	r5, [r3, #0]
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <ssi_handler+0x26c>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4e19      	ldr	r6, [pc, #100]	; (8000808 <ssi_handler+0x270>)
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	4433      	add	r3, r6
 80007ac:	3324      	adds	r3, #36	; 0x24
 80007ae:	681e      	ldr	r6, [r3, #0]
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <ssi_handler+0x26c>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <ssi_handler+0x270>)
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	3328      	adds	r3, #40	; 0x28
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <ssi_handler+0x26c>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <ssi_handler+0x270>)
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	334c      	adds	r3, #76	; 0x4c
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	9307      	str	r3, [sp, #28]
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	9306      	str	r3, [sp, #24]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	9305      	str	r3, [sp, #20]
 80007ec:	9604      	str	r6, [sp, #16]
 80007ee:	9503      	str	r5, [sp, #12]
 80007f0:	9402      	str	r4, [sp, #8]
 80007f2:	9001      	str	r0, [sp, #4]
 80007f4:	9100      	str	r1, [sp, #0]
 80007f6:	4673      	mov	r3, lr
 80007f8:	4662      	mov	r2, ip
 80007fa:	4907      	ldr	r1, [pc, #28]	; (8000818 <ssi_handler+0x280>)
 80007fc:	6938      	ldr	r0, [r7, #16]
 80007fe:	f016 fca7 	bl	8017150 <siprintf>
 8000802:	e077      	b.n	80008f4 <ssi_handler+0x35c>
 8000804:	200001d0 	.word	0x200001d0
 8000808:	200017f0 	.word	0x200017f0
 800080c:	0801eae6 	.word	0x0801eae6
 8000810:	20000010 	.word	0x20000010
 8000814:	08018698 	.word	0x08018698
 8000818:	08018748 	.word	0x08018748
						tp[variable].pins, T[variable].pulluptype,
 800081c:	4b4a      	ldr	r3, [pc, #296]	; (8000948 <ssi_handler+0x3b0>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	4a49      	ldr	r2, [pc, #292]	; (800094c <ssi_handler+0x3b4>)
 8000828:	eb03 0c02 	add.w	ip, r3, r2
 800082c:	4b46      	ldr	r3, [pc, #280]	; (8000948 <ssi_handler+0x3b0>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4613      	mov	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	4a45      	ldr	r2, [pc, #276]	; (8000950 <ssi_handler+0x3b8>)
 800083a:	eb03 0e02 	add.w	lr, r3, r2
				sprintf(pcInsert,
 800083e:	4b42      	ldr	r3, [pc, #264]	; (8000948 <ssi_handler+0x3b0>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4943      	ldr	r1, [pc, #268]	; (8000950 <ssi_handler+0x3b8>)
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	440b      	add	r3, r1
 800084e:	3314      	adds	r3, #20
 8000850:	6819      	ldr	r1, [r3, #0]
 8000852:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <ssi_handler+0x3b0>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	483e      	ldr	r0, [pc, #248]	; (8000950 <ssi_handler+0x3b8>)
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	4403      	add	r3, r0
 8000862:	3318      	adds	r3, #24
 8000864:	6818      	ldr	r0, [r3, #0]
 8000866:	4b38      	ldr	r3, [pc, #224]	; (8000948 <ssi_handler+0x3b0>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4c39      	ldr	r4, [pc, #228]	; (8000950 <ssi_handler+0x3b8>)
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4423      	add	r3, r4
 8000876:	331c      	adds	r3, #28
 8000878:	681c      	ldr	r4, [r3, #0]
 800087a:	4b33      	ldr	r3, [pc, #204]	; (8000948 <ssi_handler+0x3b0>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4d34      	ldr	r5, [pc, #208]	; (8000950 <ssi_handler+0x3b8>)
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	442b      	add	r3, r5
 800088a:	3320      	adds	r3, #32
 800088c:	681d      	ldr	r5, [r3, #0]
 800088e:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <ssi_handler+0x3b0>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4e2f      	ldr	r6, [pc, #188]	; (8000950 <ssi_handler+0x3b8>)
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	4433      	add	r3, r6
 800089e:	3324      	adds	r3, #36	; 0x24
 80008a0:	681e      	ldr	r6, [r3, #0]
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <ssi_handler+0x3b0>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <ssi_handler+0x3b8>)
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	3328      	adds	r3, #40	; 0x28
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <ssi_handler+0x3b0>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <ssi_handler+0x3b8>)
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	334c      	adds	r3, #76	; 0x4c
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	9307      	str	r3, [sp, #28]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	9306      	str	r3, [sp, #24]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	9305      	str	r3, [sp, #20]
 80008de:	9604      	str	r6, [sp, #16]
 80008e0:	9503      	str	r5, [sp, #12]
 80008e2:	9402      	str	r4, [sp, #8]
 80008e4:	9001      	str	r0, [sp, #4]
 80008e6:	9100      	str	r1, [sp, #0]
 80008e8:	4673      	mov	r3, lr
 80008ea:	4662      	mov	r2, ip
 80008ec:	4919      	ldr	r1, [pc, #100]	; (8000954 <ssi_handler+0x3bc>)
 80008ee:	6938      	ldr	r0, [r7, #16]
 80008f0:	f016 fc2e 	bl	8017150 <siprintf>
			*next_tag_part = variable;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <ssi_handler+0x3b0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008fc:	801a      	strh	r2, [r3, #0]
			variable++;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <ssi_handler+0x3b0>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	4a10      	ldr	r2, [pc, #64]	; (8000948 <ssi_handler+0x3b0>)
 8000906:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 8000908:	6938      	ldr	r0, [r7, #16]
 800090a:	f7ff fc6b 	bl	80001e4 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	b29b      	uxth	r3, r3
 8000912:	e015      	b.n	8000940 <ssi_handler+0x3a8>
		indx1 += 1;
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <ssi_handler+0x3c0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <ssi_handler+0x3c0>)
 800091c:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx1);
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <ssi_handler+0x3c0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	490d      	ldr	r1, [pc, #52]	; (800095c <ssi_handler+0x3c4>)
 8000926:	6938      	ldr	r0, [r7, #16]
 8000928:	f016 fc12 	bl	8017150 <siprintf>
		return strlen(pcInsert);
 800092c:	6938      	ldr	r0, [r7, #16]
 800092e:	f7ff fc59 	bl	80001e4 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	b29b      	uxth	r3, r3
 8000936:	e003      	b.n	8000940 <ssi_handler+0x3a8>
		break;
 8000938:	bf00      	nop
 800093a:	e000      	b.n	800093e <ssi_handler+0x3a6>
		break;
 800093c:	bf00      	nop
	}

	return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3724      	adds	r7, #36	; 0x24
 8000944:	46bd      	mov	sp, r7
 8000946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000948:	200001d0 	.word	0x200001d0
 800094c:	20000010 	.word	0x20000010
 8000950:	200017f0 	.word	0x200017f0
 8000954:	080187f8 	.word	0x080187f8
 8000958:	200001cc 	.word	0x200001cc
 800095c:	080188a8 	.word	0x080188a8

08000960 <CGIForm_Handler>:
char name[30];

tCGI CGI_TAB[2]; // 3. For form создадим массив для form CGI

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
	printf("OK GET \r\n");
 800096e:	4828      	ldr	r0, [pc, #160]	; (8000a10 <CGIForm_Handler+0xb0>)
 8000970:	f016 fb72 	bl	8017058 <puts>
	if (iIndex == 0) {
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d145      	bne.n	8000a06 <CGIForm_Handler+0xa6>
		for (int i = 0; i < iNumParams; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e03e      	b.n	80009fe <CGIForm_Handler+0x9e>
			if (strcmp(pcParam[i], "fname") == 0) // if the fname string is found
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4413      	add	r3, r2
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4922      	ldr	r1, [pc, #136]	; (8000a14 <CGIForm_Handler+0xb4>)
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc1f 	bl	80001d0 <strcmp>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d10e      	bne.n	80009b6 <CGIForm_Handler+0x56>
					{
				memset(name, '\0', 30); // Очищаем массив перед записью новых данных.
 8000998:	221e      	movs	r2, #30
 800099a:	2100      	movs	r1, #0
 800099c:	481e      	ldr	r0, [pc, #120]	; (8000a18 <CGIForm_Handler+0xb8>)
 800099e:	f016 facd 	bl	8016f3c <memset>
				strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	481a      	ldr	r0, [pc, #104]	; (8000a18 <CGIForm_Handler+0xb8>)
 80009b0:	f016 fc0a 	bl	80171c8 <strcpy>
 80009b4:	e020      	b.n	80009f8 <CGIForm_Handler+0x98>
			}

			else if (strcmp(pcParam[i], "lname") == 0) // if the lname string is found
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4916      	ldr	r1, [pc, #88]	; (8000a1c <CGIForm_Handler+0xbc>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fc04 	bl	80001d0 <strcmp>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d114      	bne.n	80009f8 <CGIForm_Handler+0x98>
					{
				strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <CGIForm_Handler+0xb8>)
 80009d0:	f7ff fc08 	bl	80001e4 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <CGIForm_Handler+0xb8>)
 80009da:	4413      	add	r3, r2
 80009dc:	4910      	ldr	r1, [pc, #64]	; (8000a20 <CGIForm_Handler+0xc0>)
 80009de:	461a      	mov	r2, r3
 80009e0:	460b      	mov	r3, r1
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	8013      	strh	r3, [r2, #0]
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <CGIForm_Handler+0xb8>)
 80009f4:	f016 fbcc 	bl	8017190 <strcat>
		for (int i = 0; i < iNumParams; i++) {
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	dbbc      	blt.n	8000980 <CGIForm_Handler+0x20>
			}
		}
	}

	return "/1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <CGIForm_Handler+0xc4>)
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	080188b8 	.word	0x080188b8
 8000a14:	080188c4 	.word	0x080188c4
 8000a18:	20005ae8 	.word	0x20005ae8
 8000a1c:	080188cc 	.word	0x080188cc
 8000a20:	080188d4 	.word	0x080188d4
 8000a24:	080188d8 	.word	0x080188d8

08000a28 <httpd_post_begin>:
static void *valid_connection;
int http_post_content_len;

err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	807b      	strh	r3, [r7, #2]

	printf("OK POST 1 \r\n");
 8000a36:	480f      	ldr	r0, [pc, #60]	; (8000a74 <httpd_post_begin+0x4c>)
 8000a38:	f016 fb0e 	bl	8017058 <puts>
//LWIP_UNUSED_ARG(connection);
//LWIP_UNUSED_ARG(http_request);
//LWIP_UNUSED_ARG(http_request_len);
//LWIP_UNUSED_ARG(content_len);
//LWIP_UNUSED_ARG(post_auto_wnd);
	http_post_content_len = content_len;
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <httpd_post_begin+0x50>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	6013      	str	r3, [r2, #0]

//printf("httpd_post_begin: Post Content: %s\n",  http_request);
//printf("%d \r\n",  http_post_content_len);

	if (current_connection != connection) {
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <httpd_post_begin+0x54>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d00d      	beq.n	8000a68 <httpd_post_begin+0x40>

		current_connection = connection;
 8000a4c:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <httpd_post_begin+0x54>)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <httpd_post_begin+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]

		/* default page is "login failed" */
		snprintf(response_uri, response_uri_len, "/cgi_leds.html");
 8000a58:	8c3b      	ldrh	r3, [r7, #32]
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <httpd_post_begin+0x5c>)
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	69f8      	ldr	r0, [r7, #28]
 8000a60:	f016 fb42 	bl	80170e8 <sniprintf>
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e001      	b.n	8000a6c <httpd_post_begin+0x44>
	}

	return ERR_VAL;
 8000a68:	f06f 0305 	mvn.w	r3, #5
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	080188e4 	.word	0x080188e4
 8000a78:	200017ec 	.word	0x200017ec
 8000a7c:	200001d4 	.word	0x200001d4
 8000a80:	200001d8 	.word	0x200001d8
 8000a84:	080188f0 	.word	0x080188f0

08000a88 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]

	printf("OK POST 2 \r\n");
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <httpd_post_receive_data+0x6c>)
 8000a94:	f016 fae0 	bl	8017058 <puts>
	char *data;

	if (current_connection == connection && p != NULL) {
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <httpd_post_receive_data+0x70>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d119      	bne.n	8000ad6 <httpd_post_receive_data+0x4e>
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d016      	beq.n	8000ad6 <httpd_post_receive_data+0x4e>

		data = p->payload;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	60fb      	str	r3, [r7, #12]
		printf("DATA %s \r\n", data);
 8000aae:	68f9      	ldr	r1, [r7, #12]
 8000ab0:	4812      	ldr	r0, [pc, #72]	; (8000afc <httpd_post_receive_data+0x74>)
 8000ab2:	f016 fa4b 	bl	8016f4c <iprintf>
		strcat(bufervar, p->payload);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	4619      	mov	r1, r3
 8000abc:	4810      	ldr	r0, [pc, #64]	; (8000b00 <httpd_post_receive_data+0x78>)
 8000abe:	f016 fb67 	bl	8017190 <strcat>
		pbuf_free(p);
 8000ac2:	6838      	ldr	r0, [r7, #0]
 8000ac4:	f00d f934 	bl	800dd30 <pbuf_free>
		memset(data, '\0', sizeof(*data));
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2100      	movs	r1, #0
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f016 fa35 	bl	8016f3c <memset>
		return ERR_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e00a      	b.n	8000aec <httpd_post_receive_data+0x64>
	}
	if (p != NULL) {
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d005      	beq.n	8000ae8 <httpd_post_receive_data+0x60>
		printf("END \r\n");
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <httpd_post_receive_data+0x7c>)
 8000ade:	f016 fabb 	bl	8017058 <puts>
		pbuf_free(p);
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f00d f924 	bl	800dd30 <pbuf_free>
	}
	return ERR_VAL;
 8000ae8:	f06f 0305 	mvn.w	r3, #5
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	08018900 	.word	0x08018900
 8000af8:	200001d4 	.word	0x200001d4
 8000afc:	0801890c 	.word	0x0801890c
 8000b00:	20002a10 	.word	0x20002a10
 8000b04:	08018918 	.word	0x08018918

08000b08 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 8000b08:	b5b0      	push	{r4, r5, r7, lr}
 8000b0a:	b0aa      	sub	sp, #168	; 0xa8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4613      	mov	r3, r2
 8000b14:	80fb      	strh	r3, [r7, #6]
 8000b16:	466b      	mov	r3, sp
 8000b18:	461d      	mov	r5, r3
	printf("OK POST 3 \r\n");
 8000b1a:	48a2      	ldr	r0, [pc, #648]	; (8000da4 <httpd_post_finished+0x29c>)
 8000b1c:	f016 fa9c 	bl	8017058 <puts>
	char nametoken[50];
	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int id;
	char urlline[http_post_content_len];
 8000b26:	4ba0      	ldr	r3, [pc, #640]	; (8000da8 <httpd_post_finished+0x2a0>)
 8000b28:	681c      	ldr	r4, [r3, #0]
 8000b2a:	1e63      	subs	r3, r4, #1
 8000b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b30:	4623      	mov	r3, r4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f04f 0100 	mov.w	r1, #0
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	00cb      	lsls	r3, r1, #3
 8000b42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b46:	00c2      	lsls	r2, r0, #3
 8000b48:	4623      	mov	r3, r4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f04f 0100 	mov.w	r1, #0
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	00cb      	lsls	r3, r1, #3
 8000b5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b5e:	00c2      	lsls	r2, r0, #3
 8000b60:	4623      	mov	r3, r4
 8000b62:	3307      	adds	r3, #7
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	ebad 0d03 	sub.w	sp, sp, r3
 8000b6c:	466b      	mov	r3, sp
 8000b6e:	3300      	adds	r3, #0
 8000b70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	strncpy(urlline, bufervar, http_post_content_len);
 8000b74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b78:	4a8b      	ldr	r2, [pc, #556]	; (8000da8 <httpd_post_finished+0x2a0>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	498b      	ldr	r1, [pc, #556]	; (8000dac <httpd_post_finished+0x2a4>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f016 fb3c 	bl	80171fc <strncpy>

	printf("%s \r\n", urlline);
 8000b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4889      	ldr	r0, [pc, #548]	; (8000db0 <httpd_post_finished+0x2a8>)
 8000b8c:	f016 f9de 	bl	8016f4c <iprintf>
	printf("COUNT %d \r\n", http_post_content_len);
 8000b90:	4b85      	ldr	r3, [pc, #532]	; (8000da8 <httpd_post_finished+0x2a0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4887      	ldr	r0, [pc, #540]	; (8000db4 <httpd_post_finished+0x2ac>)
 8000b98:	f016 f9d8 	bl	8016f4c <iprintf>

	char *rest = urlline;
 8000b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ba0:	61fb      	str	r3, [r7, #28]

	while ((token = strtok_r(rest, "&", &rest))) {
 8000ba2:	e17e      	b.n	8000ea2 <httpd_post_finished+0x39a>
		//printf("TOKEN - %s\n", token);
		char *rest1 = token;
 8000ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ba8:	61bb      	str	r3, [r7, #24]
//		char *name0 = token;
		strcat(name0, token);
 8000baa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f016 faec 	bl	8017190 <strcat>
		y = 0;
 8000bb8:	4b7f      	ldr	r3, [pc, #508]	; (8000db8 <httpd_post_finished+0x2b0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000bbe:	e12d      	b.n	8000e1c <httpd_post_finished+0x314>
			z = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			if (y == 0) {
 8000bc6:	4b7c      	ldr	r3, [pc, #496]	; (8000db8 <httpd_post_finished+0x2b0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d127      	bne.n	8000c1e <httpd_post_finished+0x116>
				//printf("---NAME %s\n", token1);
				//name0 = token1; // имя переменной
				// получение id
				char *rest2 = token1;
 8000bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bd2:	617b      	str	r3, [r7, #20]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000bd4:	e016      	b.n	8000c04 <httpd_post_finished+0xfc>
					if (z == 0) {
 8000bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <httpd_post_finished+0xde>
						name1 = token2;
 8000bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					}
					if (z == 1) {
 8000be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d105      	bne.n	8000bfa <httpd_post_finished+0xf2>
						id = atoi(token2);
 8000bee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000bf2:	f016 f945 	bl	8016e80 <atoi>
 8000bf6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
						//printf("ID %d\n", id);
					}
					z++;
 8000bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bfe:	3301      	adds	r3, #1
 8000c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f107 0214 	add.w	r2, r7, #20
 8000c0a:	496c      	ldr	r1, [pc, #432]	; (8000dbc <httpd_post_finished+0x2b4>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f016 fb47 	bl	80172a0 <strtok_r>
 8000c12:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8000c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1db      	bne.n	8000bd6 <httpd_post_finished+0xce>
				}
			}
			if (y == 1) {
 8000c1e:	4b66      	ldr	r3, [pc, #408]	; (8000db8 <httpd_post_finished+0x2b0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	f040 80f5 	bne.w	8000e12 <httpd_post_finished+0x30a>
				//printf("VAL-222 \n");
				//printf("VAL %s\n", token1);
				// записывае в структуру
				//printf("---NAME-1 %s\n", name1);
				/************************************************/
				if (strcmp(name1, "pulluptype") == 0) {
 8000c28:	4965      	ldr	r1, [pc, #404]	; (8000dc0 <httpd_post_finished+0x2b8>)
 8000c2a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000c2e:	f7ff facf 	bl	80001d0 <strcmp>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10d      	bne.n	8000c54 <httpd_post_finished+0x14c>
					strcpy(T[id].pulluptype, token1);
 8000c38:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	4a5f      	ldr	r2, [pc, #380]	; (8000dc4 <httpd_post_finished+0x2bc>)
 8000c46:	4413      	add	r3, r2
 8000c48:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f016 fabb 	bl	80171c8 <strcpy>
 8000c52:	e0de      	b.n	8000e12 <httpd_post_finished+0x30a>
				} else if (strcmp(name1, "bounceinterval") == 0) {
 8000c54:	495c      	ldr	r1, [pc, #368]	; (8000dc8 <httpd_post_finished+0x2c0>)
 8000c56:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000c5a:	f7ff fab9 	bl	80001d0 <strcmp>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10f      	bne.n	8000c84 <httpd_post_finished+0x17c>
					T[id].bounceinterval = atoi(token1);
 8000c64:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000c68:	f016 f90a 	bl	8016e80 <atoi>
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	4855      	ldr	r0, [pc, #340]	; (8000dc4 <httpd_post_finished+0x2bc>)
 8000c70:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	4403      	add	r3, r0
 8000c7e:	3314      	adds	r3, #20
 8000c80:	6019      	str	r1, [r3, #0]
 8000c82:	e0c6      	b.n	8000e12 <httpd_post_finished+0x30a>
				} else if (strcmp(name1, "holdinterval") == 0) {
 8000c84:	4951      	ldr	r1, [pc, #324]	; (8000dcc <httpd_post_finished+0x2c4>)
 8000c86:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000c8a:	f7ff faa1 	bl	80001d0 <strcmp>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10f      	bne.n	8000cb4 <httpd_post_finished+0x1ac>
					T[id].holdinterval = atoi(token1);
 8000c94:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000c98:	f016 f8f2 	bl	8016e80 <atoi>
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	4849      	ldr	r0, [pc, #292]	; (8000dc4 <httpd_post_finished+0x2bc>)
 8000ca0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	4403      	add	r3, r0
 8000cae:	3318      	adds	r3, #24
 8000cb0:	6019      	str	r1, [r3, #0]
 8000cb2:	e0ae      	b.n	8000e12 <httpd_post_finished+0x30a>
				} else if (strcmp(name1, "repeat") == 0) {
 8000cb4:	4946      	ldr	r1, [pc, #280]	; (8000dd0 <httpd_post_finished+0x2c8>)
 8000cb6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000cba:	f7ff fa89 	bl	80001d0 <strcmp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10f      	bne.n	8000ce4 <httpd_post_finished+0x1dc>
					T[id].repeat = atoi(token1);
 8000cc4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000cc8:	f016 f8da 	bl	8016e80 <atoi>
 8000ccc:	4601      	mov	r1, r0
 8000cce:	483d      	ldr	r0, [pc, #244]	; (8000dc4 <httpd_post_finished+0x2bc>)
 8000cd0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	4403      	add	r3, r0
 8000cde:	331c      	adds	r3, #28
 8000ce0:	6019      	str	r1, [r3, #0]
 8000ce2:	e096      	b.n	8000e12 <httpd_post_finished+0x30a>
				} else if (strcmp(name1, "repeatinterval") == 0) {
 8000ce4:	493b      	ldr	r1, [pc, #236]	; (8000dd4 <httpd_post_finished+0x2cc>)
 8000ce6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000cea:	f7ff fa71 	bl	80001d0 <strcmp>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10f      	bne.n	8000d14 <httpd_post_finished+0x20c>
					T[id].repeatinterval = atoi(token1);
 8000cf4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000cf8:	f016 f8c2 	bl	8016e80 <atoi>
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	4831      	ldr	r0, [pc, #196]	; (8000dc4 <httpd_post_finished+0x2bc>)
 8000d00:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	4403      	add	r3, r0
 8000d0e:	3320      	adds	r3, #32
 8000d10:	6019      	str	r1, [r3, #0]
 8000d12:	e07e      	b.n	8000e12 <httpd_post_finished+0x30a>
				} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8000d14:	4930      	ldr	r1, [pc, #192]	; (8000dd8 <httpd_post_finished+0x2d0>)
 8000d16:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000d1a:	f7ff fa59 	bl	80001d0 <strcmp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10f      	bne.n	8000d44 <httpd_post_finished+0x23c>
					T[id].doubleclickinterval = atoi(token1);
 8000d24:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d28:	f016 f8aa 	bl	8016e80 <atoi>
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	4825      	ldr	r0, [pc, #148]	; (8000dc4 <httpd_post_finished+0x2bc>)
 8000d30:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	4403      	add	r3, r0
 8000d3e:	3324      	adds	r3, #36	; 0x24
 8000d40:	6019      	str	r1, [r3, #0]
 8000d42:	e066      	b.n	8000e12 <httpd_post_finished+0x30a>
				} else if (strcmp(name1, "preventclick") == 0) {
 8000d44:	4925      	ldr	r1, [pc, #148]	; (8000ddc <httpd_post_finished+0x2d4>)
 8000d46:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000d4a:	f7ff fa41 	bl	80001d0 <strcmp>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10f      	bne.n	8000d74 <httpd_post_finished+0x26c>
					T[id].preventclick = atoi(token1);
 8000d54:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d58:	f016 f892 	bl	8016e80 <atoi>
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <httpd_post_finished+0x2bc>)
 8000d60:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	4403      	add	r3, r0
 8000d6e:	3328      	adds	r3, #40	; 0x28
 8000d70:	6019      	str	r1, [r3, #0]
 8000d72:	e04e      	b.n	8000e12 <httpd_post_finished+0x30a>
				} else if (strcmp(name1, "infofield") == 0) {
 8000d74:	491a      	ldr	r1, [pc, #104]	; (8000de0 <httpd_post_finished+0x2d8>)
 8000d76:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000d7a:	f7ff fa29 	bl	80001d0 <strcmp>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d12f      	bne.n	8000de4 <httpd_post_finished+0x2dc>
					strcpy(T[id].infofield, token1);
 8000d84:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	3328      	adds	r3, #40	; 0x28
 8000d92:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <httpd_post_finished+0x2bc>)
 8000d94:	4413      	add	r3, r2
 8000d96:	3304      	adds	r3, #4
 8000d98:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f016 fa13 	bl	80171c8 <strcpy>
 8000da2:	e036      	b.n	8000e12 <httpd_post_finished+0x30a>
 8000da4:	08018920 	.word	0x08018920
 8000da8:	200017ec 	.word	0x200017ec
 8000dac:	20002a10 	.word	0x20002a10
 8000db0:	0801892c 	.word	0x0801892c
 8000db4:	08018934 	.word	0x08018934
 8000db8:	20005ae4 	.word	0x20005ae4
 8000dbc:	08018940 	.word	0x08018940
 8000dc0:	08018944 	.word	0x08018944
 8000dc4:	200017f0 	.word	0x200017f0
 8000dc8:	08018950 	.word	0x08018950
 8000dcc:	08018960 	.word	0x08018960
 8000dd0:	08018970 	.word	0x08018970
 8000dd4:	08018978 	.word	0x08018978
 8000dd8:	08018988 	.word	0x08018988
 8000ddc:	0801899c 	.word	0x0801899c
 8000de0:	080189ac 	.word	0x080189ac
				} else if (strcmp(name1, "onoff") == 0) {
 8000de4:	494f      	ldr	r1, [pc, #316]	; (8000f24 <httpd_post_finished+0x41c>)
 8000de6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000dea:	f7ff f9f1 	bl	80001d0 <strcmp>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10e      	bne.n	8000e12 <httpd_post_finished+0x30a>
					T[id].onoff = atoi(token1);
 8000df4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000df8:	f016 f842 	bl	8016e80 <atoi>
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	484a      	ldr	r0, [pc, #296]	; (8000f28 <httpd_post_finished+0x420>)
 8000e00:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	4403      	add	r3, r0
 8000e0e:	334c      	adds	r3, #76	; 0x4c
 8000e10:	6019      	str	r1, [r3, #0]
				}
				/************************************************/
			}
			y++;
 8000e12:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <httpd_post_finished+0x424>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <httpd_post_finished+0x424>)
 8000e1a:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	f107 0218 	add.w	r2, r7, #24
 8000e22:	4943      	ldr	r1, [pc, #268]	; (8000f30 <httpd_post_finished+0x428>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f016 fa3b 	bl	80172a0 <strtok_r>
 8000e2a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8000e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f47f aec4 	bne.w	8000bc0 <httpd_post_finished+0xb8>
		}
		sprintf(nametoken, "infofield_%d=", id);
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000e40:	493c      	ldr	r1, [pc, #240]	; (8000f34 <httpd_post_finished+0x42c>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f016 f984 	bl	8017150 <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 8000e48:	f107 0220 	add.w	r2, r7, #32
 8000e4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff f9bc 	bl	80001d0 <strcmp>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10e      	bne.n	8000e7c <httpd_post_finished+0x374>
			strcpy(T[id].infofield, "null");
 8000e5e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	3328      	adds	r3, #40	; 0x28
 8000e6c:	4a2e      	ldr	r2, [pc, #184]	; (8000f28 <httpd_post_finished+0x420>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	3304      	adds	r3, #4
 8000e72:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <httpd_post_finished+0x430>)
 8000e74:	6810      	ldr	r0, [r2, #0]
 8000e76:	6018      	str	r0, [r3, #0]
 8000e78:	7912      	ldrb	r2, [r2, #4]
 8000e7a:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		z++;
 8000e7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e80:	3301      	adds	r3, #1
 8000e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		memset(name0, '\0', sizeof(name0));
 8000e86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e8a:	2232      	movs	r2, #50	; 0x32
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f016 f854 	bl	8016f3c <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 8000e94:	f107 0320 	add.w	r3, r7, #32
 8000e98:	2232      	movs	r2, #50	; 0x32
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f016 f84d 	bl	8016f3c <memset>
	while ((token = strtok_r(rest, "&", &rest))) {
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f107 021c 	add.w	r2, r7, #28
 8000ea8:	4924      	ldr	r1, [pc, #144]	; (8000f3c <httpd_post_finished+0x434>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f016 f9f8 	bl	80172a0 <strtok_r>
 8000eb0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8000eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f47f ae73 	bne.w	8000ba4 <httpd_post_finished+0x9c>
	}
	memset(urlline, '\0', sizeof(urlline));
 8000ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ec2:	4622      	mov	r2, r4
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f016 f838 	bl	8016f3c <memset>
	memset(bufervar, '\0', sizeof(bufervar));
 8000ecc:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	481b      	ldr	r0, [pc, #108]	; (8000f40 <httpd_post_finished+0x438>)
 8000ed4:	f016 f832 	bl	8016f3c <memset>
//memset(json, '\0', sizeof(json));
//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */

	zerg_write_data_to_sd(num_lines - 1);	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8000ed8:	2039      	movs	r0, #57	; 0x39
 8000eda:	f000 febb 	bl	8001c54 <zerg_write_data_to_sd>

	snprintf(response_uri, response_uri_len, "/tab.shtml");
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <httpd_post_finished+0x43c>)
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f016 f8ff 	bl	80170e8 <sniprintf>
	if (current_connection == connection) {
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <httpd_post_finished+0x440>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d110      	bne.n	8000f16 <httpd_post_finished+0x40e>
		if (valid_connection == connection) {
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <httpd_post_finished+0x444>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d105      	bne.n	8000f0a <httpd_post_finished+0x402>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/tab.shtml");
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <httpd_post_finished+0x43c>)
 8000f02:	4619      	mov	r1, r3
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f016 f8ef 	bl	80170e8 <sniprintf>
		}
		current_connection = NULL;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <httpd_post_finished+0x440>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <httpd_post_finished+0x444>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	46ad      	mov	sp, r5
}
 8000f1c:	bf00      	nop
 8000f1e:	37a8      	adds	r7, #168	; 0xa8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bdb0      	pop	{r4, r5, r7, pc}
 8000f24:	080189b8 	.word	0x080189b8
 8000f28:	200017f0 	.word	0x200017f0
 8000f2c:	20005ae4 	.word	0x20005ae4
 8000f30:	080189c0 	.word	0x080189c0
 8000f34:	080189c4 	.word	0x080189c4
 8000f38:	080189d4 	.word	0x080189d4
 8000f3c:	080189dc 	.word	0x080189dc
 8000f40:	20002a10 	.word	0x20002a10
 8000f44:	080189e0 	.word	0x080189e0
 8000f48:	200001d4 	.word	0x200001d4
 8000f4c:	200001d8 	.word	0x200001d8

08000f50 <http_server_init>:
//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	httpd_init();
 8000f54:	f00b fac8 	bl	800c4e8 <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <http_server_init+0x30>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <http_server_init+0x34>)
 8000f62:	f00b fae1 	bl	800c528 <http_set_ssi_handler>
// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	CGI_TAB[0] = FORM_CGI; // CGI структуру
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <http_server_init+0x38>)
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <http_server_init+0x3c>)
 8000f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6e:	e883 0003 	stmia.w	r3, {r0, r1}

//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(CGI_TAB, 1); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8000f72:	2101      	movs	r1, #1
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <http_server_init+0x38>)
 8000f76:	f00b fb19 	bl	800c5ac <http_set_cgi_handlers>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	08000599 	.word	0x08000599
 8000f88:	20005b08 	.word	0x20005b08
 8000f8c:	0801c1ac 	.word	0x0801c1ac

08000f90 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d013      	beq.n	8000fd0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fa8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fb0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00b      	beq.n	8000fd0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb8:	e000      	b.n	8000fbc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f9      	beq.n	8000fba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fc6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	2332      	movs	r3, #50	; 0x32
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <_write+0x48>)
 8000ff6:	f005 f80b 	bl	8006010 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e009      	b.n	8001014 <_write+0x34>
		ITM_SendChar(*ptr++);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffc1 	bl	8000f90 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf1      	blt.n	8001000 <_write+0x20>
	}
	return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20005c90 	.word	0x20005c90

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f000 fff6 	bl	8002020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f818 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 f8f2 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 800103c:	f000 f8c8 	bl	80011d0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001040:	f000 f87c 	bl	800113c <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 8001044:	f000 f89a 	bl	800117c <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8001048:	f006 fa64 	bl	8007514 <MX_LWIP_Init>
  MX_FATFS_Init();
 800104c:	f006 f81c 	bl	8007088 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8001050:	f7ff ff7e 	bl	8000f50 <http_server_init>

//  zerg_mount();
//  zerg_format();
//  zerg_open();
//  zerg_write();
  zerg_get_data_from_sd();
 8001054:	f000 fc0a 	bl	800186c <zerg_get_data_from_sd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      ethernetif_input(&gnetif);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <main+0x38>)
 800105a:	f006 fe33 	bl	8007cc4 <ethernetif_input>
      sys_check_timeouts();
 800105e:	f013 fa53 	bl	8014508 <sys_check_timeouts>
      ethernetif_input(&gnetif);
 8001062:	e7f9      	b.n	8001058 <main+0x2c>
 8001064:	20005b78 	.word	0x20005b78

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f015 ff60 	bl	8016f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <SystemClock_Config+0xcc>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemClock_Config+0xd0>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010dc:	23a8      	movs	r3, #168	; 0xa8
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 ff9f 	bl	8004030 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 f8e4 	bl	80012c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001108:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2105      	movs	r1, #5
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fa00 	bl	8004520 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001126:	f000 f8cd 	bl	80012c4 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <MX_SDIO_SD_Init+0x3c>)
 8001144:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20005c0c 	.word	0x20005c0c
 8001178:	40012c00 	.word	0x40012c00

0800117c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_USART6_UART_Init+0x50>)
 8001184:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011b4:	f004 fedf 	bl	8005f76 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011be:	f000 f881 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20005c90 	.word	0x20005c90
 80011cc:	40011400 	.word	0x40011400

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_DMA_Init+0x4c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <MX_DMA_Init+0x4c>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MX_DMA_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	203b      	movs	r0, #59	; 0x3b
 80011f8:	f001 f883 	bl	8002302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011fc:	203b      	movs	r0, #59	; 0x3b
 80011fe:	f001 f89c 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2045      	movs	r0, #69	; 0x45
 8001208:	f001 f87b 	bl	8002302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800120c:	2045      	movs	r0, #69	; 0x45
 800120e:	f001 f894 	bl	800233a <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MX_GPIO_Init+0xa0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <MX_GPIO_Init+0xa0>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MX_GPIO_Init+0xa0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_GPIO_Init+0xa0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <MX_GPIO_Init+0xa0>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_GPIO_Init+0xa0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_GPIO_Init+0xa0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <MX_GPIO_Init+0xa0>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_GPIO_Init+0xa0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_GPIO_Init+0xa0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <MX_GPIO_Init+0xa0>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <MX_GPIO_Init+0xa0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_GPIO_Init+0xa0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <MX_GPIO_Init+0xa0>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_GPIO_Init+0xa0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

}
 80012b2:	bf00      	nop
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_MspInit+0x4c>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_MspInit+0x4c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <HAL_MspInit+0x4c>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_MspInit+0x4c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a70      	ldr	r2, [pc, #448]	; (8001500 <HAL_SD_MspInit+0x1e0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	f040 80da 	bne.w	80014f8 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	4b6e      	ldr	r3, [pc, #440]	; (8001504 <HAL_SD_MspInit+0x1e4>)
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	4a6d      	ldr	r2, [pc, #436]	; (8001504 <HAL_SD_MspInit+0x1e4>)
 800134e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001352:	6453      	str	r3, [r2, #68]	; 0x44
 8001354:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <HAL_SD_MspInit+0x1e4>)
 8001356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	4b67      	ldr	r3, [pc, #412]	; (8001504 <HAL_SD_MspInit+0x1e4>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	4a66      	ldr	r2, [pc, #408]	; (8001504 <HAL_SD_MspInit+0x1e4>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
 8001370:	4b64      	ldr	r3, [pc, #400]	; (8001504 <HAL_SD_MspInit+0x1e4>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	4b60      	ldr	r3, [pc, #384]	; (8001504 <HAL_SD_MspInit+0x1e4>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4a5f      	ldr	r2, [pc, #380]	; (8001504 <HAL_SD_MspInit+0x1e4>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
 800138c:	4b5d      	ldr	r3, [pc, #372]	; (8001504 <HAL_SD_MspInit+0x1e4>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001398:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013aa:	230c      	movs	r3, #12
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4854      	ldr	r0, [pc, #336]	; (8001508 <HAL_SD_MspInit+0x1e8>)
 80013b6:	f002 fc9f 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013cc:	230c      	movs	r3, #12
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	484c      	ldr	r0, [pc, #304]	; (8001508 <HAL_SD_MspInit+0x1e8>)
 80013d8:	f002 fc8e 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013dc:	2304      	movs	r3, #4
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013ec:	230c      	movs	r3, #12
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4845      	ldr	r0, [pc, #276]	; (800150c <HAL_SD_MspInit+0x1ec>)
 80013f8:	f002 fc7e 	bl	8003cf8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80013fc:	4b44      	ldr	r3, [pc, #272]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 80013fe:	4a45      	ldr	r2, [pc, #276]	; (8001514 <HAL_SD_MspInit+0x1f4>)
 8001400:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001408:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800141e:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001424:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001430:	2220      	movs	r2, #32
 8001432:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 800143c:	2204      	movs	r2, #4
 800143e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001442:	2203      	movs	r2, #3
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001448:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001450:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001454:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001456:	482e      	ldr	r0, [pc, #184]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 8001458:	f000 ff8a 	bl	8002370 <HAL_DMA_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001462:	f7ff ff2f 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a29      	ldr	r2, [pc, #164]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
 800146c:	4a28      	ldr	r2, [pc, #160]	; (8001510 <HAL_SD_MspInit+0x1f0>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 8001474:	4a29      	ldr	r2, [pc, #164]	; (800151c <HAL_SD_MspInit+0x1fc>)
 8001476:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 800147a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 800148e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001492:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 8001496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800149a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 800149e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 80014a6:	2220      	movs	r2, #32
 80014a8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 80014b8:	2203      	movs	r2, #3
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 80014be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 80014c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80014cc:	4812      	ldr	r0, [pc, #72]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 80014ce:	f000 ff4f 	bl	8002370 <HAL_DMA_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80014d8:	f7ff fef4 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 80014e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80014e2:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <HAL_SD_MspInit+0x1f8>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	2031      	movs	r0, #49	; 0x31
 80014ee:	f000 ff08 	bl	8002302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80014f2:	2031      	movs	r0, #49	; 0x31
 80014f4:	f000 ff21 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40012c00 	.word	0x40012c00
 8001504:	40023800 	.word	0x40023800
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	20005b18 	.word	0x20005b18
 8001514:	40026458 	.word	0x40026458
 8001518:	20005bac 	.word	0x20005bac
 800151c:	400264a0 	.word	0x400264a0

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0x84>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d12b      	bne.n	800159a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_UART_MspInit+0x88>)
 800154c:	f043 0320 	orr.w	r3, r3, #32
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_UART_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800158a:	2308      	movs	r3, #8
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <HAL_UART_MspInit+0x8c>)
 8001596:	f002 fbaf 	bl	8003cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40011400 	.word	0x40011400
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020800 	.word	0x40020800

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 fd62 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <SDIO_IRQHandler+0x10>)
 800160a:	f003 fbfb 	bl	8004e04 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20005c0c 	.word	0x20005c0c

08001618 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA2_Stream3_IRQHandler+0x10>)
 800161e:	f000 ffcf 	bl	80025c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20005b18 	.word	0x20005b18

0800162c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA2_Stream6_IRQHandler+0x10>)
 8001632:	f000 ffc5 	bl	80025c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20005bac 	.word	0x20005bac

08001640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
	return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_kill>:

int _kill(int pid, int sig)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <_kill+0x20>)
 800165c:	2216      	movs	r2, #22
 800165e:	601a      	str	r2, [r3, #0]
	return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	200114e8 	.word	0x200114e8

08001674 <_exit>:

void _exit (int status)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800167c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ffe5 	bl	8001650 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001686:	e7fe      	b.n	8001686 <_exit+0x12>

08001688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e00a      	b.n	80016b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800169a:	f3af 8000 	nop.w
 800169e:	4601      	mov	r1, r0
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf0      	blt.n	800169a <_read+0x12>
	}

return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ea:	605a      	str	r2, [r3, #4]
	return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_isatty>:

int _isatty(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d205      	bcs.n	8001768 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <_sbrk+0x6c>)
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001766:	e009      	b.n	800177c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a06      	ldr	r2, [pc, #24]	; (8001790 <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	20020000 	.word	0x20020000
 800178c:	00000400 	.word	0x00000400
 8001790:	200001dc 	.word	0x200001dc
 8001794:	200114f8 	.word	0x200114f8
 8001798:	200114e8 	.word	0x200114e8

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <clear_buffer>:
uint32_t total, free_space;

extern struct table T[num_lines];		   // доступ из вне к 'struct table'.
/*--------------------------------------------------------------------------------------------------------------*/
// Очищаем буфер. / Clear buffer
void clear_buffer(void) {
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	e007      	b.n	80017dc <clear_buffer+0x1c>
		buffer[i] = '\0'; // BUFFER_SIZE
 80017cc:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <clear_buffer+0x30>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3301      	adds	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b63      	cmp	r3, #99	; 0x63
 80017e0:	ddf4      	ble.n	80017cc <clear_buffer+0xc>
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	200001e0 	.word	0x200001e0

080017f4 <zerg_mount>:
/*--------------------------------------------------------------------------------------------------------------*/
// Монтируем SD-карту / Mount SD card
void zerg_mount(void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 80017f8:	2200      	movs	r2, #0
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <zerg_mount+0x28>)
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <zerg_mount+0x2c>)
 80017fe:	f008 f937 	bl	8009a70 <f_mount>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <zerg_mount+0x1c>
		printf("Error Mounting SD Card\r\n");
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <zerg_mount+0x30>)
 800180a:	f015 fc25 	bl	8017058 <puts>
	} else {
		printf("SD card mounted successfully!\r\n");
	}
}
 800180e:	e002      	b.n	8001816 <zerg_mount+0x22>
		printf("SD card mounted successfully!\r\n");
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <zerg_mount+0x34>)
 8001812:	f015 fc21 	bl	8017058 <puts>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20008e20 	.word	0x20008e20
 8001820:	20009e54 	.word	0x20009e54
 8001824:	080189f8 	.word	0x080189f8
 8001828:	08018a10 	.word	0x08018a10

0800182c <zerg_open>:
		printf("SD-card formated successfully!\r\n");
	}
}
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем файл для записи если не существует то, создаем его! / Open file for writing (Create)
void zerg_open(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	if (f_open(&SDFile, (char*) name_sd, FA_CREATE_ALWAYS | FA_WRITE)
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <zerg_open+0x30>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	220a      	movs	r2, #10
 8001836:	4619      	mov	r1, r3
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <zerg_open+0x34>)
 800183a:	f008 f95f 	bl	8009afc <f_open>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <zerg_open+0x20>
	//if (f_open(&SDFile, (char*) "0:name_sd", FA_CREATE_ALWAYS | FA_WRITE) //Create destination file on the drive 0
			!= FR_OK) {
		printf("Error openning file\r\n");
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <zerg_open+0x38>)
 8001846:	f015 fc07 	bl	8017058 <puts>
	} else {
		printf("File %s Openned Successfully!\r\n", name_sd);
	}
}
 800184a:	e005      	b.n	8001858 <zerg_open+0x2c>
		printf("File %s Openned Successfully!\r\n", name_sd);
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <zerg_open+0x30>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <zerg_open+0x3c>)
 8001854:	f015 fb7a 	bl	8016f4c <iprintf>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000134 	.word	0x20000134
 8001860:	20008e24 	.word	0x20008e24
 8001864:	08018a6c 	.word	0x08018a6c
 8001868:	08018a84 	.word	0x08018a84

0800186c <zerg_get_data_from_sd>:
	}
	f_close(&SDFile);
	clear_buffer();
}

int zerg_get_data_from_sd(void) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
	zerg_mount();
 8001872:	f7ff ffbf 	bl	80017f4 <zerg_mount>
	f_open(&SDFile, (char*) name_sd, FA_READ);
 8001876:	4ba3      	ldr	r3, [pc, #652]	; (8001b04 <zerg_get_data_from_sd+0x298>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2201      	movs	r2, #1
 800187c:	4619      	mov	r1, r3
 800187e:	48a2      	ldr	r0, [pc, #648]	; (8001b08 <zerg_get_data_from_sd+0x29c>)
 8001880:	f008 f93c 	bl	8009afc <f_open>
	memset(rtext, 0, sizeof(rtext));
 8001884:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001888:	2100      	movs	r1, #0
 800188a:	48a0      	ldr	r0, [pc, #640]	; (8001b0c <zerg_get_data_from_sd+0x2a0>)
 800188c:	f015 fb56 	bl	8016f3c <memset>
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*) &bytesread);
 8001890:	4b9f      	ldr	r3, [pc, #636]	; (8001b10 <zerg_get_data_from_sd+0x2a4>)
 8001892:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001896:	499d      	ldr	r1, [pc, #628]	; (8001b0c <zerg_get_data_from_sd+0x2a0>)
 8001898:	489b      	ldr	r0, [pc, #620]	; (8001b08 <zerg_get_data_from_sd+0x29c>)
 800189a:	f008 fafb 	bl	8009e94 <f_read>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b9c      	ldr	r3, [pc, #624]	; (8001b14 <zerg_get_data_from_sd+0x2a8>)
 80018a4:	701a      	strb	r2, [r3, #0]
	if ((bytesread == 0) || (res != FR_OK)) {
 80018a6:	4b9a      	ldr	r3, [pc, #616]	; (8001b10 <zerg_get_data_from_sd+0x2a4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <zerg_get_data_from_sd+0x4a>
 80018ae:	4b99      	ldr	r3, [pc, #612]	; (8001b14 <zerg_get_data_from_sd+0x2a8>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <zerg_get_data_from_sd+0x54>
		printf("Failed to read file!\r\n");
 80018b6:	4898      	ldr	r0, [pc, #608]	; (8001b18 <zerg_get_data_from_sd+0x2ac>)
 80018b8:	f015 fbce 	bl	8017058 <puts>
		return 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	e1b5      	b.n	8001c2c <zerg_get_data_from_sd+0x3c0>
		//printf("File *%s* readed successfully! \n", name);
		//printf("File *%s* has content it is; %s\r\n",name_sd, (char *)rtext);
		//printf("Data from SD card:\r\n");
		//printf("%s\r\n", rtext);
		char *token1, *token2, *token3;
		char *rest = rtext;
 80018c0:	4b92      	ldr	r3, [pc, #584]	; (8001b0c <zerg_get_data_from_sd+0x2a0>)
 80018c2:	60bb      	str	r3, [r7, #8]
		char *name1; // для записи в структуру
		int id;
		int z = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
		int y = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]

		while ((token1 = strtok_r(rest, "\n", &rest))) {
 80018cc:	e19c      	b.n	8001c08 <zerg_get_data_from_sd+0x39c>
			//printf("token - %s\n", token1);
			char *rest1 = token1;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	607b      	str	r3, [r7, #4]
			y = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 80018d6:	e189      	b.n	8001bec <zerg_get_data_from_sd+0x380>
				//printf("NAME - %s\n", token2);
				z = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
				if (y == 0) {
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d11b      	bne.n	800191a <zerg_get_data_from_sd+0xae>
					// получение id
					char *rest2 = token2;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	603b      	str	r3, [r7, #0]
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 80018e6:	e00e      	b.n	8001906 <zerg_get_data_from_sd+0x9a>
						if (z == 0) {
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <zerg_get_data_from_sd+0x86>
							name1 = token2;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
						}
						if (z == 1) {
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d103      	bne.n	8001900 <zerg_get_data_from_sd+0x94>
							id = atoi(token3);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f015 fac1 	bl	8016e80 <atoi>
 80018fe:	6238      	str	r0, [r7, #32]
							//printf("ID %d\n", id);
						}
						z++;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	3301      	adds	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	463a      	mov	r2, r7
 800190a:	4984      	ldr	r1, [pc, #528]	; (8001b1c <zerg_get_data_from_sd+0x2b0>)
 800190c:	4618      	mov	r0, r3
 800190e:	f015 fcc7 	bl	80172a0 <strtok_r>
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1e6      	bne.n	80018e8 <zerg_get_data_from_sd+0x7c>
					}
				}
				if (y == 1) {
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b01      	cmp	r3, #1
 800191e:	f040 8162 	bne.w	8001be6 <zerg_get_data_from_sd+0x37a>
					//printf("VAL = %s\n", token2);
					// записываем в структуру
					/************************************************/
					if (strcmp(name1, "pulluptype") == 0) {
 8001922:	497f      	ldr	r1, [pc, #508]	; (8001b20 <zerg_get_data_from_sd+0x2b4>)
 8001924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001926:	f7fe fc53 	bl	80001d0 <strcmp>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d117      	bne.n	8001960 <zerg_get_data_from_sd+0xf4>
						strcpy(T[id].pulluptype, token2);
 8001930:	6a3a      	ldr	r2, [r7, #32]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	4a7a      	ldr	r2, [pc, #488]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 800193c:	4413      	add	r3, r2
 800193e:	6939      	ldr	r1, [r7, #16]
 8001940:	4618      	mov	r0, r3
 8001942:	f015 fc41 	bl	80171c8 <strcpy>
						printf(" pulluptype_%d is: %s \n", id,
								T[id].pulluptype);
 8001946:	6a3a      	ldr	r2, [r7, #32]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4a74      	ldr	r2, [pc, #464]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001952:	4413      	add	r3, r2
						printf(" pulluptype_%d is: %s \n", id,
 8001954:	461a      	mov	r2, r3
 8001956:	6a39      	ldr	r1, [r7, #32]
 8001958:	4873      	ldr	r0, [pc, #460]	; (8001b28 <zerg_get_data_from_sd+0x2bc>)
 800195a:	f015 faf7 	bl	8016f4c <iprintf>
 800195e:	e142      	b.n	8001be6 <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "bounceinterval") == 0) {
 8001960:	4972      	ldr	r1, [pc, #456]	; (8001b2c <zerg_get_data_from_sd+0x2c0>)
 8001962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001964:	f7fe fc34 	bl	80001d0 <strcmp>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d11b      	bne.n	80019a6 <zerg_get_data_from_sd+0x13a>
						T[id].bounceinterval = atoi(token2);
 800196e:	6938      	ldr	r0, [r7, #16]
 8001970:	f015 fa86 	bl	8016e80 <atoi>
 8001974:	4601      	mov	r1, r0
 8001976:	486b      	ldr	r0, [pc, #428]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001978:	6a3a      	ldr	r2, [r7, #32]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4403      	add	r3, r0
 8001984:	3314      	adds	r3, #20
 8001986:	6019      	str	r1, [r3, #0]
						printf(" bounceinterval_%d is: %d \n", id,
 8001988:	4966      	ldr	r1, [pc, #408]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 800198a:	6a3a      	ldr	r2, [r7, #32]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	440b      	add	r3, r1
 8001996:	3314      	adds	r3, #20
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	4864      	ldr	r0, [pc, #400]	; (8001b30 <zerg_get_data_from_sd+0x2c4>)
 80019a0:	f015 fad4 	bl	8016f4c <iprintf>
 80019a4:	e11f      	b.n	8001be6 <zerg_get_data_from_sd+0x37a>
								T[id].bounceinterval);
					} else if (strcmp(name1, "holdinterval") == 0) {
 80019a6:	4963      	ldr	r1, [pc, #396]	; (8001b34 <zerg_get_data_from_sd+0x2c8>)
 80019a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019aa:	f7fe fc11 	bl	80001d0 <strcmp>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11b      	bne.n	80019ec <zerg_get_data_from_sd+0x180>
						T[id].holdinterval = atoi(token2);
 80019b4:	6938      	ldr	r0, [r7, #16]
 80019b6:	f015 fa63 	bl	8016e80 <atoi>
 80019ba:	4601      	mov	r1, r0
 80019bc:	4859      	ldr	r0, [pc, #356]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 80019be:	6a3a      	ldr	r2, [r7, #32]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4403      	add	r3, r0
 80019ca:	3318      	adds	r3, #24
 80019cc:	6019      	str	r1, [r3, #0]
						printf(" holdinterval_%d is: %d \n", id,
 80019ce:	4955      	ldr	r1, [pc, #340]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 80019d0:	6a3a      	ldr	r2, [r7, #32]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	440b      	add	r3, r1
 80019dc:	3318      	adds	r3, #24
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	6a39      	ldr	r1, [r7, #32]
 80019e4:	4854      	ldr	r0, [pc, #336]	; (8001b38 <zerg_get_data_from_sd+0x2cc>)
 80019e6:	f015 fab1 	bl	8016f4c <iprintf>
 80019ea:	e0fc      	b.n	8001be6 <zerg_get_data_from_sd+0x37a>
								T[id].holdinterval);
					} else if (strcmp(name1, "repeat") == 0) {
 80019ec:	4953      	ldr	r1, [pc, #332]	; (8001b3c <zerg_get_data_from_sd+0x2d0>)
 80019ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019f0:	f7fe fbee 	bl	80001d0 <strcmp>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d11b      	bne.n	8001a32 <zerg_get_data_from_sd+0x1c6>
						T[id].repeat = atoi(token2);
 80019fa:	6938      	ldr	r0, [r7, #16]
 80019fc:	f015 fa40 	bl	8016e80 <atoi>
 8001a00:	4601      	mov	r1, r0
 8001a02:	4848      	ldr	r0, [pc, #288]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001a04:	6a3a      	ldr	r2, [r7, #32]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	4403      	add	r3, r0
 8001a10:	331c      	adds	r3, #28
 8001a12:	6019      	str	r1, [r3, #0]
						printf(" repeat_%d is: %d \n", id, T[id].repeat);
 8001a14:	4943      	ldr	r1, [pc, #268]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001a16:	6a3a      	ldr	r2, [r7, #32]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	440b      	add	r3, r1
 8001a22:	331c      	adds	r3, #28
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	6a39      	ldr	r1, [r7, #32]
 8001a2a:	4845      	ldr	r0, [pc, #276]	; (8001b40 <zerg_get_data_from_sd+0x2d4>)
 8001a2c:	f015 fa8e 	bl	8016f4c <iprintf>
 8001a30:	e0d9      	b.n	8001be6 <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "repeatinterval") == 0) {
 8001a32:	4944      	ldr	r1, [pc, #272]	; (8001b44 <zerg_get_data_from_sd+0x2d8>)
 8001a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a36:	f7fe fbcb 	bl	80001d0 <strcmp>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d11b      	bne.n	8001a78 <zerg_get_data_from_sd+0x20c>
						T[id].repeatinterval = atoi(token2);
 8001a40:	6938      	ldr	r0, [r7, #16]
 8001a42:	f015 fa1d 	bl	8016e80 <atoi>
 8001a46:	4601      	mov	r1, r0
 8001a48:	4836      	ldr	r0, [pc, #216]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4403      	add	r3, r0
 8001a56:	3320      	adds	r3, #32
 8001a58:	6019      	str	r1, [r3, #0]
						printf(" repeatinterval_%d is: %d \n", id,
 8001a5a:	4932      	ldr	r1, [pc, #200]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001a5c:	6a3a      	ldr	r2, [r7, #32]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	440b      	add	r3, r1
 8001a68:	3320      	adds	r3, #32
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	6a39      	ldr	r1, [r7, #32]
 8001a70:	4835      	ldr	r0, [pc, #212]	; (8001b48 <zerg_get_data_from_sd+0x2dc>)
 8001a72:	f015 fa6b 	bl	8016f4c <iprintf>
 8001a76:	e0b6      	b.n	8001be6 <zerg_get_data_from_sd+0x37a>
								T[id].repeatinterval);
					} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8001a78:	4934      	ldr	r1, [pc, #208]	; (8001b4c <zerg_get_data_from_sd+0x2e0>)
 8001a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a7c:	f7fe fba8 	bl	80001d0 <strcmp>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11b      	bne.n	8001abe <zerg_get_data_from_sd+0x252>
						T[id].doubleclickinterval = atoi(token2);
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f015 f9fa 	bl	8016e80 <atoi>
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	4825      	ldr	r0, [pc, #148]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001a90:	6a3a      	ldr	r2, [r7, #32]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4403      	add	r3, r0
 8001a9c:	3324      	adds	r3, #36	; 0x24
 8001a9e:	6019      	str	r1, [r3, #0]
						printf(" doubleclickinterval_%d is: %d \n", id,
 8001aa0:	4920      	ldr	r1, [pc, #128]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001aa2:	6a3a      	ldr	r2, [r7, #32]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	440b      	add	r3, r1
 8001aae:	3324      	adds	r3, #36	; 0x24
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6a39      	ldr	r1, [r7, #32]
 8001ab6:	4826      	ldr	r0, [pc, #152]	; (8001b50 <zerg_get_data_from_sd+0x2e4>)
 8001ab8:	f015 fa48 	bl	8016f4c <iprintf>
 8001abc:	e093      	b.n	8001be6 <zerg_get_data_from_sd+0x37a>
								T[id].doubleclickinterval);
					} else if (strcmp(name1, "preventclick") == 0) {
 8001abe:	4925      	ldr	r1, [pc, #148]	; (8001b54 <zerg_get_data_from_sd+0x2e8>)
 8001ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ac2:	f7fe fb85 	bl	80001d0 <strcmp>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d147      	bne.n	8001b5c <zerg_get_data_from_sd+0x2f0>
						T[id].preventclick = atoi(token2);
 8001acc:	6938      	ldr	r0, [r7, #16]
 8001ace:	f015 f9d7 	bl	8016e80 <atoi>
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	4813      	ldr	r0, [pc, #76]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001ad6:	6a3a      	ldr	r2, [r7, #32]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4403      	add	r3, r0
 8001ae2:	3328      	adds	r3, #40	; 0x28
 8001ae4:	6019      	str	r1, [r3, #0]
						printf(" preventclick_%d is: %d \n", id,
 8001ae6:	490f      	ldr	r1, [pc, #60]	; (8001b24 <zerg_get_data_from_sd+0x2b8>)
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	440b      	add	r3, r1
 8001af4:	3328      	adds	r3, #40	; 0x28
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	6a39      	ldr	r1, [r7, #32]
 8001afc:	4816      	ldr	r0, [pc, #88]	; (8001b58 <zerg_get_data_from_sd+0x2ec>)
 8001afe:	f015 fa25 	bl	8016f4c <iprintf>
 8001b02:	e070      	b.n	8001be6 <zerg_get_data_from_sd+0x37a>
 8001b04:	20000134 	.word	0x20000134
 8001b08:	20008e24 	.word	0x20008e24
 8001b0c:	20005d04 	.word	0x20005d04
 8001b10:	20005ce0 	.word	0x20005ce0
 8001b14:	20008e14 	.word	0x20008e14
 8001b18:	08018ad8 	.word	0x08018ad8
 8001b1c:	08018b0c 	.word	0x08018b0c
 8001b20:	08018b10 	.word	0x08018b10
 8001b24:	200017f0 	.word	0x200017f0
 8001b28:	08018b1c 	.word	0x08018b1c
 8001b2c:	08018b34 	.word	0x08018b34
 8001b30:	08018b44 	.word	0x08018b44
 8001b34:	08018b60 	.word	0x08018b60
 8001b38:	08018b70 	.word	0x08018b70
 8001b3c:	08018b8c 	.word	0x08018b8c
 8001b40:	08018b94 	.word	0x08018b94
 8001b44:	08018ba8 	.word	0x08018ba8
 8001b48:	08018bb8 	.word	0x08018bb8
 8001b4c:	08018bd4 	.word	0x08018bd4
 8001b50:	08018be8 	.word	0x08018be8
 8001b54:	08018c0c 	.word	0x08018c0c
 8001b58:	08018c1c 	.word	0x08018c1c
								T[id].preventclick);
					} else if (strcmp(name1, "infofield") == 0) {
 8001b5c:	4935      	ldr	r1, [pc, #212]	; (8001c34 <zerg_get_data_from_sd+0x3c8>)
 8001b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b60:	f7fe fb36 	bl	80001d0 <strcmp>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d11b      	bne.n	8001ba2 <zerg_get_data_from_sd+0x336>
						strcpy(T[id].infofield, token2);
 8001b6a:	6a3a      	ldr	r2, [r7, #32]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	3328      	adds	r3, #40	; 0x28
 8001b76:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <zerg_get_data_from_sd+0x3cc>)
 8001b78:	4413      	add	r3, r2
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	6939      	ldr	r1, [r7, #16]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f015 fb22 	bl	80171c8 <strcpy>
						printf(" infofield_%d is: %s \n", id, T[id].infofield);
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	3328      	adds	r3, #40	; 0x28
 8001b90:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <zerg_get_data_from_sd+0x3cc>)
 8001b92:	4413      	add	r3, r2
 8001b94:	3304      	adds	r3, #4
 8001b96:	461a      	mov	r2, r3
 8001b98:	6a39      	ldr	r1, [r7, #32]
 8001b9a:	4828      	ldr	r0, [pc, #160]	; (8001c3c <zerg_get_data_from_sd+0x3d0>)
 8001b9c:	f015 f9d6 	bl	8016f4c <iprintf>
 8001ba0:	e021      	b.n	8001be6 <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "onoff") == 0) {
 8001ba2:	4927      	ldr	r1, [pc, #156]	; (8001c40 <zerg_get_data_from_sd+0x3d4>)
 8001ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ba6:	f7fe fb13 	bl	80001d0 <strcmp>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11a      	bne.n	8001be6 <zerg_get_data_from_sd+0x37a>
						T[id].onoff = atoi(token2);
 8001bb0:	6938      	ldr	r0, [r7, #16]
 8001bb2:	f015 f965 	bl	8016e80 <atoi>
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	481f      	ldr	r0, [pc, #124]	; (8001c38 <zerg_get_data_from_sd+0x3cc>)
 8001bba:	6a3a      	ldr	r2, [r7, #32]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4403      	add	r3, r0
 8001bc6:	334c      	adds	r3, #76	; 0x4c
 8001bc8:	6019      	str	r1, [r3, #0]
						printf(" onoff_%d is: %d \n", id, T[id].onoff);
 8001bca:	491b      	ldr	r1, [pc, #108]	; (8001c38 <zerg_get_data_from_sd+0x3cc>)
 8001bcc:	6a3a      	ldr	r2, [r7, #32]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	440b      	add	r3, r1
 8001bd8:	334c      	adds	r3, #76	; 0x4c
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	6a39      	ldr	r1, [r7, #32]
 8001be0:	4818      	ldr	r0, [pc, #96]	; (8001c44 <zerg_get_data_from_sd+0x3d8>)
 8001be2:	f015 f9b3 	bl	8016f4c <iprintf>
					}
					/************************************************/
				}
				y++;
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61bb      	str	r3, [r7, #24]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	1d3a      	adds	r2, r7, #4
 8001bf0:	4915      	ldr	r1, [pc, #84]	; (8001c48 <zerg_get_data_from_sd+0x3dc>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f015 fb54 	bl	80172a0 <strtok_r>
 8001bf8:	6138      	str	r0, [r7, #16]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f ae6b 	bne.w	80018d8 <zerg_get_data_from_sd+0x6c>
			}
			z++;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
		while ((token1 = strtok_r(rest, "\n", &rest))) {
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f107 0208 	add.w	r2, r7, #8
 8001c0e:	490f      	ldr	r1, [pc, #60]	; (8001c4c <zerg_get_data_from_sd+0x3e0>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f015 fb45 	bl	80172a0 <strtok_r>
 8001c16:	6178      	str	r0, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f ae57 	bne.w	80018ce <zerg_get_data_from_sd+0x62>
		}
	}
	f_close(&SDFile);
 8001c20:	480b      	ldr	r0, [pc, #44]	; (8001c50 <zerg_get_data_from_sd+0x3e4>)
 8001c22:	f008 fca8 	bl	800a576 <f_close>
	clear_buffer();
 8001c26:	f7ff fdcb 	bl	80017c0 <clear_buffer>
	return 0;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	08018c38 	.word	0x08018c38
 8001c38:	200017f0 	.word	0x200017f0
 8001c3c:	08018c44 	.word	0x08018c44
 8001c40:	08018c5c 	.word	0x08018c5c
 8001c44:	08018c64 	.word	0x08018c64
 8001c48:	08018c78 	.word	0x08018c78
 8001c4c:	08018c7c 	.word	0x08018c7c
 8001c50:	20008e24 	.word	0x20008e24

08001c54 <zerg_write_data_to_sd>:

// Запись структуры на SD-card / Write our struct to the SD-card
void zerg_write_data_to_sd(int num) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	f5ad 5d6d 	sub.w	sp, sp, #15168	; 0x3b40
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c62:	3b2c      	subs	r3, #44	; 0x2c
 8001c64:	6018      	str	r0, [r3, #0]
	  zerg_mount();
 8001c66:	f7ff fdc5 	bl	80017f4 <zerg_mount>
	  zerg_open();
 8001c6a:	f7ff fddf 	bl	800182c <zerg_open>
	char full_data[15000];
	char line[200];

	for (int id = 0; id <= num; id++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001c74:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e13a      	b.n	8001ef2 <zerg_write_data_to_sd+0x29e>
//		printf(" doubleclickinterval is: %d \n", T[id].doubleclickinterval);
//		printf(" preventclick is: %d \n", T[id].preventclick);
//		printf(" infofield is: %s \n", T[id].infofield);
//		printf(" onoff is: %d \n", T[id].onoff);

		sprintf(line,"pulluptype_%d=%s\n",id,T[id].pulluptype);
 8001c7c:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001c80:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	4ac0      	ldr	r2, [pc, #768]	; (8001f90 <zerg_write_data_to_sd+0x33c>)
 8001c90:	4413      	add	r3, r2
 8001c92:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001c96:	3824      	subs	r0, #36	; 0x24
 8001c98:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001c9c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	49bc      	ldr	r1, [pc, #752]	; (8001f94 <zerg_write_data_to_sd+0x340>)
 8001ca4:	f015 fa54 	bl	8017150 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001ca8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cac:	3a24      	subs	r2, #36	; 0x24
 8001cae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cb2:	3b1c      	subs	r3, #28
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f015 fa6a 	bl	8017190 <strcat>
		sprintf(line,"bounceinterval_%d=%d\n",id,T[id].bounceinterval);
 8001cbc:	49b4      	ldr	r1, [pc, #720]	; (8001f90 <zerg_write_data_to_sd+0x33c>)
 8001cbe:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001cc2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3314      	adds	r3, #20
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001cda:	3824      	subs	r0, #36	; 0x24
 8001cdc:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001ce0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	49ac      	ldr	r1, [pc, #688]	; (8001f98 <zerg_write_data_to_sd+0x344>)
 8001ce8:	f015 fa32 	bl	8017150 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001cec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cf0:	3a24      	subs	r2, #36	; 0x24
 8001cf2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cf6:	3b1c      	subs	r3, #28
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f015 fa48 	bl	8017190 <strcat>
		sprintf(line,"holdinterval_%d=%d\n",id,T[id].holdinterval);
 8001d00:	49a3      	ldr	r1, [pc, #652]	; (8001f90 <zerg_write_data_to_sd+0x33c>)
 8001d02:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001d06:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	440b      	add	r3, r1
 8001d16:	3318      	adds	r3, #24
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d1e:	3824      	subs	r0, #36	; 0x24
 8001d20:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001d24:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	499c      	ldr	r1, [pc, #624]	; (8001f9c <zerg_write_data_to_sd+0x348>)
 8001d2c:	f015 fa10 	bl	8017150 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001d30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d34:	3a24      	subs	r2, #36	; 0x24
 8001d36:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d3a:	3b1c      	subs	r3, #28
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f015 fa26 	bl	8017190 <strcat>
		sprintf(line,"repeat_%d=%d\n",id,T[id].repeat);
 8001d44:	4992      	ldr	r1, [pc, #584]	; (8001f90 <zerg_write_data_to_sd+0x33c>)
 8001d46:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001d4a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	440b      	add	r3, r1
 8001d5a:	331c      	adds	r3, #28
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d62:	3824      	subs	r0, #36	; 0x24
 8001d64:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001d68:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	498c      	ldr	r1, [pc, #560]	; (8001fa0 <zerg_write_data_to_sd+0x34c>)
 8001d70:	f015 f9ee 	bl	8017150 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001d74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d78:	3a24      	subs	r2, #36	; 0x24
 8001d7a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d7e:	3b1c      	subs	r3, #28
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f015 fa04 	bl	8017190 <strcat>
		sprintf(line,"repeatinterval_%d=%d\n",id,T[id].repeatinterval);
 8001d88:	4981      	ldr	r1, [pc, #516]	; (8001f90 <zerg_write_data_to_sd+0x33c>)
 8001d8a:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001d8e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3320      	adds	r3, #32
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001da6:	3824      	subs	r0, #36	; 0x24
 8001da8:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001dac:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	497c      	ldr	r1, [pc, #496]	; (8001fa4 <zerg_write_data_to_sd+0x350>)
 8001db4:	f015 f9cc 	bl	8017150 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001db8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dbc:	3a24      	subs	r2, #36	; 0x24
 8001dbe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001dc2:	3b1c      	subs	r3, #28
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f015 f9e2 	bl	8017190 <strcat>
		sprintf(line,"doubleclickinterval_%d=%d\n",id,T[id].doubleclickinterval);
 8001dcc:	4970      	ldr	r1, [pc, #448]	; (8001f90 <zerg_write_data_to_sd+0x33c>)
 8001dce:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001dd2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	440b      	add	r3, r1
 8001de2:	3324      	adds	r3, #36	; 0x24
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001dea:	3824      	subs	r0, #36	; 0x24
 8001dec:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001df0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	496c      	ldr	r1, [pc, #432]	; (8001fa8 <zerg_write_data_to_sd+0x354>)
 8001df8:	f015 f9aa 	bl	8017150 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001dfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e00:	3a24      	subs	r2, #36	; 0x24
 8001e02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e06:	3b1c      	subs	r3, #28
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f015 f9c0 	bl	8017190 <strcat>
		sprintf(line,"preventclick_%d=%d\n",id,T[id].doubleclickinterval);
 8001e10:	495f      	ldr	r1, [pc, #380]	; (8001f90 <zerg_write_data_to_sd+0x33c>)
 8001e12:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001e16:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	440b      	add	r3, r1
 8001e26:	3324      	adds	r3, #36	; 0x24
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001e2e:	3824      	subs	r0, #36	; 0x24
 8001e30:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001e34:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	495c      	ldr	r1, [pc, #368]	; (8001fac <zerg_write_data_to_sd+0x358>)
 8001e3c:	f015 f988 	bl	8017150 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001e40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e44:	3a24      	subs	r2, #36	; 0x24
 8001e46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e4a:	3b1c      	subs	r3, #28
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f015 f99e 	bl	8017190 <strcat>
		sprintf(line,"infofield_%d=%s\n",id,T[id].infofield);
 8001e54:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001e58:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	3328      	adds	r3, #40	; 0x28
 8001e68:	4a49      	ldr	r2, [pc, #292]	; (8001f90 <zerg_write_data_to_sd+0x33c>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001e72:	3824      	subs	r0, #36	; 0x24
 8001e74:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001e78:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	494c      	ldr	r1, [pc, #304]	; (8001fb0 <zerg_write_data_to_sd+0x35c>)
 8001e80:	f015 f966 	bl	8017150 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001e84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e88:	3a24      	subs	r2, #36	; 0x24
 8001e8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e8e:	3b1c      	subs	r3, #28
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f015 f97c 	bl	8017190 <strcat>
		sprintf(line,"onoff_%d=%d\n",id,T[id].onoff);
 8001e98:	493d      	ldr	r1, [pc, #244]	; (8001f90 <zerg_write_data_to_sd+0x33c>)
 8001e9a:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001e9e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	440b      	add	r3, r1
 8001eae:	334c      	adds	r3, #76	; 0x4c
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001eb6:	3824      	subs	r0, #36	; 0x24
 8001eb8:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001ebc:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	493c      	ldr	r1, [pc, #240]	; (8001fb4 <zerg_write_data_to_sd+0x360>)
 8001ec4:	f015 f944 	bl	8017150 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001ec8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ecc:	3a24      	subs	r2, #36	; 0x24
 8001ece:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ed2:	3b1c      	subs	r3, #28
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f015 f95a 	bl	8017190 <strcat>
	for (int id = 0; id <= num; id++) {
 8001edc:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001ee0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001eec:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ef6:	3b2c      	subs	r3, #44	; 0x2c
 8001ef8:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001efc:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f77f aeb9 	ble.w	8001c7c <zerg_write_data_to_sd+0x28>
	}
		res = f_write(&SDFile, full_data, strlen((char*) full_data), (void*) &byteswritten);
 8001f0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f0e:	3b1c      	subs	r3, #28
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe f967 	bl	80001e4 <strlen>
 8001f16:	4602      	mov	r2, r0
 8001f18:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001f1c:	391c      	subs	r1, #28
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <zerg_write_data_to_sd+0x364>)
 8001f20:	4826      	ldr	r0, [pc, #152]	; (8001fbc <zerg_write_data_to_sd+0x368>)
 8001f22:	f008 f916 	bl	800a152 <f_write>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <zerg_write_data_to_sd+0x36c>)
 8001f2c:	701a      	strb	r2, [r3, #0]
		if ((byteswritten == 0) || (res != FR_OK)) {
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <zerg_write_data_to_sd+0x364>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <zerg_write_data_to_sd+0x2ea>
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <zerg_write_data_to_sd+0x36c>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <zerg_write_data_to_sd+0x2fc>
			printf("Failed to write file!\r\n");
 8001f3e:	4821      	ldr	r0, [pc, #132]	; (8001fc4 <zerg_write_data_to_sd+0x370>)
 8001f40:	f015 f88a 	bl	8017058 <puts>
			f_close(&SDFile);
 8001f44:	481d      	ldr	r0, [pc, #116]	; (8001fbc <zerg_write_data_to_sd+0x368>)
 8001f46:	f008 fb16 	bl	800a576 <f_close>
			clear_buffer();
 8001f4a:	f7ff fc39 	bl	80017c0 <clear_buffer>
 8001f4e:	e007      	b.n	8001f60 <zerg_write_data_to_sd+0x30c>
		} else {
			printf("File written successfully\r\n");
 8001f50:	481d      	ldr	r0, [pc, #116]	; (8001fc8 <zerg_write_data_to_sd+0x374>)
 8001f52:	f015 f881 	bl	8017058 <puts>
			f_close(&SDFile);
 8001f56:	4819      	ldr	r0, [pc, #100]	; (8001fbc <zerg_write_data_to_sd+0x368>)
 8001f58:	f008 fb0d 	bl	800a576 <f_close>
			clear_buffer();
 8001f5c:	f7ff fc30 	bl	80017c0 <clear_buffer>
		}
		memset(full_data, 0, sizeof(full_data));
 8001f60:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f64:	3b1c      	subs	r3, #28
 8001f66:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f014 ffe5 	bl	8016f3c <memset>
		memset(line, 0, sizeof(line));
 8001f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f76:	3b24      	subs	r3, #36	; 0x24
 8001f78:	22c8      	movs	r2, #200	; 0xc8
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f014 ffdd 	bl	8016f3c <memset>
		//zerg_read();
		}
 8001f82:	bf00      	nop
 8001f84:	f507 576d 	add.w	r7, r7, #15168	; 0x3b40
 8001f88:	3730      	adds	r7, #48	; 0x30
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200017f0 	.word	0x200017f0
 8001f94:	08018c80 	.word	0x08018c80
 8001f98:	08018c94 	.word	0x08018c94
 8001f9c:	08018cac 	.word	0x08018cac
 8001fa0:	08018cc0 	.word	0x08018cc0
 8001fa4:	08018cd0 	.word	0x08018cd0
 8001fa8:	08018ce8 	.word	0x08018ce8
 8001fac:	08018d04 	.word	0x08018d04
 8001fb0:	08018d18 	.word	0x08018d18
 8001fb4:	08018d2c 	.word	0x08018d2c
 8001fb8:	20005cd8 	.word	0x20005cd8
 8001fbc:	20008e24 	.word	0x20008e24
 8001fc0:	20008e14 	.word	0x20008e14
 8001fc4:	08018aa4 	.word	0x08018aa4
 8001fc8:	08018abc 	.word	0x08018abc

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ff6:	f7ff fbd1 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f014 ff45 	bl	8016e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7ff f815 	bl	800102c <main>
  bx  lr    
 8002002:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8002010:	0801ed44 	.word	0x0801ed44
  ldr r2, =_sbss
 8002014:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8002018:	200114f8 	.word	0x200114f8

0800201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>
	...

08002020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_Init+0x40>)
 800202a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800202e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_Init+0x40>)
 8002036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_Init+0x40>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 f94f 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800204e:	200f      	movs	r0, #15
 8002050:	f000 f808 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002054:	f7ff f93c 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f967 	bl	8002356 <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a0:	f000 f92f 	bl	8002302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000138 	.word	0x20000138
 80020bc:	20000140 	.word	0x20000140
 80020c0:	2000013c 	.word	0x2000013c

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000140 	.word	0x20000140
 80020e8:	20008e18 	.word	0x20008e18

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20008e18 	.word	0x20008e18

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000140 	.word	0x20000140

0800214c <__NVIC_SetPriorityGrouping>:
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	; (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	; (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <SysTick_Config>:
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022cc:	f7ff ff8e 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff29 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff3e 	bl	8002194 <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff8e 	bl	8002240 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5d 	bl	80021ec <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff31 	bl	80021b0 <__NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffa2 	bl	80022a8 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff feb6 	bl	80020ec <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e099      	b.n	80024c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ac:	e00f      	b.n	80023ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ae:	f7ff fe9d 	bl	80020ec <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d908      	bls.n	80023ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2203      	movs	r2, #3
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e078      	b.n	80024c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e8      	bne.n	80023ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <HAL_DMA_Init+0x158>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	2b04      	cmp	r3, #4
 8002426:	d107      	bne.n	8002438 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	4313      	orrs	r3, r2
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f023 0307 	bic.w	r3, r3, #7
 800244e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b04      	cmp	r3, #4
 8002460:	d117      	bne.n	8002492 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00e      	beq.n	8002492 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fa9d 	bl	80029b4 <DMA_CheckFifoParam>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800248e:	2301      	movs	r3, #1
 8002490:	e016      	b.n	80024c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa54 	bl	8002948 <DMA_CalcBaseAndBitshift>
 80024a0:	4603      	mov	r3, r0
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	223f      	movs	r2, #63	; 0x3f
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	f010803f 	.word	0xf010803f

080024cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_DMA_Start_IT+0x26>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e040      	b.n	8002574 <HAL_DMA_Start_IT+0xa8>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d12f      	bne.n	8002566 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f9e6 	bl	80028ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	223f      	movs	r2, #63	; 0x3f
 8002526:	409a      	lsls	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0216 	orr.w	r2, r2, #22
 800253a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0208 	orr.w	r2, r2, #8
 8002552:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e005      	b.n	8002572 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800256e:	2302      	movs	r3, #2
 8002570:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002572:	7dfb      	ldrb	r3, [r7, #23]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d004      	beq.n	800259a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00c      	b.n	80025b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2205      	movs	r2, #5
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025cc:	4b92      	ldr	r3, [pc, #584]	; (8002818 <HAL_DMA_IRQHandler+0x258>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a92      	ldr	r2, [pc, #584]	; (800281c <HAL_DMA_IRQHandler+0x25c>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0a9b      	lsrs	r3, r3, #10
 80025d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	2208      	movs	r2, #8
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01a      	beq.n	800262c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0204 	bic.w	r2, r2, #4
 8002612:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	2208      	movs	r2, #8
 800261a:	409a      	lsls	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	2201      	movs	r2, #1
 8002632:	409a      	lsls	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d012      	beq.n	8002662 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2201      	movs	r2, #1
 8002650:	409a      	lsls	r2, r3
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	f043 0202 	orr.w	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	2204      	movs	r2, #4
 8002668:	409a      	lsls	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	2204      	movs	r2, #4
 8002686:	409a      	lsls	r2, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	2210      	movs	r2, #16
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d043      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d03c      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2210      	movs	r2, #16
 80026bc:	409a      	lsls	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d018      	beq.n	8002702 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d108      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d024      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
 80026ee:	e01f      	b.n	8002730 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
 8002700:	e016      	b.n	8002730 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d107      	bne.n	8002720 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0208 	bic.w	r2, r2, #8
 800271e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	2220      	movs	r2, #32
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 808e 	beq.w	800285e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8086 	beq.w	800285e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2220      	movs	r2, #32
 8002758:	409a      	lsls	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b05      	cmp	r3, #5
 8002768:	d136      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0216 	bic.w	r2, r2, #22
 8002778:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002788:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d103      	bne.n	800279a <HAL_DMA_IRQHandler+0x1da>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0208 	bic.w	r2, r2, #8
 80027a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	223f      	movs	r2, #63	; 0x3f
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d07d      	beq.n	80028ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
        }
        return;
 80027d6:	e078      	b.n	80028ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01c      	beq.n	8002820 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d108      	bne.n	8002806 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d030      	beq.n	800285e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
 8002804:	e02b      	b.n	800285e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d027      	beq.n	800285e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
 8002816:	e022      	b.n	800285e <HAL_DMA_IRQHandler+0x29e>
 8002818:	20000138 	.word	0x20000138
 800281c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0210 	bic.w	r2, r2, #16
 800283c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	2b00      	cmp	r3, #0
 8002864:	d032      	beq.n	80028cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d022      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2205      	movs	r2, #5
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3301      	adds	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	429a      	cmp	r2, r3
 8002894:	d307      	bcc.n	80028a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f2      	bne.n	800288a <HAL_DMA_IRQHandler+0x2ca>
 80028a4:	e000      	b.n	80028a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
 80028c8:	e000      	b.n	80028cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80028ca:	bf00      	nop
    }
  }
}
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop

080028d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002908:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d108      	bne.n	800292c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800292a:	e007      	b.n	800293c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	3b10      	subs	r3, #16
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <DMA_CalcBaseAndBitshift+0x64>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002962:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d909      	bls.n	800298a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	1d1a      	adds	r2, r3, #4
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	659a      	str	r2, [r3, #88]	; 0x58
 8002988:	e007      	b.n	800299a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	aaaaaaab 	.word	0xaaaaaaab
 80029b0:	0801c1cc 	.word	0x0801c1cc

080029b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d11f      	bne.n	8002a0e <DMA_CheckFifoParam+0x5a>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d856      	bhi.n	8002a82 <DMA_CheckFifoParam+0xce>
 80029d4:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <DMA_CheckFifoParam+0x28>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	080029ff 	.word	0x080029ff
 80029e4:	080029ed 	.word	0x080029ed
 80029e8:	08002a83 	.word	0x08002a83
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d046      	beq.n	8002a86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fc:	e043      	b.n	8002a86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a06:	d140      	bne.n	8002a8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0c:	e03d      	b.n	8002a8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a16:	d121      	bne.n	8002a5c <DMA_CheckFifoParam+0xa8>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d837      	bhi.n	8002a8e <DMA_CheckFifoParam+0xda>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <DMA_CheckFifoParam+0x70>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a3b 	.word	0x08002a3b
 8002a2c:	08002a35 	.word	0x08002a35
 8002a30:	08002a4d 	.word	0x08002a4d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      break;
 8002a38:	e030      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d025      	beq.n	8002a92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4a:	e022      	b.n	8002a92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a54:	d11f      	bne.n	8002a96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a5a:	e01c      	b.n	8002a96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d903      	bls.n	8002a6a <DMA_CheckFifoParam+0xb6>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d003      	beq.n	8002a70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a68:	e018      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6e:	e015      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00e      	beq.n	8002a9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a80:	e00b      	b.n	8002a9a <DMA_CheckFifoParam+0xe6>
      break;
 8002a82:	bf00      	nop
 8002a84:	e00a      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
 8002a88:	e008      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e006      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e004      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a92:	bf00      	nop
 8002a94:	e002      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a96:	bf00      	nop
 8002a98:	e000      	b.n	8002a9c <DMA_CheckFifoParam+0xe8>
      break;
 8002a9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop

08002aac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002abc:	4baa      	ldr	r3, [pc, #680]	; (8002d68 <HAL_ETH_Init+0x2bc>)
 8002abe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e183      	b.n	8002dda <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f004 fe46 	bl	8007778 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	4b9e      	ldr	r3, [pc, #632]	; (8002d6c <HAL_ETH_Init+0x2c0>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	4a9d      	ldr	r2, [pc, #628]	; (8002d6c <HAL_ETH_Init+0x2c0>)
 8002af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afa:	6453      	str	r3, [r2, #68]	; 0x44
 8002afc:	4b9b      	ldr	r3, [pc, #620]	; (8002d6c <HAL_ETH_Init+0x2c0>)
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b08:	4b99      	ldr	r3, [pc, #612]	; (8002d70 <HAL_ETH_Init+0x2c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a98      	ldr	r2, [pc, #608]	; (8002d70 <HAL_ETH_Init+0x2c4>)
 8002b0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b12:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b14:	4b96      	ldr	r3, [pc, #600]	; (8002d70 <HAL_ETH_Init+0x2c4>)
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4994      	ldr	r1, [pc, #592]	; (8002d70 <HAL_ETH_Init+0x2c4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b38:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b3a:	f7ff fad7 	bl	80020ec <HAL_GetTick>
 8002b3e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002b40:	e011      	b.n	8002b66 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002b42:	f7ff fad3 	bl	80020ec <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b50:	d909      	bls.n	8002b66 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e139      	b.n	8002dda <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e4      	bne.n	8002b42 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f023 031c 	bic.w	r3, r3, #28
 8002b86:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b88:	f001 fe92 	bl	80048b0 <HAL_RCC_GetHCLKFreq>
 8002b8c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4a78      	ldr	r2, [pc, #480]	; (8002d74 <HAL_ETH_Init+0x2c8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d908      	bls.n	8002ba8 <HAL_ETH_Init+0xfc>
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4a77      	ldr	r2, [pc, #476]	; (8002d78 <HAL_ETH_Init+0x2cc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d804      	bhi.n	8002ba8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f043 0308 	orr.w	r3, r3, #8
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e027      	b.n	8002bf8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	4a73      	ldr	r2, [pc, #460]	; (8002d78 <HAL_ETH_Init+0x2cc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d908      	bls.n	8002bc2 <HAL_ETH_Init+0x116>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4a6d      	ldr	r2, [pc, #436]	; (8002d68 <HAL_ETH_Init+0x2bc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d204      	bcs.n	8002bc2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f043 030c 	orr.w	r3, r3, #12
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	e01a      	b.n	8002bf8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4a68      	ldr	r2, [pc, #416]	; (8002d68 <HAL_ETH_Init+0x2bc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d303      	bcc.n	8002bd2 <HAL_ETH_Init+0x126>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4a6b      	ldr	r2, [pc, #428]	; (8002d7c <HAL_ETH_Init+0x2d0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d911      	bls.n	8002bf6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4a69      	ldr	r2, [pc, #420]	; (8002d7c <HAL_ETH_Init+0x2d0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d908      	bls.n	8002bec <HAL_ETH_Init+0x140>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	4a68      	ldr	r2, [pc, #416]	; (8002d80 <HAL_ETH_Init+0x2d4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d804      	bhi.n	8002bec <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f043 0310 	orr.w	r3, r3, #16
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	e000      	b.n	8002bf8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002bf6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002c00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c04:	2100      	movs	r1, #0
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fb98 	bl	800333c <HAL_ETH_WritePHYRegister>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002c16:	6939      	ldr	r1, [r7, #16]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fd4d 	bl	80036b8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0d7      	b.n	8002dda <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002c2a:	20ff      	movs	r0, #255	; 0xff
 8002c2c:	f7ff fa6a 	bl	8002104 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80a5 	beq.w	8002d84 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c3a:	f7ff fa57 	bl	80020ec <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	461a      	mov	r2, r3
 8002c46:	2101      	movs	r1, #1
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fb0f 	bl	800326c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002c4e:	f7ff fa4d 	bl	80020ec <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d90f      	bls.n	8002c80 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002c64:	6939      	ldr	r1, [r7, #16]
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fd26 	bl	80036b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0ac      	b.n	8002dda <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0da      	beq.n	8002c40 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c8e:	2100      	movs	r1, #0
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fb53 	bl	800333c <HAL_ETH_WritePHYRegister>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002ca0:	6939      	ldr	r1, [r7, #16]
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fd08 	bl	80036b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e092      	b.n	8002dda <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cb4:	f7ff fa1a 	bl	80020ec <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002cba:	f107 030c 	add.w	r3, r7, #12
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fad2 	bl	800326c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002cc8:	f7ff fa10 	bl	80020ec <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d90f      	bls.n	8002cfa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002cde:	6939      	ldr	r1, [r7, #16]
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fce9 	bl	80036b8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e06f      	b.n	8002dda <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0da      	beq.n	8002cba <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002d04:	f107 030c 	add.w	r3, r7, #12
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2110      	movs	r1, #16
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 faad 	bl	800326c <HAL_ETH_ReadPHYRegister>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002d1c:	6939      	ldr	r1, [r7, #16]
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fcca 	bl	80036b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e054      	b.n	8002dda <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e002      	b.n	8002d4a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	e035      	b.n	8002dc8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	e030      	b.n	8002dc8 <HAL_ETH_Init+0x31c>
 8002d66:	bf00      	nop
 8002d68:	03938700 	.word	0x03938700
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40013800 	.word	0x40013800
 8002d74:	01312cff 	.word	0x01312cff
 8002d78:	02160ebf 	.word	0x02160ebf
 8002d7c:	05f5e0ff 	.word	0x05f5e0ff
 8002d80:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	08db      	lsrs	r3, r3, #3
 8002d8a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 facd 	bl	800333c <HAL_ETH_WritePHYRegister>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002dac:	6939      	ldr	r1, [r7, #16]
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fc82 	bl	80036b8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e00c      	b.n	8002dda <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002dc0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002dc4:	f7ff f99e 	bl	8002104 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002dc8:	6939      	ldr	r1, [r7, #16]
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fc74 	bl	80036b8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop

08002de4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_ETH_DMATxDescListInit+0x20>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e052      	b.n	8002eaa <HAL_ETH_DMATxDescListInit+0xc6>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e030      	b.n	8002e82 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	015b      	lsls	r3, r3, #5
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	4413      	add	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e30:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d208      	bcs.n	8002e76 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3301      	adds	r3, #1
 8002e68:	015b      	lsls	r3, r3, #5
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	461a      	mov	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	e002      	b.n	8002e7c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d3ca      	bcc.n	8002e20 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e94:	3310      	adds	r3, #16
 8002e96:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ETH_DMARxDescListInit+0x20>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e056      	b.n	8002f84 <HAL_ETH_DMARxDescListInit+0xce>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	e034      	b.n	8002f5c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	015b      	lsls	r3, r3, #5
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4413      	add	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f02:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f0a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d208      	bcs.n	8002f50 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	3301      	adds	r3, #1
 8002f42:	015b      	lsls	r3, r3, #5
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	4413      	add	r3, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	e002      	b.n	8002f56 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3c6      	bcc.n	8002ef2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f6e:	330c      	adds	r3, #12
 8002f70:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_ETH_TransmitFrame+0x24>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0cd      	b.n	8003150 <HAL_ETH_TransmitFrame+0x1c0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0b8      	b.n	8003150 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da09      	bge.n	8002ffc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2212      	movs	r2, #18
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0a9      	b.n	8003150 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003002:	4293      	cmp	r3, r2
 8003004:	d915      	bls.n	8003032 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4a54      	ldr	r2, [pc, #336]	; (800315c <HAL_ETH_TransmitFrame+0x1cc>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0a9b      	lsrs	r3, r3, #10
 8003010:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	4b51      	ldr	r3, [pc, #324]	; (800315c <HAL_ETH_TransmitFrame+0x1cc>)
 8003016:	fba3 1302 	umull	r1, r3, r3, r2
 800301a:	0a9b      	lsrs	r3, r3, #10
 800301c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3301      	adds	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	e001      	b.n	8003036 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003032:	2301      	movs	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d11c      	bne.n	8003076 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800304a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003056:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003066:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c
 8003074:	e04b      	b.n	800310e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	e044      	b.n	8003106 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800308a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80030aa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d116      	bne.n	80030e4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030c4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_ETH_TransmitFrame+0x1d0>)
 80030ca:	fb02 f203 	mul.w	r2, r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	4413      	add	r3, r2
 80030d2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80030d6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80030e2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030f2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	461a      	mov	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	3301      	adds	r3, #1
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	429a      	cmp	r2, r3
 800310c:	d3b6      	bcc.n	800307c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003116:	3314      	adds	r3, #20
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312a:	3314      	adds	r3, #20
 800312c:	2204      	movs	r2, #4
 800312e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003138:	3304      	adds	r3, #4
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	ac02b00b 	.word	0xac02b00b
 8003160:	fffffa0c 	.word	0xfffffa0c

08003164 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_ETH_GetReceivedFrame+0x1a>
 800317a:	2302      	movs	r3, #2
 800317c:	e070      	b.n	8003260 <HAL_ETH_GetReceivedFrame+0xfc>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db5a      	blt.n	800324e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d030      	beq.n	8003208 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d103      	bne.n	80031c0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80031d4:	3b04      	subs	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	461a      	mov	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e02b      	b.n	8003260 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003212:	2b00      	cmp	r3, #0
 8003214:	d010      	beq.n	8003238 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	461a      	mov	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	629a      	str	r2, [r3, #40]	; 0x28
 8003236:	e00a      	b.n	800324e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	460b      	mov	r3, r1
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b82      	cmp	r3, #130	; 0x82
 800328c:	d101      	bne.n	8003292 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	e050      	b.n	8003334 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2282      	movs	r2, #130	; 0x82
 8003296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 031c 	and.w	r3, r3, #28
 80032a8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8a1b      	ldrh	r3, [r3, #16]
 80032ae:	02db      	lsls	r3, r3, #11
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80032b8:	897b      	ldrh	r3, [r7, #10]
 80032ba:	019b      	lsls	r3, r3, #6
 80032bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 0302 	bic.w	r3, r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80032de:	f7fe ff05 	bl	80020ec <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032e4:	e015      	b.n	8003312 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80032e6:	f7fe ff01 	bl	80020ec <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d309      	bcc.n	800330a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e014      	b.n	8003334 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e4      	bne.n	80032e6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	460b      	mov	r3, r1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b42      	cmp	r3, #66	; 0x42
 800335c:	d101      	bne.n	8003362 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
 8003360:	e04e      	b.n	8003400 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2242      	movs	r2, #66	; 0x42
 8003366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 031c 	and.w	r3, r3, #28
 8003378:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8a1b      	ldrh	r3, [r3, #16]
 800337e:	02db      	lsls	r3, r3, #11
 8003380:	b29b      	uxth	r3, r3
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003388:	897b      	ldrh	r3, [r7, #10]
 800338a:	019b      	lsls	r3, r3, #6
 800338c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80033b8:	f7fe fe98 	bl	80020ec <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80033be:	e015      	b.n	80033ec <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80033c0:	f7fe fe94 	bl	80020ec <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ce:	d309      	bcc.n	80033e4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e00d      	b.n	8003400 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e4      	bne.n	80033c0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_ETH_Start+0x16>
 800341a:	2302      	movs	r3, #2
 800341c:	e01f      	b.n	800345e <HAL_ETH_Start+0x56>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fb44 	bl	8003abc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fb7b 	bl	8003b30 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fc12 	bl	8003c64 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fbaf 	bl	8003ba4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fbdc 	bl	8003c04 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_ETH_Stop+0x16>
 8003478:	2302      	movs	r3, #2
 800347a:	e01f      	b.n	80034bc <HAL_ETH_Stop+0x56>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fba1 	bl	8003bd4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fbce 	bl	8003c34 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fb66 	bl	8003b6a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fbe0 	bl	8003c64 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb26 	bl	8003af6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_ETH_ConfigMAC+0x1c>
 80034dc:	2302      	movs	r3, #2
 80034de:	e0e4      	b.n	80036aa <HAL_ETH_ConfigMAC+0x1e6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80b1 	beq.w	800365a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4b6c      	ldr	r3, [pc, #432]	; (80036b4 <HAL_ETH_ConfigMAC+0x1f0>)
 8003504:	4013      	ands	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003510:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003516:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800351c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003522:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003528:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800352e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003534:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800353a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003540:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003546:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800354c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003552:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800356a:	2001      	movs	r0, #1
 800356c:	f7fe fdca 	bl	8002104 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003580:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003586:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800358c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003592:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003598:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800359e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80035aa:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80035ac:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80035b6:	2001      	movs	r0, #1
 80035b8:	f7fe fda4 	bl	8002104 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80035cc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035d6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80035e6:	4013      	ands	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80035f4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80035fa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003600:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003606:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800360c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003624:	2001      	movs	r0, #1
 8003626:	f7fe fd6d 	bl	8002104 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800364a:	2001      	movs	r0, #1
 800364c:	f7fe fd5a 	bl	8002104 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	61da      	str	r2, [r3, #28]
 8003658:	e01e      	b.n	8003698 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003668:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800368a:	2001      	movs	r0, #1
 800368c:	f7fe fd3a 	bl	8002104 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	ff20810f 	.word	0xff20810f

080036b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0b0      	sub	sp, #192	; 0xc0
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036d4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80036de:	2300      	movs	r3, #0
 80036e0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80036e6:	2300      	movs	r3, #0
 80036e8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80036fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003702:	663b      	str	r3, [r7, #96]	; 0x60
 8003704:	e001      	b.n	800370a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003706:	2300      	movs	r3, #0
 8003708:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800370a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800370e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003710:	2300      	movs	r3, #0
 8003712:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003714:	2300      	movs	r3, #0
 8003716:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003718:	2300      	movs	r3, #0
 800371a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800371c:	2300      	movs	r3, #0
 800371e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003724:	2340      	movs	r3, #64	; 0x40
 8003726:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800372e:	2300      	movs	r3, #0
 8003730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800376a:	2300      	movs	r3, #0
 800376c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800378c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003790:	4bac      	ldr	r3, [pc, #688]	; (8003a44 <ETH_MACDMAConfig+0x38c>)
 8003792:	4013      	ands	r3, r2
 8003794:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003798:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800379c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80037a0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80037a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80037a4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80037aa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80037ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80037ae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80037b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80037b2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80037b8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80037ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80037bc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80037be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80037c0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80037c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80037c4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80037c8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80037ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80037cc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80037ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037ec:	2001      	movs	r0, #1
 80037ee:	f7fe fc89 	bl	8002104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037fa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80037fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80037fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003800:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003804:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003806:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800380a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800380c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003810:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003816:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800381c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003820:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003828:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800382a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003836:	2001      	movs	r0, #1
 8003838:	f7fe fc64 	bl	8002104 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003844:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800384e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003858:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003864:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003868:	f64f 7341 	movw	r3, #65345	; 0xff41
 800386c:	4013      	ands	r3, r2
 800386e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003872:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003876:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003878:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800387c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800387e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003882:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003888:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800388a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800388e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003894:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003896:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80038b4:	2001      	movs	r0, #1
 80038b6:	f7fe fc25 	bl	8002104 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80038c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80038c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80038de:	2001      	movs	r0, #1
 80038e0:	f7fe fc10 	bl	8002104 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80038f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80038fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003900:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003912:	2304      	movs	r3, #4
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800391c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003926:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003932:	2300      	movs	r3, #0
 8003934:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003936:	2300      	movs	r3, #0
 8003938:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003942:	3318      	adds	r3, #24
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800394a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800394e:	4b3e      	ldr	r3, [pc, #248]	; (8003a48 <ETH_MACDMAConfig+0x390>)
 8003950:	4013      	ands	r3, r2
 8003952:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003956:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003958:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800395a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800395c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800395e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003960:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003962:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003964:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003966:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003968:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800396a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800396c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800396e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003972:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003976:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003978:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398a:	3318      	adds	r3, #24
 800398c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003990:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800399a:	3318      	adds	r3, #24
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039a2:	2001      	movs	r0, #1
 80039a4:	f7fe fbae 	bl	8002104 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b0:	3318      	adds	r3, #24
 80039b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80039c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80039c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80039c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80039ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80039ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80039d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80039d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80039f0:	2001      	movs	r0, #1
 80039f2:	f7fe fb87 	bl	8002104 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a02:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d10f      	bne.n	8003a2c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a14:	331c      	adds	r3, #28
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a28:	331c      	adds	r3, #28
 8003a2a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	461a      	mov	r2, r3
 8003a32:	2100      	movs	r1, #0
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f809 	bl	8003a4c <ETH_MACAddressConfig>
}
 8003a3a:	bf00      	nop
 8003a3c:	37c0      	adds	r7, #192	; 0xc0
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	ff20810f 	.word	0xff20810f
 8003a48:	f8de3f23 	.word	0xf8de3f23

08003a4c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3305      	adds	r3, #5
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	3204      	adds	r2, #4
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <ETH_MACAddressConfig+0x68>)
 8003a6e:	4413      	add	r3, r2
 8003a70:	461a      	mov	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3303      	adds	r3, #3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	061a      	lsls	r2, r3, #24
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3302      	adds	r3, #2
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	4313      	orrs	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <ETH_MACAddressConfig+0x6c>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	6013      	str	r3, [r2, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40028040 	.word	0x40028040
 8003ab8:	40028044 	.word	0x40028044

08003abc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0208 	orr.w	r2, r2, #8
 8003ad6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f000 f8e9 	bl	8003cb8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	601a      	str	r2, [r3, #0]
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0208 	bic.w	r2, r2, #8
 8003b10:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f000 f8cc 	bl	8003cb8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0204 	orr.w	r2, r2, #4
 8003b4a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003b54:	2001      	movs	r0, #1
 8003b56:	f000 f8af 	bl	8003cb8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	601a      	str	r2, [r3, #0]
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0204 	bic.w	r2, r2, #4
 8003b84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f000 f892 	bl	8003cb8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	601a      	str	r2, [r3, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb4:	3318      	adds	r3, #24
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc4:	3318      	adds	r3, #24
 8003bc6:	601a      	str	r2, [r3, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be4:	3318      	adds	r3, #24
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	601a      	str	r2, [r3, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c14:	3318      	adds	r3, #24
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0202 	orr.w	r2, r2, #2
 8003c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c24:	3318      	adds	r3, #24
 8003c26:	601a      	str	r2, [r3, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c44:	3318      	adds	r3, #24
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0202 	bic.w	r2, r2, #2
 8003c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c54:	3318      	adds	r3, #24
 8003c56:	601a      	str	r2, [r3, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c78:	3318      	adds	r3, #24
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c88:	3318      	adds	r3, #24
 8003c8a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c94:	3318      	adds	r3, #24
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f000 f80c 	bl	8003cb8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003caa:	3318      	adds	r3, #24
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <ETH_Delay+0x38>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0b      	ldr	r2, [pc, #44]	; (8003cf4 <ETH_Delay+0x3c>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0a5b      	lsrs	r3, r3, #9
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003cd4:	bf00      	nop
  } 
  while (Delay --);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1e5a      	subs	r2, r3, #1
 8003cda:	60fa      	str	r2, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f9      	bne.n	8003cd4 <ETH_Delay+0x1c>
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000138 	.word	0x20000138
 8003cf4:	10624dd3 	.word	0x10624dd3

08003cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e16b      	b.n	8003fec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d14:	2201      	movs	r2, #1
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	f040 815a 	bne.w	8003fe6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d005      	beq.n	8003d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d130      	bne.n	8003dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	2203      	movs	r2, #3
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d80:	2201      	movs	r2, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 0201 	and.w	r2, r3, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d017      	beq.n	8003de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d123      	bne.n	8003e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	08da      	lsrs	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3208      	adds	r2, #8
 8003dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	220f      	movs	r2, #15
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	08da      	lsrs	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3208      	adds	r2, #8
 8003e36:	69b9      	ldr	r1, [r7, #24]
 8003e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2203      	movs	r2, #3
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0203 	and.w	r2, r3, #3
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80b4 	beq.w	8003fe6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b60      	ldr	r3, [pc, #384]	; (8004004 <HAL_GPIO_Init+0x30c>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	4a5f      	ldr	r2, [pc, #380]	; (8004004 <HAL_GPIO_Init+0x30c>)
 8003e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8e:	4b5d      	ldr	r3, [pc, #372]	; (8004004 <HAL_GPIO_Init+0x30c>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e9a:	4a5b      	ldr	r2, [pc, #364]	; (8004008 <HAL_GPIO_Init+0x310>)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_GPIO_Init+0x314>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <HAL_GPIO_Init+0x226>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a51      	ldr	r2, [pc, #324]	; (8004010 <HAL_GPIO_Init+0x318>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d025      	beq.n	8003f1a <HAL_GPIO_Init+0x222>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a50      	ldr	r2, [pc, #320]	; (8004014 <HAL_GPIO_Init+0x31c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01f      	beq.n	8003f16 <HAL_GPIO_Init+0x21e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a4f      	ldr	r2, [pc, #316]	; (8004018 <HAL_GPIO_Init+0x320>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d019      	beq.n	8003f12 <HAL_GPIO_Init+0x21a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a4e      	ldr	r2, [pc, #312]	; (800401c <HAL_GPIO_Init+0x324>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_GPIO_Init+0x216>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a4d      	ldr	r2, [pc, #308]	; (8004020 <HAL_GPIO_Init+0x328>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00d      	beq.n	8003f0a <HAL_GPIO_Init+0x212>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4c      	ldr	r2, [pc, #304]	; (8004024 <HAL_GPIO_Init+0x32c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <HAL_GPIO_Init+0x20e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4b      	ldr	r2, [pc, #300]	; (8004028 <HAL_GPIO_Init+0x330>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_GPIO_Init+0x20a>
 8003efe:	2307      	movs	r3, #7
 8003f00:	e00e      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f02:	2308      	movs	r3, #8
 8003f04:	e00c      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f06:	2306      	movs	r3, #6
 8003f08:	e00a      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	e008      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f0e:	2304      	movs	r3, #4
 8003f10:	e006      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f12:	2303      	movs	r3, #3
 8003f14:	e004      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e002      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f002 0203 	and.w	r2, r2, #3
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	4093      	lsls	r3, r2
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f30:	4935      	ldr	r1, [pc, #212]	; (8004008 <HAL_GPIO_Init+0x310>)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	3302      	adds	r3, #2
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f62:	4a32      	ldr	r2, [pc, #200]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f68:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f8c:	4a27      	ldr	r2, [pc, #156]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_GPIO_Init+0x334>)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_GPIO_Init+0x334>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe0:	4a12      	ldr	r2, [pc, #72]	; (800402c <HAL_GPIO_Init+0x334>)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	f67f ae90 	bls.w	8003d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	40013800 	.word	0x40013800
 800400c:	40020000 	.word	0x40020000
 8004010:	40020400 	.word	0x40020400
 8004014:	40020800 	.word	0x40020800
 8004018:	40020c00 	.word	0x40020c00
 800401c:	40021000 	.word	0x40021000
 8004020:	40021400 	.word	0x40021400
 8004024:	40021800 	.word	0x40021800
 8004028:	40021c00 	.word	0x40021c00
 800402c:	40013c00 	.word	0x40013c00

08004030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e264      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d075      	beq.n	800413a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800404e:	4ba3      	ldr	r3, [pc, #652]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b04      	cmp	r3, #4
 8004058:	d00c      	beq.n	8004074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405a:	4ba0      	ldr	r3, [pc, #640]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004062:	2b08      	cmp	r3, #8
 8004064:	d112      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004066:	4b9d      	ldr	r3, [pc, #628]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004072:	d10b      	bne.n	800408c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	4b99      	ldr	r3, [pc, #612]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d05b      	beq.n	8004138 <HAL_RCC_OscConfig+0x108>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d157      	bne.n	8004138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e23f      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d106      	bne.n	80040a4 <HAL_RCC_OscConfig+0x74>
 8004096:	4b91      	ldr	r3, [pc, #580]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a90      	ldr	r2, [pc, #576]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e01d      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x98>
 80040ae:	4b8b      	ldr	r3, [pc, #556]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a8a      	ldr	r2, [pc, #552]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b88      	ldr	r3, [pc, #544]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a87      	ldr	r2, [pc, #540]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e00b      	b.n	80040e0 <HAL_RCC_OscConfig+0xb0>
 80040c8:	4b84      	ldr	r3, [pc, #528]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a83      	ldr	r2, [pc, #524]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4b81      	ldr	r3, [pc, #516]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a80      	ldr	r2, [pc, #512]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80040da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d013      	beq.n	8004110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fe f800 	bl	80020ec <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f0:	f7fd fffc 	bl	80020ec <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e204      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b76      	ldr	r3, [pc, #472]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0xc0>
 800410e:	e014      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fd ffec 	bl	80020ec <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004118:	f7fd ffe8 	bl	80020ec <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1f0      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412a:	4b6c      	ldr	r3, [pc, #432]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0xe8>
 8004136:	e000      	b.n	800413a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d063      	beq.n	800420e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004146:	4b65      	ldr	r3, [pc, #404]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004152:	4b62      	ldr	r3, [pc, #392]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415a:	2b08      	cmp	r3, #8
 800415c:	d11c      	bne.n	8004198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415e:	4b5f      	ldr	r3, [pc, #380]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d116      	bne.n	8004198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416a:	4b5c      	ldr	r3, [pc, #368]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_RCC_OscConfig+0x152>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e1c4      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004182:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4952      	ldr	r1, [pc, #328]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	e03a      	b.n	800420e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d020      	beq.n	80041e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a0:	4b4f      	ldr	r3, [pc, #316]	; (80042e0 <HAL_RCC_OscConfig+0x2b0>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a6:	f7fd ffa1 	bl	80020ec <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ae:	f7fd ff9d 	bl	80020ec <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e1a5      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c0:	4b46      	ldr	r3, [pc, #280]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041cc:	4b43      	ldr	r3, [pc, #268]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4940      	ldr	r1, [pc, #256]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
 80041e0:	e015      	b.n	800420e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e2:	4b3f      	ldr	r3, [pc, #252]	; (80042e0 <HAL_RCC_OscConfig+0x2b0>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd ff80 	bl	80020ec <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f0:	f7fd ff7c 	bl	80020ec <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e184      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	4b36      	ldr	r3, [pc, #216]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d030      	beq.n	800427c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <HAL_RCC_OscConfig+0x2b4>)
 8004224:	2201      	movs	r2, #1
 8004226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fd ff60 	bl	80020ec <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004230:	f7fd ff5c 	bl	80020ec <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e164      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004242:	4b26      	ldr	r3, [pc, #152]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x200>
 800424e:	e015      	b.n	800427c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0x2b4>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004256:	f7fd ff49 	bl	80020ec <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425e:	f7fd ff45 	bl	80020ec <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e14d      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f0      	bne.n	800425e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80a0 	beq.w	80043ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6413      	str	r3, [r2, #64]	; 0x40
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b6:	2301      	movs	r3, #1
 80042b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_OscConfig+0x2b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d121      	bne.n	800430a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <HAL_RCC_OscConfig+0x2b8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <HAL_RCC_OscConfig+0x2b8>)
 80042cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d2:	f7fd ff0b 	bl	80020ec <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d8:	e011      	b.n	80042fe <HAL_RCC_OscConfig+0x2ce>
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	42470000 	.word	0x42470000
 80042e4:	42470e80 	.word	0x42470e80
 80042e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ec:	f7fd fefe 	bl	80020ec <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e106      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b85      	ldr	r3, [pc, #532]	; (8004514 <HAL_RCC_OscConfig+0x4e4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d106      	bne.n	8004320 <HAL_RCC_OscConfig+0x2f0>
 8004312:	4b81      	ldr	r3, [pc, #516]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a80      	ldr	r2, [pc, #512]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
 800431e:	e01c      	b.n	800435a <HAL_RCC_OscConfig+0x32a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b05      	cmp	r3, #5
 8004326:	d10c      	bne.n	8004342 <HAL_RCC_OscConfig+0x312>
 8004328:	4b7b      	ldr	r3, [pc, #492]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 800432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432c:	4a7a      	ldr	r2, [pc, #488]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	6713      	str	r3, [r2, #112]	; 0x70
 8004334:	4b78      	ldr	r3, [pc, #480]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	4a77      	ldr	r2, [pc, #476]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6713      	str	r3, [r2, #112]	; 0x70
 8004340:	e00b      	b.n	800435a <HAL_RCC_OscConfig+0x32a>
 8004342:	4b75      	ldr	r3, [pc, #468]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	4a74      	ldr	r2, [pc, #464]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6713      	str	r3, [r2, #112]	; 0x70
 800434e:	4b72      	ldr	r3, [pc, #456]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4a71      	ldr	r2, [pc, #452]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d015      	beq.n	800438e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004362:	f7fd fec3 	bl	80020ec <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	e00a      	b.n	8004380 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fd febf 	bl	80020ec <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0c5      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004380:	4b65      	ldr	r3, [pc, #404]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0ee      	beq.n	800436a <HAL_RCC_OscConfig+0x33a>
 800438c:	e014      	b.n	80043b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fd fead 	bl	80020ec <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004394:	e00a      	b.n	80043ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f7fd fea9 	bl	80020ec <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0af      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ac:	4b5a      	ldr	r3, [pc, #360]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ee      	bne.n	8004396 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d105      	bne.n	80043ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043be:	4b56      	ldr	r3, [pc, #344]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4a55      	ldr	r2, [pc, #340]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 80043c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 809b 	beq.w	800450a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d4:	4b50      	ldr	r3, [pc, #320]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d05c      	beq.n	800449a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d141      	bne.n	800446c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e8:	4b4c      	ldr	r3, [pc, #304]	; (800451c <HAL_RCC_OscConfig+0x4ec>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fd fe7d 	bl	80020ec <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f6:	f7fd fe79 	bl	80020ec <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e081      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004408:	4b43      	ldr	r3, [pc, #268]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f0      	bne.n	80043f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	019b      	lsls	r3, r3, #6
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	3b01      	subs	r3, #1
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	061b      	lsls	r3, r3, #24
 8004438:	4937      	ldr	r1, [pc, #220]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443e:	4b37      	ldr	r3, [pc, #220]	; (800451c <HAL_RCC_OscConfig+0x4ec>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fd fe52 	bl	80020ec <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444c:	f7fd fe4e 	bl	80020ec <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e056      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445e:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x41c>
 800446a:	e04e      	b.n	800450a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_RCC_OscConfig+0x4ec>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004472:	f7fd fe3b 	bl	80020ec <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447a:	f7fd fe37 	bl	80020ec <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e03f      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448c:	4b22      	ldr	r3, [pc, #136]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f0      	bne.n	800447a <HAL_RCC_OscConfig+0x44a>
 8004498:	e037      	b.n	800450a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e032      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a6:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <HAL_RCC_OscConfig+0x4e8>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d028      	beq.n	8004506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d121      	bne.n	8004506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d11a      	bne.n	8004506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d6:	4013      	ands	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044de:	4293      	cmp	r3, r2
 80044e0:	d111      	bne.n	8004506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	3b01      	subs	r3, #1
 80044f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40007000 	.word	0x40007000
 8004518:	40023800 	.word	0x40023800
 800451c:	42470060 	.word	0x42470060

08004520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0cc      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004534:	4b68      	ldr	r3, [pc, #416]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d90c      	bls.n	800455c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b65      	ldr	r3, [pc, #404]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b63      	ldr	r3, [pc, #396]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0b8      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d020      	beq.n	80045aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004574:	4b59      	ldr	r3, [pc, #356]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a58      	ldr	r2, [pc, #352]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800457e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800458c:	4b53      	ldr	r3, [pc, #332]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a52      	ldr	r2, [pc, #328]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004598:	4b50      	ldr	r3, [pc, #320]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	494d      	ldr	r1, [pc, #308]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d044      	beq.n	8004640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d107      	bne.n	80045ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	4b47      	ldr	r3, [pc, #284]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d119      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e07f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d003      	beq.n	80045de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045de:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e06f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ee:	4b3b      	ldr	r3, [pc, #236]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e067      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fe:	4b37      	ldr	r3, [pc, #220]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4934      	ldr	r1, [pc, #208]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004610:	f7fd fd6c 	bl	80020ec <HAL_GetTick>
 8004614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	e00a      	b.n	800462e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004618:	f7fd fd68 	bl	80020ec <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e04f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	4b2b      	ldr	r3, [pc, #172]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 020c 	and.w	r2, r3, #12
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	429a      	cmp	r2, r3
 800463e:	d1eb      	bne.n	8004618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d20c      	bcs.n	8004668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e032      	b.n	80046ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4916      	ldr	r1, [pc, #88]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	490e      	ldr	r1, [pc, #56]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046a6:	f000 f821 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 80046aa:	4602      	mov	r2, r0
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	490a      	ldr	r1, [pc, #40]	; (80046e0 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	5ccb      	ldrb	r3, [r1, r3]
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	4a09      	ldr	r2, [pc, #36]	; (80046e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046c2:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1c8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fd fccc 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023c00 	.word	0x40023c00
 80046dc:	40023800 	.word	0x40023800
 80046e0:	0801c1b4 	.word	0x0801c1b4
 80046e4:	20000138 	.word	0x20000138
 80046e8:	2000013c 	.word	0x2000013c

080046ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	2300      	movs	r3, #0
 80046fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004704:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b08      	cmp	r3, #8
 800470e:	d00d      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x40>
 8004710:	2b08      	cmp	r3, #8
 8004712:	f200 80bd 	bhi.w	8004890 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0x34>
 800471a:	2b04      	cmp	r3, #4
 800471c:	d003      	beq.n	8004726 <HAL_RCC_GetSysClockFreq+0x3a>
 800471e:	e0b7      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004720:	4b61      	ldr	r3, [pc, #388]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004722:	60bb      	str	r3, [r7, #8]
       break;
 8004724:	e0b7      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004726:	4b61      	ldr	r3, [pc, #388]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004728:	60bb      	str	r3, [r7, #8]
      break;
 800472a:	e0b4      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800472c:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004734:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004736:	4b5b      	ldr	r3, [pc, #364]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d04d      	beq.n	80047de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004742:	4b58      	ldr	r3, [pc, #352]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	461a      	mov	r2, r3
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	ea02 0800 	and.w	r8, r2, r0
 800475a:	ea03 0901 	and.w	r9, r3, r1
 800475e:	4640      	mov	r0, r8
 8004760:	4649      	mov	r1, r9
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	014b      	lsls	r3, r1, #5
 800476c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004770:	0142      	lsls	r2, r0, #5
 8004772:	4610      	mov	r0, r2
 8004774:	4619      	mov	r1, r3
 8004776:	ebb0 0008 	subs.w	r0, r0, r8
 800477a:	eb61 0109 	sbc.w	r1, r1, r9
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	018b      	lsls	r3, r1, #6
 8004788:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800478c:	0182      	lsls	r2, r0, #6
 800478e:	1a12      	subs	r2, r2, r0
 8004790:	eb63 0301 	sbc.w	r3, r3, r1
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	00d9      	lsls	r1, r3, #3
 800479e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a2:	00d0      	lsls	r0, r2, #3
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	eb12 0208 	adds.w	r2, r2, r8
 80047ac:	eb43 0309 	adc.w	r3, r3, r9
 80047b0:	f04f 0000 	mov.w	r0, #0
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	0259      	lsls	r1, r3, #9
 80047ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047be:	0250      	lsls	r0, r2, #9
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4610      	mov	r0, r2
 80047c6:	4619      	mov	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	f7fb fd66 	bl	80002a0 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4613      	mov	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e04a      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	461a      	mov	r2, r3
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047ee:	f04f 0100 	mov.w	r1, #0
 80047f2:	ea02 0400 	and.w	r4, r2, r0
 80047f6:	ea03 0501 	and.w	r5, r3, r1
 80047fa:	4620      	mov	r0, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	014b      	lsls	r3, r1, #5
 8004808:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800480c:	0142      	lsls	r2, r0, #5
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	1b00      	subs	r0, r0, r4
 8004814:	eb61 0105 	sbc.w	r1, r1, r5
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	018b      	lsls	r3, r1, #6
 8004822:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004826:	0182      	lsls	r2, r0, #6
 8004828:	1a12      	subs	r2, r2, r0
 800482a:	eb63 0301 	sbc.w	r3, r3, r1
 800482e:	f04f 0000 	mov.w	r0, #0
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	00d9      	lsls	r1, r3, #3
 8004838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800483c:	00d0      	lsls	r0, r2, #3
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	1912      	adds	r2, r2, r4
 8004844:	eb45 0303 	adc.w	r3, r5, r3
 8004848:	f04f 0000 	mov.w	r0, #0
 800484c:	f04f 0100 	mov.w	r1, #0
 8004850:	0299      	lsls	r1, r3, #10
 8004852:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004856:	0290      	lsls	r0, r2, #10
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	461a      	mov	r2, r3
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	f7fb fd1a 	bl	80002a0 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4613      	mov	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	3301      	adds	r3, #1
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	60bb      	str	r3, [r7, #8]
      break;
 800488e:	e002      	b.n	8004896 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004892:	60bb      	str	r3, [r7, #8]
      break;
 8004894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004896:	68bb      	ldr	r3, [r7, #8]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800
 80048a8:	00f42400 	.word	0x00f42400
 80048ac:	007a1200 	.word	0x007a1200

080048b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048b6:	681b      	ldr	r3, [r3, #0]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000138 	.word	0x20000138

080048c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048cc:	f7ff fff0 	bl	80048b0 <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0a9b      	lsrs	r3, r3, #10
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4903      	ldr	r1, [pc, #12]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40023800 	.word	0x40023800
 80048ec:	0801c1c4 	.word	0x0801c1c4

080048f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048f4:	f7ff ffdc 	bl	80048b0 <HAL_RCC_GetHCLKFreq>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	0b5b      	lsrs	r3, r3, #13
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4903      	ldr	r1, [pc, #12]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004906:	5ccb      	ldrb	r3, [r1, r3]
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40023800 	.word	0x40023800
 8004914:	0801c1c4 	.word	0x0801c1c4

08004918 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e022      	b.n	8004970 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fc fcef 	bl	8001320 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2203      	movs	r2, #3
 8004946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f814 	bl	8004978 <HAL_SD_InitCard>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e00a      	b.n	8004970 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004978:	b5b0      	push	{r4, r5, r7, lr}
 800497a:	b08e      	sub	sp, #56	; 0x38
 800497c:	af04      	add	r7, sp, #16
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004994:	2376      	movs	r3, #118	; 0x76
 8004996:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681d      	ldr	r5, [r3, #0]
 800499c:	466c      	mov	r4, sp
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049aa:	f107 0308 	add.w	r3, r7, #8
 80049ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b0:	4628      	mov	r0, r5
 80049b2:	f001 fdf5 	bl	80065a0 <SDIO_Init>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80049bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e04c      	b.n	8004a62 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80049c8:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <HAL_SD_InitCard+0xf4>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 fe2d 	bl	8006632 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <HAL_SD_InitCard+0xf4>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 f804 	bl	80059ec <SD_PowerON>
 80049e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e02e      	b.n	8004a62 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 ff25 	bl	8005854 <SD_InitCard>
 8004a0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e01b      	b.n	8004a62 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 fe90 	bl	8006758 <SDMMC_CmdBlockLength>
 8004a38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00f      	beq.n	8004a60 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <HAL_SD_InitCard+0xf8>)
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3728      	adds	r7, #40	; 0x28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bdb0      	pop	{r4, r5, r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	422580a0 	.word	0x422580a0
 8004a70:	004005ff 	.word	0x004005ff

08004a74 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08c      	sub	sp, #48	; 0x30
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d107      	bne.n	8004a9c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0c0      	b.n	8004c1e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	f040 80b9 	bne.w	8004c1c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	441a      	add	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d907      	bls.n	8004ace <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0a7      	b.n	8004c1e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2200      	movs	r2, #0
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	4a4c      	ldr	r2, [pc, #304]	; (8004c28 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a4b      	ldr	r2, [pc, #300]	; (8004c2c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004b00:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2200      	movs	r2, #0
 8004b08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2200      	movs	r2, #0
 8004b10:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3380      	adds	r3, #128	; 0x80
 8004b38:	4619      	mov	r1, r3
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	025b      	lsls	r3, r3, #9
 8004b40:	089b      	lsrs	r3, r3, #2
 8004b42:	f7fd fcc3 	bl	80024cc <HAL_DMA_Start_IT>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d017      	beq.n	8004b7c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004b5a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a33      	ldr	r2, [pc, #204]	; (8004c30 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e050      	b.n	8004c1e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004b7c:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d002      	beq.n	8004b90 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	025b      	lsls	r3, r3, #9
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b94:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	025b      	lsls	r3, r3, #9
 8004b9a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b9c:	2390      	movs	r3, #144	; 0x90
 8004b9e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f107 0210 	add.w	r2, r7, #16
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f001 fda2 	bl	8006700 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d90a      	bls.n	8004bd8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2282      	movs	r2, #130	; 0x82
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 fe06 	bl	80067e0 <SDMMC_CmdReadMultiBlock>
 8004bd4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004bd6:	e009      	b.n	8004bec <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2281      	movs	r2, #129	; 0x81
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 fdd9 	bl	800679c <SDMMC_CmdReadSingleBlock>
 8004bea:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d012      	beq.n	8004c18 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a0e      	ldr	r2, [pc, #56]	; (8004c30 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	431a      	orrs	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e002      	b.n	8004c1e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e000      	b.n	8004c1e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3730      	adds	r7, #48	; 0x30
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	08005663 	.word	0x08005663
 8004c2c:	080056d5 	.word	0x080056d5
 8004c30:	004005ff 	.word	0x004005ff
 8004c34:	4225858c 	.word	0x4225858c

08004c38 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	; 0x30
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d107      	bne.n	8004c60 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0c5      	b.n	8004dec <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 80be 	bne.w	8004dea <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	441a      	add	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d907      	bls.n	8004c92 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0ac      	b.n	8004dec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2203      	movs	r2, #3
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004cb0:	f043 0302 	orr.w	r3, r3, #2
 8004cb4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	4a4e      	ldr	r2, [pc, #312]	; (8004df4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	4a4d      	ldr	r2, [pc, #308]	; (8004df8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004cc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cca:	2200      	movs	r2, #0
 8004ccc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d002      	beq.n	8004cdc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	025b      	lsls	r3, r3, #9
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d90a      	bls.n	8004cf8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	22a0      	movs	r2, #160	; 0xa0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 fdba 	bl	8006868 <SDMMC_CmdWriteMultiBlock>
 8004cf4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004cf6:	e009      	b.n	8004d0c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2290      	movs	r2, #144	; 0x90
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 fd8d 	bl	8006824 <SDMMC_CmdWriteSingleBlock>
 8004d0a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d012      	beq.n	8004d38 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a39      	ldr	r2, [pc, #228]	; (8004dfc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e059      	b.n	8004dec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004d38:	4b31      	ldr	r3, [pc, #196]	; (8004e00 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3380      	adds	r3, #128	; 0x80
 8004d6e:	461a      	mov	r2, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	025b      	lsls	r3, r3, #9
 8004d74:	089b      	lsrs	r3, r3, #2
 8004d76:	f7fd fba9 	bl	80024cc <HAL_DMA_Start_IT>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01c      	beq.n	8004dba <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004d8e:	f023 0302 	bic.w	r3, r3, #2
 8004d92:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e018      	b.n	8004dec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dbe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	025b      	lsls	r3, r3, #9
 8004dc4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004dc6:	2390      	movs	r3, #144	; 0x90
 8004dc8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f107 0210 	add.w	r2, r7, #16
 8004dde:	4611      	mov	r1, r2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f001 fc8d 	bl	8006700 <SDIO_ConfigData>

      return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
  }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3730      	adds	r7, #48	; 0x30
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	08005639 	.word	0x08005639
 8004df8:	080056d5 	.word	0x080056d5
 8004dfc:	004005ff 	.word	0x004005ff
 8004e00:	4225858c 	.word	0x4225858c

08004e04 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_SD_IRQHandler+0x2e>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fffd 	bl	8005e2a <SD_Read_IT>
 8004e30:	e165      	b.n	80050fe <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 808f 	beq.w	8004f60 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004e5a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004e5e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d039      	beq.n	8004eee <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d104      	bne.n	8004e8e <HAL_SD_IRQHandler+0x8a>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d011      	beq.n	8004eb2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 fd0a 	bl	80068ac <SDMMC_CmdStopTransfer>
 8004e98:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f92f 	bl	8005110 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f240 523a 	movw	r2, #1338	; 0x53a
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <HAL_SD_IRQHandler+0xda>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f002 f978 	bl	80071d4 <HAL_SD_RxCpltCallback>
 8004ee4:	e10b      	b.n	80050fe <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f002 f96a 	bl	80071c0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004eec:	e107      	b.n	80050fe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8102 	beq.w	80050fe <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d011      	beq.n	8004f28 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 fccf 	bl	80068ac <SDMMC_CmdStopTransfer>
 8004f0e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f8f4 	bl	8005110 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 80e5 	bne.w	80050fe <HAL_SD_IRQHandler+0x2fa>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 80df 	bne.w	80050fe <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0208 	bic.w	r2, r2, #8
 8004f4e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f002 f931 	bl	80071c0 <HAL_SD_TxCpltCallback>
}
 8004f5e:	e0ce      	b.n	80050fe <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_SD_IRQHandler+0x17c>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 ffa7 	bl	8005ecc <SD_Write_IT>
 8004f7e:	e0be      	b.n	80050fe <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f86:	f240 233a 	movw	r3, #570	; 0x23a
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80b6 	beq.w	80050fe <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	f043 0202 	orr.w	r2, r3, #2
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	f043 0208 	orr.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	f043 0220 	orr.w	r2, r3, #32
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	f043 0210 	orr.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	f043 0208 	orr.w	r2, r3, #8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f240 723a 	movw	r2, #1850	; 0x73a
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800502c:	f023 0302 	bic.w	r3, r3, #2
 8005030:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f001 fc38 	bl	80068ac <SDMMC_CmdStopTransfer>
 800503c:	4602      	mov	r2, r0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f855 	bl	8005110 <HAL_SD_ErrorCallback>
}
 8005066:	e04a      	b.n	80050fe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506e:	2b00      	cmp	r3, #0
 8005070:	d045      	beq.n	80050fe <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <HAL_SD_IRQHandler+0x282>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d011      	beq.n	80050aa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <HAL_SD_IRQHandler+0x304>)
 800508c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	4618      	mov	r0, r3
 8005094:	f7fd fa72 	bl	800257c <HAL_DMA_Abort_IT>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d02f      	beq.n	80050fe <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fb68 	bl	8005778 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80050a8:	e029      	b.n	80050fe <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_SD_IRQHandler+0x2ba>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d011      	beq.n	80050e2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	4a12      	ldr	r2, [pc, #72]	; (800510c <HAL_SD_IRQHandler+0x308>)
 80050c4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fa56 	bl	800257c <HAL_DMA_Abort_IT>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d013      	beq.n	80050fe <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fb83 	bl	80057e6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80050e0:	e00d      	b.n	80050fe <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f002 f858 	bl	80071ac <HAL_SD_AbortCallback>
}
 80050fc:	e7ff      	b.n	80050fe <HAL_SD_IRQHandler+0x2fa>
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	08005779 	.word	0x08005779
 800510c:	080057e7 	.word	0x080057e7

08005110 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005132:	0f9b      	lsrs	r3, r3, #30
 8005134:	b2da      	uxtb	r2, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800513e:	0e9b      	lsrs	r3, r3, #26
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	b2da      	uxtb	r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005150:	0e1b      	lsrs	r3, r3, #24
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	b2da      	uxtb	r2, r3
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	b2da      	uxtb	r2, r3
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800516e:	0a1b      	lsrs	r3, r3, #8
 8005170:	b2da      	uxtb	r2, r3
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800517a:	b2da      	uxtb	r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005184:	0d1b      	lsrs	r3, r3, #20
 8005186:	b29a      	uxth	r2, r3
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005190:	0c1b      	lsrs	r3, r3, #16
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	b2da      	uxtb	r2, r3
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a2:	0bdb      	lsrs	r3, r3, #15
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b4:	0b9b      	lsrs	r3, r3, #14
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051c6:	0b5b      	lsrs	r3, r3, #13
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d8:	0b1b      	lsrs	r3, r3, #12
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d163      	bne.n	80052bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f8:	009a      	lsls	r2, r3, #2
 80051fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051fe:	4013      	ands	r3, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005204:	0f92      	lsrs	r2, r2, #30
 8005206:	431a      	orrs	r2, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005210:	0edb      	lsrs	r3, r3, #27
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	b2da      	uxtb	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005222:	0e1b      	lsrs	r3, r3, #24
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	b2da      	uxtb	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005234:	0d5b      	lsrs	r3, r3, #21
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	b2da      	uxtb	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005246:	0c9b      	lsrs	r3, r3, #18
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	b2da      	uxtb	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005258:	0bdb      	lsrs	r3, r3, #15
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	b2da      	uxtb	r2, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	7e1b      	ldrb	r3, [r3, #24]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	3302      	adds	r3, #2
 800527c:	2201      	movs	r2, #1
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005286:	fb02 f203 	mul.w	r2, r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	7a1b      	ldrb	r3, [r3, #8]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	2201      	movs	r2, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80052a8:	0a52      	lsrs	r2, r2, #9
 80052aa:	fb02 f203 	mul.w	r2, r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b8:	661a      	str	r2, [r3, #96]	; 0x60
 80052ba:	e031      	b.n	8005320 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d11d      	bne.n	8005300 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	431a      	orrs	r2, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	3301      	adds	r3, #1
 80052e0:	029a      	lsls	r2, r3, #10
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	661a      	str	r2, [r3, #96]	; 0x60
 80052fe:	e00f      	b.n	8005320 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a58      	ldr	r2, [pc, #352]	; (8005468 <HAL_SD_GetCardCSD+0x344>)
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e09d      	b.n	800545c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005324:	0b9b      	lsrs	r3, r3, #14
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	b2da      	uxtb	r2, r3
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005336:	09db      	lsrs	r3, r3, #7
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800533e:	b2da      	uxtb	r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800534e:	b2da      	uxtb	r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	0fdb      	lsrs	r3, r3, #31
 800535a:	b2da      	uxtb	r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	0f5b      	lsrs	r3, r3, #29
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	b2da      	uxtb	r2, r3
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	0e9b      	lsrs	r3, r3, #26
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	b2da      	uxtb	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	0d9b      	lsrs	r3, r3, #22
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	b2da      	uxtb	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	0d5b      	lsrs	r3, r3, #21
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	0bdb      	lsrs	r3, r3, #15
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	0b9b      	lsrs	r3, r3, #14
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	0b5b      	lsrs	r3, r3, #13
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	0b1b      	lsrs	r3, r3, #12
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	0a9b      	lsrs	r3, r3, #10
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	b2da      	uxtb	r2, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	b2da      	uxtb	r2, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544a:	b2da      	uxtb	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	004005ff 	.word	0x004005ff

0800546c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b08e      	sub	sp, #56	; 0x38
 80054c8:	af04      	add	r7, sp, #16
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2203      	movs	r2, #3
 80054d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d02e      	beq.n	8005542 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	d106      	bne.n	80054fa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38
 80054f8:	e029      	b.n	800554e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005500:	d10a      	bne.n	8005518 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fb28 	bl	8005b58 <SD_WideBus_Enable>
 8005508:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
 8005516:	e01a      	b.n	800554e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fb65 	bl	8005bee <SD_WideBus_Disable>
 8005524:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
 8005532:	e00c      	b.n	800554e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
 8005540:	e005      	b.n	800554e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a26      	ldr	r2, [pc, #152]	; (80055f4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800556c:	e01f      	b.n	80055ae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681d      	ldr	r5, [r3, #0]
 8005594:	466c      	mov	r4, sp
 8005596:	f107 0314 	add.w	r3, r7, #20
 800559a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800559e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055a2:	f107 0308 	add.w	r3, r7, #8
 80055a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055a8:	4628      	mov	r0, r5
 80055aa:	f000 fff9 	bl	80065a0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 f8ce 	bl	8006758 <SDMMC_CmdBlockLength>
 80055bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00c      	beq.n	80055de <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80055e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3728      	adds	r7, #40	; 0x28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bdb0      	pop	{r4, r5, r7, pc}
 80055f2:	bf00      	nop
 80055f4:	004005ff 	.word	0x004005ff

080055f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005604:	f107 030c 	add.w	r3, r7, #12
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa7c 	bl	8005b08 <SD_SendStatus>
 8005610:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	0a5b      	lsrs	r3, r3, #9
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800562e:	693b      	ldr	r3, [r7, #16]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	2b82      	cmp	r3, #130	; 0x82
 8005676:	d111      	bne.n	800569c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f001 f915 	bl	80068ac <SDMMC_CmdStopTransfer>
 8005682:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	431a      	orrs	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fd3a 	bl	8005110 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0208 	bic.w	r2, r2, #8
 80056aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f001 fd85 	bl	80071d4 <HAL_SD_RxCpltCallback>
#endif
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fd f8f6 	bl	80028d4 <HAL_DMA_GetError>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d03e      	beq.n	800576c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d002      	beq.n	800570a <SD_DMAError+0x36>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d12d      	bne.n	8005766 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a19      	ldr	r2, [pc, #100]	; (8005774 <SD_DMAError+0xa0>)
 8005710:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005720:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800572e:	6978      	ldr	r0, [r7, #20]
 8005730:	f7ff ff62 	bl	80055f8 <HAL_SD_GetCardState>
 8005734:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b06      	cmp	r3, #6
 800573a:	d002      	beq.n	8005742 <SD_DMAError+0x6e>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b05      	cmp	r3, #5
 8005740:	d10a      	bne.n	8005758 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f001 f8b0 	bl	80068ac <SDMMC_CmdStopTransfer>
 800574c:	4602      	mov	r2, r0
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	431a      	orrs	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2200      	movs	r2, #0
 8005764:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005766:	6978      	ldr	r0, [r7, #20]
 8005768:	f7ff fcd2 	bl	8005110 <HAL_SD_ErrorCallback>
#endif
  }
}
 800576c:	bf00      	nop
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	004005ff 	.word	0x004005ff

08005778 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f240 523a 	movw	r2, #1338	; 0x53a
 800578e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff ff31 	bl	80055f8 <HAL_SD_GetCardState>
 8005796:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b06      	cmp	r3, #6
 80057aa:	d002      	beq.n	80057b2 <SD_DMATxAbort+0x3a>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d10a      	bne.n	80057c8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f001 f878 	bl	80068ac <SDMMC_CmdStopTransfer>
 80057bc:	4602      	mov	r2, r0
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f001 fceb 	bl	80071ac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80057d6:	e002      	b.n	80057de <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff fc99 	bl	8005110 <HAL_SD_ErrorCallback>
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff fefa 	bl	80055f8 <HAL_SD_GetCardState>
 8005804:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b06      	cmp	r3, #6
 8005818:	d002      	beq.n	8005820 <SD_DMARxAbort+0x3a>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b05      	cmp	r3, #5
 800581e:	d10a      	bne.n	8005836 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f001 f841 	bl	80068ac <SDMMC_CmdStopTransfer>
 800582a:	4602      	mov	r2, r0
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	431a      	orrs	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f001 fcb4 	bl	80071ac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005844:	e002      	b.n	800584c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7ff fc62 	bl	8005110 <HAL_SD_ErrorCallback>
}
 800584c:	bf00      	nop
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005854:	b5b0      	push	{r4, r5, r7, lr}
 8005856:	b094      	sub	sp, #80	; 0x50
 8005858:	af04      	add	r7, sp, #16
 800585a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800585c:	2301      	movs	r3, #1
 800585e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fef3 	bl	8006650 <SDIO_GetPowerState>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005870:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005874:	e0b6      	b.n	80059e4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587a:	2b03      	cmp	r3, #3
 800587c:	d02f      	beq.n	80058de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f001 f91c 	bl	8006ac0 <SDMMC_CmdSendCID>
 8005888:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800588a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <SD_InitCard+0x40>
    {
      return errorstate;
 8005890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005892:	e0a7      	b.n	80059e4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f000 ff1d 	bl	80066da <SDIO_GetResponse>
 80058a0:	4602      	mov	r2, r0
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2104      	movs	r1, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 ff14 	bl	80066da <SDIO_GetResponse>
 80058b2:	4602      	mov	r2, r0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2108      	movs	r1, #8
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 ff0b 	bl	80066da <SDIO_GetResponse>
 80058c4:	4602      	mov	r2, r0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	210c      	movs	r1, #12
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 ff02 	bl	80066da <SDIO_GetResponse>
 80058d6:	4602      	mov	r2, r0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d00d      	beq.n	8005902 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f107 020e 	add.w	r2, r7, #14
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 f922 	bl	8006b3a <SDMMC_CmdSetRelAdd>
 80058f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <SD_InitCard+0xae>
    {
      return errorstate;
 80058fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005900:	e070      	b.n	80059e4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	2b03      	cmp	r3, #3
 8005908:	d036      	beq.n	8005978 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800590a:	89fb      	ldrh	r3, [r7, #14]
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591a:	041b      	lsls	r3, r3, #16
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f001 f8ec 	bl	8006afc <SDMMC_CmdSendCSD>
 8005924:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <SD_InitCard+0xdc>
    {
      return errorstate;
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	e059      	b.n	80059e4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2100      	movs	r1, #0
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fecf 	bl	80066da <SDIO_GetResponse>
 800593c:	4602      	mov	r2, r0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2104      	movs	r1, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fec6 	bl	80066da <SDIO_GetResponse>
 800594e:	4602      	mov	r2, r0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2108      	movs	r1, #8
 800595a:	4618      	mov	r0, r3
 800595c:	f000 febd 	bl	80066da <SDIO_GetResponse>
 8005960:	4602      	mov	r2, r0
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	210c      	movs	r1, #12
 800596c:	4618      	mov	r0, r3
 800596e:	f000 feb4 	bl	80066da <SDIO_GetResponse>
 8005972:	4602      	mov	r2, r0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2104      	movs	r1, #4
 800597e:	4618      	mov	r0, r3
 8005980:	f000 feab 	bl	80066da <SDIO_GetResponse>
 8005984:	4603      	mov	r3, r0
 8005986:	0d1a      	lsrs	r2, r3, #20
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800598c:	f107 0310 	add.w	r3, r7, #16
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fbc6 	bl	8005124 <HAL_SD_GetCardCSD>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800599e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059a2:	e01f      	b.n	80059e4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6819      	ldr	r1, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ac:	041b      	lsls	r3, r3, #16
 80059ae:	461a      	mov	r2, r3
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	4608      	mov	r0, r1
 80059b6:	f000 ff9b 	bl	80068f0 <SDMMC_CmdSelDesel>
 80059ba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80059bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <SD_InitCard+0x172>
  {
    return errorstate;
 80059c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c4:	e00e      	b.n	80059e4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681d      	ldr	r5, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	466c      	mov	r4, sp
 80059ce:	f103 0210 	add.w	r2, r3, #16
 80059d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80059d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059d8:	3304      	adds	r3, #4
 80059da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059dc:	4628      	mov	r0, r5
 80059de:	f000 fddf 	bl	80065a0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3740      	adds	r7, #64	; 0x40
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bdb0      	pop	{r4, r5, r7, pc}

080059ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 ff96 	bl	8006936 <SDMMC_CmdGoIdleState>
 8005a0a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	e072      	b.n	8005afc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 ffa9 	bl	8006972 <SDMMC_CmdOperCond>
 8005a20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 ff7f 	bl	8006936 <SDMMC_CmdGoIdleState>
 8005a38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	e05b      	b.n	8005afc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d137      	bne.n	8005ac2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 ffa9 	bl	80069b0 <SDMMC_CmdAppCommand>
 8005a5e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d02d      	beq.n	8005ac2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a6a:	e047      	b.n	8005afc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 ff9c 	bl	80069b0 <SDMMC_CmdAppCommand>
 8005a78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <SD_PowerON+0x98>
    {
      return errorstate;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	e03b      	b.n	8005afc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	491e      	ldr	r1, [pc, #120]	; (8005b04 <SD_PowerON+0x118>)
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 ffb2 	bl	80069f4 <SDMMC_CmdAppOperCommand>
 8005a90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a9c:	e02e      	b.n	8005afc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fe18 	bl	80066da <SDIO_GetResponse>
 8005aaa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	0fdb      	lsrs	r3, r3, #31
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <SD_PowerON+0xcc>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <SD_PowerON+0xce>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	613b      	str	r3, [r7, #16]

    count++;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d802      	bhi.n	8005ad2 <SD_PowerON+0xe6>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0cc      	beq.n	8005a6c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d902      	bls.n	8005ae2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ae0:	e00c      	b.n	8005afc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	645a      	str	r2, [r3, #68]	; 0x44
 8005af2:	e002      	b.n	8005afa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	c1100000 	.word	0xc1100000

08005b08 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b1c:	e018      	b.n	8005b50 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f001 f826 	bl	8006b7c <SDMMC_CmdSendStatus>
 8005b30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	e009      	b.n	8005b50 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fdc9 	bl	80066da <SDIO_GetResponse>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	2300      	movs	r3, #0
 8005b66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fdb3 	bl	80066da <SDIO_GetResponse>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b7e:	d102      	bne.n	8005b86 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b84:	e02f      	b.n	8005be6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005b86:	f107 030c 	add.w	r3, r7, #12
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f879 	bl	8005c84 <SD_FindSCR>
 8005b92:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	e023      	b.n	8005be6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01c      	beq.n	8005be2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	f000 fefb 	bl	80069b0 <SDMMC_CmdAppCommand>
 8005bba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	e00f      	b.n	8005be6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2102      	movs	r1, #2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 ff34 	bl	8006a3a <SDMMC_CmdBusWidth>
 8005bd2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	e003      	b.n	8005be6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e001      	b.n	8005be6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005be2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fd68 	bl	80066da <SDIO_GetResponse>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c14:	d102      	bne.n	8005c1c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c1a:	e02f      	b.n	8005c7c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c1c:	f107 030c 	add.w	r3, r7, #12
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f82e 	bl	8005c84 <SD_FindSCR>
 8005c28:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	e023      	b.n	8005c7c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01c      	beq.n	8005c78 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c46:	041b      	lsls	r3, r3, #16
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f000 feb0 	bl	80069b0 <SDMMC_CmdAppCommand>
 8005c50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	e00f      	b.n	8005c7c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fee9 	bl	8006a3a <SDMMC_CmdBusWidth>
 8005c68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	e003      	b.n	8005c7c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e001      	b.n	8005c7c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b08f      	sub	sp, #60	; 0x3c
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c8e:	f7fc fa2d 	bl	80020ec <HAL_GetTick>
 8005c92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60bb      	str	r3, [r7, #8]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2108      	movs	r1, #8
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fd54 	bl	8006758 <SDMMC_CmdBlockLength>
 8005cb0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <SD_FindSCR+0x38>
  {
    return errorstate;
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	e0b2      	b.n	8005e22 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc4:	041b      	lsls	r3, r3, #16
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	f000 fe71 	bl	80069b0 <SDMMC_CmdAppCommand>
 8005cce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <SD_FindSCR+0x56>
  {
    return errorstate;
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	e0a3      	b.n	8005e22 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cde:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005ce4:	2330      	movs	r3, #48	; 0x30
 8005ce6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f107 0210 	add.w	r2, r7, #16
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fcfe 	bl	8006700 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 feb8 	bl	8006a7e <SDMMC_CmdSendSCR>
 8005d0e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02a      	beq.n	8005d6c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	e083      	b.n	8005e22 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00f      	beq.n	8005d48 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6819      	ldr	r1, [r3, #0]
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	f107 0208 	add.w	r2, r7, #8
 8005d34:	18d4      	adds	r4, r2, r3
 8005d36:	4608      	mov	r0, r1
 8005d38:	f000 fc5d 	bl	80065f6 <SDIO_ReadFIFO>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	6023      	str	r3, [r4, #0]
      index++;
 8005d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d42:	3301      	adds	r3, #1
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
 8005d46:	e006      	b.n	8005d56 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d012      	beq.n	8005d7c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d56:	f7fc f9c9 	bl	80020ec <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d64:	d102      	bne.n	8005d6c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005d66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d6a:	e05a      	b.n	8005e22 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0cf      	beq.n	8005d1a <SD_FindSCR+0x96>
 8005d7a:	e000      	b.n	8005d7e <SD_FindSCR+0xfa>
      break;
 8005d7c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2208      	movs	r2, #8
 8005d92:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d94:	2308      	movs	r3, #8
 8005d96:	e044      	b.n	8005e22 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2202      	movs	r2, #2
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dae:	2302      	movs	r3, #2
 8005db0:	e037      	b.n	8005e22 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005dc8:	2320      	movs	r3, #32
 8005dca:	e02a      	b.n	8005e22 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f240 523a 	movw	r2, #1338	; 0x53a
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	061a      	lsls	r2, r3, #24
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005de2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	0a1b      	lsrs	r3, r3, #8
 8005de8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005dec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	0e1b      	lsrs	r3, r3, #24
 8005df2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	601a      	str	r2, [r3, #0]
    scr++;
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	061a      	lsls	r2, r3, #24
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e0a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	0a1b      	lsrs	r3, r3, #8
 8005e10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e14:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	0e1b      	lsrs	r3, r3, #24
 8005e1a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	373c      	adds	r7, #60	; 0x3c
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd90      	pop	{r4, r7, pc}

08005e2a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d03f      	beq.n	8005ec4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	e033      	b.n	8005eb2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fbd1 	bl	80065f6 <SDIO_ReadFIFO>
 8005e54:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3301      	adds	r3, #1
 8005e62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	0c1b      	lsrs	r3, r3, #16
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	0e1b      	lsrs	r3, r3, #24
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b07      	cmp	r3, #7
 8005eb6:	d9c8      	bls.n	8005e4a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d043      	beq.n	8005f6e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	e037      	b.n	8005f5c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	021a      	lsls	r2, r3, #8
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	041a      	lsls	r2, r3, #16
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3301      	adds	r3, #1
 8005f26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	061a      	lsls	r2, r3, #24
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f107 0208 	add.w	r2, r7, #8
 8005f4e:	4611      	mov	r1, r2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fb5d 	bl	8006610 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b07      	cmp	r3, #7
 8005f60:	d9c4      	bls.n	8005eec <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005f6e:	bf00      	nop
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e03f      	b.n	8006008 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fb fabf 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2224      	movs	r2, #36	; 0x24
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f928 	bl	8006210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fde:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	; 0x28
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b20      	cmp	r3, #32
 800602e:	d17c      	bne.n	800612a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_UART_Transmit+0x2c>
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e075      	b.n	800612c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_UART_Transmit+0x3e>
 800604a:	2302      	movs	r3, #2
 800604c:	e06e      	b.n	800612c <HAL_UART_Transmit+0x11c>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2221      	movs	r2, #33	; 0x21
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006064:	f7fc f842 	bl	80020ec <HAL_GetTick>
 8006068:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	88fa      	ldrh	r2, [r7, #6]
 8006074:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607e:	d108      	bne.n	8006092 <HAL_UART_Transmit+0x82>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	e003      	b.n	800609a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060a2:	e02a      	b.n	80060fa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2200      	movs	r2, #0
 80060ac:	2180      	movs	r1, #128	; 0x80
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f840 	bl	8006134 <UART_WaitOnFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e036      	b.n	800612c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	3302      	adds	r3, #2
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e007      	b.n	80060ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	3301      	adds	r3, #1
 80060ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1cf      	bne.n	80060a4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2200      	movs	r2, #0
 800610c:	2140      	movs	r1, #64	; 0x40
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f810 	bl	8006134 <UART_WaitOnFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e006      	b.n	800612c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e000      	b.n	800612c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800612a:	2302      	movs	r3, #2
  }
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b090      	sub	sp, #64	; 0x40
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	4613      	mov	r3, r2
 8006142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006144:	e050      	b.n	80061e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800614c:	d04c      	beq.n	80061e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800614e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <UART_WaitOnFlagUntilTimeout+0x30>
 8006154:	f7fb ffca 	bl	80020ec <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006160:	429a      	cmp	r2, r3
 8006162:	d241      	bcs.n	80061e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006184:	637a      	str	r2, [r7, #52]	; 0x34
 8006186:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800618a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e5      	bne.n	8006164 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3314      	adds	r3, #20
 800619e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	613b      	str	r3, [r7, #16]
   return(result);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f023 0301 	bic.w	r3, r3, #1
 80061ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b8:	623a      	str	r2, [r7, #32]
 80061ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	69f9      	ldr	r1, [r7, #28]
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e5      	bne.n	8006198 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e00f      	b.n	8006208 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	429a      	cmp	r2, r3
 8006204:	d09f      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3740      	adds	r7, #64	; 0x40
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	b09f      	sub	sp, #124	; 0x7c
 8006216:	af00      	add	r7, sp, #0
 8006218:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800621a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006226:	68d9      	ldr	r1, [r3, #12]
 8006228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	ea40 0301 	orr.w	r3, r0, r1
 8006230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	431a      	orrs	r2, r3
 800623c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	431a      	orrs	r2, r3
 8006242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	4313      	orrs	r3, r2
 8006248:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800624a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006254:	f021 010c 	bic.w	r1, r1, #12
 8006258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800625e:	430b      	orrs	r3, r1
 8006260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800626c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626e:	6999      	ldr	r1, [r3, #24]
 8006270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	ea40 0301 	orr.w	r3, r0, r1
 8006278:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800627a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4bc5      	ldr	r3, [pc, #788]	; (8006594 <UART_SetConfig+0x384>)
 8006280:	429a      	cmp	r2, r3
 8006282:	d004      	beq.n	800628e <UART_SetConfig+0x7e>
 8006284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4bc3      	ldr	r3, [pc, #780]	; (8006598 <UART_SetConfig+0x388>)
 800628a:	429a      	cmp	r2, r3
 800628c:	d103      	bne.n	8006296 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800628e:	f7fe fb2f 	bl	80048f0 <HAL_RCC_GetPCLK2Freq>
 8006292:	6778      	str	r0, [r7, #116]	; 0x74
 8006294:	e002      	b.n	800629c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006296:	f7fe fb17 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 800629a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800629c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a4:	f040 80b6 	bne.w	8006414 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062aa:	461c      	mov	r4, r3
 80062ac:	f04f 0500 	mov.w	r5, #0
 80062b0:	4622      	mov	r2, r4
 80062b2:	462b      	mov	r3, r5
 80062b4:	1891      	adds	r1, r2, r2
 80062b6:	6439      	str	r1, [r7, #64]	; 0x40
 80062b8:	415b      	adcs	r3, r3
 80062ba:	647b      	str	r3, [r7, #68]	; 0x44
 80062bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062c0:	1912      	adds	r2, r2, r4
 80062c2:	eb45 0303 	adc.w	r3, r5, r3
 80062c6:	f04f 0000 	mov.w	r0, #0
 80062ca:	f04f 0100 	mov.w	r1, #0
 80062ce:	00d9      	lsls	r1, r3, #3
 80062d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062d4:	00d0      	lsls	r0, r2, #3
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	1911      	adds	r1, r2, r4
 80062dc:	6639      	str	r1, [r7, #96]	; 0x60
 80062de:	416b      	adcs	r3, r5
 80062e0:	667b      	str	r3, [r7, #100]	; 0x64
 80062e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	1891      	adds	r1, r2, r2
 80062ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80062f0:	415b      	adcs	r3, r3
 80062f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80062fc:	f7f9 ffd0 	bl	80002a0 <__aeabi_uldivmod>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4ba5      	ldr	r3, [pc, #660]	; (800659c <UART_SetConfig+0x38c>)
 8006306:	fba3 2302 	umull	r2, r3, r3, r2
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	011e      	lsls	r6, r3, #4
 800630e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006310:	461c      	mov	r4, r3
 8006312:	f04f 0500 	mov.w	r5, #0
 8006316:	4622      	mov	r2, r4
 8006318:	462b      	mov	r3, r5
 800631a:	1891      	adds	r1, r2, r2
 800631c:	6339      	str	r1, [r7, #48]	; 0x30
 800631e:	415b      	adcs	r3, r3
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
 8006322:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006326:	1912      	adds	r2, r2, r4
 8006328:	eb45 0303 	adc.w	r3, r5, r3
 800632c:	f04f 0000 	mov.w	r0, #0
 8006330:	f04f 0100 	mov.w	r1, #0
 8006334:	00d9      	lsls	r1, r3, #3
 8006336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800633a:	00d0      	lsls	r0, r2, #3
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	1911      	adds	r1, r2, r4
 8006342:	65b9      	str	r1, [r7, #88]	; 0x58
 8006344:	416b      	adcs	r3, r5
 8006346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	461a      	mov	r2, r3
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	1891      	adds	r1, r2, r2
 8006354:	62b9      	str	r1, [r7, #40]	; 0x28
 8006356:	415b      	adcs	r3, r3
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800635e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006362:	f7f9 ff9d 	bl	80002a0 <__aeabi_uldivmod>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4b8c      	ldr	r3, [pc, #560]	; (800659c <UART_SetConfig+0x38c>)
 800636c:	fba3 1302 	umull	r1, r3, r3, r2
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	2164      	movs	r1, #100	; 0x64
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	3332      	adds	r3, #50	; 0x32
 800637e:	4a87      	ldr	r2, [pc, #540]	; (800659c <UART_SetConfig+0x38c>)
 8006380:	fba2 2303 	umull	r2, r3, r2, r3
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800638c:	441e      	add	r6, r3
 800638e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006390:	4618      	mov	r0, r3
 8006392:	f04f 0100 	mov.w	r1, #0
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	1894      	adds	r4, r2, r2
 800639c:	623c      	str	r4, [r7, #32]
 800639e:	415b      	adcs	r3, r3
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
 80063a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063a6:	1812      	adds	r2, r2, r0
 80063a8:	eb41 0303 	adc.w	r3, r1, r3
 80063ac:	f04f 0400 	mov.w	r4, #0
 80063b0:	f04f 0500 	mov.w	r5, #0
 80063b4:	00dd      	lsls	r5, r3, #3
 80063b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063ba:	00d4      	lsls	r4, r2, #3
 80063bc:	4622      	mov	r2, r4
 80063be:	462b      	mov	r3, r5
 80063c0:	1814      	adds	r4, r2, r0
 80063c2:	653c      	str	r4, [r7, #80]	; 0x50
 80063c4:	414b      	adcs	r3, r1
 80063c6:	657b      	str	r3, [r7, #84]	; 0x54
 80063c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	461a      	mov	r2, r3
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	1891      	adds	r1, r2, r2
 80063d4:	61b9      	str	r1, [r7, #24]
 80063d6:	415b      	adcs	r3, r3
 80063d8:	61fb      	str	r3, [r7, #28]
 80063da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80063e2:	f7f9 ff5d 	bl	80002a0 <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4b6c      	ldr	r3, [pc, #432]	; (800659c <UART_SetConfig+0x38c>)
 80063ec:	fba3 1302 	umull	r1, r3, r3, r2
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	2164      	movs	r1, #100	; 0x64
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	3332      	adds	r3, #50	; 0x32
 80063fe:	4a67      	ldr	r2, [pc, #412]	; (800659c <UART_SetConfig+0x38c>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	f003 0207 	and.w	r2, r3, #7
 800640a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4432      	add	r2, r6
 8006410:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006412:	e0b9      	b.n	8006588 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006416:	461c      	mov	r4, r3
 8006418:	f04f 0500 	mov.w	r5, #0
 800641c:	4622      	mov	r2, r4
 800641e:	462b      	mov	r3, r5
 8006420:	1891      	adds	r1, r2, r2
 8006422:	6139      	str	r1, [r7, #16]
 8006424:	415b      	adcs	r3, r3
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800642c:	1912      	adds	r2, r2, r4
 800642e:	eb45 0303 	adc.w	r3, r5, r3
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f04f 0100 	mov.w	r1, #0
 800643a:	00d9      	lsls	r1, r3, #3
 800643c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006440:	00d0      	lsls	r0, r2, #3
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	eb12 0804 	adds.w	r8, r2, r4
 800644a:	eb43 0905 	adc.w	r9, r3, r5
 800644e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4618      	mov	r0, r3
 8006454:	f04f 0100 	mov.w	r1, #0
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	008b      	lsls	r3, r1, #2
 8006462:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006466:	0082      	lsls	r2, r0, #2
 8006468:	4640      	mov	r0, r8
 800646a:	4649      	mov	r1, r9
 800646c:	f7f9 ff18 	bl	80002a0 <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4b49      	ldr	r3, [pc, #292]	; (800659c <UART_SetConfig+0x38c>)
 8006476:	fba3 2302 	umull	r2, r3, r3, r2
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	011e      	lsls	r6, r3, #4
 800647e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006480:	4618      	mov	r0, r3
 8006482:	f04f 0100 	mov.w	r1, #0
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	1894      	adds	r4, r2, r2
 800648c:	60bc      	str	r4, [r7, #8]
 800648e:	415b      	adcs	r3, r3
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006496:	1812      	adds	r2, r2, r0
 8006498:	eb41 0303 	adc.w	r3, r1, r3
 800649c:	f04f 0400 	mov.w	r4, #0
 80064a0:	f04f 0500 	mov.w	r5, #0
 80064a4:	00dd      	lsls	r5, r3, #3
 80064a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064aa:	00d4      	lsls	r4, r2, #3
 80064ac:	4622      	mov	r2, r4
 80064ae:	462b      	mov	r3, r5
 80064b0:	1814      	adds	r4, r2, r0
 80064b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80064b4:	414b      	adcs	r3, r1
 80064b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4618      	mov	r0, r3
 80064be:	f04f 0100 	mov.w	r1, #0
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	008b      	lsls	r3, r1, #2
 80064cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064d0:	0082      	lsls	r2, r0, #2
 80064d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064d6:	f7f9 fee3 	bl	80002a0 <__aeabi_uldivmod>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4b2f      	ldr	r3, [pc, #188]	; (800659c <UART_SetConfig+0x38c>)
 80064e0:	fba3 1302 	umull	r1, r3, r3, r2
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	2164      	movs	r1, #100	; 0x64
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	3332      	adds	r3, #50	; 0x32
 80064f2:	4a2a      	ldr	r2, [pc, #168]	; (800659c <UART_SetConfig+0x38c>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064fe:	441e      	add	r6, r3
 8006500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006502:	4618      	mov	r0, r3
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	1894      	adds	r4, r2, r2
 800650e:	603c      	str	r4, [r7, #0]
 8006510:	415b      	adcs	r3, r3
 8006512:	607b      	str	r3, [r7, #4]
 8006514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006518:	1812      	adds	r2, r2, r0
 800651a:	eb41 0303 	adc.w	r3, r1, r3
 800651e:	f04f 0400 	mov.w	r4, #0
 8006522:	f04f 0500 	mov.w	r5, #0
 8006526:	00dd      	lsls	r5, r3, #3
 8006528:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800652c:	00d4      	lsls	r4, r2, #3
 800652e:	4622      	mov	r2, r4
 8006530:	462b      	mov	r3, r5
 8006532:	eb12 0a00 	adds.w	sl, r2, r0
 8006536:	eb43 0b01 	adc.w	fp, r3, r1
 800653a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4618      	mov	r0, r3
 8006540:	f04f 0100 	mov.w	r1, #0
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	008b      	lsls	r3, r1, #2
 800654e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006552:	0082      	lsls	r2, r0, #2
 8006554:	4650      	mov	r0, sl
 8006556:	4659      	mov	r1, fp
 8006558:	f7f9 fea2 	bl	80002a0 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4b0e      	ldr	r3, [pc, #56]	; (800659c <UART_SetConfig+0x38c>)
 8006562:	fba3 1302 	umull	r1, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	2164      	movs	r1, #100	; 0x64
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	3332      	adds	r3, #50	; 0x32
 8006574:	4a09      	ldr	r2, [pc, #36]	; (800659c <UART_SetConfig+0x38c>)
 8006576:	fba2 2303 	umull	r2, r3, r2, r3
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	f003 020f 	and.w	r2, r3, #15
 8006580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4432      	add	r2, r6
 8006586:	609a      	str	r2, [r3, #8]
}
 8006588:	bf00      	nop
 800658a:	377c      	adds	r7, #124	; 0x7c
 800658c:	46bd      	mov	sp, r7
 800658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006592:	bf00      	nop
 8006594:	40011000 	.word	0x40011000
 8006598:	40011400 	.word	0x40011400
 800659c:	51eb851f 	.word	0x51eb851f

080065a0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80065a0:	b084      	sub	sp, #16
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	f107 001c 	add.w	r0, r7, #28
 80065ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80065b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80065b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80065ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80065be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80065c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80065c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80065ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80065da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	b004      	add	sp, #16
 80065f4:	4770      	bx	lr

080065f6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2203      	movs	r2, #3
 800663e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006640:	2002      	movs	r0, #2
 8006642:	f7fb fd5f 	bl	8002104 <HAL_Delay>
  
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0303 	and.w	r3, r3, #3
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800668a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006690:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006696:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80066a6:	f023 030f 	bic.w	r3, r3, #15
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	b2db      	uxtb	r3, r3
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80066da:	b480      	push	{r7}
 80066dc:	b085      	sub	sp, #20
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3314      	adds	r3, #20
 80066e8:	461a      	mov	r2, r3
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	4413      	add	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
}  
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006726:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800672c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006732:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800674a:	2300      	movs	r3, #0

}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006766:	2310      	movs	r3, #16
 8006768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800676a:	2340      	movs	r3, #64	; 0x40
 800676c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006778:	f107 0308 	add.w	r3, r7, #8
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff ff74 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006784:	f241 3288 	movw	r2, #5000	; 0x1388
 8006788:	2110      	movs	r1, #16
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa44 	bl	8006c18 <SDMMC_GetCmdResp1>
 8006790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006792:	69fb      	ldr	r3, [r7, #28]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80067aa:	2311      	movs	r3, #17
 80067ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067ae:	2340      	movs	r3, #64	; 0x40
 80067b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067bc:	f107 0308 	add.w	r3, r7, #8
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff ff52 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80067c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067cc:	2111      	movs	r1, #17
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa22 	bl	8006c18 <SDMMC_GetCmdResp1>
 80067d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067d6:	69fb      	ldr	r3, [r7, #28]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3720      	adds	r7, #32
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80067ee:	2312      	movs	r3, #18
 80067f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067f2:	2340      	movs	r3, #64	; 0x40
 80067f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006800:	f107 0308 	add.w	r3, r7, #8
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff ff30 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800680c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006810:	2112      	movs	r1, #18
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa00 	bl	8006c18 <SDMMC_GetCmdResp1>
 8006818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800681a:	69fb      	ldr	r3, [r7, #28]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006832:	2318      	movs	r3, #24
 8006834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006836:	2340      	movs	r3, #64	; 0x40
 8006838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800683e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006842:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006844:	f107 0308 	add.w	r3, r7, #8
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff ff0e 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006850:	f241 3288 	movw	r2, #5000	; 0x1388
 8006854:	2118      	movs	r1, #24
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f9de 	bl	8006c18 <SDMMC_GetCmdResp1>
 800685c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800685e:	69fb      	ldr	r3, [r7, #28]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3720      	adds	r7, #32
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006876:	2319      	movs	r3, #25
 8006878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800687a:	2340      	movs	r3, #64	; 0x40
 800687c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006886:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006888:	f107 0308 	add.w	r3, r7, #8
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff feec 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006894:	f241 3288 	movw	r2, #5000	; 0x1388
 8006898:	2119      	movs	r1, #25
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f9bc 	bl	8006c18 <SDMMC_GetCmdResp1>
 80068a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068a2:	69fb      	ldr	r3, [r7, #28]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3720      	adds	r7, #32
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80068b8:	230c      	movs	r3, #12
 80068ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068bc:	2340      	movs	r3, #64	; 0x40
 80068be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068ca:	f107 0308 	add.w	r3, r7, #8
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff fecb 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80068d6:	4a05      	ldr	r2, [pc, #20]	; (80068ec <SDMMC_CmdStopTransfer+0x40>)
 80068d8:	210c      	movs	r1, #12
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f99c 	bl	8006c18 <SDMMC_GetCmdResp1>
 80068e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068e2:	69fb      	ldr	r3, [r7, #28]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3720      	adds	r7, #32
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	05f5e100 	.word	0x05f5e100

080068f0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	; 0x28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006900:	2307      	movs	r3, #7
 8006902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006904:	2340      	movs	r3, #64	; 0x40
 8006906:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006908:	2300      	movs	r3, #0
 800690a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800690c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006910:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006912:	f107 0310 	add.w	r3, r7, #16
 8006916:	4619      	mov	r1, r3
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff fea7 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800691e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006922:	2107      	movs	r1, #7
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f977 	bl	8006c18 <SDMMC_GetCmdResp1>
 800692a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800692e:	4618      	mov	r0, r3
 8006930:	3728      	adds	r7, #40	; 0x28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b088      	sub	sp, #32
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800694e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006952:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fe86 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f92d 	bl	8006bc0 <SDMMC_GetCmdError>
 8006966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006968:	69fb      	ldr	r3, [r7, #28]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b088      	sub	sp, #32
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800697a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800697e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006980:	2308      	movs	r3, #8
 8006982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006984:	2340      	movs	r3, #64	; 0x40
 8006986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800698c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006992:	f107 0308 	add.w	r3, r7, #8
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff fe67 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fb24 	bl	8006fec <SDMMC_GetCmdResp7>
 80069a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069a6:	69fb      	ldr	r3, [r7, #28]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80069be:	2337      	movs	r3, #55	; 0x37
 80069c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069c2:	2340      	movs	r3, #64	; 0x40
 80069c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fe48 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80069dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e0:	2137      	movs	r1, #55	; 0x37
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f918 	bl	8006c18 <SDMMC_GetCmdResp1>
 80069e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069ea:	69fb      	ldr	r3, [r7, #28]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006a0a:	2329      	movs	r3, #41	; 0x29
 8006a0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a0e:	2340      	movs	r3, #64	; 0x40
 8006a10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a1c:	f107 0308 	add.w	r3, r7, #8
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff fe22 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fa2b 	bl	8006e84 <SDMMC_GetCmdResp3>
 8006a2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a30:	69fb      	ldr	r3, [r7, #28]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3720      	adds	r7, #32
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b088      	sub	sp, #32
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006a48:	2306      	movs	r3, #6
 8006a4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a4c:	2340      	movs	r3, #64	; 0x40
 8006a4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a5a:	f107 0308 	add.w	r3, r7, #8
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff fe03 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6a:	2106      	movs	r1, #6
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f8d3 	bl	8006c18 <SDMMC_GetCmdResp1>
 8006a72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a74:	69fb      	ldr	r3, [r7, #28]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3720      	adds	r7, #32
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b088      	sub	sp, #32
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006a8a:	2333      	movs	r3, #51	; 0x33
 8006a8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a8e:	2340      	movs	r3, #64	; 0x40
 8006a90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a9c:	f107 0308 	add.w	r3, r7, #8
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fde2 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aac:	2133      	movs	r1, #51	; 0x33
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8b2 	bl	8006c18 <SDMMC_GetCmdResp1>
 8006ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006acc:	2302      	movs	r3, #2
 8006ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006ad0:	23c0      	movs	r3, #192	; 0xc0
 8006ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006adc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ade:	f107 0308 	add.w	r3, r7, #8
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fdc1 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f982 	bl	8006df4 <SDMMC_GetCmdResp2>
 8006af0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006af2:	69fb      	ldr	r3, [r7, #28]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006b0a:	2309      	movs	r3, #9
 8006b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006b0e:	23c0      	movs	r3, #192	; 0xc0
 8006b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b1c:	f107 0308 	add.w	r3, r7, #8
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff fda2 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f963 	bl	8006df4 <SDMMC_GetCmdResp2>
 8006b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b30:	69fb      	ldr	r3, [r7, #28]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3720      	adds	r7, #32
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b088      	sub	sp, #32
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b4c:	2340      	movs	r3, #64	; 0x40
 8006b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b50:	2300      	movs	r3, #0
 8006b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b5a:	f107 0308 	add.w	r3, r7, #8
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff fd83 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	2103      	movs	r1, #3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f9c8 	bl	8006f00 <SDMMC_GetCmdResp6>
 8006b70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b72:	69fb      	ldr	r3, [r7, #28]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006b8a:	230d      	movs	r3, #13
 8006b8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b9c:	f107 0308 	add.w	r3, r7, #8
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff fd62 	bl	800666c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	210d      	movs	r1, #13
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f832 	bl	8006c18 <SDMMC_GetCmdResp1>
 8006bb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006bc8:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <SDMMC_GetCmdError+0x50>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a11      	ldr	r2, [pc, #68]	; (8006c14 <SDMMC_GetCmdError+0x54>)
 8006bce:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd2:	0a5b      	lsrs	r3, r3, #9
 8006bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd8:	fb02 f303 	mul.w	r3, r2, r3
 8006bdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1e5a      	subs	r2, r3, #1
 8006be2:	60fa      	str	r2, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006be8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bec:	e009      	b.n	8006c02 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f1      	beq.n	8006bde <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	22c5      	movs	r2, #197	; 0xc5
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20000138 	.word	0x20000138
 8006c14:	10624dd3 	.word	0x10624dd3

08006c18 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	460b      	mov	r3, r1
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c26:	4b70      	ldr	r3, [pc, #448]	; (8006de8 <SDMMC_GetCmdResp1+0x1d0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a70      	ldr	r2, [pc, #448]	; (8006dec <SDMMC_GetCmdResp1+0x1d4>)
 8006c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c30:	0a5a      	lsrs	r2, r3, #9
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	fb02 f303 	mul.w	r3, r2, r3
 8006c38:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	1e5a      	subs	r2, r3, #1
 8006c3e:	61fa      	str	r2, [r7, #28]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c48:	e0c9      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0ef      	beq.n	8006c3a <SDMMC_GetCmdResp1+0x22>
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1ea      	bne.n	8006c3a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2204      	movs	r2, #4
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c76:	2304      	movs	r3, #4
 8006c78:	e0b1      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0a6      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	22c5      	movs	r2, #197	; 0xc5
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fd12 	bl	80066c0 <SDIO_GetCommandResponse>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d001      	beq.n	8006caa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e099      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006caa:	2100      	movs	r1, #0
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fd14 	bl	80066da <SDIO_GetResponse>
 8006cb2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4b4e      	ldr	r3, [pc, #312]	; (8006df0 <SDMMC_GetCmdResp1+0x1d8>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e08d      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	da02      	bge.n	8006cce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ccc:	e087      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006cd8:	2340      	movs	r3, #64	; 0x40
 8006cda:	e080      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006ce6:	2380      	movs	r3, #128	; 0x80
 8006ce8:	e079      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cf8:	e071      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	e069      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d18:	e061      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d28:	e059      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d38:	e051      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d48:	e049      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006d54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d58:	e041      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d68:	e039      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d78:	e031      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006d84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d88:	e029      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006d94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d98:	e021      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006da4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006da8:	e019      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006db4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006db8:	e011      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006dc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006dc8:	e009      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006dd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006dd8:	e001      	b.n	8006dde <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000138 	.word	0x20000138
 8006dec:	10624dd3 	.word	0x10624dd3
 8006df0:	fdffe008 	.word	0xfdffe008

08006df4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006dfc:	4b1f      	ldr	r3, [pc, #124]	; (8006e7c <SDMMC_GetCmdResp2+0x88>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1f      	ldr	r2, [pc, #124]	; (8006e80 <SDMMC_GetCmdResp2+0x8c>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	0a5b      	lsrs	r3, r3, #9
 8006e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
 8006e10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	60fa      	str	r2, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e20:	e026      	b.n	8006e70 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0ef      	beq.n	8006e12 <SDMMC_GetCmdResp2+0x1e>
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1ea      	bne.n	8006e12 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e4e:	2304      	movs	r3, #4
 8006e50:	e00e      	b.n	8006e70 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e003      	b.n	8006e70 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	22c5      	movs	r2, #197	; 0xc5
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	20000138 	.word	0x20000138
 8006e80:	10624dd3 	.word	0x10624dd3

08006e84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e8c:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <SDMMC_GetCmdResp3+0x74>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1a      	ldr	r2, [pc, #104]	; (8006efc <SDMMC_GetCmdResp3+0x78>)
 8006e92:	fba2 2303 	umull	r2, r3, r2, r3
 8006e96:	0a5b      	lsrs	r3, r3, #9
 8006e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1e5a      	subs	r2, r3, #1
 8006ea6:	60fa      	str	r2, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006eac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006eb0:	e01b      	b.n	8006eea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0ef      	beq.n	8006ea2 <SDMMC_GetCmdResp3+0x1e>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1ea      	bne.n	8006ea2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2204      	movs	r2, #4
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ede:	2304      	movs	r3, #4
 8006ee0:	e003      	b.n	8006eea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	22c5      	movs	r2, #197	; 0xc5
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000138 	.word	0x20000138
 8006efc:	10624dd3 	.word	0x10624dd3

08006f00 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b088      	sub	sp, #32
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f0e:	4b35      	ldr	r3, [pc, #212]	; (8006fe4 <SDMMC_GetCmdResp6+0xe4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a35      	ldr	r2, [pc, #212]	; (8006fe8 <SDMMC_GetCmdResp6+0xe8>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	0a5b      	lsrs	r3, r3, #9
 8006f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f1e:	fb02 f303 	mul.w	r3, r2, r3
 8006f22:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	1e5a      	subs	r2, r3, #1
 8006f28:	61fa      	str	r2, [r7, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f32:	e052      	b.n	8006fda <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f38:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0ef      	beq.n	8006f24 <SDMMC_GetCmdResp6+0x24>
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1ea      	bne.n	8006f24 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d004      	beq.n	8006f64 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2204      	movs	r2, #4
 8006f5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f60:	2304      	movs	r3, #4
 8006f62:	e03a      	b.n	8006fda <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e02f      	b.n	8006fda <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff fba0 	bl	80066c0 <SDIO_GetCommandResponse>
 8006f80:	4603      	mov	r3, r0
 8006f82:	461a      	mov	r2, r3
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d001      	beq.n	8006f8e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e025      	b.n	8006fda <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	22c5      	movs	r2, #197	; 0xc5
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006f94:	2100      	movs	r1, #0
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff fb9f 	bl	80066da <SDIO_GetResponse>
 8006f9c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	0c1b      	lsrs	r3, r3, #16
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e011      	b.n	8006fda <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fc4:	e009      	b.n	8006fda <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fd4:	e001      	b.n	8006fda <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000138 	.word	0x20000138
 8006fe8:	10624dd3 	.word	0x10624dd3

08006fec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ff4:	4b22      	ldr	r3, [pc, #136]	; (8007080 <SDMMC_GetCmdResp7+0x94>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a22      	ldr	r2, [pc, #136]	; (8007084 <SDMMC_GetCmdResp7+0x98>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	0a5b      	lsrs	r3, r3, #9
 8007000:	f241 3288 	movw	r2, #5000	; 0x1388
 8007004:	fb02 f303 	mul.w	r3, r2, r3
 8007008:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1e5a      	subs	r2, r3, #1
 800700e:	60fa      	str	r2, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007014:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007018:	e02c      	b.n	8007074 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0ef      	beq.n	800700a <SDMMC_GetCmdResp7+0x1e>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1ea      	bne.n	800700a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2204      	movs	r2, #4
 8007044:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007046:	2304      	movs	r3, #4
 8007048:	e014      	b.n	8007074 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d004      	beq.n	8007060 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800705c:	2301      	movs	r3, #1
 800705e:	e009      	b.n	8007074 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2240      	movs	r2, #64	; 0x40
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007072:	2300      	movs	r3, #0
  
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000138 	.word	0x20000138
 8007084:	10624dd3 	.word	0x10624dd3

08007088 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800708c:	4904      	ldr	r1, [pc, #16]	; (80070a0 <MX_FATFS_Init+0x18>)
 800708e:	4805      	ldr	r0, [pc, #20]	; (80070a4 <MX_FATFS_Init+0x1c>)
 8007090:	f003 fae8 	bl	800a664 <FATFS_LinkDriver>
 8007094:	4603      	mov	r3, r0
 8007096:	461a      	mov	r2, r3
 8007098:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <MX_FATFS_Init+0x20>)
 800709a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800709c:	bf00      	nop
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20008e20 	.word	0x20008e20
 80070a4:	0801c1d4 	.word	0x0801c1d4
 80070a8:	20008e1c 	.word	0x20008e1c

080070ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80070b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80070c6:	f000 f896 	bl	80071f6 <BSP_SD_IsDetected>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d001      	beq.n	80070d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e012      	b.n	80070fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80070d4:	480b      	ldr	r0, [pc, #44]	; (8007104 <BSP_SD_Init+0x48>)
 80070d6:	f7fd fc1f 	bl	8004918 <HAL_SD_Init>
 80070da:	4603      	mov	r3, r0
 80070dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d109      	bne.n	80070f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80070e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070e8:	4806      	ldr	r0, [pc, #24]	; (8007104 <BSP_SD_Init+0x48>)
 80070ea:	f7fe f9eb 	bl	80054c4 <HAL_SD_ConfigWideBusOperation>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80070f8:	79fb      	ldrb	r3, [r7, #7]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20005c0c 	.word	0x20005c0c

08007108 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	68f9      	ldr	r1, [r7, #12]
 800711e:	4806      	ldr	r0, [pc, #24]	; (8007138 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007120:	f7fd fca8 	bl	8004a74 <HAL_SD_ReadBlocks_DMA>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800712e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20005c0c 	.word	0x20005c0c

0800713c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	68f9      	ldr	r1, [r7, #12]
 8007152:	4806      	ldr	r0, [pc, #24]	; (800716c <BSP_SD_WriteBlocks_DMA+0x30>)
 8007154:	f7fd fd70 	bl	8004c38 <HAL_SD_WriteBlocks_DMA>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20005c0c 	.word	0x20005c0c

08007170 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007174:	4805      	ldr	r0, [pc, #20]	; (800718c <BSP_SD_GetCardState+0x1c>)
 8007176:	f7fe fa3f 	bl	80055f8 <HAL_SD_GetCardState>
 800717a:	4603      	mov	r3, r0
 800717c:	2b04      	cmp	r3, #4
 800717e:	bf14      	ite	ne
 8007180:	2301      	movne	r3, #1
 8007182:	2300      	moveq	r3, #0
 8007184:	b2db      	uxtb	r3, r3
}
 8007186:	4618      	mov	r0, r3
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20005c0c 	.word	0x20005c0c

08007190 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	4803      	ldr	r0, [pc, #12]	; (80071a8 <BSP_SD_GetCardInfo+0x18>)
 800719c:	f7fe f966 	bl	800546c <HAL_SD_GetCardInfo>
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20005c0c 	.word	0x20005c0c

080071ac <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80071b4:	f000 f818 	bl	80071e8 <BSP_SD_AbortCallback>
}
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80071c8:	f000 f98c 	bl	80074e4 <BSP_SD_WriteCpltCallback>
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80071dc:	f000 f98e 	bl	80074fc <BSP_SD_ReadCpltCallback>
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0

}
 80071ec:	bf00      	nop
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80071fc:	2301      	movs	r3, #1
 80071fe:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	b2db      	uxtb	r3, r3
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007218:	f7fa ff68 	bl	80020ec <HAL_GetTick>
 800721c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800721e:	e006      	b.n	800722e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007220:	f7ff ffa6 	bl	8007170 <BSP_SD_GetCardState>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800722a:	2300      	movs	r3, #0
 800722c:	e009      	b.n	8007242 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800722e:	f7fa ff5d 	bl	80020ec <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d8f0      	bhi.n	8007220 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800723e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <SD_CheckStatus+0x38>)
 8007258:	2201      	movs	r2, #1
 800725a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800725c:	f7ff ff88 	bl	8007170 <BSP_SD_GetCardState>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d107      	bne.n	8007276 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007266:	4b07      	ldr	r3, [pc, #28]	; (8007284 <SD_CheckStatus+0x38>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f023 0301 	bic.w	r3, r3, #1
 8007270:	b2da      	uxtb	r2, r3
 8007272:	4b04      	ldr	r3, [pc, #16]	; (8007284 <SD_CheckStatus+0x38>)
 8007274:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007276:	4b03      	ldr	r3, [pc, #12]	; (8007284 <SD_CheckStatus+0x38>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	b2db      	uxtb	r3, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000141 	.word	0x20000141

08007288 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007292:	f7ff ff13 	bl	80070bc <BSP_SD_Init>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d107      	bne.n	80072ac <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff ffd4 	bl	800724c <SD_CheckStatus>
 80072a4:	4603      	mov	r3, r0
 80072a6:	461a      	mov	r2, r3
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <SD_initialize+0x34>)
 80072aa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80072ac:	4b03      	ldr	r3, [pc, #12]	; (80072bc <SD_initialize+0x34>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	b2db      	uxtb	r3, r3
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000141 	.word	0x20000141

080072c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff ffbd 	bl	800724c <SD_CheckStatus>
 80072d2:	4603      	mov	r3, r0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80072f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80072f4:	f7ff ff8c 	bl	8007210 <SD_CheckStatusWithTimeout>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	da01      	bge.n	8007302 <SD_read+0x26>
  {
    return res;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	e03b      	b.n	800737a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	68b8      	ldr	r0, [r7, #8]
 8007308:	f7ff fefe 	bl	8007108 <BSP_SD_ReadBlocks_DMA>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d132      	bne.n	8007378 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007312:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <SD_read+0xa8>)
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007318:	f7fa fee8 	bl	80020ec <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800731e:	bf00      	nop
 8007320:	4b18      	ldr	r3, [pc, #96]	; (8007384 <SD_read+0xa8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d108      	bne.n	800733a <SD_read+0x5e>
 8007328:	f7fa fee0 	bl	80020ec <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	f247 522f 	movw	r2, #29999	; 0x752f
 8007336:	4293      	cmp	r3, r2
 8007338:	d9f2      	bls.n	8007320 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800733a:	4b12      	ldr	r3, [pc, #72]	; (8007384 <SD_read+0xa8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]
 8007346:	e017      	b.n	8007378 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007348:	4b0e      	ldr	r3, [pc, #56]	; (8007384 <SD_read+0xa8>)
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800734e:	f7fa fecd 	bl	80020ec <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007354:	e007      	b.n	8007366 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007356:	f7ff ff0b 	bl	8007170 <BSP_SD_GetCardState>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <SD_read+0x8a>
          {
            res = RES_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007364:	e008      	b.n	8007378 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007366:	f7fa fec1 	bl	80020ec <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	f247 522f 	movw	r2, #29999	; 0x752f
 8007374:	4293      	cmp	r3, r2
 8007376:	d9ee      	bls.n	8007356 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	200011e4 	.word	0x200011e4

08007388 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800739c:	4b24      	ldr	r3, [pc, #144]	; (8007430 <SD_write+0xa8>)
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80073a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80073a6:	f7ff ff33 	bl	8007210 <SD_CheckStatusWithTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	da01      	bge.n	80073b4 <SD_write+0x2c>
  {
    return res;
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	e038      	b.n	8007426 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68b8      	ldr	r0, [r7, #8]
 80073ba:	f7ff febf 	bl	800713c <BSP_SD_WriteBlocks_DMA>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d12f      	bne.n	8007424 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80073c4:	f7fa fe92 	bl	80020ec <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80073ca:	bf00      	nop
 80073cc:	4b18      	ldr	r3, [pc, #96]	; (8007430 <SD_write+0xa8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d108      	bne.n	80073e6 <SD_write+0x5e>
 80073d4:	f7fa fe8a 	bl	80020ec <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	f247 522f 	movw	r2, #29999	; 0x752f
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d9f2      	bls.n	80073cc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80073e6:	4b12      	ldr	r3, [pc, #72]	; (8007430 <SD_write+0xa8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
 80073f2:	e017      	b.n	8007424 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80073f4:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <SD_write+0xa8>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80073fa:	f7fa fe77 	bl	80020ec <HAL_GetTick>
 80073fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007400:	e007      	b.n	8007412 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007402:	f7ff feb5 	bl	8007170 <BSP_SD_GetCardState>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <SD_write+0x8a>
          {
            res = RES_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	75fb      	strb	r3, [r7, #23]
            break;
 8007410:	e008      	b.n	8007424 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007412:	f7fa fe6b 	bl	80020ec <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	f247 522f 	movw	r2, #29999	; 0x752f
 8007420:	4293      	cmp	r3, r2
 8007422:	d9ee      	bls.n	8007402 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007424:	7dfb      	ldrb	r3, [r7, #23]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	200011e0 	.word	0x200011e0

08007434 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08c      	sub	sp, #48	; 0x30
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	603a      	str	r2, [r7, #0]
 800743e:	71fb      	strb	r3, [r7, #7]
 8007440:	460b      	mov	r3, r1
 8007442:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800744a:	4b25      	ldr	r3, [pc, #148]	; (80074e0 <SD_ioctl+0xac>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <SD_ioctl+0x28>
 8007458:	2303      	movs	r3, #3
 800745a:	e03c      	b.n	80074d6 <SD_ioctl+0xa2>

  switch (cmd)
 800745c:	79bb      	ldrb	r3, [r7, #6]
 800745e:	2b03      	cmp	r3, #3
 8007460:	d834      	bhi.n	80074cc <SD_ioctl+0x98>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <SD_ioctl+0x34>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	08007479 	.word	0x08007479
 800746c:	08007481 	.word	0x08007481
 8007470:	08007499 	.word	0x08007499
 8007474:	080074b3 	.word	0x080074b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800747e:	e028      	b.n	80074d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007480:	f107 030c 	add.w	r3, r7, #12
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fe83 	bl	8007190 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800748a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007496:	e01c      	b.n	80074d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007498:	f107 030c 	add.w	r3, r7, #12
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff fe77 	bl	8007190 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074b0:	e00f      	b.n	80074d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80074b2:	f107 030c 	add.w	r3, r7, #12
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff fe6a 	bl	8007190 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	0a5a      	lsrs	r2, r3, #9
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074ca:	e002      	b.n	80074d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80074d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3730      	adds	r7, #48	; 0x30
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000141 	.word	0x20000141

080074e4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80074e8:	4b03      	ldr	r3, [pc, #12]	; (80074f8 <BSP_SD_WriteCpltCallback+0x14>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
}
 80074ee:	bf00      	nop
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	200011e0 	.word	0x200011e0

080074fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007500:	4b03      	ldr	r3, [pc, #12]	; (8007510 <BSP_SD_ReadCpltCallback+0x14>)
 8007502:	2201      	movs	r2, #1
 8007504:	601a      	str	r2, [r3, #0]
}
 8007506:	bf00      	nop
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	200011e4 	.word	0x200011e4

08007514 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800751a:	4b8d      	ldr	r3, [pc, #564]	; (8007750 <MX_LWIP_Init+0x23c>)
 800751c:	22c0      	movs	r2, #192	; 0xc0
 800751e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007520:	4b8b      	ldr	r3, [pc, #556]	; (8007750 <MX_LWIP_Init+0x23c>)
 8007522:	22a8      	movs	r2, #168	; 0xa8
 8007524:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8007526:	4b8a      	ldr	r3, [pc, #552]	; (8007750 <MX_LWIP_Init+0x23c>)
 8007528:	2212      	movs	r2, #18
 800752a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 115;
 800752c:	4b88      	ldr	r3, [pc, #544]	; (8007750 <MX_LWIP_Init+0x23c>)
 800752e:	2273      	movs	r2, #115	; 0x73
 8007530:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007532:	4b88      	ldr	r3, [pc, #544]	; (8007754 <MX_LWIP_Init+0x240>)
 8007534:	22ff      	movs	r2, #255	; 0xff
 8007536:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007538:	4b86      	ldr	r3, [pc, #536]	; (8007754 <MX_LWIP_Init+0x240>)
 800753a:	22ff      	movs	r2, #255	; 0xff
 800753c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800753e:	4b85      	ldr	r3, [pc, #532]	; (8007754 <MX_LWIP_Init+0x240>)
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007544:	4b83      	ldr	r3, [pc, #524]	; (8007754 <MX_LWIP_Init+0x240>)
 8007546:	2200      	movs	r2, #0
 8007548:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800754a:	4b83      	ldr	r3, [pc, #524]	; (8007758 <MX_LWIP_Init+0x244>)
 800754c:	22c0      	movs	r2, #192	; 0xc0
 800754e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007550:	4b81      	ldr	r3, [pc, #516]	; (8007758 <MX_LWIP_Init+0x244>)
 8007552:	22a8      	movs	r2, #168	; 0xa8
 8007554:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8007556:	4b80      	ldr	r3, [pc, #512]	; (8007758 <MX_LWIP_Init+0x244>)
 8007558:	2212      	movs	r2, #18
 800755a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800755c:	4b7e      	ldr	r3, [pc, #504]	; (8007758 <MX_LWIP_Init+0x244>)
 800755e:	2201      	movs	r2, #1
 8007560:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007562:	f005 f95f 	bl	800c824 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007566:	4b7a      	ldr	r3, [pc, #488]	; (8007750 <MX_LWIP_Init+0x23c>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	061a      	lsls	r2, r3, #24
 800756c:	4b78      	ldr	r3, [pc, #480]	; (8007750 <MX_LWIP_Init+0x23c>)
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	041b      	lsls	r3, r3, #16
 8007572:	431a      	orrs	r2, r3
 8007574:	4b76      	ldr	r3, [pc, #472]	; (8007750 <MX_LWIP_Init+0x23c>)
 8007576:	789b      	ldrb	r3, [r3, #2]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	4313      	orrs	r3, r2
 800757c:	4a74      	ldr	r2, [pc, #464]	; (8007750 <MX_LWIP_Init+0x23c>)
 800757e:	78d2      	ldrb	r2, [r2, #3]
 8007580:	4313      	orrs	r3, r2
 8007582:	061a      	lsls	r2, r3, #24
 8007584:	4b72      	ldr	r3, [pc, #456]	; (8007750 <MX_LWIP_Init+0x23c>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	0619      	lsls	r1, r3, #24
 800758a:	4b71      	ldr	r3, [pc, #452]	; (8007750 <MX_LWIP_Init+0x23c>)
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	4319      	orrs	r1, r3
 8007592:	4b6f      	ldr	r3, [pc, #444]	; (8007750 <MX_LWIP_Init+0x23c>)
 8007594:	789b      	ldrb	r3, [r3, #2]
 8007596:	021b      	lsls	r3, r3, #8
 8007598:	430b      	orrs	r3, r1
 800759a:	496d      	ldr	r1, [pc, #436]	; (8007750 <MX_LWIP_Init+0x23c>)
 800759c:	78c9      	ldrb	r1, [r1, #3]
 800759e:	430b      	orrs	r3, r1
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075a6:	431a      	orrs	r2, r3
 80075a8:	4b69      	ldr	r3, [pc, #420]	; (8007750 <MX_LWIP_Init+0x23c>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	0619      	lsls	r1, r3, #24
 80075ae:	4b68      	ldr	r3, [pc, #416]	; (8007750 <MX_LWIP_Init+0x23c>)
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	041b      	lsls	r3, r3, #16
 80075b4:	4319      	orrs	r1, r3
 80075b6:	4b66      	ldr	r3, [pc, #408]	; (8007750 <MX_LWIP_Init+0x23c>)
 80075b8:	789b      	ldrb	r3, [r3, #2]
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	430b      	orrs	r3, r1
 80075be:	4964      	ldr	r1, [pc, #400]	; (8007750 <MX_LWIP_Init+0x23c>)
 80075c0:	78c9      	ldrb	r1, [r1, #3]
 80075c2:	430b      	orrs	r3, r1
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075ca:	431a      	orrs	r2, r3
 80075cc:	4b60      	ldr	r3, [pc, #384]	; (8007750 <MX_LWIP_Init+0x23c>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	0619      	lsls	r1, r3, #24
 80075d2:	4b5f      	ldr	r3, [pc, #380]	; (8007750 <MX_LWIP_Init+0x23c>)
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	041b      	lsls	r3, r3, #16
 80075d8:	4319      	orrs	r1, r3
 80075da:	4b5d      	ldr	r3, [pc, #372]	; (8007750 <MX_LWIP_Init+0x23c>)
 80075dc:	789b      	ldrb	r3, [r3, #2]
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	430b      	orrs	r3, r1
 80075e2:	495b      	ldr	r1, [pc, #364]	; (8007750 <MX_LWIP_Init+0x23c>)
 80075e4:	78c9      	ldrb	r1, [r1, #3]
 80075e6:	430b      	orrs	r3, r1
 80075e8:	0e1b      	lsrs	r3, r3, #24
 80075ea:	4313      	orrs	r3, r2
 80075ec:	4a5b      	ldr	r2, [pc, #364]	; (800775c <MX_LWIP_Init+0x248>)
 80075ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80075f0:	4b58      	ldr	r3, [pc, #352]	; (8007754 <MX_LWIP_Init+0x240>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	061a      	lsls	r2, r3, #24
 80075f6:	4b57      	ldr	r3, [pc, #348]	; (8007754 <MX_LWIP_Init+0x240>)
 80075f8:	785b      	ldrb	r3, [r3, #1]
 80075fa:	041b      	lsls	r3, r3, #16
 80075fc:	431a      	orrs	r2, r3
 80075fe:	4b55      	ldr	r3, [pc, #340]	; (8007754 <MX_LWIP_Init+0x240>)
 8007600:	789b      	ldrb	r3, [r3, #2]
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	4313      	orrs	r3, r2
 8007606:	4a53      	ldr	r2, [pc, #332]	; (8007754 <MX_LWIP_Init+0x240>)
 8007608:	78d2      	ldrb	r2, [r2, #3]
 800760a:	4313      	orrs	r3, r2
 800760c:	061a      	lsls	r2, r3, #24
 800760e:	4b51      	ldr	r3, [pc, #324]	; (8007754 <MX_LWIP_Init+0x240>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	0619      	lsls	r1, r3, #24
 8007614:	4b4f      	ldr	r3, [pc, #316]	; (8007754 <MX_LWIP_Init+0x240>)
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	041b      	lsls	r3, r3, #16
 800761a:	4319      	orrs	r1, r3
 800761c:	4b4d      	ldr	r3, [pc, #308]	; (8007754 <MX_LWIP_Init+0x240>)
 800761e:	789b      	ldrb	r3, [r3, #2]
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	430b      	orrs	r3, r1
 8007624:	494b      	ldr	r1, [pc, #300]	; (8007754 <MX_LWIP_Init+0x240>)
 8007626:	78c9      	ldrb	r1, [r1, #3]
 8007628:	430b      	orrs	r3, r1
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007630:	431a      	orrs	r2, r3
 8007632:	4b48      	ldr	r3, [pc, #288]	; (8007754 <MX_LWIP_Init+0x240>)
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	0619      	lsls	r1, r3, #24
 8007638:	4b46      	ldr	r3, [pc, #280]	; (8007754 <MX_LWIP_Init+0x240>)
 800763a:	785b      	ldrb	r3, [r3, #1]
 800763c:	041b      	lsls	r3, r3, #16
 800763e:	4319      	orrs	r1, r3
 8007640:	4b44      	ldr	r3, [pc, #272]	; (8007754 <MX_LWIP_Init+0x240>)
 8007642:	789b      	ldrb	r3, [r3, #2]
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	430b      	orrs	r3, r1
 8007648:	4942      	ldr	r1, [pc, #264]	; (8007754 <MX_LWIP_Init+0x240>)
 800764a:	78c9      	ldrb	r1, [r1, #3]
 800764c:	430b      	orrs	r3, r1
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007654:	431a      	orrs	r2, r3
 8007656:	4b3f      	ldr	r3, [pc, #252]	; (8007754 <MX_LWIP_Init+0x240>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	0619      	lsls	r1, r3, #24
 800765c:	4b3d      	ldr	r3, [pc, #244]	; (8007754 <MX_LWIP_Init+0x240>)
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	041b      	lsls	r3, r3, #16
 8007662:	4319      	orrs	r1, r3
 8007664:	4b3b      	ldr	r3, [pc, #236]	; (8007754 <MX_LWIP_Init+0x240>)
 8007666:	789b      	ldrb	r3, [r3, #2]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	430b      	orrs	r3, r1
 800766c:	4939      	ldr	r1, [pc, #228]	; (8007754 <MX_LWIP_Init+0x240>)
 800766e:	78c9      	ldrb	r1, [r1, #3]
 8007670:	430b      	orrs	r3, r1
 8007672:	0e1b      	lsrs	r3, r3, #24
 8007674:	4313      	orrs	r3, r2
 8007676:	4a3a      	ldr	r2, [pc, #232]	; (8007760 <MX_LWIP_Init+0x24c>)
 8007678:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800767a:	4b37      	ldr	r3, [pc, #220]	; (8007758 <MX_LWIP_Init+0x244>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	061a      	lsls	r2, r3, #24
 8007680:	4b35      	ldr	r3, [pc, #212]	; (8007758 <MX_LWIP_Init+0x244>)
 8007682:	785b      	ldrb	r3, [r3, #1]
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	431a      	orrs	r2, r3
 8007688:	4b33      	ldr	r3, [pc, #204]	; (8007758 <MX_LWIP_Init+0x244>)
 800768a:	789b      	ldrb	r3, [r3, #2]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	4313      	orrs	r3, r2
 8007690:	4a31      	ldr	r2, [pc, #196]	; (8007758 <MX_LWIP_Init+0x244>)
 8007692:	78d2      	ldrb	r2, [r2, #3]
 8007694:	4313      	orrs	r3, r2
 8007696:	061a      	lsls	r2, r3, #24
 8007698:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <MX_LWIP_Init+0x244>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	0619      	lsls	r1, r3, #24
 800769e:	4b2e      	ldr	r3, [pc, #184]	; (8007758 <MX_LWIP_Init+0x244>)
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	041b      	lsls	r3, r3, #16
 80076a4:	4319      	orrs	r1, r3
 80076a6:	4b2c      	ldr	r3, [pc, #176]	; (8007758 <MX_LWIP_Init+0x244>)
 80076a8:	789b      	ldrb	r3, [r3, #2]
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	430b      	orrs	r3, r1
 80076ae:	492a      	ldr	r1, [pc, #168]	; (8007758 <MX_LWIP_Init+0x244>)
 80076b0:	78c9      	ldrb	r1, [r1, #3]
 80076b2:	430b      	orrs	r3, r1
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076ba:	431a      	orrs	r2, r3
 80076bc:	4b26      	ldr	r3, [pc, #152]	; (8007758 <MX_LWIP_Init+0x244>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	0619      	lsls	r1, r3, #24
 80076c2:	4b25      	ldr	r3, [pc, #148]	; (8007758 <MX_LWIP_Init+0x244>)
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	4319      	orrs	r1, r3
 80076ca:	4b23      	ldr	r3, [pc, #140]	; (8007758 <MX_LWIP_Init+0x244>)
 80076cc:	789b      	ldrb	r3, [r3, #2]
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	430b      	orrs	r3, r1
 80076d2:	4921      	ldr	r1, [pc, #132]	; (8007758 <MX_LWIP_Init+0x244>)
 80076d4:	78c9      	ldrb	r1, [r1, #3]
 80076d6:	430b      	orrs	r3, r1
 80076d8:	0a1b      	lsrs	r3, r3, #8
 80076da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076de:	431a      	orrs	r2, r3
 80076e0:	4b1d      	ldr	r3, [pc, #116]	; (8007758 <MX_LWIP_Init+0x244>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	0619      	lsls	r1, r3, #24
 80076e6:	4b1c      	ldr	r3, [pc, #112]	; (8007758 <MX_LWIP_Init+0x244>)
 80076e8:	785b      	ldrb	r3, [r3, #1]
 80076ea:	041b      	lsls	r3, r3, #16
 80076ec:	4319      	orrs	r1, r3
 80076ee:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <MX_LWIP_Init+0x244>)
 80076f0:	789b      	ldrb	r3, [r3, #2]
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	430b      	orrs	r3, r1
 80076f6:	4918      	ldr	r1, [pc, #96]	; (8007758 <MX_LWIP_Init+0x244>)
 80076f8:	78c9      	ldrb	r1, [r1, #3]
 80076fa:	430b      	orrs	r3, r1
 80076fc:	0e1b      	lsrs	r3, r3, #24
 80076fe:	4313      	orrs	r3, r2
 8007700:	4a18      	ldr	r2, [pc, #96]	; (8007764 <MX_LWIP_Init+0x250>)
 8007702:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007704:	4b18      	ldr	r3, [pc, #96]	; (8007768 <MX_LWIP_Init+0x254>)
 8007706:	9302      	str	r3, [sp, #8]
 8007708:	4b18      	ldr	r3, [pc, #96]	; (800776c <MX_LWIP_Init+0x258>)
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	2300      	movs	r3, #0
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	4b14      	ldr	r3, [pc, #80]	; (8007764 <MX_LWIP_Init+0x250>)
 8007712:	4a13      	ldr	r2, [pc, #76]	; (8007760 <MX_LWIP_Init+0x24c>)
 8007714:	4911      	ldr	r1, [pc, #68]	; (800775c <MX_LWIP_Init+0x248>)
 8007716:	4816      	ldr	r0, [pc, #88]	; (8007770 <MX_LWIP_Init+0x25c>)
 8007718:	f005 fd2a 	bl	800d170 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800771c:	4814      	ldr	r0, [pc, #80]	; (8007770 <MX_LWIP_Init+0x25c>)
 800771e:	f005 fed9 	bl	800d4d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <MX_LWIP_Init+0x25c>)
 8007724:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007728:	089b      	lsrs	r3, r3, #2
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007734:	480e      	ldr	r0, [pc, #56]	; (8007770 <MX_LWIP_Init+0x25c>)
 8007736:	f005 fedd 	bl	800d4f4 <netif_set_up>
 800773a:	e002      	b.n	8007742 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800773c:	480c      	ldr	r0, [pc, #48]	; (8007770 <MX_LWIP_Init+0x25c>)
 800773e:	f005 ff45 	bl	800d5cc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007742:	490c      	ldr	r1, [pc, #48]	; (8007774 <MX_LWIP_Init+0x260>)
 8007744:	480a      	ldr	r0, [pc, #40]	; (8007770 <MX_LWIP_Init+0x25c>)
 8007746:	f005 ff73 	bl	800d630 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800774a:	bf00      	nop
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	2000ae94 	.word	0x2000ae94
 8007754:	2000ae90 	.word	0x2000ae90
 8007758:	2000ae88 	.word	0x2000ae88
 800775c:	2000ae8c 	.word	0x2000ae8c
 8007760:	2000ae98 	.word	0x2000ae98
 8007764:	2000ae9c 	.word	0x2000ae9c
 8007768:	08016cd5 	.word	0x08016cd5
 800776c:	08007d05 	.word	0x08007d05
 8007770:	20005b78 	.word	0x20005b78
 8007774:	08007d71 	.word	0x08007d71

08007778 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08e      	sub	sp, #56	; 0x38
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	609a      	str	r2, [r3, #8]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a46      	ldr	r2, [pc, #280]	; (80078b0 <HAL_ETH_MspInit+0x138>)
 8007796:	4293      	cmp	r3, r2
 8007798:	f040 8085 	bne.w	80078a6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800779c:	2300      	movs	r3, #0
 800779e:	623b      	str	r3, [r7, #32]
 80077a0:	4b44      	ldr	r3, [pc, #272]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	4a43      	ldr	r2, [pc, #268]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077aa:	6313      	str	r3, [r2, #48]	; 0x30
 80077ac:	4b41      	ldr	r3, [pc, #260]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b4:	623b      	str	r3, [r7, #32]
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	2300      	movs	r3, #0
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	4a3c      	ldr	r2, [pc, #240]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077c6:	6313      	str	r3, [r2, #48]	; 0x30
 80077c8:	4b3a      	ldr	r3, [pc, #232]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	2300      	movs	r3, #0
 80077d6:	61bb      	str	r3, [r7, #24]
 80077d8:	4b36      	ldr	r3, [pc, #216]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077dc:	4a35      	ldr	r2, [pc, #212]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077e2:	6313      	str	r3, [r2, #48]	; 0x30
 80077e4:	4b33      	ldr	r3, [pc, #204]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	4a2e      	ldr	r2, [pc, #184]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 80077fa:	f043 0304 	orr.w	r3, r3, #4
 80077fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007800:	4b2c      	ldr	r3, [pc, #176]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800780c:	2300      	movs	r3, #0
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	4b28      	ldr	r3, [pc, #160]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	4a27      	ldr	r2, [pc, #156]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 8007816:	f043 0301 	orr.w	r3, r3, #1
 800781a:	6313      	str	r3, [r2, #48]	; 0x30
 800781c:	4b25      	ldr	r3, [pc, #148]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	4b21      	ldr	r3, [pc, #132]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 800782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007830:	4a20      	ldr	r2, [pc, #128]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 8007832:	f043 0302 	orr.w	r3, r3, #2
 8007836:	6313      	str	r3, [r2, #48]	; 0x30
 8007838:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <HAL_ETH_MspInit+0x13c>)
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007844:	2332      	movs	r3, #50	; 0x32
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007848:	2302      	movs	r3, #2
 800784a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784c:	2300      	movs	r3, #0
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007850:	2303      	movs	r3, #3
 8007852:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007854:	230b      	movs	r3, #11
 8007856:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800785c:	4619      	mov	r1, r3
 800785e:	4816      	ldr	r0, [pc, #88]	; (80078b8 <HAL_ETH_MspInit+0x140>)
 8007860:	f7fc fa4a 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007864:	2386      	movs	r3, #134	; 0x86
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007868:	2302      	movs	r3, #2
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786c:	2300      	movs	r3, #0
 800786e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007870:	2303      	movs	r3, #3
 8007872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007874:	230b      	movs	r3, #11
 8007876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800787c:	4619      	mov	r1, r3
 800787e:	480f      	ldr	r0, [pc, #60]	; (80078bc <HAL_ETH_MspInit+0x144>)
 8007880:	f7fc fa3a 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007884:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800788a:	2302      	movs	r3, #2
 800788c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800788e:	2300      	movs	r3, #0
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007892:	2303      	movs	r3, #3
 8007894:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007896:	230b      	movs	r3, #11
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800789a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800789e:	4619      	mov	r1, r3
 80078a0:	4807      	ldr	r0, [pc, #28]	; (80078c0 <HAL_ETH_MspInit+0x148>)
 80078a2:	f7fc fa29 	bl	8003cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80078a6:	bf00      	nop
 80078a8:	3738      	adds	r7, #56	; 0x38
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	40028000 	.word	0x40028000
 80078b4:	40023800 	.word	0x40023800
 80078b8:	40020800 	.word	0x40020800
 80078bc:	40020000 	.word	0x40020000
 80078c0:	40020400 	.word	0x40020400

080078c4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80078d0:	4b4d      	ldr	r3, [pc, #308]	; (8007a08 <low_level_init+0x144>)
 80078d2:	4a4e      	ldr	r2, [pc, #312]	; (8007a0c <low_level_init+0x148>)
 80078d4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80078d6:	4b4c      	ldr	r3, [pc, #304]	; (8007a08 <low_level_init+0x144>)
 80078d8:	2201      	movs	r2, #1
 80078da:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80078dc:	4b4a      	ldr	r3, [pc, #296]	; (8007a08 <low_level_init+0x144>)
 80078de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078e2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80078e4:	4b48      	ldr	r3, [pc, #288]	; (8007a08 <low_level_init+0x144>)
 80078e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078ea:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80078ec:	4b46      	ldr	r3, [pc, #280]	; (8007a08 <low_level_init+0x144>)
 80078ee:	2201      	movs	r2, #1
 80078f0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80078f2:	2300      	movs	r3, #0
 80078f4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80078f6:	2380      	movs	r3, #128	; 0x80
 80078f8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80078fa:	23e1      	movs	r3, #225	; 0xe1
 80078fc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80078fe:	2300      	movs	r3, #0
 8007900:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007902:	2300      	movs	r3, #0
 8007904:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007906:	2300      	movs	r3, #0
 8007908:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800790a:	4a3f      	ldr	r2, [pc, #252]	; (8007a08 <low_level_init+0x144>)
 800790c:	f107 0308 	add.w	r3, r7, #8
 8007910:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007912:	4b3d      	ldr	r3, [pc, #244]	; (8007a08 <low_level_init+0x144>)
 8007914:	2200      	movs	r2, #0
 8007916:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007918:	4b3b      	ldr	r3, [pc, #236]	; (8007a08 <low_level_init+0x144>)
 800791a:	2200      	movs	r2, #0
 800791c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800791e:	4b3a      	ldr	r3, [pc, #232]	; (8007a08 <low_level_init+0x144>)
 8007920:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007924:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007926:	4838      	ldr	r0, [pc, #224]	; (8007a08 <low_level_init+0x144>)
 8007928:	f7fb f8c0 	bl	8002aac <HAL_ETH_Init>
 800792c:	4603      	mov	r3, r0
 800792e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d108      	bne.n	8007948 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800793c:	f043 0304 	orr.w	r3, r3, #4
 8007940:	b2da      	uxtb	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007948:	2304      	movs	r3, #4
 800794a:	4a31      	ldr	r2, [pc, #196]	; (8007a10 <low_level_init+0x14c>)
 800794c:	4931      	ldr	r1, [pc, #196]	; (8007a14 <low_level_init+0x150>)
 800794e:	482e      	ldr	r0, [pc, #184]	; (8007a08 <low_level_init+0x144>)
 8007950:	f7fb fa48 	bl	8002de4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007954:	2304      	movs	r3, #4
 8007956:	4a30      	ldr	r2, [pc, #192]	; (8007a18 <low_level_init+0x154>)
 8007958:	4930      	ldr	r1, [pc, #192]	; (8007a1c <low_level_init+0x158>)
 800795a:	482b      	ldr	r0, [pc, #172]	; (8007a08 <low_level_init+0x144>)
 800795c:	f7fb faab 	bl	8002eb6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2206      	movs	r2, #6
 8007964:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007968:	4b27      	ldr	r3, [pc, #156]	; (8007a08 <low_level_init+0x144>)
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	781a      	ldrb	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007974:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <low_level_init+0x144>)
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	785a      	ldrb	r2, [r3, #1]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007980:	4b21      	ldr	r3, [pc, #132]	; (8007a08 <low_level_init+0x144>)
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	789a      	ldrb	r2, [r3, #2]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800798c:	4b1e      	ldr	r3, [pc, #120]	; (8007a08 <low_level_init+0x144>)
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	78da      	ldrb	r2, [r3, #3]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <low_level_init+0x144>)
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	791a      	ldrb	r2, [r3, #4]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80079a4:	4b18      	ldr	r3, [pc, #96]	; (8007a08 <low_level_init+0x144>)
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	795a      	ldrb	r2, [r3, #5]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80079b6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80079be:	f043 030a 	orr.w	r3, r3, #10
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80079ca:	480f      	ldr	r0, [pc, #60]	; (8007a08 <low_level_init+0x144>)
 80079cc:	f7fb fd1c 	bl	8003408 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80079d0:	f107 0310 	add.w	r3, r7, #16
 80079d4:	461a      	mov	r2, r3
 80079d6:	211d      	movs	r1, #29
 80079d8:	480b      	ldr	r0, [pc, #44]	; (8007a08 <low_level_init+0x144>)
 80079da:	f7fb fc47 	bl	800326c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f043 030b 	orr.w	r3, r3, #11
 80079e4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	461a      	mov	r2, r3
 80079ea:	211d      	movs	r1, #29
 80079ec:	4806      	ldr	r0, [pc, #24]	; (8007a08 <low_level_init+0x144>)
 80079ee:	f7fb fca5 	bl	800333c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80079f2:	f107 0310 	add.w	r3, r7, #16
 80079f6:	461a      	mov	r2, r3
 80079f8:	211d      	movs	r1, #29
 80079fa:	4803      	ldr	r0, [pc, #12]	; (8007a08 <low_level_init+0x144>)
 80079fc:	f7fb fc36 	bl	800326c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007a00:	bf00      	nop
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	2000c770 	.word	0x2000c770
 8007a0c:	40028000 	.word	0x40028000
 8007a10:	2000c7b8 	.word	0x2000c7b8
 8007a14:	2000aea0 	.word	0x2000aea0
 8007a18:	2000af20 	.word	0x2000af20
 8007a1c:	2000c6f0 	.word	0x2000c6f0

08007a20 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08a      	sub	sp, #40	; 0x28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007a2a:	4b4b      	ldr	r3, [pc, #300]	; (8007b58 <low_level_output+0x138>)
 8007a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007a42:	4b45      	ldr	r3, [pc, #276]	; (8007b58 <low_level_output+0x138>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	623b      	str	r3, [r7, #32]
 8007a50:	e05a      	b.n	8007b08 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da03      	bge.n	8007a62 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007a5a:	23f8      	movs	r3, #248	; 0xf8
 8007a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007a60:	e05c      	b.n	8007b1c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	895b      	ldrh	r3, [r3, #10]
 8007a66:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007a6c:	e02f      	b.n	8007ace <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	18d0      	adds	r0, r2, r3
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	18d1      	adds	r1, r2, r3
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007a82:	3304      	adds	r3, #4
 8007a84:	461a      	mov	r2, r3
 8007a86:	f00f fa31 	bl	8016eec <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	da03      	bge.n	8007aa0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007a98:	23f8      	movs	r3, #248	; 0xf8
 8007a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007a9e:	e03d      	b.n	8007b1c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007ab0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007abc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007ac8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d8c8      	bhi.n	8007a6e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	18d0      	adds	r0, r2, r3
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	4413      	add	r3, r2
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4619      	mov	r1, r3
 8007aee:	f00f f9fd 	bl	8016eec <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	623b      	str	r3, [r7, #32]
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1a1      	bne.n	8007a52 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007b0e:	6979      	ldr	r1, [r7, #20]
 8007b10:	4811      	ldr	r0, [pc, #68]	; (8007b58 <low_level_output+0x138>)
 8007b12:	f7fb fa3d 	bl	8002f90 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007b1c:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <low_level_output+0x138>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b24:	3314      	adds	r3, #20
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00d      	beq.n	8007b4c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007b30:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <low_level_output+0x138>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b38:	3314      	adds	r3, #20
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <low_level_output+0x138>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b46:	3304      	adds	r3, #4
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007b4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3728      	adds	r7, #40	; 0x28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	2000c770 	.word	0x2000c770

08007b5c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08c      	sub	sp, #48	; 0x30
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007b80:	484f      	ldr	r0, [pc, #316]	; (8007cc0 <low_level_input+0x164>)
 8007b82:	f7fb faef 	bl	8003164 <HAL_ETH_GetReceivedFrame>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <low_level_input+0x34>

    return NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e092      	b.n	8007cb6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007b90:	4b4b      	ldr	r3, [pc, #300]	; (8007cc0 <low_level_input+0x164>)
 8007b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b94:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007b96:	4b4a      	ldr	r3, [pc, #296]	; (8007cc0 <low_level_input+0x164>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007b9c:	89fb      	ldrh	r3, [r7, #14]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007ba2:	89fb      	ldrh	r3, [r7, #14]
 8007ba4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007ba8:	4619      	mov	r1, r3
 8007baa:	2000      	movs	r0, #0
 8007bac:	f005 fddc 	bl	800d768 <pbuf_alloc>
 8007bb0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d04b      	beq.n	8007c50 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007bb8:	4b41      	ldr	r3, [pc, #260]	; (8007cc0 <low_level_input+0x164>)
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bc6:	e040      	b.n	8007c4a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	895b      	ldrh	r3, [r3, #10]
 8007bcc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007bd2:	e021      	b.n	8007c18 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	18d0      	adds	r0, r2, r3
 8007bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	18d1      	adds	r1, r2, r3
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007be8:	3304      	adds	r3, #4
 8007bea:	461a      	mov	r2, r3
 8007bec:	f00f f97e 	bl	8016eec <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	4413      	add	r3, r2
 8007c02:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007c06:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007c12:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d8d6      	bhi.n	8007bd4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	18d0      	adds	r0, r2, r3
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	4413      	add	r3, r2
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4619      	mov	r1, r3
 8007c38:	f00f f958 	bl	8016eec <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	4413      	add	r3, r2
 8007c42:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1bb      	bne.n	8007bc8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007c50:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <low_level_input+0x164>)
 8007c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c54:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	e00b      	b.n	8007c74 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3301      	adds	r3, #1
 8007c72:	613b      	str	r3, [r7, #16]
 8007c74:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <low_level_input+0x164>)
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d3ee      	bcc.n	8007c5c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007c7e:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <low_level_input+0x164>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007c84:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <low_level_input+0x164>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8c:	3314      	adds	r3, #20
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00d      	beq.n	8007cb4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007c98:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <low_level_input+0x164>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca0:	3314      	adds	r3, #20
 8007ca2:	2280      	movs	r2, #128	; 0x80
 8007ca4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007ca6:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <low_level_input+0x164>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cae:	3308      	adds	r3, #8
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3730      	adds	r7, #48	; 0x30
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	2000c770 	.word	0x2000c770

08007cc4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ff45 	bl	8007b5c <low_level_input>
 8007cd2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d010      	beq.n	8007cfc <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	4798      	blx	r3
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007ce8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d006      	beq.n	8007cfe <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f006 f81d 	bl	800dd30 <pbuf_free>
    p = NULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e000      	b.n	8007cfe <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007cfc:	bf00      	nop
  }
}
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <ethernetif_init+0x1c>
 8007d12:	4b0e      	ldr	r3, [pc, #56]	; (8007d4c <ethernetif_init+0x48>)
 8007d14:	f44f 7202 	mov.w	r2, #520	; 0x208
 8007d18:	490d      	ldr	r1, [pc, #52]	; (8007d50 <ethernetif_init+0x4c>)
 8007d1a:	480e      	ldr	r0, [pc, #56]	; (8007d54 <ethernetif_init+0x50>)
 8007d1c:	f00f f916 	bl	8016f4c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2273      	movs	r2, #115	; 0x73
 8007d24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2274      	movs	r2, #116	; 0x74
 8007d2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <ethernetif_init+0x54>)
 8007d34:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a08      	ldr	r2, [pc, #32]	; (8007d5c <ethernetif_init+0x58>)
 8007d3a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fdc1 	bl	80078c4 <low_level_init>

  return ERR_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	08018fe8 	.word	0x08018fe8
 8007d50:	08019004 	.word	0x08019004
 8007d54:	08019014 	.word	0x08019014
 8007d58:	08015199 	.word	0x08015199
 8007d5c:	08007a21 	.word	0x08007a21

08007d60 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007d64:	f7fa f9c2 	bl	80020ec <HAL_GetTick>
 8007d68:	4603      	mov	r3, r0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d86:	089b      	lsrs	r3, r3, #2
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d05d      	beq.n	8007e4e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007d92:	4b34      	ldr	r3, [pc, #208]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d03f      	beq.n	8007e1a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007d9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4830      	ldr	r0, [pc, #192]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007da2:	f7fb facb 	bl	800333c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007da6:	f7fa f9a1 	bl	80020ec <HAL_GetTick>
 8007daa:	4603      	mov	r3, r0
 8007dac:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007dae:	f107 0308 	add.w	r3, r7, #8
 8007db2:	461a      	mov	r2, r3
 8007db4:	2101      	movs	r1, #1
 8007db6:	482b      	ldr	r0, [pc, #172]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007db8:	f7fb fa58 	bl	800326c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007dbc:	f7fa f996 	bl	80020ec <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dca:	d828      	bhi.n	8007e1e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0eb      	beq.n	8007dae <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007dd6:	f107 0308 	add.w	r3, r7, #8
 8007dda:	461a      	mov	r2, r3
 8007ddc:	2110      	movs	r1, #16
 8007dde:	4821      	ldr	r0, [pc, #132]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007de0:	f7fb fa44 	bl	800326c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d004      	beq.n	8007df8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007dee:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007df4:	60da      	str	r2, [r3, #12]
 8007df6:	e002      	b.n	8007dfe <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007df8:	4b1a      	ldr	r3, [pc, #104]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007e08:	4b16      	ldr	r3, [pc, #88]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	609a      	str	r2, [r3, #8]
 8007e0e:	e016      	b.n	8007e3e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007e10:	4b14      	ldr	r3, [pc, #80]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e16:	609a      	str	r2, [r3, #8]
 8007e18:	e011      	b.n	8007e3e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <ethernetif_update_config+0xb0>
          goto error;
 8007e1e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007e20:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	08db      	lsrs	r3, r3, #3
 8007e26:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007e28:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007e30:	4313      	orrs	r3, r2
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	2100      	movs	r1, #0
 8007e38:	480a      	ldr	r0, [pc, #40]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007e3a:	f7fb fa7f 	bl	800333c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4808      	ldr	r0, [pc, #32]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007e42:	f7fb fb3f 	bl	80034c4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007e46:	4807      	ldr	r0, [pc, #28]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007e48:	f7fb fade 	bl	8003408 <HAL_ETH_Start>
 8007e4c:	e002      	b.n	8007e54 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007e4e:	4805      	ldr	r0, [pc, #20]	; (8007e64 <ethernetif_update_config+0xf4>)
 8007e50:	f7fb fb09 	bl	8003466 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f807 	bl	8007e68 <ethernetif_notify_conn_changed>
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	2000c770 	.word	0x2000c770

08007e68 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	4a08      	ldr	r2, [pc, #32]	; (8007eac <disk_status+0x30>)
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	79fa      	ldrb	r2, [r7, #7]
 8007e94:	4905      	ldr	r1, [pc, #20]	; (8007eac <disk_status+0x30>)
 8007e96:	440a      	add	r2, r1
 8007e98:	7a12      	ldrb	r2, [r2, #8]
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	4798      	blx	r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20001210 	.word	0x20001210

08007eb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	4a0d      	ldr	r2, [pc, #52]	; (8007ef8 <disk_initialize+0x48>)
 8007ec2:	5cd3      	ldrb	r3, [r2, r3]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d111      	bne.n	8007eec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	4a0b      	ldr	r2, [pc, #44]	; (8007ef8 <disk_initialize+0x48>)
 8007ecc:	2101      	movs	r1, #1
 8007ece:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	4a09      	ldr	r2, [pc, #36]	; (8007ef8 <disk_initialize+0x48>)
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	79fa      	ldrb	r2, [r7, #7]
 8007ede:	4906      	ldr	r1, [pc, #24]	; (8007ef8 <disk_initialize+0x48>)
 8007ee0:	440a      	add	r2, r1
 8007ee2:	7a12      	ldrb	r2, [r2, #8]
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4798      	blx	r3
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20001210 	.word	0x20001210

08007efc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007efc:	b590      	push	{r4, r7, lr}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	4a0a      	ldr	r2, [pc, #40]	; (8007f38 <disk_read+0x3c>)
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	689c      	ldr	r4, [r3, #8]
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	4a07      	ldr	r2, [pc, #28]	; (8007f38 <disk_read+0x3c>)
 8007f1c:	4413      	add	r3, r2
 8007f1e:	7a18      	ldrb	r0, [r3, #8]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	47a0      	blx	r4
 8007f28:	4603      	mov	r3, r0
 8007f2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd90      	pop	{r4, r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20001210 	.word	0x20001210

08007f3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007f3c:	b590      	push	{r4, r7, lr}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <disk_write+0x3c>)
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	68dc      	ldr	r4, [r3, #12]
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	4a07      	ldr	r2, [pc, #28]	; (8007f78 <disk_write+0x3c>)
 8007f5c:	4413      	add	r3, r2
 8007f5e:	7a18      	ldrb	r0, [r3, #8]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	68b9      	ldr	r1, [r7, #8]
 8007f66:	47a0      	blx	r4
 8007f68:	4603      	mov	r3, r0
 8007f6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd90      	pop	{r4, r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20001210 	.word	0x20001210

08007f7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	603a      	str	r2, [r7, #0]
 8007f86:	71fb      	strb	r3, [r7, #7]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <disk_ioctl+0x38>)
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	79fa      	ldrb	r2, [r7, #7]
 8007f9a:	4906      	ldr	r1, [pc, #24]	; (8007fb4 <disk_ioctl+0x38>)
 8007f9c:	440a      	add	r2, r1
 8007f9e:	7a10      	ldrb	r0, [r2, #8]
 8007fa0:	79b9      	ldrb	r1, [r7, #6]
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	4798      	blx	r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]
  return res;
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20001210 	.word	0x20001210

08007fb8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007fc8:	89fb      	ldrh	r3, [r7, #14]
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	b21a      	sxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	b21b      	sxth	r3, r3
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	b21b      	sxth	r3, r3
 8007fd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007fda:	89fb      	ldrh	r3, [r7, #14]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3303      	adds	r3, #3
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	021b      	lsls	r3, r3, #8
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	3202      	adds	r2, #2
 8008000:	7812      	ldrb	r2, [r2, #0]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	021b      	lsls	r3, r3, #8
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	3201      	adds	r2, #1
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	021b      	lsls	r3, r3, #8
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	7812      	ldrb	r2, [r2, #0]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008020:	68fb      	ldr	r3, [r7, #12]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	887a      	ldrh	r2, [r7, #2]
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	887b      	ldrh	r3, [r7, #2]
 8008048:	0a1b      	lsrs	r3, r3, #8
 800804a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	607a      	str	r2, [r7, #4]
 8008052:	887a      	ldrh	r2, [r7, #2]
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	701a      	strb	r2, [r3, #0]
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	0a1b      	lsrs	r3, r3, #8
 800807e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	0a1b      	lsrs	r3, r3, #8
 8008090:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	0a1b      	lsrs	r3, r3, #8
 80080a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	607a      	str	r2, [r7, #4]
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	b2d2      	uxtb	r2, r2
 80080ae:	701a      	strb	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00d      	beq.n	80080f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	1c53      	adds	r3, r2, #1
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	1c59      	adds	r1, r3, #1
 80080e0:	6179      	str	r1, [r7, #20]
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	607b      	str	r3, [r7, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f1      	bne.n	80080d6 <mem_cpy+0x1a>
	}
}
 80080f2:	bf00      	nop
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80080fe:	b480      	push	{r7}
 8008100:	b087      	sub	sp, #28
 8008102:	af00      	add	r7, sp, #0
 8008104:	60f8      	str	r0, [r7, #12]
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	617a      	str	r2, [r7, #20]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3b01      	subs	r3, #1
 800811e:	607b      	str	r3, [r7, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1f3      	bne.n	800810e <mem_set+0x10>
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008134:	b480      	push	{r7}
 8008136:	b089      	sub	sp, #36	; 0x24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	61fa      	str	r2, [r7, #28]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	4619      	mov	r1, r3
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	61ba      	str	r2, [r7, #24]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	1acb      	subs	r3, r1, r3
 8008160:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3b01      	subs	r3, #1
 8008166:	607b      	str	r3, [r7, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d002      	beq.n	8008174 <mem_cmp+0x40>
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0eb      	beq.n	800814c <mem_cmp+0x18>

	return r;
 8008174:	697b      	ldr	r3, [r7, #20]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3724      	adds	r7, #36	; 0x24
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800818c:	e002      	b.n	8008194 <chk_chr+0x12>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3301      	adds	r3, #1
 8008192:	607b      	str	r3, [r7, #4]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <chk_chr+0x26>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d1f2      	bne.n	800818e <chk_chr+0xc>
	return *str;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	781b      	ldrb	r3, [r3, #0]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	e029      	b.n	8008220 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80081cc:	4a27      	ldr	r2, [pc, #156]	; (800826c <chk_lock+0xb4>)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	4413      	add	r3, r2
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01d      	beq.n	8008216 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081da:	4a24      	ldr	r2, [pc, #144]	; (800826c <chk_lock+0xb4>)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	011b      	lsls	r3, r3, #4
 80081e0:	4413      	add	r3, r2
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d116      	bne.n	800821a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80081ec:	4a1f      	ldr	r2, [pc, #124]	; (800826c <chk_lock+0xb4>)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	4413      	add	r3, r2
 80081f4:	3304      	adds	r3, #4
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d10c      	bne.n	800821a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008200:	4a1a      	ldr	r2, [pc, #104]	; (800826c <chk_lock+0xb4>)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	4413      	add	r3, r2
 8008208:	3308      	adds	r3, #8
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008210:	429a      	cmp	r2, r3
 8008212:	d102      	bne.n	800821a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008214:	e007      	b.n	8008226 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008216:	2301      	movs	r3, #1
 8008218:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d9d2      	bls.n	80081cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d109      	bne.n	8008240 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <chk_lock+0x80>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d101      	bne.n	800823c <chk_lock+0x84>
 8008238:	2300      	movs	r3, #0
 800823a:	e010      	b.n	800825e <chk_lock+0xa6>
 800823c:	2312      	movs	r3, #18
 800823e:	e00e      	b.n	800825e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d108      	bne.n	8008258 <chk_lock+0xa0>
 8008246:	4a09      	ldr	r2, [pc, #36]	; (800826c <chk_lock+0xb4>)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	4413      	add	r3, r2
 800824e:	330c      	adds	r3, #12
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008256:	d101      	bne.n	800825c <chk_lock+0xa4>
 8008258:	2310      	movs	r3, #16
 800825a:	e000      	b.n	800825e <chk_lock+0xa6>
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	200011f0 	.word	0x200011f0

08008270 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008276:	2300      	movs	r3, #0
 8008278:	607b      	str	r3, [r7, #4]
 800827a:	e002      	b.n	8008282 <enq_lock+0x12>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3301      	adds	r3, #1
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d806      	bhi.n	8008296 <enq_lock+0x26>
 8008288:	4a09      	ldr	r2, [pc, #36]	; (80082b0 <enq_lock+0x40>)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	4413      	add	r3, r2
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1f2      	bne.n	800827c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b02      	cmp	r3, #2
 800829a:	bf14      	ite	ne
 800829c:	2301      	movne	r3, #1
 800829e:	2300      	moveq	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	200011f0 	.word	0x200011f0

080082b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	e01f      	b.n	8008304 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80082c4:	4a41      	ldr	r2, [pc, #260]	; (80083cc <inc_lock+0x118>)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	4413      	add	r3, r2
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d113      	bne.n	80082fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80082d6:	4a3d      	ldr	r2, [pc, #244]	; (80083cc <inc_lock+0x118>)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	4413      	add	r3, r2
 80082de:	3304      	adds	r3, #4
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d109      	bne.n	80082fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80082ea:	4a38      	ldr	r2, [pc, #224]	; (80083cc <inc_lock+0x118>)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	4413      	add	r3, r2
 80082f2:	3308      	adds	r3, #8
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d006      	beq.n	800830c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d9dc      	bls.n	80082c4 <inc_lock+0x10>
 800830a:	e000      	b.n	800830e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800830c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d132      	bne.n	800837a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008314:	2300      	movs	r3, #0
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	e002      	b.n	8008320 <inc_lock+0x6c>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d806      	bhi.n	8008334 <inc_lock+0x80>
 8008326:	4a29      	ldr	r2, [pc, #164]	; (80083cc <inc_lock+0x118>)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	011b      	lsls	r3, r3, #4
 800832c:	4413      	add	r3, r2
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1f2      	bne.n	800831a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d101      	bne.n	800833e <inc_lock+0x8a>
 800833a:	2300      	movs	r3, #0
 800833c:	e040      	b.n	80083c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4922      	ldr	r1, [pc, #136]	; (80083cc <inc_lock+0x118>)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	440b      	add	r3, r1
 800834a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	491e      	ldr	r1, [pc, #120]	; (80083cc <inc_lock+0x118>)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	011b      	lsls	r3, r3, #4
 8008356:	440b      	add	r3, r1
 8008358:	3304      	adds	r3, #4
 800835a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	695a      	ldr	r2, [r3, #20]
 8008360:	491a      	ldr	r1, [pc, #104]	; (80083cc <inc_lock+0x118>)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	440b      	add	r3, r1
 8008368:	3308      	adds	r3, #8
 800836a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800836c:	4a17      	ldr	r2, [pc, #92]	; (80083cc <inc_lock+0x118>)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	4413      	add	r3, r2
 8008374:	330c      	adds	r3, #12
 8008376:	2200      	movs	r2, #0
 8008378:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d009      	beq.n	8008394 <inc_lock+0xe0>
 8008380:	4a12      	ldr	r2, [pc, #72]	; (80083cc <inc_lock+0x118>)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	4413      	add	r3, r2
 8008388:	330c      	adds	r3, #12
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <inc_lock+0xe0>
 8008390:	2300      	movs	r3, #0
 8008392:	e015      	b.n	80083c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d108      	bne.n	80083ac <inc_lock+0xf8>
 800839a:	4a0c      	ldr	r2, [pc, #48]	; (80083cc <inc_lock+0x118>)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	4413      	add	r3, r2
 80083a2:	330c      	adds	r3, #12
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	3301      	adds	r3, #1
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	e001      	b.n	80083b0 <inc_lock+0xfc>
 80083ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083b0:	4906      	ldr	r1, [pc, #24]	; (80083cc <inc_lock+0x118>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	440b      	add	r3, r1
 80083b8:	330c      	adds	r3, #12
 80083ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	200011f0 	.word	0x200011f0

080083d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3b01      	subs	r3, #1
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d825      	bhi.n	8008430 <dec_lock+0x60>
		n = Files[i].ctr;
 80083e4:	4a17      	ldr	r2, [pc, #92]	; (8008444 <dec_lock+0x74>)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	4413      	add	r3, r2
 80083ec:	330c      	adds	r3, #12
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80083f2:	89fb      	ldrh	r3, [r7, #14]
 80083f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f8:	d101      	bne.n	80083fe <dec_lock+0x2e>
 80083fa:	2300      	movs	r3, #0
 80083fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80083fe:	89fb      	ldrh	r3, [r7, #14]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <dec_lock+0x3a>
 8008404:	89fb      	ldrh	r3, [r7, #14]
 8008406:	3b01      	subs	r3, #1
 8008408:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800840a:	4a0e      	ldr	r2, [pc, #56]	; (8008444 <dec_lock+0x74>)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	4413      	add	r3, r2
 8008412:	330c      	adds	r3, #12
 8008414:	89fa      	ldrh	r2, [r7, #14]
 8008416:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008418:	89fb      	ldrh	r3, [r7, #14]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d105      	bne.n	800842a <dec_lock+0x5a>
 800841e:	4a09      	ldr	r2, [pc, #36]	; (8008444 <dec_lock+0x74>)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	4413      	add	r3, r2
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	737b      	strb	r3, [r7, #13]
 800842e:	e001      	b.n	8008434 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008430:	2302      	movs	r3, #2
 8008432:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008434:	7b7b      	ldrb	r3, [r7, #13]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	200011f0 	.word	0x200011f0

08008448 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e010      	b.n	8008478 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008456:	4a0d      	ldr	r2, [pc, #52]	; (800848c <clear_lock+0x44>)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	4413      	add	r3, r2
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d105      	bne.n	8008472 <clear_lock+0x2a>
 8008466:	4a09      	ldr	r2, [pc, #36]	; (800848c <clear_lock+0x44>)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	4413      	add	r3, r2
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d9eb      	bls.n	8008456 <clear_lock+0xe>
	}
}
 800847e:	bf00      	nop
 8008480:	bf00      	nop
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	200011f0 	.word	0x200011f0

08008490 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	78db      	ldrb	r3, [r3, #3]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d034      	beq.n	800850e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	7858      	ldrb	r0, [r3, #1]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80084b4:	2301      	movs	r3, #1
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	f7ff fd40 	bl	8007f3c <disk_write>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	73fb      	strb	r3, [r7, #15]
 80084c6:	e022      	b.n	800850e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d217      	bcs.n	800850e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	789b      	ldrb	r3, [r3, #2]
 80084e2:	613b      	str	r3, [r7, #16]
 80084e4:	e010      	b.n	8008508 <sync_window+0x78>
					wsect += fs->fsize;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	7858      	ldrb	r0, [r3, #1]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80084fa:	2301      	movs	r3, #1
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	f7ff fd1d 	bl	8007f3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	3b01      	subs	r3, #1
 8008506:	613b      	str	r3, [r7, #16]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d8eb      	bhi.n	80084e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d01b      	beq.n	8008568 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff ffad 	bl	8008490 <sync_window>
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d113      	bne.n	8008568 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7858      	ldrb	r0, [r3, #1]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800854a:	2301      	movs	r3, #1
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	f7ff fcd5 	bl	8007efc <disk_read>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800855c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800855e:	2301      	movs	r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008568:	7bfb      	ldrb	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff ff87 	bl	8008490 <sync_window>
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d159      	bne.n	8008640 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d149      	bne.n	8008628 <sync_fs+0xb4>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	791b      	ldrb	r3, [r3, #4]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d145      	bne.n	8008628 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	899b      	ldrh	r3, [r3, #12]
 80085a6:	461a      	mov	r2, r3
 80085a8:	2100      	movs	r1, #0
 80085aa:	f7ff fda8 	bl	80080fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3334      	adds	r3, #52	; 0x34
 80085b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80085b6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff fd37 	bl	800802e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3334      	adds	r3, #52	; 0x34
 80085c4:	4921      	ldr	r1, [pc, #132]	; (800864c <sync_fs+0xd8>)
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff fd4c 	bl	8008064 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3334      	adds	r3, #52	; 0x34
 80085d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80085d4:	491e      	ldr	r1, [pc, #120]	; (8008650 <sync_fs+0xdc>)
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff fd44 	bl	8008064 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3334      	adds	r3, #52	; 0x34
 80085e0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	4619      	mov	r1, r3
 80085ea:	4610      	mov	r0, r2
 80085ec:	f7ff fd3a 	bl	8008064 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3334      	adds	r3, #52	; 0x34
 80085f4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f7ff fd30 	bl	8008064 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7858      	ldrb	r0, [r3, #1]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800861c:	2301      	movs	r3, #1
 800861e:	f7ff fc8d 	bl	8007f3c <disk_write>
			fs->fsi_flag = 0;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	2200      	movs	r2, #0
 800862e:	2100      	movs	r1, #0
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fca3 	bl	8007f7c <disk_ioctl>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <sync_fs+0xcc>
 800863c:	2301      	movs	r3, #1
 800863e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	41615252 	.word	0x41615252
 8008650:	61417272 	.word	0x61417272

08008654 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	3b02      	subs	r3, #2
 8008662:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	3b02      	subs	r3, #2
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	d301      	bcc.n	8008674 <clust2sect+0x20>
 8008670:	2300      	movs	r3, #0
 8008672:	e008      	b.n	8008686 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	895b      	ldrh	r3, [r3, #10]
 8008678:	461a      	mov	r2, r3
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	fb03 f202 	mul.w	r2, r3, r2
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4413      	add	r3, r2
}
 8008686:	4618      	mov	r0, r3
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b086      	sub	sp, #24
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d904      	bls.n	80086b2 <get_fat+0x20>
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d302      	bcc.n	80086b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80086b2:	2301      	movs	r3, #1
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	e0bb      	b.n	8008830 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80086b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	f000 8083 	beq.w	80087ce <get_fat+0x13c>
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	f300 80a7 	bgt.w	800881c <get_fat+0x18a>
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d002      	beq.n	80086d8 <get_fat+0x46>
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d056      	beq.n	8008784 <get_fat+0xf2>
 80086d6:	e0a1      	b.n	800881c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4413      	add	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	899b      	ldrh	r3, [r3, #12]
 80086ee:	4619      	mov	r1, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80086f6:	4413      	add	r3, r2
 80086f8:	4619      	mov	r1, r3
 80086fa:	6938      	ldr	r0, [r7, #16]
 80086fc:	f7ff ff0c 	bl	8008518 <move_window>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 808d 	bne.w	8008822 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	60fa      	str	r2, [r7, #12]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	8992      	ldrh	r2, [r2, #12]
 8008712:	fbb3 f1f2 	udiv	r1, r3, r2
 8008716:	fb02 f201 	mul.w	r2, r2, r1
 800871a:	1a9b      	subs	r3, r3, r2
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	4413      	add	r3, r2
 8008720:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008724:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	899b      	ldrh	r3, [r3, #12]
 800872e:	4619      	mov	r1, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	fbb3 f3f1 	udiv	r3, r3, r1
 8008736:	4413      	add	r3, r2
 8008738:	4619      	mov	r1, r3
 800873a:	6938      	ldr	r0, [r7, #16]
 800873c:	f7ff feec 	bl	8008518 <move_window>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d16f      	bne.n	8008826 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	899b      	ldrh	r3, [r3, #12]
 800874a:	461a      	mov	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008752:	fb02 f201 	mul.w	r2, r2, r1
 8008756:	1a9b      	subs	r3, r3, r2
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4413      	add	r3, r2
 800875c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008760:	021b      	lsls	r3, r3, #8
 8008762:	461a      	mov	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4313      	orrs	r3, r2
 8008768:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <get_fat+0xe8>
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	091b      	lsrs	r3, r3, #4
 8008778:	e002      	b.n	8008780 <get_fat+0xee>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008780:	617b      	str	r3, [r7, #20]
			break;
 8008782:	e055      	b.n	8008830 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	899b      	ldrh	r3, [r3, #12]
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	b29b      	uxth	r3, r3
 8008790:	4619      	mov	r1, r3
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	fbb3 f3f1 	udiv	r3, r3, r1
 8008798:	4413      	add	r3, r2
 800879a:	4619      	mov	r1, r3
 800879c:	6938      	ldr	r0, [r7, #16]
 800879e:	f7ff febb 	bl	8008518 <move_window>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d140      	bne.n	800882a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	8992      	ldrh	r2, [r2, #12]
 80087b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80087ba:	fb02 f200 	mul.w	r2, r2, r0
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	440b      	add	r3, r1
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff fbf8 	bl	8007fb8 <ld_word>
 80087c8:	4603      	mov	r3, r0
 80087ca:	617b      	str	r3, [r7, #20]
			break;
 80087cc:	e030      	b.n	8008830 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	899b      	ldrh	r3, [r3, #12]
 80087d6:	089b      	lsrs	r3, r3, #2
 80087d8:	b29b      	uxth	r3, r3
 80087da:	4619      	mov	r1, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	fbb3 f3f1 	udiv	r3, r3, r1
 80087e2:	4413      	add	r3, r2
 80087e4:	4619      	mov	r1, r3
 80087e6:	6938      	ldr	r0, [r7, #16]
 80087e8:	f7ff fe96 	bl	8008518 <move_window>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d11d      	bne.n	800882e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	8992      	ldrh	r2, [r2, #12]
 8008800:	fbb3 f0f2 	udiv	r0, r3, r2
 8008804:	fb02 f200 	mul.w	r2, r2, r0
 8008808:	1a9b      	subs	r3, r3, r2
 800880a:	440b      	add	r3, r1
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff fbeb 	bl	8007fe8 <ld_dword>
 8008812:	4603      	mov	r3, r0
 8008814:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008818:	617b      	str	r3, [r7, #20]
			break;
 800881a:	e009      	b.n	8008830 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800881c:	2301      	movs	r3, #1
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	e006      	b.n	8008830 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008822:	bf00      	nop
 8008824:	e004      	b.n	8008830 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008826:	bf00      	nop
 8008828:	e002      	b.n	8008830 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800882a:	bf00      	nop
 800882c:	e000      	b.n	8008830 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800882e:	bf00      	nop
		}
	}

	return val;
 8008830:	697b      	ldr	r3, [r7, #20]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800883a:	b590      	push	{r4, r7, lr}
 800883c:	b089      	sub	sp, #36	; 0x24
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008846:	2302      	movs	r3, #2
 8008848:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b01      	cmp	r3, #1
 800884e:	f240 8102 	bls.w	8008a56 <put_fat+0x21c>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	429a      	cmp	r2, r3
 800885a:	f080 80fc 	bcs.w	8008a56 <put_fat+0x21c>
		switch (fs->fs_type) {
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b03      	cmp	r3, #3
 8008864:	f000 80b6 	beq.w	80089d4 <put_fat+0x19a>
 8008868:	2b03      	cmp	r3, #3
 800886a:	f300 80fd 	bgt.w	8008a68 <put_fat+0x22e>
 800886e:	2b01      	cmp	r3, #1
 8008870:	d003      	beq.n	800887a <put_fat+0x40>
 8008872:	2b02      	cmp	r3, #2
 8008874:	f000 8083 	beq.w	800897e <put_fat+0x144>
 8008878:	e0f6      	b.n	8008a68 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	085b      	lsrs	r3, r3, #1
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	4413      	add	r3, r2
 8008886:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	899b      	ldrh	r3, [r3, #12]
 8008890:	4619      	mov	r1, r3
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	fbb3 f3f1 	udiv	r3, r3, r1
 8008898:	4413      	add	r3, r2
 800889a:	4619      	mov	r1, r3
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff fe3b 	bl	8008518 <move_window>
 80088a2:	4603      	mov	r3, r0
 80088a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088a6:	7ffb      	ldrb	r3, [r7, #31]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f040 80d6 	bne.w	8008a5a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	61ba      	str	r2, [r7, #24]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	8992      	ldrh	r2, [r2, #12]
 80088be:	fbb3 f0f2 	udiv	r0, r3, r2
 80088c2:	fb02 f200 	mul.w	r2, r2, r0
 80088c6:	1a9b      	subs	r3, r3, r2
 80088c8:	440b      	add	r3, r1
 80088ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00d      	beq.n	80088f2 <put_fat+0xb8>
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	b25b      	sxtb	r3, r3
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	b25a      	sxtb	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	011b      	lsls	r3, r3, #4
 80088e8:	b25b      	sxtb	r3, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	b25b      	sxtb	r3, r3
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	e001      	b.n	80088f6 <put_fat+0xbc>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	899b      	ldrh	r3, [r3, #12]
 8008908:	4619      	mov	r1, r3
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008910:	4413      	add	r3, r2
 8008912:	4619      	mov	r1, r3
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7ff fdff 	bl	8008518 <move_window>
 800891a:	4603      	mov	r3, r0
 800891c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800891e:	7ffb      	ldrb	r3, [r7, #31]
 8008920:	2b00      	cmp	r3, #0
 8008922:	f040 809c 	bne.w	8008a5e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	899b      	ldrh	r3, [r3, #12]
 8008930:	461a      	mov	r2, r3
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	fbb3 f0f2 	udiv	r0, r3, r2
 8008938:	fb02 f200 	mul.w	r2, r2, r0
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	440b      	add	r3, r1
 8008940:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <put_fat+0x11a>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	091b      	lsrs	r3, r3, #4
 8008950:	b2db      	uxtb	r3, r3
 8008952:	e00e      	b.n	8008972 <put_fat+0x138>
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	b25b      	sxtb	r3, r3
 800895a:	f023 030f 	bic.w	r3, r3, #15
 800895e:	b25a      	sxtb	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	0a1b      	lsrs	r3, r3, #8
 8008964:	b25b      	sxtb	r3, r3
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	b25b      	sxtb	r3, r3
 800896c:	4313      	orrs	r3, r2
 800896e:	b25b      	sxtb	r3, r3
 8008970:	b2db      	uxtb	r3, r3
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2201      	movs	r2, #1
 800897a:	70da      	strb	r2, [r3, #3]
			break;
 800897c:	e074      	b.n	8008a68 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	899b      	ldrh	r3, [r3, #12]
 8008986:	085b      	lsrs	r3, r3, #1
 8008988:	b29b      	uxth	r3, r3
 800898a:	4619      	mov	r1, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008992:	4413      	add	r3, r2
 8008994:	4619      	mov	r1, r3
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f7ff fdbe 	bl	8008518 <move_window>
 800899c:	4603      	mov	r3, r0
 800899e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089a0:	7ffb      	ldrb	r3, [r7, #31]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d15d      	bne.n	8008a62 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	8992      	ldrh	r2, [r2, #12]
 80089b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80089b8:	fb02 f200 	mul.w	r2, r2, r0
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	440b      	add	r3, r1
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	b292      	uxth	r2, r2
 80089c4:	4611      	mov	r1, r2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff fb31 	bl	800802e <st_word>
			fs->wflag = 1;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2201      	movs	r2, #1
 80089d0:	70da      	strb	r2, [r3, #3]
			break;
 80089d2:	e049      	b.n	8008a68 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	899b      	ldrh	r3, [r3, #12]
 80089dc:	089b      	lsrs	r3, r3, #2
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4619      	mov	r1, r3
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80089e8:	4413      	add	r3, r2
 80089ea:	4619      	mov	r1, r3
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f7ff fd93 	bl	8008518 <move_window>
 80089f2:	4603      	mov	r3, r0
 80089f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089f6:	7ffb      	ldrb	r3, [r7, #31]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d134      	bne.n	8008a66 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	8992      	ldrh	r2, [r2, #12]
 8008a10:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a14:	fb02 f200 	mul.w	r2, r2, r0
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff fae3 	bl	8007fe8 <ld_dword>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a28:	4323      	orrs	r3, r4
 8008a2a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	8992      	ldrh	r2, [r2, #12]
 8008a3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a3e:	fb02 f200 	mul.w	r2, r2, r0
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	440b      	add	r3, r1
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff fb0b 	bl	8008064 <st_dword>
			fs->wflag = 1;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2201      	movs	r2, #1
 8008a52:	70da      	strb	r2, [r3, #3]
			break;
 8008a54:	e008      	b.n	8008a68 <put_fat+0x22e>
		}
	}
 8008a56:	bf00      	nop
 8008a58:	e006      	b.n	8008a68 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008a5a:	bf00      	nop
 8008a5c:	e004      	b.n	8008a68 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008a5e:	bf00      	nop
 8008a60:	e002      	b.n	8008a68 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008a62:	bf00      	nop
 8008a64:	e000      	b.n	8008a68 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008a66:	bf00      	nop
	return res;
 8008a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3724      	adds	r7, #36	; 0x24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd90      	pop	{r4, r7, pc}

08008a72 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b088      	sub	sp, #32
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d904      	bls.n	8008a98 <remove_chain+0x26>
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d301      	bcc.n	8008a9c <remove_chain+0x2a>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e04b      	b.n	8008b34 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00c      	beq.n	8008abc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	69b8      	ldr	r0, [r7, #24]
 8008aaa:	f7ff fec6 	bl	800883a <put_fat>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008ab2:	7ffb      	ldrb	r3, [r7, #31]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <remove_chain+0x4a>
 8008ab8:	7ffb      	ldrb	r3, [r7, #31]
 8008aba:	e03b      	b.n	8008b34 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f7ff fde7 	bl	8008692 <get_fat>
 8008ac4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d031      	beq.n	8008b30 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d101      	bne.n	8008ad6 <remove_chain+0x64>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e02e      	b.n	8008b34 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008adc:	d101      	bne.n	8008ae2 <remove_chain+0x70>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e028      	b.n	8008b34 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	69b8      	ldr	r0, [r7, #24]
 8008ae8:	f7ff fea7 	bl	800883a <put_fat>
 8008aec:	4603      	mov	r3, r0
 8008aee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008af0:	7ffb      	ldrb	r3, [r7, #31]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <remove_chain+0x88>
 8008af6:	7ffb      	ldrb	r3, [r7, #31]
 8008af8:	e01c      	b.n	8008b34 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	695a      	ldr	r2, [r3, #20]
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	3b02      	subs	r3, #2
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d20b      	bcs.n	8008b20 <remove_chain+0xae>
			fs->free_clst++;
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	791b      	ldrb	r3, [r3, #4]
 8008b16:	f043 0301 	orr.w	r3, r3, #1
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d3c6      	bcc.n	8008abc <remove_chain+0x4a>
 8008b2e:	e000      	b.n	8008b32 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008b30:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3720      	adds	r7, #32
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10d      	bne.n	8008b6e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <create_chain+0x2c>
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d31b      	bcc.n	8008ba0 <create_chain+0x64>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	61bb      	str	r3, [r7, #24]
 8008b6c:	e018      	b.n	8008ba0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff fd8e 	bl	8008692 <get_fat>
 8008b76:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d801      	bhi.n	8008b82 <create_chain+0x46>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e070      	b.n	8008c64 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b88:	d101      	bne.n	8008b8e <create_chain+0x52>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	e06a      	b.n	8008c64 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d201      	bcs.n	8008b9c <create_chain+0x60>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	e063      	b.n	8008c64 <create_chain+0x128>
		scl = clst;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d307      	bcc.n	8008bc4 <create_chain+0x88>
				ncl = 2;
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d901      	bls.n	8008bc4 <create_chain+0x88>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e04f      	b.n	8008c64 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008bc4:	69f9      	ldr	r1, [r7, #28]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff fd63 	bl	8008692 <get_fat>
 8008bcc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00e      	beq.n	8008bf2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d003      	beq.n	8008be2 <create_chain+0xa6>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be0:	d101      	bne.n	8008be6 <create_chain+0xaa>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	e03e      	b.n	8008c64 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d1da      	bne.n	8008ba4 <create_chain+0x68>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e038      	b.n	8008c64 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008bf2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bf8:	69f9      	ldr	r1, [r7, #28]
 8008bfa:	6938      	ldr	r0, [r7, #16]
 8008bfc:	f7ff fe1d 	bl	800883a <put_fat>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <create_chain+0xe2>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d006      	beq.n	8008c1e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6938      	ldr	r0, [r7, #16]
 8008c16:	f7ff fe10 	bl	800883a <put_fat>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d116      	bne.n	8008c52 <create_chain+0x116>
		fs->last_clst = ncl;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	695a      	ldr	r2, [r3, #20]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	3b02      	subs	r3, #2
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d804      	bhi.n	8008c42 <create_chain+0x106>
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	1e5a      	subs	r2, r3, #1
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	791b      	ldrb	r3, [r3, #4]
 8008c46:	f043 0301 	orr.w	r3, r3, #1
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	711a      	strb	r2, [r3, #4]
 8008c50:	e007      	b.n	8008c62 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d102      	bne.n	8008c5e <create_chain+0x122>
 8008c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c5c:	e000      	b.n	8008c60 <create_chain+0x124>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008c62:	69fb      	ldr	r3, [r7, #28]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3720      	adds	r7, #32
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	3304      	adds	r3, #4
 8008c82:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	899b      	ldrh	r3, [r3, #12]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	8952      	ldrh	r2, [r2, #10]
 8008c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1d1a      	adds	r2, r3, #4
 8008c9e:	613a      	str	r2, [r7, #16]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <clmt_clust+0x42>
 8008caa:	2300      	movs	r3, #0
 8008cac:	e010      	b.n	8008cd0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d307      	bcc.n	8008cc6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008cc4:	e7e9      	b.n	8008c9a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008cc6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	4413      	add	r3, r2
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	371c      	adds	r7, #28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cf2:	d204      	bcs.n	8008cfe <dir_sdi+0x22>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	f003 031f 	and.w	r3, r3, #31
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e071      	b.n	8008de6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d106      	bne.n	8008d22 <dir_sdi+0x46>
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d902      	bls.n	8008d22 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10c      	bne.n	8008d42 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	095b      	lsrs	r3, r3, #5
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	8912      	ldrh	r2, [r2, #8]
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d301      	bcc.n	8008d38 <dir_sdi+0x5c>
 8008d34:	2302      	movs	r3, #2
 8008d36:	e056      	b.n	8008de6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	61da      	str	r2, [r3, #28]
 8008d40:	e02d      	b.n	8008d9e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	895b      	ldrh	r3, [r3, #10]
 8008d46:	461a      	mov	r2, r3
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	899b      	ldrh	r3, [r3, #12]
 8008d4c:	fb03 f302 	mul.w	r3, r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d52:	e019      	b.n	8008d88 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6979      	ldr	r1, [r7, #20]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff fc9a 	bl	8008692 <get_fat>
 8008d5e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d66:	d101      	bne.n	8008d6c <dir_sdi+0x90>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e03c      	b.n	8008de6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d904      	bls.n	8008d7c <dir_sdi+0xa0>
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d301      	bcc.n	8008d80 <dir_sdi+0xa4>
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e032      	b.n	8008de6 <dir_sdi+0x10a>
			ofs -= csz;
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d2e1      	bcs.n	8008d54 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008d90:	6979      	ldr	r1, [r7, #20]
 8008d92:	6938      	ldr	r0, [r7, #16]
 8008d94:	f7ff fc5e 	bl	8008654 <clust2sect>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <dir_sdi+0xd4>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e01a      	b.n	8008de6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69da      	ldr	r2, [r3, #28]
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	899b      	ldrh	r3, [r3, #12]
 8008db8:	4619      	mov	r1, r3
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dc0:	441a      	add	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	899b      	ldrh	r3, [r3, #12]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dd8:	fb02 f200 	mul.w	r2, r2, r0
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	18ca      	adds	r2, r1, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	3320      	adds	r3, #32
 8008e04:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <dir_next+0x28>
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e14:	d301      	bcc.n	8008e1a <dir_next+0x2c>
 8008e16:	2304      	movs	r3, #4
 8008e18:	e0bb      	b.n	8008f92 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	899b      	ldrh	r3, [r3, #12]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e26:	fb02 f201 	mul.w	r2, r2, r1
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f040 809d 	bne.w	8008f6c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10b      	bne.n	8008e5c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	095b      	lsrs	r3, r3, #5
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	8912      	ldrh	r2, [r2, #8]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	f0c0 808d 	bcc.w	8008f6c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	61da      	str	r2, [r3, #28]
 8008e58:	2304      	movs	r3, #4
 8008e5a:	e09a      	b.n	8008f92 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	899b      	ldrh	r3, [r3, #12]
 8008e60:	461a      	mov	r2, r3
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	8952      	ldrh	r2, [r2, #10]
 8008e6c:	3a01      	subs	r2, #1
 8008e6e:	4013      	ands	r3, r2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d17b      	bne.n	8008f6c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f7ff fc08 	bl	8008692 <get_fat>
 8008e82:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d801      	bhi.n	8008e8e <dir_next+0xa0>
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	e081      	b.n	8008f92 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e94:	d101      	bne.n	8008e9a <dir_next+0xac>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e07b      	b.n	8008f92 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d359      	bcc.n	8008f58 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	61da      	str	r2, [r3, #28]
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	e06e      	b.n	8008f92 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	f7ff fe3d 	bl	8008b3c <create_chain>
 8008ec2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <dir_next+0xe0>
 8008eca:	2307      	movs	r3, #7
 8008ecc:	e061      	b.n	8008f92 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d101      	bne.n	8008ed8 <dir_next+0xea>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	e05c      	b.n	8008f92 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ede:	d101      	bne.n	8008ee4 <dir_next+0xf6>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e056      	b.n	8008f92 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff fad3 	bl	8008490 <sync_window>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <dir_next+0x106>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e04e      	b.n	8008f92 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	899b      	ldrh	r3, [r3, #12]
 8008efe:	461a      	mov	r2, r3
 8008f00:	2100      	movs	r1, #0
 8008f02:	f7ff f8fc 	bl	80080fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	6979      	ldr	r1, [r7, #20]
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7ff fba1 	bl	8008654 <clust2sect>
 8008f12:	4602      	mov	r2, r0
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30
 8008f18:	e012      	b.n	8008f40 <dir_next+0x152>
						fs->wflag = 1;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff fab5 	bl	8008490 <sync_window>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <dir_next+0x142>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e030      	b.n	8008f92 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	3301      	adds	r3, #1
 8008f34:	613b      	str	r3, [r7, #16]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	895b      	ldrh	r3, [r3, #10]
 8008f44:	461a      	mov	r2, r3
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d3e6      	bcc.n	8008f1a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	1ad2      	subs	r2, r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008f5e:	6979      	ldr	r1, [r7, #20]
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff fb77 	bl	8008654 <clust2sect>
 8008f66:	4602      	mov	r2, r0
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f84:	fb02 f200 	mul.w	r2, r2, r0
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	18ca      	adds	r2, r1, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b086      	sub	sp, #24
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008faa:	2100      	movs	r1, #0
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff fe95 	bl	8008cdc <dir_sdi>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d12b      	bne.n	8009014 <dir_alloc+0x7a>
		n = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff faa6 	bl	8008518 <move_window>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d11d      	bne.n	8009012 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2be5      	cmp	r3, #229	; 0xe5
 8008fde:	d004      	beq.n	8008fea <dir_alloc+0x50>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d107      	bne.n	8008ffa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	3301      	adds	r3, #1
 8008fee:	613b      	str	r3, [r7, #16]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d102      	bne.n	8008ffe <dir_alloc+0x64>
 8008ff8:	e00c      	b.n	8009014 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008ffe:	2101      	movs	r1, #1
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff fef4 	bl	8008dee <dir_next>
 8009006:	4603      	mov	r3, r0
 8009008:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0d7      	beq.n	8008fc0 <dir_alloc+0x26>
 8009010:	e000      	b.n	8009014 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009012:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	2b04      	cmp	r3, #4
 8009018:	d101      	bne.n	800901e <dir_alloc+0x84>
 800901a:	2307      	movs	r3, #7
 800901c:	75fb      	strb	r3, [r7, #23]
	return res;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	331a      	adds	r3, #26
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe ffbe 	bl	8007fb8 <ld_word>
 800903c:	4603      	mov	r3, r0
 800903e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b03      	cmp	r3, #3
 8009046:	d109      	bne.n	800905c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	3314      	adds	r3, #20
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe ffb3 	bl	8007fb8 <ld_word>
 8009052:	4603      	mov	r3, r0
 8009054:	041b      	lsls	r3, r3, #16
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4313      	orrs	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800905c:	68fb      	ldr	r3, [r7, #12]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	331a      	adds	r3, #26
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	b292      	uxth	r2, r2
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe ffd6 	bl	800802e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b03      	cmp	r3, #3
 8009088:	d109      	bne.n	800909e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f103 0214 	add.w	r2, r3, #20
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	0c1b      	lsrs	r3, r3, #16
 8009094:	b29b      	uxth	r3, r3
 8009096:	4619      	mov	r1, r3
 8009098:	4610      	mov	r0, r2
 800909a:	f7fe ffc8 	bl	800802e <st_word>
	}
}
 800909e:	bf00      	nop
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b086      	sub	sp, #24
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80090b4:	2100      	movs	r1, #0
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff fe10 	bl	8008cdc <dir_sdi>
 80090bc:	4603      	mov	r3, r0
 80090be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <dir_find+0x24>
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	e03e      	b.n	8009148 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	4619      	mov	r1, r3
 80090d0:	6938      	ldr	r0, [r7, #16]
 80090d2:	f7ff fa21 	bl	8008518 <move_window>
 80090d6:	4603      	mov	r3, r0
 80090d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d12f      	bne.n	8009140 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d102      	bne.n	80090f4 <dir_find+0x4e>
 80090ee:	2304      	movs	r3, #4
 80090f0:	75fb      	strb	r3, [r7, #23]
 80090f2:	e028      	b.n	8009146 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	330b      	adds	r3, #11
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009100:	b2da      	uxtb	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	330b      	adds	r3, #11
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10a      	bne.n	800912c <dir_find+0x86>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a18      	ldr	r0, [r3, #32]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3324      	adds	r3, #36	; 0x24
 800911e:	220b      	movs	r2, #11
 8009120:	4619      	mov	r1, r3
 8009122:	f7ff f807 	bl	8008134 <mem_cmp>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fe5d 	bl	8008dee <dir_next>
 8009134:	4603      	mov	r3, r0
 8009136:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0c5      	beq.n	80090ca <dir_find+0x24>
 800913e:	e002      	b.n	8009146 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009140:	bf00      	nop
 8009142:	e000      	b.n	8009146 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009144:	bf00      	nop

	return res;
 8009146:	7dfb      	ldrb	r3, [r7, #23]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800915e:	2101      	movs	r1, #1
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff ff1a 	bl	8008f9a <dir_alloc>
 8009166:	4603      	mov	r3, r0
 8009168:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d11c      	bne.n	80091aa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	4619      	mov	r1, r3
 8009176:	68b8      	ldr	r0, [r7, #8]
 8009178:	f7ff f9ce 	bl	8008518 <move_window>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d111      	bne.n	80091aa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	2220      	movs	r2, #32
 800918c:	2100      	movs	r1, #0
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe ffb5 	bl	80080fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a18      	ldr	r0, [r3, #32]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3324      	adds	r3, #36	; 0x24
 800919c:	220b      	movs	r2, #11
 800919e:	4619      	mov	r1, r3
 80091a0:	f7fe ff8c 	bl	80080bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2201      	movs	r2, #1
 80091a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3324      	adds	r3, #36	; 0x24
 80091c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80091ca:	220b      	movs	r2, #11
 80091cc:	2120      	movs	r1, #32
 80091ce:	68b8      	ldr	r0, [r7, #8]
 80091d0:	f7fe ff95 	bl	80080fe <mem_set>
	si = i = 0; ni = 8;
 80091d4:	2300      	movs	r3, #0
 80091d6:	613b      	str	r3, [r7, #16]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	61fb      	str	r3, [r7, #28]
 80091dc:	2308      	movs	r3, #8
 80091de:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	61fa      	str	r2, [r7, #28]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80091ee:	7efb      	ldrb	r3, [r7, #27]
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d94e      	bls.n	8009292 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80091f4:	7efb      	ldrb	r3, [r7, #27]
 80091f6:	2b2f      	cmp	r3, #47	; 0x2f
 80091f8:	d006      	beq.n	8009208 <create_name+0x54>
 80091fa:	7efb      	ldrb	r3, [r7, #27]
 80091fc:	2b5c      	cmp	r3, #92	; 0x5c
 80091fe:	d110      	bne.n	8009222 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009200:	e002      	b.n	8009208 <create_name+0x54>
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	3301      	adds	r3, #1
 8009206:	61fb      	str	r3, [r7, #28]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	4413      	add	r3, r2
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b2f      	cmp	r3, #47	; 0x2f
 8009212:	d0f6      	beq.n	8009202 <create_name+0x4e>
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4413      	add	r3, r2
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b5c      	cmp	r3, #92	; 0x5c
 800921e:	d0f0      	beq.n	8009202 <create_name+0x4e>
			break;
 8009220:	e038      	b.n	8009294 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009222:	7efb      	ldrb	r3, [r7, #27]
 8009224:	2b2e      	cmp	r3, #46	; 0x2e
 8009226:	d003      	beq.n	8009230 <create_name+0x7c>
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	429a      	cmp	r2, r3
 800922e:	d30c      	bcc.n	800924a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2b0b      	cmp	r3, #11
 8009234:	d002      	beq.n	800923c <create_name+0x88>
 8009236:	7efb      	ldrb	r3, [r7, #27]
 8009238:	2b2e      	cmp	r3, #46	; 0x2e
 800923a:	d001      	beq.n	8009240 <create_name+0x8c>
 800923c:	2306      	movs	r3, #6
 800923e:	e044      	b.n	80092ca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009240:	2308      	movs	r3, #8
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	230b      	movs	r3, #11
 8009246:	617b      	str	r3, [r7, #20]
			continue;
 8009248:	e022      	b.n	8009290 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800924a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800924e:	2b00      	cmp	r3, #0
 8009250:	da04      	bge.n	800925c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009252:	7efb      	ldrb	r3, [r7, #27]
 8009254:	3b80      	subs	r3, #128	; 0x80
 8009256:	4a1f      	ldr	r2, [pc, #124]	; (80092d4 <create_name+0x120>)
 8009258:	5cd3      	ldrb	r3, [r2, r3]
 800925a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800925c:	7efb      	ldrb	r3, [r7, #27]
 800925e:	4619      	mov	r1, r3
 8009260:	481d      	ldr	r0, [pc, #116]	; (80092d8 <create_name+0x124>)
 8009262:	f7fe ff8e 	bl	8008182 <chk_chr>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <create_name+0xbc>
 800926c:	2306      	movs	r3, #6
 800926e:	e02c      	b.n	80092ca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009270:	7efb      	ldrb	r3, [r7, #27]
 8009272:	2b60      	cmp	r3, #96	; 0x60
 8009274:	d905      	bls.n	8009282 <create_name+0xce>
 8009276:	7efb      	ldrb	r3, [r7, #27]
 8009278:	2b7a      	cmp	r3, #122	; 0x7a
 800927a:	d802      	bhi.n	8009282 <create_name+0xce>
 800927c:	7efb      	ldrb	r3, [r7, #27]
 800927e:	3b20      	subs	r3, #32
 8009280:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	1c5a      	adds	r2, r3, #1
 8009286:	613a      	str	r2, [r7, #16]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	4413      	add	r3, r2
 800928c:	7efa      	ldrb	r2, [r7, #27]
 800928e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009290:	e7a6      	b.n	80091e0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009292:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	441a      	add	r2, r3
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <create_name+0xf4>
 80092a4:	2306      	movs	r3, #6
 80092a6:	e010      	b.n	80092ca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	2be5      	cmp	r3, #229	; 0xe5
 80092ae:	d102      	bne.n	80092b6 <create_name+0x102>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2205      	movs	r2, #5
 80092b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80092b6:	7efb      	ldrb	r3, [r7, #27]
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d801      	bhi.n	80092c0 <create_name+0x10c>
 80092bc:	2204      	movs	r2, #4
 80092be:	e000      	b.n	80092c2 <create_name+0x10e>
 80092c0:	2200      	movs	r2, #0
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	330b      	adds	r3, #11
 80092c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80092c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	0801c1e8 	.word	0x0801c1e8
 80092d8:	0801903c 	.word	0x0801903c

080092dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80092f0:	e002      	b.n	80092f8 <follow_path+0x1c>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b2f      	cmp	r3, #47	; 0x2f
 80092fe:	d0f8      	beq.n	80092f2 <follow_path+0x16>
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b5c      	cmp	r3, #92	; 0x5c
 8009306:	d0f4      	beq.n	80092f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2200      	movs	r2, #0
 800930c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b1f      	cmp	r3, #31
 8009314:	d80a      	bhi.n	800932c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2280      	movs	r2, #128	; 0x80
 800931a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800931e:	2100      	movs	r1, #0
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff fcdb 	bl	8008cdc <dir_sdi>
 8009326:	4603      	mov	r3, r0
 8009328:	75fb      	strb	r3, [r7, #23]
 800932a:	e048      	b.n	80093be <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800932c:	463b      	mov	r3, r7
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7ff ff3f 	bl	80091b4 <create_name>
 8009336:	4603      	mov	r3, r0
 8009338:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d139      	bne.n	80093b4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff feb0 	bl	80090a6 <dir_find>
 8009346:	4603      	mov	r3, r0
 8009348:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009350:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00a      	beq.n	800936e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	2b04      	cmp	r3, #4
 800935c:	d12c      	bne.n	80093b8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	d127      	bne.n	80093b8 <follow_path+0xdc>
 8009368:	2305      	movs	r3, #5
 800936a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800936c:	e024      	b.n	80093b8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800936e:	7afb      	ldrb	r3, [r7, #11]
 8009370:	f003 0304 	and.w	r3, r3, #4
 8009374:	2b00      	cmp	r3, #0
 8009376:	d121      	bne.n	80093bc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	799b      	ldrb	r3, [r3, #6]
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b00      	cmp	r3, #0
 8009382:	d102      	bne.n	800938a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009384:	2305      	movs	r3, #5
 8009386:	75fb      	strb	r3, [r7, #23]
 8009388:	e019      	b.n	80093be <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	8992      	ldrh	r2, [r2, #12]
 8009398:	fbb3 f0f2 	udiv	r0, r3, r2
 800939c:	fb02 f200 	mul.w	r2, r2, r0
 80093a0:	1a9b      	subs	r3, r3, r2
 80093a2:	440b      	add	r3, r1
 80093a4:	4619      	mov	r1, r3
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f7ff fe3e 	bl	8009028 <ld_clust>
 80093ac:	4602      	mov	r2, r0
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80093b2:	e7bb      	b.n	800932c <follow_path+0x50>
			if (res != FR_OK) break;
 80093b4:	bf00      	nop
 80093b6:	e002      	b.n	80093be <follow_path+0xe2>
				break;
 80093b8:	bf00      	nop
 80093ba:	e000      	b.n	80093be <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093bc:	bf00      	nop
			}
		}
	}

	return res;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80093d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d031      	beq.n	8009442 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	e002      	b.n	80093ec <get_ldnumber+0x24>
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	3301      	adds	r3, #1
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b20      	cmp	r3, #32
 80093f2:	d903      	bls.n	80093fc <get_ldnumber+0x34>
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b3a      	cmp	r3, #58	; 0x3a
 80093fa:	d1f4      	bne.n	80093e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2b3a      	cmp	r3, #58	; 0x3a
 8009402:	d11c      	bne.n	800943e <get_ldnumber+0x76>
			tp = *path;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	60fa      	str	r2, [r7, #12]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	3b30      	subs	r3, #48	; 0x30
 8009414:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b09      	cmp	r3, #9
 800941a:	d80e      	bhi.n	800943a <get_ldnumber+0x72>
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	429a      	cmp	r2, r3
 8009422:	d10a      	bne.n	800943a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d107      	bne.n	800943a <get_ldnumber+0x72>
					vol = (int)i;
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	3301      	adds	r3, #1
 8009432:	617b      	str	r3, [r7, #20]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	e002      	b.n	8009444 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800943e:	2300      	movs	r3, #0
 8009440:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009442:	693b      	ldr	r3, [r7, #16]
}
 8009444:	4618      	mov	r0, r3
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	70da      	strb	r2, [r3, #3]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009466:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff f854 	bl	8008518 <move_window>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <check_fs+0x2a>
 8009476:	2304      	movs	r3, #4
 8009478:	e038      	b.n	80094ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	3334      	adds	r3, #52	; 0x34
 800947e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fd98 	bl	8007fb8 <ld_word>
 8009488:	4603      	mov	r3, r0
 800948a:	461a      	mov	r2, r3
 800948c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009490:	429a      	cmp	r2, r3
 8009492:	d001      	beq.n	8009498 <check_fs+0x48>
 8009494:	2303      	movs	r3, #3
 8009496:	e029      	b.n	80094ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800949e:	2be9      	cmp	r3, #233	; 0xe9
 80094a0:	d009      	beq.n	80094b6 <check_fs+0x66>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094a8:	2beb      	cmp	r3, #235	; 0xeb
 80094aa:	d11e      	bne.n	80094ea <check_fs+0x9a>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80094b2:	2b90      	cmp	r3, #144	; 0x90
 80094b4:	d119      	bne.n	80094ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	3334      	adds	r3, #52	; 0x34
 80094ba:	3336      	adds	r3, #54	; 0x36
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fd93 	bl	8007fe8 <ld_dword>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80094c8:	4a0a      	ldr	r2, [pc, #40]	; (80094f4 <check_fs+0xa4>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d101      	bne.n	80094d2 <check_fs+0x82>
 80094ce:	2300      	movs	r3, #0
 80094d0:	e00c      	b.n	80094ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	3334      	adds	r3, #52	; 0x34
 80094d6:	3352      	adds	r3, #82	; 0x52
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fd85 	bl	8007fe8 <ld_dword>
 80094de:	4603      	mov	r3, r0
 80094e0:	4a05      	ldr	r2, [pc, #20]	; (80094f8 <check_fs+0xa8>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d101      	bne.n	80094ea <check_fs+0x9a>
 80094e6:	2300      	movs	r3, #0
 80094e8:	e000      	b.n	80094ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80094ea:	2302      	movs	r3, #2
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	00544146 	.word	0x00544146
 80094f8:	33544146 	.word	0x33544146

080094fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b096      	sub	sp, #88	; 0x58
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2200      	movs	r2, #0
 800950e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7ff ff59 	bl	80093c8 <get_ldnumber>
 8009516:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951a:	2b00      	cmp	r3, #0
 800951c:	da01      	bge.n	8009522 <find_volume+0x26>
 800951e:	230b      	movs	r3, #11
 8009520:	e265      	b.n	80099ee <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009522:	4ab0      	ldr	r2, [pc, #704]	; (80097e4 <find_volume+0x2e8>)
 8009524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800952a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <find_volume+0x3a>
 8009532:	230c      	movs	r3, #12
 8009534:	e25b      	b.n	80099ee <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800953a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	f023 0301 	bic.w	r3, r3, #1
 8009542:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d01a      	beq.n	8009582 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	785b      	ldrb	r3, [r3, #1]
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe fc93 	bl	8007e7c <disk_status>
 8009556:	4603      	mov	r3, r0
 8009558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800955c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10c      	bne.n	8009582 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d007      	beq.n	800957e <find_volume+0x82>
 800956e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800957a:	230a      	movs	r3, #10
 800957c:	e237      	b.n	80099ee <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800957e:	2300      	movs	r3, #0
 8009580:	e235      	b.n	80099ee <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	2200      	movs	r2, #0
 8009586:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800958a:	b2da      	uxtb	r2, r3
 800958c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	785b      	ldrb	r3, [r3, #1]
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe fc8b 	bl	8007eb0 <disk_initialize>
 800959a:	4603      	mov	r3, r0
 800959c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80095a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80095ac:	2303      	movs	r3, #3
 80095ae:	e21e      	b.n	80099ee <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d007      	beq.n	80095c6 <find_volume+0xca>
 80095b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095ba:	f003 0304 	and.w	r3, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80095c2:	230a      	movs	r3, #10
 80095c4:	e213      	b.n	80099ee <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80095c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c8:	7858      	ldrb	r0, [r3, #1]
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	330c      	adds	r3, #12
 80095ce:	461a      	mov	r2, r3
 80095d0:	2102      	movs	r1, #2
 80095d2:	f7fe fcd3 	bl	8007f7c <disk_ioctl>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <find_volume+0xe4>
 80095dc:	2301      	movs	r3, #1
 80095de:	e206      	b.n	80099ee <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	899b      	ldrh	r3, [r3, #12]
 80095e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e8:	d80d      	bhi.n	8009606 <find_volume+0x10a>
 80095ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ec:	899b      	ldrh	r3, [r3, #12]
 80095ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095f2:	d308      	bcc.n	8009606 <find_volume+0x10a>
 80095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f6:	899b      	ldrh	r3, [r3, #12]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	899b      	ldrh	r3, [r3, #12]
 80095fe:	3b01      	subs	r3, #1
 8009600:	4013      	ands	r3, r2
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <find_volume+0x10e>
 8009606:	2301      	movs	r3, #1
 8009608:	e1f1      	b.n	80099ee <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800960e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009612:	f7ff ff1d 	bl	8009450 <check_fs>
 8009616:	4603      	mov	r3, r0
 8009618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800961c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009620:	2b02      	cmp	r3, #2
 8009622:	d14b      	bne.n	80096bc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009624:	2300      	movs	r3, #0
 8009626:	643b      	str	r3, [r7, #64]	; 0x40
 8009628:	e01f      	b.n	800966a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009632:	011b      	lsls	r3, r3, #4
 8009634:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009638:	4413      	add	r3, r2
 800963a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	3304      	adds	r3, #4
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d006      	beq.n	8009654 <find_volume+0x158>
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	3308      	adds	r3, #8
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe fccc 	bl	8007fe8 <ld_dword>
 8009650:	4602      	mov	r2, r0
 8009652:	e000      	b.n	8009656 <find_volume+0x15a>
 8009654:	2200      	movs	r2, #0
 8009656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800965e:	440b      	add	r3, r1
 8009660:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009666:	3301      	adds	r3, #1
 8009668:	643b      	str	r3, [r7, #64]	; 0x40
 800966a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800966c:	2b03      	cmp	r3, #3
 800966e:	d9dc      	bls.n	800962a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009670:	2300      	movs	r3, #0
 8009672:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <find_volume+0x184>
 800967a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800967c:	3b01      	subs	r3, #1
 800967e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009688:	4413      	add	r3, r2
 800968a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800968e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009692:	2b00      	cmp	r3, #0
 8009694:	d005      	beq.n	80096a2 <find_volume+0x1a6>
 8009696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800969a:	f7ff fed9 	bl	8009450 <check_fs>
 800969e:	4603      	mov	r3, r0
 80096a0:	e000      	b.n	80096a4 <find_volume+0x1a8>
 80096a2:	2303      	movs	r3, #3
 80096a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80096a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d905      	bls.n	80096bc <find_volume+0x1c0>
 80096b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096b2:	3301      	adds	r3, #1
 80096b4:	643b      	str	r3, [r7, #64]	; 0x40
 80096b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d9e1      	bls.n	8009680 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80096bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d101      	bne.n	80096c8 <find_volume+0x1cc>
 80096c4:	2301      	movs	r3, #1
 80096c6:	e192      	b.n	80099ee <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80096c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d901      	bls.n	80096d4 <find_volume+0x1d8>
 80096d0:	230d      	movs	r3, #13
 80096d2:	e18c      	b.n	80099ee <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	3334      	adds	r3, #52	; 0x34
 80096d8:	330b      	adds	r3, #11
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fc6c 	bl	8007fb8 <ld_word>
 80096e0:	4603      	mov	r3, r0
 80096e2:	461a      	mov	r2, r3
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	899b      	ldrh	r3, [r3, #12]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d001      	beq.n	80096f0 <find_volume+0x1f4>
 80096ec:	230d      	movs	r3, #13
 80096ee:	e17e      	b.n	80099ee <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	3334      	adds	r3, #52	; 0x34
 80096f4:	3316      	adds	r3, #22
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fc5e 	bl	8007fb8 <ld_word>
 80096fc:	4603      	mov	r3, r0
 80096fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <find_volume+0x218>
 8009706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009708:	3334      	adds	r3, #52	; 0x34
 800970a:	3324      	adds	r3, #36	; 0x24
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe fc6b 	bl	8007fe8 <ld_dword>
 8009712:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009718:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	789b      	ldrb	r3, [r3, #2]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d005      	beq.n	8009738 <find_volume+0x23c>
 800972c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972e:	789b      	ldrb	r3, [r3, #2]
 8009730:	2b02      	cmp	r3, #2
 8009732:	d001      	beq.n	8009738 <find_volume+0x23c>
 8009734:	230d      	movs	r3, #13
 8009736:	e15a      	b.n	80099ee <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973a:	789b      	ldrb	r3, [r3, #2]
 800973c:	461a      	mov	r2, r3
 800973e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009740:	fb02 f303 	mul.w	r3, r2, r3
 8009744:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800974c:	b29a      	uxth	r2, r3
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	895b      	ldrh	r3, [r3, #10]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d008      	beq.n	800976c <find_volume+0x270>
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	895b      	ldrh	r3, [r3, #10]
 800975e:	461a      	mov	r2, r3
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	895b      	ldrh	r3, [r3, #10]
 8009764:	3b01      	subs	r3, #1
 8009766:	4013      	ands	r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <find_volume+0x274>
 800976c:	230d      	movs	r3, #13
 800976e:	e13e      	b.n	80099ee <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	3334      	adds	r3, #52	; 0x34
 8009774:	3311      	adds	r3, #17
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fc1e 	bl	8007fb8 <ld_word>
 800977c:	4603      	mov	r3, r0
 800977e:	461a      	mov	r2, r3
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	891b      	ldrh	r3, [r3, #8]
 8009788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800978a:	8992      	ldrh	r2, [r2, #12]
 800978c:	0952      	lsrs	r2, r2, #5
 800978e:	b292      	uxth	r2, r2
 8009790:	fbb3 f1f2 	udiv	r1, r3, r2
 8009794:	fb02 f201 	mul.w	r2, r2, r1
 8009798:	1a9b      	subs	r3, r3, r2
 800979a:	b29b      	uxth	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <find_volume+0x2a8>
 80097a0:	230d      	movs	r3, #13
 80097a2:	e124      	b.n	80099ee <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	3334      	adds	r3, #52	; 0x34
 80097a8:	3313      	adds	r3, #19
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe fc04 	bl	8007fb8 <ld_word>
 80097b0:	4603      	mov	r3, r0
 80097b2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80097b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d106      	bne.n	80097c8 <find_volume+0x2cc>
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	3334      	adds	r3, #52	; 0x34
 80097be:	3320      	adds	r3, #32
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fc11 	bl	8007fe8 <ld_dword>
 80097c6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	3334      	adds	r3, #52	; 0x34
 80097cc:	330e      	adds	r3, #14
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fbf2 	bl	8007fb8 <ld_word>
 80097d4:	4603      	mov	r3, r0
 80097d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80097d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d104      	bne.n	80097e8 <find_volume+0x2ec>
 80097de:	230d      	movs	r3, #13
 80097e0:	e105      	b.n	80099ee <find_volume+0x4f2>
 80097e2:	bf00      	nop
 80097e4:	200011e8 	.word	0x200011e8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80097e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80097ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ec:	4413      	add	r3, r2
 80097ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097f0:	8911      	ldrh	r1, [r2, #8]
 80097f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097f4:	8992      	ldrh	r2, [r2, #12]
 80097f6:	0952      	lsrs	r2, r2, #5
 80097f8:	b292      	uxth	r2, r2
 80097fa:	fbb1 f2f2 	udiv	r2, r1, r2
 80097fe:	b292      	uxth	r2, r2
 8009800:	4413      	add	r3, r2
 8009802:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	429a      	cmp	r2, r3
 800980a:	d201      	bcs.n	8009810 <find_volume+0x314>
 800980c:	230d      	movs	r3, #13
 800980e:	e0ee      	b.n	80099ee <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009818:	8952      	ldrh	r2, [r2, #10]
 800981a:	fbb3 f3f2 	udiv	r3, r3, r2
 800981e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <find_volume+0x32e>
 8009826:	230d      	movs	r3, #13
 8009828:	e0e1      	b.n	80099ee <find_volume+0x4f2>
		fmt = FS_FAT32;
 800982a:	2303      	movs	r3, #3
 800982c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009836:	4293      	cmp	r3, r2
 8009838:	d802      	bhi.n	8009840 <find_volume+0x344>
 800983a:	2302      	movs	r3, #2
 800983c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009846:	4293      	cmp	r3, r2
 8009848:	d802      	bhi.n	8009850 <find_volume+0x354>
 800984a:	2301      	movs	r3, #1
 800984c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	1c9a      	adds	r2, r3, #2
 8009854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009856:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800985c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800985e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009862:	441a      	add	r2, r3
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009868:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986c:	441a      	add	r2, r3
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009872:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009876:	2b03      	cmp	r3, #3
 8009878:	d11e      	bne.n	80098b8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	3334      	adds	r3, #52	; 0x34
 800987e:	332a      	adds	r3, #42	; 0x2a
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe fb99 	bl	8007fb8 <ld_word>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <find_volume+0x394>
 800988c:	230d      	movs	r3, #13
 800988e:	e0ae      	b.n	80099ee <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009892:	891b      	ldrh	r3, [r3, #8]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <find_volume+0x3a0>
 8009898:	230d      	movs	r3, #13
 800989a:	e0a8      	b.n	80099ee <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	3334      	adds	r3, #52	; 0x34
 80098a0:	332c      	adds	r3, #44	; 0x2c
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fba0 	bl	8007fe8 <ld_dword>
 80098a8:	4602      	mov	r2, r0
 80098aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	647b      	str	r3, [r7, #68]	; 0x44
 80098b6:	e01f      	b.n	80098f8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	891b      	ldrh	r3, [r3, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <find_volume+0x3c8>
 80098c0:	230d      	movs	r3, #13
 80098c2:	e094      	b.n	80099ee <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ca:	441a      	add	r2, r3
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80098d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d103      	bne.n	80098e0 <find_volume+0x3e4>
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	e00a      	b.n	80098f6 <find_volume+0x3fa>
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	699a      	ldr	r2, [r3, #24]
 80098e4:	4613      	mov	r3, r2
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	4413      	add	r3, r2
 80098ea:	085a      	lsrs	r2, r3, #1
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80098f6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80098f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fa:	69da      	ldr	r2, [r3, #28]
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	899b      	ldrh	r3, [r3, #12]
 8009900:	4619      	mov	r1, r3
 8009902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009904:	440b      	add	r3, r1
 8009906:	3b01      	subs	r3, #1
 8009908:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800990a:	8989      	ldrh	r1, [r1, #12]
 800990c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009910:	429a      	cmp	r2, r3
 8009912:	d201      	bcs.n	8009918 <find_volume+0x41c>
 8009914:	230d      	movs	r3, #13
 8009916:	e06a      	b.n	80099ee <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800991e:	615a      	str	r2, [r3, #20]
 8009920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009922:	695a      	ldr	r2, [r3, #20]
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	2280      	movs	r2, #128	; 0x80
 800992c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800992e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009932:	2b03      	cmp	r3, #3
 8009934:	d149      	bne.n	80099ca <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	3334      	adds	r3, #52	; 0x34
 800993a:	3330      	adds	r3, #48	; 0x30
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe fb3b 	bl	8007fb8 <ld_word>
 8009942:	4603      	mov	r3, r0
 8009944:	2b01      	cmp	r3, #1
 8009946:	d140      	bne.n	80099ca <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800994a:	3301      	adds	r3, #1
 800994c:	4619      	mov	r1, r3
 800994e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009950:	f7fe fde2 	bl	8008518 <move_window>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d137      	bne.n	80099ca <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	2200      	movs	r2, #0
 800995e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	3334      	adds	r3, #52	; 0x34
 8009964:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe fb25 	bl	8007fb8 <ld_word>
 800996e:	4603      	mov	r3, r0
 8009970:	461a      	mov	r2, r3
 8009972:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009976:	429a      	cmp	r2, r3
 8009978:	d127      	bne.n	80099ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	3334      	adds	r3, #52	; 0x34
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fb32 	bl	8007fe8 <ld_dword>
 8009984:	4603      	mov	r3, r0
 8009986:	4a1c      	ldr	r2, [pc, #112]	; (80099f8 <find_volume+0x4fc>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d11e      	bne.n	80099ca <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800998c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998e:	3334      	adds	r3, #52	; 0x34
 8009990:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe fb27 	bl	8007fe8 <ld_dword>
 800999a:	4603      	mov	r3, r0
 800999c:	4a17      	ldr	r2, [pc, #92]	; (80099fc <find_volume+0x500>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d113      	bne.n	80099ca <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80099a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a4:	3334      	adds	r3, #52	; 0x34
 80099a6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fb1c 	bl	8007fe8 <ld_dword>
 80099b0:	4602      	mov	r2, r0
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	3334      	adds	r3, #52	; 0x34
 80099ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fb12 	bl	8007fe8 <ld_dword>
 80099c4:	4602      	mov	r2, r0
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80099ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099cc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80099d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80099d2:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <find_volume+0x504>)
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	3301      	adds	r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <find_volume+0x504>)
 80099dc:	801a      	strh	r2, [r3, #0]
 80099de:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <find_volume+0x504>)
 80099e0:	881a      	ldrh	r2, [r3, #0]
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80099e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099e8:	f7fe fd2e 	bl	8008448 <clear_lock>
#endif
	return FR_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3758      	adds	r7, #88	; 0x58
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	41615252 	.word	0x41615252
 80099fc:	61417272 	.word	0x61417272
 8009a00:	200011ec 	.word	0x200011ec

08009a04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009a0e:	2309      	movs	r3, #9
 8009a10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d01c      	beq.n	8009a52 <validate+0x4e>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d018      	beq.n	8009a52 <validate+0x4e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d013      	beq.n	8009a52 <validate+0x4e>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	889a      	ldrh	r2, [r3, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	88db      	ldrh	r3, [r3, #6]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d10c      	bne.n	8009a52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	785b      	ldrb	r3, [r3, #1]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fa1c 	bl	8007e7c <disk_status>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <validate+0x4e>
			res = FR_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <validate+0x5a>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	e000      	b.n	8009a60 <validate+0x5c>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	6013      	str	r3, [r2, #0]
	return res;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a82:	f107 0310 	add.w	r3, r7, #16
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff fc9e 	bl	80093c8 <get_ldnumber>
 8009a8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da01      	bge.n	8009a98 <f_mount+0x28>
 8009a94:	230b      	movs	r3, #11
 8009a96:	e02b      	b.n	8009af0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a98:	4a17      	ldr	r2, [pc, #92]	; (8009af8 <f_mount+0x88>)
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d005      	beq.n	8009ab4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009aa8:	69b8      	ldr	r0, [r7, #24]
 8009aaa:	f7fe fccd 	bl	8008448 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	490d      	ldr	r1, [pc, #52]	; (8009af8 <f_mount+0x88>)
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <f_mount+0x66>
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d001      	beq.n	8009ada <f_mount+0x6a>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	e00a      	b.n	8009af0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ada:	f107 010c 	add.w	r1, r7, #12
 8009ade:	f107 0308 	add.w	r3, r7, #8
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff fd09 	bl	80094fc <find_volume>
 8009aea:	4603      	mov	r3, r0
 8009aec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3720      	adds	r7, #32
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	200011e8 	.word	0x200011e8

08009afc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b098      	sub	sp, #96	; 0x60
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	4613      	mov	r3, r2
 8009b08:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <f_open+0x18>
 8009b10:	2309      	movs	r3, #9
 8009b12:	e1bb      	b.n	8009e8c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b1a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009b1c:	79fa      	ldrb	r2, [r7, #7]
 8009b1e:	f107 0110 	add.w	r1, r7, #16
 8009b22:	f107 0308 	add.w	r3, r7, #8
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fce8 	bl	80094fc <find_volume>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f040 819f 	bne.w	8009e7a <f_open+0x37e>
		dj.obj.fs = fs;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	f107 0314 	add.w	r3, r7, #20
 8009b46:	4611      	mov	r1, r2
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff fbc7 	bl	80092dc <follow_path>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009b54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d11a      	bne.n	8009b92 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b60:	b25b      	sxtb	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da03      	bge.n	8009b6e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009b66:	2306      	movs	r3, #6
 8009b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b6c:	e011      	b.n	8009b92 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b6e:	79fb      	ldrb	r3, [r7, #7]
 8009b70:	f023 0301 	bic.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bf14      	ite	ne
 8009b78:	2301      	movne	r3, #1
 8009b7a:	2300      	moveq	r3, #0
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f107 0314 	add.w	r3, r7, #20
 8009b84:	4611      	mov	r1, r2
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fb16 	bl	80081b8 <chk_lock>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	f003 031c 	and.w	r3, r3, #28
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d07f      	beq.n	8009c9c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009b9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d017      	beq.n	8009bd4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009ba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ba8:	2b04      	cmp	r3, #4
 8009baa:	d10e      	bne.n	8009bca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009bac:	f7fe fb60 	bl	8008270 <enq_lock>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d006      	beq.n	8009bc4 <f_open+0xc8>
 8009bb6:	f107 0314 	add.w	r3, r7, #20
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff fac8 	bl	8009150 <dir_register>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	e000      	b.n	8009bc6 <f_open+0xca>
 8009bc4:	2312      	movs	r3, #18
 8009bc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009bca:	79fb      	ldrb	r3, [r7, #7]
 8009bcc:	f043 0308 	orr.w	r3, r3, #8
 8009bd0:	71fb      	strb	r3, [r7, #7]
 8009bd2:	e010      	b.n	8009bf6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009bd4:	7ebb      	ldrb	r3, [r7, #26]
 8009bd6:	f003 0311 	and.w	r3, r3, #17
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <f_open+0xea>
					res = FR_DENIED;
 8009bde:	2307      	movs	r3, #7
 8009be0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009be4:	e007      	b.n	8009bf6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009be6:	79fb      	ldrb	r3, [r7, #7]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <f_open+0xfa>
 8009bf0:	2308      	movs	r3, #8
 8009bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d168      	bne.n	8009cd0 <f_open+0x1d4>
 8009bfe:	79fb      	ldrb	r3, [r7, #7]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d063      	beq.n	8009cd0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009c08:	f7fd fa50 	bl	80070ac <get_fattime>
 8009c0c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c10:	330e      	adds	r3, #14
 8009c12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fa25 	bl	8008064 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1c:	3316      	adds	r3, #22
 8009c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe fa1f 	bl	8008064 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c28:	330b      	adds	r3, #11
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c32:	4611      	mov	r1, r2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff f9f7 	bl	8009028 <ld_clust>
 8009c3a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c40:	2200      	movs	r2, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff fa0f 	bl	8009066 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4a:	331c      	adds	r3, #28
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fa08 	bl	8008064 <st_dword>
					fs->wflag = 1;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2201      	movs	r2, #1
 8009c58:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d037      	beq.n	8009cd0 <f_open+0x1d4>
						dw = fs->winsect;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c64:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009c66:	f107 0314 	add.w	r3, r7, #20
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe feff 	bl	8008a72 <remove_chain>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d126      	bne.n	8009cd0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fc46 	bl	8008518 <move_window>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c96:	3a01      	subs	r2, #1
 8009c98:	611a      	str	r2, [r3, #16]
 8009c9a:	e019      	b.n	8009cd0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009c9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d115      	bne.n	8009cd0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009ca4:	7ebb      	ldrb	r3, [r7, #26]
 8009ca6:	f003 0310 	and.w	r3, r3, #16
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009cae:	2304      	movs	r3, #4
 8009cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009cb4:	e00c      	b.n	8009cd0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	f003 0302 	and.w	r3, r3, #2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d007      	beq.n	8009cd0 <f_open+0x1d4>
 8009cc0:	7ebb      	ldrb	r3, [r7, #26]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <f_open+0x1d4>
						res = FR_DENIED;
 8009cca:	2307      	movs	r3, #7
 8009ccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009cd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d128      	bne.n	8009d2a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	f003 0308 	and.w	r3, r3, #8
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	f023 0301 	bic.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bf14      	ite	ne
 8009d02:	2301      	movne	r3, #1
 8009d04:	2300      	moveq	r3, #0
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	461a      	mov	r2, r3
 8009d0a:	f107 0314 	add.w	r3, r7, #20
 8009d0e:	4611      	mov	r1, r2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe facf 	bl	80082b4 <inc_lock>
 8009d16:	4602      	mov	r2, r0
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d102      	bne.n	8009d2a <f_open+0x22e>
 8009d24:	2302      	movs	r3, #2
 8009d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f040 80a3 	bne.w	8009e7a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7ff f974 	bl	8009028 <ld_clust>
 8009d40:	4602      	mov	r2, r0
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d48:	331c      	adds	r3, #28
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe f94c 	bl	8007fe8 <ld_dword>
 8009d50:	4602      	mov	r2, r0
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	88da      	ldrh	r2, [r3, #6]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	79fa      	ldrb	r2, [r7, #7]
 8009d6e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3330      	adds	r3, #48	; 0x30
 8009d86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fe f9b6 	bl	80080fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	f003 0320 	and.w	r3, r3, #32
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d06e      	beq.n	8009e7a <f_open+0x37e>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d06a      	beq.n	8009e7a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68da      	ldr	r2, [r3, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	895b      	ldrh	r3, [r3, #10]
 8009db0:	461a      	mov	r2, r3
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	899b      	ldrh	r3, [r3, #12]
 8009db6:	fb03 f302 	mul.w	r3, r3, r2
 8009dba:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8009dc8:	e016      	b.n	8009df8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe fc5f 	bl	8008692 <get_fat>
 8009dd4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d802      	bhi.n	8009de2 <f_open+0x2e6>
 8009ddc:	2302      	movs	r3, #2
 8009dde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009de8:	d102      	bne.n	8009df0 <f_open+0x2f4>
 8009dea:	2301      	movs	r3, #1
 8009dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009df0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	657b      	str	r3, [r7, #84]	; 0x54
 8009df8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d103      	bne.n	8009e08 <f_open+0x30c>
 8009e00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d8e0      	bhi.n	8009dca <f_open+0x2ce>
				}
				fp->clust = clst;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e0c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d131      	bne.n	8009e7a <f_open+0x37e>
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	899b      	ldrh	r3, [r3, #12]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e22:	fb02 f201 	mul.w	r2, r2, r1
 8009e26:	1a9b      	subs	r3, r3, r2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d026      	beq.n	8009e7a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fe fc0f 	bl	8008654 <clust2sect>
 8009e36:	6478      	str	r0, [r7, #68]	; 0x44
 8009e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d103      	bne.n	8009e46 <f_open+0x34a>
						res = FR_INT_ERR;
 8009e3e:	2302      	movs	r3, #2
 8009e40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009e44:	e019      	b.n	8009e7a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	899b      	ldrh	r3, [r3, #12]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e54:	441a      	add	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	7858      	ldrb	r0, [r3, #1]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6a1a      	ldr	r2, [r3, #32]
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f7fe f847 	bl	8007efc <disk_read>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <f_open+0x37e>
 8009e74:	2301      	movs	r3, #1
 8009e76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <f_open+0x38c>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3760      	adds	r7, #96	; 0x60
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08e      	sub	sp, #56	; 0x38
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f107 0214 	add.w	r2, r7, #20
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7ff fda5 	bl	8009a04 <validate>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d107      	bne.n	8009ed8 <f_read+0x44>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	7d5b      	ldrb	r3, [r3, #21]
 8009ecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <f_read+0x4a>
 8009ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009edc:	e135      	b.n	800a14a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	7d1b      	ldrb	r3, [r3, #20]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <f_read+0x5a>
 8009eea:	2307      	movs	r3, #7
 8009eec:	e12d      	b.n	800a14a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	f240 811e 	bls.w	800a140 <f_read+0x2ac>
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009f08:	e11a      	b.n	800a140 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	8992      	ldrh	r2, [r2, #12]
 8009f12:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f16:	fb02 f201 	mul.w	r2, r2, r1
 8009f1a:	1a9b      	subs	r3, r3, r2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f040 80d5 	bne.w	800a0cc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	8992      	ldrh	r2, [r2, #12]
 8009f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	8952      	ldrh	r2, [r2, #10]
 8009f32:	3a01      	subs	r2, #1
 8009f34:	4013      	ands	r3, r2
 8009f36:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d12f      	bne.n	8009f9e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d103      	bne.n	8009f4e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f4c:	e013      	b.n	8009f76 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d007      	beq.n	8009f66 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7fe fe85 	bl	8008c6c <clmt_clust>
 8009f62:	6338      	str	r0, [r7, #48]	; 0x30
 8009f64:	e007      	b.n	8009f76 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	69db      	ldr	r3, [r3, #28]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7fe fb8f 	bl	8008692 <get_fat>
 8009f74:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d804      	bhi.n	8009f86 <f_read+0xf2>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	755a      	strb	r2, [r3, #21]
 8009f82:	2302      	movs	r3, #2
 8009f84:	e0e1      	b.n	800a14a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f8c:	d104      	bne.n	8009f98 <f_read+0x104>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2201      	movs	r2, #1
 8009f92:	755a      	strb	r2, [r3, #21]
 8009f94:	2301      	movs	r3, #1
 8009f96:	e0d8      	b.n	800a14a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f9c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7fe fb54 	bl	8008654 <clust2sect>
 8009fac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d104      	bne.n	8009fbe <f_read+0x12a>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	755a      	strb	r2, [r3, #21]
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e0c5      	b.n	800a14a <f_read+0x2b6>
			sect += csect;
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	899b      	ldrh	r3, [r3, #12]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fd2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d041      	beq.n	800a05e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	4413      	add	r3, r2
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	8952      	ldrh	r2, [r2, #10]
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d905      	bls.n	8009ff4 <f_read+0x160>
					cc = fs->csize - csect;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	895b      	ldrh	r3, [r3, #10]
 8009fec:	461a      	mov	r2, r3
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	7858      	ldrb	r0, [r3, #1]
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	69ba      	ldr	r2, [r7, #24]
 8009ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ffe:	f7fd ff7d 	bl	8007efc <disk_read>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d004      	beq.n	800a012 <f_read+0x17e>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2201      	movs	r2, #1
 800a00c:	755a      	strb	r2, [r3, #21]
 800a00e:	2301      	movs	r3, #1
 800a010:	e09b      	b.n	800a14a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	7d1b      	ldrb	r3, [r3, #20]
 800a016:	b25b      	sxtb	r3, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	da18      	bge.n	800a04e <f_read+0x1ba>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a1a      	ldr	r2, [r3, #32]
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a026:	429a      	cmp	r2, r3
 800a028:	d911      	bls.n	800a04e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6a1a      	ldr	r2, [r3, #32]
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	8992      	ldrh	r2, [r2, #12]
 800a036:	fb02 f303 	mul.w	r3, r2, r3
 800a03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03c:	18d0      	adds	r0, r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	899b      	ldrh	r3, [r3, #12]
 800a048:	461a      	mov	r2, r3
 800a04a:	f7fe f837 	bl	80080bc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	899b      	ldrh	r3, [r3, #12]
 800a052:	461a      	mov	r2, r3
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	fb02 f303 	mul.w	r3, r2, r3
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a05c:	e05c      	b.n	800a118 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	429a      	cmp	r2, r3
 800a066:	d02e      	beq.n	800a0c6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	7d1b      	ldrb	r3, [r3, #20]
 800a06c:	b25b      	sxtb	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da18      	bge.n	800a0a4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	7858      	ldrb	r0, [r3, #1]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6a1a      	ldr	r2, [r3, #32]
 800a080:	2301      	movs	r3, #1
 800a082:	f7fd ff5b 	bl	8007f3c <disk_write>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <f_read+0x202>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2201      	movs	r2, #1
 800a090:	755a      	strb	r2, [r3, #21]
 800a092:	2301      	movs	r3, #1
 800a094:	e059      	b.n	800a14a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	7d1b      	ldrb	r3, [r3, #20]
 800a09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	7858      	ldrb	r0, [r3, #1]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	f7fd ff23 	bl	8007efc <disk_read>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d004      	beq.n	800a0c6 <f_read+0x232>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	755a      	strb	r2, [r3, #21]
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e041      	b.n	800a14a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	899b      	ldrh	r3, [r3, #12]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	8992      	ldrh	r2, [r2, #12]
 800a0da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0de:	fb02 f201 	mul.w	r2, r2, r1
 800a0e2:	1a9b      	subs	r3, r3, r2
 800a0e4:	1ac3      	subs	r3, r0, r3
 800a0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a0e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d901      	bls.n	800a0f4 <f_read+0x260>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	8992      	ldrh	r2, [r2, #12]
 800a102:	fbb3 f0f2 	udiv	r0, r3, r2
 800a106:	fb02 f200 	mul.w	r2, r2, r0
 800a10a:	1a9b      	subs	r3, r3, r2
 800a10c:	440b      	add	r3, r1
 800a10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a110:	4619      	mov	r1, r3
 800a112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a114:	f7fd ffd2 	bl	80080bc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	4413      	add	r3, r2
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	441a      	add	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	619a      	str	r2, [r3, #24]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a132:	441a      	add	r2, r3
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f47f aee1 	bne.w	8009f0a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3738      	adds	r7, #56	; 0x38
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b08c      	sub	sp, #48	; 0x30
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	60b9      	str	r1, [r7, #8]
 800a15c:	607a      	str	r2, [r7, #4]
 800a15e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f107 0210 	add.w	r2, r7, #16
 800a170:	4611      	mov	r1, r2
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff fc46 	bl	8009a04 <validate>
 800a178:	4603      	mov	r3, r0
 800a17a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a17e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a182:	2b00      	cmp	r3, #0
 800a184:	d107      	bne.n	800a196 <f_write+0x44>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	7d5b      	ldrb	r3, [r3, #21]
 800a18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a18e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <f_write+0x4a>
 800a196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a19a:	e16a      	b.n	800a472 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <f_write+0x5a>
 800a1a8:	2307      	movs	r3, #7
 800a1aa:	e162      	b.n	800a472 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	699a      	ldr	r2, [r3, #24]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	441a      	add	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	f080 814c 	bcs.w	800a456 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a1c6:	e146      	b.n	800a456 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	8992      	ldrh	r2, [r2, #12]
 800a1d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1d4:	fb02 f201 	mul.w	r2, r2, r1
 800a1d8:	1a9b      	subs	r3, r3, r2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f040 80f1 	bne.w	800a3c2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	8992      	ldrh	r2, [r2, #12]
 800a1e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	8952      	ldrh	r2, [r2, #10]
 800a1f0:	3a01      	subs	r2, #1
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d143      	bne.n	800a284 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10c      	bne.n	800a21e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d11a      	bne.n	800a246 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2100      	movs	r1, #0
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe fc91 	bl	8008b3c <create_chain>
 800a21a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a21c:	e013      	b.n	800a246 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a222:	2b00      	cmp	r3, #0
 800a224:	d007      	beq.n	800a236 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	4619      	mov	r1, r3
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7fe fd1d 	bl	8008c6c <clmt_clust>
 800a232:	62b8      	str	r0, [r7, #40]	; 0x28
 800a234:	e007      	b.n	800a246 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	4619      	mov	r1, r3
 800a23e:	4610      	mov	r0, r2
 800a240:	f7fe fc7c 	bl	8008b3c <create_chain>
 800a244:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 8109 	beq.w	800a460 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	2b01      	cmp	r3, #1
 800a252:	d104      	bne.n	800a25e <f_write+0x10c>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2202      	movs	r2, #2
 800a258:	755a      	strb	r2, [r3, #21]
 800a25a:	2302      	movs	r3, #2
 800a25c:	e109      	b.n	800a472 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a264:	d104      	bne.n	800a270 <f_write+0x11e>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2201      	movs	r2, #1
 800a26a:	755a      	strb	r2, [r3, #21]
 800a26c:	2301      	movs	r3, #1
 800a26e:	e100      	b.n	800a472 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a274:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d102      	bne.n	800a284 <f_write+0x132>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a282:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	7d1b      	ldrb	r3, [r3, #20]
 800a288:	b25b      	sxtb	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	da18      	bge.n	800a2c0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	7858      	ldrb	r0, [r3, #1]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6a1a      	ldr	r2, [r3, #32]
 800a29c:	2301      	movs	r3, #1
 800a29e:	f7fd fe4d 	bl	8007f3c <disk_write>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d004      	beq.n	800a2b2 <f_write+0x160>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	755a      	strb	r2, [r3, #21]
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e0df      	b.n	800a472 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	7d1b      	ldrb	r3, [r3, #20]
 800a2b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f7fe f9c3 	bl	8008654 <clust2sect>
 800a2ce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d104      	bne.n	800a2e0 <f_write+0x18e>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	755a      	strb	r2, [r3, #21]
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e0c8      	b.n	800a472 <f_write+0x320>
			sect += csect;
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	899b      	ldrh	r3, [r3, #12]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d043      	beq.n	800a384 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	4413      	add	r3, r2
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	8952      	ldrh	r2, [r2, #10]
 800a306:	4293      	cmp	r3, r2
 800a308:	d905      	bls.n	800a316 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	895b      	ldrh	r3, [r3, #10]
 800a30e:	461a      	mov	r2, r3
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	7858      	ldrb	r0, [r3, #1]
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	69f9      	ldr	r1, [r7, #28]
 800a320:	f7fd fe0c 	bl	8007f3c <disk_write>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d004      	beq.n	800a334 <f_write+0x1e2>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2201      	movs	r2, #1
 800a32e:	755a      	strb	r2, [r3, #21]
 800a330:	2301      	movs	r3, #1
 800a332:	e09e      	b.n	800a472 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a1a      	ldr	r2, [r3, #32]
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	6a3a      	ldr	r2, [r7, #32]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d918      	bls.n	800a374 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a1a      	ldr	r2, [r3, #32]
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	8992      	ldrh	r2, [r2, #12]
 800a354:	fb02 f303 	mul.w	r3, r2, r3
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	18d1      	adds	r1, r2, r3
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	899b      	ldrh	r3, [r3, #12]
 800a360:	461a      	mov	r2, r3
 800a362:	f7fd feab 	bl	80080bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	7d1b      	ldrb	r3, [r3, #20]
 800a36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	899b      	ldrh	r3, [r3, #12]
 800a378:	461a      	mov	r2, r3
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	fb02 f303 	mul.w	r3, r2, r3
 800a380:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a382:	e04b      	b.n	800a41c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d016      	beq.n	800a3bc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	699a      	ldr	r2, [r3, #24]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a396:	429a      	cmp	r2, r3
 800a398:	d210      	bcs.n	800a3bc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	7858      	ldrb	r0, [r3, #1]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	f7fd fda8 	bl	8007efc <disk_read>
 800a3ac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d004      	beq.n	800a3bc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	755a      	strb	r2, [r3, #21]
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e05a      	b.n	800a472 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	899b      	ldrh	r3, [r3, #12]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	8992      	ldrh	r2, [r2, #12]
 800a3d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3d4:	fb02 f201 	mul.w	r2, r2, r1
 800a3d8:	1a9b      	subs	r3, r3, r2
 800a3da:	1ac3      	subs	r3, r0, r3
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a3de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d901      	bls.n	800a3ea <f_write+0x298>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	8992      	ldrh	r2, [r2, #12]
 800a3f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3fc:	fb02 f200 	mul.w	r2, r2, r0
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	440b      	add	r3, r1
 800a404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a406:	69f9      	ldr	r1, [r7, #28]
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fd fe57 	bl	80080bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	7d1b      	ldrb	r3, [r3, #20]
 800a412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a416:	b2da      	uxtb	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a41c:	69fa      	ldr	r2, [r7, #28]
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	4413      	add	r3, r2
 800a422:	61fb      	str	r3, [r7, #28]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	699a      	ldr	r2, [r3, #24]
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	441a      	add	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	619a      	str	r2, [r3, #24]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	68da      	ldr	r2, [r3, #12]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	429a      	cmp	r2, r3
 800a43a:	bf38      	it	cc
 800a43c:	461a      	movcc	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	60da      	str	r2, [r3, #12]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	441a      	add	r2, r3
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f47f aeb5 	bne.w	800a1c8 <f_write+0x76>
 800a45e:	e000      	b.n	800a462 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a460:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	7d1b      	ldrb	r3, [r3, #20]
 800a466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3730      	adds	r7, #48	; 0x30
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b086      	sub	sp, #24
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f107 0208 	add.w	r2, r7, #8
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff faba 	bl	8009a04 <validate>
 800a490:	4603      	mov	r3, r0
 800a492:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d168      	bne.n	800a56c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	7d1b      	ldrb	r3, [r3, #20]
 800a49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d062      	beq.n	800a56c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	7d1b      	ldrb	r3, [r3, #20]
 800a4aa:	b25b      	sxtb	r3, r3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	da15      	bge.n	800a4dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	7858      	ldrb	r0, [r3, #1]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1a      	ldr	r2, [r3, #32]
 800a4be:	2301      	movs	r3, #1
 800a4c0:	f7fd fd3c 	bl	8007f3c <disk_write>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <f_sync+0x54>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e04f      	b.n	800a56e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	7d1b      	ldrb	r3, [r3, #20]
 800a4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a4dc:	f7fc fde6 	bl	80070ac <get_fattime>
 800a4e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	f7fe f814 	bl	8008518 <move_window>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d138      	bne.n	800a56c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	330b      	adds	r3, #11
 800a504:	781a      	ldrb	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	330b      	adds	r3, #11
 800a50a:	f042 0220 	orr.w	r2, r2, #32
 800a50e:	b2d2      	uxtb	r2, r2
 800a510:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6818      	ldr	r0, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	461a      	mov	r2, r3
 800a51c:	68f9      	ldr	r1, [r7, #12]
 800a51e:	f7fe fda2 	bl	8009066 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f103 021c 	add.w	r2, r3, #28
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	4619      	mov	r1, r3
 800a52e:	4610      	mov	r0, r2
 800a530:	f7fd fd98 	bl	8008064 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3316      	adds	r3, #22
 800a538:	6939      	ldr	r1, [r7, #16]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fd fd92 	bl	8008064 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	3312      	adds	r3, #18
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f7fd fd71 	bl	800802e <st_word>
					fs->wflag = 1;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2201      	movs	r2, #1
 800a550:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe f80d 	bl	8008574 <sync_fs>
 800a55a:	4603      	mov	r3, r0
 800a55c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	7d1b      	ldrb	r3, [r3, #20]
 800a562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a566:	b2da      	uxtb	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7ff ff7b 	bl	800a47a <f_sync>
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d118      	bne.n	800a5c0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f107 0208 	add.w	r2, r7, #8
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff fa34 	bl	8009a04 <validate>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10c      	bne.n	800a5c0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fd ff10 	bl	80083d0 <dec_lock>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a5e2:	4b1f      	ldr	r3, [pc, #124]	; (800a660 <FATFS_LinkDriverEx+0x94>)
 800a5e4:	7a5b      	ldrb	r3, [r3, #9]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d131      	bne.n	800a650 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a5ec:	4b1c      	ldr	r3, [pc, #112]	; (800a660 <FATFS_LinkDriverEx+0x94>)
 800a5ee:	7a5b      	ldrb	r3, [r3, #9]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	4b1a      	ldr	r3, [pc, #104]	; (800a660 <FATFS_LinkDriverEx+0x94>)
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a5fa:	4b19      	ldr	r3, [pc, #100]	; (800a660 <FATFS_LinkDriverEx+0x94>)
 800a5fc:	7a5b      	ldrb	r3, [r3, #9]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	4a17      	ldr	r2, [pc, #92]	; (800a660 <FATFS_LinkDriverEx+0x94>)
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a60a:	4b15      	ldr	r3, [pc, #84]	; (800a660 <FATFS_LinkDriverEx+0x94>)
 800a60c:	7a5b      	ldrb	r3, [r3, #9]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	4b13      	ldr	r3, [pc, #76]	; (800a660 <FATFS_LinkDriverEx+0x94>)
 800a614:	4413      	add	r3, r2
 800a616:	79fa      	ldrb	r2, [r7, #7]
 800a618:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a61a:	4b11      	ldr	r3, [pc, #68]	; (800a660 <FATFS_LinkDriverEx+0x94>)
 800a61c:	7a5b      	ldrb	r3, [r3, #9]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	1c5a      	adds	r2, r3, #1
 800a622:	b2d1      	uxtb	r1, r2
 800a624:	4a0e      	ldr	r2, [pc, #56]	; (800a660 <FATFS_LinkDriverEx+0x94>)
 800a626:	7251      	strb	r1, [r2, #9]
 800a628:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a62a:	7dbb      	ldrb	r3, [r7, #22]
 800a62c:	3330      	adds	r3, #48	; 0x30
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	3301      	adds	r3, #1
 800a638:	223a      	movs	r2, #58	; 0x3a
 800a63a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	3302      	adds	r3, #2
 800a640:	222f      	movs	r2, #47	; 0x2f
 800a642:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	3303      	adds	r3, #3
 800a648:	2200      	movs	r2, #0
 800a64a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a650:	7dfb      	ldrb	r3, [r7, #23]
}
 800a652:	4618      	mov	r0, r3
 800a654:	371c      	adds	r7, #28
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	20001210 	.word	0x20001210

0800a664 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a66e:	2200      	movs	r2, #0
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7ff ffaa 	bl	800a5cc <FATFS_LinkDriverEx>
 800a678:	4603      	mov	r3, r0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <fs_open+0x16>
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d102      	bne.n	800a6a0 <fs_open+0x1c>
    return ERR_ARG;
 800a69a:	f06f 030f 	mvn.w	r3, #15
 800a69e:	e028      	b.n	800a6f2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a6a0:	4b16      	ldr	r3, [pc, #88]	; (800a6fc <fs_open+0x78>)
 800a6a2:	60fb      	str	r3, [r7, #12]
 800a6a4:	e020      	b.n	800a6e8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6838      	ldr	r0, [r7, #0]
 800a6ae:	f7f5 fd8f 	bl	80001d0 <strcmp>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d114      	bne.n	800a6e2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	68da      	ldr	r2, [r3, #12]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	68da      	ldr	r2, [r3, #12]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	7c1a      	ldrb	r2, [r3, #16]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e007      	b.n	800a6f2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1db      	bne.n	800a6a6 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a6ee:	f06f 0305 	mvn.w	r3, #5
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	0801e904 	.word	0x0801e904

0800a700 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	1ad3      	subs	r3, r2, r3
}
 800a726:	4618      	mov	r0, r3
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800a738:	f44f 7094 	mov.w	r0, #296	; 0x128
 800a73c:	f002 fb2c 	bl	800cd98 <mem_malloc>
 800a740:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800a748:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a74c:	2100      	movs	r1, #0
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f00c fbf4 	bl	8016f3c <memset>
  }
  return ret;
 800a754:	687b      	ldr	r3, [r7, #4]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b082      	sub	sp, #8
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f002 f9ad 	bl	800cacc <mem_free>
  }
}
 800a772:	bf00      	nop
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a782:	22d8      	movs	r2, #216	; 0xd8
 800a784:	2100      	movs	r1, #0
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f00c fbd8 	bl	8016f3c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2205      	movs	r2, #5
 800a790:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a7a2:	20d8      	movs	r0, #216	; 0xd8
 800a7a4:	f002 faf8 	bl	800cd98 <mem_malloc>
 800a7a8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <http_state_alloc+0x1a>
    http_state_init(ret);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ffe2 	bl	800a77a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a7b6:	687b      	ldr	r3, [r7, #4]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d007      	beq.n	800a7e0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff ff93 	bl	800a700 <fs_close>
    hs->handle = NULL;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d007      	beq.n	800a7f8 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7ff ffb6 	bl	800a75e <http_ssi_state_free>
    hs->ssi = NULL;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a1b      	ldr	r3, [r3, #32]
 800a804:	4618      	mov	r0, r3
 800a806:	f003 fa93 	bl	800dd30 <pbuf_free>
    hs->req = NULL;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d005      	beq.n	800a832 <http_state_free+0x1a>
    http_state_eof(hs);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7ff ffca 	bl	800a7c0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f002 f94d 	bl	800cacc <mem_free>
  }
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <http_write+0x22>
 800a850:	4b2c      	ldr	r3, [pc, #176]	; (800a904 <http_write+0xc8>)
 800a852:	f240 2219 	movw	r2, #537	; 0x219
 800a856:	492c      	ldr	r1, [pc, #176]	; (800a908 <http_write+0xcc>)
 800a858:	482c      	ldr	r0, [pc, #176]	; (800a90c <http_write+0xd0>)
 800a85a:	f00c fb77 	bl	8016f4c <iprintf>
  len = *length;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a864:	8afb      	ldrh	r3, [r7, #22]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <http_write+0x32>
    return ERR_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e045      	b.n	800a8fa <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a874:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a876:	8aba      	ldrh	r2, [r7, #20]
 800a878:	8afb      	ldrh	r3, [r7, #22]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d201      	bcs.n	800a882 <http_write+0x46>
    len = max_len;
 800a87e:	8abb      	ldrh	r3, [r7, #20]
 800a880:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a886:	005b      	lsls	r3, r3, #1
 800a888:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a88a:	8afa      	ldrh	r2, [r7, #22]
 800a88c:	8abb      	ldrh	r3, [r7, #20]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d901      	bls.n	800a896 <http_write+0x5a>
    len = max_len;
 800a892:	8abb      	ldrh	r3, [r7, #20]
 800a894:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a896:	78fb      	ldrb	r3, [r7, #3]
 800a898:	8afa      	ldrh	r2, [r7, #22]
 800a89a:	68b9      	ldr	r1, [r7, #8]
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f007 ffcb 	bl	8012838 <tcp_write>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a8a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8ae:	d10f      	bne.n	800a8d0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d004      	beq.n	800a8c4 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a8c0:	2b08      	cmp	r3, #8
 800a8c2:	d902      	bls.n	800a8ca <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	82fb      	strh	r3, [r7, #22]
 800a8c8:	e002      	b.n	800a8d0 <http_write+0x94>
      } else {
        len /= 2;
 800a8ca:	8afb      	ldrh	r3, [r7, #22]
 800a8cc:	085b      	lsrs	r3, r3, #1
 800a8ce:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a8d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8d8:	d102      	bne.n	800a8e0 <http_write+0xa4>
 800a8da:	8afb      	ldrh	r3, [r7, #22]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d8da      	bhi.n	800a896 <http_write+0x5a>

  if (err == ERR_OK) {
 800a8e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d103      	bne.n	800a8f0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	8afa      	ldrh	r2, [r7, #22]
 800a8ec:	801a      	strh	r2, [r3, #0]
 800a8ee:	e002      	b.n	800a8f6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a8f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3718      	adds	r7, #24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	08019550 	.word	0x08019550
 800a908:	08019588 	.word	0x08019588
 800a90c:	08019598 	.word	0x08019598

0800a910 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	4613      	mov	r3, r2
 800a91c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00c      	beq.n	800a93e <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d007      	beq.n	800a93e <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800a92e:	4b1f      	ldr	r3, [pc, #124]	; (800a9ac <http_close_or_abort_conn+0x9c>)
 800a930:	2200      	movs	r2, #0
 800a932:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800a934:	223f      	movs	r2, #63	; 0x3f
 800a936:	491d      	ldr	r1, [pc, #116]	; (800a9ac <http_close_or_abort_conn+0x9c>)
 800a938:	68b8      	ldr	r0, [r7, #8]
 800a93a:	f7f6 f8e5 	bl	8000b08 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a93e:	2100      	movs	r1, #0
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f005 f83b 	bl	800f9bc <tcp_arg>
  altcp_recv(pcb, NULL);
 800a946:	2100      	movs	r1, #0
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f005 f849 	bl	800f9e0 <tcp_recv>
  altcp_err(pcb, NULL);
 800a94e:	2100      	movs	r1, #0
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f005 f889 	bl	800fa68 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a956:	2200      	movs	r2, #0
 800a958:	2100      	movs	r1, #0
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f005 f8be 	bl	800fadc <tcp_poll>
  altcp_sent(pcb, NULL);
 800a960:	2100      	movs	r1, #0
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f005 f85e 	bl	800fa24 <tcp_sent>
  if (hs != NULL) {
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800a96e:	68b8      	ldr	r0, [r7, #8]
 800a970:	f7ff ff52 	bl	800a818 <http_state_free>
  }

  if (abort_conn) {
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d004      	beq.n	800a984 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f003 ff60 	bl	800e840 <tcp_abort>
    return ERR_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	e00f      	b.n	800a9a4 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f003 fe71 	bl	800e66c <tcp_close>
 800a98a:	4603      	mov	r3, r0
 800a98c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a98e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d004      	beq.n	800a9a0 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a996:	2204      	movs	r2, #4
 800a998:	4905      	ldr	r1, [pc, #20]	; (800a9b0 <http_close_or_abort_conn+0xa0>)
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f005 f89e 	bl	800fadc <tcp_poll>
  }
  return err;
 800a9a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	2000161c 	.word	0x2000161c
 800a9b0:	0800c223 	.word	0x0800c223

0800a9b4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a9be:	2200      	movs	r2, #0
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7ff ffa4 	bl	800a910 <http_close_or_abort_conn>
 800a9c8:	4603      	mov	r3, r0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7ff ffe8 	bl	800a9b4 <http_close_conn>
  }
}
 800a9e4:	bf00      	nop
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d003      	beq.n	800aa04 <extract_uri_parameters+0x18>
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <extract_uri_parameters+0x1c>
    return (0);
 800aa04:	2300      	movs	r3, #0
 800aa06:	e04b      	b.n	800aaa0 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	e03f      	b.n	800aa92 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	320c      	adds	r2, #12
 800aa18:	6979      	ldr	r1, [r7, #20]
 800aa1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800aa22:	2126      	movs	r1, #38	; 0x26
 800aa24:	6978      	ldr	r0, [r7, #20]
 800aa26:	f00c fbc2 	bl	80171ae <strchr>
 800aa2a:	6178      	str	r0, [r7, #20]
    if (pair) {
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d006      	beq.n	800aa40 <extract_uri_parameters+0x54>
      *pair = '\0';
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2200      	movs	r2, #0
 800aa36:	701a      	strb	r2, [r3, #0]
      pair++;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	617b      	str	r3, [r7, #20]
 800aa3e:	e00c      	b.n	800aa5a <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800aa40:	2120      	movs	r1, #32
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f00c fbb3 	bl	80171ae <strchr>
 800aa48:	6178      	str	r0, [r7, #20]
      if (pair) {
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2200      	movs	r2, #0
 800aa54:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800aa56:	2300      	movs	r3, #0
 800aa58:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800aa5a:	213d      	movs	r1, #61	; 0x3d
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f00c fba6 	bl	80171ae <strchr>
 800aa62:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00a      	beq.n	800aa80 <extract_uri_parameters+0x94>
      *equals = '\0';
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	1c59      	adds	r1, r3, #1
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	321c      	adds	r2, #28
 800aa7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800aa7e:	e005      	b.n	800aa8c <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	321c      	adds	r2, #28
 800aa86:	2100      	movs	r1, #0
 800aa88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	613b      	str	r3, [r7, #16]
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	2b0f      	cmp	r3, #15
 800aa96:	dc02      	bgt.n	800aa9e <extract_uri_parameters+0xb2>
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1b9      	bne.n	800aa12 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800aa9e:	693b      	ldr	r3, [r7, #16]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800aaa8:	b590      	push	{r4, r7, lr}
 800aaaa:	b089      	sub	sp, #36	; 0x24
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <get_tag_insert+0x1c>
 800aab6:	4b58      	ldr	r3, [pc, #352]	; (800ac18 <get_tag_insert+0x170>)
 800aab8:	f44f 7241 	mov.w	r2, #772	; 0x304
 800aabc:	4957      	ldr	r1, [pc, #348]	; (800ac1c <get_tag_insert+0x174>)
 800aabe:	4858      	ldr	r0, [pc, #352]	; (800ac20 <get_tag_insert+0x178>)
 800aac0:	f00c fa44 	bl	8016f4c <iprintf>
  ssi = hs->ssi;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d106      	bne.n	800aade <get_tag_insert+0x36>
 800aad0:	4b51      	ldr	r3, [pc, #324]	; (800ac18 <get_tag_insert+0x170>)
 800aad2:	f240 3206 	movw	r2, #774	; 0x306
 800aad6:	4953      	ldr	r1, [pc, #332]	; (800ac24 <get_tag_insert+0x17c>)
 800aad8:	4851      	ldr	r0, [pc, #324]	; (800ac20 <get_tag_insert+0x178>)
 800aada:	f00c fa37 	bl	8016f4c <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	8a9b      	ldrh	r3, [r3, #20]
 800aae2:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aaea:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800aaec:	4b4e      	ldr	r3, [pc, #312]	; (800ac28 <get_tag_insert+0x180>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d033      	beq.n	800ab5c <get_tag_insert+0xb4>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800aaf4:	4b4d      	ldr	r3, [pc, #308]	; (800ac2c <get_tag_insert+0x184>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d02f      	beq.n	800ab5c <get_tag_insert+0xb4>
 800aafc:	4b4c      	ldr	r3, [pc, #304]	; (800ac30 <get_tag_insert+0x188>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d02b      	beq.n	800ab5c <get_tag_insert+0xb4>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800ab04:	2300      	movs	r3, #0
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	e023      	b.n	800ab52 <get_tag_insert+0xaa>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	f103 0018 	add.w	r0, r3, #24
 800ab10:	4b46      	ldr	r3, [pc, #280]	; (800ac2c <get_tag_insert+0x184>)
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	f7f5 fb57 	bl	80001d0 <strcmp>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d111      	bne.n	800ab4c <get_tag_insert+0xa4>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800ab28:	4b3f      	ldr	r3, [pc, #252]	; (800ac28 <get_tag_insert+0x180>)
 800ab2a:	681c      	ldr	r4, [r3, #0]
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	3314      	adds	r3, #20
 800ab36:	89fa      	ldrh	r2, [r7, #14]
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	22fa      	movs	r2, #250	; 0xfa
 800ab3e:	6978      	ldr	r0, [r7, #20]
 800ab40:	47a0      	blx	r4
 800ab42:	4603      	mov	r3, r0
 800ab44:	461a      	mov	r2, r3
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800ab4a:	e061      	b.n	800ac10 <get_tag_insert+0x168>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	617b      	str	r3, [r7, #20]
 800ab52:	4b37      	ldr	r3, [pc, #220]	; (800ac30 <get_tag_insert+0x188>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	dbd6      	blt.n	800ab0a <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	3318      	adds	r3, #24
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7f5 fb3f 	bl	80001e4 <strlen>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2be0      	cmp	r3, #224	; 0xe0
 800ab6a:	d818      	bhi.n	800ab9e <get_tag_insert+0xf6>
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	3318      	adds	r3, #24
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7f5 fb37 	bl	80001e4 <strlen>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b11      	cmp	r3, #17
 800ab7a:	d810      	bhi.n	800ab9e <get_tag_insert+0xf6>
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	3318      	adds	r3, #24
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7f5 fb2f 	bl	80001e4 <strlen>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2be0      	cmp	r3, #224	; 0xe0
 800ab8a:	d806      	bhi.n	800ab9a <get_tag_insert+0xf2>
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	3318      	adds	r3, #24
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7f5 fb27 	bl	80001e4 <strlen>
 800ab96:	4603      	mov	r3, r0
 800ab98:	e002      	b.n	800aba0 <get_tag_insert+0xf8>
 800ab9a:	23e1      	movs	r3, #225	; 0xe1
 800ab9c:	e000      	b.n	800aba0 <get_tag_insert+0xf8>
 800ab9e:	2311      	movs	r3, #17
 800aba0:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	3329      	adds	r3, #41	; 0x29
 800aba6:	2212      	movs	r2, #18
 800aba8:	4922      	ldr	r1, [pc, #136]	; (800ac34 <get_tag_insert+0x18c>)
 800abaa:	4618      	mov	r0, r3
 800abac:	f00c f99e 	bl	8016eec <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	3318      	adds	r3, #24
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	4619      	mov	r1, r3
 800abbe:	f00c f995 	bl	8016eec <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3312      	adds	r3, #18
 800abc6:	3328      	adds	r3, #40	; 0x28
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4413      	add	r3, r2
 800abcc:	3301      	adds	r3, #1
 800abce:	2207      	movs	r2, #7
 800abd0:	4919      	ldr	r1, [pc, #100]	; (800ac38 <get_tag_insert+0x190>)
 800abd2:	4618      	mov	r0, r3
 800abd4:	f00c f98a 	bl	8016eec <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	3319      	adds	r3, #25
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	4413      	add	r3, r2
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  len = strlen(ssi->tag_insert);
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	3329      	adds	r3, #41	; 0x29
 800abea:	4618      	mov	r0, r3
 800abec:	f7f5 fafa 	bl	80001e4 <strlen>
 800abf0:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf8:	d306      	bcc.n	800ac08 <get_tag_insert+0x160>
 800abfa:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <get_tag_insert+0x170>)
 800abfc:	f240 323f 	movw	r2, #831	; 0x33f
 800ac00:	490e      	ldr	r1, [pc, #56]	; (800ac3c <get_tag_insert+0x194>)
 800ac02:	4807      	ldr	r0, [pc, #28]	; (800ac20 <get_tag_insert+0x178>)
 800ac04:	f00c f9a2 	bl	8016f4c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	825a      	strh	r2, [r3, #18]
}
 800ac10:	371c      	adds	r7, #28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd90      	pop	{r4, r7, pc}
 800ac16:	bf00      	nop
 800ac18:	08019550 	.word	0x08019550
 800ac1c:	080195c0 	.word	0x080195c0
 800ac20:	08019598 	.word	0x08019598
 800ac24:	080195cc 	.word	0x080195cc
 800ac28:	2000165c 	.word	0x2000165c
 800ac2c:	20001664 	.word	0x20001664
 800ac30:	20001660 	.word	0x20001660
 800ac34:	080195d8 	.word	0x080195d8
 800ac38:	080195ec 	.word	0x080195ec
 800ac3c:	080195f4 	.word	0x080195f4

0800ac40 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800ac4a:	4a55      	ldr	r2, [pc, #340]	; (800ada0 <get_http_headers+0x160>)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d110      	bne.n	800ac8a <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800ac68:	4a4e      	ldr	r2, [pc, #312]	; (800ada4 <get_http_headers+0x164>)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800ac70:	4a4d      	ldr	r2, [pc, #308]	; (800ada8 <get_http_headers+0x168>)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800ac88:	e087      	b.n	800ad9a <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800ac8a:	4948      	ldr	r1, [pc, #288]	; (800adac <get_http_headers+0x16c>)
 800ac8c:	6838      	ldr	r0, [r7, #0]
 800ac8e:	f00c fac8 	bl	8017222 <strstr>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800ac98:	4a42      	ldr	r2, [pc, #264]	; (800ada4 <get_http_headers+0x164>)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800aca0:	e01b      	b.n	800acda <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800aca2:	4943      	ldr	r1, [pc, #268]	; (800adb0 <get_http_headers+0x170>)
 800aca4:	6838      	ldr	r0, [r7, #0]
 800aca6:	f00c fabc 	bl	8017222 <strstr>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d004      	beq.n	800acba <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800acb0:	4a40      	ldr	r2, [pc, #256]	; (800adb4 <get_http_headers+0x174>)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800acb8:	e00f      	b.n	800acda <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800acba:	493f      	ldr	r1, [pc, #252]	; (800adb8 <get_http_headers+0x178>)
 800acbc:	6838      	ldr	r0, [r7, #0]
 800acbe:	f00c fab0 	bl	8017222 <strstr>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d004      	beq.n	800acd2 <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800acc8:	4a3c      	ldr	r2, [pc, #240]	; (800adbc <get_http_headers+0x17c>)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800acd0:	e003      	b.n	800acda <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800acd2:	4a3b      	ldr	r2, [pc, #236]	; (800adc0 <get_http_headers+0x180>)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800acda:	213f      	movs	r1, #63	; 0x3f
 800acdc:	6838      	ldr	r0, [r7, #0]
 800acde:	f00c fa66 	bl	80171ae <strchr>
 800ace2:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <get_http_headers+0xb0>
    *vars = '\0';
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2200      	movs	r2, #0
 800acee:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800acf4:	212e      	movs	r1, #46	; 0x2e
 800acf6:	6838      	ldr	r0, [r7, #0]
 800acf8:	f00c fa59 	bl	80171ae <strchr>
 800acfc:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800acfe:	e007      	b.n	800ad10 <get_http_headers+0xd0>
    ext = tmp + 1;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	3301      	adds	r3, #1
 800ad04:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800ad06:	212e      	movs	r1, #46	; 0x2e
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f00c fa50 	bl	80171ae <strchr>
 800ad0e:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1f4      	bne.n	800ad00 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d014      	beq.n	800ad46 <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
 800ad20:	e00d      	b.n	800ad3e <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800ad22:	4a28      	ldr	r2, [pc, #160]	; (800adc4 <get_http_headers+0x184>)
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad2a:	68f9      	ldr	r1, [r7, #12]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f001 fcd1 	bl	800c6d4 <lwip_stricmp>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d009      	beq.n	800ad4c <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	617b      	str	r3, [r7, #20]
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	2b13      	cmp	r3, #19
 800ad42:	d9ee      	bls.n	800ad22 <get_http_headers+0xe2>
 800ad44:	e003      	b.n	800ad4e <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800ad46:	2314      	movs	r3, #20
 800ad48:	617b      	str	r3, [r7, #20]
 800ad4a:	e000      	b.n	800ad4e <get_http_headers+0x10e>
        break;
 800ad4c:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d002      	beq.n	800ad5a <get_http_headers+0x11a>
    *vars = '?';
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	223f      	movs	r2, #63	; 0x3f
 800ad58:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	2b13      	cmp	r3, #19
 800ad5e:	d808      	bhi.n	800ad72 <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800ad60:	4a18      	ldr	r2, [pc, #96]	; (800adc4 <get_http_headers+0x184>)
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	00db      	lsls	r3, r3, #3
 800ad66:	4413      	add	r3, r2
 800ad68:	685a      	ldr	r2, [r3, #4]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800ad70:	e00b      	b.n	800ad8a <get_http_headers+0x14a>
  } else if (!ext) {
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d104      	bne.n	800ad82 <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a13      	ldr	r2, [pc, #76]	; (800adc8 <get_http_headers+0x188>)
 800ad7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800ad80:	e003      	b.n	800ad8a <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a11      	ldr	r2, [pc, #68]	; (800adcc <get_http_headers+0x18c>)
 800ad86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	080191d0 	.word	0x080191d0
 800ada4:	08019094 	.word	0x08019094
 800ada8:	08019210 	.word	0x08019210
 800adac:	08019604 	.word	0x08019604
 800adb0:	08019608 	.word	0x08019608
 800adb4:	080190b4 	.word	0x080190b4
 800adb8:	0801960c 	.word	0x0801960c
 800adbc:	080190d0 	.word	0x080190d0
 800adc0:	08019080 	.word	0x08019080
 800adc4:	0801e918 	.word	0x0801e918
 800adc8:	080193a4 	.word	0x080193a4
 800adcc:	08019610 	.word	0x08019610

0800add0 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d006      	beq.n	800adf4 <get_http_content_length+0x24>
 800ade6:	4b27      	ldr	r3, [pc, #156]	; (800ae84 <get_http_content_length+0xb4>)
 800ade8:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800adec:	4926      	ldr	r1, [pc, #152]	; (800ae88 <get_http_content_length+0xb8>)
 800adee:	4827      	ldr	r0, [pc, #156]	; (800ae8c <get_http_content_length+0xbc>)
 800adf0:	f00c f8ac 	bl	8016f4c <iprintf>

  add_content_len = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d10c      	bne.n	800ae1a <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d008      	beq.n	800ae1a <get_http_content_length+0x4a>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	695b      	ldr	r3, [r3, #20]
 800ae0c:	7c1b      	ldrb	r3, [r3, #16]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <get_http_content_length+0x4a>
      add_content_len = 1;
 800ae16:	2301      	movs	r3, #1
 800ae18:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d025      	beq.n	800ae6c <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	210c      	movs	r1, #12
 800ae30:	f001 fc84 	bl	800c73c <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	33c4      	adds	r3, #196	; 0xc4
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7f5 f9d3 	bl	80001e4 <strlen>
 800ae3e:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	2b09      	cmp	r3, #9
 800ae44:	d810      	bhi.n	800ae68 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	33c0      	adds	r3, #192	; 0xc0
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	3304      	adds	r3, #4
 800ae50:	2203      	movs	r2, #3
 800ae52:	490f      	ldr	r1, [pc, #60]	; (800ae90 <get_http_content_length+0xc0>)
 800ae54:	4618      	mov	r0, r3
 800ae56:	f00c f849 	bl	8016eec <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800ae66:	e001      	b.n	800ae6c <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800ae72:	4a08      	ldr	r2, [pc, #32]	; (800ae94 <get_http_content_length+0xc4>)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800ae7a:	bf00      	nop
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	08019550 	.word	0x08019550
 800ae88:	08019630 	.word	0x08019630
 800ae8c:	08019598 	.word	0x08019598
 800ae90:	08019644 	.word	0x08019644
 800ae94:	08019160 	.word	0x08019160

0800ae98 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800aea2:	2300      	movs	r3, #0
 800aea4:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800aeb0:	6838      	ldr	r0, [r7, #0]
 800aeb2:	f7ff ff8d 	bl	800add0 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aebc:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800aebe:	8bfb      	ldrh	r3, [r7, #30]
 800aec0:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800aec2:	e08b      	b.n	800afdc <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800aeca:	461a      	mov	r2, r3
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	322c      	adds	r2, #44	; 0x2c
 800aed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7f5 f985 	bl	80001e4 <strlen>
 800aeda:	4603      	mov	r3, r0
 800aedc:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800aede:	8b7b      	ldrh	r3, [r7, #26]
 800aee0:	683a      	ldr	r2, [r7, #0]
 800aee2:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800aee6:	1a9a      	subs	r2, r3, r2
 800aee8:	8bfb      	ldrh	r3, [r7, #30]
 800aeea:	4293      	cmp	r3, r2
 800aeec:	bfa8      	it	ge
 800aeee:	4613      	movge	r3, r2
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800aefa:	461a      	mov	r2, r3
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	322c      	adds	r2, #44	; 0x2c
 800af00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af04:	683a      	ldr	r2, [r7, #0]
 800af06:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800af0a:	4413      	add	r3, r2
 800af0c:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800af0e:	89fb      	ldrh	r3, [r7, #14]
 800af10:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800af12:	2300      	movs	r3, #0
 800af14:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d103      	bne.n	800af28 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800af20:	7f3b      	ldrb	r3, [r7, #28]
 800af22:	f043 0301 	orr.w	r3, r3, #1
 800af26:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800af2e:	2b03      	cmp	r3, #3
 800af30:	d803      	bhi.n	800af3a <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800af32:	7f3b      	ldrb	r3, [r7, #28]
 800af34:	f043 0302 	orr.w	r3, r3, #2
 800af38:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800af3a:	7f3b      	ldrb	r3, [r7, #28]
 800af3c:	f107 020e 	add.w	r2, r7, #14
 800af40:	6979      	ldr	r1, [r7, #20]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff fc7a 	bl	800a83c <http_write>
 800af48:	4603      	mov	r3, r0
 800af4a:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800af4c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <http_send_headers+0xca>
 800af54:	89fb      	ldrh	r3, [r7, #14]
 800af56:	8a7a      	ldrh	r2, [r7, #18]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d002      	beq.n	800af62 <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800af5c:	2301      	movs	r3, #1
 800af5e:	777b      	strb	r3, [r7, #29]
 800af60:	e005      	b.n	800af6e <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800af62:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800af74:	89fb      	ldrh	r3, [r7, #14]
 800af76:	4413      	add	r3, r2
 800af78:	b29a      	uxth	r2, r3
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 800af80:	89fb      	ldrh	r3, [r7, #14]
 800af82:	8bfa      	ldrh	r2, [r7, #30]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800af8e:	8b7a      	ldrh	r2, [r7, #26]
 800af90:	429a      	cmp	r2, r3
 800af92:	d123      	bne.n	800afdc <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800af9a:	3301      	adds	r3, #1
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800afa4:	e007      	b.n	800afb6 <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800afac:	3301      	adds	r3, #1
 800afae:	b29a      	uxth	r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800afbc:	2b04      	cmp	r3, #4
 800afbe:	d809      	bhi.n	800afd4 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800afc6:	461a      	mov	r2, r3
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	322c      	adds	r2, #44	; 0x2c
 800afcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d0e8      	beq.n	800afa6 <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800afdc:	8bfb      	ldrh	r3, [r7, #30]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d008      	beq.n	800aff4 <http_send_headers+0x15c>
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800afe8:	2b04      	cmp	r3, #4
 800afea:	d803      	bhi.n	800aff4 <http_send_headers+0x15c>
 800afec:	89fb      	ldrh	r3, [r7, #14]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f47f af68 	bne.w	800aec4 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800affa:	2b04      	cmp	r3, #4
 800affc:	d90f      	bls.n	800b01e <http_send_headers+0x186>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10b      	bne.n	800b01e <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f819 	bl	800b040 <http_check_eof>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800b014:	2302      	movs	r3, #2
 800b016:	777b      	strb	r3, [r7, #29]
 800b018:	e001      	b.n	800b01e <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800b01a:	2303      	movs	r3, #3
 800b01c:	e00b      	b.n	800b036 <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b024:	2b04      	cmp	r3, #4
 800b026:	d903      	bls.n	800b030 <http_send_headers+0x198>
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800b030:	2302      	movs	r3, #2
 800b032:	e000      	b.n	800b036 <http_send_headers+0x19e>
  }
  return data_to_send;
 800b034:	7f7b      	ldrb	r3, [r7, #29]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
	...

0800b040 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	695b      	ldr	r3, [r3, #20]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d105      	bne.n	800b05e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff fcbc 	bl	800a9d2 <http_eof>
    return 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	e016      	b.n	800b08c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff fb56 	bl	800a714 <fs_bytes_left>
 800b068:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dc05      	bgt.n	800b07c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff fcad 	bl	800a9d2 <http_eof>
    return 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	e007      	b.n	800b08c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800b07c:	4b05      	ldr	r3, [pc, #20]	; (800b094 <http_check_eof+0x54>)
 800b07e:	f240 429d 	movw	r2, #1181	; 0x49d
 800b082:	4905      	ldr	r1, [pc, #20]	; (800b098 <http_check_eof+0x58>)
 800b084:	4805      	ldr	r0, [pc, #20]	; (800b09c <http_check_eof+0x5c>)
 800b086:	f00b ff61 	bl	8016f4c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800b08a:	2301      	movs	r3, #1
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	08019550 	.word	0x08019550
 800b098:	08019648 	.word	0x08019648
 800b09c:	08019598 	.word	0x08019598

0800b0a0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d803      	bhi.n	800b0c2 <http_send_data_nonssi+0x22>
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	e001      	b.n	800b0c6 <http_send_data_nonssi+0x26>
 800b0c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0c6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	6999      	ldr	r1, [r3, #24]
 800b0cc:	f107 020c 	add.w	r2, r7, #12
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff fbb2 	bl	800a83c <http_write>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800b0dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10d      	bne.n	800b100 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	89ba      	ldrh	r2, [r7, #12]
 800b0ee:	441a      	add	r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	89ba      	ldrh	r2, [r7, #12]
 800b0fa:	1a9a      	subs	r2, r3, r2
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800b100:	7bfb      	ldrb	r3, [r7, #15]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b122:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <http_send_data_ssi+0x2c>
 800b12a:	4b89      	ldr	r3, [pc, #548]	; (800b350 <http_send_data_ssi+0x244>)
 800b12c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b130:	4988      	ldr	r1, [pc, #544]	; (800b354 <http_send_data_ssi+0x248>)
 800b132:	4889      	ldr	r0, [pc, #548]	; (800b358 <http_send_data_ssi+0x24c>)
 800b134:	f00b ff0a 	bl	8016f4c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b13e:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	429a      	cmp	r2, r3
 800b14a:	f240 82c5 	bls.w	800b6d8 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	699b      	ldr	r3, [r3, #24]
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b15c:	4293      	cmp	r3, r2
 800b15e:	dc06      	bgt.n	800b16e <http_send_data_ssi+0x62>
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	e001      	b.n	800b172 <http_send_data_ssi+0x66>
 800b16e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b172:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	6999      	ldr	r1, [r3, #24]
 800b178:	f107 020e 	add.w	r2, r7, #14
 800b17c:	2300      	movs	r3, #0
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff fb5c 	bl	800a83c <http_write>
 800b184:	4603      	mov	r3, r0
 800b186:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b188:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10d      	bne.n	800b1ac <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800b190:	2301      	movs	r3, #1
 800b192:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	89fa      	ldrh	r2, [r7, #14]
 800b19a:	441a      	add	r2, r3
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a4:	89fa      	ldrh	r2, [r7, #14]
 800b1a6:	1a9a      	subs	r2, r3, r2
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f040 8290 	bne.w	800b6d8 <http_send_data_ssi+0x5cc>
      return data_to_send;
 800b1b8:	7dbb      	ldrb	r3, [r7, #22]
 800b1ba:	e2d6      	b.n	800b76a <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800b1bc:	89fb      	ldrh	r3, [r7, #14]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <http_send_data_ssi+0xba>
      return data_to_send;
 800b1c2:	7dbb      	ldrb	r3, [r7, #22]
 800b1c4:	e2d1      	b.n	800b76a <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	f200 8282 	bhi.w	800b6d6 <http_send_data_ssi+0x5ca>
 800b1d2:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <http_send_data_ssi+0xcc>)
 800b1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d8:	0800b1ed 	.word	0x0800b1ed
 800b1dc:	0800b247 	.word	0x0800b247
 800b1e0:	0800b2b9 	.word	0x0800b2b9
 800b1e4:	0800b401 	.word	0x0800b401
 800b1e8:	0800b577 	.word	0x0800b577
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	757b      	strb	r3, [r7, #21]
 800b1f0:	e01b      	b.n	800b22a <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	781a      	ldrb	r2, [r3, #0]
 800b1f8:	7d7b      	ldrb	r3, [r7, #21]
 800b1fa:	4958      	ldr	r1, [pc, #352]	; (800b35c <http_send_data_ssi+0x250>)
 800b1fc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	d10e      	bne.n	800b224 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	7d7a      	ldrb	r2, [r7, #21]
 800b20a:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            ssi->tag_index = 1;
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	2201      	movs	r2, #1
 800b218:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800b222:	e005      	b.n	800b230 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b224:	7d7b      	ldrb	r3, [r7, #21]
 800b226:	3301      	adds	r3, #1
 800b228:	757b      	strb	r3, [r7, #21]
 800b22a:	7d7b      	ldrb	r3, [r7, #21]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d9e0      	bls.n	800b1f2 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	1e5a      	subs	r2, r3, #1
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	1c5a      	adds	r2, r3, #1
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	601a      	str	r2, [r3, #0]
        break;
 800b244:	e248      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	7d9b      	ldrb	r3, [r3, #22]
 800b24a:	461a      	mov	r2, r3
 800b24c:	4b43      	ldr	r3, [pc, #268]	; (800b35c <http_send_data_ssi+0x250>)
 800b24e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	8a12      	ldrh	r2, [r2, #16]
 800b256:	4413      	add	r3, r2
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d107      	bne.n	800b26e <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2200      	movs	r2, #0
 800b262:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	2202      	movs	r2, #2
 800b268:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800b26c:	e234      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	781a      	ldrb	r2, [r3, #0]
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	7d9b      	ldrb	r3, [r3, #22]
 800b278:	4619      	mov	r1, r3
 800b27a:	4b38      	ldr	r3, [pc, #224]	; (800b35c <http_send_data_ssi+0x250>)
 800b27c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800b280:	6939      	ldr	r1, [r7, #16]
 800b282:	8a09      	ldrh	r1, [r1, #16]
 800b284:	440b      	add	r3, r1
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d106      	bne.n	800b29a <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	8a1b      	ldrh	r3, [r3, #16]
 800b290:	3301      	adds	r3, #1
 800b292:	b29a      	uxth	r2, r3
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	821a      	strh	r2, [r3, #16]
 800b298:	e003      	b.n	800b2a2 <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	1e5a      	subs	r2, r3, #1
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	601a      	str	r2, [r3, #0]
        }
        break;
 800b2b6:	e20f      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	8a1b      	ldrh	r3, [r3, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d11e      	bne.n	800b2fe <http_send_data_ssi+0x1f2>
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	2b20      	cmp	r3, #32
 800b2c8:	d00e      	beq.n	800b2e8 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b2d0:	2b09      	cmp	r3, #9
 800b2d2:	d009      	beq.n	800b2e8 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	2b0a      	cmp	r3, #10
 800b2dc:	d004      	beq.n	800b2e8 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b2e4:	2b0d      	cmp	r3, #13
 800b2e6:	d10a      	bne.n	800b2fe <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	1e5a      	subs	r2, r3, #1
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	601a      	str	r2, [r3, #0]
          break;
 800b2fc:	e1ec      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	781a      	ldrb	r2, [r3, #0]
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	7d9b      	ldrb	r3, [r3, #22]
 800b308:	4914      	ldr	r1, [pc, #80]	; (800b35c <http_send_data_ssi+0x250>)
 800b30a:	00db      	lsls	r3, r3, #3
 800b30c:	440b      	add	r3, r1
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	d013      	beq.n	800b33e <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b31c:	2b20      	cmp	r3, #32
 800b31e:	d00e      	beq.n	800b33e <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	2b09      	cmp	r3, #9
 800b328:	d009      	beq.n	800b33e <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b330:	2b0a      	cmp	r3, #10
 800b332:	d004      	beq.n	800b33e <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2b0d      	cmp	r3, #13
 800b33c:	d13f      	bne.n	800b3be <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	8a1b      	ldrh	r3, [r3, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10c      	bne.n	800b360 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
          if (ssi->tag_index == 0) {
 800b34e:	e04c      	b.n	800b3ea <http_send_data_ssi+0x2de>
 800b350:	08019550 	.word	0x08019550
 800b354:	080195cc 	.word	0x080195cc
 800b358:	08019598 	.word	0x08019598
 800b35c:	0801e9f4 	.word	0x0801e9f4
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2203      	movs	r2, #3
 800b364:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	8a1b      	ldrh	r3, [r3, #16]
 800b36c:	2bff      	cmp	r3, #255	; 0xff
 800b36e:	d906      	bls.n	800b37e <http_send_data_ssi+0x272>
 800b370:	4b92      	ldr	r3, [pc, #584]	; (800b5bc <http_send_data_ssi+0x4b0>)
 800b372:	f240 523a 	movw	r2, #1338	; 0x53a
 800b376:	4992      	ldr	r1, [pc, #584]	; (800b5c0 <http_send_data_ssi+0x4b4>)
 800b378:	4892      	ldr	r0, [pc, #584]	; (800b5c4 <http_send_data_ssi+0x4b8>)
 800b37a:	f00b fde7 	bl	8016f4c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	8a1b      	ldrh	r3, [r3, #16]
 800b382:	b2da      	uxtb	r2, r3
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	8a1b      	ldrh	r3, [r3, #16]
 800b38c:	461a      	mov	r2, r3
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	4413      	add	r3, r2
 800b392:	2200      	movs	r2, #0
 800b394:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	781a      	ldrb	r2, [r3, #0]
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	7d9b      	ldrb	r3, [r3, #22]
 800b3a0:	4989      	ldr	r1, [pc, #548]	; (800b5c8 <http_send_data_ssi+0x4bc>)
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	440b      	add	r3, r1
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d103      	bne.n	800b3b6 <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800b3b4:	e019      	b.n	800b3ea <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800b3bc:	e015      	b.n	800b3ea <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	8a1b      	ldrh	r3, [r3, #16]
 800b3c2:	2b0f      	cmp	r3, #15
 800b3c4:	d80d      	bhi.n	800b3e2 <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	8a1b      	ldrh	r3, [r3, #16]
 800b3ce:	1c59      	adds	r1, r3, #1
 800b3d0:	b288      	uxth	r0, r1
 800b3d2:	6939      	ldr	r1, [r7, #16]
 800b3d4:	8208      	strh	r0, [r1, #16]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	7812      	ldrb	r2, [r2, #0]
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	440b      	add	r3, r1
 800b3de:	761a      	strb	r2, [r3, #24]
 800b3e0:	e003      	b.n	800b3ea <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	1e5a      	subs	r2, r3, #1
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	601a      	str	r2, [r3, #0]

        break;
 800b3fe:	e16b      	b.n	800b6d8 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	8a1b      	ldrh	r3, [r3, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d11e      	bne.n	800b446 <http_send_data_ssi+0x33a>
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	2b20      	cmp	r3, #32
 800b410:	d00e      	beq.n	800b430 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b418:	2b09      	cmp	r3, #9
 800b41a:	d009      	beq.n	800b430 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	2b0a      	cmp	r3, #10
 800b424:	d004      	beq.n	800b430 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b42c:	2b0d      	cmp	r3, #13
 800b42e:	d10a      	bne.n	800b446 <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	1e5a      	subs	r2, r3, #1
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	601a      	str	r2, [r3, #0]
          break;
 800b444:	e148      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	781a      	ldrb	r2, [r3, #0]
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	7d9b      	ldrb	r3, [r3, #22]
 800b450:	495d      	ldr	r1, [pc, #372]	; (800b5c8 <http_send_data_ssi+0x4bc>)
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	440b      	add	r3, r1
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	6939      	ldr	r1, [r7, #16]
 800b45a:	8a09      	ldrh	r1, [r1, #16]
 800b45c:	440b      	add	r3, r1
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d179      	bne.n	800b558 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	1e5a      	subs	r2, r3, #1
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	8a1b      	ldrh	r3, [r3, #16]
 800b47c:	3301      	adds	r3, #1
 800b47e:	b29a      	uxth	r2, r3
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	7d9b      	ldrb	r3, [r3, #22]
 800b488:	4a4f      	ldr	r2, [pc, #316]	; (800b5c8 <http_send_data_ssi+0x4bc>)
 800b48a:	00db      	lsls	r3, r3, #3
 800b48c:	4413      	add	r3, r2
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	8a12      	ldrh	r2, [r2, #16]
 800b494:	4413      	add	r3, r2
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f040 811d 	bne.w	800b6d8 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800b4a4:	6838      	ldr	r0, [r7, #0]
 800b4a6:	f7ff faff 	bl	800aaa8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	2204      	movs	r2, #4
 800b4b4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            ssi->tag_end = ssi->parsed;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	689a      	ldr	r2, [r3, #8]
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	f240 8101 	bls.w	800b6d8 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	dc06      	bgt.n	800b4f6 <http_send_data_ssi+0x3ea>
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	e001      	b.n	800b4fa <http_send_data_ssi+0x3ee>
 800b4f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4fa:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	6999      	ldr	r1, [r3, #24]
 800b500:	f107 020e 	add.w	r2, r7, #14
 800b504:	2300      	movs	r3, #0
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff f998 	bl	800a83c <http_write>
 800b50c:	4603      	mov	r3, r0
 800b50e:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800b510:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b514:	2b00      	cmp	r3, #0
 800b516:	f040 80df 	bne.w	800b6d8 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 800b51a:	2301      	movs	r3, #1
 800b51c:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	429a      	cmp	r2, r3
 800b528:	d809      	bhi.n	800b53e <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	689a      	ldr	r2, [r3, #8]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	b29a      	uxth	r2, r3
 800b536:	89fb      	ldrh	r3, [r7, #14]
 800b538:	4413      	add	r3, r2
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	89fa      	ldrh	r2, [r7, #14]
 800b544:	441a      	add	r2, r3
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	89fa      	ldrh	r2, [r7, #14]
 800b550:	1a9a      	subs	r2, r3, r2
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	625a      	str	r2, [r3, #36]	; 0x24
 800b556:	e0bf      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	1e5a      	subs	r2, r3, #1
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        }
        break;
 800b574:	e0b0      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	689a      	ldr	r2, [r3, #8]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d95c      	bls.n	800b63c <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d206      	bcs.n	800b59c <http_send_data_ssi+0x490>
 800b58e:	4b0b      	ldr	r3, [pc, #44]	; (800b5bc <http_send_data_ssi+0x4b0>)
 800b590:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800b594:	490d      	ldr	r1, [pc, #52]	; (800b5cc <http_send_data_ssi+0x4c0>)
 800b596:	480b      	ldr	r0, [pc, #44]	; (800b5c4 <http_send_data_ssi+0x4b8>)
 800b598:	f00b fcd8 	bl	8016f4c <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	dc10      	bgt.n	800b5d0 <http_send_data_ssi+0x4c4>
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	e00b      	b.n	800b5d4 <http_send_data_ssi+0x4c8>
 800b5bc:	08019550 	.word	0x08019550
 800b5c0:	08019680 	.word	0x08019680
 800b5c4:	08019598 	.word	0x08019598
 800b5c8:	0801e9f4 	.word	0x0801e9f4
 800b5cc:	08019698 	.word	0x08019698
 800b5d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5d4:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800b5d6:	89fb      	ldrh	r3, [r7, #14]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00a      	beq.n	800b5f2 <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	6999      	ldr	r1, [r3, #24]
 800b5e0:	f107 020e 	add.w	r2, r7, #14
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7ff f928 	bl	800a83c <http_write>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	75fb      	strb	r3, [r7, #23]
 800b5f0:	e001      	b.n	800b5f6 <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800b5f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d16c      	bne.n	800b6d8 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 800b5fe:	2301      	movs	r3, #1
 800b600:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	699b      	ldr	r3, [r3, #24]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d809      	bhi.n	800b622 <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	689a      	ldr	r2, [r3, #8]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	b29a      	uxth	r2, r3
 800b61a:	89fb      	ldrh	r3, [r7, #14]
 800b61c:	4413      	add	r3, r2
 800b61e:	b29b      	uxth	r3, r3
 800b620:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	89fa      	ldrh	r2, [r7, #14]
 800b628:	441a      	add	r2, r3
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	89fa      	ldrh	r2, [r7, #14]
 800b634:	1a9a      	subs	r2, r3, r2
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	625a      	str	r2, [r3, #36]	; 0x24
 800b63a:	e04d      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	8a1a      	ldrh	r2, [r3, #16]
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	8a5b      	ldrh	r3, [r3, #18]
 800b644:	429a      	cmp	r2, r3
 800b646:	d30b      	bcc.n	800b660 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	8a9b      	ldrh	r3, [r3, #20]
 800b64c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b650:	4293      	cmp	r3, r2
 800b652:	d005      	beq.n	800b660 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	2200      	movs	r2, #0
 800b658:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 800b65a:	6838      	ldr	r0, [r7, #0]
 800b65c:	f7ff fa24 	bl	800aaa8 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	8a1a      	ldrh	r2, [r3, #16]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	8a5b      	ldrh	r3, [r3, #18]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d222      	bcs.n	800b6b2 <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	8a5a      	ldrh	r2, [r3, #18]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	8a1b      	ldrh	r3, [r3, #16]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	b29b      	uxth	r3, r3
 800b678:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	8a1b      	ldrh	r3, [r3, #16]
 800b67e:	3328      	adds	r3, #40	; 0x28
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	4413      	add	r3, r2
 800b684:	1c59      	adds	r1, r3, #1
 800b686:	f107 020e 	add.w	r2, r7, #14
 800b68a:	2301      	movs	r3, #1
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff f8d5 	bl	800a83c <http_write>
 800b692:	4603      	mov	r3, r0
 800b694:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800b696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d11c      	bne.n	800b6d8 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	8a1a      	ldrh	r2, [r3, #16]
 800b6a6:	89fb      	ldrh	r3, [r7, #14]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	821a      	strh	r2, [r3, #16]
 800b6b0:	e012      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	8a9b      	ldrh	r3, [r3, #20]
 800b6b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d10c      	bne.n	800b6d8 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	689a      	ldr	r2, [r3, #8]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800b6d4:	e000      	b.n	800b6d8 <http_send_data_ssi+0x5cc>
        default:
          break;
 800b6d6:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	d003      	beq.n	800b6ea <http_send_data_ssi+0x5de>
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d004      	beq.n	800b6f4 <http_send_data_ssi+0x5e8>
 800b6ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f43f ad64 	beq.w	800b1bc <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d034      	beq.n	800b768 <http_send_data_ssi+0x65c>
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	429a      	cmp	r2, r3
 800b708:	d92e      	bls.n	800b768 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b718:	4293      	cmp	r3, r2
 800b71a:	dc06      	bgt.n	800b72a <http_send_data_ssi+0x61e>
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	b29b      	uxth	r3, r3
 800b728:	e001      	b.n	800b72e <http_send_data_ssi+0x622>
 800b72a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b72e:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	6999      	ldr	r1, [r3, #24]
 800b734:	f107 020e 	add.w	r2, r7, #14
 800b738:	2300      	movs	r3, #0
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7ff f87e 	bl	800a83c <http_write>
 800b740:	4603      	mov	r3, r0
 800b742:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10d      	bne.n	800b768 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 800b74c:	2301      	movs	r3, #1
 800b74e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	699b      	ldr	r3, [r3, #24]
 800b754:	89fa      	ldrh	r2, [r7, #14]
 800b756:	441a      	add	r2, r3
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b760:	89fa      	ldrh	r2, [r7, #14]
 800b762:	1a9a      	subs	r2, r3, r2
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800b768:	7dbb      	ldrb	r3, [r7, #22]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop

0800b774 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <http_send+0x18>
    return 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	e048      	b.n	800b81e <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b792:	2b04      	cmp	r3, #4
 800b794:	d812      	bhi.n	800b7bc <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff fb7d 	bl	800ae98 <http_send_headers>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d007      	beq.n	800b7b8 <http_send+0x44>
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d006      	beq.n	800b7bc <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800b7b4:	2b04      	cmp	r3, #4
 800b7b6:	d801      	bhi.n	800b7bc <http_send+0x48>
      return data_to_send;
 800b7b8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ba:	e030      	b.n	800b81e <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d108      	bne.n	800b7d6 <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff fc3a 	bl	800b040 <http_check_eof>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <http_send+0x62>
      return 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e023      	b.n	800b81e <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d006      	beq.n	800b7ec <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff fc93 	bl	800b10c <http_send_data_ssi>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	73fb      	strb	r3, [r7, #15]
 800b7ea:	e005      	b.n	800b7f8 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800b7ec:	6839      	ldr	r1, [r7, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7ff fc56 	bl	800b0a0 <http_send_data_nonssi>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10d      	bne.n	800b81c <http_send+0xa8>
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	695b      	ldr	r3, [r3, #20]
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe ff85 	bl	800a714 <fs_bytes_left>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	dc05      	bgt.n	800b81c <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff f8dd 	bl	800a9d2 <http_eof>
    return 0;
 800b818:	2300      	movs	r3, #0
 800b81a:	e000      	b.n	800b81e <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	4a1c      	ldr	r2, [pc, #112]	; (800b8a8 <http_get_404_file+0x80>)
 800b836:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4619      	mov	r1, r3
 800b840:	4610      	mov	r0, r2
 800b842:	f7fe ff1f 	bl	800a684 <fs_open>
 800b846:	4603      	mov	r3, r0
 800b848:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b84a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d024      	beq.n	800b89c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	4a15      	ldr	r2, [pc, #84]	; (800b8ac <http_get_404_file+0x84>)
 800b856:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4619      	mov	r1, r3
 800b860:	4610      	mov	r0, r2
 800b862:	f7fe ff0f 	bl	800a684 <fs_open>
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d014      	beq.n	800b89c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	4a0e      	ldr	r2, [pc, #56]	; (800b8b0 <http_get_404_file+0x88>)
 800b876:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4619      	mov	r1, r3
 800b880:	4610      	mov	r0, r2
 800b882:	f7fe feff 	bl	800a684 <fs_open>
 800b886:	4603      	mov	r3, r0
 800b888:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d004      	beq.n	800b89c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]
        return NULL;
 800b898:	2300      	movs	r3, #0
 800b89a:	e000      	b.n	800b89e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b89c:	687b      	ldr	r3, [r7, #4]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	080196b0 	.word	0x080196b0
 800b8ac:	080196bc 	.word	0x080196bc
 800b8b0:	080196c8 	.word	0x080196c8

0800b8b4 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800b8bc:	4b08      	ldr	r3, [pc, #32]	; (800b8e0 <http_handle_post_finished+0x2c>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800b8c2:	223f      	movs	r2, #63	; 0x3f
 800b8c4:	4906      	ldr	r1, [pc, #24]	; (800b8e0 <http_handle_post_finished+0x2c>)
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7f5 f91e 	bl	8000b08 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4904      	ldr	r1, [pc, #16]	; (800b8e0 <http_handle_post_finished+0x2c>)
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 faab 	bl	800be2c <http_find_file>
 800b8d6:	4603      	mov	r3, r0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	2000161c 	.word	0x2000161c

0800b8e4 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d014      	beq.n	800b91e <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	8912      	ldrh	r2, [r2, #8]
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d204      	bcs.n	800b90c <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b90a:	e008      	b.n	800b91e <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	8912      	ldrh	r2, [r2, #8]
 800b916:	1a9a      	subs	r2, r3, r2
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d006      	beq.n	800b932 <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7f5 f8ae 	bl	8000a88 <httpd_post_receive_data>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]
 800b930:	e001      	b.n	800b936 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800b936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d104      	bne.n	800b95a <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff ffaf 	bl	800b8b4 <http_handle_post_finished>
 800b956:	4603      	mov	r3, r0
 800b958:	e000      	b.n	800b95c <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b092      	sub	sp, #72	; 0x48
 800b968:	af04      	add	r7, sp, #16
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
 800b970:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800b972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b974:	1c58      	adds	r0, r3, #1
 800b976:	887a      	ldrh	r2, [r7, #2]
 800b978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b97a:	1c59      	adds	r1, r3, #1
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	1acb      	subs	r3, r1, r3
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	461a      	mov	r2, r3
 800b984:	4965      	ldr	r1, [pc, #404]	; (800bb1c <http_post_request+0x1b8>)
 800b986:	f000 fe6f 	bl	800c668 <lwip_strnstr>
 800b98a:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 80be 	beq.w	800bb10 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800b994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b996:	1c58      	adds	r0, r3, #1
 800b998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b99a:	3301      	adds	r3, #1
 800b99c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	495f      	ldr	r1, [pc, #380]	; (800bb20 <http_post_request+0x1bc>)
 800b9a4:	f000 fe60 	bl	800c668 <lwip_strnstr>
 800b9a8:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80ac 	beq.w	800bb0a <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	3310      	adds	r3, #16
 800b9b6:	220a      	movs	r2, #10
 800b9b8:	495a      	ldr	r1, [pc, #360]	; (800bb24 <http_post_request+0x1c0>)
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 fe54 	bl	800c668 <lwip_strnstr>
 800b9c0:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 80a0 	beq.w	800bb0a <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	3310      	adds	r3, #16
 800b9ce:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800b9d0:	69f8      	ldr	r0, [r7, #28]
 800b9d2:	f00b fa55 	bl	8016e80 <atoi>
 800b9d6:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800b9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10b      	bne.n	800b9f6 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b30      	cmp	r3, #48	; 0x30
 800b9e4:	d104      	bne.n	800b9f0 <http_post_request+0x8c>
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2b0d      	cmp	r3, #13
 800b9ee:	d002      	beq.n	800b9f6 <http_post_request+0x92>
            content_len = -1;
 800b9f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9f4:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800b9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f2c0 8083 	blt.w	800bb04 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800b9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba00:	3301      	adds	r3, #1
 800ba02:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800ba04:	887a      	ldrh	r2, [r7, #2]
 800ba06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba08:	1d19      	adds	r1, r3, #4
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	1acb      	subs	r3, r1, r3
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	db05      	blt.n	800ba1e <http_post_request+0xba>
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	1d1a      	adds	r2, r3, #4
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	e000      	b.n	800ba20 <http_post_request+0xbc>
 800ba1e:	887b      	ldrh	r3, [r7, #2]
 800ba20:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800ba22:	887a      	ldrh	r2, [r7, #2]
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba26:	1d19      	adds	r1, r3, #4
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	1acb      	subs	r3, r1, r3
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	db05      	blt.n	800ba3c <http_post_request+0xd8>
 800ba30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba32:	1d1a      	adds	r2, r3, #4
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	e000      	b.n	800ba3e <http_post_request+0xda>
 800ba3c:	887b      	ldrh	r3, [r7, #2]
 800ba3e:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800ba40:	2301      	movs	r3, #1
 800ba42:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800ba44:	4b38      	ldr	r3, [pc, #224]	; (800bb28 <http_post_request+0x1c4>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800ba4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800ba50:	8aba      	ldrh	r2, [r7, #20]
 800ba52:	f107 0312 	add.w	r3, r7, #18
 800ba56:	9303      	str	r3, [sp, #12]
 800ba58:	233f      	movs	r3, #63	; 0x3f
 800ba5a:	9302      	str	r3, [sp, #8]
 800ba5c:	4b32      	ldr	r3, [pc, #200]	; (800bb28 <http_post_request+0x1c4>)
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	4613      	mov	r3, r2
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba6a:	68b8      	ldr	r0, [r7, #8]
 800ba6c:	f7f4 ffdc 	bl	8000a28 <httpd_post_begin>
 800ba70:	4603      	mov	r3, r0
 800ba72:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800ba74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d13c      	bne.n	800baf6 <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800ba80:	8afb      	ldrh	r3, [r7, #22]
 800ba82:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800ba84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800ba8c:	e007      	b.n	800ba9e <http_post_request+0x13a>
              start_offset -= q->len;
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	895b      	ldrh	r3, [r3, #10]
 800ba92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d004      	beq.n	800baae <http_post_request+0x14a>
 800baa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa6:	895b      	ldrh	r3, [r3, #10]
 800baa8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800baaa:	429a      	cmp	r2, r3
 800baac:	d2ef      	bcs.n	800ba8e <http_post_request+0x12a>
            }
            if (q != NULL) {
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00d      	beq.n	800bad0 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800bab4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bab6:	4619      	mov	r1, r3
 800bab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baba:	f002 f8b3 	bl	800dc24 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800babe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bac0:	f002 f9d6 	bl	800de70 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800bac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bac6:	68b8      	ldr	r0, [r7, #8]
 800bac8:	f7ff ff0c 	bl	800b8e4 <http_post_rxpbuf>
 800bacc:	4603      	mov	r3, r0
 800bace:	e021      	b.n	800bb14 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10b      	bne.n	800baf2 <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800bada:	2241      	movs	r2, #65	; 0x41
 800badc:	2100      	movs	r1, #0
 800bade:	2000      	movs	r0, #0
 800bae0:	f001 fe42 	bl	800d768 <pbuf_alloc>
 800bae4:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800bae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bae8:	68b8      	ldr	r0, [r7, #8]
 800baea:	f7ff fefb 	bl	800b8e4 <http_post_rxpbuf>
 800baee:	4603      	mov	r3, r0
 800baf0:	e010      	b.n	800bb14 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	e00e      	b.n	800bb14 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800baf6:	2200      	movs	r2, #0
 800baf8:	490b      	ldr	r1, [pc, #44]	; (800bb28 <http_post_request+0x1c4>)
 800bafa:	68b8      	ldr	r0, [r7, #8]
 800bafc:	f000 f996 	bl	800be2c <http_find_file>
 800bb00:	4603      	mov	r3, r0
 800bb02:	e007      	b.n	800bb14 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800bb04:	f06f 030f 	mvn.w	r3, #15
 800bb08:	e004      	b.n	800bb14 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800bb0a:	f06f 030f 	mvn.w	r3, #15
 800bb0e:	e001      	b.n	800bb14 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800bb10:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3738      	adds	r7, #56	; 0x38
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	080196d4 	.word	0x080196d4
 800bb20:	08019160 	.word	0x08019160
 800bb24:	08019644 	.word	0x08019644
 800bb28:	2000161c 	.word	0x2000161c

0800bb2c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b092      	sub	sp, #72	; 0x48
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d106      	bne.n	800bb50 <http_parse_request+0x24>
 800bb42:	4b87      	ldr	r3, [pc, #540]	; (800bd60 <http_parse_request+0x234>)
 800bb44:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800bb48:	4986      	ldr	r1, [pc, #536]	; (800bd64 <http_parse_request+0x238>)
 800bb4a:	4887      	ldr	r0, [pc, #540]	; (800bd68 <http_parse_request+0x23c>)
 800bb4c:	f00b f9fe 	bl	8016f4c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <http_parse_request+0x38>
 800bb56:	4b82      	ldr	r3, [pc, #520]	; (800bd60 <http_parse_request+0x234>)
 800bb58:	f240 72af 	movw	r2, #1967	; 0x7af
 800bb5c:	4983      	ldr	r1, [pc, #524]	; (800bd6c <http_parse_request+0x240>)
 800bb5e:	4882      	ldr	r0, [pc, #520]	; (800bd68 <http_parse_request+0x23c>)
 800bb60:	f00b f9f4 	bl	8016f4c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d103      	bne.n	800bb74 <http_parse_request+0x48>
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800bb74:	f06f 0307 	mvn.w	r3, #7
 800bb78:	e0ed      	b.n	800bd56 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	6a1b      	ldr	r3, [r3, #32]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d103      	bne.n	800bb8a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb86:	621a      	str	r2, [r3, #32]
 800bb88:	e005      	b.n	800bb96 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb90:	4618      	mov	r0, r3
 800bb92:	f002 f98f 	bl	800deb4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800bb96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb98:	f002 f96a 	bl	800de70 <pbuf_ref>

  if (hs->req->next != NULL) {
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	6a1b      	ldr	r3, [r3, #32]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d012      	beq.n	800bbcc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	891b      	ldrh	r3, [r3, #8]
 800bbac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	bf28      	it	cs
 800bbb4:	4613      	movcs	r3, r2
 800bbb6:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	6a18      	ldr	r0, [r3, #32]
 800bbbc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	496b      	ldr	r1, [pc, #428]	; (800bd70 <http_parse_request+0x244>)
 800bbc2:	f002 fa9f 	bl	800e104 <pbuf_copy_partial>
    data = httpd_req_buf;
 800bbc6:	4b6a      	ldr	r3, [pc, #424]	; (800bd70 <http_parse_request+0x244>)
 800bbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbca:	e005      	b.n	800bbd8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	895b      	ldrh	r3, [r3, #10]
 800bbd6:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800bbd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bbda:	2b06      	cmp	r3, #6
 800bbdc:	f240 80a1 	bls.w	800bd22 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800bbe0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	4963      	ldr	r1, [pc, #396]	; (800bd74 <http_parse_request+0x248>)
 800bbe6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbe8:	f000 fd3e 	bl	800c668 <lwip_strnstr>
 800bbec:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800bbee:	6a3b      	ldr	r3, [r7, #32]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 8096 	beq.w	800bd22 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800bbfe:	2204      	movs	r2, #4
 800bc00:	495d      	ldr	r1, [pc, #372]	; (800bd78 <http_parse_request+0x24c>)
 800bc02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc04:	f00b fae8 	bl	80171d8 <strncmp>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d103      	bne.n	800bc16 <http_parse_request+0xea>
        sp1 = data + 3;
 800bc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc10:	3303      	adds	r3, #3
 800bc12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc14:	e014      	b.n	800bc40 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800bc16:	2205      	movs	r2, #5
 800bc18:	4958      	ldr	r1, [pc, #352]	; (800bd7c <http_parse_request+0x250>)
 800bc1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc1c:	f00b fadc 	bl	80171d8 <strncmp>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d105      	bne.n	800bc32 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800bc26:	2301      	movs	r3, #1
 800bc28:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800bc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2c:	3304      	adds	r3, #4
 800bc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc30:	e006      	b.n	800bc40 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800bc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc34:	3304      	adds	r3, #4
 800bc36:	2200      	movs	r2, #0
 800bc38:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800bc3a:	f06f 030f 	mvn.w	r3, #15
 800bc3e:	e08a      	b.n	800bd56 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800bc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc42:	1c5a      	adds	r2, r3, #1
 800bc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800bc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc52:	3301      	adds	r3, #1
 800bc54:	8bfa      	ldrh	r2, [r7, #30]
 800bc56:	494a      	ldr	r1, [pc, #296]	; (800bd80 <http_parse_request+0x254>)
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f000 fd05 	bl	800c668 <lwip_strnstr>
 800bc5e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10c      	bne.n	800bc80 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800bc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc68:	3301      	adds	r3, #1
 800bc6a:	8bfa      	ldrh	r2, [r7, #30]
 800bc6c:	4941      	ldr	r1, [pc, #260]	; (800bd74 <http_parse_request+0x248>)
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 fcfa 	bl	800c668 <lwip_strnstr>
 800bc74:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800bc76:	2301      	movs	r3, #1
 800bc78:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800bc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d163      	bne.n	800bd48 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	3301      	adds	r3, #1
 800bc84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d048      	beq.n	800bd22 <http_parse_request+0x1f6>
 800bc90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d944      	bls.n	800bd22 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800bc98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	4939      	ldr	r1, [pc, #228]	; (800bd84 <http_parse_request+0x258>)
 800bc9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bca0:	f000 fce2 	bl	800c668 <lwip_strnstr>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d03b      	beq.n	800bd22 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	3301      	adds	r3, #1
 800bcae:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800bcb6:	8bbb      	ldrh	r3, [r7, #28]
 800bcb8:	69ba      	ldr	r2, [r7, #24]
 800bcba:	4413      	add	r3, r2
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800bcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d026      	beq.n	800bd14 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800bccc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	9301      	str	r3, [sp, #4]
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	6978      	ldr	r0, [r7, #20]
 800bcde:	f7ff fe41 	bl	800b964 <http_post_request>
 800bce2:	4603      	mov	r3, r0
 800bce4:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800bce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00a      	beq.n	800bd04 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800bcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	2220      	movs	r2, #32
 800bcf8:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800bcfa:	8bbb      	ldrh	r3, [r7, #28]
 800bcfc:	69ba      	ldr	r2, [r7, #24]
 800bcfe:	4413      	add	r3, r2
 800bd00:	2220      	movs	r2, #32
 800bd02:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800bd04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd08:	f113 0f10 	cmn.w	r3, #16
 800bd0c:	d01e      	beq.n	800bd4c <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800bd0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd12:	e020      	b.n	800bd56 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800bd14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd16:	69b9      	ldr	r1, [r7, #24]
 800bd18:	68b8      	ldr	r0, [r7, #8]
 800bd1a:	f000 f887 	bl	800be2c <http_find_file>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	e019      	b.n	800bd56 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f002 f88a 	bl	800de40 <pbuf_clen>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	891b      	ldrh	r3, [r3, #8]
 800bd36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd3a:	d209      	bcs.n	800bd50 <http_parse_request+0x224>
 800bd3c:	8a3b      	ldrh	r3, [r7, #16]
 800bd3e:	2b05      	cmp	r3, #5
 800bd40:	d806      	bhi.n	800bd50 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800bd42:	f06f 0304 	mvn.w	r3, #4
 800bd46:	e006      	b.n	800bd56 <http_parse_request+0x22a>
          goto badrequest;
 800bd48:	bf00      	nop
 800bd4a:	e002      	b.n	800bd52 <http_parse_request+0x226>
              goto badrequest;
 800bd4c:	bf00      	nop
 800bd4e:	e000      	b.n	800bd52 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800bd50:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800bd52:	f06f 030f 	mvn.w	r3, #15
  }
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3740      	adds	r7, #64	; 0x40
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	08019550 	.word	0x08019550
 800bd64:	080196dc 	.word	0x080196dc
 800bd68:	08019598 	.word	0x08019598
 800bd6c:	080195c0 	.word	0x080195c0
 800bd70:	2000121c 	.word	0x2000121c
 800bd74:	08019644 	.word	0x08019644
 800bd78:	080196e8 	.word	0x080196e8
 800bd7c:	080196f0 	.word	0x080196f0
 800bd80:	080196f8 	.word	0x080196f8
 800bd84:	080196d4 	.word	0x080196d4

0800bd88 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d040      	beq.n	800be1e <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800bda0:	213f      	movs	r1, #63	; 0x3f
 800bda2:	6838      	ldr	r0, [r7, #0]
 800bda4:	f00b fa03 	bl	80171ae <strchr>
 800bda8:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d002      	beq.n	800bdb6 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	613b      	str	r3, [r7, #16]
    ext = uri;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800bdbe:	212e      	movs	r1, #46	; 0x2e
 800bdc0:	6938      	ldr	r0, [r7, #16]
 800bdc2:	f00b f9f4 	bl	80171ae <strchr>
 800bdc6:	6138      	str	r0, [r7, #16]
 800bdc8:	e009      	b.n	800bdde <http_uri_is_ssi+0x56>
      ext = sub;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	617b      	str	r3, [r7, #20]
      sub++;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800bdd4:	212e      	movs	r1, #46	; 0x2e
 800bdd6:	6938      	ldr	r0, [r7, #16]
 800bdd8:	f00b f9e9 	bl	80171ae <strchr>
 800bddc:	6138      	str	r0, [r7, #16]
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1f2      	bne.n	800bdca <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800bde4:	2300      	movs	r3, #0
 800bde6:	61fb      	str	r3, [r7, #28]
 800bde8:	e010      	b.n	800be0c <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800bdea:	4a0f      	ldr	r2, [pc, #60]	; (800be28 <http_uri_is_ssi+0xa0>)
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6978      	ldr	r0, [r7, #20]
 800bdf6:	f000 fc6d 	bl	800c6d4 <lwip_stricmp>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800be00:	2301      	movs	r3, #1
 800be02:	76fb      	strb	r3, [r7, #27]
        break;
 800be04:	e005      	b.n	800be12 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	3301      	adds	r3, #1
 800be0a:	61fb      	str	r3, [r7, #28]
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	2b04      	cmp	r3, #4
 800be10:	d9eb      	bls.n	800bdea <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <http_uri_is_ssi+0x96>
      *param = '?';
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	223f      	movs	r2, #63	; 0x3f
 800be1c:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800be1e:	7efb      	ldrb	r3, [r7, #27]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3720      	adds	r7, #32
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	0801e9b8 	.word	0x0801e9b8

0800be2c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800be2c:	b590      	push	{r4, r7, lr}
 800be2e:	b093      	sub	sp, #76	; 0x4c
 800be30:	af02      	add	r7, sp, #8
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800be38:	2300      	movs	r3, #0
 800be3a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800be3c:	2300      	movs	r3, #0
 800be3e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f4 f9cb 	bl	80001e4 <strlen>
 800be4e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	2b00      	cmp	r3, #0
 800be54:	d072      	beq.n	800bf3c <http_find_file+0x110>
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	3b01      	subs	r3, #1
 800be5c:	4413      	add	r3, r2
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	2b2f      	cmp	r3, #47	; 0x2f
 800be62:	d16b      	bne.n	800bf3c <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800be64:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800be66:	4a80      	ldr	r2, [pc, #512]	; (800c068 <http_find_file+0x23c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d102      	bne.n	800be72 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d164      	bne.n	800bf3c <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	3b01      	subs	r3, #1
 800be76:	2b3f      	cmp	r3, #63	; 0x3f
 800be78:	bf28      	it	cs
 800be7a:	233f      	movcs	r3, #63	; 0x3f
 800be7c:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800be7e:	6a3b      	ldr	r3, [r7, #32]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00a      	beq.n	800be9a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	6a3a      	ldr	r2, [r7, #32]
 800be88:	4619      	mov	r1, r3
 800be8a:	4877      	ldr	r0, [pc, #476]	; (800c068 <http_find_file+0x23c>)
 800be8c:	f00b f82e 	bl	8016eec <memcpy>
      http_uri_buf[copy_len] = 0;
 800be90:	4a75      	ldr	r2, [pc, #468]	; (800c068 <http_find_file+0x23c>)
 800be92:	6a3b      	ldr	r3, [r7, #32]
 800be94:	4413      	add	r3, r2
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800be9a:	2300      	movs	r3, #0
 800be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be9e:	e04a      	b.n	800bf36 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800bea0:	6a3b      	ldr	r3, [r7, #32]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d028      	beq.n	800bef8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800beac:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d01e      	beq.n	800bef2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800beb4:	4a6d      	ldr	r2, [pc, #436]	; (800c06c <http_find_file+0x240>)
 800beb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7f4 f991 	bl	80001e4 <strlen>
 800bec2:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800bec4:	69ba      	ldr	r2, [r7, #24]
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	4293      	cmp	r3, r2
 800beca:	bf28      	it	cs
 800becc:	4613      	movcs	r3, r2
 800bece:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	4a65      	ldr	r2, [pc, #404]	; (800c068 <http_find_file+0x23c>)
 800bed4:	1898      	adds	r0, r3, r2
 800bed6:	4a65      	ldr	r2, [pc, #404]	; (800c06c <http_find_file+0x240>)
 800bed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beda:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bede:	697a      	ldr	r2, [r7, #20]
 800bee0:	4619      	mov	r1, r3
 800bee2:	f00b f803 	bl	8016eec <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800bee6:	6a3a      	ldr	r2, [r7, #32]
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	4413      	add	r3, r2
 800beec:	4a5e      	ldr	r2, [pc, #376]	; (800c068 <http_find_file+0x23c>)
 800beee:	2100      	movs	r1, #0
 800bef0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800bef2:	4b5d      	ldr	r3, [pc, #372]	; (800c068 <http_find_file+0x23c>)
 800bef4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bef6:	e004      	b.n	800bf02 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800bef8:	4a5c      	ldr	r2, [pc, #368]	; (800c06c <http_find_file+0x240>)
 800befa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf00:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe fbbc 	bl	800a684 <fs_open>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800bf10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10b      	bne.n	800bf30 <http_find_file+0x104>
        uri = file_name;
 800bf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800bf20:	4a52      	ldr	r2, [pc, #328]	; (800c06c <http_find_file+0x240>)
 800bf22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf24:	00db      	lsls	r3, r3, #3
 800bf26:	4413      	add	r3, r2
 800bf28:	791b      	ldrb	r3, [r3, #4]
 800bf2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800bf2e:	e005      	b.n	800bf3c <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bf30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf32:	3301      	adds	r3, #1
 800bf34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf38:	2b04      	cmp	r3, #4
 800bf3a:	d9b1      	bls.n	800bea0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800bf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d176      	bne.n	800c030 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	213f      	movs	r1, #63	; 0x3f
 800bf46:	4618      	mov	r0, r3
 800bf48:	f00b f931 	bl	80171ae <strchr>
 800bf4c:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800bf4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d005      	beq.n	800bf60 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800bf54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf56:	2200      	movs	r2, #0
 800bf58:	701a      	strb	r2, [r3, #0]
      params++;
 800bf5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800bf60:	4b43      	ldr	r3, [pc, #268]	; (800c070 <http_find_file+0x244>)
 800bf62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf66:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800bf68:	4b42      	ldr	r3, [pc, #264]	; (800c074 <http_find_file+0x248>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d034      	beq.n	800bfda <http_find_file+0x1ae>
 800bf70:	4b41      	ldr	r3, [pc, #260]	; (800c078 <http_find_file+0x24c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d030      	beq.n	800bfda <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800bf78:	2300      	movs	r3, #0
 800bf7a:	633b      	str	r3, [r7, #48]	; 0x30
 800bf7c:	e028      	b.n	800bfd0 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800bf7e:	68b8      	ldr	r0, [r7, #8]
 800bf80:	4b3d      	ldr	r3, [pc, #244]	; (800c078 <http_find_file+0x24c>)
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	4413      	add	r3, r2
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	f7f4 f91f 	bl	80001d0 <strcmp>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d118      	bne.n	800bfca <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800bf98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f7fe fd26 	bl	800a9ec <extract_uri_parameters>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	4a33      	ldr	r2, [pc, #204]	; (800c070 <http_find_file+0x244>)
 800bfa4:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800bfa6:	4b34      	ldr	r3, [pc, #208]	; (800c078 <http_find_file+0x24c>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	4413      	add	r3, r2
 800bfb0:	685c      	ldr	r4, [r3, #4]
 800bfb2:	4b2f      	ldr	r3, [pc, #188]	; (800c070 <http_find_file+0x244>)
 800bfb4:	6819      	ldr	r1, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800bfc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc2:	47a0      	blx	r4
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	60bb      	str	r3, [r7, #8]
          break;
 800bfc8:	e007      	b.n	800bfda <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	3301      	adds	r3, #1
 800bfce:	633b      	str	r3, [r7, #48]	; 0x30
 800bfd0:	4b28      	ldr	r3, [pc, #160]	; (800c074 <http_find_file+0x248>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	dbd1      	blt.n	800bf7e <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	4611      	mov	r1, r2
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe fb4f 	bl	800a684 <fs_open>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800bfea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d102      	bne.n	800bff8 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bff6:	e006      	b.n	800c006 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800bff8:	f107 0308 	add.w	r3, r7, #8
 800bffc:	4619      	mov	r1, r3
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f7ff fc12 	bl	800b828 <http_get_404_file>
 800c004:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800c006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d011      	beq.n	800c030 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800c00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00e:	7c1b      	ldrb	r3, [r3, #16]
 800c010:	f003 0308 	and.w	r3, r3, #8
 800c014:	2b00      	cmp	r3, #0
 800c016:	d003      	beq.n	800c020 <http_find_file+0x1f4>
        tag_check = 1;
 800c018:	2301      	movs	r3, #1
 800c01a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c01e:	e007      	b.n	800c030 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	4619      	mov	r1, r3
 800c024:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c026:	f7ff feaf 	bl	800bd88 <http_uri_is_ssi>
 800c02a:	4603      	mov	r3, r0
 800c02c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800c030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c032:	2b00      	cmp	r3, #0
 800c034:	d106      	bne.n	800c044 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800c036:	f107 0308 	add.w	r3, r7, #8
 800c03a:	4619      	mov	r1, r3
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f7ff fbf3 	bl	800b828 <http_get_404_file>
 800c042:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c048:	9301      	str	r3, [sp, #4]
 800c04a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	4613      	mov	r3, r2
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f000 f810 	bl	800c07c <http_init_file>
 800c05c:	4603      	mov	r3, r0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3744      	adds	r7, #68	; 0x44
 800c062:	46bd      	mov	sp, r7
 800c064:	bd90      	pop	{r4, r7, pc}
 800c066:	bf00      	nop
 800c068:	2000161c 	.word	0x2000161c
 800c06c:	0801e9cc 	.word	0x0801e9cc
 800c070:	20001670 	.word	0x20001670
 800c074:	2000166c 	.word	0x2000166c
 800c078:	20001668 	.word	0x20001668

0800c07c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b088      	sub	sp, #32
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d06f      	beq.n	800c170 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d106      	bne.n	800c0a6 <http_init_file+0x2a>
 800c098:	4b46      	ldr	r3, [pc, #280]	; (800c1b4 <http_init_file+0x138>)
 800c09a:	f640 120b 	movw	r2, #2315	; 0x90b
 800c09e:	4946      	ldr	r1, [pc, #280]	; (800c1b8 <http_init_file+0x13c>)
 800c0a0:	4846      	ldr	r0, [pc, #280]	; (800c1bc <http_init_file+0x140>)
 800c0a2:	f00a ff53 	bl	8016f4c <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800c0a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01c      	beq.n	800c0e8 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800c0ae:	f7fe fb40 	bl	800a732 <http_ssi_state_alloc>
 800c0b2:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d016      	beq.n	800c0e8 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        ssi->parsed = file->data;
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	69fa      	ldr	r2, [r7, #28]
 800c0e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	da06      	bge.n	800c10c <http_init_file+0x90>
 800c0fe:	4b2d      	ldr	r3, [pc, #180]	; (800c1b4 <http_init_file+0x138>)
 800c100:	f640 1234 	movw	r2, #2356	; 0x934
 800c104:	492e      	ldr	r1, [pc, #184]	; (800c1c0 <http_init_file+0x144>)
 800c106:	482d      	ldr	r0, [pc, #180]	; (800c1bc <http_init_file+0x140>)
 800c108:	f00a ff20 	bl	8016f4c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	461a      	mov	r2, r3
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d032      	beq.n	800c18a <http_init_file+0x10e>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	7c1b      	ldrb	r3, [r3, #16]
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d02b      	beq.n	800c18a <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6998      	ldr	r0, [r3, #24]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13a:	461a      	mov	r2, r3
 800c13c:	4921      	ldr	r1, [pc, #132]	; (800c1c4 <http_init_file+0x148>)
 800c13e:	f000 fa93 	bl	800c668 <lwip_strnstr>
 800c142:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d01f      	beq.n	800c18a <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	1d1a      	adds	r2, r3, #4
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	699a      	ldr	r2, [r3, #24]
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	441a      	add	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	1ad2      	subs	r2, r2, r3
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	625a      	str	r2, [r3, #36]	; 0x24
 800c16e:	e00c      	b.n	800c18a <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d006      	beq.n	800c1a0 <http_init_file+0x124>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	695b      	ldr	r3, [r3, #20]
 800c196:	7c1b      	ldrb	r3, [r3, #16]
 800c198:	f003 0301 	and.w	r3, r3, #1
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d103      	bne.n	800c1a8 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f7fe fd4c 	bl	800ac40 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3720      	adds	r7, #32
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	08019550 	.word	0x08019550
 800c1b8:	080196fc 	.word	0x080196fc
 800c1bc:	08019598 	.word	0x08019598
 800c1c0:	08019710 	.word	0x08019710
 800c1c4:	080196d4 	.word	0x080196d4

0800c1c8 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d002      	beq.n	800c1e4 <http_err+0x1c>
    http_state_free(hs);
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f7fe fb1a 	bl	800a818 <http_state_free>
  }
}
 800c1e4:	bf00      	nop
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b086      	sub	sp, #24
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d101      	bne.n	800c208 <http_sent+0x1c>
    return ERR_OK;
 800c204:	2300      	movs	r3, #0
 800c206:	e008      	b.n	800c21a <http_sent+0x2e>
  }

  hs->retries = 0;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800c210:	6979      	ldr	r1, [r7, #20]
 800c212:	68b8      	ldr	r0, [r7, #8]
 800c214:	f7ff faae 	bl	800b774 <http_send>

  return ERR_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b084      	sub	sp, #16
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d107      	bne.n	800c246 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800c236:	2100      	movs	r1, #0
 800c238:	6838      	ldr	r0, [r7, #0]
 800c23a:	f7fe fbbb 	bl	800a9b4 <http_close_conn>
 800c23e:	4603      	mov	r3, r0
 800c240:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	e021      	b.n	800c28a <http_poll+0x68>
  } else {
    hs->retries++;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c24c:	3301      	adds	r3, #1
 800c24e:	b2da      	uxtb	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d105      	bne.n	800c26c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800c260:	68f9      	ldr	r1, [r7, #12]
 800c262:	6838      	ldr	r0, [r7, #0]
 800c264:	f7fe fba6 	bl	800a9b4 <http_close_conn>
      return ERR_OK;
 800c268:	2300      	movs	r3, #0
 800c26a:	e00e      	b.n	800c28a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	695b      	ldr	r3, [r3, #20]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d009      	beq.n	800c288 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800c274:	68f9      	ldr	r1, [r7, #12]
 800c276:	6838      	ldr	r0, [r7, #0]
 800c278:	f7ff fa7c 	bl	800b774 <http_send>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d002      	beq.n	800c288 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800c282:	6838      	ldr	r0, [r7, #0]
 800c284:	f007 f8c2 	bl	801340c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
	...

0800c294 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800c2a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d105      	bne.n	800c2ba <http_recv+0x26>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <http_recv+0x26>
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d111      	bne.n	800c2de <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d008      	beq.n	800c2d2 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	891b      	ldrh	r3, [r3, #8]
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	68b8      	ldr	r0, [r7, #8]
 800c2c8:	f002 fc94 	bl	800ebf4 <tcp_recved>
      pbuf_free(p);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f001 fd2f 	bl	800dd30 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800c2d2:	6979      	ldr	r1, [r7, #20]
 800c2d4:	68b8      	ldr	r0, [r7, #8]
 800c2d6:	f7fe fb6d 	bl	800a9b4 <http_close_conn>
    return ERR_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e072      	b.n	800c3c4 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	891b      	ldrh	r3, [r3, #8]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	68b8      	ldr	r0, [r7, #8]
 800c2e6:	f002 fc85 	bl	800ebf4 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d012      	beq.n	800c31a <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800c2fc:	6879      	ldr	r1, [r7, #4]
 800c2fe:	6978      	ldr	r0, [r7, #20]
 800c300:	f7ff faf0 	bl	800b8e4 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d103      	bne.n	800c316 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800c30e:	6979      	ldr	r1, [r7, #20]
 800c310:	68b8      	ldr	r0, [r7, #8]
 800c312:	f7ff fa2f 	bl	800b774 <http_send>
    }
    return ERR_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	e054      	b.n	800c3c4 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d14c      	bne.n	800c3bc <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	6979      	ldr	r1, [r7, #20]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7ff fc00 	bl	800bb2c <http_parse_request>
 800c32c:	4603      	mov	r3, r0
 800c32e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800c330:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d015      	beq.n	800c364 <http_recv+0xd0>
 800c338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c33c:	f113 0f05 	cmn.w	r3, #5
 800c340:	d010      	beq.n	800c364 <http_recv+0xd0>
 800c342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c346:	f113 0f10 	cmn.w	r3, #16
 800c34a:	d00b      	beq.n	800c364 <http_recv+0xd0>
 800c34c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c350:	f113 0f08 	cmn.w	r3, #8
 800c354:	d006      	beq.n	800c364 <http_recv+0xd0>
 800c356:	4b1d      	ldr	r3, [pc, #116]	; (800c3cc <http_recv+0x138>)
 800c358:	f640 2204 	movw	r2, #2564	; 0xa04
 800c35c:	491c      	ldr	r1, [pc, #112]	; (800c3d0 <http_recv+0x13c>)
 800c35e:	481d      	ldr	r0, [pc, #116]	; (800c3d4 <http_recv+0x140>)
 800c360:	f00a fdf4 	bl	8016f4c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800c364:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c368:	f113 0f05 	cmn.w	r3, #5
 800c36c:	d00b      	beq.n	800c386 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d007      	beq.n	800c386 <http_recv+0xf2>
          pbuf_free(hs->req);
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f001 fcd8 	bl	800dd30 <pbuf_free>
          hs->req = NULL;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2200      	movs	r2, #0
 800c384:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f001 fcd2 	bl	800dd30 <pbuf_free>
      if (parsed == ERR_OK) {
 800c38c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d109      	bne.n	800c3a8 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d111      	bne.n	800c3c2 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800c39e:	6979      	ldr	r1, [r7, #20]
 800c3a0:	68b8      	ldr	r0, [r7, #8]
 800c3a2:	f7ff f9e7 	bl	800b774 <http_send>
 800c3a6:	e00c      	b.n	800c3c2 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800c3a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3ac:	f113 0f10 	cmn.w	r3, #16
 800c3b0:	d107      	bne.n	800c3c2 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800c3b2:	6979      	ldr	r1, [r7, #20]
 800c3b4:	68b8      	ldr	r0, [r7, #8]
 800c3b6:	f7fe fafd 	bl	800a9b4 <http_close_conn>
 800c3ba:	e002      	b.n	800c3c2 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f001 fcb7 	bl	800dd30 <pbuf_free>
    }
  }
  return ERR_OK;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	08019550 	.word	0x08019550
 800c3d0:	08019730 	.word	0x08019730
 800c3d4:	08019598 	.word	0x08019598

0800c3d8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800c3e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d102      	bne.n	800c3f4 <http_accept+0x1c>
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d102      	bne.n	800c3fa <http_accept+0x22>
    return ERR_VAL;
 800c3f4:	f06f 0305 	mvn.w	r3, #5
 800c3f8:	e025      	b.n	800c446 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	68b8      	ldr	r0, [r7, #8]
 800c3fe:	f003 f8dd 	bl	800f5bc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800c402:	f7fe f9cb 	bl	800a79c <http_state_alloc>
 800c406:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d102      	bne.n	800c414 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800c40e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c412:	e018      	b.n	800c446 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	68ba      	ldr	r2, [r7, #8]
 800c418:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800c41a:	6979      	ldr	r1, [r7, #20]
 800c41c:	68b8      	ldr	r0, [r7, #8]
 800c41e:	f003 facd 	bl	800f9bc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800c422:	490b      	ldr	r1, [pc, #44]	; (800c450 <http_accept+0x78>)
 800c424:	68b8      	ldr	r0, [r7, #8]
 800c426:	f003 fadb 	bl	800f9e0 <tcp_recv>
  altcp_err(pcb, http_err);
 800c42a:	490a      	ldr	r1, [pc, #40]	; (800c454 <http_accept+0x7c>)
 800c42c:	68b8      	ldr	r0, [r7, #8]
 800c42e:	f003 fb1b 	bl	800fa68 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c432:	2204      	movs	r2, #4
 800c434:	4908      	ldr	r1, [pc, #32]	; (800c458 <http_accept+0x80>)
 800c436:	68b8      	ldr	r0, [r7, #8]
 800c438:	f003 fb50 	bl	800fadc <tcp_poll>
  altcp_sent(pcb, http_sent);
 800c43c:	4907      	ldr	r1, [pc, #28]	; (800c45c <http_accept+0x84>)
 800c43e:	68b8      	ldr	r0, [r7, #8]
 800c440:	f003 faf0 	bl	800fa24 <tcp_sent>

  return ERR_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	0800c295 	.word	0x0800c295
 800c454:	0800c1c9 	.word	0x0800c1c9
 800c458:	0800c223 	.word	0x0800c223
 800c45c:	0800c1ed 	.word	0x0800c1ed

0800c460 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	460b      	mov	r3, r1
 800c46a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d029      	beq.n	800c4c6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c472:	2101      	movs	r1, #1
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f003 f8a1 	bl	800f5bc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800c47a:	887b      	ldrh	r3, [r7, #2]
 800c47c:	461a      	mov	r2, r3
 800c47e:	4914      	ldr	r1, [pc, #80]	; (800c4d0 <httpd_init_pcb+0x70>)
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f002 f9e9 	bl	800e858 <tcp_bind>
 800c486:	4603      	mov	r3, r0
 800c488:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800c48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d006      	beq.n	800c4a0 <httpd_init_pcb+0x40>
 800c492:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <httpd_init_pcb+0x74>)
 800c494:	f640 2257 	movw	r2, #2647	; 0xa57
 800c498:	490f      	ldr	r1, [pc, #60]	; (800c4d8 <httpd_init_pcb+0x78>)
 800c49a:	4810      	ldr	r0, [pc, #64]	; (800c4dc <httpd_init_pcb+0x7c>)
 800c49c:	f00a fd56 	bl	8016f4c <iprintf>
    pcb = altcp_listen(pcb);
 800c4a0:	21ff      	movs	r1, #255	; 0xff
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f002 fa90 	bl	800e9c8 <tcp_listen_with_backlog>
 800c4a8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d106      	bne.n	800c4be <httpd_init_pcb+0x5e>
 800c4b0:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <httpd_init_pcb+0x74>)
 800c4b2:	f640 2259 	movw	r2, #2649	; 0xa59
 800c4b6:	490a      	ldr	r1, [pc, #40]	; (800c4e0 <httpd_init_pcb+0x80>)
 800c4b8:	4808      	ldr	r0, [pc, #32]	; (800c4dc <httpd_init_pcb+0x7c>)
 800c4ba:	f00a fd47 	bl	8016f4c <iprintf>
    altcp_accept(pcb, http_accept);
 800c4be:	4909      	ldr	r1, [pc, #36]	; (800c4e4 <httpd_init_pcb+0x84>)
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f003 faf3 	bl	800faac <tcp_accept>
  }
}
 800c4c6:	bf00      	nop
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0801ead4 	.word	0x0801ead4
 800c4d4:	08019550 	.word	0x08019550
 800c4d8:	0801975c 	.word	0x0801975c
 800c4dc:	08019598 	.word	0x08019598
 800c4e0:	08019778 	.word	0x08019778
 800c4e4:	0800c3d9 	.word	0x0800c3d9

0800c4e8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800c4ee:	202e      	movs	r0, #46	; 0x2e
 800c4f0:	f003 fa56 	bl	800f9a0 <tcp_new_ip_type>
 800c4f4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d106      	bne.n	800c50a <httpd_init+0x22>
 800c4fc:	4b07      	ldr	r3, [pc, #28]	; (800c51c <httpd_init+0x34>)
 800c4fe:	f640 2272 	movw	r2, #2674	; 0xa72
 800c502:	4907      	ldr	r1, [pc, #28]	; (800c520 <httpd_init+0x38>)
 800c504:	4807      	ldr	r0, [pc, #28]	; (800c524 <httpd_init+0x3c>)
 800c506:	f00a fd21 	bl	8016f4c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800c50a:	2150      	movs	r1, #80	; 0x50
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff ffa7 	bl	800c460 <httpd_init_pcb>
}
 800c512:	bf00      	nop
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	08019550 	.word	0x08019550
 800c520:	08019798 	.word	0x08019798
 800c524:	08019598 	.word	0x08019598

0800c528 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d106      	bne.n	800c548 <http_set_ssi_handler+0x20>
 800c53a:	4b14      	ldr	r3, [pc, #80]	; (800c58c <http_set_ssi_handler+0x64>)
 800c53c:	f640 2297 	movw	r2, #2711	; 0xa97
 800c540:	4913      	ldr	r1, [pc, #76]	; (800c590 <http_set_ssi_handler+0x68>)
 800c542:	4814      	ldr	r0, [pc, #80]	; (800c594 <http_set_ssi_handler+0x6c>)
 800c544:	f00a fd02 	bl	8016f4c <iprintf>
  httpd_ssi_handler = ssi_handler;
 800c548:	4a13      	ldr	r2, [pc, #76]	; (800c598 <http_set_ssi_handler+0x70>)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d106      	bne.n	800c562 <http_set_ssi_handler+0x3a>
 800c554:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <http_set_ssi_handler+0x64>)
 800c556:	f640 229e 	movw	r2, #2718	; 0xa9e
 800c55a:	4910      	ldr	r1, [pc, #64]	; (800c59c <http_set_ssi_handler+0x74>)
 800c55c:	480d      	ldr	r0, [pc, #52]	; (800c594 <http_set_ssi_handler+0x6c>)
 800c55e:	f00a fcf5 	bl	8016f4c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	dc06      	bgt.n	800c576 <http_set_ssi_handler+0x4e>
 800c568:	4b08      	ldr	r3, [pc, #32]	; (800c58c <http_set_ssi_handler+0x64>)
 800c56a:	f640 229f 	movw	r2, #2719	; 0xa9f
 800c56e:	490c      	ldr	r1, [pc, #48]	; (800c5a0 <http_set_ssi_handler+0x78>)
 800c570:	4808      	ldr	r0, [pc, #32]	; (800c594 <http_set_ssi_handler+0x6c>)
 800c572:	f00a fceb 	bl	8016f4c <iprintf>

  httpd_tags = tags;
 800c576:	4a0b      	ldr	r2, [pc, #44]	; (800c5a4 <http_set_ssi_handler+0x7c>)
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800c57c:	4a0a      	ldr	r2, [pc, #40]	; (800c5a8 <http_set_ssi_handler+0x80>)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800c582:	bf00      	nop
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	08019550 	.word	0x08019550
 800c590:	080197b4 	.word	0x080197b4
 800c594:	08019598 	.word	0x08019598
 800c598:	2000165c 	.word	0x2000165c
 800c59c:	080197cc 	.word	0x080197cc
 800c5a0:	080197dc 	.word	0x080197dc
 800c5a4:	20001664 	.word	0x20001664
 800c5a8:	20001660 	.word	0x20001660

0800c5ac <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d106      	bne.n	800c5ca <http_set_cgi_handlers+0x1e>
 800c5bc:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <http_set_cgi_handlers+0x48>)
 800c5be:	f640 22b2 	movw	r2, #2738	; 0xab2
 800c5c2:	490d      	ldr	r1, [pc, #52]	; (800c5f8 <http_set_cgi_handlers+0x4c>)
 800c5c4:	480d      	ldr	r0, [pc, #52]	; (800c5fc <http_set_cgi_handlers+0x50>)
 800c5c6:	f00a fcc1 	bl	8016f4c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	dc06      	bgt.n	800c5de <http_set_cgi_handlers+0x32>
 800c5d0:	4b08      	ldr	r3, [pc, #32]	; (800c5f4 <http_set_cgi_handlers+0x48>)
 800c5d2:	f640 22b3 	movw	r2, #2739	; 0xab3
 800c5d6:	490a      	ldr	r1, [pc, #40]	; (800c600 <http_set_cgi_handlers+0x54>)
 800c5d8:	4808      	ldr	r0, [pc, #32]	; (800c5fc <http_set_cgi_handlers+0x50>)
 800c5da:	f00a fcb7 	bl	8016f4c <iprintf>

  httpd_cgis = cgis;
 800c5de:	4a09      	ldr	r2, [pc, #36]	; (800c604 <http_set_cgi_handlers+0x58>)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800c5e4:	4a08      	ldr	r2, [pc, #32]	; (800c608 <http_set_cgi_handlers+0x5c>)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	6013      	str	r3, [r2, #0]
}
 800c5ea:	bf00      	nop
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	08019550 	.word	0x08019550
 800c5f8:	080197f4 	.word	0x080197f4
 800c5fc:	08019598 	.word	0x08019598
 800c600:	08019804 	.word	0x08019804
 800c604:	20001668 	.word	0x20001668
 800c608:	2000166c 	.word	0x2000166c

0800c60c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	4603      	mov	r3, r0
 800c614:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c616:	88fb      	ldrh	r3, [r7, #6]
 800c618:	021b      	lsls	r3, r3, #8
 800c61a:	b21a      	sxth	r2, r3
 800c61c:	88fb      	ldrh	r3, [r7, #6]
 800c61e:	0a1b      	lsrs	r3, r3, #8
 800c620:	b29b      	uxth	r3, r3
 800c622:	b21b      	sxth	r3, r3
 800c624:	4313      	orrs	r3, r2
 800c626:	b21b      	sxth	r3, r3
 800c628:	b29b      	uxth	r3, r3
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c636:	b480      	push	{r7}
 800c638:	b083      	sub	sp, #12
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	061a      	lsls	r2, r3, #24
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	021b      	lsls	r3, r3, #8
 800c646:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c64a:	431a      	orrs	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	0a1b      	lsrs	r3, r3, #8
 800c650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c654:	431a      	orrs	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	0e1b      	lsrs	r3, r3, #24
 800c65a:	4313      	orrs	r3, r2
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b086      	sub	sp, #24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800c674:	68b8      	ldr	r0, [r7, #8]
 800c676:	f7f3 fdb5 	bl	80001e4 <strlen>
 800c67a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	e022      	b.n	800c6cc <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	617b      	str	r3, [r7, #20]
 800c68a:	e012      	b.n	800c6b2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	781a      	ldrb	r2, [r3, #0]
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	429a      	cmp	r2, r3
 800c696:	d109      	bne.n	800c6ac <lwip_strnstr+0x44>
 800c698:	693a      	ldr	r2, [r7, #16]
 800c69a:	68b9      	ldr	r1, [r7, #8]
 800c69c:	6978      	ldr	r0, [r7, #20]
 800c69e:	f00a fd9b 	bl	80171d8 <strncmp>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	e00f      	b.n	800c6cc <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d007      	beq.n	800c6ca <lwip_strnstr+0x62>
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	441a      	add	r2, r3
 800c6c0:	68f9      	ldr	r1, [r7, #12]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	440b      	add	r3, r1
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d9e0      	bls.n	800c68c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	1c5a      	adds	r2, r3, #1
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	603a      	str	r2, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800c6f2:	7bfa      	ldrb	r2, [r7, #15]
 800c6f4:	7bbb      	ldrb	r3, [r7, #14]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d016      	beq.n	800c728 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800c6fa:	7bfb      	ldrb	r3, [r7, #15]
 800c6fc:	f043 0320 	orr.w	r3, r3, #32
 800c700:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800c702:	7b7b      	ldrb	r3, [r7, #13]
 800c704:	2b60      	cmp	r3, #96	; 0x60
 800c706:	d90c      	bls.n	800c722 <lwip_stricmp+0x4e>
 800c708:	7b7b      	ldrb	r3, [r7, #13]
 800c70a:	2b7a      	cmp	r3, #122	; 0x7a
 800c70c:	d809      	bhi.n	800c722 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800c70e:	7bbb      	ldrb	r3, [r7, #14]
 800c710:	f043 0320 	orr.w	r3, r3, #32
 800c714:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800c716:	7b7a      	ldrb	r2, [r7, #13]
 800c718:	7b3b      	ldrb	r3, [r7, #12]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d003      	beq.n	800c726 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800c71e:	2301      	movs	r3, #1
 800c720:	e006      	b.n	800c730 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800c722:	2301      	movs	r3, #1
 800c724:	e004      	b.n	800c730 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800c726:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800c728:	7bfb      	ldrb	r3, [r7, #15]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1d7      	bne.n	800c6de <lwip_stricmp+0xa>
  return 0;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3714      	adds	r7, #20
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
  char *res = result;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	3b01      	subs	r3, #1
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	4413      	add	r3, r2
 800c754:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	bfb8      	it	lt
 800c75c:	425b      	neglt	r3, r3
 800c75e:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d806      	bhi.n	800c774 <lwip_itoa+0x38>
    if (bufsize == 1) {
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d154      	bne.n	800c816 <lwip_itoa+0xda>
      *result = 0;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	701a      	strb	r2, [r3, #0]
    }
    return;
 800c772:	e050      	b.n	800c816 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	da04      	bge.n	800c784 <lwip_itoa+0x48>
    *res++ = '-';
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	61fa      	str	r2, [r7, #28]
 800c780:	222d      	movs	r2, #45	; 0x2d
 800c782:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	2200      	movs	r2, #0
 800c788:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800c78a:	e01c      	b.n	800c7c6 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	4b24      	ldr	r3, [pc, #144]	; (800c820 <lwip_itoa+0xe4>)
 800c790:	fb83 1302 	smull	r1, r3, r3, r2
 800c794:	1099      	asrs	r1, r3, #2
 800c796:	17d3      	asrs	r3, r2, #31
 800c798:	1ac9      	subs	r1, r1, r3
 800c79a:	460b      	mov	r3, r1
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	440b      	add	r3, r1
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	1ad1      	subs	r1, r2, r3
 800c7a4:	b2cb      	uxtb	r3, r1
 800c7a6:	3330      	adds	r3, #48	; 0x30
 800c7a8:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	7cfa      	ldrb	r2, [r7, #19]
 800c7b4:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	4a19      	ldr	r2, [pc, #100]	; (800c820 <lwip_itoa+0xe4>)
 800c7ba:	fb82 1203 	smull	r1, r2, r2, r3
 800c7be:	1092      	asrs	r2, r2, #2
 800c7c0:	17db      	asrs	r3, r3, #31
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <lwip_itoa+0x98>
 800c7cc:	69ba      	ldr	r2, [r7, #24]
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d8db      	bhi.n	800c78c <lwip_itoa+0x50>
  }
  if (n) {
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d003      	beq.n	800c7e2 <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	701a      	strb	r2, [r3, #0]
    return;
 800c7e0:	e01a      	b.n	800c818 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10a      	bne.n	800c800 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	1c5a      	adds	r2, r3, #1
 800c7ee:	61fa      	str	r2, [r7, #28]
 800c7f0:	2230      	movs	r2, #48	; 0x30
 800c7f2:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	61fa      	str	r2, [r7, #28]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	701a      	strb	r2, [r3, #0]
    return;
 800c7fe:	e00b      	b.n	800c818 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	441a      	add	r2, r3
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	461a      	mov	r2, r3
 800c80c:	69b9      	ldr	r1, [r7, #24]
 800c80e:	69f8      	ldr	r0, [r7, #28]
 800c810:	f00a fb7a 	bl	8016f08 <memmove>
 800c814:	e000      	b.n	800c818 <lwip_itoa+0xdc>
    return;
 800c816:	bf00      	nop
}
 800c818:	3720      	adds	r7, #32
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	66666667 	.word	0x66666667

0800c824 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c82e:	f000 f8d5 	bl	800c9dc <mem_init>
  memp_init();
 800c832:	f000 fbdb 	bl	800cfec <memp_init>
  pbuf_init();
  netif_init();
 800c836:	f000 fc93 	bl	800d160 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c83a:	f007 fea7 	bl	801458c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c83e:	f001 fd05 	bl	800e24c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c842:	f007 fe19 	bl	8014478 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c846:	bf00      	nop
 800c848:	3708      	adds	r7, #8
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
	...

0800c850 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	4603      	mov	r3, r0
 800c858:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c85a:	4b05      	ldr	r3, [pc, #20]	; (800c870 <ptr_to_mem+0x20>)
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	88fb      	ldrh	r3, [r7, #6]
 800c860:	4413      	add	r3, r2
}
 800c862:	4618      	mov	r0, r3
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	20001674 	.word	0x20001674

0800c874 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c87c:	4b05      	ldr	r3, [pc, #20]	; (800c894 <mem_to_ptr+0x20>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	1ad3      	subs	r3, r2, r3
 800c884:	b29b      	uxth	r3, r3
}
 800c886:	4618      	mov	r0, r3
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	20001674 	.word	0x20001674

0800c898 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c898:	b590      	push	{r4, r7, lr}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c8a0:	4b45      	ldr	r3, [pc, #276]	; (800c9b8 <plug_holes+0x120>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d206      	bcs.n	800c8b8 <plug_holes+0x20>
 800c8aa:	4b44      	ldr	r3, [pc, #272]	; (800c9bc <plug_holes+0x124>)
 800c8ac:	f240 12df 	movw	r2, #479	; 0x1df
 800c8b0:	4943      	ldr	r1, [pc, #268]	; (800c9c0 <plug_holes+0x128>)
 800c8b2:	4844      	ldr	r0, [pc, #272]	; (800c9c4 <plug_holes+0x12c>)
 800c8b4:	f00a fb4a 	bl	8016f4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c8b8:	4b43      	ldr	r3, [pc, #268]	; (800c9c8 <plug_holes+0x130>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d306      	bcc.n	800c8d0 <plug_holes+0x38>
 800c8c2:	4b3e      	ldr	r3, [pc, #248]	; (800c9bc <plug_holes+0x124>)
 800c8c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c8c8:	4940      	ldr	r1, [pc, #256]	; (800c9cc <plug_holes+0x134>)
 800c8ca:	483e      	ldr	r0, [pc, #248]	; (800c9c4 <plug_holes+0x12c>)
 800c8cc:	f00a fb3e 	bl	8016f4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	791b      	ldrb	r3, [r3, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d006      	beq.n	800c8e6 <plug_holes+0x4e>
 800c8d8:	4b38      	ldr	r3, [pc, #224]	; (800c9bc <plug_holes+0x124>)
 800c8da:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c8de:	493c      	ldr	r1, [pc, #240]	; (800c9d0 <plug_holes+0x138>)
 800c8e0:	4838      	ldr	r0, [pc, #224]	; (800c9c4 <plug_holes+0x12c>)
 800c8e2:	f00a fb33 	bl	8016f4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	881b      	ldrh	r3, [r3, #0]
 800c8ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8ee:	d906      	bls.n	800c8fe <plug_holes+0x66>
 800c8f0:	4b32      	ldr	r3, [pc, #200]	; (800c9bc <plug_holes+0x124>)
 800c8f2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c8f6:	4937      	ldr	r1, [pc, #220]	; (800c9d4 <plug_holes+0x13c>)
 800c8f8:	4832      	ldr	r0, [pc, #200]	; (800c9c4 <plug_holes+0x12c>)
 800c8fa:	f00a fb27 	bl	8016f4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	881b      	ldrh	r3, [r3, #0]
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff ffa4 	bl	800c850 <ptr_to_mem>
 800c908:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d024      	beq.n	800c95c <plug_holes+0xc4>
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	791b      	ldrb	r3, [r3, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d120      	bne.n	800c95c <plug_holes+0xc4>
 800c91a:	4b2b      	ldr	r3, [pc, #172]	; (800c9c8 <plug_holes+0x130>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	429a      	cmp	r2, r3
 800c922:	d01b      	beq.n	800c95c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c924:	4b2c      	ldr	r3, [pc, #176]	; (800c9d8 <plug_holes+0x140>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d102      	bne.n	800c934 <plug_holes+0x9c>
      lfree = mem;
 800c92e:	4a2a      	ldr	r2, [pc, #168]	; (800c9d8 <plug_holes+0x140>)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	881a      	ldrh	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c944:	d00a      	beq.n	800c95c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7ff ff80 	bl	800c850 <ptr_to_mem>
 800c950:	4604      	mov	r4, r0
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff ff8e 	bl	800c874 <mem_to_ptr>
 800c958:	4603      	mov	r3, r0
 800c95a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	885b      	ldrh	r3, [r3, #2]
 800c960:	4618      	mov	r0, r3
 800c962:	f7ff ff75 	bl	800c850 <ptr_to_mem>
 800c966:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d01f      	beq.n	800c9b0 <plug_holes+0x118>
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	791b      	ldrb	r3, [r3, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d11b      	bne.n	800c9b0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c978:	4b17      	ldr	r3, [pc, #92]	; (800c9d8 <plug_holes+0x140>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d102      	bne.n	800c988 <plug_holes+0xf0>
      lfree = pmem;
 800c982:	4a15      	ldr	r2, [pc, #84]	; (800c9d8 <plug_holes+0x140>)
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	881a      	ldrh	r2, [r3, #0]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c998:	d00a      	beq.n	800c9b0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff ff56 	bl	800c850 <ptr_to_mem>
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	68b8      	ldr	r0, [r7, #8]
 800c9a8:	f7ff ff64 	bl	800c874 <mem_to_ptr>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c9b0:	bf00      	nop
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd90      	pop	{r4, r7, pc}
 800c9b8:	20001674 	.word	0x20001674
 800c9bc:	08019820 	.word	0x08019820
 800c9c0:	08019850 	.word	0x08019850
 800c9c4:	08019868 	.word	0x08019868
 800c9c8:	20001678 	.word	0x20001678
 800c9cc:	08019890 	.word	0x08019890
 800c9d0:	080198ac 	.word	0x080198ac
 800c9d4:	080198c8 	.word	0x080198c8
 800c9d8:	2000167c 	.word	0x2000167c

0800c9dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c9e2:	4b18      	ldr	r3, [pc, #96]	; (800ca44 <mem_init+0x68>)
 800c9e4:	3303      	adds	r3, #3
 800c9e6:	f023 0303 	bic.w	r3, r3, #3
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <mem_init+0x6c>)
 800c9ee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c9f0:	4b15      	ldr	r3, [pc, #84]	; (800ca48 <mem_init+0x6c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c9fc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ca0a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ca0e:	f7ff ff1f 	bl	800c850 <ptr_to_mem>
 800ca12:	4603      	mov	r3, r0
 800ca14:	4a0d      	ldr	r2, [pc, #52]	; (800ca4c <mem_init+0x70>)
 800ca16:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ca18:	4b0c      	ldr	r3, [pc, #48]	; (800ca4c <mem_init+0x70>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ca20:	4b0a      	ldr	r3, [pc, #40]	; (800ca4c <mem_init+0x70>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ca28:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ca2a:	4b08      	ldr	r3, [pc, #32]	; (800ca4c <mem_init+0x70>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ca32:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ca34:	4b04      	ldr	r3, [pc, #16]	; (800ca48 <mem_init+0x6c>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a05      	ldr	r2, [pc, #20]	; (800ca50 <mem_init+0x74>)
 800ca3a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ca3c:	bf00      	nop
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	2000dfa0 	.word	0x2000dfa0
 800ca48:	20001674 	.word	0x20001674
 800ca4c:	20001678 	.word	0x20001678
 800ca50:	2000167c 	.word	0x2000167c

0800ca54 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7ff ff09 	bl	800c874 <mem_to_ptr>
 800ca62:	4603      	mov	r3, r0
 800ca64:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	881b      	ldrh	r3, [r3, #0]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff fef0 	bl	800c850 <ptr_to_mem>
 800ca70:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	885b      	ldrh	r3, [r3, #2]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff feea 	bl	800c850 <ptr_to_mem>
 800ca7c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	881b      	ldrh	r3, [r3, #0]
 800ca82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca86:	d818      	bhi.n	800caba <mem_link_valid+0x66>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	885b      	ldrh	r3, [r3, #2]
 800ca8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca90:	d813      	bhi.n	800caba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca96:	8afa      	ldrh	r2, [r7, #22]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d004      	beq.n	800caa6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	881b      	ldrh	r3, [r3, #0]
 800caa0:	8afa      	ldrh	r2, [r7, #22]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d109      	bne.n	800caba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800caa6:	4b08      	ldr	r3, [pc, #32]	; (800cac8 <mem_link_valid+0x74>)
 800caa8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800caaa:	693a      	ldr	r2, [r7, #16]
 800caac:	429a      	cmp	r2, r3
 800caae:	d006      	beq.n	800cabe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	885b      	ldrh	r3, [r3, #2]
 800cab4:	8afa      	ldrh	r2, [r7, #22]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d001      	beq.n	800cabe <mem_link_valid+0x6a>
    return 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	e000      	b.n	800cac0 <mem_link_valid+0x6c>
  }
  return 1;
 800cabe:	2301      	movs	r3, #1
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	20001678 	.word	0x20001678

0800cacc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d04c      	beq.n	800cb74 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f003 0303 	and.w	r3, r3, #3
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d007      	beq.n	800caf4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cae4:	4b25      	ldr	r3, [pc, #148]	; (800cb7c <mem_free+0xb0>)
 800cae6:	f240 2273 	movw	r2, #627	; 0x273
 800caea:	4925      	ldr	r1, [pc, #148]	; (800cb80 <mem_free+0xb4>)
 800caec:	4825      	ldr	r0, [pc, #148]	; (800cb84 <mem_free+0xb8>)
 800caee:	f00a fa2d 	bl	8016f4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800caf2:	e040      	b.n	800cb76 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	3b08      	subs	r3, #8
 800caf8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cafa:	4b23      	ldr	r3, [pc, #140]	; (800cb88 <mem_free+0xbc>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d306      	bcc.n	800cb12 <mem_free+0x46>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f103 020c 	add.w	r2, r3, #12
 800cb0a:	4b20      	ldr	r3, [pc, #128]	; (800cb8c <mem_free+0xc0>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d907      	bls.n	800cb22 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cb12:	4b1a      	ldr	r3, [pc, #104]	; (800cb7c <mem_free+0xb0>)
 800cb14:	f240 227f 	movw	r2, #639	; 0x27f
 800cb18:	491d      	ldr	r1, [pc, #116]	; (800cb90 <mem_free+0xc4>)
 800cb1a:	481a      	ldr	r0, [pc, #104]	; (800cb84 <mem_free+0xb8>)
 800cb1c:	f00a fa16 	bl	8016f4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cb20:	e029      	b.n	800cb76 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	791b      	ldrb	r3, [r3, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d107      	bne.n	800cb3a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cb2a:	4b14      	ldr	r3, [pc, #80]	; (800cb7c <mem_free+0xb0>)
 800cb2c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cb30:	4918      	ldr	r1, [pc, #96]	; (800cb94 <mem_free+0xc8>)
 800cb32:	4814      	ldr	r0, [pc, #80]	; (800cb84 <mem_free+0xb8>)
 800cb34:	f00a fa0a 	bl	8016f4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cb38:	e01d      	b.n	800cb76 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f7ff ff8a 	bl	800ca54 <mem_link_valid>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d107      	bne.n	800cb56 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cb46:	4b0d      	ldr	r3, [pc, #52]	; (800cb7c <mem_free+0xb0>)
 800cb48:	f240 2295 	movw	r2, #661	; 0x295
 800cb4c:	4912      	ldr	r1, [pc, #72]	; (800cb98 <mem_free+0xcc>)
 800cb4e:	480d      	ldr	r0, [pc, #52]	; (800cb84 <mem_free+0xb8>)
 800cb50:	f00a f9fc 	bl	8016f4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cb54:	e00f      	b.n	800cb76 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cb5c:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <mem_free+0xd0>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d202      	bcs.n	800cb6c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cb66:	4a0d      	ldr	r2, [pc, #52]	; (800cb9c <mem_free+0xd0>)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f7ff fe93 	bl	800c898 <plug_holes>
 800cb72:	e000      	b.n	800cb76 <mem_free+0xaa>
    return;
 800cb74:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	08019820 	.word	0x08019820
 800cb80:	080198f4 	.word	0x080198f4
 800cb84:	08019868 	.word	0x08019868
 800cb88:	20001674 	.word	0x20001674
 800cb8c:	20001678 	.word	0x20001678
 800cb90:	08019918 	.word	0x08019918
 800cb94:	08019934 	.word	0x08019934
 800cb98:	0801995c 	.word	0x0801995c
 800cb9c:	2000167c 	.word	0x2000167c

0800cba0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b088      	sub	sp, #32
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cbac:	887b      	ldrh	r3, [r7, #2]
 800cbae:	3303      	adds	r3, #3
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	f023 0303 	bic.w	r3, r3, #3
 800cbb6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cbb8:	8bfb      	ldrh	r3, [r7, #30]
 800cbba:	2b0b      	cmp	r3, #11
 800cbbc:	d801      	bhi.n	800cbc2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cbbe:	230c      	movs	r3, #12
 800cbc0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cbc2:	8bfb      	ldrh	r3, [r7, #30]
 800cbc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbc8:	d803      	bhi.n	800cbd2 <mem_trim+0x32>
 800cbca:	8bfa      	ldrh	r2, [r7, #30]
 800cbcc:	887b      	ldrh	r3, [r7, #2]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d201      	bcs.n	800cbd6 <mem_trim+0x36>
    return NULL;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	e0cc      	b.n	800cd70 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cbd6:	4b68      	ldr	r3, [pc, #416]	; (800cd78 <mem_trim+0x1d8>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d304      	bcc.n	800cbea <mem_trim+0x4a>
 800cbe0:	4b66      	ldr	r3, [pc, #408]	; (800cd7c <mem_trim+0x1dc>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d306      	bcc.n	800cbf8 <mem_trim+0x58>
 800cbea:	4b65      	ldr	r3, [pc, #404]	; (800cd80 <mem_trim+0x1e0>)
 800cbec:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cbf0:	4964      	ldr	r1, [pc, #400]	; (800cd84 <mem_trim+0x1e4>)
 800cbf2:	4865      	ldr	r0, [pc, #404]	; (800cd88 <mem_trim+0x1e8>)
 800cbf4:	f00a f9aa 	bl	8016f4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cbf8:	4b5f      	ldr	r3, [pc, #380]	; (800cd78 <mem_trim+0x1d8>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d304      	bcc.n	800cc0c <mem_trim+0x6c>
 800cc02:	4b5e      	ldr	r3, [pc, #376]	; (800cd7c <mem_trim+0x1dc>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d301      	bcc.n	800cc10 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	e0af      	b.n	800cd70 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3b08      	subs	r3, #8
 800cc14:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cc16:	69b8      	ldr	r0, [r7, #24]
 800cc18:	f7ff fe2c 	bl	800c874 <mem_to_ptr>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	881a      	ldrh	r2, [r3, #0]
 800cc24:	8afb      	ldrh	r3, [r7, #22]
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	3b08      	subs	r3, #8
 800cc2c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cc2e:	8bfa      	ldrh	r2, [r7, #30]
 800cc30:	8abb      	ldrh	r3, [r7, #20]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d906      	bls.n	800cc44 <mem_trim+0xa4>
 800cc36:	4b52      	ldr	r3, [pc, #328]	; (800cd80 <mem_trim+0x1e0>)
 800cc38:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cc3c:	4953      	ldr	r1, [pc, #332]	; (800cd8c <mem_trim+0x1ec>)
 800cc3e:	4852      	ldr	r0, [pc, #328]	; (800cd88 <mem_trim+0x1e8>)
 800cc40:	f00a f984 	bl	8016f4c <iprintf>
  if (newsize > size) {
 800cc44:	8bfa      	ldrh	r2, [r7, #30]
 800cc46:	8abb      	ldrh	r3, [r7, #20]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d901      	bls.n	800cc50 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e08f      	b.n	800cd70 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800cc50:	8bfa      	ldrh	r2, [r7, #30]
 800cc52:	8abb      	ldrh	r3, [r7, #20]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d101      	bne.n	800cc5c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	e089      	b.n	800cd70 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	881b      	ldrh	r3, [r3, #0]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff fdf5 	bl	800c850 <ptr_to_mem>
 800cc66:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	791b      	ldrb	r3, [r3, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d13f      	bne.n	800ccf0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	881b      	ldrh	r3, [r3, #0]
 800cc74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc78:	d106      	bne.n	800cc88 <mem_trim+0xe8>
 800cc7a:	4b41      	ldr	r3, [pc, #260]	; (800cd80 <mem_trim+0x1e0>)
 800cc7c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cc80:	4943      	ldr	r1, [pc, #268]	; (800cd90 <mem_trim+0x1f0>)
 800cc82:	4841      	ldr	r0, [pc, #260]	; (800cd88 <mem_trim+0x1e8>)
 800cc84:	f00a f962 	bl	8016f4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	881b      	ldrh	r3, [r3, #0]
 800cc8c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc8e:	8afa      	ldrh	r2, [r7, #22]
 800cc90:	8bfb      	ldrh	r3, [r7, #30]
 800cc92:	4413      	add	r3, r2
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	3308      	adds	r3, #8
 800cc98:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cc9a:	4b3e      	ldr	r3, [pc, #248]	; (800cd94 <mem_trim+0x1f4>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d106      	bne.n	800ccb2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800cca4:	89fb      	ldrh	r3, [r7, #14]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff fdd2 	bl	800c850 <ptr_to_mem>
 800ccac:	4603      	mov	r3, r0
 800ccae:	4a39      	ldr	r2, [pc, #228]	; (800cd94 <mem_trim+0x1f4>)
 800ccb0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ccb2:	89fb      	ldrh	r3, [r7, #14]
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7ff fdcb 	bl	800c850 <ptr_to_mem>
 800ccba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	89ba      	ldrh	r2, [r7, #12]
 800ccc6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	8afa      	ldrh	r2, [r7, #22]
 800cccc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	89fa      	ldrh	r2, [r7, #14]
 800ccd2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ccdc:	d047      	beq.n	800cd6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	881b      	ldrh	r3, [r3, #0]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7ff fdb4 	bl	800c850 <ptr_to_mem>
 800cce8:	4602      	mov	r2, r0
 800ccea:	89fb      	ldrh	r3, [r7, #14]
 800ccec:	8053      	strh	r3, [r2, #2]
 800ccee:	e03e      	b.n	800cd6e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ccf0:	8bfb      	ldrh	r3, [r7, #30]
 800ccf2:	f103 0214 	add.w	r2, r3, #20
 800ccf6:	8abb      	ldrh	r3, [r7, #20]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d838      	bhi.n	800cd6e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ccfc:	8afa      	ldrh	r2, [r7, #22]
 800ccfe:	8bfb      	ldrh	r3, [r7, #30]
 800cd00:	4413      	add	r3, r2
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	3308      	adds	r3, #8
 800cd06:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd10:	d106      	bne.n	800cd20 <mem_trim+0x180>
 800cd12:	4b1b      	ldr	r3, [pc, #108]	; (800cd80 <mem_trim+0x1e0>)
 800cd14:	f240 3216 	movw	r2, #790	; 0x316
 800cd18:	491d      	ldr	r1, [pc, #116]	; (800cd90 <mem_trim+0x1f0>)
 800cd1a:	481b      	ldr	r0, [pc, #108]	; (800cd88 <mem_trim+0x1e8>)
 800cd1c:	f00a f916 	bl	8016f4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cd20:	89fb      	ldrh	r3, [r7, #14]
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7ff fd94 	bl	800c850 <ptr_to_mem>
 800cd28:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cd2a:	4b1a      	ldr	r3, [pc, #104]	; (800cd94 <mem_trim+0x1f4>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	693a      	ldr	r2, [r7, #16]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d202      	bcs.n	800cd3a <mem_trim+0x19a>
      lfree = mem2;
 800cd34:	4a17      	ldr	r2, [pc, #92]	; (800cd94 <mem_trim+0x1f4>)
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	881a      	ldrh	r2, [r3, #0]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	8afa      	ldrh	r2, [r7, #22]
 800cd4c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	89fa      	ldrh	r2, [r7, #14]
 800cd52:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd5c:	d007      	beq.n	800cd6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7ff fd74 	bl	800c850 <ptr_to_mem>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	89fb      	ldrh	r3, [r7, #14]
 800cd6c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800cd6e:	687b      	ldr	r3, [r7, #4]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3720      	adds	r7, #32
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	20001674 	.word	0x20001674
 800cd7c:	20001678 	.word	0x20001678
 800cd80:	08019820 	.word	0x08019820
 800cd84:	08019990 	.word	0x08019990
 800cd88:	08019868 	.word	0x08019868
 800cd8c:	080199a8 	.word	0x080199a8
 800cd90:	080199c8 	.word	0x080199c8
 800cd94:	2000167c 	.word	0x2000167c

0800cd98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cda2:	88fb      	ldrh	r3, [r7, #6]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d101      	bne.n	800cdac <mem_malloc+0x14>
    return NULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	e0d9      	b.n	800cf60 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cdac:	88fb      	ldrh	r3, [r7, #6]
 800cdae:	3303      	adds	r3, #3
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f023 0303 	bic.w	r3, r3, #3
 800cdb6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cdb8:	8bbb      	ldrh	r3, [r7, #28]
 800cdba:	2b0b      	cmp	r3, #11
 800cdbc:	d801      	bhi.n	800cdc2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cdbe:	230c      	movs	r3, #12
 800cdc0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cdc2:	8bbb      	ldrh	r3, [r7, #28]
 800cdc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdc8:	d803      	bhi.n	800cdd2 <mem_malloc+0x3a>
 800cdca:	8bba      	ldrh	r2, [r7, #28]
 800cdcc:	88fb      	ldrh	r3, [r7, #6]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d201      	bcs.n	800cdd6 <mem_malloc+0x3e>
    return NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e0c4      	b.n	800cf60 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cdd6:	4b64      	ldr	r3, [pc, #400]	; (800cf68 <mem_malloc+0x1d0>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7ff fd4a 	bl	800c874 <mem_to_ptr>
 800cde0:	4603      	mov	r3, r0
 800cde2:	83fb      	strh	r3, [r7, #30]
 800cde4:	e0b4      	b.n	800cf50 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cde6:	8bfb      	ldrh	r3, [r7, #30]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7ff fd31 	bl	800c850 <ptr_to_mem>
 800cdee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	791b      	ldrb	r3, [r3, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f040 80a4 	bne.w	800cf42 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	881b      	ldrh	r3, [r3, #0]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	8bfb      	ldrh	r3, [r7, #30]
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	f1a3 0208 	sub.w	r2, r3, #8
 800ce08:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	f0c0 8099 	bcc.w	800cf42 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	881b      	ldrh	r3, [r3, #0]
 800ce14:	461a      	mov	r2, r3
 800ce16:	8bfb      	ldrh	r3, [r7, #30]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	f1a3 0208 	sub.w	r2, r3, #8
 800ce1e:	8bbb      	ldrh	r3, [r7, #28]
 800ce20:	3314      	adds	r3, #20
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d333      	bcc.n	800ce8e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ce26:	8bfa      	ldrh	r2, [r7, #30]
 800ce28:	8bbb      	ldrh	r3, [r7, #28]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	3308      	adds	r3, #8
 800ce30:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ce32:	8a7b      	ldrh	r3, [r7, #18]
 800ce34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce38:	d106      	bne.n	800ce48 <mem_malloc+0xb0>
 800ce3a:	4b4c      	ldr	r3, [pc, #304]	; (800cf6c <mem_malloc+0x1d4>)
 800ce3c:	f240 3287 	movw	r2, #903	; 0x387
 800ce40:	494b      	ldr	r1, [pc, #300]	; (800cf70 <mem_malloc+0x1d8>)
 800ce42:	484c      	ldr	r0, [pc, #304]	; (800cf74 <mem_malloc+0x1dc>)
 800ce44:	f00a f882 	bl	8016f4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ce48:	8a7b      	ldrh	r3, [r7, #18]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7ff fd00 	bl	800c850 <ptr_to_mem>
 800ce50:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	881a      	ldrh	r2, [r3, #0]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	8bfa      	ldrh	r2, [r7, #30]
 800ce64:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	8a7a      	ldrh	r2, [r7, #18]
 800ce6a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	881b      	ldrh	r3, [r3, #0]
 800ce76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce7a:	d00b      	beq.n	800ce94 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7ff fce5 	bl	800c850 <ptr_to_mem>
 800ce86:	4602      	mov	r2, r0
 800ce88:	8a7b      	ldrh	r3, [r7, #18]
 800ce8a:	8053      	strh	r3, [r2, #2]
 800ce8c:	e002      	b.n	800ce94 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	2201      	movs	r2, #1
 800ce92:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ce94:	4b34      	ldr	r3, [pc, #208]	; (800cf68 <mem_malloc+0x1d0>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	697a      	ldr	r2, [r7, #20]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d127      	bne.n	800ceee <mem_malloc+0x156>
          struct mem *cur = lfree;
 800ce9e:	4b32      	ldr	r3, [pc, #200]	; (800cf68 <mem_malloc+0x1d0>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cea4:	e005      	b.n	800ceb2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7ff fcd0 	bl	800c850 <ptr_to_mem>
 800ceb0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	791b      	ldrb	r3, [r3, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d004      	beq.n	800cec4 <mem_malloc+0x12c>
 800ceba:	4b2f      	ldr	r3, [pc, #188]	; (800cf78 <mem_malloc+0x1e0>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	69ba      	ldr	r2, [r7, #24]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d1f0      	bne.n	800cea6 <mem_malloc+0x10e>
          }
          lfree = cur;
 800cec4:	4a28      	ldr	r2, [pc, #160]	; (800cf68 <mem_malloc+0x1d0>)
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ceca:	4b27      	ldr	r3, [pc, #156]	; (800cf68 <mem_malloc+0x1d0>)
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	4b2a      	ldr	r3, [pc, #168]	; (800cf78 <mem_malloc+0x1e0>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d00b      	beq.n	800ceee <mem_malloc+0x156>
 800ced6:	4b24      	ldr	r3, [pc, #144]	; (800cf68 <mem_malloc+0x1d0>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	791b      	ldrb	r3, [r3, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d006      	beq.n	800ceee <mem_malloc+0x156>
 800cee0:	4b22      	ldr	r3, [pc, #136]	; (800cf6c <mem_malloc+0x1d4>)
 800cee2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cee6:	4925      	ldr	r1, [pc, #148]	; (800cf7c <mem_malloc+0x1e4>)
 800cee8:	4822      	ldr	r0, [pc, #136]	; (800cf74 <mem_malloc+0x1dc>)
 800ceea:	f00a f82f 	bl	8016f4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ceee:	8bba      	ldrh	r2, [r7, #28]
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	4413      	add	r3, r2
 800cef4:	3308      	adds	r3, #8
 800cef6:	4a20      	ldr	r2, [pc, #128]	; (800cf78 <mem_malloc+0x1e0>)
 800cef8:	6812      	ldr	r2, [r2, #0]
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d906      	bls.n	800cf0c <mem_malloc+0x174>
 800cefe:	4b1b      	ldr	r3, [pc, #108]	; (800cf6c <mem_malloc+0x1d4>)
 800cf00:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cf04:	491e      	ldr	r1, [pc, #120]	; (800cf80 <mem_malloc+0x1e8>)
 800cf06:	481b      	ldr	r0, [pc, #108]	; (800cf74 <mem_malloc+0x1dc>)
 800cf08:	f00a f820 	bl	8016f4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f003 0303 	and.w	r3, r3, #3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d006      	beq.n	800cf24 <mem_malloc+0x18c>
 800cf16:	4b15      	ldr	r3, [pc, #84]	; (800cf6c <mem_malloc+0x1d4>)
 800cf18:	f240 32bb 	movw	r2, #955	; 0x3bb
 800cf1c:	4919      	ldr	r1, [pc, #100]	; (800cf84 <mem_malloc+0x1ec>)
 800cf1e:	4815      	ldr	r0, [pc, #84]	; (800cf74 <mem_malloc+0x1dc>)
 800cf20:	f00a f814 	bl	8016f4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	f003 0303 	and.w	r3, r3, #3
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d006      	beq.n	800cf3c <mem_malloc+0x1a4>
 800cf2e:	4b0f      	ldr	r3, [pc, #60]	; (800cf6c <mem_malloc+0x1d4>)
 800cf30:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cf34:	4914      	ldr	r1, [pc, #80]	; (800cf88 <mem_malloc+0x1f0>)
 800cf36:	480f      	ldr	r0, [pc, #60]	; (800cf74 <mem_malloc+0x1dc>)
 800cf38:	f00a f808 	bl	8016f4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	3308      	adds	r3, #8
 800cf40:	e00e      	b.n	800cf60 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800cf42:	8bfb      	ldrh	r3, [r7, #30]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff fc83 	bl	800c850 <ptr_to_mem>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cf50:	8bfa      	ldrh	r2, [r7, #30]
 800cf52:	8bbb      	ldrh	r3, [r7, #28]
 800cf54:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	f4ff af44 	bcc.w	800cde6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3720      	adds	r7, #32
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	2000167c 	.word	0x2000167c
 800cf6c:	08019820 	.word	0x08019820
 800cf70:	080199c8 	.word	0x080199c8
 800cf74:	08019868 	.word	0x08019868
 800cf78:	20001678 	.word	0x20001678
 800cf7c:	080199dc 	.word	0x080199dc
 800cf80:	080199f8 	.word	0x080199f8
 800cf84:	08019a28 	.word	0x08019a28
 800cf88:	08019a58 	.word	0x08019a58

0800cf8c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	3303      	adds	r3, #3
 800cfa2:	f023 0303 	bic.w	r3, r3, #3
 800cfa6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	e011      	b.n	800cfd2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	881b      	ldrh	r3, [r3, #0]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	4413      	add	r3, r2
 800cfca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	60fb      	str	r3, [r7, #12]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	885b      	ldrh	r3, [r3, #2]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	dbe7      	blt.n	800cfae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cfde:	bf00      	nop
 800cfe0:	bf00      	nop
 800cfe2:	3714      	adds	r7, #20
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cff2:	2300      	movs	r3, #0
 800cff4:	80fb      	strh	r3, [r7, #6]
 800cff6:	e009      	b.n	800d00c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cff8:	88fb      	ldrh	r3, [r7, #6]
 800cffa:	4a08      	ldr	r2, [pc, #32]	; (800d01c <memp_init+0x30>)
 800cffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d000:	4618      	mov	r0, r3
 800d002:	f7ff ffc3 	bl	800cf8c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d006:	88fb      	ldrh	r3, [r7, #6]
 800d008:	3301      	adds	r3, #1
 800d00a:	80fb      	strh	r3, [r7, #6]
 800d00c:	88fb      	ldrh	r3, [r7, #6]
 800d00e:	2b08      	cmp	r3, #8
 800d010:	d9f2      	bls.n	800cff8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d012:	bf00      	nop
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	0801ea70 	.word	0x0801ea70

0800d020 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d012      	beq.n	800d05c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	6812      	ldr	r2, [r2, #0]
 800d03e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f003 0303 	and.w	r3, r3, #3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d006      	beq.n	800d058 <do_memp_malloc_pool+0x38>
 800d04a:	4b07      	ldr	r3, [pc, #28]	; (800d068 <do_memp_malloc_pool+0x48>)
 800d04c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d050:	4906      	ldr	r1, [pc, #24]	; (800d06c <do_memp_malloc_pool+0x4c>)
 800d052:	4807      	ldr	r0, [pc, #28]	; (800d070 <do_memp_malloc_pool+0x50>)
 800d054:	f009 ff7a 	bl	8016f4c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	e000      	b.n	800d05e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	08019a7c 	.word	0x08019a7c
 800d06c:	08019aac 	.word	0x08019aac
 800d070:	08019ad0 	.word	0x08019ad0

0800d074 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	4603      	mov	r3, r0
 800d07c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	2b08      	cmp	r3, #8
 800d082:	d908      	bls.n	800d096 <memp_malloc+0x22>
 800d084:	4b0a      	ldr	r3, [pc, #40]	; (800d0b0 <memp_malloc+0x3c>)
 800d086:	f240 1257 	movw	r2, #343	; 0x157
 800d08a:	490a      	ldr	r1, [pc, #40]	; (800d0b4 <memp_malloc+0x40>)
 800d08c:	480a      	ldr	r0, [pc, #40]	; (800d0b8 <memp_malloc+0x44>)
 800d08e:	f009 ff5d 	bl	8016f4c <iprintf>
 800d092:	2300      	movs	r3, #0
 800d094:	e008      	b.n	800d0a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	4a08      	ldr	r2, [pc, #32]	; (800d0bc <memp_malloc+0x48>)
 800d09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7ff ffbe 	bl	800d020 <do_memp_malloc_pool>
 800d0a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	08019a7c 	.word	0x08019a7c
 800d0b4:	08019b0c 	.word	0x08019b0c
 800d0b8:	08019ad0 	.word	0x08019ad0
 800d0bc:	0801ea70 	.word	0x0801ea70

0800d0c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	f003 0303 	and.w	r3, r3, #3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d006      	beq.n	800d0e2 <do_memp_free_pool+0x22>
 800d0d4:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <do_memp_free_pool+0x40>)
 800d0d6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d0da:	490a      	ldr	r1, [pc, #40]	; (800d104 <do_memp_free_pool+0x44>)
 800d0dc:	480a      	ldr	r0, [pc, #40]	; (800d108 <do_memp_free_pool+0x48>)
 800d0de:	f009 ff35 	bl	8016f4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d0f8:	bf00      	nop
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	08019a7c 	.word	0x08019a7c
 800d104:	08019b2c 	.word	0x08019b2c
 800d108:	08019ad0 	.word	0x08019ad0

0800d10c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	6039      	str	r1, [r7, #0]
 800d116:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d118:	79fb      	ldrb	r3, [r7, #7]
 800d11a:	2b08      	cmp	r3, #8
 800d11c:	d907      	bls.n	800d12e <memp_free+0x22>
 800d11e:	4b0c      	ldr	r3, [pc, #48]	; (800d150 <memp_free+0x44>)
 800d120:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d124:	490b      	ldr	r1, [pc, #44]	; (800d154 <memp_free+0x48>)
 800d126:	480c      	ldr	r0, [pc, #48]	; (800d158 <memp_free+0x4c>)
 800d128:	f009 ff10 	bl	8016f4c <iprintf>
 800d12c:	e00c      	b.n	800d148 <memp_free+0x3c>

  if (mem == NULL) {
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d008      	beq.n	800d146 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d134:	79fb      	ldrb	r3, [r7, #7]
 800d136:	4a09      	ldr	r2, [pc, #36]	; (800d15c <memp_free+0x50>)
 800d138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	4618      	mov	r0, r3
 800d140:	f7ff ffbe 	bl	800d0c0 <do_memp_free_pool>
 800d144:	e000      	b.n	800d148 <memp_free+0x3c>
    return;
 800d146:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	08019a7c 	.word	0x08019a7c
 800d154:	08019b4c 	.word	0x08019b4c
 800d158:	08019ad0 	.word	0x08019ad0
 800d15c:	0801ea70 	.word	0x0801ea70

0800d160 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d160:	b480      	push	{r7}
 800d162:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d164:	bf00      	nop
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr
	...

0800d170 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d108      	bne.n	800d196 <netif_add+0x26>
 800d184:	4b57      	ldr	r3, [pc, #348]	; (800d2e4 <netif_add+0x174>)
 800d186:	f240 1227 	movw	r2, #295	; 0x127
 800d18a:	4957      	ldr	r1, [pc, #348]	; (800d2e8 <netif_add+0x178>)
 800d18c:	4857      	ldr	r0, [pc, #348]	; (800d2ec <netif_add+0x17c>)
 800d18e:	f009 fedd 	bl	8016f4c <iprintf>
 800d192:	2300      	movs	r3, #0
 800d194:	e0a2      	b.n	800d2dc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d108      	bne.n	800d1ae <netif_add+0x3e>
 800d19c:	4b51      	ldr	r3, [pc, #324]	; (800d2e4 <netif_add+0x174>)
 800d19e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d1a2:	4953      	ldr	r1, [pc, #332]	; (800d2f0 <netif_add+0x180>)
 800d1a4:	4851      	ldr	r0, [pc, #324]	; (800d2ec <netif_add+0x17c>)
 800d1a6:	f009 fed1 	bl	8016f4c <iprintf>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e096      	b.n	800d2dc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d101      	bne.n	800d1b8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d1b4:	4b4f      	ldr	r3, [pc, #316]	; (800d2f4 <netif_add+0x184>)
 800d1b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d101      	bne.n	800d1c2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d1be:	4b4d      	ldr	r3, [pc, #308]	; (800d2f4 <netif_add+0x184>)
 800d1c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d101      	bne.n	800d1cc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d1c8:	4b4a      	ldr	r3, [pc, #296]	; (800d2f4 <netif_add+0x184>)
 800d1ca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	4a45      	ldr	r2, [pc, #276]	; (800d2f8 <netif_add+0x188>)
 800d1e2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6a3a      	ldr	r2, [r7, #32]
 800d1fc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d1fe:	4b3f      	ldr	r3, [pc, #252]	; (800d2fc <netif_add+0x18c>)
 800d200:	781a      	ldrb	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d20c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	68b9      	ldr	r1, [r7, #8]
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f000 f913 	bl	800d440 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	4798      	blx	r3
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <netif_add+0xba>
    return NULL;
 800d226:	2300      	movs	r3, #0
 800d228:	e058      	b.n	800d2dc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d230:	2bff      	cmp	r3, #255	; 0xff
 800d232:	d103      	bne.n	800d23c <netif_add+0xcc>
        netif->num = 0;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d240:	4b2f      	ldr	r3, [pc, #188]	; (800d300 <netif_add+0x190>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	617b      	str	r3, [r7, #20]
 800d246:	e02b      	b.n	800d2a0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d248:	697a      	ldr	r2, [r7, #20]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d106      	bne.n	800d25e <netif_add+0xee>
 800d250:	4b24      	ldr	r3, [pc, #144]	; (800d2e4 <netif_add+0x174>)
 800d252:	f240 128b 	movw	r2, #395	; 0x18b
 800d256:	492b      	ldr	r1, [pc, #172]	; (800d304 <netif_add+0x194>)
 800d258:	4824      	ldr	r0, [pc, #144]	; (800d2ec <netif_add+0x17c>)
 800d25a:	f009 fe77 	bl	8016f4c <iprintf>
        num_netifs++;
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	3301      	adds	r3, #1
 800d262:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	2bff      	cmp	r3, #255	; 0xff
 800d268:	dd06      	ble.n	800d278 <netif_add+0x108>
 800d26a:	4b1e      	ldr	r3, [pc, #120]	; (800d2e4 <netif_add+0x174>)
 800d26c:	f240 128d 	movw	r2, #397	; 0x18d
 800d270:	4925      	ldr	r1, [pc, #148]	; (800d308 <netif_add+0x198>)
 800d272:	481e      	ldr	r0, [pc, #120]	; (800d2ec <netif_add+0x17c>)
 800d274:	f009 fe6a 	bl	8016f4c <iprintf>
        if (netif2->num == netif->num) {
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d284:	429a      	cmp	r2, r3
 800d286:	d108      	bne.n	800d29a <netif_add+0x12a>
          netif->num++;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d28e:	3301      	adds	r3, #1
 800d290:	b2da      	uxtb	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d298:	e005      	b.n	800d2a6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	617b      	str	r3, [r7, #20]
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1d0      	bne.n	800d248 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1be      	bne.n	800d22a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2b2:	2bfe      	cmp	r3, #254	; 0xfe
 800d2b4:	d103      	bne.n	800d2be <netif_add+0x14e>
    netif_num = 0;
 800d2b6:	4b11      	ldr	r3, [pc, #68]	; (800d2fc <netif_add+0x18c>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	e006      	b.n	800d2cc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <netif_add+0x18c>)
 800d2ca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d2cc:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <netif_add+0x190>)
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d2d4:	4a0a      	ldr	r2, [pc, #40]	; (800d300 <netif_add+0x190>)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d2da:	68fb      	ldr	r3, [r7, #12]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	08019b68 	.word	0x08019b68
 800d2e8:	08019bfc 	.word	0x08019bfc
 800d2ec:	08019bb8 	.word	0x08019bb8
 800d2f0:	08019c18 	.word	0x08019c18
 800d2f4:	0801ead4 	.word	0x0801ead4
 800d2f8:	0800d653 	.word	0x0800d653
 800d2fc:	200016a4 	.word	0x200016a4
 800d300:	200114bc 	.word	0x200114bc
 800d304:	08019c3c 	.word	0x08019c3c
 800d308:	08019c50 	.word	0x08019c50

0800d30c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f002 fd85 	bl	800fe28 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f007 fabd 	bl	80148a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d326:	bf00      	nop
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
	...

0800d330 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d106      	bne.n	800d350 <netif_do_set_ipaddr+0x20>
 800d342:	4b1d      	ldr	r3, [pc, #116]	; (800d3b8 <netif_do_set_ipaddr+0x88>)
 800d344:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d348:	491c      	ldr	r1, [pc, #112]	; (800d3bc <netif_do_set_ipaddr+0x8c>)
 800d34a:	481d      	ldr	r0, [pc, #116]	; (800d3c0 <netif_do_set_ipaddr+0x90>)
 800d34c:	f009 fdfe 	bl	8016f4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d106      	bne.n	800d364 <netif_do_set_ipaddr+0x34>
 800d356:	4b18      	ldr	r3, [pc, #96]	; (800d3b8 <netif_do_set_ipaddr+0x88>)
 800d358:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d35c:	4917      	ldr	r1, [pc, #92]	; (800d3bc <netif_do_set_ipaddr+0x8c>)
 800d35e:	4818      	ldr	r0, [pc, #96]	; (800d3c0 <netif_do_set_ipaddr+0x90>)
 800d360:	f009 fdf4 	bl	8016f4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	3304      	adds	r3, #4
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d01c      	beq.n	800d3ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	3304      	adds	r3, #4
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d382:	f107 0314 	add.w	r3, r7, #20
 800d386:	4619      	mov	r1, r3
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7ff ffbf 	bl	800d30c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d002      	beq.n	800d39a <netif_do_set_ipaddr+0x6a>
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	e000      	b.n	800d39c <netif_do_set_ipaddr+0x6c>
 800d39a:	2300      	movs	r3, #0
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d3a0:	2101      	movs	r1, #1
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f000 f8d2 	bl	800d54c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e000      	b.n	800d3ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3718      	adds	r7, #24
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	08019b68 	.word	0x08019b68
 800d3bc:	08019c80 	.word	0x08019c80
 800d3c0:	08019bb8 	.word	0x08019bb8

0800d3c4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	3308      	adds	r3, #8
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d00a      	beq.n	800d3f4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d002      	beq.n	800d3ea <netif_do_set_netmask+0x26>
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	e000      	b.n	800d3ec <netif_do_set_netmask+0x28>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e000      	b.n	800d3f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d3f4:	2300      	movs	r3, #0
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3714      	adds	r7, #20
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d402:	b480      	push	{r7}
 800d404:	b085      	sub	sp, #20
 800d406:	af00      	add	r7, sp, #0
 800d408:	60f8      	str	r0, [r7, #12]
 800d40a:	60b9      	str	r1, [r7, #8]
 800d40c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	330c      	adds	r3, #12
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d00a      	beq.n	800d432 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d002      	beq.n	800d428 <netif_do_set_gw+0x26>
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	e000      	b.n	800d42a <netif_do_set_gw+0x28>
 800d428:	2300      	movs	r3, #0
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d42e:	2301      	movs	r3, #1
 800d430:	e000      	b.n	800d434 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b088      	sub	sp, #32
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d44e:	2300      	movs	r3, #0
 800d450:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d452:	2300      	movs	r3, #0
 800d454:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d45c:	4b1c      	ldr	r3, [pc, #112]	; (800d4d0 <netif_set_addr+0x90>)
 800d45e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d101      	bne.n	800d46a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d466:	4b1a      	ldr	r3, [pc, #104]	; (800d4d0 <netif_set_addr+0x90>)
 800d468:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d101      	bne.n	800d474 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d470:	4b17      	ldr	r3, [pc, #92]	; (800d4d0 <netif_set_addr+0x90>)
 800d472:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <netif_set_addr+0x42>
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d101      	bne.n	800d486 <netif_set_addr+0x46>
 800d482:	2301      	movs	r3, #1
 800d484:	e000      	b.n	800d488 <netif_set_addr+0x48>
 800d486:	2300      	movs	r3, #0
 800d488:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d006      	beq.n	800d49e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d490:	f107 0310 	add.w	r3, r7, #16
 800d494:	461a      	mov	r2, r3
 800d496:	68b9      	ldr	r1, [r7, #8]
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f7ff ff49 	bl	800d330 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d49e:	69fa      	ldr	r2, [r7, #28]
 800d4a0:	6879      	ldr	r1, [r7, #4]
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f7ff ff8e 	bl	800d3c4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d4a8:	69ba      	ldr	r2, [r7, #24]
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7ff ffa8 	bl	800d402 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d106      	bne.n	800d4c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d4b8:	f107 0310 	add.w	r3, r7, #16
 800d4bc:	461a      	mov	r2, r3
 800d4be:	68b9      	ldr	r1, [r7, #8]
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f7ff ff35 	bl	800d330 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d4c6:	bf00      	nop
 800d4c8:	3720      	adds	r7, #32
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	0801ead4 	.word	0x0801ead4

0800d4d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d4dc:	4a04      	ldr	r2, [pc, #16]	; (800d4f0 <netif_set_default+0x1c>)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d4e2:	bf00      	nop
 800d4e4:	370c      	adds	r7, #12
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	200114c0 	.word	0x200114c0

0800d4f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d107      	bne.n	800d512 <netif_set_up+0x1e>
 800d502:	4b0f      	ldr	r3, [pc, #60]	; (800d540 <netif_set_up+0x4c>)
 800d504:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d508:	490e      	ldr	r1, [pc, #56]	; (800d544 <netif_set_up+0x50>)
 800d50a:	480f      	ldr	r0, [pc, #60]	; (800d548 <netif_set_up+0x54>)
 800d50c:	f009 fd1e 	bl	8016f4c <iprintf>
 800d510:	e013      	b.n	800d53a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10c      	bne.n	800d53a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d526:	f043 0301 	orr.w	r3, r3, #1
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d532:	2103      	movs	r1, #3
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 f809 	bl	800d54c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	08019b68 	.word	0x08019b68
 800d544:	08019cf0 	.word	0x08019cf0
 800d548:	08019bb8 	.word	0x08019bb8

0800d54c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	460b      	mov	r3, r1
 800d556:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d106      	bne.n	800d56c <netif_issue_reports+0x20>
 800d55e:	4b18      	ldr	r3, [pc, #96]	; (800d5c0 <netif_issue_reports+0x74>)
 800d560:	f240 326d 	movw	r2, #877	; 0x36d
 800d564:	4917      	ldr	r1, [pc, #92]	; (800d5c4 <netif_issue_reports+0x78>)
 800d566:	4818      	ldr	r0, [pc, #96]	; (800d5c8 <netif_issue_reports+0x7c>)
 800d568:	f009 fcf0 	bl	8016f4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d572:	f003 0304 	and.w	r3, r3, #4
 800d576:	2b00      	cmp	r3, #0
 800d578:	d01e      	beq.n	800d5b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d580:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d584:	2b00      	cmp	r3, #0
 800d586:	d017      	beq.n	800d5b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d588:	78fb      	ldrb	r3, [r7, #3]
 800d58a:	f003 0301 	and.w	r3, r3, #1
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d013      	beq.n	800d5ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	3304      	adds	r3, #4
 800d596:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00e      	beq.n	800d5ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5a2:	f003 0308 	and.w	r3, r3, #8
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d007      	beq.n	800d5ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f008 f8df 	bl	8015774 <etharp_request>
 800d5b6:	e000      	b.n	800d5ba <netif_issue_reports+0x6e>
    return;
 800d5b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	08019b68 	.word	0x08019b68
 800d5c4:	08019d0c 	.word	0x08019d0c
 800d5c8:	08019bb8 	.word	0x08019bb8

0800d5cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d107      	bne.n	800d5ea <netif_set_down+0x1e>
 800d5da:	4b12      	ldr	r3, [pc, #72]	; (800d624 <netif_set_down+0x58>)
 800d5dc:	f240 329b 	movw	r2, #923	; 0x39b
 800d5e0:	4911      	ldr	r1, [pc, #68]	; (800d628 <netif_set_down+0x5c>)
 800d5e2:	4812      	ldr	r0, [pc, #72]	; (800d62c <netif_set_down+0x60>)
 800d5e4:	f009 fcb2 	bl	8016f4c <iprintf>
 800d5e8:	e019      	b.n	800d61e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5f0:	f003 0301 	and.w	r3, r3, #1
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d012      	beq.n	800d61e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5fe:	f023 0301 	bic.w	r3, r3, #1
 800d602:	b2da      	uxtb	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d610:	f003 0308 	and.w	r3, r3, #8
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f007 fc69 	bl	8014ef0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	08019b68 	.word	0x08019b68
 800d628:	08019d30 	.word	0x08019d30
 800d62c:	08019bb8 	.word	0x08019bb8

0800d630 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	61da      	str	r2, [r3, #28]
  }
}
 800d646:	bf00      	nop
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d652:	b480      	push	{r7}
 800d654:	b085      	sub	sp, #20
 800d656:	af00      	add	r7, sp, #0
 800d658:	60f8      	str	r0, [r7, #12]
 800d65a:	60b9      	str	r1, [r7, #8]
 800d65c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d65e:	f06f 030b 	mvn.w	r3, #11
}
 800d662:	4618      	mov	r0, r3
 800d664:	3714      	adds	r7, #20
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
	...

0800d670 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d670:	b480      	push	{r7}
 800d672:	b085      	sub	sp, #20
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d67a:	79fb      	ldrb	r3, [r7, #7]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d013      	beq.n	800d6a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d680:	4b0d      	ldr	r3, [pc, #52]	; (800d6b8 <netif_get_by_index+0x48>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	60fb      	str	r3, [r7, #12]
 800d686:	e00c      	b.n	800d6a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d68e:	3301      	adds	r3, #1
 800d690:	b2db      	uxtb	r3, r3
 800d692:	79fa      	ldrb	r2, [r7, #7]
 800d694:	429a      	cmp	r2, r3
 800d696:	d101      	bne.n	800d69c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	e006      	b.n	800d6aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	60fb      	str	r3, [r7, #12]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d1ef      	bne.n	800d688 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3714      	adds	r7, #20
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	200114bc 	.word	0x200114bc

0800d6bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d6c2:	4b0c      	ldr	r3, [pc, #48]	; (800d6f4 <pbuf_free_ooseq+0x38>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6c8:	4b0b      	ldr	r3, [pc, #44]	; (800d6f8 <pbuf_free_ooseq+0x3c>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	607b      	str	r3, [r7, #4]
 800d6ce:	e00a      	b.n	800d6e6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d003      	beq.n	800d6e0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f002 fbe3 	bl	800fea4 <tcp_free_ooseq>
      return;
 800d6de:	e005      	b.n	800d6ec <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	607b      	str	r3, [r7, #4]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1f1      	bne.n	800d6d0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	200114c4 	.word	0x200114c4
 800d6f8:	200114cc 	.word	0x200114cc

0800d6fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d700:	4b03      	ldr	r3, [pc, #12]	; (800d710 <pbuf_pool_is_empty+0x14>)
 800d702:	2201      	movs	r2, #1
 800d704:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d706:	bf00      	nop
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr
 800d710:	200114c4 	.word	0x200114c4

0800d714 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	4611      	mov	r1, r2
 800d720:	461a      	mov	r2, r3
 800d722:	460b      	mov	r3, r1
 800d724:	80fb      	strh	r3, [r7, #6]
 800d726:	4613      	mov	r3, r2
 800d728:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2200      	movs	r2, #0
 800d72e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	88fa      	ldrh	r2, [r7, #6]
 800d73a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	88ba      	ldrh	r2, [r7, #4]
 800d740:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d742:	8b3b      	ldrh	r3, [r7, #24]
 800d744:	b2da      	uxtb	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	7f3a      	ldrb	r2, [r7, #28]
 800d74e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2201      	movs	r2, #1
 800d754:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	73da      	strb	r2, [r3, #15]
}
 800d75c:	bf00      	nop
 800d75e:	3714      	adds	r7, #20
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08c      	sub	sp, #48	; 0x30
 800d76c:	af02      	add	r7, sp, #8
 800d76e:	4603      	mov	r3, r0
 800d770:	71fb      	strb	r3, [r7, #7]
 800d772:	460b      	mov	r3, r1
 800d774:	80bb      	strh	r3, [r7, #4]
 800d776:	4613      	mov	r3, r2
 800d778:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d77a:	79fb      	ldrb	r3, [r7, #7]
 800d77c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d77e:	887b      	ldrh	r3, [r7, #2]
 800d780:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d784:	d07f      	beq.n	800d886 <pbuf_alloc+0x11e>
 800d786:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d78a:	f300 80c8 	bgt.w	800d91e <pbuf_alloc+0x1b6>
 800d78e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d792:	d010      	beq.n	800d7b6 <pbuf_alloc+0x4e>
 800d794:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d798:	f300 80c1 	bgt.w	800d91e <pbuf_alloc+0x1b6>
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d002      	beq.n	800d7a6 <pbuf_alloc+0x3e>
 800d7a0:	2b41      	cmp	r3, #65	; 0x41
 800d7a2:	f040 80bc 	bne.w	800d91e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d7a6:	887a      	ldrh	r2, [r7, #2]
 800d7a8:	88bb      	ldrh	r3, [r7, #4]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	f000 f8d1 	bl	800d954 <pbuf_alloc_reference>
 800d7b2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d7b4:	e0bd      	b.n	800d932 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d7be:	88bb      	ldrh	r3, [r7, #4]
 800d7c0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d7c2:	2008      	movs	r0, #8
 800d7c4:	f7ff fc56 	bl	800d074 <memp_malloc>
 800d7c8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d109      	bne.n	800d7e4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d7d0:	f7ff ff94 	bl	800d6fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d002      	beq.n	800d7e0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d7da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7dc:	f000 faa8 	bl	800dd30 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	e0a7      	b.n	800d934 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d7e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7e6:	3303      	adds	r3, #3
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	f023 0303 	bic.w	r3, r3, #3
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	8b7a      	ldrh	r2, [r7, #26]
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	bf28      	it	cs
 800d7fc:	4613      	movcs	r3, r2
 800d7fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d800:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d802:	3310      	adds	r3, #16
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	4413      	add	r3, r2
 800d808:	3303      	adds	r3, #3
 800d80a:	f023 0303 	bic.w	r3, r3, #3
 800d80e:	4618      	mov	r0, r3
 800d810:	89f9      	ldrh	r1, [r7, #14]
 800d812:	8b7a      	ldrh	r2, [r7, #26]
 800d814:	2300      	movs	r3, #0
 800d816:	9301      	str	r3, [sp, #4]
 800d818:	887b      	ldrh	r3, [r7, #2]
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	460b      	mov	r3, r1
 800d81e:	4601      	mov	r1, r0
 800d820:	6938      	ldr	r0, [r7, #16]
 800d822:	f7ff ff77 	bl	800d714 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	f003 0303 	and.w	r3, r3, #3
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d006      	beq.n	800d840 <pbuf_alloc+0xd8>
 800d832:	4b42      	ldr	r3, [pc, #264]	; (800d93c <pbuf_alloc+0x1d4>)
 800d834:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d838:	4941      	ldr	r1, [pc, #260]	; (800d940 <pbuf_alloc+0x1d8>)
 800d83a:	4842      	ldr	r0, [pc, #264]	; (800d944 <pbuf_alloc+0x1dc>)
 800d83c:	f009 fb86 	bl	8016f4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d840:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d842:	3303      	adds	r3, #3
 800d844:	f023 0303 	bic.w	r3, r3, #3
 800d848:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d84c:	d106      	bne.n	800d85c <pbuf_alloc+0xf4>
 800d84e:	4b3b      	ldr	r3, [pc, #236]	; (800d93c <pbuf_alloc+0x1d4>)
 800d850:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d854:	493c      	ldr	r1, [pc, #240]	; (800d948 <pbuf_alloc+0x1e0>)
 800d856:	483b      	ldr	r0, [pc, #236]	; (800d944 <pbuf_alloc+0x1dc>)
 800d858:	f009 fb78 	bl	8016f4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d102      	bne.n	800d868 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	627b      	str	r3, [r7, #36]	; 0x24
 800d866:	e002      	b.n	800d86e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d872:	8b7a      	ldrh	r2, [r7, #26]
 800d874:	89fb      	ldrh	r3, [r7, #14]
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d87a:	2300      	movs	r3, #0
 800d87c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d87e:	8b7b      	ldrh	r3, [r7, #26]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d19e      	bne.n	800d7c2 <pbuf_alloc+0x5a>
      break;
 800d884:	e055      	b.n	800d932 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d888:	3303      	adds	r3, #3
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	f023 0303 	bic.w	r3, r3, #3
 800d890:	b29a      	uxth	r2, r3
 800d892:	88bb      	ldrh	r3, [r7, #4]
 800d894:	3303      	adds	r3, #3
 800d896:	b29b      	uxth	r3, r3
 800d898:	f023 0303 	bic.w	r3, r3, #3
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	4413      	add	r3, r2
 800d8a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d8a2:	8b3b      	ldrh	r3, [r7, #24]
 800d8a4:	3310      	adds	r3, #16
 800d8a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d8a8:	8b3a      	ldrh	r2, [r7, #24]
 800d8aa:	88bb      	ldrh	r3, [r7, #4]
 800d8ac:	3303      	adds	r3, #3
 800d8ae:	f023 0303 	bic.w	r3, r3, #3
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d306      	bcc.n	800d8c4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d8b6:	8afa      	ldrh	r2, [r7, #22]
 800d8b8:	88bb      	ldrh	r3, [r7, #4]
 800d8ba:	3303      	adds	r3, #3
 800d8bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d201      	bcs.n	800d8c8 <pbuf_alloc+0x160>
        return NULL;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	e035      	b.n	800d934 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d8c8:	8afb      	ldrh	r3, [r7, #22]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7ff fa64 	bl	800cd98 <mem_malloc>
 800d8d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <pbuf_alloc+0x174>
        return NULL;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	e02b      	b.n	800d934 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d8dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8de:	3310      	adds	r3, #16
 800d8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8e2:	4413      	add	r3, r2
 800d8e4:	3303      	adds	r3, #3
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	88b9      	ldrh	r1, [r7, #4]
 800d8ee:	88ba      	ldrh	r2, [r7, #4]
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	9301      	str	r3, [sp, #4]
 800d8f4:	887b      	ldrh	r3, [r7, #2]
 800d8f6:	9300      	str	r3, [sp, #0]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4601      	mov	r1, r0
 800d8fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8fe:	f7ff ff09 	bl	800d714 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	f003 0303 	and.w	r3, r3, #3
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d010      	beq.n	800d930 <pbuf_alloc+0x1c8>
 800d90e:	4b0b      	ldr	r3, [pc, #44]	; (800d93c <pbuf_alloc+0x1d4>)
 800d910:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d914:	490d      	ldr	r1, [pc, #52]	; (800d94c <pbuf_alloc+0x1e4>)
 800d916:	480b      	ldr	r0, [pc, #44]	; (800d944 <pbuf_alloc+0x1dc>)
 800d918:	f009 fb18 	bl	8016f4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d91c:	e008      	b.n	800d930 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d91e:	4b07      	ldr	r3, [pc, #28]	; (800d93c <pbuf_alloc+0x1d4>)
 800d920:	f240 1227 	movw	r2, #295	; 0x127
 800d924:	490a      	ldr	r1, [pc, #40]	; (800d950 <pbuf_alloc+0x1e8>)
 800d926:	4807      	ldr	r0, [pc, #28]	; (800d944 <pbuf_alloc+0x1dc>)
 800d928:	f009 fb10 	bl	8016f4c <iprintf>
      return NULL;
 800d92c:	2300      	movs	r3, #0
 800d92e:	e001      	b.n	800d934 <pbuf_alloc+0x1cc>
      break;
 800d930:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d934:	4618      	mov	r0, r3
 800d936:	3728      	adds	r7, #40	; 0x28
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	08019d98 	.word	0x08019d98
 800d940:	08019dc8 	.word	0x08019dc8
 800d944:	08019df8 	.word	0x08019df8
 800d948:	08019e20 	.word	0x08019e20
 800d94c:	08019e54 	.word	0x08019e54
 800d950:	08019e80 	.word	0x08019e80

0800d954 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af02      	add	r7, sp, #8
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	460b      	mov	r3, r1
 800d95e:	807b      	strh	r3, [r7, #2]
 800d960:	4613      	mov	r3, r2
 800d962:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d964:	883b      	ldrh	r3, [r7, #0]
 800d966:	2b41      	cmp	r3, #65	; 0x41
 800d968:	d009      	beq.n	800d97e <pbuf_alloc_reference+0x2a>
 800d96a:	883b      	ldrh	r3, [r7, #0]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d006      	beq.n	800d97e <pbuf_alloc_reference+0x2a>
 800d970:	4b0f      	ldr	r3, [pc, #60]	; (800d9b0 <pbuf_alloc_reference+0x5c>)
 800d972:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d976:	490f      	ldr	r1, [pc, #60]	; (800d9b4 <pbuf_alloc_reference+0x60>)
 800d978:	480f      	ldr	r0, [pc, #60]	; (800d9b8 <pbuf_alloc_reference+0x64>)
 800d97a:	f009 fae7 	bl	8016f4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d97e:	2007      	movs	r0, #7
 800d980:	f7ff fb78 	bl	800d074 <memp_malloc>
 800d984:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d101      	bne.n	800d990 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d98c:	2300      	movs	r3, #0
 800d98e:	e00b      	b.n	800d9a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d990:	8879      	ldrh	r1, [r7, #2]
 800d992:	887a      	ldrh	r2, [r7, #2]
 800d994:	2300      	movs	r3, #0
 800d996:	9301      	str	r3, [sp, #4]
 800d998:	883b      	ldrh	r3, [r7, #0]
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	460b      	mov	r3, r1
 800d99e:	6879      	ldr	r1, [r7, #4]
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f7ff feb7 	bl	800d714 <pbuf_init_alloced_pbuf>
  return p;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	08019d98 	.word	0x08019d98
 800d9b4:	08019e9c 	.word	0x08019e9c
 800d9b8:	08019df8 	.word	0x08019df8

0800d9bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af02      	add	r7, sp, #8
 800d9c2:	607b      	str	r3, [r7, #4]
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73fb      	strb	r3, [r7, #15]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	81bb      	strh	r3, [r7, #12]
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
 800d9d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d9d4:	8a7b      	ldrh	r3, [r7, #18]
 800d9d6:	3303      	adds	r3, #3
 800d9d8:	f023 0203 	bic.w	r2, r3, #3
 800d9dc:	89bb      	ldrh	r3, [r7, #12]
 800d9de:	441a      	add	r2, r3
 800d9e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d901      	bls.n	800d9ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	e018      	b.n	800da1c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d9ea:	6a3b      	ldr	r3, [r7, #32]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d007      	beq.n	800da00 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d9f0:	8a7b      	ldrh	r3, [r7, #18]
 800d9f2:	3303      	adds	r3, #3
 800d9f4:	f023 0303 	bic.w	r3, r3, #3
 800d9f8:	6a3a      	ldr	r2, [r7, #32]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	617b      	str	r3, [r7, #20]
 800d9fe:	e001      	b.n	800da04 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800da00:	2300      	movs	r3, #0
 800da02:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	89b9      	ldrh	r1, [r7, #12]
 800da08:	89ba      	ldrh	r2, [r7, #12]
 800da0a:	2302      	movs	r3, #2
 800da0c:	9301      	str	r3, [sp, #4]
 800da0e:	897b      	ldrh	r3, [r7, #10]
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	460b      	mov	r3, r1
 800da14:	6979      	ldr	r1, [r7, #20]
 800da16:	f7ff fe7d 	bl	800d714 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800da1a:	687b      	ldr	r3, [r7, #4]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3718      	adds	r7, #24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d106      	bne.n	800da44 <pbuf_realloc+0x20>
 800da36:	4b3a      	ldr	r3, [pc, #232]	; (800db20 <pbuf_realloc+0xfc>)
 800da38:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800da3c:	4939      	ldr	r1, [pc, #228]	; (800db24 <pbuf_realloc+0x100>)
 800da3e:	483a      	ldr	r0, [pc, #232]	; (800db28 <pbuf_realloc+0x104>)
 800da40:	f009 fa84 	bl	8016f4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	891b      	ldrh	r3, [r3, #8]
 800da48:	887a      	ldrh	r2, [r7, #2]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d263      	bcs.n	800db16 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	891a      	ldrh	r2, [r3, #8]
 800da52:	887b      	ldrh	r3, [r7, #2]
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800da58:	887b      	ldrh	r3, [r7, #2]
 800da5a:	817b      	strh	r3, [r7, #10]
  q = p;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800da60:	e018      	b.n	800da94 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	895b      	ldrh	r3, [r3, #10]
 800da66:	897a      	ldrh	r2, [r7, #10]
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	891a      	ldrh	r2, [r3, #8]
 800da70:	893b      	ldrh	r3, [r7, #8]
 800da72:	1ad3      	subs	r3, r2, r3
 800da74:	b29a      	uxth	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d106      	bne.n	800da94 <pbuf_realloc+0x70>
 800da86:	4b26      	ldr	r3, [pc, #152]	; (800db20 <pbuf_realloc+0xfc>)
 800da88:	f240 12af 	movw	r2, #431	; 0x1af
 800da8c:	4927      	ldr	r1, [pc, #156]	; (800db2c <pbuf_realloc+0x108>)
 800da8e:	4826      	ldr	r0, [pc, #152]	; (800db28 <pbuf_realloc+0x104>)
 800da90:	f009 fa5c 	bl	8016f4c <iprintf>
  while (rem_len > q->len) {
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	895b      	ldrh	r3, [r3, #10]
 800da98:	897a      	ldrh	r2, [r7, #10]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d8e1      	bhi.n	800da62 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	7b1b      	ldrb	r3, [r3, #12]
 800daa2:	f003 030f 	and.w	r3, r3, #15
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d121      	bne.n	800daee <pbuf_realloc+0xca>
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	895b      	ldrh	r3, [r3, #10]
 800daae:	897a      	ldrh	r2, [r7, #10]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d01c      	beq.n	800daee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	7b5b      	ldrb	r3, [r3, #13]
 800dab8:	f003 0302 	and.w	r3, r3, #2
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d116      	bne.n	800daee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	b29a      	uxth	r2, r3
 800daca:	897b      	ldrh	r3, [r7, #10]
 800dacc:	4413      	add	r3, r2
 800dace:	b29b      	uxth	r3, r3
 800dad0:	4619      	mov	r1, r3
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f7ff f864 	bl	800cba0 <mem_trim>
 800dad8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d106      	bne.n	800daee <pbuf_realloc+0xca>
 800dae0:	4b0f      	ldr	r3, [pc, #60]	; (800db20 <pbuf_realloc+0xfc>)
 800dae2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dae6:	4912      	ldr	r1, [pc, #72]	; (800db30 <pbuf_realloc+0x10c>)
 800dae8:	480f      	ldr	r0, [pc, #60]	; (800db28 <pbuf_realloc+0x104>)
 800daea:	f009 fa2f 	bl	8016f4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	897a      	ldrh	r2, [r7, #10]
 800daf2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	895a      	ldrh	r2, [r3, #10]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d004      	beq.n	800db0e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4618      	mov	r0, r3
 800db0a:	f000 f911 	bl	800dd30 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	e000      	b.n	800db18 <pbuf_realloc+0xf4>
    return;
 800db16:	bf00      	nop

}
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	08019d98 	.word	0x08019d98
 800db24:	08019eb0 	.word	0x08019eb0
 800db28:	08019df8 	.word	0x08019df8
 800db2c:	08019ec8 	.word	0x08019ec8
 800db30:	08019ee0 	.word	0x08019ee0

0800db34 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	4613      	mov	r3, r2
 800db40:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d106      	bne.n	800db56 <pbuf_add_header_impl+0x22>
 800db48:	4b2b      	ldr	r3, [pc, #172]	; (800dbf8 <pbuf_add_header_impl+0xc4>)
 800db4a:	f240 12df 	movw	r2, #479	; 0x1df
 800db4e:	492b      	ldr	r1, [pc, #172]	; (800dbfc <pbuf_add_header_impl+0xc8>)
 800db50:	482b      	ldr	r0, [pc, #172]	; (800dc00 <pbuf_add_header_impl+0xcc>)
 800db52:	f009 f9fb 	bl	8016f4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <pbuf_add_header_impl+0x30>
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db62:	d301      	bcc.n	800db68 <pbuf_add_header_impl+0x34>
    return 1;
 800db64:	2301      	movs	r3, #1
 800db66:	e043      	b.n	800dbf0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d101      	bne.n	800db72 <pbuf_add_header_impl+0x3e>
    return 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	e03e      	b.n	800dbf0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	891a      	ldrh	r2, [r3, #8]
 800db7a:	8a7b      	ldrh	r3, [r7, #18]
 800db7c:	4413      	add	r3, r2
 800db7e:	b29b      	uxth	r3, r3
 800db80:	8a7a      	ldrh	r2, [r7, #18]
 800db82:	429a      	cmp	r2, r3
 800db84:	d901      	bls.n	800db8a <pbuf_add_header_impl+0x56>
    return 1;
 800db86:	2301      	movs	r3, #1
 800db88:	e032      	b.n	800dbf0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	7b1b      	ldrb	r3, [r3, #12]
 800db8e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800db90:	8a3b      	ldrh	r3, [r7, #16]
 800db92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00c      	beq.n	800dbb4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	685a      	ldr	r2, [r3, #4]
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	425b      	negs	r3, r3
 800dba2:	4413      	add	r3, r2
 800dba4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	3310      	adds	r3, #16
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d20d      	bcs.n	800dbcc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e01d      	b.n	800dbf0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dbb4:	79fb      	ldrb	r3, [r7, #7]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d006      	beq.n	800dbc8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	685a      	ldr	r2, [r3, #4]
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	425b      	negs	r3, r3
 800dbc2:	4413      	add	r3, r2
 800dbc4:	617b      	str	r3, [r7, #20]
 800dbc6:	e001      	b.n	800dbcc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e011      	b.n	800dbf0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	895a      	ldrh	r2, [r3, #10]
 800dbd6:	8a7b      	ldrh	r3, [r7, #18]
 800dbd8:	4413      	add	r3, r2
 800dbda:	b29a      	uxth	r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	891a      	ldrh	r2, [r3, #8]
 800dbe4:	8a7b      	ldrh	r3, [r7, #18]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	811a      	strh	r2, [r3, #8]


  return 0;
 800dbee:	2300      	movs	r3, #0
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	08019d98 	.word	0x08019d98
 800dbfc:	08019efc 	.word	0x08019efc
 800dc00:	08019df8 	.word	0x08019df8

0800dc04 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dc0e:	2200      	movs	r2, #0
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff ff8e 	bl	800db34 <pbuf_add_header_impl>
 800dc18:	4603      	mov	r3, r0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d106      	bne.n	800dc42 <pbuf_remove_header+0x1e>
 800dc34:	4b20      	ldr	r3, [pc, #128]	; (800dcb8 <pbuf_remove_header+0x94>)
 800dc36:	f240 224b 	movw	r2, #587	; 0x24b
 800dc3a:	4920      	ldr	r1, [pc, #128]	; (800dcbc <pbuf_remove_header+0x98>)
 800dc3c:	4820      	ldr	r0, [pc, #128]	; (800dcc0 <pbuf_remove_header+0x9c>)
 800dc3e:	f009 f985 	bl	8016f4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d003      	beq.n	800dc50 <pbuf_remove_header+0x2c>
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc4e:	d301      	bcc.n	800dc54 <pbuf_remove_header+0x30>
    return 1;
 800dc50:	2301      	movs	r3, #1
 800dc52:	e02c      	b.n	800dcae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <pbuf_remove_header+0x3a>
    return 0;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	e027      	b.n	800dcae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	895b      	ldrh	r3, [r3, #10]
 800dc66:	89fa      	ldrh	r2, [r7, #14]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d908      	bls.n	800dc7e <pbuf_remove_header+0x5a>
 800dc6c:	4b12      	ldr	r3, [pc, #72]	; (800dcb8 <pbuf_remove_header+0x94>)
 800dc6e:	f240 2255 	movw	r2, #597	; 0x255
 800dc72:	4914      	ldr	r1, [pc, #80]	; (800dcc4 <pbuf_remove_header+0xa0>)
 800dc74:	4812      	ldr	r0, [pc, #72]	; (800dcc0 <pbuf_remove_header+0x9c>)
 800dc76:	f009 f969 	bl	8016f4c <iprintf>
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e017      	b.n	800dcae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	685a      	ldr	r2, [r3, #4]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	441a      	add	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	895a      	ldrh	r2, [r3, #10]
 800dc94:	89fb      	ldrh	r3, [r7, #14]
 800dc96:	1ad3      	subs	r3, r2, r3
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	891a      	ldrh	r2, [r3, #8]
 800dca2:	89fb      	ldrh	r3, [r7, #14]
 800dca4:	1ad3      	subs	r3, r2, r3
 800dca6:	b29a      	uxth	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	08019d98 	.word	0x08019d98
 800dcbc:	08019efc 	.word	0x08019efc
 800dcc0:	08019df8 	.word	0x08019df8
 800dcc4:	08019f08 	.word	0x08019f08

0800dcc8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	807b      	strh	r3, [r7, #2]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dcd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	da08      	bge.n	800dcf2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dce0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dce4:	425b      	negs	r3, r3
 800dce6:	4619      	mov	r1, r3
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f7ff ff9b 	bl	800dc24 <pbuf_remove_header>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	e007      	b.n	800dd02 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dcf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dcf6:	787a      	ldrb	r2, [r7, #1]
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7ff ff1a 	bl	800db34 <pbuf_add_header_impl>
 800dd00:	4603      	mov	r3, r0
  }
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	460b      	mov	r3, r1
 800dd14:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dd16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff ffd2 	bl	800dcc8 <pbuf_header_impl>
 800dd24:	4603      	mov	r3, r0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
	...

0800dd30 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10b      	bne.n	800dd56 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d106      	bne.n	800dd52 <pbuf_free+0x22>
 800dd44:	4b38      	ldr	r3, [pc, #224]	; (800de28 <pbuf_free+0xf8>)
 800dd46:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800dd4a:	4938      	ldr	r1, [pc, #224]	; (800de2c <pbuf_free+0xfc>)
 800dd4c:	4838      	ldr	r0, [pc, #224]	; (800de30 <pbuf_free+0x100>)
 800dd4e:	f009 f8fd 	bl	8016f4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dd52:	2300      	movs	r3, #0
 800dd54:	e063      	b.n	800de1e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800dd56:	2300      	movs	r3, #0
 800dd58:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dd5a:	e05c      	b.n	800de16 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	7b9b      	ldrb	r3, [r3, #14]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d106      	bne.n	800dd72 <pbuf_free+0x42>
 800dd64:	4b30      	ldr	r3, [pc, #192]	; (800de28 <pbuf_free+0xf8>)
 800dd66:	f240 22f1 	movw	r2, #753	; 0x2f1
 800dd6a:	4932      	ldr	r1, [pc, #200]	; (800de34 <pbuf_free+0x104>)
 800dd6c:	4830      	ldr	r0, [pc, #192]	; (800de30 <pbuf_free+0x100>)
 800dd6e:	f009 f8ed 	bl	8016f4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	7b9b      	ldrb	r3, [r3, #14]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	739a      	strb	r2, [r3, #14]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	7b9b      	ldrb	r3, [r3, #14]
 800dd82:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dd84:	7dbb      	ldrb	r3, [r7, #22]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d143      	bne.n	800de12 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	7b1b      	ldrb	r3, [r3, #12]
 800dd94:	f003 030f 	and.w	r3, r3, #15
 800dd98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	7b5b      	ldrb	r3, [r3, #13]
 800dd9e:	f003 0302 	and.w	r3, r3, #2
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d011      	beq.n	800ddca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d106      	bne.n	800ddc0 <pbuf_free+0x90>
 800ddb2:	4b1d      	ldr	r3, [pc, #116]	; (800de28 <pbuf_free+0xf8>)
 800ddb4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ddb8:	491f      	ldr	r1, [pc, #124]	; (800de38 <pbuf_free+0x108>)
 800ddba:	481d      	ldr	r0, [pc, #116]	; (800de30 <pbuf_free+0x100>)
 800ddbc:	f009 f8c6 	bl	8016f4c <iprintf>
        pc->custom_free_function(p);
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	4798      	blx	r3
 800ddc8:	e01d      	b.n	800de06 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ddca:	7bfb      	ldrb	r3, [r7, #15]
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d104      	bne.n	800ddda <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800ddd0:	6879      	ldr	r1, [r7, #4]
 800ddd2:	2008      	movs	r0, #8
 800ddd4:	f7ff f99a 	bl	800d10c <memp_free>
 800ddd8:	e015      	b.n	800de06 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ddda:	7bfb      	ldrb	r3, [r7, #15]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d104      	bne.n	800ddea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800dde0:	6879      	ldr	r1, [r7, #4]
 800dde2:	2007      	movs	r0, #7
 800dde4:	f7ff f992 	bl	800d10c <memp_free>
 800dde8:	e00d      	b.n	800de06 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ddea:	7bfb      	ldrb	r3, [r7, #15]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d103      	bne.n	800ddf8 <pbuf_free+0xc8>
          mem_free(p);
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7fe fe6b 	bl	800cacc <mem_free>
 800ddf6:	e006      	b.n	800de06 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ddf8:	4b0b      	ldr	r3, [pc, #44]	; (800de28 <pbuf_free+0xf8>)
 800ddfa:	f240 320f 	movw	r2, #783	; 0x30f
 800ddfe:	490f      	ldr	r1, [pc, #60]	; (800de3c <pbuf_free+0x10c>)
 800de00:	480b      	ldr	r0, [pc, #44]	; (800de30 <pbuf_free+0x100>)
 800de02:	f009 f8a3 	bl	8016f4c <iprintf>
        }
      }
      count++;
 800de06:	7dfb      	ldrb	r3, [r7, #23]
 800de08:	3301      	adds	r3, #1
 800de0a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	607b      	str	r3, [r7, #4]
 800de10:	e001      	b.n	800de16 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800de12:	2300      	movs	r3, #0
 800de14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d19f      	bne.n	800dd5c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	08019d98 	.word	0x08019d98
 800de2c:	08019efc 	.word	0x08019efc
 800de30:	08019df8 	.word	0x08019df8
 800de34:	08019f28 	.word	0x08019f28
 800de38:	08019f40 	.word	0x08019f40
 800de3c:	08019f64 	.word	0x08019f64

0800de40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800de48:	2300      	movs	r3, #0
 800de4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800de4c:	e005      	b.n	800de5a <pbuf_clen+0x1a>
    ++len;
 800de4e:	89fb      	ldrh	r3, [r7, #14]
 800de50:	3301      	adds	r3, #1
 800de52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d1f6      	bne.n	800de4e <pbuf_clen+0xe>
  }
  return len;
 800de60:	89fb      	ldrh	r3, [r7, #14]
}
 800de62:	4618      	mov	r0, r3
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
	...

0800de70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d010      	beq.n	800dea0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	7b9b      	ldrb	r3, [r3, #14]
 800de82:	3301      	adds	r3, #1
 800de84:	b2da      	uxtb	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	7b9b      	ldrb	r3, [r3, #14]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d106      	bne.n	800dea0 <pbuf_ref+0x30>
 800de92:	4b05      	ldr	r3, [pc, #20]	; (800dea8 <pbuf_ref+0x38>)
 800de94:	f240 3242 	movw	r2, #834	; 0x342
 800de98:	4904      	ldr	r1, [pc, #16]	; (800deac <pbuf_ref+0x3c>)
 800de9a:	4805      	ldr	r0, [pc, #20]	; (800deb0 <pbuf_ref+0x40>)
 800de9c:	f009 f856 	bl	8016f4c <iprintf>
  }
}
 800dea0:	bf00      	nop
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	08019d98 	.word	0x08019d98
 800deac:	08019f78 	.word	0x08019f78
 800deb0:	08019df8 	.word	0x08019df8

0800deb4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <pbuf_cat+0x16>
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d107      	bne.n	800deda <pbuf_cat+0x26>
 800deca:	4b20      	ldr	r3, [pc, #128]	; (800df4c <pbuf_cat+0x98>)
 800decc:	f240 3259 	movw	r2, #857	; 0x359
 800ded0:	491f      	ldr	r1, [pc, #124]	; (800df50 <pbuf_cat+0x9c>)
 800ded2:	4820      	ldr	r0, [pc, #128]	; (800df54 <pbuf_cat+0xa0>)
 800ded4:	f009 f83a 	bl	8016f4c <iprintf>
 800ded8:	e034      	b.n	800df44 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	e00a      	b.n	800def6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	891a      	ldrh	r2, [r3, #8]
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	891b      	ldrh	r3, [r3, #8]
 800dee8:	4413      	add	r3, r2
 800deea:	b29a      	uxth	r2, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	60fb      	str	r3, [r7, #12]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d1f0      	bne.n	800dee0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	891a      	ldrh	r2, [r3, #8]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	895b      	ldrh	r3, [r3, #10]
 800df06:	429a      	cmp	r2, r3
 800df08:	d006      	beq.n	800df18 <pbuf_cat+0x64>
 800df0a:	4b10      	ldr	r3, [pc, #64]	; (800df4c <pbuf_cat+0x98>)
 800df0c:	f240 3262 	movw	r2, #866	; 0x362
 800df10:	4911      	ldr	r1, [pc, #68]	; (800df58 <pbuf_cat+0xa4>)
 800df12:	4810      	ldr	r0, [pc, #64]	; (800df54 <pbuf_cat+0xa0>)
 800df14:	f009 f81a 	bl	8016f4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d006      	beq.n	800df2e <pbuf_cat+0x7a>
 800df20:	4b0a      	ldr	r3, [pc, #40]	; (800df4c <pbuf_cat+0x98>)
 800df22:	f240 3263 	movw	r2, #867	; 0x363
 800df26:	490d      	ldr	r1, [pc, #52]	; (800df5c <pbuf_cat+0xa8>)
 800df28:	480a      	ldr	r0, [pc, #40]	; (800df54 <pbuf_cat+0xa0>)
 800df2a:	f009 f80f 	bl	8016f4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	891a      	ldrh	r2, [r3, #8]
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	891b      	ldrh	r3, [r3, #8]
 800df36:	4413      	add	r3, r2
 800df38:	b29a      	uxth	r2, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	08019d98 	.word	0x08019d98
 800df50:	08019f8c 	.word	0x08019f8c
 800df54:	08019df8 	.word	0x08019df8
 800df58:	08019fc4 	.word	0x08019fc4
 800df5c:	08019ff4 	.word	0x08019ff4

0800df60 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800df6a:	2300      	movs	r3, #0
 800df6c:	617b      	str	r3, [r7, #20]
 800df6e:	2300      	movs	r3, #0
 800df70:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d008      	beq.n	800df8a <pbuf_copy+0x2a>
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d005      	beq.n	800df8a <pbuf_copy+0x2a>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	891a      	ldrh	r2, [r3, #8]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	891b      	ldrh	r3, [r3, #8]
 800df86:	429a      	cmp	r2, r3
 800df88:	d209      	bcs.n	800df9e <pbuf_copy+0x3e>
 800df8a:	4b57      	ldr	r3, [pc, #348]	; (800e0e8 <pbuf_copy+0x188>)
 800df8c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800df90:	4956      	ldr	r1, [pc, #344]	; (800e0ec <pbuf_copy+0x18c>)
 800df92:	4857      	ldr	r0, [pc, #348]	; (800e0f0 <pbuf_copy+0x190>)
 800df94:	f008 ffda 	bl	8016f4c <iprintf>
 800df98:	f06f 030f 	mvn.w	r3, #15
 800df9c:	e09f      	b.n	800e0de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	895b      	ldrh	r3, [r3, #10]
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	1ad2      	subs	r2, r2, r3
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	895b      	ldrh	r3, [r3, #10]
 800dfac:	4619      	mov	r1, r3
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	1acb      	subs	r3, r1, r3
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d306      	bcc.n	800dfc4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	895b      	ldrh	r3, [r3, #10]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	60fb      	str	r3, [r7, #12]
 800dfc2:	e005      	b.n	800dfd0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	895b      	ldrh	r3, [r3, #10]
 800dfc8:	461a      	mov	r2, r3
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	18d0      	adds	r0, r2, r3
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	685a      	ldr	r2, [r3, #4]
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	4413      	add	r3, r2
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	f008 ff82 	bl	8016eec <memcpy>
    offset_to += len;
 800dfe8:	697a      	ldr	r2, [r7, #20]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	4413      	add	r3, r2
 800dfee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dff0:	693a      	ldr	r2, [r7, #16]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	4413      	add	r3, r2
 800dff6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	895b      	ldrh	r3, [r3, #10]
 800dffc:	461a      	mov	r2, r3
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	4293      	cmp	r3, r2
 800e002:	d906      	bls.n	800e012 <pbuf_copy+0xb2>
 800e004:	4b38      	ldr	r3, [pc, #224]	; (800e0e8 <pbuf_copy+0x188>)
 800e006:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e00a:	493a      	ldr	r1, [pc, #232]	; (800e0f4 <pbuf_copy+0x194>)
 800e00c:	4838      	ldr	r0, [pc, #224]	; (800e0f0 <pbuf_copy+0x190>)
 800e00e:	f008 ff9d 	bl	8016f4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	895b      	ldrh	r3, [r3, #10]
 800e016:	461a      	mov	r2, r3
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d906      	bls.n	800e02c <pbuf_copy+0xcc>
 800e01e:	4b32      	ldr	r3, [pc, #200]	; (800e0e8 <pbuf_copy+0x188>)
 800e020:	f240 32da 	movw	r2, #986	; 0x3da
 800e024:	4934      	ldr	r1, [pc, #208]	; (800e0f8 <pbuf_copy+0x198>)
 800e026:	4832      	ldr	r0, [pc, #200]	; (800e0f0 <pbuf_copy+0x190>)
 800e028:	f008 ff90 	bl	8016f4c <iprintf>
    if (offset_from >= p_from->len) {
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	895b      	ldrh	r3, [r3, #10]
 800e030:	461a      	mov	r2, r3
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	4293      	cmp	r3, r2
 800e036:	d304      	bcc.n	800e042 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e038:	2300      	movs	r3, #0
 800e03a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	895b      	ldrh	r3, [r3, #10]
 800e046:	461a      	mov	r2, r3
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d114      	bne.n	800e078 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e04e:	2300      	movs	r3, #0
 800e050:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10c      	bne.n	800e078 <pbuf_copy+0x118>
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d009      	beq.n	800e078 <pbuf_copy+0x118>
 800e064:	4b20      	ldr	r3, [pc, #128]	; (800e0e8 <pbuf_copy+0x188>)
 800e066:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e06a:	4924      	ldr	r1, [pc, #144]	; (800e0fc <pbuf_copy+0x19c>)
 800e06c:	4820      	ldr	r0, [pc, #128]	; (800e0f0 <pbuf_copy+0x190>)
 800e06e:	f008 ff6d 	bl	8016f4c <iprintf>
 800e072:	f06f 030f 	mvn.w	r3, #15
 800e076:	e032      	b.n	800e0de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d013      	beq.n	800e0a6 <pbuf_copy+0x146>
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	895a      	ldrh	r2, [r3, #10]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	891b      	ldrh	r3, [r3, #8]
 800e086:	429a      	cmp	r2, r3
 800e088:	d10d      	bne.n	800e0a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d009      	beq.n	800e0a6 <pbuf_copy+0x146>
 800e092:	4b15      	ldr	r3, [pc, #84]	; (800e0e8 <pbuf_copy+0x188>)
 800e094:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e098:	4919      	ldr	r1, [pc, #100]	; (800e100 <pbuf_copy+0x1a0>)
 800e09a:	4815      	ldr	r0, [pc, #84]	; (800e0f0 <pbuf_copy+0x190>)
 800e09c:	f008 ff56 	bl	8016f4c <iprintf>
 800e0a0:	f06f 0305 	mvn.w	r3, #5
 800e0a4:	e01b      	b.n	800e0de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d013      	beq.n	800e0d4 <pbuf_copy+0x174>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	895a      	ldrh	r2, [r3, #10]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	891b      	ldrh	r3, [r3, #8]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d10d      	bne.n	800e0d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d009      	beq.n	800e0d4 <pbuf_copy+0x174>
 800e0c0:	4b09      	ldr	r3, [pc, #36]	; (800e0e8 <pbuf_copy+0x188>)
 800e0c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e0c6:	490e      	ldr	r1, [pc, #56]	; (800e100 <pbuf_copy+0x1a0>)
 800e0c8:	4809      	ldr	r0, [pc, #36]	; (800e0f0 <pbuf_copy+0x190>)
 800e0ca:	f008 ff3f 	bl	8016f4c <iprintf>
 800e0ce:	f06f 0305 	mvn.w	r3, #5
 800e0d2:	e004      	b.n	800e0de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f47f af61 	bne.w	800df9e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e0dc:	2300      	movs	r3, #0
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3718      	adds	r7, #24
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	08019d98 	.word	0x08019d98
 800e0ec:	0801a040 	.word	0x0801a040
 800e0f0:	08019df8 	.word	0x08019df8
 800e0f4:	0801a070 	.word	0x0801a070
 800e0f8:	0801a088 	.word	0x0801a088
 800e0fc:	0801a0a4 	.word	0x0801a0a4
 800e100:	0801a0b4 	.word	0x0801a0b4

0800e104 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b088      	sub	sp, #32
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	4611      	mov	r1, r2
 800e110:	461a      	mov	r2, r3
 800e112:	460b      	mov	r3, r1
 800e114:	80fb      	strh	r3, [r7, #6]
 800e116:	4613      	mov	r3, r2
 800e118:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e11a:	2300      	movs	r3, #0
 800e11c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d108      	bne.n	800e13a <pbuf_copy_partial+0x36>
 800e128:	4b2b      	ldr	r3, [pc, #172]	; (800e1d8 <pbuf_copy_partial+0xd4>)
 800e12a:	f240 420a 	movw	r2, #1034	; 0x40a
 800e12e:	492b      	ldr	r1, [pc, #172]	; (800e1dc <pbuf_copy_partial+0xd8>)
 800e130:	482b      	ldr	r0, [pc, #172]	; (800e1e0 <pbuf_copy_partial+0xdc>)
 800e132:	f008 ff0b 	bl	8016f4c <iprintf>
 800e136:	2300      	movs	r3, #0
 800e138:	e04a      	b.n	800e1d0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d108      	bne.n	800e152 <pbuf_copy_partial+0x4e>
 800e140:	4b25      	ldr	r3, [pc, #148]	; (800e1d8 <pbuf_copy_partial+0xd4>)
 800e142:	f240 420b 	movw	r2, #1035	; 0x40b
 800e146:	4927      	ldr	r1, [pc, #156]	; (800e1e4 <pbuf_copy_partial+0xe0>)
 800e148:	4825      	ldr	r0, [pc, #148]	; (800e1e0 <pbuf_copy_partial+0xdc>)
 800e14a:	f008 feff 	bl	8016f4c <iprintf>
 800e14e:	2300      	movs	r3, #0
 800e150:	e03e      	b.n	800e1d0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	61fb      	str	r3, [r7, #28]
 800e156:	e034      	b.n	800e1c2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e158:	88bb      	ldrh	r3, [r7, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00a      	beq.n	800e174 <pbuf_copy_partial+0x70>
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	895b      	ldrh	r3, [r3, #10]
 800e162:	88ba      	ldrh	r2, [r7, #4]
 800e164:	429a      	cmp	r2, r3
 800e166:	d305      	bcc.n	800e174 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	895b      	ldrh	r3, [r3, #10]
 800e16c:	88ba      	ldrh	r2, [r7, #4]
 800e16e:	1ad3      	subs	r3, r2, r3
 800e170:	80bb      	strh	r3, [r7, #4]
 800e172:	e023      	b.n	800e1bc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	895a      	ldrh	r2, [r3, #10]
 800e178:	88bb      	ldrh	r3, [r7, #4]
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e17e:	8b3a      	ldrh	r2, [r7, #24]
 800e180:	88fb      	ldrh	r3, [r7, #6]
 800e182:	429a      	cmp	r2, r3
 800e184:	d901      	bls.n	800e18a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e186:	88fb      	ldrh	r3, [r7, #6]
 800e188:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e18a:	8b7b      	ldrh	r3, [r7, #26]
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	18d0      	adds	r0, r2, r3
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	685a      	ldr	r2, [r3, #4]
 800e194:	88bb      	ldrh	r3, [r7, #4]
 800e196:	4413      	add	r3, r2
 800e198:	8b3a      	ldrh	r2, [r7, #24]
 800e19a:	4619      	mov	r1, r3
 800e19c:	f008 fea6 	bl	8016eec <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e1a0:	8afa      	ldrh	r2, [r7, #22]
 800e1a2:	8b3b      	ldrh	r3, [r7, #24]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e1a8:	8b7a      	ldrh	r2, [r7, #26]
 800e1aa:	8b3b      	ldrh	r3, [r7, #24]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e1b0:	88fa      	ldrh	r2, [r7, #6]
 800e1b2:	8b3b      	ldrh	r3, [r7, #24]
 800e1b4:	1ad3      	subs	r3, r2, r3
 800e1b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	61fb      	str	r3, [r7, #28]
 800e1c2:	88fb      	ldrh	r3, [r7, #6]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d002      	beq.n	800e1ce <pbuf_copy_partial+0xca>
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1c4      	bne.n	800e158 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e1ce:	8afb      	ldrh	r3, [r7, #22]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3720      	adds	r7, #32
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	08019d98 	.word	0x08019d98
 800e1dc:	0801a0e0 	.word	0x0801a0e0
 800e1e0:	08019df8 	.word	0x08019df8
 800e1e4:	0801a100 	.word	0x0801a100

0800e1e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	603a      	str	r2, [r7, #0]
 800e1f2:	71fb      	strb	r3, [r7, #7]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	8919      	ldrh	r1, [r3, #8]
 800e1fc:	88ba      	ldrh	r2, [r7, #4]
 800e1fe:	79fb      	ldrb	r3, [r7, #7]
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff fab1 	bl	800d768 <pbuf_alloc>
 800e206:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <pbuf_clone+0x2a>
    return NULL;
 800e20e:	2300      	movs	r3, #0
 800e210:	e011      	b.n	800e236 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e212:	6839      	ldr	r1, [r7, #0]
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f7ff fea3 	bl	800df60 <pbuf_copy>
 800e21a:	4603      	mov	r3, r0
 800e21c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e21e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d006      	beq.n	800e234 <pbuf_clone+0x4c>
 800e226:	4b06      	ldr	r3, [pc, #24]	; (800e240 <pbuf_clone+0x58>)
 800e228:	f240 5224 	movw	r2, #1316	; 0x524
 800e22c:	4905      	ldr	r1, [pc, #20]	; (800e244 <pbuf_clone+0x5c>)
 800e22e:	4806      	ldr	r0, [pc, #24]	; (800e248 <pbuf_clone+0x60>)
 800e230:	f008 fe8c 	bl	8016f4c <iprintf>
  return q;
 800e234:	68fb      	ldr	r3, [r7, #12]
}
 800e236:	4618      	mov	r0, r3
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	08019d98 	.word	0x08019d98
 800e244:	0801a20c 	.word	0x0801a20c
 800e248:	08019df8 	.word	0x08019df8

0800e24c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e250:	f008 ff0a 	bl	8017068 <rand>
 800e254:	4603      	mov	r3, r0
 800e256:	b29b      	uxth	r3, r3
 800e258:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e262:	b29a      	uxth	r2, r3
 800e264:	4b01      	ldr	r3, [pc, #4]	; (800e26c <tcp_init+0x20>)
 800e266:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e268:	bf00      	nop
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	20000142 	.word	0x20000142

0800e270 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	7d1b      	ldrb	r3, [r3, #20]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d105      	bne.n	800e28c <tcp_free+0x1c>
 800e280:	4b06      	ldr	r3, [pc, #24]	; (800e29c <tcp_free+0x2c>)
 800e282:	22d4      	movs	r2, #212	; 0xd4
 800e284:	4906      	ldr	r1, [pc, #24]	; (800e2a0 <tcp_free+0x30>)
 800e286:	4807      	ldr	r0, [pc, #28]	; (800e2a4 <tcp_free+0x34>)
 800e288:	f008 fe60 	bl	8016f4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e28c:	6879      	ldr	r1, [r7, #4]
 800e28e:	2001      	movs	r0, #1
 800e290:	f7fe ff3c 	bl	800d10c <memp_free>
}
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	0801a298 	.word	0x0801a298
 800e2a0:	0801a2c8 	.word	0x0801a2c8
 800e2a4:	0801a2dc 	.word	0x0801a2dc

0800e2a8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	7d1b      	ldrb	r3, [r3, #20]
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d105      	bne.n	800e2c4 <tcp_free_listen+0x1c>
 800e2b8:	4b06      	ldr	r3, [pc, #24]	; (800e2d4 <tcp_free_listen+0x2c>)
 800e2ba:	22df      	movs	r2, #223	; 0xdf
 800e2bc:	4906      	ldr	r1, [pc, #24]	; (800e2d8 <tcp_free_listen+0x30>)
 800e2be:	4807      	ldr	r0, [pc, #28]	; (800e2dc <tcp_free_listen+0x34>)
 800e2c0:	f008 fe44 	bl	8016f4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e2c4:	6879      	ldr	r1, [r7, #4]
 800e2c6:	2002      	movs	r0, #2
 800e2c8:	f7fe ff20 	bl	800d10c <memp_free>
}
 800e2cc:	bf00      	nop
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	0801a298 	.word	0x0801a298
 800e2d8:	0801a304 	.word	0x0801a304
 800e2dc:	0801a2dc 	.word	0x0801a2dc

0800e2e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e2e4:	f001 f85c 	bl	800f3a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e2e8:	4b07      	ldr	r3, [pc, #28]	; (800e308 <tcp_tmr+0x28>)
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	4b05      	ldr	r3, [pc, #20]	; (800e308 <tcp_tmr+0x28>)
 800e2f2:	701a      	strb	r2, [r3, #0]
 800e2f4:	4b04      	ldr	r3, [pc, #16]	; (800e308 <tcp_tmr+0x28>)
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e300:	f000 fd0e 	bl	800ed20 <tcp_slowtmr>
  }
}
 800e304:	bf00      	nop
 800e306:	bd80      	pop	{r7, pc}
 800e308:	200016a5 	.word	0x200016a5

0800e30c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d105      	bne.n	800e328 <tcp_remove_listener+0x1c>
 800e31c:	4b0d      	ldr	r3, [pc, #52]	; (800e354 <tcp_remove_listener+0x48>)
 800e31e:	22ff      	movs	r2, #255	; 0xff
 800e320:	490d      	ldr	r1, [pc, #52]	; (800e358 <tcp_remove_listener+0x4c>)
 800e322:	480e      	ldr	r0, [pc, #56]	; (800e35c <tcp_remove_listener+0x50>)
 800e324:	f008 fe12 	bl	8016f4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	e00a      	b.n	800e344 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e332:	683a      	ldr	r2, [r7, #0]
 800e334:	429a      	cmp	r2, r3
 800e336:	d102      	bne.n	800e33e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2200      	movs	r2, #0
 800e33c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	60fb      	str	r3, [r7, #12]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1f1      	bne.n	800e32e <tcp_remove_listener+0x22>
    }
  }
}
 800e34a:	bf00      	nop
 800e34c:	bf00      	nop
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	0801a298 	.word	0x0801a298
 800e358:	0801a320 	.word	0x0801a320
 800e35c:	0801a2dc 	.word	0x0801a2dc

0800e360 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d106      	bne.n	800e37c <tcp_listen_closed+0x1c>
 800e36e:	4b14      	ldr	r3, [pc, #80]	; (800e3c0 <tcp_listen_closed+0x60>)
 800e370:	f240 1211 	movw	r2, #273	; 0x111
 800e374:	4913      	ldr	r1, [pc, #76]	; (800e3c4 <tcp_listen_closed+0x64>)
 800e376:	4814      	ldr	r0, [pc, #80]	; (800e3c8 <tcp_listen_closed+0x68>)
 800e378:	f008 fde8 	bl	8016f4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	7d1b      	ldrb	r3, [r3, #20]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d006      	beq.n	800e392 <tcp_listen_closed+0x32>
 800e384:	4b0e      	ldr	r3, [pc, #56]	; (800e3c0 <tcp_listen_closed+0x60>)
 800e386:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e38a:	4910      	ldr	r1, [pc, #64]	; (800e3cc <tcp_listen_closed+0x6c>)
 800e38c:	480e      	ldr	r0, [pc, #56]	; (800e3c8 <tcp_listen_closed+0x68>)
 800e38e:	f008 fddd 	bl	8016f4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e392:	2301      	movs	r3, #1
 800e394:	60fb      	str	r3, [r7, #12]
 800e396:	e00b      	b.n	800e3b0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e398:	4a0d      	ldr	r2, [pc, #52]	; (800e3d0 <tcp_listen_closed+0x70>)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6879      	ldr	r1, [r7, #4]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7ff ffb1 	bl	800e30c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	60fb      	str	r3, [r7, #12]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2b03      	cmp	r3, #3
 800e3b4:	d9f0      	bls.n	800e398 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e3b6:	bf00      	nop
 800e3b8:	bf00      	nop
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	0801a298 	.word	0x0801a298
 800e3c4:	0801a348 	.word	0x0801a348
 800e3c8:	0801a2dc 	.word	0x0801a2dc
 800e3cc:	0801a354 	.word	0x0801a354
 800e3d0:	0801eaac 	.word	0x0801eaac

0800e3d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e3d4:	b5b0      	push	{r4, r5, r7, lr}
 800e3d6:	b088      	sub	sp, #32
 800e3d8:	af04      	add	r7, sp, #16
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <tcp_close_shutdown+0x20>
 800e3e6:	4b63      	ldr	r3, [pc, #396]	; (800e574 <tcp_close_shutdown+0x1a0>)
 800e3e8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e3ec:	4962      	ldr	r1, [pc, #392]	; (800e578 <tcp_close_shutdown+0x1a4>)
 800e3ee:	4863      	ldr	r0, [pc, #396]	; (800e57c <tcp_close_shutdown+0x1a8>)
 800e3f0:	f008 fdac 	bl	8016f4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e3f4:	78fb      	ldrb	r3, [r7, #3]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d066      	beq.n	800e4c8 <tcp_close_shutdown+0xf4>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	7d1b      	ldrb	r3, [r3, #20]
 800e3fe:	2b04      	cmp	r3, #4
 800e400:	d003      	beq.n	800e40a <tcp_close_shutdown+0x36>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	7d1b      	ldrb	r3, [r3, #20]
 800e406:	2b07      	cmp	r3, #7
 800e408:	d15e      	bne.n	800e4c8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d104      	bne.n	800e41c <tcp_close_shutdown+0x48>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e416:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e41a:	d055      	beq.n	800e4c8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	8b5b      	ldrh	r3, [r3, #26]
 800e420:	f003 0310 	and.w	r3, r3, #16
 800e424:	2b00      	cmp	r3, #0
 800e426:	d106      	bne.n	800e436 <tcp_close_shutdown+0x62>
 800e428:	4b52      	ldr	r3, [pc, #328]	; (800e574 <tcp_close_shutdown+0x1a0>)
 800e42a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e42e:	4954      	ldr	r1, [pc, #336]	; (800e580 <tcp_close_shutdown+0x1ac>)
 800e430:	4852      	ldr	r0, [pc, #328]	; (800e57c <tcp_close_shutdown+0x1a8>)
 800e432:	f008 fd8b 	bl	8016f4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e43e:	687d      	ldr	r5, [r7, #4]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	3304      	adds	r3, #4
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	8ad2      	ldrh	r2, [r2, #22]
 800e448:	6879      	ldr	r1, [r7, #4]
 800e44a:	8b09      	ldrh	r1, [r1, #24]
 800e44c:	9102      	str	r1, [sp, #8]
 800e44e:	9201      	str	r2, [sp, #4]
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	462b      	mov	r3, r5
 800e454:	4622      	mov	r2, r4
 800e456:	4601      	mov	r1, r0
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f005 fd8b 	bl	8013f74 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f001 fb6c 	bl	800fb3c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e464:	4b47      	ldr	r3, [pc, #284]	; (800e584 <tcp_close_shutdown+0x1b0>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d105      	bne.n	800e47a <tcp_close_shutdown+0xa6>
 800e46e:	4b45      	ldr	r3, [pc, #276]	; (800e584 <tcp_close_shutdown+0x1b0>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	4a43      	ldr	r2, [pc, #268]	; (800e584 <tcp_close_shutdown+0x1b0>)
 800e476:	6013      	str	r3, [r2, #0]
 800e478:	e013      	b.n	800e4a2 <tcp_close_shutdown+0xce>
 800e47a:	4b42      	ldr	r3, [pc, #264]	; (800e584 <tcp_close_shutdown+0x1b0>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	60fb      	str	r3, [r7, #12]
 800e480:	e00c      	b.n	800e49c <tcp_close_shutdown+0xc8>
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d104      	bne.n	800e496 <tcp_close_shutdown+0xc2>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	68da      	ldr	r2, [r3, #12]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	60da      	str	r2, [r3, #12]
 800e494:	e005      	b.n	800e4a2 <tcp_close_shutdown+0xce>
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1ef      	bne.n	800e482 <tcp_close_shutdown+0xae>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	60da      	str	r2, [r3, #12]
 800e4a8:	4b37      	ldr	r3, [pc, #220]	; (800e588 <tcp_close_shutdown+0x1b4>)
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e4ae:	4b37      	ldr	r3, [pc, #220]	; (800e58c <tcp_close_shutdown+0x1b8>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d102      	bne.n	800e4be <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e4b8:	f004 f800 	bl	80124bc <tcp_trigger_input_pcb_close>
 800e4bc:	e002      	b.n	800e4c4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f7ff fed6 	bl	800e270 <tcp_free>
      }
      return ERR_OK;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	e050      	b.n	800e56a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	7d1b      	ldrb	r3, [r3, #20]
 800e4cc:	2b02      	cmp	r3, #2
 800e4ce:	d03b      	beq.n	800e548 <tcp_close_shutdown+0x174>
 800e4d0:	2b02      	cmp	r3, #2
 800e4d2:	dc44      	bgt.n	800e55e <tcp_close_shutdown+0x18a>
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <tcp_close_shutdown+0x10a>
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d02a      	beq.n	800e532 <tcp_close_shutdown+0x15e>
 800e4dc:	e03f      	b.n	800e55e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	8adb      	ldrh	r3, [r3, #22]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d021      	beq.n	800e52a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e4e6:	4b2a      	ldr	r3, [pc, #168]	; (800e590 <tcp_close_shutdown+0x1bc>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d105      	bne.n	800e4fc <tcp_close_shutdown+0x128>
 800e4f0:	4b27      	ldr	r3, [pc, #156]	; (800e590 <tcp_close_shutdown+0x1bc>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	4a26      	ldr	r2, [pc, #152]	; (800e590 <tcp_close_shutdown+0x1bc>)
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	e013      	b.n	800e524 <tcp_close_shutdown+0x150>
 800e4fc:	4b24      	ldr	r3, [pc, #144]	; (800e590 <tcp_close_shutdown+0x1bc>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	60bb      	str	r3, [r7, #8]
 800e502:	e00c      	b.n	800e51e <tcp_close_shutdown+0x14a>
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d104      	bne.n	800e518 <tcp_close_shutdown+0x144>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	68da      	ldr	r2, [r3, #12]
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	60da      	str	r2, [r3, #12]
 800e516:	e005      	b.n	800e524 <tcp_close_shutdown+0x150>
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	60bb      	str	r3, [r7, #8]
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d1ef      	bne.n	800e504 <tcp_close_shutdown+0x130>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7ff fea0 	bl	800e270 <tcp_free>
      break;
 800e530:	e01a      	b.n	800e568 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7ff ff14 	bl	800e360 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e538:	6879      	ldr	r1, [r7, #4]
 800e53a:	4816      	ldr	r0, [pc, #88]	; (800e594 <tcp_close_shutdown+0x1c0>)
 800e53c:	f001 fb4e 	bl	800fbdc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff feb1 	bl	800e2a8 <tcp_free_listen>
      break;
 800e546:	e00f      	b.n	800e568 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e548:	6879      	ldr	r1, [r7, #4]
 800e54a:	480e      	ldr	r0, [pc, #56]	; (800e584 <tcp_close_shutdown+0x1b0>)
 800e54c:	f001 fb46 	bl	800fbdc <tcp_pcb_remove>
 800e550:	4b0d      	ldr	r3, [pc, #52]	; (800e588 <tcp_close_shutdown+0x1b4>)
 800e552:	2201      	movs	r2, #1
 800e554:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7ff fe8a 	bl	800e270 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e55c:	e004      	b.n	800e568 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 f81a 	bl	800e598 <tcp_close_shutdown_fin>
 800e564:	4603      	mov	r3, r0
 800e566:	e000      	b.n	800e56a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bdb0      	pop	{r4, r5, r7, pc}
 800e572:	bf00      	nop
 800e574:	0801a298 	.word	0x0801a298
 800e578:	0801a36c 	.word	0x0801a36c
 800e57c:	0801a2dc 	.word	0x0801a2dc
 800e580:	0801a38c 	.word	0x0801a38c
 800e584:	200114cc 	.word	0x200114cc
 800e588:	200114c8 	.word	0x200114c8
 800e58c:	200114e0 	.word	0x200114e0
 800e590:	200114d8 	.word	0x200114d8
 800e594:	200114d4 	.word	0x200114d4

0800e598 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d106      	bne.n	800e5b4 <tcp_close_shutdown_fin+0x1c>
 800e5a6:	4b2e      	ldr	r3, [pc, #184]	; (800e660 <tcp_close_shutdown_fin+0xc8>)
 800e5a8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e5ac:	492d      	ldr	r1, [pc, #180]	; (800e664 <tcp_close_shutdown_fin+0xcc>)
 800e5ae:	482e      	ldr	r0, [pc, #184]	; (800e668 <tcp_close_shutdown_fin+0xd0>)
 800e5b0:	f008 fccc 	bl	8016f4c <iprintf>

  switch (pcb->state) {
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	7d1b      	ldrb	r3, [r3, #20]
 800e5b8:	2b07      	cmp	r3, #7
 800e5ba:	d020      	beq.n	800e5fe <tcp_close_shutdown_fin+0x66>
 800e5bc:	2b07      	cmp	r3, #7
 800e5be:	dc2b      	bgt.n	800e618 <tcp_close_shutdown_fin+0x80>
 800e5c0:	2b03      	cmp	r3, #3
 800e5c2:	d002      	beq.n	800e5ca <tcp_close_shutdown_fin+0x32>
 800e5c4:	2b04      	cmp	r3, #4
 800e5c6:	d00d      	beq.n	800e5e4 <tcp_close_shutdown_fin+0x4c>
 800e5c8:	e026      	b.n	800e618 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f004 fde0 	bl	8013190 <tcp_send_fin>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e5d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d11f      	bne.n	800e61c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2205      	movs	r2, #5
 800e5e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5e2:	e01b      	b.n	800e61c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f004 fdd3 	bl	8013190 <tcp_send_fin>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e5ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d114      	bne.n	800e620 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2205      	movs	r2, #5
 800e5fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5fc:	e010      	b.n	800e620 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f004 fdc6 	bl	8013190 <tcp_send_fin>
 800e604:	4603      	mov	r3, r0
 800e606:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d109      	bne.n	800e624 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2209      	movs	r2, #9
 800e614:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e616:	e005      	b.n	800e624 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e618:	2300      	movs	r3, #0
 800e61a:	e01c      	b.n	800e656 <tcp_close_shutdown_fin+0xbe>
      break;
 800e61c:	bf00      	nop
 800e61e:	e002      	b.n	800e626 <tcp_close_shutdown_fin+0x8e>
      break;
 800e620:	bf00      	nop
 800e622:	e000      	b.n	800e626 <tcp_close_shutdown_fin+0x8e>
      break;
 800e624:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d103      	bne.n	800e636 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f004 feec 	bl	801340c <tcp_output>
 800e634:	e00d      	b.n	800e652 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e63a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e63e:	d108      	bne.n	800e652 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	8b5b      	ldrh	r3, [r3, #26]
 800e644:	f043 0308 	orr.w	r3, r3, #8
 800e648:	b29a      	uxth	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	e001      	b.n	800e656 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	0801a298 	.word	0x0801a298
 800e664:	0801a348 	.word	0x0801a348
 800e668:	0801a2dc 	.word	0x0801a2dc

0800e66c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d109      	bne.n	800e68e <tcp_close+0x22>
 800e67a:	4b0f      	ldr	r3, [pc, #60]	; (800e6b8 <tcp_close+0x4c>)
 800e67c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e680:	490e      	ldr	r1, [pc, #56]	; (800e6bc <tcp_close+0x50>)
 800e682:	480f      	ldr	r0, [pc, #60]	; (800e6c0 <tcp_close+0x54>)
 800e684:	f008 fc62 	bl	8016f4c <iprintf>
 800e688:	f06f 030f 	mvn.w	r3, #15
 800e68c:	e00f      	b.n	800e6ae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	7d1b      	ldrb	r3, [r3, #20]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d006      	beq.n	800e6a4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	8b5b      	ldrh	r3, [r3, #26]
 800e69a:	f043 0310 	orr.w	r3, r3, #16
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7ff fe94 	bl	800e3d4 <tcp_close_shutdown>
 800e6ac:	4603      	mov	r3, r0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	0801a298 	.word	0x0801a298
 800e6bc:	0801a3a8 	.word	0x0801a3a8
 800e6c0:	0801a2dc 	.word	0x0801a2dc

0800e6c4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b08e      	sub	sp, #56	; 0x38
 800e6c8:	af04      	add	r7, sp, #16
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d107      	bne.n	800e6e4 <tcp_abandon+0x20>
 800e6d4:	4b52      	ldr	r3, [pc, #328]	; (800e820 <tcp_abandon+0x15c>)
 800e6d6:	f240 223d 	movw	r2, #573	; 0x23d
 800e6da:	4952      	ldr	r1, [pc, #328]	; (800e824 <tcp_abandon+0x160>)
 800e6dc:	4852      	ldr	r0, [pc, #328]	; (800e828 <tcp_abandon+0x164>)
 800e6de:	f008 fc35 	bl	8016f4c <iprintf>
 800e6e2:	e099      	b.n	800e818 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d106      	bne.n	800e6fa <tcp_abandon+0x36>
 800e6ec:	4b4c      	ldr	r3, [pc, #304]	; (800e820 <tcp_abandon+0x15c>)
 800e6ee:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e6f2:	494e      	ldr	r1, [pc, #312]	; (800e82c <tcp_abandon+0x168>)
 800e6f4:	484c      	ldr	r0, [pc, #304]	; (800e828 <tcp_abandon+0x164>)
 800e6f6:	f008 fc29 	bl	8016f4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	7d1b      	ldrb	r3, [r3, #20]
 800e6fe:	2b0a      	cmp	r3, #10
 800e700:	d107      	bne.n	800e712 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e702:	6879      	ldr	r1, [r7, #4]
 800e704:	484a      	ldr	r0, [pc, #296]	; (800e830 <tcp_abandon+0x16c>)
 800e706:	f001 fa69 	bl	800fbdc <tcp_pcb_remove>
    tcp_free(pcb);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7ff fdb0 	bl	800e270 <tcp_free>
 800e710:	e082      	b.n	800e818 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e712:	2300      	movs	r3, #0
 800e714:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e716:	2300      	movs	r3, #0
 800e718:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e71e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e724:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e72c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	7d1b      	ldrb	r3, [r3, #20]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d126      	bne.n	800e78a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	8adb      	ldrh	r3, [r3, #22]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d02e      	beq.n	800e7a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e744:	4b3b      	ldr	r3, [pc, #236]	; (800e834 <tcp_abandon+0x170>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d105      	bne.n	800e75a <tcp_abandon+0x96>
 800e74e:	4b39      	ldr	r3, [pc, #228]	; (800e834 <tcp_abandon+0x170>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	4a37      	ldr	r2, [pc, #220]	; (800e834 <tcp_abandon+0x170>)
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	e013      	b.n	800e782 <tcp_abandon+0xbe>
 800e75a:	4b36      	ldr	r3, [pc, #216]	; (800e834 <tcp_abandon+0x170>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	61fb      	str	r3, [r7, #28]
 800e760:	e00c      	b.n	800e77c <tcp_abandon+0xb8>
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d104      	bne.n	800e776 <tcp_abandon+0xb2>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	68da      	ldr	r2, [r3, #12]
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	60da      	str	r2, [r3, #12]
 800e774:	e005      	b.n	800e782 <tcp_abandon+0xbe>
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	68db      	ldr	r3, [r3, #12]
 800e77a:	61fb      	str	r3, [r7, #28]
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1ef      	bne.n	800e762 <tcp_abandon+0x9e>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	60da      	str	r2, [r3, #12]
 800e788:	e00b      	b.n	800e7a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	8adb      	ldrh	r3, [r3, #22]
 800e792:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e794:	6879      	ldr	r1, [r7, #4]
 800e796:	4828      	ldr	r0, [pc, #160]	; (800e838 <tcp_abandon+0x174>)
 800e798:	f001 fa20 	bl	800fbdc <tcp_pcb_remove>
 800e79c:	4b27      	ldr	r3, [pc, #156]	; (800e83c <tcp_abandon+0x178>)
 800e79e:	2201      	movs	r2, #1
 800e7a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d004      	beq.n	800e7b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f000 fed6 	bl	800f560 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d004      	beq.n	800e7c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f000 fecd 	bl	800f560 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d004      	beq.n	800e7d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f000 fec4 	bl	800f560 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00e      	beq.n	800e7fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e7de:	6879      	ldr	r1, [r7, #4]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	3304      	adds	r3, #4
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	8b12      	ldrh	r2, [r2, #24]
 800e7e8:	9202      	str	r2, [sp, #8]
 800e7ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e7ec:	9201      	str	r2, [sp, #4]
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	697a      	ldr	r2, [r7, #20]
 800e7f4:	69b9      	ldr	r1, [r7, #24]
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f005 fbbc 	bl	8013f74 <tcp_rst>
    }
    last_state = pcb->state;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	7d1b      	ldrb	r3, [r3, #20]
 800e800:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff fd34 	bl	800e270 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d004      	beq.n	800e818 <tcp_abandon+0x154>
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	f06f 010c 	mvn.w	r1, #12
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	4798      	blx	r3
  }
}
 800e818:	3728      	adds	r7, #40	; 0x28
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	0801a298 	.word	0x0801a298
 800e824:	0801a3dc 	.word	0x0801a3dc
 800e828:	0801a2dc 	.word	0x0801a2dc
 800e82c:	0801a3f8 	.word	0x0801a3f8
 800e830:	200114dc 	.word	0x200114dc
 800e834:	200114d8 	.word	0x200114d8
 800e838:	200114cc 	.word	0x200114cc
 800e83c:	200114c8 	.word	0x200114c8

0800e840 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e848:	2101      	movs	r1, #1
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f7ff ff3a 	bl	800e6c4 <tcp_abandon>
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b088      	sub	sp, #32
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	4613      	mov	r3, r2
 800e864:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e866:	2304      	movs	r3, #4
 800e868:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d101      	bne.n	800e874 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e870:	4b3e      	ldr	r3, [pc, #248]	; (800e96c <tcp_bind+0x114>)
 800e872:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d109      	bne.n	800e88e <tcp_bind+0x36>
 800e87a:	4b3d      	ldr	r3, [pc, #244]	; (800e970 <tcp_bind+0x118>)
 800e87c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e880:	493c      	ldr	r1, [pc, #240]	; (800e974 <tcp_bind+0x11c>)
 800e882:	483d      	ldr	r0, [pc, #244]	; (800e978 <tcp_bind+0x120>)
 800e884:	f008 fb62 	bl	8016f4c <iprintf>
 800e888:	f06f 030f 	mvn.w	r3, #15
 800e88c:	e06a      	b.n	800e964 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	7d1b      	ldrb	r3, [r3, #20]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d009      	beq.n	800e8aa <tcp_bind+0x52>
 800e896:	4b36      	ldr	r3, [pc, #216]	; (800e970 <tcp_bind+0x118>)
 800e898:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e89c:	4937      	ldr	r1, [pc, #220]	; (800e97c <tcp_bind+0x124>)
 800e89e:	4836      	ldr	r0, [pc, #216]	; (800e978 <tcp_bind+0x120>)
 800e8a0:	f008 fb54 	bl	8016f4c <iprintf>
 800e8a4:	f06f 0305 	mvn.w	r3, #5
 800e8a8:	e05c      	b.n	800e964 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e8aa:	88fb      	ldrh	r3, [r7, #6]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d109      	bne.n	800e8c4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e8b0:	f000 f9f0 	bl	800ec94 <tcp_new_port>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e8b8:	88fb      	ldrh	r3, [r7, #6]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d135      	bne.n	800e92a <tcp_bind+0xd2>
      return ERR_BUF;
 800e8be:	f06f 0301 	mvn.w	r3, #1
 800e8c2:	e04f      	b.n	800e964 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	61fb      	str	r3, [r7, #28]
 800e8c8:	e02b      	b.n	800e922 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e8ca:	4a2d      	ldr	r2, [pc, #180]	; (800e980 <tcp_bind+0x128>)
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	61bb      	str	r3, [r7, #24]
 800e8d6:	e01e      	b.n	800e916 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	8adb      	ldrh	r3, [r3, #22]
 800e8dc:	88fa      	ldrh	r2, [r7, #6]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d116      	bne.n	800e910 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e8e2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d010      	beq.n	800e90a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00c      	beq.n	800e90a <tcp_bind+0xb2>
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d009      	beq.n	800e90a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d005      	beq.n	800e90a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e906:	429a      	cmp	r2, r3
 800e908:	d102      	bne.n	800e910 <tcp_bind+0xb8>
              return ERR_USE;
 800e90a:	f06f 0307 	mvn.w	r3, #7
 800e90e:	e029      	b.n	800e964 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	61bb      	str	r3, [r7, #24]
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d1dd      	bne.n	800e8d8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	3301      	adds	r3, #1
 800e920:	61fb      	str	r3, [r7, #28]
 800e922:	69fa      	ldr	r2, [r7, #28]
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	429a      	cmp	r2, r3
 800e928:	dbcf      	blt.n	800e8ca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00c      	beq.n	800e94a <tcp_bind+0xf2>
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d008      	beq.n	800e94a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d002      	beq.n	800e944 <tcp_bind+0xec>
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	e000      	b.n	800e946 <tcp_bind+0xee>
 800e944:	2300      	movs	r3, #0
 800e946:	68fa      	ldr	r2, [r7, #12]
 800e948:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	88fa      	ldrh	r2, [r7, #6]
 800e94e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e950:	4b0c      	ldr	r3, [pc, #48]	; (800e984 <tcp_bind+0x12c>)
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	60da      	str	r2, [r3, #12]
 800e958:	4a0a      	ldr	r2, [pc, #40]	; (800e984 <tcp_bind+0x12c>)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6013      	str	r3, [r2, #0]
 800e95e:	f005 fccb 	bl	80142f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3720      	adds	r7, #32
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	0801ead4 	.word	0x0801ead4
 800e970:	0801a298 	.word	0x0801a298
 800e974:	0801a42c 	.word	0x0801a42c
 800e978:	0801a2dc 	.word	0x0801a2dc
 800e97c:	0801a444 	.word	0x0801a444
 800e980:	0801eaac 	.word	0x0801eaac
 800e984:	200114d8 	.word	0x200114d8

0800e988 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b084      	sub	sp, #16
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	4613      	mov	r3, r2
 800e994:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d106      	bne.n	800e9aa <tcp_accept_null+0x22>
 800e99c:	4b07      	ldr	r3, [pc, #28]	; (800e9bc <tcp_accept_null+0x34>)
 800e99e:	f240 320f 	movw	r2, #783	; 0x30f
 800e9a2:	4907      	ldr	r1, [pc, #28]	; (800e9c0 <tcp_accept_null+0x38>)
 800e9a4:	4807      	ldr	r0, [pc, #28]	; (800e9c4 <tcp_accept_null+0x3c>)
 800e9a6:	f008 fad1 	bl	8016f4c <iprintf>

  tcp_abort(pcb);
 800e9aa:	68b8      	ldr	r0, [r7, #8]
 800e9ac:	f7ff ff48 	bl	800e840 <tcp_abort>

  return ERR_ABRT;
 800e9b0:	f06f 030c 	mvn.w	r3, #12
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	0801a298 	.word	0x0801a298
 800e9c0:	0801a46c 	.word	0x0801a46c
 800e9c4:	0801a2dc 	.word	0x0801a2dc

0800e9c8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e9d4:	78fb      	ldrb	r3, [r7, #3]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	4619      	mov	r1, r3
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 f806 	bl	800e9ec <tcp_listen_with_backlog_and_err>
 800e9e0:	4603      	mov	r3, r0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
	...

0800e9ec <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b088      	sub	sp, #32
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	607a      	str	r2, [r7, #4]
 800e9f8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d109      	bne.n	800ea18 <tcp_listen_with_backlog_and_err+0x2c>
 800ea04:	4b47      	ldr	r3, [pc, #284]	; (800eb24 <tcp_listen_with_backlog_and_err+0x138>)
 800ea06:	f240 3259 	movw	r2, #857	; 0x359
 800ea0a:	4947      	ldr	r1, [pc, #284]	; (800eb28 <tcp_listen_with_backlog_and_err+0x13c>)
 800ea0c:	4847      	ldr	r0, [pc, #284]	; (800eb2c <tcp_listen_with_backlog_and_err+0x140>)
 800ea0e:	f008 fa9d 	bl	8016f4c <iprintf>
 800ea12:	23f0      	movs	r3, #240	; 0xf0
 800ea14:	76fb      	strb	r3, [r7, #27]
 800ea16:	e079      	b.n	800eb0c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	7d1b      	ldrb	r3, [r3, #20]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d009      	beq.n	800ea34 <tcp_listen_with_backlog_and_err+0x48>
 800ea20:	4b40      	ldr	r3, [pc, #256]	; (800eb24 <tcp_listen_with_backlog_and_err+0x138>)
 800ea22:	f240 325a 	movw	r2, #858	; 0x35a
 800ea26:	4942      	ldr	r1, [pc, #264]	; (800eb30 <tcp_listen_with_backlog_and_err+0x144>)
 800ea28:	4840      	ldr	r0, [pc, #256]	; (800eb2c <tcp_listen_with_backlog_and_err+0x140>)
 800ea2a:	f008 fa8f 	bl	8016f4c <iprintf>
 800ea2e:	23f1      	movs	r3, #241	; 0xf1
 800ea30:	76fb      	strb	r3, [r7, #27]
 800ea32:	e06b      	b.n	800eb0c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	7d1b      	ldrb	r3, [r3, #20]
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d104      	bne.n	800ea46 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ea40:	23f7      	movs	r3, #247	; 0xf7
 800ea42:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ea44:	e062      	b.n	800eb0c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ea46:	2002      	movs	r0, #2
 800ea48:	f7fe fb14 	bl	800d074 <memp_malloc>
 800ea4c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d102      	bne.n	800ea5a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ea54:	23ff      	movs	r3, #255	; 0xff
 800ea56:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ea58:	e058      	b.n	800eb0c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	691a      	ldr	r2, [r3, #16]
 800ea5e:	69fb      	ldr	r3, [r7, #28]
 800ea60:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	8ada      	ldrh	r2, [r3, #22]
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	7d5a      	ldrb	r2, [r3, #21]
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	7a5a      	ldrb	r2, [r3, #9]
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	2200      	movs	r2, #0
 800ea84:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	7ada      	ldrb	r2, [r3, #11]
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	7a9a      	ldrb	r2, [r3, #10]
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	8adb      	ldrh	r3, [r3, #22]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d021      	beq.n	800eaea <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800eaa6:	4b23      	ldr	r3, [pc, #140]	; (800eb34 <tcp_listen_with_backlog_and_err+0x148>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d105      	bne.n	800eabc <tcp_listen_with_backlog_and_err+0xd0>
 800eab0:	4b20      	ldr	r3, [pc, #128]	; (800eb34 <tcp_listen_with_backlog_and_err+0x148>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	68db      	ldr	r3, [r3, #12]
 800eab6:	4a1f      	ldr	r2, [pc, #124]	; (800eb34 <tcp_listen_with_backlog_and_err+0x148>)
 800eab8:	6013      	str	r3, [r2, #0]
 800eaba:	e013      	b.n	800eae4 <tcp_listen_with_backlog_and_err+0xf8>
 800eabc:	4b1d      	ldr	r3, [pc, #116]	; (800eb34 <tcp_listen_with_backlog_and_err+0x148>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	617b      	str	r3, [r7, #20]
 800eac2:	e00c      	b.n	800eade <tcp_listen_with_backlog_and_err+0xf2>
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d104      	bne.n	800ead8 <tcp_listen_with_backlog_and_err+0xec>
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	68da      	ldr	r2, [r3, #12]
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	60da      	str	r2, [r3, #12]
 800ead6:	e005      	b.n	800eae4 <tcp_listen_with_backlog_and_err+0xf8>
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	617b      	str	r3, [r7, #20]
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1ef      	bne.n	800eac4 <tcp_listen_with_backlog_and_err+0xd8>
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f7ff fbc0 	bl	800e270 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	4a11      	ldr	r2, [pc, #68]	; (800eb38 <tcp_listen_with_backlog_and_err+0x14c>)
 800eaf4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800eaf6:	4b11      	ldr	r3, [pc, #68]	; (800eb3c <tcp_listen_with_backlog_and_err+0x150>)
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	60da      	str	r2, [r3, #12]
 800eafe:	4a0f      	ldr	r2, [pc, #60]	; (800eb3c <tcp_listen_with_backlog_and_err+0x150>)
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	6013      	str	r3, [r2, #0]
 800eb04:	f005 fbf8 	bl	80142f8 <tcp_timer_needed>
  res = ERR_OK;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d002      	beq.n	800eb18 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	7efa      	ldrb	r2, [r7, #27]
 800eb16:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800eb18:	69fb      	ldr	r3, [r7, #28]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3720      	adds	r7, #32
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	0801a298 	.word	0x0801a298
 800eb28:	0801a48c 	.word	0x0801a48c
 800eb2c:	0801a2dc 	.word	0x0801a2dc
 800eb30:	0801a4bc 	.word	0x0801a4bc
 800eb34:	200114d8 	.word	0x200114d8
 800eb38:	0800e989 	.word	0x0800e989
 800eb3c:	200114d4 	.word	0x200114d4

0800eb40 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d106      	bne.n	800eb5c <tcp_update_rcv_ann_wnd+0x1c>
 800eb4e:	4b25      	ldr	r3, [pc, #148]	; (800ebe4 <tcp_update_rcv_ann_wnd+0xa4>)
 800eb50:	f240 32a6 	movw	r2, #934	; 0x3a6
 800eb54:	4924      	ldr	r1, [pc, #144]	; (800ebe8 <tcp_update_rcv_ann_wnd+0xa8>)
 800eb56:	4825      	ldr	r0, [pc, #148]	; (800ebec <tcp_update_rcv_ann_wnd+0xac>)
 800eb58:	f008 f9f8 	bl	8016f4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800eb64:	4413      	add	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800eb70:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800eb74:	bf28      	it	cs
 800eb76:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800eb7a:	b292      	uxth	r2, r2
 800eb7c:	4413      	add	r3, r2
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	db08      	blt.n	800eb98 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb92:	68fa      	ldr	r2, [r7, #12]
 800eb94:	1ad3      	subs	r3, r2, r3
 800eb96:	e020      	b.n	800ebda <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	dd03      	ble.n	800ebae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ebac:	e014      	b.n	800ebd8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebc0:	d306      	bcc.n	800ebd0 <tcp_update_rcv_ann_wnd+0x90>
 800ebc2:	4b08      	ldr	r3, [pc, #32]	; (800ebe4 <tcp_update_rcv_ann_wnd+0xa4>)
 800ebc4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ebc8:	4909      	ldr	r1, [pc, #36]	; (800ebf0 <tcp_update_rcv_ann_wnd+0xb0>)
 800ebca:	4808      	ldr	r0, [pc, #32]	; (800ebec <tcp_update_rcv_ann_wnd+0xac>)
 800ebcc:	f008 f9be 	bl	8016f4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ebd8:	2300      	movs	r3, #0
  }
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	0801a298 	.word	0x0801a298
 800ebe8:	0801a4f4 	.word	0x0801a4f4
 800ebec:	0801a2dc 	.word	0x0801a2dc
 800ebf0:	0801a518 	.word	0x0801a518

0800ebf4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d107      	bne.n	800ec16 <tcp_recved+0x22>
 800ec06:	4b1f      	ldr	r3, [pc, #124]	; (800ec84 <tcp_recved+0x90>)
 800ec08:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ec0c:	491e      	ldr	r1, [pc, #120]	; (800ec88 <tcp_recved+0x94>)
 800ec0e:	481f      	ldr	r0, [pc, #124]	; (800ec8c <tcp_recved+0x98>)
 800ec10:	f008 f99c 	bl	8016f4c <iprintf>
 800ec14:	e032      	b.n	800ec7c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	7d1b      	ldrb	r3, [r3, #20]
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d106      	bne.n	800ec2c <tcp_recved+0x38>
 800ec1e:	4b19      	ldr	r3, [pc, #100]	; (800ec84 <tcp_recved+0x90>)
 800ec20:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ec24:	491a      	ldr	r1, [pc, #104]	; (800ec90 <tcp_recved+0x9c>)
 800ec26:	4819      	ldr	r0, [pc, #100]	; (800ec8c <tcp_recved+0x98>)
 800ec28:	f008 f990 	bl	8016f4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec30:	887b      	ldrh	r3, [r7, #2]
 800ec32:	4413      	add	r3, r2
 800ec34:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ec36:	89fb      	ldrh	r3, [r7, #14]
 800ec38:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec3c:	d804      	bhi.n	800ec48 <tcp_recved+0x54>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec42:	89fa      	ldrh	r2, [r7, #14]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d204      	bcs.n	800ec52 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ec4e:	851a      	strh	r2, [r3, #40]	; 0x28
 800ec50:	e002      	b.n	800ec58 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	89fa      	ldrh	r2, [r7, #14]
 800ec56:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f7ff ff71 	bl	800eb40 <tcp_update_rcv_ann_wnd>
 800ec5e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ec66:	d309      	bcc.n	800ec7c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	8b5b      	ldrh	r3, [r3, #26]
 800ec6c:	f043 0302 	orr.w	r3, r3, #2
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f004 fbc8 	bl	801340c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	0801a298 	.word	0x0801a298
 800ec88:	0801a534 	.word	0x0801a534
 800ec8c:	0801a2dc 	.word	0x0801a2dc
 800ec90:	0801a54c 	.word	0x0801a54c

0800ec94 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ec9e:	4b1e      	ldr	r3, [pc, #120]	; (800ed18 <tcp_new_port+0x84>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	3301      	adds	r3, #1
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	4b1c      	ldr	r3, [pc, #112]	; (800ed18 <tcp_new_port+0x84>)
 800eca8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ecaa:	4b1b      	ldr	r3, [pc, #108]	; (800ed18 <tcp_new_port+0x84>)
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d103      	bne.n	800ecbe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ecb6:	4b18      	ldr	r3, [pc, #96]	; (800ed18 <tcp_new_port+0x84>)
 800ecb8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ecbc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	71fb      	strb	r3, [r7, #7]
 800ecc2:	e01e      	b.n	800ed02 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ecc4:	79fb      	ldrb	r3, [r7, #7]
 800ecc6:	4a15      	ldr	r2, [pc, #84]	; (800ed1c <tcp_new_port+0x88>)
 800ecc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	603b      	str	r3, [r7, #0]
 800ecd0:	e011      	b.n	800ecf6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	8ada      	ldrh	r2, [r3, #22]
 800ecd6:	4b10      	ldr	r3, [pc, #64]	; (800ed18 <tcp_new_port+0x84>)
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d108      	bne.n	800ecf0 <tcp_new_port+0x5c>
        n++;
 800ecde:	88bb      	ldrh	r3, [r7, #4]
 800ece0:	3301      	adds	r3, #1
 800ece2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ece4:	88bb      	ldrh	r3, [r7, #4]
 800ece6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecea:	d3d8      	bcc.n	800ec9e <tcp_new_port+0xa>
          return 0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	e00d      	b.n	800ed0c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	603b      	str	r3, [r7, #0]
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1ea      	bne.n	800ecd2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ecfc:	79fb      	ldrb	r3, [r7, #7]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	71fb      	strb	r3, [r7, #7]
 800ed02:	79fb      	ldrb	r3, [r7, #7]
 800ed04:	2b03      	cmp	r3, #3
 800ed06:	d9dd      	bls.n	800ecc4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ed08:	4b03      	ldr	r3, [pc, #12]	; (800ed18 <tcp_new_port+0x84>)
 800ed0a:	881b      	ldrh	r3, [r3, #0]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr
 800ed18:	20000142 	.word	0x20000142
 800ed1c:	0801eaac 	.word	0x0801eaac

0800ed20 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ed20:	b5b0      	push	{r4, r5, r7, lr}
 800ed22:	b090      	sub	sp, #64	; 0x40
 800ed24:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ed26:	2300      	movs	r3, #0
 800ed28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ed2c:	4b94      	ldr	r3, [pc, #592]	; (800ef80 <tcp_slowtmr+0x260>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	3301      	adds	r3, #1
 800ed32:	4a93      	ldr	r2, [pc, #588]	; (800ef80 <tcp_slowtmr+0x260>)
 800ed34:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ed36:	4b93      	ldr	r3, [pc, #588]	; (800ef84 <tcp_slowtmr+0x264>)
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	4b91      	ldr	r3, [pc, #580]	; (800ef84 <tcp_slowtmr+0x264>)
 800ed40:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ed42:	2300      	movs	r3, #0
 800ed44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ed46:	4b90      	ldr	r3, [pc, #576]	; (800ef88 <tcp_slowtmr+0x268>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ed4c:	e29f      	b.n	800f28e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ed4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed50:	7d1b      	ldrb	r3, [r3, #20]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d106      	bne.n	800ed64 <tcp_slowtmr+0x44>
 800ed56:	4b8d      	ldr	r3, [pc, #564]	; (800ef8c <tcp_slowtmr+0x26c>)
 800ed58:	f240 42be 	movw	r2, #1214	; 0x4be
 800ed5c:	498c      	ldr	r1, [pc, #560]	; (800ef90 <tcp_slowtmr+0x270>)
 800ed5e:	488d      	ldr	r0, [pc, #564]	; (800ef94 <tcp_slowtmr+0x274>)
 800ed60:	f008 f8f4 	bl	8016f4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ed64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed66:	7d1b      	ldrb	r3, [r3, #20]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d106      	bne.n	800ed7a <tcp_slowtmr+0x5a>
 800ed6c:	4b87      	ldr	r3, [pc, #540]	; (800ef8c <tcp_slowtmr+0x26c>)
 800ed6e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ed72:	4989      	ldr	r1, [pc, #548]	; (800ef98 <tcp_slowtmr+0x278>)
 800ed74:	4887      	ldr	r0, [pc, #540]	; (800ef94 <tcp_slowtmr+0x274>)
 800ed76:	f008 f8e9 	bl	8016f4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ed7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7c:	7d1b      	ldrb	r3, [r3, #20]
 800ed7e:	2b0a      	cmp	r3, #10
 800ed80:	d106      	bne.n	800ed90 <tcp_slowtmr+0x70>
 800ed82:	4b82      	ldr	r3, [pc, #520]	; (800ef8c <tcp_slowtmr+0x26c>)
 800ed84:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ed88:	4984      	ldr	r1, [pc, #528]	; (800ef9c <tcp_slowtmr+0x27c>)
 800ed8a:	4882      	ldr	r0, [pc, #520]	; (800ef94 <tcp_slowtmr+0x274>)
 800ed8c:	f008 f8de 	bl	8016f4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ed90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed92:	7f9a      	ldrb	r2, [r3, #30]
 800ed94:	4b7b      	ldr	r3, [pc, #492]	; (800ef84 <tcp_slowtmr+0x264>)
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d105      	bne.n	800eda8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ed9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800eda6:	e272      	b.n	800f28e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800eda8:	4b76      	ldr	r3, [pc, #472]	; (800ef84 <tcp_slowtmr+0x264>)
 800edaa:	781a      	ldrb	r2, [r3, #0]
 800edac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800edb0:	2300      	movs	r3, #0
 800edb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800edb6:	2300      	movs	r3, #0
 800edb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800edbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbe:	7d1b      	ldrb	r3, [r3, #20]
 800edc0:	2b02      	cmp	r3, #2
 800edc2:	d10a      	bne.n	800edda <tcp_slowtmr+0xba>
 800edc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800edca:	2b05      	cmp	r3, #5
 800edcc:	d905      	bls.n	800edda <tcp_slowtmr+0xba>
      ++pcb_remove;
 800edce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edd2:	3301      	adds	r3, #1
 800edd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edd8:	e11e      	b.n	800f018 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800edda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ede0:	2b0b      	cmp	r3, #11
 800ede2:	d905      	bls.n	800edf0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ede4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ede8:	3301      	adds	r3, #1
 800edea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edee:	e113      	b.n	800f018 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800edf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d075      	beq.n	800eee6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800edfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d006      	beq.n	800ee10 <tcp_slowtmr+0xf0>
 800ee02:	4b62      	ldr	r3, [pc, #392]	; (800ef8c <tcp_slowtmr+0x26c>)
 800ee04:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ee08:	4965      	ldr	r1, [pc, #404]	; (800efa0 <tcp_slowtmr+0x280>)
 800ee0a:	4862      	ldr	r0, [pc, #392]	; (800ef94 <tcp_slowtmr+0x274>)
 800ee0c:	f008 f89e 	bl	8016f4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ee10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d106      	bne.n	800ee26 <tcp_slowtmr+0x106>
 800ee18:	4b5c      	ldr	r3, [pc, #368]	; (800ef8c <tcp_slowtmr+0x26c>)
 800ee1a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ee1e:	4961      	ldr	r1, [pc, #388]	; (800efa4 <tcp_slowtmr+0x284>)
 800ee20:	485c      	ldr	r0, [pc, #368]	; (800ef94 <tcp_slowtmr+0x274>)
 800ee22:	f008 f893 	bl	8016f4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee28:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ee2c:	2b0b      	cmp	r3, #11
 800ee2e:	d905      	bls.n	800ee3c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ee30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee34:	3301      	adds	r3, #1
 800ee36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee3a:	e0ed      	b.n	800f018 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ee3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ee42:	3b01      	subs	r3, #1
 800ee44:	4a58      	ldr	r2, [pc, #352]	; (800efa8 <tcp_slowtmr+0x288>)
 800ee46:	5cd3      	ldrb	r3, [r2, r3]
 800ee48:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ee4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ee50:	7c7a      	ldrb	r2, [r7, #17]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d907      	bls.n	800ee66 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ee56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ee6c:	7c7a      	ldrb	r2, [r7, #17]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	f200 80d2 	bhi.w	800f018 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ee74:	2301      	movs	r3, #1
 800ee76:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ee78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d108      	bne.n	800ee94 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ee82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee84:	f005 f96a 	bl	801415c <tcp_zero_window_probe>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d014      	beq.n	800eeb8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ee8e:	2300      	movs	r3, #0
 800ee90:	623b      	str	r3, [r7, #32]
 800ee92:	e011      	b.n	800eeb8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ee94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee9e:	f004 f82f 	bl	8012f00 <tcp_split_unsent_seg>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d107      	bne.n	800eeb8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800eea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eeaa:	f004 faaf 	bl	801340c <tcp_output>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d101      	bne.n	800eeb8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800eeb8:	6a3b      	ldr	r3, [r7, #32]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f000 80ac 	beq.w	800f018 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eece:	2b06      	cmp	r3, #6
 800eed0:	f200 80a2 	bhi.w	800f018 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eeda:	3301      	adds	r3, #1
 800eedc:	b2da      	uxtb	r2, r3
 800eede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800eee4:	e098      	b.n	800f018 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800eee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	db0f      	blt.n	800ef10 <tcp_slowtmr+0x1f0>
 800eef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eef6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d008      	beq.n	800ef10 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800eefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	3301      	adds	r3, #1
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	b21a      	sxth	r2, r3
 800ef0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ef16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef18:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	db7b      	blt.n	800f018 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ef20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef22:	f004 fd65 	bl	80139f0 <tcp_rexmit_rto_prepare>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d007      	beq.n	800ef3c <tcp_slowtmr+0x21c>
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d171      	bne.n	800f018 <tcp_slowtmr+0x2f8>
 800ef34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d06d      	beq.n	800f018 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3e:	7d1b      	ldrb	r3, [r3, #20]
 800ef40:	2b02      	cmp	r3, #2
 800ef42:	d03a      	beq.n	800efba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ef44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef4a:	2b0c      	cmp	r3, #12
 800ef4c:	bf28      	it	cs
 800ef4e:	230c      	movcs	r3, #12
 800ef50:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ef52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef58:	10db      	asrs	r3, r3, #3
 800ef5a:	b21b      	sxth	r3, r3
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef64:	4413      	add	r3, r2
 800ef66:	7efa      	ldrb	r2, [r7, #27]
 800ef68:	4910      	ldr	r1, [pc, #64]	; (800efac <tcp_slowtmr+0x28c>)
 800ef6a:	5c8a      	ldrb	r2, [r1, r2]
 800ef6c:	4093      	lsls	r3, r2
 800ef6e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ef76:	4293      	cmp	r3, r2
 800ef78:	dc1a      	bgt.n	800efb0 <tcp_slowtmr+0x290>
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	b21a      	sxth	r2, r3
 800ef7e:	e019      	b.n	800efb4 <tcp_slowtmr+0x294>
 800ef80:	200114d0 	.word	0x200114d0
 800ef84:	200016a6 	.word	0x200016a6
 800ef88:	200114cc 	.word	0x200114cc
 800ef8c:	0801a298 	.word	0x0801a298
 800ef90:	0801a5dc 	.word	0x0801a5dc
 800ef94:	0801a2dc 	.word	0x0801a2dc
 800ef98:	0801a608 	.word	0x0801a608
 800ef9c:	0801a634 	.word	0x0801a634
 800efa0:	0801a664 	.word	0x0801a664
 800efa4:	0801a698 	.word	0x0801a698
 800efa8:	0801eaa4 	.word	0x0801eaa4
 800efac:	0801ea94 	.word	0x0801ea94
 800efb0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800efb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	2200      	movs	r2, #0
 800efbe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800efcc:	4293      	cmp	r3, r2
 800efce:	bf28      	it	cs
 800efd0:	4613      	movcs	r3, r2
 800efd2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800efd4:	8a7b      	ldrh	r3, [r7, #18]
 800efd6:	085b      	lsrs	r3, r3, #1
 800efd8:	b29a      	uxth	r2, r3
 800efda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efdc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800efe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800efe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efea:	005b      	lsls	r3, r3, #1
 800efec:	b29b      	uxth	r3, r3
 800efee:	429a      	cmp	r2, r3
 800eff0:	d206      	bcs.n	800f000 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800eff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eff6:	005b      	lsls	r3, r3, #1
 800eff8:	b29a      	uxth	r2, r3
 800effa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f002:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00c:	2200      	movs	r2, #0
 800f00e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f014:	f004 fd5c 	bl	8013ad0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01a:	7d1b      	ldrb	r3, [r3, #20]
 800f01c:	2b06      	cmp	r3, #6
 800f01e:	d111      	bne.n	800f044 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	8b5b      	ldrh	r3, [r3, #26]
 800f024:	f003 0310 	and.w	r3, r3, #16
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d00b      	beq.n	800f044 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f02c:	4b9d      	ldr	r3, [pc, #628]	; (800f2a4 <tcp_slowtmr+0x584>)
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	6a1b      	ldr	r3, [r3, #32]
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	2b28      	cmp	r3, #40	; 0x28
 800f038:	d904      	bls.n	800f044 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f03a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f03e:	3301      	adds	r3, #1
 800f040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	7a5b      	ldrb	r3, [r3, #9]
 800f048:	f003 0308 	and.w	r3, r3, #8
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d04c      	beq.n	800f0ea <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f052:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f054:	2b04      	cmp	r3, #4
 800f056:	d003      	beq.n	800f060 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f05c:	2b07      	cmp	r3, #7
 800f05e:	d144      	bne.n	800f0ea <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f060:	4b90      	ldr	r3, [pc, #576]	; (800f2a4 <tcp_slowtmr+0x584>)
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	6a1b      	ldr	r3, [r3, #32]
 800f068:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f070:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f074:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f078:	498b      	ldr	r1, [pc, #556]	; (800f2a8 <tcp_slowtmr+0x588>)
 800f07a:	fba1 1303 	umull	r1, r3, r1, r3
 800f07e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f080:	429a      	cmp	r2, r3
 800f082:	d90a      	bls.n	800f09a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f088:	3301      	adds	r3, #1
 800f08a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f08e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f092:	3301      	adds	r3, #1
 800f094:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f098:	e027      	b.n	800f0ea <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f09a:	4b82      	ldr	r3, [pc, #520]	; (800f2a4 <tcp_slowtmr+0x584>)
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a0:	6a1b      	ldr	r3, [r3, #32]
 800f0a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	4b7e      	ldr	r3, [pc, #504]	; (800f2ac <tcp_slowtmr+0x58c>)
 800f0b4:	fb03 f300 	mul.w	r3, r3, r0
 800f0b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f0ba:	497b      	ldr	r1, [pc, #492]	; (800f2a8 <tcp_slowtmr+0x588>)
 800f0bc:	fba1 1303 	umull	r1, r3, r1, r3
 800f0c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d911      	bls.n	800f0ea <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f0c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0c8:	f005 f808 	bl	80140dc <tcp_keepalive>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f0d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d107      	bne.n	800f0ea <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	b2da      	uxtb	r2, r3
 800f0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d011      	beq.n	800f116 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f0f2:	4b6c      	ldr	r3, [pc, #432]	; (800f2a4 <tcp_slowtmr+0x584>)
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	1ad2      	subs	r2, r2, r3
 800f0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f102:	4619      	mov	r1, r3
 800f104:	460b      	mov	r3, r1
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	440b      	add	r3, r1
 800f10a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d302      	bcc.n	800f116 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f112:	f000 fec7 	bl	800fea4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	7d1b      	ldrb	r3, [r3, #20]
 800f11a:	2b03      	cmp	r3, #3
 800f11c:	d10b      	bne.n	800f136 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f11e:	4b61      	ldr	r3, [pc, #388]	; (800f2a4 <tcp_slowtmr+0x584>)
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f124:	6a1b      	ldr	r3, [r3, #32]
 800f126:	1ad3      	subs	r3, r2, r3
 800f128:	2b28      	cmp	r3, #40	; 0x28
 800f12a:	d904      	bls.n	800f136 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f130:	3301      	adds	r3, #1
 800f132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f138:	7d1b      	ldrb	r3, [r3, #20]
 800f13a:	2b09      	cmp	r3, #9
 800f13c:	d10b      	bne.n	800f156 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f13e:	4b59      	ldr	r3, [pc, #356]	; (800f2a4 <tcp_slowtmr+0x584>)
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f144:	6a1b      	ldr	r3, [r3, #32]
 800f146:	1ad3      	subs	r3, r2, r3
 800f148:	2bf0      	cmp	r3, #240	; 0xf0
 800f14a:	d904      	bls.n	800f156 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f150:	3301      	adds	r3, #1
 800f152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d060      	beq.n	800f220 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f164:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f168:	f000 fce8 	bl	800fb3c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d010      	beq.n	800f194 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f172:	4b4f      	ldr	r3, [pc, #316]	; (800f2b0 <tcp_slowtmr+0x590>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f178:	429a      	cmp	r2, r3
 800f17a:	d106      	bne.n	800f18a <tcp_slowtmr+0x46a>
 800f17c:	4b4d      	ldr	r3, [pc, #308]	; (800f2b4 <tcp_slowtmr+0x594>)
 800f17e:	f240 526d 	movw	r2, #1389	; 0x56d
 800f182:	494d      	ldr	r1, [pc, #308]	; (800f2b8 <tcp_slowtmr+0x598>)
 800f184:	484d      	ldr	r0, [pc, #308]	; (800f2bc <tcp_slowtmr+0x59c>)
 800f186:	f007 fee1 	bl	8016f4c <iprintf>
        prev->next = pcb->next;
 800f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18c:	68da      	ldr	r2, [r3, #12]
 800f18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f190:	60da      	str	r2, [r3, #12]
 800f192:	e00f      	b.n	800f1b4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f194:	4b46      	ldr	r3, [pc, #280]	; (800f2b0 <tcp_slowtmr+0x590>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d006      	beq.n	800f1ac <tcp_slowtmr+0x48c>
 800f19e:	4b45      	ldr	r3, [pc, #276]	; (800f2b4 <tcp_slowtmr+0x594>)
 800f1a0:	f240 5271 	movw	r2, #1393	; 0x571
 800f1a4:	4946      	ldr	r1, [pc, #280]	; (800f2c0 <tcp_slowtmr+0x5a0>)
 800f1a6:	4845      	ldr	r0, [pc, #276]	; (800f2bc <tcp_slowtmr+0x59c>)
 800f1a8:	f007 fed0 	bl	8016f4c <iprintf>
        tcp_active_pcbs = pcb->next;
 800f1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	4a3f      	ldr	r2, [pc, #252]	; (800f2b0 <tcp_slowtmr+0x590>)
 800f1b2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f1b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d013      	beq.n	800f1e4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f1c4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1cc:	8ad2      	ldrh	r2, [r2, #22]
 800f1ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1d0:	8b09      	ldrh	r1, [r1, #24]
 800f1d2:	9102      	str	r1, [sp, #8]
 800f1d4:	9201      	str	r2, [sp, #4]
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	462b      	mov	r3, r5
 800f1da:	4622      	mov	r2, r4
 800f1dc:	4601      	mov	r1, r0
 800f1de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1e0:	f004 fec8 	bl	8013f74 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	691b      	ldr	r3, [r3, #16]
 800f1e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	7d1b      	ldrb	r3, [r3, #20]
 800f1ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f1fa:	6838      	ldr	r0, [r7, #0]
 800f1fc:	f7ff f838 	bl	800e270 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f200:	4b30      	ldr	r3, [pc, #192]	; (800f2c4 <tcp_slowtmr+0x5a4>)
 800f202:	2200      	movs	r2, #0
 800f204:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d004      	beq.n	800f216 <tcp_slowtmr+0x4f6>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f06f 010c 	mvn.w	r1, #12
 800f212:	68b8      	ldr	r0, [r7, #8]
 800f214:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f216:	4b2b      	ldr	r3, [pc, #172]	; (800f2c4 <tcp_slowtmr+0x5a4>)
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d037      	beq.n	800f28e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f21e:	e590      	b.n	800ed42 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f222:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22c:	7f1b      	ldrb	r3, [r3, #28]
 800f22e:	3301      	adds	r3, #1
 800f230:	b2da      	uxtb	r2, r3
 800f232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f234:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f238:	7f1a      	ldrb	r2, [r3, #28]
 800f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23c:	7f5b      	ldrb	r3, [r3, #29]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d325      	bcc.n	800f28e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f244:	2200      	movs	r2, #0
 800f246:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f248:	4b1e      	ldr	r3, [pc, #120]	; (800f2c4 <tcp_slowtmr+0x5a4>)
 800f24a:	2200      	movs	r2, #0
 800f24c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00b      	beq.n	800f270 <tcp_slowtmr+0x550>
 800f258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f260:	6912      	ldr	r2, [r2, #16]
 800f262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f264:	4610      	mov	r0, r2
 800f266:	4798      	blx	r3
 800f268:	4603      	mov	r3, r0
 800f26a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f26e:	e002      	b.n	800f276 <tcp_slowtmr+0x556>
 800f270:	2300      	movs	r3, #0
 800f272:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f276:	4b13      	ldr	r3, [pc, #76]	; (800f2c4 <tcp_slowtmr+0x5a4>)
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d000      	beq.n	800f280 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f27e:	e560      	b.n	800ed42 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f280:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f284:	2b00      	cmp	r3, #0
 800f286:	d102      	bne.n	800f28e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f28a:	f004 f8bf 	bl	801340c <tcp_output>
  while (pcb != NULL) {
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	2b00      	cmp	r3, #0
 800f292:	f47f ad5c 	bne.w	800ed4e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f296:	2300      	movs	r3, #0
 800f298:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f29a:	4b0b      	ldr	r3, [pc, #44]	; (800f2c8 <tcp_slowtmr+0x5a8>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f2a0:	e067      	b.n	800f372 <tcp_slowtmr+0x652>
 800f2a2:	bf00      	nop
 800f2a4:	200114d0 	.word	0x200114d0
 800f2a8:	10624dd3 	.word	0x10624dd3
 800f2ac:	000124f8 	.word	0x000124f8
 800f2b0:	200114cc 	.word	0x200114cc
 800f2b4:	0801a298 	.word	0x0801a298
 800f2b8:	0801a6d0 	.word	0x0801a6d0
 800f2bc:	0801a2dc 	.word	0x0801a2dc
 800f2c0:	0801a6fc 	.word	0x0801a6fc
 800f2c4:	200114c8 	.word	0x200114c8
 800f2c8:	200114dc 	.word	0x200114dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ce:	7d1b      	ldrb	r3, [r3, #20]
 800f2d0:	2b0a      	cmp	r3, #10
 800f2d2:	d006      	beq.n	800f2e2 <tcp_slowtmr+0x5c2>
 800f2d4:	4b2b      	ldr	r3, [pc, #172]	; (800f384 <tcp_slowtmr+0x664>)
 800f2d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f2da:	492b      	ldr	r1, [pc, #172]	; (800f388 <tcp_slowtmr+0x668>)
 800f2dc:	482b      	ldr	r0, [pc, #172]	; (800f38c <tcp_slowtmr+0x66c>)
 800f2de:	f007 fe35 	bl	8016f4c <iprintf>
    pcb_remove = 0;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f2e8:	4b29      	ldr	r3, [pc, #164]	; (800f390 <tcp_slowtmr+0x670>)
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ee:	6a1b      	ldr	r3, [r3, #32]
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	2bf0      	cmp	r3, #240	; 0xf0
 800f2f4:	d904      	bls.n	800f300 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f2f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f304:	2b00      	cmp	r3, #0
 800f306:	d02f      	beq.n	800f368 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f30a:	f000 fc17 	bl	800fb3c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f310:	2b00      	cmp	r3, #0
 800f312:	d010      	beq.n	800f336 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f314:	4b1f      	ldr	r3, [pc, #124]	; (800f394 <tcp_slowtmr+0x674>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d106      	bne.n	800f32c <tcp_slowtmr+0x60c>
 800f31e:	4b19      	ldr	r3, [pc, #100]	; (800f384 <tcp_slowtmr+0x664>)
 800f320:	f240 52af 	movw	r2, #1455	; 0x5af
 800f324:	491c      	ldr	r1, [pc, #112]	; (800f398 <tcp_slowtmr+0x678>)
 800f326:	4819      	ldr	r0, [pc, #100]	; (800f38c <tcp_slowtmr+0x66c>)
 800f328:	f007 fe10 	bl	8016f4c <iprintf>
        prev->next = pcb->next;
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	68da      	ldr	r2, [r3, #12]
 800f330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f332:	60da      	str	r2, [r3, #12]
 800f334:	e00f      	b.n	800f356 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f336:	4b17      	ldr	r3, [pc, #92]	; (800f394 <tcp_slowtmr+0x674>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d006      	beq.n	800f34e <tcp_slowtmr+0x62e>
 800f340:	4b10      	ldr	r3, [pc, #64]	; (800f384 <tcp_slowtmr+0x664>)
 800f342:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f346:	4915      	ldr	r1, [pc, #84]	; (800f39c <tcp_slowtmr+0x67c>)
 800f348:	4810      	ldr	r0, [pc, #64]	; (800f38c <tcp_slowtmr+0x66c>)
 800f34a:	f007 fdff 	bl	8016f4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	4a10      	ldr	r2, [pc, #64]	; (800f394 <tcp_slowtmr+0x674>)
 800f354:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f360:	69f8      	ldr	r0, [r7, #28]
 800f362:	f7fe ff85 	bl	800e270 <tcp_free>
 800f366:	e004      	b.n	800f372 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f374:	2b00      	cmp	r3, #0
 800f376:	d1a9      	bne.n	800f2cc <tcp_slowtmr+0x5ac>
    }
  }
}
 800f378:	bf00      	nop
 800f37a:	bf00      	nop
 800f37c:	3730      	adds	r7, #48	; 0x30
 800f37e:	46bd      	mov	sp, r7
 800f380:	bdb0      	pop	{r4, r5, r7, pc}
 800f382:	bf00      	nop
 800f384:	0801a298 	.word	0x0801a298
 800f388:	0801a728 	.word	0x0801a728
 800f38c:	0801a2dc 	.word	0x0801a2dc
 800f390:	200114d0 	.word	0x200114d0
 800f394:	200114dc 	.word	0x200114dc
 800f398:	0801a758 	.word	0x0801a758
 800f39c:	0801a780 	.word	0x0801a780

0800f3a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f3a6:	4b2d      	ldr	r3, [pc, #180]	; (800f45c <tcp_fasttmr+0xbc>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	b2da      	uxtb	r2, r3
 800f3ae:	4b2b      	ldr	r3, [pc, #172]	; (800f45c <tcp_fasttmr+0xbc>)
 800f3b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f3b2:	4b2b      	ldr	r3, [pc, #172]	; (800f460 <tcp_fasttmr+0xc0>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f3b8:	e048      	b.n	800f44c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	7f9a      	ldrb	r2, [r3, #30]
 800f3be:	4b27      	ldr	r3, [pc, #156]	; (800f45c <tcp_fasttmr+0xbc>)
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d03f      	beq.n	800f446 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f3c6:	4b25      	ldr	r3, [pc, #148]	; (800f45c <tcp_fasttmr+0xbc>)
 800f3c8:	781a      	ldrb	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	8b5b      	ldrh	r3, [r3, #26]
 800f3d2:	f003 0301 	and.w	r3, r3, #1
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d010      	beq.n	800f3fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	8b5b      	ldrh	r3, [r3, #26]
 800f3de:	f043 0302 	orr.w	r3, r3, #2
 800f3e2:	b29a      	uxth	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f004 f80f 	bl	801340c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	8b5b      	ldrh	r3, [r3, #26]
 800f3f2:	f023 0303 	bic.w	r3, r3, #3
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	8b5b      	ldrh	r3, [r3, #26]
 800f400:	f003 0308 	and.w	r3, r3, #8
 800f404:	2b00      	cmp	r3, #0
 800f406:	d009      	beq.n	800f41c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	8b5b      	ldrh	r3, [r3, #26]
 800f40c:	f023 0308 	bic.w	r3, r3, #8
 800f410:	b29a      	uxth	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7ff f8be 	bl	800e598 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00a      	beq.n	800f440 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f42a:	4b0e      	ldr	r3, [pc, #56]	; (800f464 <tcp_fasttmr+0xc4>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 f819 	bl	800f468 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f436:	4b0b      	ldr	r3, [pc, #44]	; (800f464 <tcp_fasttmr+0xc4>)
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d000      	beq.n	800f440 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f43e:	e7b8      	b.n	800f3b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	607b      	str	r3, [r7, #4]
 800f444:	e002      	b.n	800f44c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	68db      	ldr	r3, [r3, #12]
 800f44a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1b3      	bne.n	800f3ba <tcp_fasttmr+0x1a>
    }
  }
}
 800f452:	bf00      	nop
 800f454:	bf00      	nop
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	200016a6 	.word	0x200016a6
 800f460:	200114cc 	.word	0x200114cc
 800f464:	200114c8 	.word	0x200114c8

0800f468 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f468:	b590      	push	{r4, r7, lr}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d109      	bne.n	800f48a <tcp_process_refused_data+0x22>
 800f476:	4b37      	ldr	r3, [pc, #220]	; (800f554 <tcp_process_refused_data+0xec>)
 800f478:	f240 6209 	movw	r2, #1545	; 0x609
 800f47c:	4936      	ldr	r1, [pc, #216]	; (800f558 <tcp_process_refused_data+0xf0>)
 800f47e:	4837      	ldr	r0, [pc, #220]	; (800f55c <tcp_process_refused_data+0xf4>)
 800f480:	f007 fd64 	bl	8016f4c <iprintf>
 800f484:	f06f 030f 	mvn.w	r3, #15
 800f488:	e060      	b.n	800f54c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f48e:	7b5b      	ldrb	r3, [r3, #13]
 800f490:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f496:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d00b      	beq.n	800f4c0 <tcp_process_refused_data+0x58>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6918      	ldr	r0, [r3, #16]
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	6879      	ldr	r1, [r7, #4]
 800f4b8:	47a0      	blx	r4
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	73fb      	strb	r3, [r7, #15]
 800f4be:	e007      	b.n	800f4d0 <tcp_process_refused_data+0x68>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	6879      	ldr	r1, [r7, #4]
 800f4c6:	2000      	movs	r0, #0
 800f4c8:	f000 f8c2 	bl	800f650 <tcp_recv_null>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f4d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d12a      	bne.n	800f52e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f4d8:	7bbb      	ldrb	r3, [r7, #14]
 800f4da:	f003 0320 	and.w	r3, r3, #32
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d033      	beq.n	800f54a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f4ea:	d005      	beq.n	800f4f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	b29a      	uxth	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d00b      	beq.n	800f51a <tcp_process_refused_data+0xb2>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6918      	ldr	r0, [r3, #16]
 800f50c:	2300      	movs	r3, #0
 800f50e:	2200      	movs	r2, #0
 800f510:	6879      	ldr	r1, [r7, #4]
 800f512:	47a0      	blx	r4
 800f514:	4603      	mov	r3, r0
 800f516:	73fb      	strb	r3, [r7, #15]
 800f518:	e001      	b.n	800f51e <tcp_process_refused_data+0xb6>
 800f51a:	2300      	movs	r3, #0
 800f51c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f522:	f113 0f0d 	cmn.w	r3, #13
 800f526:	d110      	bne.n	800f54a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f528:	f06f 030c 	mvn.w	r3, #12
 800f52c:	e00e      	b.n	800f54c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f52e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f532:	f113 0f0d 	cmn.w	r3, #13
 800f536:	d102      	bne.n	800f53e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f538:	f06f 030c 	mvn.w	r3, #12
 800f53c:	e006      	b.n	800f54c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f544:	f06f 0304 	mvn.w	r3, #4
 800f548:	e000      	b.n	800f54c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3714      	adds	r7, #20
 800f550:	46bd      	mov	sp, r7
 800f552:	bd90      	pop	{r4, r7, pc}
 800f554:	0801a298 	.word	0x0801a298
 800f558:	0801a7a8 	.word	0x0801a7a8
 800f55c:	0801a2dc 	.word	0x0801a2dc

0800f560 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f568:	e007      	b.n	800f57a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 f80a 	bl	800f58a <tcp_seg_free>
    seg = next;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1f4      	bne.n	800f56a <tcp_segs_free+0xa>
  }
}
 800f580:	bf00      	nop
 800f582:	bf00      	nop
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b082      	sub	sp, #8
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00c      	beq.n	800f5b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d004      	beq.n	800f5aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fe fbc3 	bl	800dd30 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f5aa:	6879      	ldr	r1, [r7, #4]
 800f5ac:	2003      	movs	r0, #3
 800f5ae:	f7fd fdad 	bl	800d10c <memp_free>
  }
}
 800f5b2:	bf00      	nop
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
	...

0800f5bc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d107      	bne.n	800f5de <tcp_setprio+0x22>
 800f5ce:	4b07      	ldr	r3, [pc, #28]	; (800f5ec <tcp_setprio+0x30>)
 800f5d0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800f5d4:	4906      	ldr	r1, [pc, #24]	; (800f5f0 <tcp_setprio+0x34>)
 800f5d6:	4807      	ldr	r0, [pc, #28]	; (800f5f4 <tcp_setprio+0x38>)
 800f5d8:	f007 fcb8 	bl	8016f4c <iprintf>
 800f5dc:	e002      	b.n	800f5e4 <tcp_setprio+0x28>

  pcb->prio = prio;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	78fa      	ldrb	r2, [r7, #3]
 800f5e2:	755a      	strb	r2, [r3, #21]
}
 800f5e4:	3708      	adds	r7, #8
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	0801a298 	.word	0x0801a298
 800f5f0:	0801a7d0 	.word	0x0801a7d0
 800f5f4:	0801a2dc 	.word	0x0801a2dc

0800f5f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d106      	bne.n	800f614 <tcp_seg_copy+0x1c>
 800f606:	4b0f      	ldr	r3, [pc, #60]	; (800f644 <tcp_seg_copy+0x4c>)
 800f608:	f240 6282 	movw	r2, #1666	; 0x682
 800f60c:	490e      	ldr	r1, [pc, #56]	; (800f648 <tcp_seg_copy+0x50>)
 800f60e:	480f      	ldr	r0, [pc, #60]	; (800f64c <tcp_seg_copy+0x54>)
 800f610:	f007 fc9c 	bl	8016f4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f614:	2003      	movs	r0, #3
 800f616:	f7fd fd2d 	bl	800d074 <memp_malloc>
 800f61a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d101      	bne.n	800f626 <tcp_seg_copy+0x2e>
    return NULL;
 800f622:	2300      	movs	r3, #0
 800f624:	e00a      	b.n	800f63c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f626:	2210      	movs	r2, #16
 800f628:	6879      	ldr	r1, [r7, #4]
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f007 fc5e 	bl	8016eec <memcpy>
  pbuf_ref(cseg->p);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	4618      	mov	r0, r3
 800f636:	f7fe fc1b 	bl	800de70 <pbuf_ref>
  return cseg;
 800f63a:	68fb      	ldr	r3, [r7, #12]
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3710      	adds	r7, #16
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	0801a298 	.word	0x0801a298
 800f648:	0801a7ec 	.word	0x0801a7ec
 800f64c:	0801a2dc 	.word	0x0801a2dc

0800f650 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	607a      	str	r2, [r7, #4]
 800f65c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d109      	bne.n	800f678 <tcp_recv_null+0x28>
 800f664:	4b12      	ldr	r3, [pc, #72]	; (800f6b0 <tcp_recv_null+0x60>)
 800f666:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f66a:	4912      	ldr	r1, [pc, #72]	; (800f6b4 <tcp_recv_null+0x64>)
 800f66c:	4812      	ldr	r0, [pc, #72]	; (800f6b8 <tcp_recv_null+0x68>)
 800f66e:	f007 fc6d 	bl	8016f4c <iprintf>
 800f672:	f06f 030f 	mvn.w	r3, #15
 800f676:	e016      	b.n	800f6a6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d009      	beq.n	800f692 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	891b      	ldrh	r3, [r3, #8]
 800f682:	4619      	mov	r1, r3
 800f684:	68b8      	ldr	r0, [r7, #8]
 800f686:	f7ff fab5 	bl	800ebf4 <tcp_recved>
    pbuf_free(p);
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f7fe fb50 	bl	800dd30 <pbuf_free>
 800f690:	e008      	b.n	800f6a4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d104      	bne.n	800f6a4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f69a:	68b8      	ldr	r0, [r7, #8]
 800f69c:	f7fe ffe6 	bl	800e66c <tcp_close>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	e000      	b.n	800f6a6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	0801a298 	.word	0x0801a298
 800f6b4:	0801a808 	.word	0x0801a808
 800f6b8:	0801a2dc 	.word	0x0801a2dc

0800f6bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f6c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	db01      	blt.n	800f6d2 <tcp_kill_prio+0x16>
 800f6ce:	79fb      	ldrb	r3, [r7, #7]
 800f6d0:	e000      	b.n	800f6d4 <tcp_kill_prio+0x18>
 800f6d2:	237f      	movs	r3, #127	; 0x7f
 800f6d4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f6d6:	7afb      	ldrb	r3, [r7, #11]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d034      	beq.n	800f746 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f6dc:	7afb      	ldrb	r3, [r7, #11]
 800f6de:	3b01      	subs	r3, #1
 800f6e0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6ea:	4b19      	ldr	r3, [pc, #100]	; (800f750 <tcp_kill_prio+0x94>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	617b      	str	r3, [r7, #20]
 800f6f0:	e01f      	b.n	800f732 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	7d5b      	ldrb	r3, [r3, #21]
 800f6f6:	7afa      	ldrb	r2, [r7, #11]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d80c      	bhi.n	800f716 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f700:	7afa      	ldrb	r2, [r7, #11]
 800f702:	429a      	cmp	r2, r3
 800f704:	d112      	bne.n	800f72c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f706:	4b13      	ldr	r3, [pc, #76]	; (800f754 <tcp_kill_prio+0x98>)
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	6a1b      	ldr	r3, [r3, #32]
 800f70e:	1ad3      	subs	r3, r2, r3
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	429a      	cmp	r2, r3
 800f714:	d80a      	bhi.n	800f72c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f716:	4b0f      	ldr	r3, [pc, #60]	; (800f754 <tcp_kill_prio+0x98>)
 800f718:	681a      	ldr	r2, [r3, #0]
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	6a1b      	ldr	r3, [r3, #32]
 800f71e:	1ad3      	subs	r3, r2, r3
 800f720:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	7d5b      	ldrb	r3, [r3, #21]
 800f72a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	617b      	str	r3, [r7, #20]
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d1dc      	bne.n	800f6f2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d004      	beq.n	800f748 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f73e:	6938      	ldr	r0, [r7, #16]
 800f740:	f7ff f87e 	bl	800e840 <tcp_abort>
 800f744:	e000      	b.n	800f748 <tcp_kill_prio+0x8c>
    return;
 800f746:	bf00      	nop
  }
}
 800f748:	3718      	adds	r7, #24
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	200114cc 	.word	0x200114cc
 800f754:	200114d0 	.word	0x200114d0

0800f758 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b086      	sub	sp, #24
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	4603      	mov	r3, r0
 800f760:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f762:	79fb      	ldrb	r3, [r7, #7]
 800f764:	2b08      	cmp	r3, #8
 800f766:	d009      	beq.n	800f77c <tcp_kill_state+0x24>
 800f768:	79fb      	ldrb	r3, [r7, #7]
 800f76a:	2b09      	cmp	r3, #9
 800f76c:	d006      	beq.n	800f77c <tcp_kill_state+0x24>
 800f76e:	4b1a      	ldr	r3, [pc, #104]	; (800f7d8 <tcp_kill_state+0x80>)
 800f770:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f774:	4919      	ldr	r1, [pc, #100]	; (800f7dc <tcp_kill_state+0x84>)
 800f776:	481a      	ldr	r0, [pc, #104]	; (800f7e0 <tcp_kill_state+0x88>)
 800f778:	f007 fbe8 	bl	8016f4c <iprintf>

  inactivity = 0;
 800f77c:	2300      	movs	r3, #0
 800f77e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f780:	2300      	movs	r3, #0
 800f782:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f784:	4b17      	ldr	r3, [pc, #92]	; (800f7e4 <tcp_kill_state+0x8c>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	617b      	str	r3, [r7, #20]
 800f78a:	e017      	b.n	800f7bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	7d1b      	ldrb	r3, [r3, #20]
 800f790:	79fa      	ldrb	r2, [r7, #7]
 800f792:	429a      	cmp	r2, r3
 800f794:	d10f      	bne.n	800f7b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f796:	4b14      	ldr	r3, [pc, #80]	; (800f7e8 <tcp_kill_state+0x90>)
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	6a1b      	ldr	r3, [r3, #32]
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d807      	bhi.n	800f7b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f7a6:	4b10      	ldr	r3, [pc, #64]	; (800f7e8 <tcp_kill_state+0x90>)
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	6a1b      	ldr	r3, [r3, #32]
 800f7ae:	1ad3      	subs	r3, r2, r3
 800f7b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	68db      	ldr	r3, [r3, #12]
 800f7ba:	617b      	str	r3, [r7, #20]
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1e4      	bne.n	800f78c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d003      	beq.n	800f7d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	6938      	ldr	r0, [r7, #16]
 800f7cc:	f7fe ff7a 	bl	800e6c4 <tcp_abandon>
  }
}
 800f7d0:	bf00      	nop
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	0801a298 	.word	0x0801a298
 800f7dc:	0801a824 	.word	0x0801a824
 800f7e0:	0801a2dc 	.word	0x0801a2dc
 800f7e4:	200114cc 	.word	0x200114cc
 800f7e8:	200114d0 	.word	0x200114d0

0800f7ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7fa:	4b12      	ldr	r3, [pc, #72]	; (800f844 <tcp_kill_timewait+0x58>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	60fb      	str	r3, [r7, #12]
 800f800:	e012      	b.n	800f828 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f802:	4b11      	ldr	r3, [pc, #68]	; (800f848 <tcp_kill_timewait+0x5c>)
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6a1b      	ldr	r3, [r3, #32]
 800f80a:	1ad3      	subs	r3, r2, r3
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d807      	bhi.n	800f822 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f812:	4b0d      	ldr	r3, [pc, #52]	; (800f848 <tcp_kill_timewait+0x5c>)
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6a1b      	ldr	r3, [r3, #32]
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	60fb      	str	r3, [r7, #12]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d1e9      	bne.n	800f802 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d002      	beq.n	800f83a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f834:	68b8      	ldr	r0, [r7, #8]
 800f836:	f7ff f803 	bl	800e840 <tcp_abort>
  }
}
 800f83a:	bf00      	nop
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	200114dc 	.word	0x200114dc
 800f848:	200114d0 	.word	0x200114d0

0800f84c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f852:	4b10      	ldr	r3, [pc, #64]	; (800f894 <tcp_handle_closepend+0x48>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f858:	e014      	b.n	800f884 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	8b5b      	ldrh	r3, [r3, #26]
 800f864:	f003 0308 	and.w	r3, r3, #8
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d009      	beq.n	800f880 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	8b5b      	ldrh	r3, [r3, #26]
 800f870:	f023 0308 	bic.w	r3, r3, #8
 800f874:	b29a      	uxth	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7fe fe8c 	bl	800e598 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1e7      	bne.n	800f85a <tcp_handle_closepend+0xe>
  }
}
 800f88a:	bf00      	nop
 800f88c:	bf00      	nop
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	200114cc 	.word	0x200114cc

0800f898 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	4603      	mov	r3, r0
 800f8a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8a2:	2001      	movs	r0, #1
 800f8a4:	f7fd fbe6 	bl	800d074 <memp_malloc>
 800f8a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d126      	bne.n	800f8fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f8b0:	f7ff ffcc 	bl	800f84c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f8b4:	f7ff ff9a 	bl	800f7ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8b8:	2001      	movs	r0, #1
 800f8ba:	f7fd fbdb 	bl	800d074 <memp_malloc>
 800f8be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d11b      	bne.n	800f8fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f8c6:	2009      	movs	r0, #9
 800f8c8:	f7ff ff46 	bl	800f758 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8cc:	2001      	movs	r0, #1
 800f8ce:	f7fd fbd1 	bl	800d074 <memp_malloc>
 800f8d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d111      	bne.n	800f8fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f8da:	2008      	movs	r0, #8
 800f8dc:	f7ff ff3c 	bl	800f758 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8e0:	2001      	movs	r0, #1
 800f8e2:	f7fd fbc7 	bl	800d074 <memp_malloc>
 800f8e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d107      	bne.n	800f8fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f8ee:	79fb      	ldrb	r3, [r7, #7]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7ff fee3 	bl	800f6bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8f6:	2001      	movs	r0, #1
 800f8f8:	f7fd fbbc 	bl	800d074 <memp_malloc>
 800f8fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d03f      	beq.n	800f984 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f904:	229c      	movs	r2, #156	; 0x9c
 800f906:	2100      	movs	r1, #0
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	f007 fb17 	bl	8016f3c <memset>
    pcb->prio = prio;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	79fa      	ldrb	r2, [r7, #7]
 800f912:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f91a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f924:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	22ff      	movs	r2, #255	; 0xff
 800f932:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f93a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2206      	movs	r2, #6
 800f940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2206      	movs	r2, #6
 800f948:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f950:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2201      	movs	r2, #1
 800f956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f95a:	4b0d      	ldr	r3, [pc, #52]	; (800f990 <tcp_alloc+0xf8>)
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f962:	4b0c      	ldr	r3, [pc, #48]	; (800f994 <tcp_alloc+0xfc>)
 800f964:	781a      	ldrb	r2, [r3, #0]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f970:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	4a08      	ldr	r2, [pc, #32]	; (800f998 <tcp_alloc+0x100>)
 800f978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	4a07      	ldr	r2, [pc, #28]	; (800f99c <tcp_alloc+0x104>)
 800f980:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f984:	68fb      	ldr	r3, [r7, #12]
}
 800f986:	4618      	mov	r0, r3
 800f988:	3710      	adds	r7, #16
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	200114d0 	.word	0x200114d0
 800f994:	200016a6 	.word	0x200016a6
 800f998:	0800f651 	.word	0x0800f651
 800f99c:	006ddd00 	.word	0x006ddd00

0800f9a0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f9aa:	2040      	movs	r0, #64	; 0x40
 800f9ac:	f7ff ff74 	bl	800f898 <tcp_alloc>
 800f9b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	683a      	ldr	r2, [r7, #0]
 800f9d0:	611a      	str	r2, [r3, #16]
  }
}
 800f9d2:	bf00      	nop
 800f9d4:	370c      	adds	r7, #12
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
	...

0800f9e0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00e      	beq.n	800fa0e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	7d1b      	ldrb	r3, [r3, #20]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d106      	bne.n	800fa06 <tcp_recv+0x26>
 800f9f8:	4b07      	ldr	r3, [pc, #28]	; (800fa18 <tcp_recv+0x38>)
 800f9fa:	f240 72df 	movw	r2, #2015	; 0x7df
 800f9fe:	4907      	ldr	r1, [pc, #28]	; (800fa1c <tcp_recv+0x3c>)
 800fa00:	4807      	ldr	r0, [pc, #28]	; (800fa20 <tcp_recv+0x40>)
 800fa02:	f007 faa3 	bl	8016f4c <iprintf>
    pcb->recv = recv;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	683a      	ldr	r2, [r7, #0]
 800fa0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fa0e:	bf00      	nop
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	0801a298 	.word	0x0801a298
 800fa1c:	0801a834 	.word	0x0801a834
 800fa20:	0801a2dc 	.word	0x0801a2dc

0800fa24 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00e      	beq.n	800fa52 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	7d1b      	ldrb	r3, [r3, #20]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d106      	bne.n	800fa4a <tcp_sent+0x26>
 800fa3c:	4b07      	ldr	r3, [pc, #28]	; (800fa5c <tcp_sent+0x38>)
 800fa3e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fa42:	4907      	ldr	r1, [pc, #28]	; (800fa60 <tcp_sent+0x3c>)
 800fa44:	4807      	ldr	r0, [pc, #28]	; (800fa64 <tcp_sent+0x40>)
 800fa46:	f007 fa81 	bl	8016f4c <iprintf>
    pcb->sent = sent;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	683a      	ldr	r2, [r7, #0]
 800fa4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fa52:	bf00      	nop
 800fa54:	3708      	adds	r7, #8
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	0801a298 	.word	0x0801a298
 800fa60:	0801a85c 	.word	0x0801a85c
 800fa64:	0801a2dc 	.word	0x0801a2dc

0800fa68 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00e      	beq.n	800fa96 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	7d1b      	ldrb	r3, [r3, #20]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d106      	bne.n	800fa8e <tcp_err+0x26>
 800fa80:	4b07      	ldr	r3, [pc, #28]	; (800faa0 <tcp_err+0x38>)
 800fa82:	f640 020d 	movw	r2, #2061	; 0x80d
 800fa86:	4907      	ldr	r1, [pc, #28]	; (800faa4 <tcp_err+0x3c>)
 800fa88:	4807      	ldr	r0, [pc, #28]	; (800faa8 <tcp_err+0x40>)
 800fa8a:	f007 fa5f 	bl	8016f4c <iprintf>
    pcb->errf = err;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	683a      	ldr	r2, [r7, #0]
 800fa92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fa96:	bf00      	nop
 800fa98:	3708      	adds	r7, #8
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	0801a298 	.word	0x0801a298
 800faa4:	0801a884 	.word	0x0801a884
 800faa8:	0801a2dc 	.word	0x0801a2dc

0800faac <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800faac:	b480      	push	{r7}
 800faae:	b085      	sub	sp, #20
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d008      	beq.n	800face <tcp_accept+0x22>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	7d1b      	ldrb	r3, [r3, #20]
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d104      	bne.n	800face <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	683a      	ldr	r2, [r7, #0]
 800facc:	619a      	str	r2, [r3, #24]
  }
}
 800face:	bf00      	nop
 800fad0:	3714      	adds	r7, #20
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
	...

0800fadc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	4613      	mov	r3, r2
 800fae8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d107      	bne.n	800fb00 <tcp_poll+0x24>
 800faf0:	4b0e      	ldr	r3, [pc, #56]	; (800fb2c <tcp_poll+0x50>)
 800faf2:	f640 023d 	movw	r2, #2109	; 0x83d
 800faf6:	490e      	ldr	r1, [pc, #56]	; (800fb30 <tcp_poll+0x54>)
 800faf8:	480e      	ldr	r0, [pc, #56]	; (800fb34 <tcp_poll+0x58>)
 800fafa:	f007 fa27 	bl	8016f4c <iprintf>
 800fafe:	e011      	b.n	800fb24 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	7d1b      	ldrb	r3, [r3, #20]
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d106      	bne.n	800fb16 <tcp_poll+0x3a>
 800fb08:	4b08      	ldr	r3, [pc, #32]	; (800fb2c <tcp_poll+0x50>)
 800fb0a:	f640 023e 	movw	r2, #2110	; 0x83e
 800fb0e:	490a      	ldr	r1, [pc, #40]	; (800fb38 <tcp_poll+0x5c>)
 800fb10:	4808      	ldr	r0, [pc, #32]	; (800fb34 <tcp_poll+0x58>)
 800fb12:	f007 fa1b 	bl	8016f4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	68ba      	ldr	r2, [r7, #8]
 800fb1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	79fa      	ldrb	r2, [r7, #7]
 800fb22:	775a      	strb	r2, [r3, #29]
}
 800fb24:	3710      	adds	r7, #16
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	0801a298 	.word	0x0801a298
 800fb30:	0801a8ac 	.word	0x0801a8ac
 800fb34:	0801a2dc 	.word	0x0801a2dc
 800fb38:	0801a8c4 	.word	0x0801a8c4

0800fb3c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d107      	bne.n	800fb5a <tcp_pcb_purge+0x1e>
 800fb4a:	4b21      	ldr	r3, [pc, #132]	; (800fbd0 <tcp_pcb_purge+0x94>)
 800fb4c:	f640 0251 	movw	r2, #2129	; 0x851
 800fb50:	4920      	ldr	r1, [pc, #128]	; (800fbd4 <tcp_pcb_purge+0x98>)
 800fb52:	4821      	ldr	r0, [pc, #132]	; (800fbd8 <tcp_pcb_purge+0x9c>)
 800fb54:	f007 f9fa 	bl	8016f4c <iprintf>
 800fb58:	e037      	b.n	800fbca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	7d1b      	ldrb	r3, [r3, #20]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d033      	beq.n	800fbca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fb66:	2b0a      	cmp	r3, #10
 800fb68:	d02f      	beq.n	800fbca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d02b      	beq.n	800fbca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d007      	beq.n	800fb8a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe f8d6 	bl	800dd30 <pbuf_free>
      pcb->refused_data = NULL;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d002      	beq.n	800fb98 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f986 	bl	800fea4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb9e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7ff fcdb 	bl	800f560 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7ff fcd6 	bl	800f560 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	66da      	str	r2, [r3, #108]	; 0x6c
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	0801a298 	.word	0x0801a298
 800fbd4:	0801a8e4 	.word	0x0801a8e4
 800fbd8:	0801a2dc 	.word	0x0801a2dc

0800fbdc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d106      	bne.n	800fbfa <tcp_pcb_remove+0x1e>
 800fbec:	4b3e      	ldr	r3, [pc, #248]	; (800fce8 <tcp_pcb_remove+0x10c>)
 800fbee:	f640 0283 	movw	r2, #2179	; 0x883
 800fbf2:	493e      	ldr	r1, [pc, #248]	; (800fcec <tcp_pcb_remove+0x110>)
 800fbf4:	483e      	ldr	r0, [pc, #248]	; (800fcf0 <tcp_pcb_remove+0x114>)
 800fbf6:	f007 f9a9 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d106      	bne.n	800fc0e <tcp_pcb_remove+0x32>
 800fc00:	4b39      	ldr	r3, [pc, #228]	; (800fce8 <tcp_pcb_remove+0x10c>)
 800fc02:	f640 0284 	movw	r2, #2180	; 0x884
 800fc06:	493b      	ldr	r1, [pc, #236]	; (800fcf4 <tcp_pcb_remove+0x118>)
 800fc08:	4839      	ldr	r0, [pc, #228]	; (800fcf0 <tcp_pcb_remove+0x114>)
 800fc0a:	f007 f99f 	bl	8016f4c <iprintf>

  TCP_RMV(pcblist, pcb);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	683a      	ldr	r2, [r7, #0]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d105      	bne.n	800fc24 <tcp_pcb_remove+0x48>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68da      	ldr	r2, [r3, #12]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	601a      	str	r2, [r3, #0]
 800fc22:	e013      	b.n	800fc4c <tcp_pcb_remove+0x70>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	60fb      	str	r3, [r7, #12]
 800fc2a:	e00c      	b.n	800fc46 <tcp_pcb_remove+0x6a>
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	683a      	ldr	r2, [r7, #0]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d104      	bne.n	800fc40 <tcp_pcb_remove+0x64>
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	68da      	ldr	r2, [r3, #12]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	60da      	str	r2, [r3, #12]
 800fc3e:	e005      	b.n	800fc4c <tcp_pcb_remove+0x70>
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	60fb      	str	r3, [r7, #12]
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d1ef      	bne.n	800fc2c <tcp_pcb_remove+0x50>
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fc52:	6838      	ldr	r0, [r7, #0]
 800fc54:	f7ff ff72 	bl	800fb3c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	7d1b      	ldrb	r3, [r3, #20]
 800fc5c:	2b0a      	cmp	r3, #10
 800fc5e:	d013      	beq.n	800fc88 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d00f      	beq.n	800fc88 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	8b5b      	ldrh	r3, [r3, #26]
 800fc6c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d009      	beq.n	800fc88 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	8b5b      	ldrh	r3, [r3, #26]
 800fc78:	f043 0302 	orr.w	r3, r3, #2
 800fc7c:	b29a      	uxth	r2, r3
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fc82:	6838      	ldr	r0, [r7, #0]
 800fc84:	f003 fbc2 	bl	801340c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	7d1b      	ldrb	r3, [r3, #20]
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d020      	beq.n	800fcd2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d006      	beq.n	800fca6 <tcp_pcb_remove+0xca>
 800fc98:	4b13      	ldr	r3, [pc, #76]	; (800fce8 <tcp_pcb_remove+0x10c>)
 800fc9a:	f640 0293 	movw	r2, #2195	; 0x893
 800fc9e:	4916      	ldr	r1, [pc, #88]	; (800fcf8 <tcp_pcb_remove+0x11c>)
 800fca0:	4813      	ldr	r0, [pc, #76]	; (800fcf0 <tcp_pcb_remove+0x114>)
 800fca2:	f007 f953 	bl	8016f4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d006      	beq.n	800fcbc <tcp_pcb_remove+0xe0>
 800fcae:	4b0e      	ldr	r3, [pc, #56]	; (800fce8 <tcp_pcb_remove+0x10c>)
 800fcb0:	f640 0294 	movw	r2, #2196	; 0x894
 800fcb4:	4911      	ldr	r1, [pc, #68]	; (800fcfc <tcp_pcb_remove+0x120>)
 800fcb6:	480e      	ldr	r0, [pc, #56]	; (800fcf0 <tcp_pcb_remove+0x114>)
 800fcb8:	f007 f948 	bl	8016f4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d006      	beq.n	800fcd2 <tcp_pcb_remove+0xf6>
 800fcc4:	4b08      	ldr	r3, [pc, #32]	; (800fce8 <tcp_pcb_remove+0x10c>)
 800fcc6:	f640 0296 	movw	r2, #2198	; 0x896
 800fcca:	490d      	ldr	r1, [pc, #52]	; (800fd00 <tcp_pcb_remove+0x124>)
 800fccc:	4808      	ldr	r0, [pc, #32]	; (800fcf0 <tcp_pcb_remove+0x114>)
 800fcce:	f007 f93d 	bl	8016f4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fcde:	bf00      	nop
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	0801a298 	.word	0x0801a298
 800fcec:	0801a900 	.word	0x0801a900
 800fcf0:	0801a2dc 	.word	0x0801a2dc
 800fcf4:	0801a91c 	.word	0x0801a91c
 800fcf8:	0801a93c 	.word	0x0801a93c
 800fcfc:	0801a954 	.word	0x0801a954
 800fd00:	0801a970 	.word	0x0801a970

0800fd04 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d106      	bne.n	800fd20 <tcp_next_iss+0x1c>
 800fd12:	4b0a      	ldr	r3, [pc, #40]	; (800fd3c <tcp_next_iss+0x38>)
 800fd14:	f640 02af 	movw	r2, #2223	; 0x8af
 800fd18:	4909      	ldr	r1, [pc, #36]	; (800fd40 <tcp_next_iss+0x3c>)
 800fd1a:	480a      	ldr	r0, [pc, #40]	; (800fd44 <tcp_next_iss+0x40>)
 800fd1c:	f007 f916 	bl	8016f4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fd20:	4b09      	ldr	r3, [pc, #36]	; (800fd48 <tcp_next_iss+0x44>)
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	4b09      	ldr	r3, [pc, #36]	; (800fd4c <tcp_next_iss+0x48>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4413      	add	r3, r2
 800fd2a:	4a07      	ldr	r2, [pc, #28]	; (800fd48 <tcp_next_iss+0x44>)
 800fd2c:	6013      	str	r3, [r2, #0]
  return iss;
 800fd2e:	4b06      	ldr	r3, [pc, #24]	; (800fd48 <tcp_next_iss+0x44>)
 800fd30:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3708      	adds	r7, #8
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	0801a298 	.word	0x0801a298
 800fd40:	0801a988 	.word	0x0801a988
 800fd44:	0801a2dc 	.word	0x0801a2dc
 800fd48:	20000144 	.word	0x20000144
 800fd4c:	200114d0 	.word	0x200114d0

0800fd50 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	4603      	mov	r3, r0
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
 800fd5c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d106      	bne.n	800fd72 <tcp_eff_send_mss_netif+0x22>
 800fd64:	4b14      	ldr	r3, [pc, #80]	; (800fdb8 <tcp_eff_send_mss_netif+0x68>)
 800fd66:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fd6a:	4914      	ldr	r1, [pc, #80]	; (800fdbc <tcp_eff_send_mss_netif+0x6c>)
 800fd6c:	4814      	ldr	r0, [pc, #80]	; (800fdc0 <tcp_eff_send_mss_netif+0x70>)
 800fd6e:	f007 f8ed 	bl	8016f4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d101      	bne.n	800fd7c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fd78:	89fb      	ldrh	r3, [r7, #14]
 800fd7a:	e019      	b.n	800fdb0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fd80:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fd82:	8afb      	ldrh	r3, [r7, #22]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d012      	beq.n	800fdae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fd88:	2328      	movs	r3, #40	; 0x28
 800fd8a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fd8c:	8afa      	ldrh	r2, [r7, #22]
 800fd8e:	8abb      	ldrh	r3, [r7, #20]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d904      	bls.n	800fd9e <tcp_eff_send_mss_netif+0x4e>
 800fd94:	8afa      	ldrh	r2, [r7, #22]
 800fd96:	8abb      	ldrh	r3, [r7, #20]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	e000      	b.n	800fda0 <tcp_eff_send_mss_netif+0x50>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fda2:	8a7a      	ldrh	r2, [r7, #18]
 800fda4:	89fb      	ldrh	r3, [r7, #14]
 800fda6:	4293      	cmp	r3, r2
 800fda8:	bf28      	it	cs
 800fdaa:	4613      	movcs	r3, r2
 800fdac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fdae:	89fb      	ldrh	r3, [r7, #14]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3718      	adds	r7, #24
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	0801a298 	.word	0x0801a298
 800fdbc:	0801a9a4 	.word	0x0801a9a4
 800fdc0:	0801a2dc 	.word	0x0801a2dc

0800fdc4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d119      	bne.n	800fe0c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fdd8:	4b10      	ldr	r3, [pc, #64]	; (800fe1c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fdda:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fdde:	4910      	ldr	r1, [pc, #64]	; (800fe20 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fde0:	4810      	ldr	r0, [pc, #64]	; (800fe24 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fde2:	f007 f8b3 	bl	8016f4c <iprintf>

  while (pcb != NULL) {
 800fde6:	e011      	b.n	800fe0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d108      	bne.n	800fe06 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f7fe fd20 	bl	800e840 <tcp_abort>
      pcb = next;
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	60fb      	str	r3, [r7, #12]
 800fe04:	e002      	b.n	800fe0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d1ea      	bne.n	800fde8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fe12:	bf00      	nop
 800fe14:	bf00      	nop
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	0801a298 	.word	0x0801a298
 800fe20:	0801a9cc 	.word	0x0801a9cc
 800fe24:	0801a2dc 	.word	0x0801a2dc

0800fe28 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d02a      	beq.n	800fe8e <tcp_netif_ip_addr_changed+0x66>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d026      	beq.n	800fe8e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fe40:	4b15      	ldr	r3, [pc, #84]	; (800fe98 <tcp_netif_ip_addr_changed+0x70>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	4619      	mov	r1, r3
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7ff ffbc 	bl	800fdc4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fe4c:	4b13      	ldr	r3, [pc, #76]	; (800fe9c <tcp_netif_ip_addr_changed+0x74>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4619      	mov	r1, r3
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f7ff ffb6 	bl	800fdc4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d017      	beq.n	800fe8e <tcp_netif_ip_addr_changed+0x66>
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d013      	beq.n	800fe8e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe66:	4b0e      	ldr	r3, [pc, #56]	; (800fea0 <tcp_netif_ip_addr_changed+0x78>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	60fb      	str	r3, [r7, #12]
 800fe6c:	e00c      	b.n	800fe88 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d103      	bne.n	800fe82 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	681a      	ldr	r2, [r3, #0]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	60fb      	str	r3, [r7, #12]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d1ef      	bne.n	800fe6e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fe8e:	bf00      	nop
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	200114cc 	.word	0x200114cc
 800fe9c:	200114d8 	.word	0x200114d8
 800fea0:	200114d4 	.word	0x200114d4

0800fea4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d007      	beq.n	800fec4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800feb8:	4618      	mov	r0, r3
 800feba:	f7ff fb51 	bl	800f560 <tcp_segs_free>
    pcb->ooseq = NULL;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fec4:	bf00      	nop
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}

0800fecc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fecc:	b590      	push	{r4, r7, lr}
 800fece:	b08d      	sub	sp, #52	; 0x34
 800fed0:	af04      	add	r7, sp, #16
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d105      	bne.n	800fee8 <tcp_input+0x1c>
 800fedc:	4b9b      	ldr	r3, [pc, #620]	; (801014c <tcp_input+0x280>)
 800fede:	2283      	movs	r2, #131	; 0x83
 800fee0:	499b      	ldr	r1, [pc, #620]	; (8010150 <tcp_input+0x284>)
 800fee2:	489c      	ldr	r0, [pc, #624]	; (8010154 <tcp_input+0x288>)
 800fee4:	f007 f832 	bl	8016f4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	4a9a      	ldr	r2, [pc, #616]	; (8010158 <tcp_input+0x28c>)
 800feee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	895b      	ldrh	r3, [r3, #10]
 800fef4:	2b13      	cmp	r3, #19
 800fef6:	f240 83c4 	bls.w	8010682 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fefa:	4b98      	ldr	r3, [pc, #608]	; (801015c <tcp_input+0x290>)
 800fefc:	695b      	ldr	r3, [r3, #20]
 800fefe:	4a97      	ldr	r2, [pc, #604]	; (801015c <tcp_input+0x290>)
 800ff00:	6812      	ldr	r2, [r2, #0]
 800ff02:	4611      	mov	r1, r2
 800ff04:	4618      	mov	r0, r3
 800ff06:	f006 f86b 	bl	8015fe0 <ip4_addr_isbroadcast_u32>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f040 83ba 	bne.w	8010686 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ff12:	4b92      	ldr	r3, [pc, #584]	; (801015c <tcp_input+0x290>)
 800ff14:	695b      	ldr	r3, [r3, #20]
 800ff16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ff1a:	2be0      	cmp	r3, #224	; 0xe0
 800ff1c:	f000 83b3 	beq.w	8010686 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ff20:	4b8d      	ldr	r3, [pc, #564]	; (8010158 <tcp_input+0x28c>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	899b      	ldrh	r3, [r3, #12]
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fc fb6f 	bl	800c60c <lwip_htons>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	0b1b      	lsrs	r3, r3, #12
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ff3a:	7cbb      	ldrb	r3, [r7, #18]
 800ff3c:	2b13      	cmp	r3, #19
 800ff3e:	f240 83a4 	bls.w	801068a <tcp_input+0x7be>
 800ff42:	7cbb      	ldrb	r3, [r7, #18]
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	891b      	ldrh	r3, [r3, #8]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	f200 839d 	bhi.w	801068a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ff50:	7cbb      	ldrb	r3, [r7, #18]
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	3b14      	subs	r3, #20
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	4b81      	ldr	r3, [pc, #516]	; (8010160 <tcp_input+0x294>)
 800ff5a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ff5c:	4b81      	ldr	r3, [pc, #516]	; (8010164 <tcp_input+0x298>)
 800ff5e:	2200      	movs	r2, #0
 800ff60:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	895a      	ldrh	r2, [r3, #10]
 800ff66:	7cbb      	ldrb	r3, [r7, #18]
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d309      	bcc.n	800ff82 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ff6e:	4b7c      	ldr	r3, [pc, #496]	; (8010160 <tcp_input+0x294>)
 800ff70:	881a      	ldrh	r2, [r3, #0]
 800ff72:	4b7d      	ldr	r3, [pc, #500]	; (8010168 <tcp_input+0x29c>)
 800ff74:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ff76:	7cbb      	ldrb	r3, [r7, #18]
 800ff78:	4619      	mov	r1, r3
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7fd fe52 	bl	800dc24 <pbuf_remove_header>
 800ff80:	e04e      	b.n	8010020 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d105      	bne.n	800ff96 <tcp_input+0xca>
 800ff8a:	4b70      	ldr	r3, [pc, #448]	; (801014c <tcp_input+0x280>)
 800ff8c:	22c2      	movs	r2, #194	; 0xc2
 800ff8e:	4977      	ldr	r1, [pc, #476]	; (801016c <tcp_input+0x2a0>)
 800ff90:	4870      	ldr	r0, [pc, #448]	; (8010154 <tcp_input+0x288>)
 800ff92:	f006 ffdb 	bl	8016f4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ff96:	2114      	movs	r1, #20
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7fd fe43 	bl	800dc24 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	895a      	ldrh	r2, [r3, #10]
 800ffa2:	4b71      	ldr	r3, [pc, #452]	; (8010168 <tcp_input+0x29c>)
 800ffa4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ffa6:	4b6e      	ldr	r3, [pc, #440]	; (8010160 <tcp_input+0x294>)
 800ffa8:	881a      	ldrh	r2, [r3, #0]
 800ffaa:	4b6f      	ldr	r3, [pc, #444]	; (8010168 <tcp_input+0x29c>)
 800ffac:	881b      	ldrh	r3, [r3, #0]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ffb2:	4b6d      	ldr	r3, [pc, #436]	; (8010168 <tcp_input+0x29c>)
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7fd fe33 	bl	800dc24 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	895b      	ldrh	r3, [r3, #10]
 800ffc4:	8a3a      	ldrh	r2, [r7, #16]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	f200 8361 	bhi.w	801068e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	4a64      	ldr	r2, [pc, #400]	; (8010164 <tcp_input+0x298>)
 800ffd4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	8a3a      	ldrh	r2, [r7, #16]
 800ffdc:	4611      	mov	r1, r2
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fd fe20 	bl	800dc24 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	891a      	ldrh	r2, [r3, #8]
 800ffe8:	8a3b      	ldrh	r3, [r7, #16]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	895b      	ldrh	r3, [r3, #10]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d005      	beq.n	8010006 <tcp_input+0x13a>
 800fffa:	4b54      	ldr	r3, [pc, #336]	; (801014c <tcp_input+0x280>)
 800fffc:	22df      	movs	r2, #223	; 0xdf
 800fffe:	495c      	ldr	r1, [pc, #368]	; (8010170 <tcp_input+0x2a4>)
 8010000:	4854      	ldr	r0, [pc, #336]	; (8010154 <tcp_input+0x288>)
 8010002:	f006 ffa3 	bl	8016f4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	891a      	ldrh	r2, [r3, #8]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	891b      	ldrh	r3, [r3, #8]
 8010010:	429a      	cmp	r2, r3
 8010012:	d005      	beq.n	8010020 <tcp_input+0x154>
 8010014:	4b4d      	ldr	r3, [pc, #308]	; (801014c <tcp_input+0x280>)
 8010016:	22e0      	movs	r2, #224	; 0xe0
 8010018:	4956      	ldr	r1, [pc, #344]	; (8010174 <tcp_input+0x2a8>)
 801001a:	484e      	ldr	r0, [pc, #312]	; (8010154 <tcp_input+0x288>)
 801001c:	f006 ff96 	bl	8016f4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010020:	4b4d      	ldr	r3, [pc, #308]	; (8010158 <tcp_input+0x28c>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	881b      	ldrh	r3, [r3, #0]
 8010026:	b29b      	uxth	r3, r3
 8010028:	4a4b      	ldr	r2, [pc, #300]	; (8010158 <tcp_input+0x28c>)
 801002a:	6814      	ldr	r4, [r2, #0]
 801002c:	4618      	mov	r0, r3
 801002e:	f7fc faed 	bl	800c60c <lwip_htons>
 8010032:	4603      	mov	r3, r0
 8010034:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010036:	4b48      	ldr	r3, [pc, #288]	; (8010158 <tcp_input+0x28c>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	885b      	ldrh	r3, [r3, #2]
 801003c:	b29b      	uxth	r3, r3
 801003e:	4a46      	ldr	r2, [pc, #280]	; (8010158 <tcp_input+0x28c>)
 8010040:	6814      	ldr	r4, [r2, #0]
 8010042:	4618      	mov	r0, r3
 8010044:	f7fc fae2 	bl	800c60c <lwip_htons>
 8010048:	4603      	mov	r3, r0
 801004a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801004c:	4b42      	ldr	r3, [pc, #264]	; (8010158 <tcp_input+0x28c>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	4a41      	ldr	r2, [pc, #260]	; (8010158 <tcp_input+0x28c>)
 8010054:	6814      	ldr	r4, [r2, #0]
 8010056:	4618      	mov	r0, r3
 8010058:	f7fc faed 	bl	800c636 <lwip_htonl>
 801005c:	4603      	mov	r3, r0
 801005e:	6063      	str	r3, [r4, #4]
 8010060:	6863      	ldr	r3, [r4, #4]
 8010062:	4a45      	ldr	r2, [pc, #276]	; (8010178 <tcp_input+0x2ac>)
 8010064:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010066:	4b3c      	ldr	r3, [pc, #240]	; (8010158 <tcp_input+0x28c>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	4a3a      	ldr	r2, [pc, #232]	; (8010158 <tcp_input+0x28c>)
 801006e:	6814      	ldr	r4, [r2, #0]
 8010070:	4618      	mov	r0, r3
 8010072:	f7fc fae0 	bl	800c636 <lwip_htonl>
 8010076:	4603      	mov	r3, r0
 8010078:	60a3      	str	r3, [r4, #8]
 801007a:	68a3      	ldr	r3, [r4, #8]
 801007c:	4a3f      	ldr	r2, [pc, #252]	; (801017c <tcp_input+0x2b0>)
 801007e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010080:	4b35      	ldr	r3, [pc, #212]	; (8010158 <tcp_input+0x28c>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	89db      	ldrh	r3, [r3, #14]
 8010086:	b29b      	uxth	r3, r3
 8010088:	4a33      	ldr	r2, [pc, #204]	; (8010158 <tcp_input+0x28c>)
 801008a:	6814      	ldr	r4, [r2, #0]
 801008c:	4618      	mov	r0, r3
 801008e:	f7fc fabd 	bl	800c60c <lwip_htons>
 8010092:	4603      	mov	r3, r0
 8010094:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010096:	4b30      	ldr	r3, [pc, #192]	; (8010158 <tcp_input+0x28c>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	899b      	ldrh	r3, [r3, #12]
 801009c:	b29b      	uxth	r3, r3
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fc fab4 	bl	800c60c <lwip_htons>
 80100a4:	4603      	mov	r3, r0
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100ac:	b2da      	uxtb	r2, r3
 80100ae:	4b34      	ldr	r3, [pc, #208]	; (8010180 <tcp_input+0x2b4>)
 80100b0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	891a      	ldrh	r2, [r3, #8]
 80100b6:	4b33      	ldr	r3, [pc, #204]	; (8010184 <tcp_input+0x2b8>)
 80100b8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80100ba:	4b31      	ldr	r3, [pc, #196]	; (8010180 <tcp_input+0x2b4>)
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	f003 0303 	and.w	r3, r3, #3
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d00c      	beq.n	80100e0 <tcp_input+0x214>
    tcplen++;
 80100c6:	4b2f      	ldr	r3, [pc, #188]	; (8010184 <tcp_input+0x2b8>)
 80100c8:	881b      	ldrh	r3, [r3, #0]
 80100ca:	3301      	adds	r3, #1
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	4b2d      	ldr	r3, [pc, #180]	; (8010184 <tcp_input+0x2b8>)
 80100d0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	891a      	ldrh	r2, [r3, #8]
 80100d6:	4b2b      	ldr	r3, [pc, #172]	; (8010184 <tcp_input+0x2b8>)
 80100d8:	881b      	ldrh	r3, [r3, #0]
 80100da:	429a      	cmp	r2, r3
 80100dc:	f200 82d9 	bhi.w	8010692 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80100e0:	2300      	movs	r3, #0
 80100e2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100e4:	4b28      	ldr	r3, [pc, #160]	; (8010188 <tcp_input+0x2bc>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	61fb      	str	r3, [r7, #28]
 80100ea:	e09d      	b.n	8010228 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	7d1b      	ldrb	r3, [r3, #20]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d105      	bne.n	8010100 <tcp_input+0x234>
 80100f4:	4b15      	ldr	r3, [pc, #84]	; (801014c <tcp_input+0x280>)
 80100f6:	22fb      	movs	r2, #251	; 0xfb
 80100f8:	4924      	ldr	r1, [pc, #144]	; (801018c <tcp_input+0x2c0>)
 80100fa:	4816      	ldr	r0, [pc, #88]	; (8010154 <tcp_input+0x288>)
 80100fc:	f006 ff26 	bl	8016f4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	7d1b      	ldrb	r3, [r3, #20]
 8010104:	2b0a      	cmp	r3, #10
 8010106:	d105      	bne.n	8010114 <tcp_input+0x248>
 8010108:	4b10      	ldr	r3, [pc, #64]	; (801014c <tcp_input+0x280>)
 801010a:	22fc      	movs	r2, #252	; 0xfc
 801010c:	4920      	ldr	r1, [pc, #128]	; (8010190 <tcp_input+0x2c4>)
 801010e:	4811      	ldr	r0, [pc, #68]	; (8010154 <tcp_input+0x288>)
 8010110:	f006 ff1c 	bl	8016f4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	7d1b      	ldrb	r3, [r3, #20]
 8010118:	2b01      	cmp	r3, #1
 801011a:	d105      	bne.n	8010128 <tcp_input+0x25c>
 801011c:	4b0b      	ldr	r3, [pc, #44]	; (801014c <tcp_input+0x280>)
 801011e:	22fd      	movs	r2, #253	; 0xfd
 8010120:	491c      	ldr	r1, [pc, #112]	; (8010194 <tcp_input+0x2c8>)
 8010122:	480c      	ldr	r0, [pc, #48]	; (8010154 <tcp_input+0x288>)
 8010124:	f006 ff12 	bl	8016f4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010128:	69fb      	ldr	r3, [r7, #28]
 801012a:	7a1b      	ldrb	r3, [r3, #8]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d033      	beq.n	8010198 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	7a1a      	ldrb	r2, [r3, #8]
 8010134:	4b09      	ldr	r3, [pc, #36]	; (801015c <tcp_input+0x290>)
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801013c:	3301      	adds	r3, #1
 801013e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010140:	429a      	cmp	r2, r3
 8010142:	d029      	beq.n	8010198 <tcp_input+0x2cc>
      prev = pcb;
 8010144:	69fb      	ldr	r3, [r7, #28]
 8010146:	61bb      	str	r3, [r7, #24]
      continue;
 8010148:	e06b      	b.n	8010222 <tcp_input+0x356>
 801014a:	bf00      	nop
 801014c:	0801aa00 	.word	0x0801aa00
 8010150:	0801aa34 	.word	0x0801aa34
 8010154:	0801aa4c 	.word	0x0801aa4c
 8010158:	200016b8 	.word	0x200016b8
 801015c:	2000df88 	.word	0x2000df88
 8010160:	200016bc 	.word	0x200016bc
 8010164:	200016c0 	.word	0x200016c0
 8010168:	200016be 	.word	0x200016be
 801016c:	0801aa74 	.word	0x0801aa74
 8010170:	0801aa84 	.word	0x0801aa84
 8010174:	0801aa90 	.word	0x0801aa90
 8010178:	200016c8 	.word	0x200016c8
 801017c:	200016cc 	.word	0x200016cc
 8010180:	200016d4 	.word	0x200016d4
 8010184:	200016d2 	.word	0x200016d2
 8010188:	200114cc 	.word	0x200114cc
 801018c:	0801aab0 	.word	0x0801aab0
 8010190:	0801aad8 	.word	0x0801aad8
 8010194:	0801ab04 	.word	0x0801ab04
    }

    if (pcb->remote_port == tcphdr->src &&
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	8b1a      	ldrh	r2, [r3, #24]
 801019c:	4b94      	ldr	r3, [pc, #592]	; (80103f0 <tcp_input+0x524>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d13a      	bne.n	801021e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80101a8:	69fb      	ldr	r3, [r7, #28]
 80101aa:	8ada      	ldrh	r2, [r3, #22]
 80101ac:	4b90      	ldr	r3, [pc, #576]	; (80103f0 <tcp_input+0x524>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	885b      	ldrh	r3, [r3, #2]
 80101b2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d132      	bne.n	801021e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	685a      	ldr	r2, [r3, #4]
 80101bc:	4b8d      	ldr	r3, [pc, #564]	; (80103f4 <tcp_input+0x528>)
 80101be:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d12c      	bne.n	801021e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	4b8a      	ldr	r3, [pc, #552]	; (80103f4 <tcp_input+0x528>)
 80101ca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d126      	bne.n	801021e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	69fa      	ldr	r2, [r7, #28]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d106      	bne.n	80101e8 <tcp_input+0x31c>
 80101da:	4b87      	ldr	r3, [pc, #540]	; (80103f8 <tcp_input+0x52c>)
 80101dc:	f240 120d 	movw	r2, #269	; 0x10d
 80101e0:	4986      	ldr	r1, [pc, #536]	; (80103fc <tcp_input+0x530>)
 80101e2:	4887      	ldr	r0, [pc, #540]	; (8010400 <tcp_input+0x534>)
 80101e4:	f006 feb2 	bl	8016f4c <iprintf>
      if (prev != NULL) {
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00a      	beq.n	8010204 <tcp_input+0x338>
        prev->next = pcb->next;
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	68da      	ldr	r2, [r3, #12]
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80101f6:	4b83      	ldr	r3, [pc, #524]	; (8010404 <tcp_input+0x538>)
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80101fe:	4a81      	ldr	r2, [pc, #516]	; (8010404 <tcp_input+0x538>)
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	69fa      	ldr	r2, [r7, #28]
 801020a:	429a      	cmp	r2, r3
 801020c:	d111      	bne.n	8010232 <tcp_input+0x366>
 801020e:	4b7a      	ldr	r3, [pc, #488]	; (80103f8 <tcp_input+0x52c>)
 8010210:	f240 1215 	movw	r2, #277	; 0x115
 8010214:	497c      	ldr	r1, [pc, #496]	; (8010408 <tcp_input+0x53c>)
 8010216:	487a      	ldr	r0, [pc, #488]	; (8010400 <tcp_input+0x534>)
 8010218:	f006 fe98 	bl	8016f4c <iprintf>
      break;
 801021c:	e009      	b.n	8010232 <tcp_input+0x366>
    }
    prev = pcb;
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	68db      	ldr	r3, [r3, #12]
 8010226:	61fb      	str	r3, [r7, #28]
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	2b00      	cmp	r3, #0
 801022c:	f47f af5e 	bne.w	80100ec <tcp_input+0x220>
 8010230:	e000      	b.n	8010234 <tcp_input+0x368>
      break;
 8010232:	bf00      	nop
  }

  if (pcb == NULL) {
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	2b00      	cmp	r3, #0
 8010238:	f040 8095 	bne.w	8010366 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801023c:	4b73      	ldr	r3, [pc, #460]	; (801040c <tcp_input+0x540>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	61fb      	str	r3, [r7, #28]
 8010242:	e03f      	b.n	80102c4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	7d1b      	ldrb	r3, [r3, #20]
 8010248:	2b0a      	cmp	r3, #10
 801024a:	d006      	beq.n	801025a <tcp_input+0x38e>
 801024c:	4b6a      	ldr	r3, [pc, #424]	; (80103f8 <tcp_input+0x52c>)
 801024e:	f240 121f 	movw	r2, #287	; 0x11f
 8010252:	496f      	ldr	r1, [pc, #444]	; (8010410 <tcp_input+0x544>)
 8010254:	486a      	ldr	r0, [pc, #424]	; (8010400 <tcp_input+0x534>)
 8010256:	f006 fe79 	bl	8016f4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	7a1b      	ldrb	r3, [r3, #8]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d009      	beq.n	8010276 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010262:	69fb      	ldr	r3, [r7, #28]
 8010264:	7a1a      	ldrb	r2, [r3, #8]
 8010266:	4b63      	ldr	r3, [pc, #396]	; (80103f4 <tcp_input+0x528>)
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801026e:	3301      	adds	r3, #1
 8010270:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010272:	429a      	cmp	r2, r3
 8010274:	d122      	bne.n	80102bc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	8b1a      	ldrh	r2, [r3, #24]
 801027a:	4b5d      	ldr	r3, [pc, #372]	; (80103f0 <tcp_input+0x524>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	881b      	ldrh	r3, [r3, #0]
 8010280:	b29b      	uxth	r3, r3
 8010282:	429a      	cmp	r2, r3
 8010284:	d11b      	bne.n	80102be <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	8ada      	ldrh	r2, [r3, #22]
 801028a:	4b59      	ldr	r3, [pc, #356]	; (80103f0 <tcp_input+0x524>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	885b      	ldrh	r3, [r3, #2]
 8010290:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010292:	429a      	cmp	r2, r3
 8010294:	d113      	bne.n	80102be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	685a      	ldr	r2, [r3, #4]
 801029a:	4b56      	ldr	r3, [pc, #344]	; (80103f4 <tcp_input+0x528>)
 801029c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801029e:	429a      	cmp	r2, r3
 80102a0:	d10d      	bne.n	80102be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	4b53      	ldr	r3, [pc, #332]	; (80103f4 <tcp_input+0x528>)
 80102a8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d107      	bne.n	80102be <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80102ae:	69f8      	ldr	r0, [r7, #28]
 80102b0:	f000 fb54 	bl	801095c <tcp_timewait_input>
        }
        pbuf_free(p);
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f7fd fd3b 	bl	800dd30 <pbuf_free>
        return;
 80102ba:	e1f0      	b.n	801069e <tcp_input+0x7d2>
        continue;
 80102bc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	61fb      	str	r3, [r7, #28]
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d1bc      	bne.n	8010244 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80102ca:	2300      	movs	r3, #0
 80102cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80102ce:	4b51      	ldr	r3, [pc, #324]	; (8010414 <tcp_input+0x548>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	617b      	str	r3, [r7, #20]
 80102d4:	e02a      	b.n	801032c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	7a1b      	ldrb	r3, [r3, #8]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d00c      	beq.n	80102f8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	7a1a      	ldrb	r2, [r3, #8]
 80102e2:	4b44      	ldr	r3, [pc, #272]	; (80103f4 <tcp_input+0x528>)
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102ea:	3301      	adds	r3, #1
 80102ec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d002      	beq.n	80102f8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	61bb      	str	r3, [r7, #24]
        continue;
 80102f6:	e016      	b.n	8010326 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	8ada      	ldrh	r2, [r3, #22]
 80102fc:	4b3c      	ldr	r3, [pc, #240]	; (80103f0 <tcp_input+0x524>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	885b      	ldrh	r3, [r3, #2]
 8010302:	b29b      	uxth	r3, r3
 8010304:	429a      	cmp	r2, r3
 8010306:	d10c      	bne.n	8010322 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	4b39      	ldr	r3, [pc, #228]	; (80103f4 <tcp_input+0x528>)
 801030e:	695b      	ldr	r3, [r3, #20]
 8010310:	429a      	cmp	r2, r3
 8010312:	d00f      	beq.n	8010334 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d00d      	beq.n	8010336 <tcp_input+0x46a>
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d009      	beq.n	8010336 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	617b      	str	r3, [r7, #20]
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1d1      	bne.n	80102d6 <tcp_input+0x40a>
 8010332:	e000      	b.n	8010336 <tcp_input+0x46a>
            break;
 8010334:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d014      	beq.n	8010366 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00a      	beq.n	8010358 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	68da      	ldr	r2, [r3, #12]
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801034a:	4b32      	ldr	r3, [pc, #200]	; (8010414 <tcp_input+0x548>)
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010352:	4a30      	ldr	r2, [pc, #192]	; (8010414 <tcp_input+0x548>)
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010358:	6978      	ldr	r0, [r7, #20]
 801035a:	f000 fa01 	bl	8010760 <tcp_listen_input>
      }
      pbuf_free(p);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7fd fce6 	bl	800dd30 <pbuf_free>
      return;
 8010364:	e19b      	b.n	801069e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	2b00      	cmp	r3, #0
 801036a:	f000 8160 	beq.w	801062e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801036e:	4b2a      	ldr	r3, [pc, #168]	; (8010418 <tcp_input+0x54c>)
 8010370:	2200      	movs	r2, #0
 8010372:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	891a      	ldrh	r2, [r3, #8]
 8010378:	4b27      	ldr	r3, [pc, #156]	; (8010418 <tcp_input+0x54c>)
 801037a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801037c:	4a26      	ldr	r2, [pc, #152]	; (8010418 <tcp_input+0x54c>)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010382:	4b1b      	ldr	r3, [pc, #108]	; (80103f0 <tcp_input+0x524>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a24      	ldr	r2, [pc, #144]	; (8010418 <tcp_input+0x54c>)
 8010388:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801038a:	4b24      	ldr	r3, [pc, #144]	; (801041c <tcp_input+0x550>)
 801038c:	2200      	movs	r2, #0
 801038e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010390:	4b23      	ldr	r3, [pc, #140]	; (8010420 <tcp_input+0x554>)
 8010392:	2200      	movs	r2, #0
 8010394:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010396:	4b23      	ldr	r3, [pc, #140]	; (8010424 <tcp_input+0x558>)
 8010398:	2200      	movs	r2, #0
 801039a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801039c:	4b22      	ldr	r3, [pc, #136]	; (8010428 <tcp_input+0x55c>)
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	f003 0308 	and.w	r3, r3, #8
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d006      	beq.n	80103b6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	7b5b      	ldrb	r3, [r3, #13]
 80103ac:	f043 0301 	orr.w	r3, r3, #1
 80103b0:	b2da      	uxtb	r2, r3
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d038      	beq.n	8010430 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80103be:	69f8      	ldr	r0, [r7, #28]
 80103c0:	f7ff f852 	bl	800f468 <tcp_process_refused_data>
 80103c4:	4603      	mov	r3, r0
 80103c6:	f113 0f0d 	cmn.w	r3, #13
 80103ca:	d007      	beq.n	80103dc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d02d      	beq.n	8010430 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80103d4:	4b15      	ldr	r3, [pc, #84]	; (801042c <tcp_input+0x560>)
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d029      	beq.n	8010430 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f040 8104 	bne.w	80105ee <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80103e6:	69f8      	ldr	r0, [r7, #28]
 80103e8:	f003 fe16 	bl	8014018 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80103ec:	e0ff      	b.n	80105ee <tcp_input+0x722>
 80103ee:	bf00      	nop
 80103f0:	200016b8 	.word	0x200016b8
 80103f4:	2000df88 	.word	0x2000df88
 80103f8:	0801aa00 	.word	0x0801aa00
 80103fc:	0801ab2c 	.word	0x0801ab2c
 8010400:	0801aa4c 	.word	0x0801aa4c
 8010404:	200114cc 	.word	0x200114cc
 8010408:	0801ab58 	.word	0x0801ab58
 801040c:	200114dc 	.word	0x200114dc
 8010410:	0801ab84 	.word	0x0801ab84
 8010414:	200114d4 	.word	0x200114d4
 8010418:	200016a8 	.word	0x200016a8
 801041c:	200016d8 	.word	0x200016d8
 8010420:	200016d5 	.word	0x200016d5
 8010424:	200016d0 	.word	0x200016d0
 8010428:	200016d4 	.word	0x200016d4
 801042c:	200016d2 	.word	0x200016d2
      }
    }
    tcp_input_pcb = pcb;
 8010430:	4a9c      	ldr	r2, [pc, #624]	; (80106a4 <tcp_input+0x7d8>)
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010436:	69f8      	ldr	r0, [r7, #28]
 8010438:	f000 fb0a 	bl	8010a50 <tcp_process>
 801043c:	4603      	mov	r3, r0
 801043e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010440:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010444:	f113 0f0d 	cmn.w	r3, #13
 8010448:	f000 80d3 	beq.w	80105f2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801044c:	4b96      	ldr	r3, [pc, #600]	; (80106a8 <tcp_input+0x7dc>)
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	f003 0308 	and.w	r3, r3, #8
 8010454:	2b00      	cmp	r3, #0
 8010456:	d015      	beq.n	8010484 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010458:	69fb      	ldr	r3, [r7, #28]
 801045a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801045e:	2b00      	cmp	r3, #0
 8010460:	d008      	beq.n	8010474 <tcp_input+0x5a8>
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010468:	69fa      	ldr	r2, [r7, #28]
 801046a:	6912      	ldr	r2, [r2, #16]
 801046c:	f06f 010d 	mvn.w	r1, #13
 8010470:	4610      	mov	r0, r2
 8010472:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010474:	69f9      	ldr	r1, [r7, #28]
 8010476:	488d      	ldr	r0, [pc, #564]	; (80106ac <tcp_input+0x7e0>)
 8010478:	f7ff fbb0 	bl	800fbdc <tcp_pcb_remove>
        tcp_free(pcb);
 801047c:	69f8      	ldr	r0, [r7, #28]
 801047e:	f7fd fef7 	bl	800e270 <tcp_free>
 8010482:	e0c1      	b.n	8010608 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010484:	2300      	movs	r3, #0
 8010486:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010488:	4b89      	ldr	r3, [pc, #548]	; (80106b0 <tcp_input+0x7e4>)
 801048a:	881b      	ldrh	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d01d      	beq.n	80104cc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010490:	4b87      	ldr	r3, [pc, #540]	; (80106b0 <tcp_input+0x7e4>)
 8010492:	881b      	ldrh	r3, [r3, #0]
 8010494:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00a      	beq.n	80104b6 <tcp_input+0x5ea>
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104a6:	69fa      	ldr	r2, [r7, #28]
 80104a8:	6910      	ldr	r0, [r2, #16]
 80104aa:	89fa      	ldrh	r2, [r7, #14]
 80104ac:	69f9      	ldr	r1, [r7, #28]
 80104ae:	4798      	blx	r3
 80104b0:	4603      	mov	r3, r0
 80104b2:	74fb      	strb	r3, [r7, #19]
 80104b4:	e001      	b.n	80104ba <tcp_input+0x5ee>
 80104b6:	2300      	movs	r3, #0
 80104b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80104ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104be:	f113 0f0d 	cmn.w	r3, #13
 80104c2:	f000 8098 	beq.w	80105f6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80104c6:	4b7a      	ldr	r3, [pc, #488]	; (80106b0 <tcp_input+0x7e4>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80104cc:	69f8      	ldr	r0, [r7, #28]
 80104ce:	f000 f907 	bl	80106e0 <tcp_input_delayed_close>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f040 8090 	bne.w	80105fa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80104da:	4b76      	ldr	r3, [pc, #472]	; (80106b4 <tcp_input+0x7e8>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d041      	beq.n	8010566 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d006      	beq.n	80104f8 <tcp_input+0x62c>
 80104ea:	4b73      	ldr	r3, [pc, #460]	; (80106b8 <tcp_input+0x7ec>)
 80104ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80104f0:	4972      	ldr	r1, [pc, #456]	; (80106bc <tcp_input+0x7f0>)
 80104f2:	4873      	ldr	r0, [pc, #460]	; (80106c0 <tcp_input+0x7f4>)
 80104f4:	f006 fd2a 	bl	8016f4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	8b5b      	ldrh	r3, [r3, #26]
 80104fc:	f003 0310 	and.w	r3, r3, #16
 8010500:	2b00      	cmp	r3, #0
 8010502:	d008      	beq.n	8010516 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010504:	4b6b      	ldr	r3, [pc, #428]	; (80106b4 <tcp_input+0x7e8>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4618      	mov	r0, r3
 801050a:	f7fd fc11 	bl	800dd30 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801050e:	69f8      	ldr	r0, [r7, #28]
 8010510:	f7fe f996 	bl	800e840 <tcp_abort>
            goto aborted;
 8010514:	e078      	b.n	8010608 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00c      	beq.n	801053a <tcp_input+0x66e>
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	6918      	ldr	r0, [r3, #16]
 801052a:	4b62      	ldr	r3, [pc, #392]	; (80106b4 <tcp_input+0x7e8>)
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	2300      	movs	r3, #0
 8010530:	69f9      	ldr	r1, [r7, #28]
 8010532:	47a0      	blx	r4
 8010534:	4603      	mov	r3, r0
 8010536:	74fb      	strb	r3, [r7, #19]
 8010538:	e008      	b.n	801054c <tcp_input+0x680>
 801053a:	4b5e      	ldr	r3, [pc, #376]	; (80106b4 <tcp_input+0x7e8>)
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	2300      	movs	r3, #0
 8010540:	69f9      	ldr	r1, [r7, #28]
 8010542:	2000      	movs	r0, #0
 8010544:	f7ff f884 	bl	800f650 <tcp_recv_null>
 8010548:	4603      	mov	r3, r0
 801054a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801054c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010550:	f113 0f0d 	cmn.w	r3, #13
 8010554:	d053      	beq.n	80105fe <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010556:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d003      	beq.n	8010566 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801055e:	4b55      	ldr	r3, [pc, #340]	; (80106b4 <tcp_input+0x7e8>)
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010566:	4b50      	ldr	r3, [pc, #320]	; (80106a8 <tcp_input+0x7dc>)
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	f003 0320 	and.w	r3, r3, #32
 801056e:	2b00      	cmp	r3, #0
 8010570:	d030      	beq.n	80105d4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010572:	69fb      	ldr	r3, [r7, #28]
 8010574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010576:	2b00      	cmp	r3, #0
 8010578:	d009      	beq.n	801058e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801057e:	7b5a      	ldrb	r2, [r3, #13]
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010584:	f042 0220 	orr.w	r2, r2, #32
 8010588:	b2d2      	uxtb	r2, r2
 801058a:	735a      	strb	r2, [r3, #13]
 801058c:	e022      	b.n	80105d4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010592:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010596:	d005      	beq.n	80105a4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801059c:	3301      	adds	r3, #1
 801059e:	b29a      	uxth	r2, r3
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00b      	beq.n	80105c6 <tcp_input+0x6fa>
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	6918      	ldr	r0, [r3, #16]
 80105b8:	2300      	movs	r3, #0
 80105ba:	2200      	movs	r2, #0
 80105bc:	69f9      	ldr	r1, [r7, #28]
 80105be:	47a0      	blx	r4
 80105c0:	4603      	mov	r3, r0
 80105c2:	74fb      	strb	r3, [r7, #19]
 80105c4:	e001      	b.n	80105ca <tcp_input+0x6fe>
 80105c6:	2300      	movs	r3, #0
 80105c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80105ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105ce:	f113 0f0d 	cmn.w	r3, #13
 80105d2:	d016      	beq.n	8010602 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80105d4:	4b33      	ldr	r3, [pc, #204]	; (80106a4 <tcp_input+0x7d8>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80105da:	69f8      	ldr	r0, [r7, #28]
 80105dc:	f000 f880 	bl	80106e0 <tcp_input_delayed_close>
 80105e0:	4603      	mov	r3, r0
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d10f      	bne.n	8010606 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80105e6:	69f8      	ldr	r0, [r7, #28]
 80105e8:	f002 ff10 	bl	801340c <tcp_output>
 80105ec:	e00c      	b.n	8010608 <tcp_input+0x73c>
        goto aborted;
 80105ee:	bf00      	nop
 80105f0:	e00a      	b.n	8010608 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80105f2:	bf00      	nop
 80105f4:	e008      	b.n	8010608 <tcp_input+0x73c>
              goto aborted;
 80105f6:	bf00      	nop
 80105f8:	e006      	b.n	8010608 <tcp_input+0x73c>
          goto aborted;
 80105fa:	bf00      	nop
 80105fc:	e004      	b.n	8010608 <tcp_input+0x73c>
            goto aborted;
 80105fe:	bf00      	nop
 8010600:	e002      	b.n	8010608 <tcp_input+0x73c>
              goto aborted;
 8010602:	bf00      	nop
 8010604:	e000      	b.n	8010608 <tcp_input+0x73c>
          goto aborted;
 8010606:	bf00      	nop
    tcp_input_pcb = NULL;
 8010608:	4b26      	ldr	r3, [pc, #152]	; (80106a4 <tcp_input+0x7d8>)
 801060a:	2200      	movs	r2, #0
 801060c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801060e:	4b29      	ldr	r3, [pc, #164]	; (80106b4 <tcp_input+0x7e8>)
 8010610:	2200      	movs	r2, #0
 8010612:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010614:	4b2b      	ldr	r3, [pc, #172]	; (80106c4 <tcp_input+0x7f8>)
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d03f      	beq.n	801069c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801061c:	4b29      	ldr	r3, [pc, #164]	; (80106c4 <tcp_input+0x7f8>)
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	4618      	mov	r0, r3
 8010622:	f7fd fb85 	bl	800dd30 <pbuf_free>
      inseg.p = NULL;
 8010626:	4b27      	ldr	r3, [pc, #156]	; (80106c4 <tcp_input+0x7f8>)
 8010628:	2200      	movs	r2, #0
 801062a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801062c:	e036      	b.n	801069c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801062e:	4b26      	ldr	r3, [pc, #152]	; (80106c8 <tcp_input+0x7fc>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	899b      	ldrh	r3, [r3, #12]
 8010634:	b29b      	uxth	r3, r3
 8010636:	4618      	mov	r0, r3
 8010638:	f7fb ffe8 	bl	800c60c <lwip_htons>
 801063c:	4603      	mov	r3, r0
 801063e:	b2db      	uxtb	r3, r3
 8010640:	f003 0304 	and.w	r3, r3, #4
 8010644:	2b00      	cmp	r3, #0
 8010646:	d118      	bne.n	801067a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010648:	4b20      	ldr	r3, [pc, #128]	; (80106cc <tcp_input+0x800>)
 801064a:	6819      	ldr	r1, [r3, #0]
 801064c:	4b20      	ldr	r3, [pc, #128]	; (80106d0 <tcp_input+0x804>)
 801064e:	881b      	ldrh	r3, [r3, #0]
 8010650:	461a      	mov	r2, r3
 8010652:	4b20      	ldr	r3, [pc, #128]	; (80106d4 <tcp_input+0x808>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010658:	4b1b      	ldr	r3, [pc, #108]	; (80106c8 <tcp_input+0x7fc>)
 801065a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801065c:	885b      	ldrh	r3, [r3, #2]
 801065e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010660:	4a19      	ldr	r2, [pc, #100]	; (80106c8 <tcp_input+0x7fc>)
 8010662:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010664:	8812      	ldrh	r2, [r2, #0]
 8010666:	b292      	uxth	r2, r2
 8010668:	9202      	str	r2, [sp, #8]
 801066a:	9301      	str	r3, [sp, #4]
 801066c:	4b1a      	ldr	r3, [pc, #104]	; (80106d8 <tcp_input+0x80c>)
 801066e:	9300      	str	r3, [sp, #0]
 8010670:	4b1a      	ldr	r3, [pc, #104]	; (80106dc <tcp_input+0x810>)
 8010672:	4602      	mov	r2, r0
 8010674:	2000      	movs	r0, #0
 8010676:	f003 fc7d 	bl	8013f74 <tcp_rst>
    pbuf_free(p);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f7fd fb58 	bl	800dd30 <pbuf_free>
  return;
 8010680:	e00c      	b.n	801069c <tcp_input+0x7d0>
    goto dropped;
 8010682:	bf00      	nop
 8010684:	e006      	b.n	8010694 <tcp_input+0x7c8>
    goto dropped;
 8010686:	bf00      	nop
 8010688:	e004      	b.n	8010694 <tcp_input+0x7c8>
    goto dropped;
 801068a:	bf00      	nop
 801068c:	e002      	b.n	8010694 <tcp_input+0x7c8>
      goto dropped;
 801068e:	bf00      	nop
 8010690:	e000      	b.n	8010694 <tcp_input+0x7c8>
      goto dropped;
 8010692:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f7fd fb4b 	bl	800dd30 <pbuf_free>
 801069a:	e000      	b.n	801069e <tcp_input+0x7d2>
  return;
 801069c:	bf00      	nop
}
 801069e:	3724      	adds	r7, #36	; 0x24
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd90      	pop	{r4, r7, pc}
 80106a4:	200114e0 	.word	0x200114e0
 80106a8:	200016d5 	.word	0x200016d5
 80106ac:	200114cc 	.word	0x200114cc
 80106b0:	200016d0 	.word	0x200016d0
 80106b4:	200016d8 	.word	0x200016d8
 80106b8:	0801aa00 	.word	0x0801aa00
 80106bc:	0801abb4 	.word	0x0801abb4
 80106c0:	0801aa4c 	.word	0x0801aa4c
 80106c4:	200016a8 	.word	0x200016a8
 80106c8:	200016b8 	.word	0x200016b8
 80106cc:	200016cc 	.word	0x200016cc
 80106d0:	200016d2 	.word	0x200016d2
 80106d4:	200016c8 	.word	0x200016c8
 80106d8:	2000df98 	.word	0x2000df98
 80106dc:	2000df9c 	.word	0x2000df9c

080106e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d106      	bne.n	80106fc <tcp_input_delayed_close+0x1c>
 80106ee:	4b17      	ldr	r3, [pc, #92]	; (801074c <tcp_input_delayed_close+0x6c>)
 80106f0:	f240 225a 	movw	r2, #602	; 0x25a
 80106f4:	4916      	ldr	r1, [pc, #88]	; (8010750 <tcp_input_delayed_close+0x70>)
 80106f6:	4817      	ldr	r0, [pc, #92]	; (8010754 <tcp_input_delayed_close+0x74>)
 80106f8:	f006 fc28 	bl	8016f4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80106fc:	4b16      	ldr	r3, [pc, #88]	; (8010758 <tcp_input_delayed_close+0x78>)
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	f003 0310 	and.w	r3, r3, #16
 8010704:	2b00      	cmp	r3, #0
 8010706:	d01c      	beq.n	8010742 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	8b5b      	ldrh	r3, [r3, #26]
 801070c:	f003 0310 	and.w	r3, r3, #16
 8010710:	2b00      	cmp	r3, #0
 8010712:	d10d      	bne.n	8010730 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801071a:	2b00      	cmp	r3, #0
 801071c:	d008      	beq.n	8010730 <tcp_input_delayed_close+0x50>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	6912      	ldr	r2, [r2, #16]
 8010728:	f06f 010e 	mvn.w	r1, #14
 801072c:	4610      	mov	r0, r2
 801072e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010730:	6879      	ldr	r1, [r7, #4]
 8010732:	480a      	ldr	r0, [pc, #40]	; (801075c <tcp_input_delayed_close+0x7c>)
 8010734:	f7ff fa52 	bl	800fbdc <tcp_pcb_remove>
    tcp_free(pcb);
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f7fd fd99 	bl	800e270 <tcp_free>
    return 1;
 801073e:	2301      	movs	r3, #1
 8010740:	e000      	b.n	8010744 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010742:	2300      	movs	r3, #0
}
 8010744:	4618      	mov	r0, r3
 8010746:	3708      	adds	r7, #8
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}
 801074c:	0801aa00 	.word	0x0801aa00
 8010750:	0801abd0 	.word	0x0801abd0
 8010754:	0801aa4c 	.word	0x0801aa4c
 8010758:	200016d5 	.word	0x200016d5
 801075c:	200114cc 	.word	0x200114cc

08010760 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010760:	b590      	push	{r4, r7, lr}
 8010762:	b08b      	sub	sp, #44	; 0x2c
 8010764:	af04      	add	r7, sp, #16
 8010766:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010768:	4b6f      	ldr	r3, [pc, #444]	; (8010928 <tcp_listen_input+0x1c8>)
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	f003 0304 	and.w	r3, r3, #4
 8010770:	2b00      	cmp	r3, #0
 8010772:	f040 80d2 	bne.w	801091a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d106      	bne.n	801078a <tcp_listen_input+0x2a>
 801077c:	4b6b      	ldr	r3, [pc, #428]	; (801092c <tcp_listen_input+0x1cc>)
 801077e:	f240 2281 	movw	r2, #641	; 0x281
 8010782:	496b      	ldr	r1, [pc, #428]	; (8010930 <tcp_listen_input+0x1d0>)
 8010784:	486b      	ldr	r0, [pc, #428]	; (8010934 <tcp_listen_input+0x1d4>)
 8010786:	f006 fbe1 	bl	8016f4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801078a:	4b67      	ldr	r3, [pc, #412]	; (8010928 <tcp_listen_input+0x1c8>)
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	f003 0310 	and.w	r3, r3, #16
 8010792:	2b00      	cmp	r3, #0
 8010794:	d019      	beq.n	80107ca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010796:	4b68      	ldr	r3, [pc, #416]	; (8010938 <tcp_listen_input+0x1d8>)
 8010798:	6819      	ldr	r1, [r3, #0]
 801079a:	4b68      	ldr	r3, [pc, #416]	; (801093c <tcp_listen_input+0x1dc>)
 801079c:	881b      	ldrh	r3, [r3, #0]
 801079e:	461a      	mov	r2, r3
 80107a0:	4b67      	ldr	r3, [pc, #412]	; (8010940 <tcp_listen_input+0x1e0>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107a6:	4b67      	ldr	r3, [pc, #412]	; (8010944 <tcp_listen_input+0x1e4>)
 80107a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107aa:	885b      	ldrh	r3, [r3, #2]
 80107ac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107ae:	4a65      	ldr	r2, [pc, #404]	; (8010944 <tcp_listen_input+0x1e4>)
 80107b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107b2:	8812      	ldrh	r2, [r2, #0]
 80107b4:	b292      	uxth	r2, r2
 80107b6:	9202      	str	r2, [sp, #8]
 80107b8:	9301      	str	r3, [sp, #4]
 80107ba:	4b63      	ldr	r3, [pc, #396]	; (8010948 <tcp_listen_input+0x1e8>)
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	4b63      	ldr	r3, [pc, #396]	; (801094c <tcp_listen_input+0x1ec>)
 80107c0:	4602      	mov	r2, r0
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f003 fbd6 	bl	8013f74 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80107c8:	e0a9      	b.n	801091e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80107ca:	4b57      	ldr	r3, [pc, #348]	; (8010928 <tcp_listen_input+0x1c8>)
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	f003 0302 	and.w	r3, r3, #2
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f000 80a3 	beq.w	801091e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	7d5b      	ldrb	r3, [r3, #21]
 80107dc:	4618      	mov	r0, r3
 80107de:	f7ff f85b 	bl	800f898 <tcp_alloc>
 80107e2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d111      	bne.n	801080e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	699b      	ldr	r3, [r3, #24]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d00a      	beq.n	8010808 <tcp_listen_input+0xa8>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	699b      	ldr	r3, [r3, #24]
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	6910      	ldr	r0, [r2, #16]
 80107fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80107fe:	2100      	movs	r1, #0
 8010800:	4798      	blx	r3
 8010802:	4603      	mov	r3, r0
 8010804:	73bb      	strb	r3, [r7, #14]
      return;
 8010806:	e08b      	b.n	8010920 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010808:	23f0      	movs	r3, #240	; 0xf0
 801080a:	73bb      	strb	r3, [r7, #14]
      return;
 801080c:	e088      	b.n	8010920 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801080e:	4b50      	ldr	r3, [pc, #320]	; (8010950 <tcp_listen_input+0x1f0>)
 8010810:	695a      	ldr	r2, [r3, #20]
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010816:	4b4e      	ldr	r3, [pc, #312]	; (8010950 <tcp_listen_input+0x1f0>)
 8010818:	691a      	ldr	r2, [r3, #16]
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	8ada      	ldrh	r2, [r3, #22]
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010826:	4b47      	ldr	r3, [pc, #284]	; (8010944 <tcp_listen_input+0x1e4>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	881b      	ldrh	r3, [r3, #0]
 801082c:	b29a      	uxth	r2, r3
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	2203      	movs	r2, #3
 8010836:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010838:	4b41      	ldr	r3, [pc, #260]	; (8010940 <tcp_listen_input+0x1e0>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	1c5a      	adds	r2, r3, #1
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801084a:	6978      	ldr	r0, [r7, #20]
 801084c:	f7ff fa5a 	bl	800fd04 <tcp_next_iss>
 8010850:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	693a      	ldr	r2, [r7, #16]
 8010856:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	693a      	ldr	r2, [r7, #16]
 801085c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	693a      	ldr	r2, [r7, #16]
 8010862:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	693a      	ldr	r2, [r7, #16]
 8010868:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801086a:	4b35      	ldr	r3, [pc, #212]	; (8010940 <tcp_listen_input+0x1e0>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	1e5a      	subs	r2, r3, #1
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	691a      	ldr	r2, [r3, #16]
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	7a5b      	ldrb	r3, [r3, #9]
 8010886:	f003 030c 	and.w	r3, r3, #12
 801088a:	b2da      	uxtb	r2, r3
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	7a1a      	ldrb	r2, [r3, #8]
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010898:	4b2e      	ldr	r3, [pc, #184]	; (8010954 <tcp_listen_input+0x1f4>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	60da      	str	r2, [r3, #12]
 80108a0:	4a2c      	ldr	r2, [pc, #176]	; (8010954 <tcp_listen_input+0x1f4>)
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	6013      	str	r3, [r2, #0]
 80108a6:	f003 fd27 	bl	80142f8 <tcp_timer_needed>
 80108aa:	4b2b      	ldr	r3, [pc, #172]	; (8010958 <tcp_listen_input+0x1f8>)
 80108ac:	2201      	movs	r2, #1
 80108ae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80108b0:	6978      	ldr	r0, [r7, #20]
 80108b2:	f001 fd8d 	bl	80123d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80108b6:	4b23      	ldr	r3, [pc, #140]	; (8010944 <tcp_listen_input+0x1e4>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	89db      	ldrh	r3, [r3, #14]
 80108bc:	b29a      	uxth	r2, r3
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	3304      	adds	r3, #4
 80108d8:	4618      	mov	r0, r3
 80108da:	f005 f8eb 	bl	8015ab4 <ip4_route>
 80108de:	4601      	mov	r1, r0
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	3304      	adds	r3, #4
 80108e4:	461a      	mov	r2, r3
 80108e6:	4620      	mov	r0, r4
 80108e8:	f7ff fa32 	bl	800fd50 <tcp_eff_send_mss_netif>
 80108ec:	4603      	mov	r3, r0
 80108ee:	461a      	mov	r2, r3
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80108f4:	2112      	movs	r1, #18
 80108f6:	6978      	ldr	r0, [r7, #20]
 80108f8:	f002 fc9a 	bl	8013230 <tcp_enqueue_flags>
 80108fc:	4603      	mov	r3, r0
 80108fe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d004      	beq.n	8010912 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010908:	2100      	movs	r1, #0
 801090a:	6978      	ldr	r0, [r7, #20]
 801090c:	f7fd feda 	bl	800e6c4 <tcp_abandon>
      return;
 8010910:	e006      	b.n	8010920 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010912:	6978      	ldr	r0, [r7, #20]
 8010914:	f002 fd7a 	bl	801340c <tcp_output>
  return;
 8010918:	e001      	b.n	801091e <tcp_listen_input+0x1be>
    return;
 801091a:	bf00      	nop
 801091c:	e000      	b.n	8010920 <tcp_listen_input+0x1c0>
  return;
 801091e:	bf00      	nop
}
 8010920:	371c      	adds	r7, #28
 8010922:	46bd      	mov	sp, r7
 8010924:	bd90      	pop	{r4, r7, pc}
 8010926:	bf00      	nop
 8010928:	200016d4 	.word	0x200016d4
 801092c:	0801aa00 	.word	0x0801aa00
 8010930:	0801abf8 	.word	0x0801abf8
 8010934:	0801aa4c 	.word	0x0801aa4c
 8010938:	200016cc 	.word	0x200016cc
 801093c:	200016d2 	.word	0x200016d2
 8010940:	200016c8 	.word	0x200016c8
 8010944:	200016b8 	.word	0x200016b8
 8010948:	2000df98 	.word	0x2000df98
 801094c:	2000df9c 	.word	0x2000df9c
 8010950:	2000df88 	.word	0x2000df88
 8010954:	200114cc 	.word	0x200114cc
 8010958:	200114c8 	.word	0x200114c8

0801095c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b086      	sub	sp, #24
 8010960:	af04      	add	r7, sp, #16
 8010962:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010964:	4b2f      	ldr	r3, [pc, #188]	; (8010a24 <tcp_timewait_input+0xc8>)
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	f003 0304 	and.w	r3, r3, #4
 801096c:	2b00      	cmp	r3, #0
 801096e:	d153      	bne.n	8010a18 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d106      	bne.n	8010984 <tcp_timewait_input+0x28>
 8010976:	4b2c      	ldr	r3, [pc, #176]	; (8010a28 <tcp_timewait_input+0xcc>)
 8010978:	f240 22ee 	movw	r2, #750	; 0x2ee
 801097c:	492b      	ldr	r1, [pc, #172]	; (8010a2c <tcp_timewait_input+0xd0>)
 801097e:	482c      	ldr	r0, [pc, #176]	; (8010a30 <tcp_timewait_input+0xd4>)
 8010980:	f006 fae4 	bl	8016f4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010984:	4b27      	ldr	r3, [pc, #156]	; (8010a24 <tcp_timewait_input+0xc8>)
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	f003 0302 	and.w	r3, r3, #2
 801098c:	2b00      	cmp	r3, #0
 801098e:	d02a      	beq.n	80109e6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010990:	4b28      	ldr	r3, [pc, #160]	; (8010a34 <tcp_timewait_input+0xd8>)
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010998:	1ad3      	subs	r3, r2, r3
 801099a:	2b00      	cmp	r3, #0
 801099c:	db2d      	blt.n	80109fa <tcp_timewait_input+0x9e>
 801099e:	4b25      	ldr	r3, [pc, #148]	; (8010a34 <tcp_timewait_input+0xd8>)
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109a6:	6879      	ldr	r1, [r7, #4]
 80109a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80109aa:	440b      	add	r3, r1
 80109ac:	1ad3      	subs	r3, r2, r3
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	dc23      	bgt.n	80109fa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109b2:	4b21      	ldr	r3, [pc, #132]	; (8010a38 <tcp_timewait_input+0xdc>)
 80109b4:	6819      	ldr	r1, [r3, #0]
 80109b6:	4b21      	ldr	r3, [pc, #132]	; (8010a3c <tcp_timewait_input+0xe0>)
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	461a      	mov	r2, r3
 80109bc:	4b1d      	ldr	r3, [pc, #116]	; (8010a34 <tcp_timewait_input+0xd8>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109c2:	4b1f      	ldr	r3, [pc, #124]	; (8010a40 <tcp_timewait_input+0xe4>)
 80109c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109c6:	885b      	ldrh	r3, [r3, #2]
 80109c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109ca:	4a1d      	ldr	r2, [pc, #116]	; (8010a40 <tcp_timewait_input+0xe4>)
 80109cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109ce:	8812      	ldrh	r2, [r2, #0]
 80109d0:	b292      	uxth	r2, r2
 80109d2:	9202      	str	r2, [sp, #8]
 80109d4:	9301      	str	r3, [sp, #4]
 80109d6:	4b1b      	ldr	r3, [pc, #108]	; (8010a44 <tcp_timewait_input+0xe8>)
 80109d8:	9300      	str	r3, [sp, #0]
 80109da:	4b1b      	ldr	r3, [pc, #108]	; (8010a48 <tcp_timewait_input+0xec>)
 80109dc:	4602      	mov	r2, r0
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f003 fac8 	bl	8013f74 <tcp_rst>
      return;
 80109e4:	e01b      	b.n	8010a1e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80109e6:	4b0f      	ldr	r3, [pc, #60]	; (8010a24 <tcp_timewait_input+0xc8>)
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	f003 0301 	and.w	r3, r3, #1
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d003      	beq.n	80109fa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80109f2:	4b16      	ldr	r3, [pc, #88]	; (8010a4c <tcp_timewait_input+0xf0>)
 80109f4:	681a      	ldr	r2, [r3, #0]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80109fa:	4b10      	ldr	r3, [pc, #64]	; (8010a3c <tcp_timewait_input+0xe0>)
 80109fc:	881b      	ldrh	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d00c      	beq.n	8010a1c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	8b5b      	ldrh	r3, [r3, #26]
 8010a06:	f043 0302 	orr.w	r3, r3, #2
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f002 fcfb 	bl	801340c <tcp_output>
  }
  return;
 8010a16:	e001      	b.n	8010a1c <tcp_timewait_input+0xc0>
    return;
 8010a18:	bf00      	nop
 8010a1a:	e000      	b.n	8010a1e <tcp_timewait_input+0xc2>
  return;
 8010a1c:	bf00      	nop
}
 8010a1e:	3708      	adds	r7, #8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	200016d4 	.word	0x200016d4
 8010a28:	0801aa00 	.word	0x0801aa00
 8010a2c:	0801ac18 	.word	0x0801ac18
 8010a30:	0801aa4c 	.word	0x0801aa4c
 8010a34:	200016c8 	.word	0x200016c8
 8010a38:	200016cc 	.word	0x200016cc
 8010a3c:	200016d2 	.word	0x200016d2
 8010a40:	200016b8 	.word	0x200016b8
 8010a44:	2000df98 	.word	0x2000df98
 8010a48:	2000df9c 	.word	0x2000df9c
 8010a4c:	200114d0 	.word	0x200114d0

08010a50 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010a50:	b590      	push	{r4, r7, lr}
 8010a52:	b08d      	sub	sp, #52	; 0x34
 8010a54:	af04      	add	r7, sp, #16
 8010a56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d106      	bne.n	8010a74 <tcp_process+0x24>
 8010a66:	4ba5      	ldr	r3, [pc, #660]	; (8010cfc <tcp_process+0x2ac>)
 8010a68:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010a6c:	49a4      	ldr	r1, [pc, #656]	; (8010d00 <tcp_process+0x2b0>)
 8010a6e:	48a5      	ldr	r0, [pc, #660]	; (8010d04 <tcp_process+0x2b4>)
 8010a70:	f006 fa6c 	bl	8016f4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010a74:	4ba4      	ldr	r3, [pc, #656]	; (8010d08 <tcp_process+0x2b8>)
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d04e      	beq.n	8010b1e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	7d1b      	ldrb	r3, [r3, #20]
 8010a84:	2b02      	cmp	r3, #2
 8010a86:	d108      	bne.n	8010a9a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a8c:	4b9f      	ldr	r3, [pc, #636]	; (8010d0c <tcp_process+0x2bc>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d123      	bne.n	8010adc <tcp_process+0x8c>
        acceptable = 1;
 8010a94:	2301      	movs	r3, #1
 8010a96:	76fb      	strb	r3, [r7, #27]
 8010a98:	e020      	b.n	8010adc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a9e:	4b9c      	ldr	r3, [pc, #624]	; (8010d10 <tcp_process+0x2c0>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d102      	bne.n	8010aac <tcp_process+0x5c>
        acceptable = 1;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	76fb      	strb	r3, [r7, #27]
 8010aaa:	e017      	b.n	8010adc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010aac:	4b98      	ldr	r3, [pc, #608]	; (8010d10 <tcp_process+0x2c0>)
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ab4:	1ad3      	subs	r3, r2, r3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	db10      	blt.n	8010adc <tcp_process+0x8c>
 8010aba:	4b95      	ldr	r3, [pc, #596]	; (8010d10 <tcp_process+0x2c0>)
 8010abc:	681a      	ldr	r2, [r3, #0]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac2:	6879      	ldr	r1, [r7, #4]
 8010ac4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ac6:	440b      	add	r3, r1
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	dc06      	bgt.n	8010adc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	8b5b      	ldrh	r3, [r3, #26]
 8010ad2:	f043 0302 	orr.w	r3, r3, #2
 8010ad6:	b29a      	uxth	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010adc:	7efb      	ldrb	r3, [r7, #27]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d01b      	beq.n	8010b1a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	7d1b      	ldrb	r3, [r3, #20]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d106      	bne.n	8010af8 <tcp_process+0xa8>
 8010aea:	4b84      	ldr	r3, [pc, #528]	; (8010cfc <tcp_process+0x2ac>)
 8010aec:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010af0:	4988      	ldr	r1, [pc, #544]	; (8010d14 <tcp_process+0x2c4>)
 8010af2:	4884      	ldr	r0, [pc, #528]	; (8010d04 <tcp_process+0x2b4>)
 8010af4:	f006 fa2a 	bl	8016f4c <iprintf>
      recv_flags |= TF_RESET;
 8010af8:	4b87      	ldr	r3, [pc, #540]	; (8010d18 <tcp_process+0x2c8>)
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	f043 0308 	orr.w	r3, r3, #8
 8010b00:	b2da      	uxtb	r2, r3
 8010b02:	4b85      	ldr	r3, [pc, #532]	; (8010d18 <tcp_process+0x2c8>)
 8010b04:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	8b5b      	ldrh	r3, [r3, #26]
 8010b0a:	f023 0301 	bic.w	r3, r3, #1
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010b14:	f06f 030d 	mvn.w	r3, #13
 8010b18:	e37a      	b.n	8011210 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	e378      	b.n	8011210 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010b1e:	4b7a      	ldr	r3, [pc, #488]	; (8010d08 <tcp_process+0x2b8>)
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	f003 0302 	and.w	r3, r3, #2
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d010      	beq.n	8010b4c <tcp_process+0xfc>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	7d1b      	ldrb	r3, [r3, #20]
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	d00c      	beq.n	8010b4c <tcp_process+0xfc>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	7d1b      	ldrb	r3, [r3, #20]
 8010b36:	2b03      	cmp	r3, #3
 8010b38:	d008      	beq.n	8010b4c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	8b5b      	ldrh	r3, [r3, #26]
 8010b3e:	f043 0302 	orr.w	r3, r3, #2
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	e361      	b.n	8011210 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	8b5b      	ldrh	r3, [r3, #26]
 8010b50:	f003 0310 	and.w	r3, r3, #16
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d103      	bne.n	8010b60 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010b58:	4b70      	ldr	r3, [pc, #448]	; (8010d1c <tcp_process+0x2cc>)
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f001 fc2d 	bl	80123d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7d1b      	ldrb	r3, [r3, #20]
 8010b7a:	3b02      	subs	r3, #2
 8010b7c:	2b07      	cmp	r3, #7
 8010b7e:	f200 8337 	bhi.w	80111f0 <tcp_process+0x7a0>
 8010b82:	a201      	add	r2, pc, #4	; (adr r2, 8010b88 <tcp_process+0x138>)
 8010b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b88:	08010ba9 	.word	0x08010ba9
 8010b8c:	08010dd9 	.word	0x08010dd9
 8010b90:	08010f51 	.word	0x08010f51
 8010b94:	08010f7b 	.word	0x08010f7b
 8010b98:	0801109f 	.word	0x0801109f
 8010b9c:	08010f51 	.word	0x08010f51
 8010ba0:	0801112b 	.word	0x0801112b
 8010ba4:	080111bb 	.word	0x080111bb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010ba8:	4b57      	ldr	r3, [pc, #348]	; (8010d08 <tcp_process+0x2b8>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	f003 0310 	and.w	r3, r3, #16
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f000 80e4 	beq.w	8010d7e <tcp_process+0x32e>
 8010bb6:	4b54      	ldr	r3, [pc, #336]	; (8010d08 <tcp_process+0x2b8>)
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	f003 0302 	and.w	r3, r3, #2
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f000 80dd 	beq.w	8010d7e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	4b50      	ldr	r3, [pc, #320]	; (8010d0c <tcp_process+0x2bc>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	f040 80d5 	bne.w	8010d7e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010bd4:	4b4e      	ldr	r3, [pc, #312]	; (8010d10 <tcp_process+0x2c0>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	1c5a      	adds	r2, r3, #1
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010be6:	4b49      	ldr	r3, [pc, #292]	; (8010d0c <tcp_process+0x2bc>)
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010bee:	4b4c      	ldr	r3, [pc, #304]	; (8010d20 <tcp_process+0x2d0>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	89db      	ldrh	r3, [r3, #14]
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010c08:	4b41      	ldr	r3, [pc, #260]	; (8010d10 <tcp_process+0x2c0>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	1e5a      	subs	r2, r3, #1
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2204      	movs	r2, #4
 8010c16:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	3304      	adds	r3, #4
 8010c20:	4618      	mov	r0, r3
 8010c22:	f004 ff47 	bl	8015ab4 <ip4_route>
 8010c26:	4601      	mov	r1, r0
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	3304      	adds	r3, #4
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f7ff f88e 	bl	800fd50 <tcp_eff_send_mss_netif>
 8010c34:	4603      	mov	r3, r0
 8010c36:	461a      	mov	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c40:	009a      	lsls	r2, r3, #2
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	f241 111c 	movw	r1, #4380	; 0x111c
 8010c4c:	428b      	cmp	r3, r1
 8010c4e:	bf38      	it	cc
 8010c50:	460b      	movcc	r3, r1
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d204      	bcs.n	8010c60 <tcp_process+0x210>
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	e00d      	b.n	8010c7c <tcp_process+0x22c>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	f241 121c 	movw	r2, #4380	; 0x111c
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d904      	bls.n	8010c78 <tcp_process+0x228>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c72:	005b      	lsls	r3, r3, #1
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	e001      	b.n	8010c7c <tcp_process+0x22c>
 8010c78:	f241 131c 	movw	r3, #4380	; 0x111c
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d106      	bne.n	8010c9a <tcp_process+0x24a>
 8010c8c:	4b1b      	ldr	r3, [pc, #108]	; (8010cfc <tcp_process+0x2ac>)
 8010c8e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010c92:	4924      	ldr	r1, [pc, #144]	; (8010d24 <tcp_process+0x2d4>)
 8010c94:	481b      	ldr	r0, [pc, #108]	; (8010d04 <tcp_process+0x2b4>)
 8010c96:	f006 f959 	bl	8016f4c <iprintf>
        --pcb->snd_queuelen;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ca0:	3b01      	subs	r3, #1
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d111      	bne.n	8010cda <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d106      	bne.n	8010cd0 <tcp_process+0x280>
 8010cc2:	4b0e      	ldr	r3, [pc, #56]	; (8010cfc <tcp_process+0x2ac>)
 8010cc4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010cc8:	4917      	ldr	r1, [pc, #92]	; (8010d28 <tcp_process+0x2d8>)
 8010cca:	480e      	ldr	r0, [pc, #56]	; (8010d04 <tcp_process+0x2b4>)
 8010ccc:	f006 f93e 	bl	8016f4c <iprintf>
          pcb->unsent = rseg->next;
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	681a      	ldr	r2, [r3, #0]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	66da      	str	r2, [r3, #108]	; 0x6c
 8010cd8:	e003      	b.n	8010ce2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010cda:	69fb      	ldr	r3, [r7, #28]
 8010cdc:	681a      	ldr	r2, [r3, #0]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010ce2:	69f8      	ldr	r0, [r7, #28]
 8010ce4:	f7fe fc51 	bl	800f58a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d11d      	bne.n	8010d2c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cf6:	861a      	strh	r2, [r3, #48]	; 0x30
 8010cf8:	e01f      	b.n	8010d3a <tcp_process+0x2ea>
 8010cfa:	bf00      	nop
 8010cfc:	0801aa00 	.word	0x0801aa00
 8010d00:	0801ac38 	.word	0x0801ac38
 8010d04:	0801aa4c 	.word	0x0801aa4c
 8010d08:	200016d4 	.word	0x200016d4
 8010d0c:	200016cc 	.word	0x200016cc
 8010d10:	200016c8 	.word	0x200016c8
 8010d14:	0801ac54 	.word	0x0801ac54
 8010d18:	200016d5 	.word	0x200016d5
 8010d1c:	200114d0 	.word	0x200114d0
 8010d20:	200016b8 	.word	0x200016b8
 8010d24:	0801ac74 	.word	0x0801ac74
 8010d28:	0801ac8c 	.word	0x0801ac8c
        } else {
          pcb->rtime = 0;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2200      	movs	r2, #0
 8010d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d00a      	beq.n	8010d5a <tcp_process+0x30a>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	6910      	ldr	r0, [r2, #16]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	6879      	ldr	r1, [r7, #4]
 8010d52:	4798      	blx	r3
 8010d54:	4603      	mov	r3, r0
 8010d56:	76bb      	strb	r3, [r7, #26]
 8010d58:	e001      	b.n	8010d5e <tcp_process+0x30e>
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010d5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010d62:	f113 0f0d 	cmn.w	r3, #13
 8010d66:	d102      	bne.n	8010d6e <tcp_process+0x31e>
          return ERR_ABRT;
 8010d68:	f06f 030c 	mvn.w	r3, #12
 8010d6c:	e250      	b.n	8011210 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	8b5b      	ldrh	r3, [r3, #26]
 8010d72:	f043 0302 	orr.w	r3, r3, #2
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010d7c:	e23a      	b.n	80111f4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010d7e:	4b9d      	ldr	r3, [pc, #628]	; (8010ff4 <tcp_process+0x5a4>)
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	f003 0310 	and.w	r3, r3, #16
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	f000 8234 	beq.w	80111f4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d8c:	4b9a      	ldr	r3, [pc, #616]	; (8010ff8 <tcp_process+0x5a8>)
 8010d8e:	6819      	ldr	r1, [r3, #0]
 8010d90:	4b9a      	ldr	r3, [pc, #616]	; (8010ffc <tcp_process+0x5ac>)
 8010d92:	881b      	ldrh	r3, [r3, #0]
 8010d94:	461a      	mov	r2, r3
 8010d96:	4b9a      	ldr	r3, [pc, #616]	; (8011000 <tcp_process+0x5b0>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d9c:	4b99      	ldr	r3, [pc, #612]	; (8011004 <tcp_process+0x5b4>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010da0:	885b      	ldrh	r3, [r3, #2]
 8010da2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010da4:	4a97      	ldr	r2, [pc, #604]	; (8011004 <tcp_process+0x5b4>)
 8010da6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010da8:	8812      	ldrh	r2, [r2, #0]
 8010daa:	b292      	uxth	r2, r2
 8010dac:	9202      	str	r2, [sp, #8]
 8010dae:	9301      	str	r3, [sp, #4]
 8010db0:	4b95      	ldr	r3, [pc, #596]	; (8011008 <tcp_process+0x5b8>)
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	4b95      	ldr	r3, [pc, #596]	; (801100c <tcp_process+0x5bc>)
 8010db6:	4602      	mov	r2, r0
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f003 f8db 	bl	8013f74 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010dc4:	2b05      	cmp	r3, #5
 8010dc6:	f200 8215 	bhi.w	80111f4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f002 fea5 	bl	8013b20 <tcp_rexmit_rto>
      break;
 8010dd6:	e20d      	b.n	80111f4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010dd8:	4b86      	ldr	r3, [pc, #536]	; (8010ff4 <tcp_process+0x5a4>)
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	f003 0310 	and.w	r3, r3, #16
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f000 80a1 	beq.w	8010f28 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010de6:	4b84      	ldr	r3, [pc, #528]	; (8010ff8 <tcp_process+0x5a8>)
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dee:	1ad3      	subs	r3, r2, r3
 8010df0:	3b01      	subs	r3, #1
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	db7e      	blt.n	8010ef4 <tcp_process+0x4a4>
 8010df6:	4b80      	ldr	r3, [pc, #512]	; (8010ff8 <tcp_process+0x5a8>)
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	dc77      	bgt.n	8010ef4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2204      	movs	r2, #4
 8010e08:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d102      	bne.n	8010e18 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010e12:	23fa      	movs	r3, #250	; 0xfa
 8010e14:	76bb      	strb	r3, [r7, #26]
 8010e16:	e01d      	b.n	8010e54 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e1c:	699b      	ldr	r3, [r3, #24]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <tcp_process+0x3e0>
 8010e22:	4b7b      	ldr	r3, [pc, #492]	; (8011010 <tcp_process+0x5c0>)
 8010e24:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010e28:	497a      	ldr	r1, [pc, #488]	; (8011014 <tcp_process+0x5c4>)
 8010e2a:	487b      	ldr	r0, [pc, #492]	; (8011018 <tcp_process+0x5c8>)
 8010e2c:	f006 f88e 	bl	8016f4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e34:	699b      	ldr	r3, [r3, #24]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00a      	beq.n	8010e50 <tcp_process+0x400>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e3e:	699b      	ldr	r3, [r3, #24]
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	6910      	ldr	r0, [r2, #16]
 8010e44:	2200      	movs	r2, #0
 8010e46:	6879      	ldr	r1, [r7, #4]
 8010e48:	4798      	blx	r3
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	76bb      	strb	r3, [r7, #26]
 8010e4e:	e001      	b.n	8010e54 <tcp_process+0x404>
 8010e50:	23f0      	movs	r3, #240	; 0xf0
 8010e52:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010e54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d00a      	beq.n	8010e72 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010e5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010e60:	f113 0f0d 	cmn.w	r3, #13
 8010e64:	d002      	beq.n	8010e6c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f7fd fcea 	bl	800e840 <tcp_abort>
            }
            return ERR_ABRT;
 8010e6c:	f06f 030c 	mvn.w	r3, #12
 8010e70:	e1ce      	b.n	8011210 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f000 fae0 	bl	8011438 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010e78:	4b68      	ldr	r3, [pc, #416]	; (801101c <tcp_process+0x5cc>)
 8010e7a:	881b      	ldrh	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d005      	beq.n	8010e8c <tcp_process+0x43c>
            recv_acked--;
 8010e80:	4b66      	ldr	r3, [pc, #408]	; (801101c <tcp_process+0x5cc>)
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	b29a      	uxth	r2, r3
 8010e88:	4b64      	ldr	r3, [pc, #400]	; (801101c <tcp_process+0x5cc>)
 8010e8a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e90:	009a      	lsls	r2, r3, #2
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e96:	005b      	lsls	r3, r3, #1
 8010e98:	f241 111c 	movw	r1, #4380	; 0x111c
 8010e9c:	428b      	cmp	r3, r1
 8010e9e:	bf38      	it	cc
 8010ea0:	460b      	movcc	r3, r1
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d204      	bcs.n	8010eb0 <tcp_process+0x460>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	e00d      	b.n	8010ecc <tcp_process+0x47c>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	f241 121c 	movw	r2, #4380	; 0x111c
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	d904      	bls.n	8010ec8 <tcp_process+0x478>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ec2:	005b      	lsls	r3, r3, #1
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	e001      	b.n	8010ecc <tcp_process+0x47c>
 8010ec8:	f241 131c 	movw	r3, #4380	; 0x111c
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010ed2:	4b53      	ldr	r3, [pc, #332]	; (8011020 <tcp_process+0x5d0>)
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	f003 0320 	and.w	r3, r3, #32
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d037      	beq.n	8010f4e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	8b5b      	ldrh	r3, [r3, #26]
 8010ee2:	f043 0302 	orr.w	r3, r3, #2
 8010ee6:	b29a      	uxth	r2, r3
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2207      	movs	r2, #7
 8010ef0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010ef2:	e02c      	b.n	8010f4e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ef4:	4b40      	ldr	r3, [pc, #256]	; (8010ff8 <tcp_process+0x5a8>)
 8010ef6:	6819      	ldr	r1, [r3, #0]
 8010ef8:	4b40      	ldr	r3, [pc, #256]	; (8010ffc <tcp_process+0x5ac>)
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	461a      	mov	r2, r3
 8010efe:	4b40      	ldr	r3, [pc, #256]	; (8011000 <tcp_process+0x5b0>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f04:	4b3f      	ldr	r3, [pc, #252]	; (8011004 <tcp_process+0x5b4>)
 8010f06:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f08:	885b      	ldrh	r3, [r3, #2]
 8010f0a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f0c:	4a3d      	ldr	r2, [pc, #244]	; (8011004 <tcp_process+0x5b4>)
 8010f0e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f10:	8812      	ldrh	r2, [r2, #0]
 8010f12:	b292      	uxth	r2, r2
 8010f14:	9202      	str	r2, [sp, #8]
 8010f16:	9301      	str	r3, [sp, #4]
 8010f18:	4b3b      	ldr	r3, [pc, #236]	; (8011008 <tcp_process+0x5b8>)
 8010f1a:	9300      	str	r3, [sp, #0]
 8010f1c:	4b3b      	ldr	r3, [pc, #236]	; (801100c <tcp_process+0x5bc>)
 8010f1e:	4602      	mov	r2, r0
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f003 f827 	bl	8013f74 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010f26:	e167      	b.n	80111f8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010f28:	4b32      	ldr	r3, [pc, #200]	; (8010ff4 <tcp_process+0x5a4>)
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	f003 0302 	and.w	r3, r3, #2
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 8161 	beq.w	80111f8 <tcp_process+0x7a8>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f3a:	1e5a      	subs	r2, r3, #1
 8010f3c:	4b30      	ldr	r3, [pc, #192]	; (8011000 <tcp_process+0x5b0>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	f040 8159 	bne.w	80111f8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f002 fe0c 	bl	8013b64 <tcp_rexmit>
      break;
 8010f4c:	e154      	b.n	80111f8 <tcp_process+0x7a8>
 8010f4e:	e153      	b.n	80111f8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 fa71 	bl	8011438 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010f56:	4b32      	ldr	r3, [pc, #200]	; (8011020 <tcp_process+0x5d0>)
 8010f58:	781b      	ldrb	r3, [r3, #0]
 8010f5a:	f003 0320 	and.w	r3, r3, #32
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	f000 814c 	beq.w	80111fc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	8b5b      	ldrh	r3, [r3, #26]
 8010f68:	f043 0302 	orr.w	r3, r3, #2
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2207      	movs	r2, #7
 8010f76:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010f78:	e140      	b.n	80111fc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 fa5c 	bl	8011438 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010f80:	4b27      	ldr	r3, [pc, #156]	; (8011020 <tcp_process+0x5d0>)
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	f003 0320 	and.w	r3, r3, #32
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d071      	beq.n	8011070 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f8c:	4b19      	ldr	r3, [pc, #100]	; (8010ff4 <tcp_process+0x5a4>)
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	f003 0310 	and.w	r3, r3, #16
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d060      	beq.n	801105a <tcp_process+0x60a>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f9c:	4b16      	ldr	r3, [pc, #88]	; (8010ff8 <tcp_process+0x5a8>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d15a      	bne.n	801105a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d156      	bne.n	801105a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	8b5b      	ldrh	r3, [r3, #26]
 8010fb0:	f043 0302 	orr.w	r3, r3, #2
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f7fe fdbe 	bl	800fb3c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010fc0:	4b18      	ldr	r3, [pc, #96]	; (8011024 <tcp_process+0x5d4>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d105      	bne.n	8010fd6 <tcp_process+0x586>
 8010fca:	4b16      	ldr	r3, [pc, #88]	; (8011024 <tcp_process+0x5d4>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	68db      	ldr	r3, [r3, #12]
 8010fd0:	4a14      	ldr	r2, [pc, #80]	; (8011024 <tcp_process+0x5d4>)
 8010fd2:	6013      	str	r3, [r2, #0]
 8010fd4:	e02e      	b.n	8011034 <tcp_process+0x5e4>
 8010fd6:	4b13      	ldr	r3, [pc, #76]	; (8011024 <tcp_process+0x5d4>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	617b      	str	r3, [r7, #20]
 8010fdc:	e027      	b.n	801102e <tcp_process+0x5de>
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d11f      	bne.n	8011028 <tcp_process+0x5d8>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	68da      	ldr	r2, [r3, #12]
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	60da      	str	r2, [r3, #12]
 8010ff0:	e020      	b.n	8011034 <tcp_process+0x5e4>
 8010ff2:	bf00      	nop
 8010ff4:	200016d4 	.word	0x200016d4
 8010ff8:	200016cc 	.word	0x200016cc
 8010ffc:	200016d2 	.word	0x200016d2
 8011000:	200016c8 	.word	0x200016c8
 8011004:	200016b8 	.word	0x200016b8
 8011008:	2000df98 	.word	0x2000df98
 801100c:	2000df9c 	.word	0x2000df9c
 8011010:	0801aa00 	.word	0x0801aa00
 8011014:	0801aca0 	.word	0x0801aca0
 8011018:	0801aa4c 	.word	0x0801aa4c
 801101c:	200016d0 	.word	0x200016d0
 8011020:	200016d5 	.word	0x200016d5
 8011024:	200114cc 	.word	0x200114cc
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	617b      	str	r3, [r7, #20]
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d1d4      	bne.n	8010fde <tcp_process+0x58e>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	60da      	str	r2, [r3, #12]
 801103a:	4b77      	ldr	r3, [pc, #476]	; (8011218 <tcp_process+0x7c8>)
 801103c:	2201      	movs	r2, #1
 801103e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	220a      	movs	r2, #10
 8011044:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011046:	4b75      	ldr	r3, [pc, #468]	; (801121c <tcp_process+0x7cc>)
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	60da      	str	r2, [r3, #12]
 801104e:	4a73      	ldr	r2, [pc, #460]	; (801121c <tcp_process+0x7cc>)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6013      	str	r3, [r2, #0]
 8011054:	f003 f950 	bl	80142f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011058:	e0d2      	b.n	8011200 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	8b5b      	ldrh	r3, [r3, #26]
 801105e:	f043 0302 	orr.w	r3, r3, #2
 8011062:	b29a      	uxth	r2, r3
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2208      	movs	r2, #8
 801106c:	751a      	strb	r2, [r3, #20]
      break;
 801106e:	e0c7      	b.n	8011200 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011070:	4b6b      	ldr	r3, [pc, #428]	; (8011220 <tcp_process+0x7d0>)
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	f003 0310 	and.w	r3, r3, #16
 8011078:	2b00      	cmp	r3, #0
 801107a:	f000 80c1 	beq.w	8011200 <tcp_process+0x7b0>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011082:	4b68      	ldr	r3, [pc, #416]	; (8011224 <tcp_process+0x7d4>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	429a      	cmp	r2, r3
 8011088:	f040 80ba 	bne.w	8011200 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011090:	2b00      	cmp	r3, #0
 8011092:	f040 80b5 	bne.w	8011200 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2206      	movs	r2, #6
 801109a:	751a      	strb	r2, [r3, #20]
      break;
 801109c:	e0b0      	b.n	8011200 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 f9ca 	bl	8011438 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80110a4:	4b60      	ldr	r3, [pc, #384]	; (8011228 <tcp_process+0x7d8>)
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	f003 0320 	and.w	r3, r3, #32
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f000 80a9 	beq.w	8011204 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	8b5b      	ldrh	r3, [r3, #26]
 80110b6:	f043 0302 	orr.w	r3, r3, #2
 80110ba:	b29a      	uxth	r2, r3
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7fe fd3b 	bl	800fb3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80110c6:	4b59      	ldr	r3, [pc, #356]	; (801122c <tcp_process+0x7dc>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	687a      	ldr	r2, [r7, #4]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d105      	bne.n	80110dc <tcp_process+0x68c>
 80110d0:	4b56      	ldr	r3, [pc, #344]	; (801122c <tcp_process+0x7dc>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	4a55      	ldr	r2, [pc, #340]	; (801122c <tcp_process+0x7dc>)
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	e013      	b.n	8011104 <tcp_process+0x6b4>
 80110dc:	4b53      	ldr	r3, [pc, #332]	; (801122c <tcp_process+0x7dc>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	613b      	str	r3, [r7, #16]
 80110e2:	e00c      	b.n	80110fe <tcp_process+0x6ae>
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d104      	bne.n	80110f8 <tcp_process+0x6a8>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	68da      	ldr	r2, [r3, #12]
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	60da      	str	r2, [r3, #12]
 80110f6:	e005      	b.n	8011104 <tcp_process+0x6b4>
 80110f8:	693b      	ldr	r3, [r7, #16]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	613b      	str	r3, [r7, #16]
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1ef      	bne.n	80110e4 <tcp_process+0x694>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	60da      	str	r2, [r3, #12]
 801110a:	4b43      	ldr	r3, [pc, #268]	; (8011218 <tcp_process+0x7c8>)
 801110c:	2201      	movs	r2, #1
 801110e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	220a      	movs	r2, #10
 8011114:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011116:	4b41      	ldr	r3, [pc, #260]	; (801121c <tcp_process+0x7cc>)
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	60da      	str	r2, [r3, #12]
 801111e:	4a3f      	ldr	r2, [pc, #252]	; (801121c <tcp_process+0x7cc>)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6013      	str	r3, [r2, #0]
 8011124:	f003 f8e8 	bl	80142f8 <tcp_timer_needed>
      }
      break;
 8011128:	e06c      	b.n	8011204 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f000 f984 	bl	8011438 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011130:	4b3b      	ldr	r3, [pc, #236]	; (8011220 <tcp_process+0x7d0>)
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	f003 0310 	and.w	r3, r3, #16
 8011138:	2b00      	cmp	r3, #0
 801113a:	d065      	beq.n	8011208 <tcp_process+0x7b8>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011140:	4b38      	ldr	r3, [pc, #224]	; (8011224 <tcp_process+0x7d4>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	429a      	cmp	r2, r3
 8011146:	d15f      	bne.n	8011208 <tcp_process+0x7b8>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801114c:	2b00      	cmp	r3, #0
 801114e:	d15b      	bne.n	8011208 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f7fe fcf3 	bl	800fb3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011156:	4b35      	ldr	r3, [pc, #212]	; (801122c <tcp_process+0x7dc>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	429a      	cmp	r2, r3
 801115e:	d105      	bne.n	801116c <tcp_process+0x71c>
 8011160:	4b32      	ldr	r3, [pc, #200]	; (801122c <tcp_process+0x7dc>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	4a31      	ldr	r2, [pc, #196]	; (801122c <tcp_process+0x7dc>)
 8011168:	6013      	str	r3, [r2, #0]
 801116a:	e013      	b.n	8011194 <tcp_process+0x744>
 801116c:	4b2f      	ldr	r3, [pc, #188]	; (801122c <tcp_process+0x7dc>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	60fb      	str	r3, [r7, #12]
 8011172:	e00c      	b.n	801118e <tcp_process+0x73e>
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	429a      	cmp	r2, r3
 801117c:	d104      	bne.n	8011188 <tcp_process+0x738>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	68da      	ldr	r2, [r3, #12]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	60da      	str	r2, [r3, #12]
 8011186:	e005      	b.n	8011194 <tcp_process+0x744>
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	60fb      	str	r3, [r7, #12]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d1ef      	bne.n	8011174 <tcp_process+0x724>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2200      	movs	r2, #0
 8011198:	60da      	str	r2, [r3, #12]
 801119a:	4b1f      	ldr	r3, [pc, #124]	; (8011218 <tcp_process+0x7c8>)
 801119c:	2201      	movs	r2, #1
 801119e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	220a      	movs	r2, #10
 80111a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80111a6:	4b1d      	ldr	r3, [pc, #116]	; (801121c <tcp_process+0x7cc>)
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	60da      	str	r2, [r3, #12]
 80111ae:	4a1b      	ldr	r2, [pc, #108]	; (801121c <tcp_process+0x7cc>)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6013      	str	r3, [r2, #0]
 80111b4:	f003 f8a0 	bl	80142f8 <tcp_timer_needed>
      }
      break;
 80111b8:	e026      	b.n	8011208 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f000 f93c 	bl	8011438 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80111c0:	4b17      	ldr	r3, [pc, #92]	; (8011220 <tcp_process+0x7d0>)
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f003 0310 	and.w	r3, r3, #16
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d01f      	beq.n	801120c <tcp_process+0x7bc>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111d0:	4b14      	ldr	r3, [pc, #80]	; (8011224 <tcp_process+0x7d4>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d119      	bne.n	801120c <tcp_process+0x7bc>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d115      	bne.n	801120c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80111e0:	4b11      	ldr	r3, [pc, #68]	; (8011228 <tcp_process+0x7d8>)
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	f043 0310 	orr.w	r3, r3, #16
 80111e8:	b2da      	uxtb	r2, r3
 80111ea:	4b0f      	ldr	r3, [pc, #60]	; (8011228 <tcp_process+0x7d8>)
 80111ec:	701a      	strb	r2, [r3, #0]
      }
      break;
 80111ee:	e00d      	b.n	801120c <tcp_process+0x7bc>
    default:
      break;
 80111f0:	bf00      	nop
 80111f2:	e00c      	b.n	801120e <tcp_process+0x7be>
      break;
 80111f4:	bf00      	nop
 80111f6:	e00a      	b.n	801120e <tcp_process+0x7be>
      break;
 80111f8:	bf00      	nop
 80111fa:	e008      	b.n	801120e <tcp_process+0x7be>
      break;
 80111fc:	bf00      	nop
 80111fe:	e006      	b.n	801120e <tcp_process+0x7be>
      break;
 8011200:	bf00      	nop
 8011202:	e004      	b.n	801120e <tcp_process+0x7be>
      break;
 8011204:	bf00      	nop
 8011206:	e002      	b.n	801120e <tcp_process+0x7be>
      break;
 8011208:	bf00      	nop
 801120a:	e000      	b.n	801120e <tcp_process+0x7be>
      break;
 801120c:	bf00      	nop
  }
  return ERR_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	3724      	adds	r7, #36	; 0x24
 8011214:	46bd      	mov	sp, r7
 8011216:	bd90      	pop	{r4, r7, pc}
 8011218:	200114c8 	.word	0x200114c8
 801121c:	200114dc 	.word	0x200114dc
 8011220:	200016d4 	.word	0x200016d4
 8011224:	200016cc 	.word	0x200016cc
 8011228:	200016d5 	.word	0x200016d5
 801122c:	200114cc 	.word	0x200114cc

08011230 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011230:	b590      	push	{r4, r7, lr}
 8011232:	b085      	sub	sp, #20
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d106      	bne.n	801124e <tcp_oos_insert_segment+0x1e>
 8011240:	4b3b      	ldr	r3, [pc, #236]	; (8011330 <tcp_oos_insert_segment+0x100>)
 8011242:	f240 421f 	movw	r2, #1055	; 0x41f
 8011246:	493b      	ldr	r1, [pc, #236]	; (8011334 <tcp_oos_insert_segment+0x104>)
 8011248:	483b      	ldr	r0, [pc, #236]	; (8011338 <tcp_oos_insert_segment+0x108>)
 801124a:	f005 fe7f 	bl	8016f4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	899b      	ldrh	r3, [r3, #12]
 8011254:	b29b      	uxth	r3, r3
 8011256:	4618      	mov	r0, r3
 8011258:	f7fb f9d8 	bl	800c60c <lwip_htons>
 801125c:	4603      	mov	r3, r0
 801125e:	b2db      	uxtb	r3, r3
 8011260:	f003 0301 	and.w	r3, r3, #1
 8011264:	2b00      	cmp	r3, #0
 8011266:	d028      	beq.n	80112ba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011268:	6838      	ldr	r0, [r7, #0]
 801126a:	f7fe f979 	bl	800f560 <tcp_segs_free>
    next = NULL;
 801126e:	2300      	movs	r3, #0
 8011270:	603b      	str	r3, [r7, #0]
 8011272:	e056      	b.n	8011322 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	68db      	ldr	r3, [r3, #12]
 8011278:	899b      	ldrh	r3, [r3, #12]
 801127a:	b29b      	uxth	r3, r3
 801127c:	4618      	mov	r0, r3
 801127e:	f7fb f9c5 	bl	800c60c <lwip_htons>
 8011282:	4603      	mov	r3, r0
 8011284:	b2db      	uxtb	r3, r3
 8011286:	f003 0301 	and.w	r3, r3, #1
 801128a:	2b00      	cmp	r3, #0
 801128c:	d00d      	beq.n	80112aa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	899b      	ldrh	r3, [r3, #12]
 8011294:	b29c      	uxth	r4, r3
 8011296:	2001      	movs	r0, #1
 8011298:	f7fb f9b8 	bl	800c60c <lwip_htons>
 801129c:	4603      	mov	r3, r0
 801129e:	461a      	mov	r2, r3
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	4322      	orrs	r2, r4
 80112a6:	b292      	uxth	r2, r2
 80112a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80112b4:	68f8      	ldr	r0, [r7, #12]
 80112b6:	f7fe f968 	bl	800f58a <tcp_seg_free>
    while (next &&
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d00e      	beq.n	80112de <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	891b      	ldrh	r3, [r3, #8]
 80112c4:	461a      	mov	r2, r3
 80112c6:	4b1d      	ldr	r3, [pc, #116]	; (801133c <tcp_oos_insert_segment+0x10c>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	441a      	add	r2, r3
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	685b      	ldr	r3, [r3, #4]
 80112d2:	6839      	ldr	r1, [r7, #0]
 80112d4:	8909      	ldrh	r1, [r1, #8]
 80112d6:	440b      	add	r3, r1
 80112d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80112da:	2b00      	cmp	r3, #0
 80112dc:	daca      	bge.n	8011274 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d01e      	beq.n	8011322 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	891b      	ldrh	r3, [r3, #8]
 80112e8:	461a      	mov	r2, r3
 80112ea:	4b14      	ldr	r3, [pc, #80]	; (801133c <tcp_oos_insert_segment+0x10c>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	441a      	add	r2, r3
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	dd12      	ble.n	8011322 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	b29a      	uxth	r2, r3
 8011304:	4b0d      	ldr	r3, [pc, #52]	; (801133c <tcp_oos_insert_segment+0x10c>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	b29b      	uxth	r3, r3
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	b29a      	uxth	r2, r3
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	685a      	ldr	r2, [r3, #4]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	891b      	ldrh	r3, [r3, #8]
 801131a:	4619      	mov	r1, r3
 801131c:	4610      	mov	r0, r2
 801131e:	f7fc fb81 	bl	800da24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	683a      	ldr	r2, [r7, #0]
 8011326:	601a      	str	r2, [r3, #0]
}
 8011328:	bf00      	nop
 801132a:	3714      	adds	r7, #20
 801132c:	46bd      	mov	sp, r7
 801132e:	bd90      	pop	{r4, r7, pc}
 8011330:	0801aa00 	.word	0x0801aa00
 8011334:	0801acc0 	.word	0x0801acc0
 8011338:	0801aa4c 	.word	0x0801aa4c
 801133c:	200016c8 	.word	0x200016c8

08011340 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011340:	b5b0      	push	{r4, r5, r7, lr}
 8011342:	b086      	sub	sp, #24
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	607a      	str	r2, [r7, #4]
 801134c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801134e:	e03e      	b.n	80113ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	4618      	mov	r0, r3
 8011360:	f7fc fd6e 	bl	800de40 <pbuf_clen>
 8011364:	4603      	mov	r3, r0
 8011366:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801136e:	8a7a      	ldrh	r2, [r7, #18]
 8011370:	429a      	cmp	r2, r3
 8011372:	d906      	bls.n	8011382 <tcp_free_acked_segments+0x42>
 8011374:	4b2a      	ldr	r3, [pc, #168]	; (8011420 <tcp_free_acked_segments+0xe0>)
 8011376:	f240 4257 	movw	r2, #1111	; 0x457
 801137a:	492a      	ldr	r1, [pc, #168]	; (8011424 <tcp_free_acked_segments+0xe4>)
 801137c:	482a      	ldr	r0, [pc, #168]	; (8011428 <tcp_free_acked_segments+0xe8>)
 801137e:	f005 fde5 	bl	8016f4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011388:	8a7b      	ldrh	r3, [r7, #18]
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	b29a      	uxth	r2, r3
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	891a      	ldrh	r2, [r3, #8]
 8011398:	4b24      	ldr	r3, [pc, #144]	; (801142c <tcp_free_acked_segments+0xec>)
 801139a:	881b      	ldrh	r3, [r3, #0]
 801139c:	4413      	add	r3, r2
 801139e:	b29a      	uxth	r2, r3
 80113a0:	4b22      	ldr	r3, [pc, #136]	; (801142c <tcp_free_acked_segments+0xec>)
 80113a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80113a4:	6978      	ldr	r0, [r7, #20]
 80113a6:	f7fe f8f0 	bl	800f58a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d00c      	beq.n	80113ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d109      	bne.n	80113ce <tcp_free_acked_segments+0x8e>
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d106      	bne.n	80113ce <tcp_free_acked_segments+0x8e>
 80113c0:	4b17      	ldr	r3, [pc, #92]	; (8011420 <tcp_free_acked_segments+0xe0>)
 80113c2:	f240 4261 	movw	r2, #1121	; 0x461
 80113c6:	491a      	ldr	r1, [pc, #104]	; (8011430 <tcp_free_acked_segments+0xf0>)
 80113c8:	4817      	ldr	r0, [pc, #92]	; (8011428 <tcp_free_acked_segments+0xe8>)
 80113ca:	f005 fdbf 	bl	8016f4c <iprintf>
  while (seg_list != NULL &&
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d020      	beq.n	8011416 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	4618      	mov	r0, r3
 80113dc:	f7fb f92b 	bl	800c636 <lwip_htonl>
 80113e0:	4604      	mov	r4, r0
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	891b      	ldrh	r3, [r3, #8]
 80113e6:	461d      	mov	r5, r3
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	899b      	ldrh	r3, [r3, #12]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fb f90b 	bl	800c60c <lwip_htons>
 80113f6:	4603      	mov	r3, r0
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	f003 0303 	and.w	r3, r3, #3
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <tcp_free_acked_segments+0xc6>
 8011402:	2301      	movs	r3, #1
 8011404:	e000      	b.n	8011408 <tcp_free_acked_segments+0xc8>
 8011406:	2300      	movs	r3, #0
 8011408:	442b      	add	r3, r5
 801140a:	18e2      	adds	r2, r4, r3
 801140c:	4b09      	ldr	r3, [pc, #36]	; (8011434 <tcp_free_acked_segments+0xf4>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011412:	2b00      	cmp	r3, #0
 8011414:	dd9c      	ble.n	8011350 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011416:	68bb      	ldr	r3, [r7, #8]
}
 8011418:	4618      	mov	r0, r3
 801141a:	3718      	adds	r7, #24
 801141c:	46bd      	mov	sp, r7
 801141e:	bdb0      	pop	{r4, r5, r7, pc}
 8011420:	0801aa00 	.word	0x0801aa00
 8011424:	0801ace8 	.word	0x0801ace8
 8011428:	0801aa4c 	.word	0x0801aa4c
 801142c:	200016d0 	.word	0x200016d0
 8011430:	0801ad10 	.word	0x0801ad10
 8011434:	200016cc 	.word	0x200016cc

08011438 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011438:	b5b0      	push	{r4, r5, r7, lr}
 801143a:	b094      	sub	sp, #80	; 0x50
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011440:	2300      	movs	r3, #0
 8011442:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d106      	bne.n	8011458 <tcp_receive+0x20>
 801144a:	4ba6      	ldr	r3, [pc, #664]	; (80116e4 <tcp_receive+0x2ac>)
 801144c:	f240 427b 	movw	r2, #1147	; 0x47b
 8011450:	49a5      	ldr	r1, [pc, #660]	; (80116e8 <tcp_receive+0x2b0>)
 8011452:	48a6      	ldr	r0, [pc, #664]	; (80116ec <tcp_receive+0x2b4>)
 8011454:	f005 fd7a 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	7d1b      	ldrb	r3, [r3, #20]
 801145c:	2b03      	cmp	r3, #3
 801145e:	d806      	bhi.n	801146e <tcp_receive+0x36>
 8011460:	4ba0      	ldr	r3, [pc, #640]	; (80116e4 <tcp_receive+0x2ac>)
 8011462:	f240 427c 	movw	r2, #1148	; 0x47c
 8011466:	49a2      	ldr	r1, [pc, #648]	; (80116f0 <tcp_receive+0x2b8>)
 8011468:	48a0      	ldr	r0, [pc, #640]	; (80116ec <tcp_receive+0x2b4>)
 801146a:	f005 fd6f 	bl	8016f4c <iprintf>

  if (flags & TCP_ACK) {
 801146e:	4ba1      	ldr	r3, [pc, #644]	; (80116f4 <tcp_receive+0x2bc>)
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	f003 0310 	and.w	r3, r3, #16
 8011476:	2b00      	cmp	r3, #0
 8011478:	f000 8263 	beq.w	8011942 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011482:	461a      	mov	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011488:	4413      	add	r3, r2
 801148a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011490:	4b99      	ldr	r3, [pc, #612]	; (80116f8 <tcp_receive+0x2c0>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	1ad3      	subs	r3, r2, r3
 8011496:	2b00      	cmp	r3, #0
 8011498:	db1b      	blt.n	80114d2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801149e:	4b96      	ldr	r3, [pc, #600]	; (80116f8 <tcp_receive+0x2c0>)
 80114a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d106      	bne.n	80114b4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80114aa:	4b94      	ldr	r3, [pc, #592]	; (80116fc <tcp_receive+0x2c4>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	1ad3      	subs	r3, r2, r3
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	db0e      	blt.n	80114d2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80114b8:	4b90      	ldr	r3, [pc, #576]	; (80116fc <tcp_receive+0x2c4>)
 80114ba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80114bc:	429a      	cmp	r2, r3
 80114be:	d125      	bne.n	801150c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80114c0:	4b8f      	ldr	r3, [pc, #572]	; (8011700 <tcp_receive+0x2c8>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	89db      	ldrh	r3, [r3, #14]
 80114c6:	b29a      	uxth	r2, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d91c      	bls.n	801150c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80114d2:	4b8b      	ldr	r3, [pc, #556]	; (8011700 <tcp_receive+0x2c8>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	89db      	ldrh	r3, [r3, #14]
 80114d8:	b29a      	uxth	r2, r3
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d205      	bcs.n	80114fc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80114fc:	4b7e      	ldr	r3, [pc, #504]	; (80116f8 <tcp_receive+0x2c0>)
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011504:	4b7d      	ldr	r3, [pc, #500]	; (80116fc <tcp_receive+0x2c4>)
 8011506:	681a      	ldr	r2, [r3, #0]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801150c:	4b7b      	ldr	r3, [pc, #492]	; (80116fc <tcp_receive+0x2c4>)
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011514:	1ad3      	subs	r3, r2, r3
 8011516:	2b00      	cmp	r3, #0
 8011518:	dc58      	bgt.n	80115cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801151a:	4b7a      	ldr	r3, [pc, #488]	; (8011704 <tcp_receive+0x2cc>)
 801151c:	881b      	ldrh	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d14b      	bne.n	80115ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011526:	687a      	ldr	r2, [r7, #4]
 8011528:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801152c:	4413      	add	r3, r2
 801152e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011530:	429a      	cmp	r2, r3
 8011532:	d142      	bne.n	80115ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801153a:	2b00      	cmp	r3, #0
 801153c:	db3d      	blt.n	80115ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011542:	4b6e      	ldr	r3, [pc, #440]	; (80116fc <tcp_receive+0x2c4>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	429a      	cmp	r2, r3
 8011548:	d137      	bne.n	80115ba <tcp_receive+0x182>
              found_dupack = 1;
 801154a:	2301      	movs	r3, #1
 801154c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011554:	2bff      	cmp	r3, #255	; 0xff
 8011556:	d007      	beq.n	8011568 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801155e:	3301      	adds	r3, #1
 8011560:	b2da      	uxtb	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801156e:	2b03      	cmp	r3, #3
 8011570:	d91b      	bls.n	80115aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801157c:	4413      	add	r3, r2
 801157e:	b29a      	uxth	r2, r3
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011586:	429a      	cmp	r2, r3
 8011588:	d30a      	bcc.n	80115a0 <tcp_receive+0x168>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011594:	4413      	add	r3, r2
 8011596:	b29a      	uxth	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801159e:	e004      	b.n	80115aa <tcp_receive+0x172>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80115b0:	2b02      	cmp	r3, #2
 80115b2:	d902      	bls.n	80115ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f002 fb41 	bl	8013c3c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80115ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f040 8160 	bne.w	8011882 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2200      	movs	r2, #0
 80115c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80115ca:	e15a      	b.n	8011882 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80115cc:	4b4b      	ldr	r3, [pc, #300]	; (80116fc <tcp_receive+0x2c4>)
 80115ce:	681a      	ldr	r2, [r3, #0]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	3b01      	subs	r3, #1
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f2c0 814d 	blt.w	8011878 <tcp_receive+0x440>
 80115de:	4b47      	ldr	r3, [pc, #284]	; (80116fc <tcp_receive+0x2c4>)
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	f300 8145 	bgt.w	8011878 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	8b5b      	ldrh	r3, [r3, #26]
 80115f2:	f003 0304 	and.w	r3, r3, #4
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d010      	beq.n	801161c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	8b5b      	ldrh	r3, [r3, #26]
 80115fe:	f023 0304 	bic.w	r3, r3, #4
 8011602:	b29a      	uxth	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2200      	movs	r2, #0
 8011618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2200      	movs	r2, #0
 8011620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801162a:	10db      	asrs	r3, r3, #3
 801162c:	b21b      	sxth	r3, r3
 801162e:	b29a      	uxth	r2, r3
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011636:	b29b      	uxth	r3, r3
 8011638:	4413      	add	r3, r2
 801163a:	b29b      	uxth	r3, r3
 801163c:	b21a      	sxth	r2, r3
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011644:	4b2d      	ldr	r3, [pc, #180]	; (80116fc <tcp_receive+0x2c4>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	b29a      	uxth	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801164e:	b29b      	uxth	r3, r3
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2200      	movs	r2, #0
 8011658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801165c:	4b27      	ldr	r3, [pc, #156]	; (80116fc <tcp_receive+0x2c4>)
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	7d1b      	ldrb	r3, [r3, #20]
 8011668:	2b03      	cmp	r3, #3
 801166a:	f240 8096 	bls.w	801179a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801167a:	429a      	cmp	r2, r3
 801167c:	d244      	bcs.n	8011708 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	8b5b      	ldrh	r3, [r3, #26]
 8011682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011686:	2b00      	cmp	r3, #0
 8011688:	d001      	beq.n	801168e <tcp_receive+0x256>
 801168a:	2301      	movs	r3, #1
 801168c:	e000      	b.n	8011690 <tcp_receive+0x258>
 801168e:	2302      	movs	r3, #2
 8011690:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011694:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011698:	b29a      	uxth	r2, r3
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801169e:	fb12 f303 	smulbb	r3, r2, r3
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80116a6:	4293      	cmp	r3, r2
 80116a8:	bf28      	it	cs
 80116aa:	4613      	movcs	r3, r2
 80116ac:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80116b6:	4413      	add	r3, r2
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d309      	bcc.n	80116d8 <tcp_receive+0x2a0>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80116cc:	4413      	add	r3, r2
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80116d6:	e060      	b.n	801179a <tcp_receive+0x362>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80116e2:	e05a      	b.n	801179a <tcp_receive+0x362>
 80116e4:	0801aa00 	.word	0x0801aa00
 80116e8:	0801ad30 	.word	0x0801ad30
 80116ec:	0801aa4c 	.word	0x0801aa4c
 80116f0:	0801ad4c 	.word	0x0801ad4c
 80116f4:	200016d4 	.word	0x200016d4
 80116f8:	200016c8 	.word	0x200016c8
 80116fc:	200016cc 	.word	0x200016cc
 8011700:	200016b8 	.word	0x200016b8
 8011704:	200016d2 	.word	0x200016d2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801170e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011710:	4413      	add	r3, r2
 8011712:	b29a      	uxth	r2, r3
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801171a:	429a      	cmp	r2, r3
 801171c:	d309      	bcc.n	8011732 <tcp_receive+0x2fa>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011724:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011726:	4413      	add	r3, r2
 8011728:	b29a      	uxth	r2, r3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011730:	e004      	b.n	801173c <tcp_receive+0x304>
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011748:	429a      	cmp	r2, r3
 801174a:	d326      	bcc.n	801179a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	b29a      	uxth	r2, r3
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801176c:	4413      	add	r3, r2
 801176e:	b29a      	uxth	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011776:	429a      	cmp	r2, r3
 8011778:	d30a      	bcc.n	8011790 <tcp_receive+0x358>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011784:	4413      	add	r3, r2
 8011786:	b29a      	uxth	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801178e:	e004      	b.n	801179a <tcp_receive+0x362>
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011796:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117a2:	4a98      	ldr	r2, [pc, #608]	; (8011a04 <tcp_receive+0x5cc>)
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f7ff fdcb 	bl	8011340 <tcp_free_acked_segments>
 80117aa:	4602      	mov	r2, r0
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117b8:	4a93      	ldr	r2, [pc, #588]	; (8011a08 <tcp_receive+0x5d0>)
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f7ff fdc0 	bl	8011340 <tcp_free_acked_segments>
 80117c0:	4602      	mov	r2, r0
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d104      	bne.n	80117d8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117d4:	861a      	strh	r2, [r3, #48]	; 0x30
 80117d6:	e002      	b.n	80117de <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2200      	movs	r2, #0
 80117e2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d103      	bne.n	80117f4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2200      	movs	r2, #0
 80117f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80117fa:	4b84      	ldr	r3, [pc, #528]	; (8011a0c <tcp_receive+0x5d4>)
 80117fc:	881b      	ldrh	r3, [r3, #0]
 80117fe:	4413      	add	r3, r2
 8011800:	b29a      	uxth	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	8b5b      	ldrh	r3, [r3, #26]
 801180c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011810:	2b00      	cmp	r3, #0
 8011812:	d035      	beq.n	8011880 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011818:	2b00      	cmp	r3, #0
 801181a:	d118      	bne.n	801184e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00c      	beq.n	801183e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801182c:	68db      	ldr	r3, [r3, #12]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	4618      	mov	r0, r3
 8011832:	f7fa ff00 	bl	800c636 <lwip_htonl>
 8011836:	4603      	mov	r3, r0
 8011838:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801183a:	2b00      	cmp	r3, #0
 801183c:	dc20      	bgt.n	8011880 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	8b5b      	ldrh	r3, [r3, #26]
 8011842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011846:	b29a      	uxth	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801184c:	e018      	b.n	8011880 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011856:	68db      	ldr	r3, [r3, #12]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	4618      	mov	r0, r3
 801185c:	f7fa feeb 	bl	800c636 <lwip_htonl>
 8011860:	4603      	mov	r3, r0
 8011862:	1ae3      	subs	r3, r4, r3
 8011864:	2b00      	cmp	r3, #0
 8011866:	dc0b      	bgt.n	8011880 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	8b5b      	ldrh	r3, [r3, #26]
 801186c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011870:	b29a      	uxth	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011876:	e003      	b.n	8011880 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f002 fbcd 	bl	8014018 <tcp_send_empty_ack>
 801187e:	e000      	b.n	8011882 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011880:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011886:	2b00      	cmp	r3, #0
 8011888:	d05b      	beq.n	8011942 <tcp_receive+0x50a>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801188e:	4b60      	ldr	r3, [pc, #384]	; (8011a10 <tcp_receive+0x5d8>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	1ad3      	subs	r3, r2, r3
 8011894:	2b00      	cmp	r3, #0
 8011896:	da54      	bge.n	8011942 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011898:	4b5e      	ldr	r3, [pc, #376]	; (8011a14 <tcp_receive+0x5dc>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	b29a      	uxth	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	1ad3      	subs	r3, r2, r3
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80118ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80118b6:	10db      	asrs	r3, r3, #3
 80118b8:	b21b      	sxth	r3, r3
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	1ad3      	subs	r3, r2, r3
 80118be:	b29b      	uxth	r3, r3
 80118c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80118ca:	b29a      	uxth	r2, r3
 80118cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80118d0:	4413      	add	r3, r2
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	b21a      	sxth	r2, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80118da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80118de:	2b00      	cmp	r3, #0
 80118e0:	da05      	bge.n	80118ee <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80118e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80118e6:	425b      	negs	r3, r3
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80118ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80118f8:	109b      	asrs	r3, r3, #2
 80118fa:	b21b      	sxth	r3, r3
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	1ad3      	subs	r3, r2, r3
 8011900:	b29b      	uxth	r3, r3
 8011902:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801190c:	b29a      	uxth	r2, r3
 801190e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011912:	4413      	add	r3, r2
 8011914:	b29b      	uxth	r3, r3
 8011916:	b21a      	sxth	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011922:	10db      	asrs	r3, r3, #3
 8011924:	b21b      	sxth	r3, r3
 8011926:	b29a      	uxth	r2, r3
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801192e:	b29b      	uxth	r3, r3
 8011930:	4413      	add	r3, r2
 8011932:	b29b      	uxth	r3, r3
 8011934:	b21a      	sxth	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2200      	movs	r2, #0
 8011940:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011942:	4b35      	ldr	r3, [pc, #212]	; (8011a18 <tcp_receive+0x5e0>)
 8011944:	881b      	ldrh	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 84e1 	beq.w	801230e <tcp_receive+0xed6>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	7d1b      	ldrb	r3, [r3, #20]
 8011950:	2b06      	cmp	r3, #6
 8011952:	f200 84dc 	bhi.w	801230e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801195a:	4b30      	ldr	r3, [pc, #192]	; (8011a1c <tcp_receive+0x5e4>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	3b01      	subs	r3, #1
 8011962:	2b00      	cmp	r3, #0
 8011964:	f2c0 808e 	blt.w	8011a84 <tcp_receive+0x64c>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801196c:	4b2a      	ldr	r3, [pc, #168]	; (8011a18 <tcp_receive+0x5e0>)
 801196e:	881b      	ldrh	r3, [r3, #0]
 8011970:	4619      	mov	r1, r3
 8011972:	4b2a      	ldr	r3, [pc, #168]	; (8011a1c <tcp_receive+0x5e4>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	440b      	add	r3, r1
 8011978:	1ad3      	subs	r3, r2, r3
 801197a:	3301      	adds	r3, #1
 801197c:	2b00      	cmp	r3, #0
 801197e:	f300 8081 	bgt.w	8011a84 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011982:	4b27      	ldr	r3, [pc, #156]	; (8011a20 <tcp_receive+0x5e8>)
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801198c:	4b23      	ldr	r3, [pc, #140]	; (8011a1c <tcp_receive+0x5e4>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011994:	4b22      	ldr	r3, [pc, #136]	; (8011a20 <tcp_receive+0x5e8>)
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d106      	bne.n	80119aa <tcp_receive+0x572>
 801199c:	4b21      	ldr	r3, [pc, #132]	; (8011a24 <tcp_receive+0x5ec>)
 801199e:	f240 5294 	movw	r2, #1428	; 0x594
 80119a2:	4921      	ldr	r1, [pc, #132]	; (8011a28 <tcp_receive+0x5f0>)
 80119a4:	4821      	ldr	r0, [pc, #132]	; (8011a2c <tcp_receive+0x5f4>)
 80119a6:	f005 fad1 	bl	8016f4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80119aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80119b0:	4293      	cmp	r3, r2
 80119b2:	d906      	bls.n	80119c2 <tcp_receive+0x58a>
 80119b4:	4b1b      	ldr	r3, [pc, #108]	; (8011a24 <tcp_receive+0x5ec>)
 80119b6:	f240 5295 	movw	r2, #1429	; 0x595
 80119ba:	491d      	ldr	r1, [pc, #116]	; (8011a30 <tcp_receive+0x5f8>)
 80119bc:	481b      	ldr	r0, [pc, #108]	; (8011a2c <tcp_receive+0x5f4>)
 80119be:	f005 fac5 	bl	8016f4c <iprintf>
      off = (u16_t)off32;
 80119c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80119c8:	4b15      	ldr	r3, [pc, #84]	; (8011a20 <tcp_receive+0x5e8>)
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	891b      	ldrh	r3, [r3, #8]
 80119ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d906      	bls.n	80119e4 <tcp_receive+0x5ac>
 80119d6:	4b13      	ldr	r3, [pc, #76]	; (8011a24 <tcp_receive+0x5ec>)
 80119d8:	f240 5297 	movw	r2, #1431	; 0x597
 80119dc:	4915      	ldr	r1, [pc, #84]	; (8011a34 <tcp_receive+0x5fc>)
 80119de:	4813      	ldr	r0, [pc, #76]	; (8011a2c <tcp_receive+0x5f4>)
 80119e0:	f005 fab4 	bl	8016f4c <iprintf>
      inseg.len -= off;
 80119e4:	4b0e      	ldr	r3, [pc, #56]	; (8011a20 <tcp_receive+0x5e8>)
 80119e6:	891a      	ldrh	r2, [r3, #8]
 80119e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119ec:	1ad3      	subs	r3, r2, r3
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	4b0b      	ldr	r3, [pc, #44]	; (8011a20 <tcp_receive+0x5e8>)
 80119f2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80119f4:	4b0a      	ldr	r3, [pc, #40]	; (8011a20 <tcp_receive+0x5e8>)
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	891a      	ldrh	r2, [r3, #8]
 80119fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119fe:	1ad3      	subs	r3, r2, r3
 8011a00:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011a02:	e029      	b.n	8011a58 <tcp_receive+0x620>
 8011a04:	0801ad68 	.word	0x0801ad68
 8011a08:	0801ad70 	.word	0x0801ad70
 8011a0c:	200016d0 	.word	0x200016d0
 8011a10:	200016cc 	.word	0x200016cc
 8011a14:	200114d0 	.word	0x200114d0
 8011a18:	200016d2 	.word	0x200016d2
 8011a1c:	200016c8 	.word	0x200016c8
 8011a20:	200016a8 	.word	0x200016a8
 8011a24:	0801aa00 	.word	0x0801aa00
 8011a28:	0801ad78 	.word	0x0801ad78
 8011a2c:	0801aa4c 	.word	0x0801aa4c
 8011a30:	0801ad88 	.word	0x0801ad88
 8011a34:	0801ad98 	.word	0x0801ad98
        off -= p->len;
 8011a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a3a:	895b      	ldrh	r3, [r3, #10]
 8011a3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a40:	1ad3      	subs	r3, r2, r3
 8011a42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a48:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011a4a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a4e:	2200      	movs	r2, #0
 8011a50:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a5a:	895b      	ldrh	r3, [r3, #10]
 8011a5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d8e9      	bhi.n	8011a38 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011a64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a68:	4619      	mov	r1, r3
 8011a6a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011a6c:	f7fc f8da 	bl	800dc24 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a74:	4a91      	ldr	r2, [pc, #580]	; (8011cbc <tcp_receive+0x884>)
 8011a76:	6013      	str	r3, [r2, #0]
 8011a78:	4b91      	ldr	r3, [pc, #580]	; (8011cc0 <tcp_receive+0x888>)
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	4a8f      	ldr	r2, [pc, #572]	; (8011cbc <tcp_receive+0x884>)
 8011a7e:	6812      	ldr	r2, [r2, #0]
 8011a80:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011a82:	e00d      	b.n	8011aa0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011a84:	4b8d      	ldr	r3, [pc, #564]	; (8011cbc <tcp_receive+0x884>)
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a8c:	1ad3      	subs	r3, r2, r3
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	da06      	bge.n	8011aa0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	8b5b      	ldrh	r3, [r3, #26]
 8011a96:	f043 0302 	orr.w	r3, r3, #2
 8011a9a:	b29a      	uxth	r2, r3
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011aa0:	4b86      	ldr	r3, [pc, #536]	; (8011cbc <tcp_receive+0x884>)
 8011aa2:	681a      	ldr	r2, [r3, #0]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa8:	1ad3      	subs	r3, r2, r3
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	f2c0 842a 	blt.w	8012304 <tcp_receive+0xecc>
 8011ab0:	4b82      	ldr	r3, [pc, #520]	; (8011cbc <tcp_receive+0x884>)
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab8:	6879      	ldr	r1, [r7, #4]
 8011aba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011abc:	440b      	add	r3, r1
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	f300 841e 	bgt.w	8012304 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011acc:	4b7b      	ldr	r3, [pc, #492]	; (8011cbc <tcp_receive+0x884>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	f040 829a 	bne.w	801200a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011ad6:	4b7a      	ldr	r3, [pc, #488]	; (8011cc0 <tcp_receive+0x888>)
 8011ad8:	891c      	ldrh	r4, [r3, #8]
 8011ada:	4b79      	ldr	r3, [pc, #484]	; (8011cc0 <tcp_receive+0x888>)
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	899b      	ldrh	r3, [r3, #12]
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fa fd92 	bl	800c60c <lwip_htons>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	f003 0303 	and.w	r3, r3, #3
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d001      	beq.n	8011af8 <tcp_receive+0x6c0>
 8011af4:	2301      	movs	r3, #1
 8011af6:	e000      	b.n	8011afa <tcp_receive+0x6c2>
 8011af8:	2300      	movs	r3, #0
 8011afa:	4423      	add	r3, r4
 8011afc:	b29a      	uxth	r2, r3
 8011afe:	4b71      	ldr	r3, [pc, #452]	; (8011cc4 <tcp_receive+0x88c>)
 8011b00:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011b06:	4b6f      	ldr	r3, [pc, #444]	; (8011cc4 <tcp_receive+0x88c>)
 8011b08:	881b      	ldrh	r3, [r3, #0]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d275      	bcs.n	8011bfa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011b0e:	4b6c      	ldr	r3, [pc, #432]	; (8011cc0 <tcp_receive+0x888>)
 8011b10:	68db      	ldr	r3, [r3, #12]
 8011b12:	899b      	ldrh	r3, [r3, #12]
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7fa fd78 	bl	800c60c <lwip_htons>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	f003 0301 	and.w	r3, r3, #1
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d01f      	beq.n	8011b68 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011b28:	4b65      	ldr	r3, [pc, #404]	; (8011cc0 <tcp_receive+0x888>)
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	899b      	ldrh	r3, [r3, #12]
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	b21b      	sxth	r3, r3
 8011b32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011b36:	b21c      	sxth	r4, r3
 8011b38:	4b61      	ldr	r3, [pc, #388]	; (8011cc0 <tcp_receive+0x888>)
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	899b      	ldrh	r3, [r3, #12]
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7fa fd63 	bl	800c60c <lwip_htons>
 8011b46:	4603      	mov	r3, r0
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fa fd5a 	bl	800c60c <lwip_htons>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	b21b      	sxth	r3, r3
 8011b5c:	4323      	orrs	r3, r4
 8011b5e:	b21a      	sxth	r2, r3
 8011b60:	4b57      	ldr	r3, [pc, #348]	; (8011cc0 <tcp_receive+0x888>)
 8011b62:	68db      	ldr	r3, [r3, #12]
 8011b64:	b292      	uxth	r2, r2
 8011b66:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011b6c:	4b54      	ldr	r3, [pc, #336]	; (8011cc0 <tcp_receive+0x888>)
 8011b6e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011b70:	4b53      	ldr	r3, [pc, #332]	; (8011cc0 <tcp_receive+0x888>)
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	899b      	ldrh	r3, [r3, #12]
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7fa fd47 	bl	800c60c <lwip_htons>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	f003 0302 	and.w	r3, r3, #2
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d005      	beq.n	8011b96 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011b8a:	4b4d      	ldr	r3, [pc, #308]	; (8011cc0 <tcp_receive+0x888>)
 8011b8c:	891b      	ldrh	r3, [r3, #8]
 8011b8e:	3b01      	subs	r3, #1
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	4b4b      	ldr	r3, [pc, #300]	; (8011cc0 <tcp_receive+0x888>)
 8011b94:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011b96:	4b4a      	ldr	r3, [pc, #296]	; (8011cc0 <tcp_receive+0x888>)
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	4a49      	ldr	r2, [pc, #292]	; (8011cc0 <tcp_receive+0x888>)
 8011b9c:	8912      	ldrh	r2, [r2, #8]
 8011b9e:	4611      	mov	r1, r2
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fb ff3f 	bl	800da24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011ba6:	4b46      	ldr	r3, [pc, #280]	; (8011cc0 <tcp_receive+0x888>)
 8011ba8:	891c      	ldrh	r4, [r3, #8]
 8011baa:	4b45      	ldr	r3, [pc, #276]	; (8011cc0 <tcp_receive+0x888>)
 8011bac:	68db      	ldr	r3, [r3, #12]
 8011bae:	899b      	ldrh	r3, [r3, #12]
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fa fd2a 	bl	800c60c <lwip_htons>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	f003 0303 	and.w	r3, r3, #3
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d001      	beq.n	8011bc8 <tcp_receive+0x790>
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	e000      	b.n	8011bca <tcp_receive+0x792>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	4423      	add	r3, r4
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	4b3d      	ldr	r3, [pc, #244]	; (8011cc4 <tcp_receive+0x88c>)
 8011bd0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011bd2:	4b3c      	ldr	r3, [pc, #240]	; (8011cc4 <tcp_receive+0x88c>)
 8011bd4:	881b      	ldrh	r3, [r3, #0]
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	4b38      	ldr	r3, [pc, #224]	; (8011cbc <tcp_receive+0x884>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	441a      	add	r2, r3
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be2:	6879      	ldr	r1, [r7, #4]
 8011be4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011be6:	440b      	add	r3, r1
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d006      	beq.n	8011bfa <tcp_receive+0x7c2>
 8011bec:	4b36      	ldr	r3, [pc, #216]	; (8011cc8 <tcp_receive+0x890>)
 8011bee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011bf2:	4936      	ldr	r1, [pc, #216]	; (8011ccc <tcp_receive+0x894>)
 8011bf4:	4836      	ldr	r0, [pc, #216]	; (8011cd0 <tcp_receive+0x898>)
 8011bf6:	f005 f9a9 	bl	8016f4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	f000 80e7 	beq.w	8011dd2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c04:	4b2e      	ldr	r3, [pc, #184]	; (8011cc0 <tcp_receive+0x888>)
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	899b      	ldrh	r3, [r3, #12]
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7fa fcfd 	bl	800c60c <lwip_htons>
 8011c12:	4603      	mov	r3, r0
 8011c14:	b2db      	uxtb	r3, r3
 8011c16:	f003 0301 	and.w	r3, r3, #1
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d010      	beq.n	8011c40 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011c1e:	e00a      	b.n	8011c36 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c24:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c2a:	681a      	ldr	r2, [r3, #0]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	f7fd fcaa 	bl	800f58a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d1f0      	bne.n	8011c20 <tcp_receive+0x7e8>
 8011c3e:	e0c8      	b.n	8011dd2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c44:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011c46:	e052      	b.n	8011cee <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	899b      	ldrh	r3, [r3, #12]
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7fa fcdb 	bl	800c60c <lwip_htons>
 8011c56:	4603      	mov	r3, r0
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	f003 0301 	and.w	r3, r3, #1
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d03d      	beq.n	8011cde <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011c62:	4b17      	ldr	r3, [pc, #92]	; (8011cc0 <tcp_receive+0x888>)
 8011c64:	68db      	ldr	r3, [r3, #12]
 8011c66:	899b      	ldrh	r3, [r3, #12]
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7fa fcce 	bl	800c60c <lwip_htons>
 8011c70:	4603      	mov	r3, r0
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d130      	bne.n	8011cde <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011c7c:	4b10      	ldr	r3, [pc, #64]	; (8011cc0 <tcp_receive+0x888>)
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	899b      	ldrh	r3, [r3, #12]
 8011c82:	b29c      	uxth	r4, r3
 8011c84:	2001      	movs	r0, #1
 8011c86:	f7fa fcc1 	bl	800c60c <lwip_htons>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	4b0c      	ldr	r3, [pc, #48]	; (8011cc0 <tcp_receive+0x888>)
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	4322      	orrs	r2, r4
 8011c94:	b292      	uxth	r2, r2
 8011c96:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011c98:	4b09      	ldr	r3, [pc, #36]	; (8011cc0 <tcp_receive+0x888>)
 8011c9a:	891c      	ldrh	r4, [r3, #8]
 8011c9c:	4b08      	ldr	r3, [pc, #32]	; (8011cc0 <tcp_receive+0x888>)
 8011c9e:	68db      	ldr	r3, [r3, #12]
 8011ca0:	899b      	ldrh	r3, [r3, #12]
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7fa fcb1 	bl	800c60c <lwip_htons>
 8011caa:	4603      	mov	r3, r0
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	f003 0303 	and.w	r3, r3, #3
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d00e      	beq.n	8011cd4 <tcp_receive+0x89c>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	e00d      	b.n	8011cd6 <tcp_receive+0x89e>
 8011cba:	bf00      	nop
 8011cbc:	200016c8 	.word	0x200016c8
 8011cc0:	200016a8 	.word	0x200016a8
 8011cc4:	200016d2 	.word	0x200016d2
 8011cc8:	0801aa00 	.word	0x0801aa00
 8011ccc:	0801ada8 	.word	0x0801ada8
 8011cd0:	0801aa4c 	.word	0x0801aa4c
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	4423      	add	r3, r4
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	4b98      	ldr	r3, [pc, #608]	; (8011f3c <tcp_receive+0xb04>)
 8011cdc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ce0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011ce8:	6938      	ldr	r0, [r7, #16]
 8011cea:	f7fd fc4e 	bl	800f58a <tcp_seg_free>
            while (next &&
 8011cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d00e      	beq.n	8011d12 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011cf4:	4b91      	ldr	r3, [pc, #580]	; (8011f3c <tcp_receive+0xb04>)
 8011cf6:	881b      	ldrh	r3, [r3, #0]
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	4b91      	ldr	r3, [pc, #580]	; (8011f40 <tcp_receive+0xb08>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	441a      	add	r2, r3
 8011d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d08:	8909      	ldrh	r1, [r1, #8]
 8011d0a:	440b      	add	r3, r1
 8011d0c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	da9a      	bge.n	8011c48 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d059      	beq.n	8011dcc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011d18:	4b88      	ldr	r3, [pc, #544]	; (8011f3c <tcp_receive+0xb04>)
 8011d1a:	881b      	ldrh	r3, [r3, #0]
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	4b88      	ldr	r3, [pc, #544]	; (8011f40 <tcp_receive+0xb08>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	441a      	add	r2, r3
 8011d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	dd4d      	ble.n	8011dcc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d32:	68db      	ldr	r3, [r3, #12]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	4b81      	ldr	r3, [pc, #516]	; (8011f40 <tcp_receive+0xb08>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	b29a      	uxth	r2, r3
 8011d42:	4b80      	ldr	r3, [pc, #512]	; (8011f44 <tcp_receive+0xb0c>)
 8011d44:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011d46:	4b7f      	ldr	r3, [pc, #508]	; (8011f44 <tcp_receive+0xb0c>)
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	899b      	ldrh	r3, [r3, #12]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fa fc5c 	bl	800c60c <lwip_htons>
 8011d54:	4603      	mov	r3, r0
 8011d56:	b2db      	uxtb	r3, r3
 8011d58:	f003 0302 	and.w	r3, r3, #2
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d005      	beq.n	8011d6c <tcp_receive+0x934>
                inseg.len -= 1;
 8011d60:	4b78      	ldr	r3, [pc, #480]	; (8011f44 <tcp_receive+0xb0c>)
 8011d62:	891b      	ldrh	r3, [r3, #8]
 8011d64:	3b01      	subs	r3, #1
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	4b76      	ldr	r3, [pc, #472]	; (8011f44 <tcp_receive+0xb0c>)
 8011d6a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011d6c:	4b75      	ldr	r3, [pc, #468]	; (8011f44 <tcp_receive+0xb0c>)
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	4a74      	ldr	r2, [pc, #464]	; (8011f44 <tcp_receive+0xb0c>)
 8011d72:	8912      	ldrh	r2, [r2, #8]
 8011d74:	4611      	mov	r1, r2
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7fb fe54 	bl	800da24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011d7c:	4b71      	ldr	r3, [pc, #452]	; (8011f44 <tcp_receive+0xb0c>)
 8011d7e:	891c      	ldrh	r4, [r3, #8]
 8011d80:	4b70      	ldr	r3, [pc, #448]	; (8011f44 <tcp_receive+0xb0c>)
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	899b      	ldrh	r3, [r3, #12]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7fa fc3f 	bl	800c60c <lwip_htons>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	f003 0303 	and.w	r3, r3, #3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <tcp_receive+0x966>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e000      	b.n	8011da0 <tcp_receive+0x968>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	4423      	add	r3, r4
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	4b65      	ldr	r3, [pc, #404]	; (8011f3c <tcp_receive+0xb04>)
 8011da6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011da8:	4b64      	ldr	r3, [pc, #400]	; (8011f3c <tcp_receive+0xb04>)
 8011daa:	881b      	ldrh	r3, [r3, #0]
 8011dac:	461a      	mov	r2, r3
 8011dae:	4b64      	ldr	r3, [pc, #400]	; (8011f40 <tcp_receive+0xb08>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	441a      	add	r2, r3
 8011db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d006      	beq.n	8011dcc <tcp_receive+0x994>
 8011dbe:	4b62      	ldr	r3, [pc, #392]	; (8011f48 <tcp_receive+0xb10>)
 8011dc0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011dc4:	4961      	ldr	r1, [pc, #388]	; (8011f4c <tcp_receive+0xb14>)
 8011dc6:	4862      	ldr	r0, [pc, #392]	; (8011f50 <tcp_receive+0xb18>)
 8011dc8:	f005 f8c0 	bl	8016f4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011dd0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011dd2:	4b5a      	ldr	r3, [pc, #360]	; (8011f3c <tcp_receive+0xb04>)
 8011dd4:	881b      	ldrh	r3, [r3, #0]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	4b59      	ldr	r3, [pc, #356]	; (8011f40 <tcp_receive+0xb08>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	441a      	add	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011de6:	4b55      	ldr	r3, [pc, #340]	; (8011f3c <tcp_receive+0xb04>)
 8011de8:	881b      	ldrh	r3, [r3, #0]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d206      	bcs.n	8011dfc <tcp_receive+0x9c4>
 8011dee:	4b56      	ldr	r3, [pc, #344]	; (8011f48 <tcp_receive+0xb10>)
 8011df0:	f240 6207 	movw	r2, #1543	; 0x607
 8011df4:	4957      	ldr	r1, [pc, #348]	; (8011f54 <tcp_receive+0xb1c>)
 8011df6:	4856      	ldr	r0, [pc, #344]	; (8011f50 <tcp_receive+0xb18>)
 8011df8:	f005 f8a8 	bl	8016f4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e00:	4b4e      	ldr	r3, [pc, #312]	; (8011f3c <tcp_receive+0xb04>)
 8011e02:	881b      	ldrh	r3, [r3, #0]
 8011e04:	1ad3      	subs	r3, r2, r3
 8011e06:	b29a      	uxth	r2, r3
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7fc fe97 	bl	800eb40 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011e12:	4b4c      	ldr	r3, [pc, #304]	; (8011f44 <tcp_receive+0xb0c>)
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	891b      	ldrh	r3, [r3, #8]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d006      	beq.n	8011e2a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011e1c:	4b49      	ldr	r3, [pc, #292]	; (8011f44 <tcp_receive+0xb0c>)
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	4a4d      	ldr	r2, [pc, #308]	; (8011f58 <tcp_receive+0xb20>)
 8011e22:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011e24:	4b47      	ldr	r3, [pc, #284]	; (8011f44 <tcp_receive+0xb0c>)
 8011e26:	2200      	movs	r2, #0
 8011e28:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011e2a:	4b46      	ldr	r3, [pc, #280]	; (8011f44 <tcp_receive+0xb0c>)
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	899b      	ldrh	r3, [r3, #12]
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fa fbea 	bl	800c60c <lwip_htons>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	f003 0301 	and.w	r3, r3, #1
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f000 80b8 	beq.w	8011fb6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011e46:	4b45      	ldr	r3, [pc, #276]	; (8011f5c <tcp_receive+0xb24>)
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	f043 0320 	orr.w	r3, r3, #32
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	4b42      	ldr	r3, [pc, #264]	; (8011f5c <tcp_receive+0xb24>)
 8011e52:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011e54:	e0af      	b.n	8011fb6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e5a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e60:	68db      	ldr	r3, [r3, #12]
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	4a36      	ldr	r2, [pc, #216]	; (8011f40 <tcp_receive+0xb08>)
 8011e66:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	891b      	ldrh	r3, [r3, #8]
 8011e6c:	461c      	mov	r4, r3
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	68db      	ldr	r3, [r3, #12]
 8011e72:	899b      	ldrh	r3, [r3, #12]
 8011e74:	b29b      	uxth	r3, r3
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fa fbc8 	bl	800c60c <lwip_htons>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	f003 0303 	and.w	r3, r3, #3
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d001      	beq.n	8011e8c <tcp_receive+0xa54>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	e000      	b.n	8011e8e <tcp_receive+0xa56>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	191a      	adds	r2, r3, r4
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e94:	441a      	add	r2, r3
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e9e:	461c      	mov	r4, r3
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	891b      	ldrh	r3, [r3, #8]
 8011ea4:	461d      	mov	r5, r3
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	899b      	ldrh	r3, [r3, #12]
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7fa fbac 	bl	800c60c <lwip_htons>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	f003 0303 	and.w	r3, r3, #3
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d001      	beq.n	8011ec4 <tcp_receive+0xa8c>
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	e000      	b.n	8011ec6 <tcp_receive+0xa8e>
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	442b      	add	r3, r5
 8011ec8:	429c      	cmp	r4, r3
 8011eca:	d206      	bcs.n	8011eda <tcp_receive+0xaa2>
 8011ecc:	4b1e      	ldr	r3, [pc, #120]	; (8011f48 <tcp_receive+0xb10>)
 8011ece:	f240 622b 	movw	r2, #1579	; 0x62b
 8011ed2:	4923      	ldr	r1, [pc, #140]	; (8011f60 <tcp_receive+0xb28>)
 8011ed4:	481e      	ldr	r0, [pc, #120]	; (8011f50 <tcp_receive+0xb18>)
 8011ed6:	f005 f839 	bl	8016f4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	891b      	ldrh	r3, [r3, #8]
 8011ede:	461c      	mov	r4, r3
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	899b      	ldrh	r3, [r3, #12]
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7fa fb8f 	bl	800c60c <lwip_htons>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	f003 0303 	and.w	r3, r3, #3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d001      	beq.n	8011efe <tcp_receive+0xac6>
 8011efa:	2301      	movs	r3, #1
 8011efc:	e000      	b.n	8011f00 <tcp_receive+0xac8>
 8011efe:	2300      	movs	r3, #0
 8011f00:	1919      	adds	r1, r3, r4
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f06:	b28b      	uxth	r3, r1
 8011f08:	1ad3      	subs	r3, r2, r3
 8011f0a:	b29a      	uxth	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f7fc fe15 	bl	800eb40 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	891b      	ldrh	r3, [r3, #8]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d028      	beq.n	8011f72 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011f20:	4b0d      	ldr	r3, [pc, #52]	; (8011f58 <tcp_receive+0xb20>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d01d      	beq.n	8011f64 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011f28:	4b0b      	ldr	r3, [pc, #44]	; (8011f58 <tcp_receive+0xb20>)
 8011f2a:	681a      	ldr	r2, [r3, #0]
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	4619      	mov	r1, r3
 8011f32:	4610      	mov	r0, r2
 8011f34:	f7fb ffbe 	bl	800deb4 <pbuf_cat>
 8011f38:	e018      	b.n	8011f6c <tcp_receive+0xb34>
 8011f3a:	bf00      	nop
 8011f3c:	200016d2 	.word	0x200016d2
 8011f40:	200016c8 	.word	0x200016c8
 8011f44:	200016a8 	.word	0x200016a8
 8011f48:	0801aa00 	.word	0x0801aa00
 8011f4c:	0801ade0 	.word	0x0801ade0
 8011f50:	0801aa4c 	.word	0x0801aa4c
 8011f54:	0801ae1c 	.word	0x0801ae1c
 8011f58:	200016d8 	.word	0x200016d8
 8011f5c:	200016d5 	.word	0x200016d5
 8011f60:	0801ae3c 	.word	0x0801ae3c
            } else {
              recv_data = cseg->p;
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	4a70      	ldr	r2, [pc, #448]	; (801212c <tcp_receive+0xcf4>)
 8011f6a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	899b      	ldrh	r3, [r3, #12]
 8011f78:	b29b      	uxth	r3, r3
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7fa fb46 	bl	800c60c <lwip_htons>
 8011f80:	4603      	mov	r3, r0
 8011f82:	b2db      	uxtb	r3, r3
 8011f84:	f003 0301 	and.w	r3, r3, #1
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d00d      	beq.n	8011fa8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011f8c:	4b68      	ldr	r3, [pc, #416]	; (8012130 <tcp_receive+0xcf8>)
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	f043 0320 	orr.w	r3, r3, #32
 8011f94:	b2da      	uxtb	r2, r3
 8011f96:	4b66      	ldr	r3, [pc, #408]	; (8012130 <tcp_receive+0xcf8>)
 8011f98:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	7d1b      	ldrb	r3, [r3, #20]
 8011f9e:	2b04      	cmp	r3, #4
 8011fa0:	d102      	bne.n	8011fa8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2207      	movs	r2, #7
 8011fa6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011fb0:	68b8      	ldr	r0, [r7, #8]
 8011fb2:	f7fd faea 	bl	800f58a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d008      	beq.n	8011fd0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	685a      	ldr	r2, [r3, #4]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	f43f af43 	beq.w	8011e56 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	8b5b      	ldrh	r3, [r3, #26]
 8011fd4:	f003 0301 	and.w	r3, r3, #1
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00e      	beq.n	8011ffa <tcp_receive+0xbc2>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	8b5b      	ldrh	r3, [r3, #26]
 8011fe0:	f023 0301 	bic.w	r3, r3, #1
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	835a      	strh	r2, [r3, #26]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	8b5b      	ldrh	r3, [r3, #26]
 8011fee:	f043 0302 	orr.w	r3, r3, #2
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ff8:	e188      	b.n	801230c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	8b5b      	ldrh	r3, [r3, #26]
 8011ffe:	f043 0301 	orr.w	r3, r3, #1
 8012002:	b29a      	uxth	r2, r3
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012008:	e180      	b.n	801230c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801200e:	2b00      	cmp	r3, #0
 8012010:	d106      	bne.n	8012020 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012012:	4848      	ldr	r0, [pc, #288]	; (8012134 <tcp_receive+0xcfc>)
 8012014:	f7fd faf0 	bl	800f5f8 <tcp_seg_copy>
 8012018:	4602      	mov	r2, r0
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	675a      	str	r2, [r3, #116]	; 0x74
 801201e:	e16d      	b.n	80122fc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012020:	2300      	movs	r3, #0
 8012022:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012028:	63bb      	str	r3, [r7, #56]	; 0x38
 801202a:	e157      	b.n	80122dc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801202c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	685a      	ldr	r2, [r3, #4]
 8012032:	4b41      	ldr	r3, [pc, #260]	; (8012138 <tcp_receive+0xd00>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	429a      	cmp	r2, r3
 8012038:	d11d      	bne.n	8012076 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801203a:	4b3e      	ldr	r3, [pc, #248]	; (8012134 <tcp_receive+0xcfc>)
 801203c:	891a      	ldrh	r2, [r3, #8]
 801203e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012040:	891b      	ldrh	r3, [r3, #8]
 8012042:	429a      	cmp	r2, r3
 8012044:	f240 814f 	bls.w	80122e6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012048:	483a      	ldr	r0, [pc, #232]	; (8012134 <tcp_receive+0xcfc>)
 801204a:	f7fd fad5 	bl	800f5f8 <tcp_seg_copy>
 801204e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	2b00      	cmp	r3, #0
 8012054:	f000 8149 	beq.w	80122ea <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205a:	2b00      	cmp	r3, #0
 801205c:	d003      	beq.n	8012066 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801205e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012060:	697a      	ldr	r2, [r7, #20]
 8012062:	601a      	str	r2, [r3, #0]
 8012064:	e002      	b.n	801206c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	697a      	ldr	r2, [r7, #20]
 801206a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801206c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801206e:	6978      	ldr	r0, [r7, #20]
 8012070:	f7ff f8de 	bl	8011230 <tcp_oos_insert_segment>
                }
                break;
 8012074:	e139      	b.n	80122ea <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012078:	2b00      	cmp	r3, #0
 801207a:	d117      	bne.n	80120ac <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801207c:	4b2e      	ldr	r3, [pc, #184]	; (8012138 <tcp_receive+0xd00>)
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012082:	68db      	ldr	r3, [r3, #12]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	1ad3      	subs	r3, r2, r3
 8012088:	2b00      	cmp	r3, #0
 801208a:	da57      	bge.n	801213c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801208c:	4829      	ldr	r0, [pc, #164]	; (8012134 <tcp_receive+0xcfc>)
 801208e:	f7fd fab3 	bl	800f5f8 <tcp_seg_copy>
 8012092:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012094:	69bb      	ldr	r3, [r7, #24]
 8012096:	2b00      	cmp	r3, #0
 8012098:	f000 8129 	beq.w	80122ee <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	69ba      	ldr	r2, [r7, #24]
 80120a0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80120a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80120a4:	69b8      	ldr	r0, [r7, #24]
 80120a6:	f7ff f8c3 	bl	8011230 <tcp_oos_insert_segment>
                  }
                  break;
 80120aa:	e120      	b.n	80122ee <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80120ac:	4b22      	ldr	r3, [pc, #136]	; (8012138 <tcp_receive+0xd00>)
 80120ae:	681a      	ldr	r2, [r3, #0]
 80120b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	1ad3      	subs	r3, r2, r3
 80120b8:	3b01      	subs	r3, #1
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	db3e      	blt.n	801213c <tcp_receive+0xd04>
 80120be:	4b1e      	ldr	r3, [pc, #120]	; (8012138 <tcp_receive+0xd00>)
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	1ad3      	subs	r3, r2, r3
 80120ca:	3301      	adds	r3, #1
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	dc35      	bgt.n	801213c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80120d0:	4818      	ldr	r0, [pc, #96]	; (8012134 <tcp_receive+0xcfc>)
 80120d2:	f7fd fa91 	bl	800f5f8 <tcp_seg_copy>
 80120d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	f000 8109 	beq.w	80122f2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80120e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120e8:	8912      	ldrh	r2, [r2, #8]
 80120ea:	441a      	add	r2, r3
 80120ec:	4b12      	ldr	r3, [pc, #72]	; (8012138 <tcp_receive+0xd00>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	1ad3      	subs	r3, r2, r3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	dd12      	ble.n	801211c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80120f6:	4b10      	ldr	r3, [pc, #64]	; (8012138 <tcp_receive+0xd00>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120fe:	68db      	ldr	r3, [r3, #12]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	b29b      	uxth	r3, r3
 8012104:	1ad3      	subs	r3, r2, r3
 8012106:	b29a      	uxth	r2, r3
 8012108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801210a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801210e:	685a      	ldr	r2, [r3, #4]
 8012110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012112:	891b      	ldrh	r3, [r3, #8]
 8012114:	4619      	mov	r1, r3
 8012116:	4610      	mov	r0, r2
 8012118:	f7fb fc84 	bl	800da24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801211e:	69fa      	ldr	r2, [r7, #28]
 8012120:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012122:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012124:	69f8      	ldr	r0, [r7, #28]
 8012126:	f7ff f883 	bl	8011230 <tcp_oos_insert_segment>
                  }
                  break;
 801212a:	e0e2      	b.n	80122f2 <tcp_receive+0xeba>
 801212c:	200016d8 	.word	0x200016d8
 8012130:	200016d5 	.word	0x200016d5
 8012134:	200016a8 	.word	0x200016a8
 8012138:	200016c8 	.word	0x200016c8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	f040 80c6 	bne.w	80122d6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801214a:	4b80      	ldr	r3, [pc, #512]	; (801234c <tcp_receive+0xf14>)
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012150:	68db      	ldr	r3, [r3, #12]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012156:	2b00      	cmp	r3, #0
 8012158:	f340 80bd 	ble.w	80122d6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215e:	68db      	ldr	r3, [r3, #12]
 8012160:	899b      	ldrh	r3, [r3, #12]
 8012162:	b29b      	uxth	r3, r3
 8012164:	4618      	mov	r0, r3
 8012166:	f7fa fa51 	bl	800c60c <lwip_htons>
 801216a:	4603      	mov	r3, r0
 801216c:	b2db      	uxtb	r3, r3
 801216e:	f003 0301 	and.w	r3, r3, #1
 8012172:	2b00      	cmp	r3, #0
 8012174:	f040 80bf 	bne.w	80122f6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012178:	4875      	ldr	r0, [pc, #468]	; (8012350 <tcp_receive+0xf18>)
 801217a:	f7fd fa3d 	bl	800f5f8 <tcp_seg_copy>
 801217e:	4602      	mov	r2, r0
 8012180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012182:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	f000 80b6 	beq.w	80122fa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012196:	8912      	ldrh	r2, [r2, #8]
 8012198:	441a      	add	r2, r3
 801219a:	4b6c      	ldr	r3, [pc, #432]	; (801234c <tcp_receive+0xf14>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	dd12      	ble.n	80121ca <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80121a4:	4b69      	ldr	r3, [pc, #420]	; (801234c <tcp_receive+0xf14>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	685b      	ldr	r3, [r3, #4]
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	1ad3      	subs	r3, r2, r3
 80121b4:	b29a      	uxth	r2, r3
 80121b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80121ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121bc:	685a      	ldr	r2, [r3, #4]
 80121be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c0:	891b      	ldrh	r3, [r3, #8]
 80121c2:	4619      	mov	r1, r3
 80121c4:	4610      	mov	r0, r2
 80121c6:	f7fb fc2d 	bl	800da24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80121ca:	4b62      	ldr	r3, [pc, #392]	; (8012354 <tcp_receive+0xf1c>)
 80121cc:	881b      	ldrh	r3, [r3, #0]
 80121ce:	461a      	mov	r2, r3
 80121d0:	4b5e      	ldr	r3, [pc, #376]	; (801234c <tcp_receive+0xf14>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	441a      	add	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121da:	6879      	ldr	r1, [r7, #4]
 80121dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80121de:	440b      	add	r3, r1
 80121e0:	1ad3      	subs	r3, r2, r3
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	f340 8089 	ble.w	80122fa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80121e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	899b      	ldrh	r3, [r3, #12]
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fa fa0a 	bl	800c60c <lwip_htons>
 80121f8:	4603      	mov	r3, r0
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	f003 0301 	and.w	r3, r3, #1
 8012200:	2b00      	cmp	r3, #0
 8012202:	d022      	beq.n	801224a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	899b      	ldrh	r3, [r3, #12]
 801220c:	b29b      	uxth	r3, r3
 801220e:	b21b      	sxth	r3, r3
 8012210:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012214:	b21c      	sxth	r4, r3
 8012216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	68db      	ldr	r3, [r3, #12]
 801221c:	899b      	ldrh	r3, [r3, #12]
 801221e:	b29b      	uxth	r3, r3
 8012220:	4618      	mov	r0, r3
 8012222:	f7fa f9f3 	bl	800c60c <lwip_htons>
 8012226:	4603      	mov	r3, r0
 8012228:	b2db      	uxtb	r3, r3
 801222a:	b29b      	uxth	r3, r3
 801222c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012230:	b29b      	uxth	r3, r3
 8012232:	4618      	mov	r0, r3
 8012234:	f7fa f9ea 	bl	800c60c <lwip_htons>
 8012238:	4603      	mov	r3, r0
 801223a:	b21b      	sxth	r3, r3
 801223c:	4323      	orrs	r3, r4
 801223e:	b21a      	sxth	r2, r3
 8012240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	68db      	ldr	r3, [r3, #12]
 8012246:	b292      	uxth	r2, r2
 8012248:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801224e:	b29a      	uxth	r2, r3
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012254:	4413      	add	r3, r2
 8012256:	b299      	uxth	r1, r3
 8012258:	4b3c      	ldr	r3, [pc, #240]	; (801234c <tcp_receive+0xf14>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	b29a      	uxth	r2, r3
 801225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	1a8a      	subs	r2, r1, r2
 8012264:	b292      	uxth	r2, r2
 8012266:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	685a      	ldr	r2, [r3, #4]
 801226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	891b      	ldrh	r3, [r3, #8]
 8012274:	4619      	mov	r1, r3
 8012276:	4610      	mov	r0, r2
 8012278:	f7fb fbd4 	bl	800da24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801227c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	891c      	ldrh	r4, [r3, #8]
 8012282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	68db      	ldr	r3, [r3, #12]
 8012288:	899b      	ldrh	r3, [r3, #12]
 801228a:	b29b      	uxth	r3, r3
 801228c:	4618      	mov	r0, r3
 801228e:	f7fa f9bd 	bl	800c60c <lwip_htons>
 8012292:	4603      	mov	r3, r0
 8012294:	b2db      	uxtb	r3, r3
 8012296:	f003 0303 	and.w	r3, r3, #3
 801229a:	2b00      	cmp	r3, #0
 801229c:	d001      	beq.n	80122a2 <tcp_receive+0xe6a>
 801229e:	2301      	movs	r3, #1
 80122a0:	e000      	b.n	80122a4 <tcp_receive+0xe6c>
 80122a2:	2300      	movs	r3, #0
 80122a4:	4423      	add	r3, r4
 80122a6:	b29a      	uxth	r2, r3
 80122a8:	4b2a      	ldr	r3, [pc, #168]	; (8012354 <tcp_receive+0xf1c>)
 80122aa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80122ac:	4b29      	ldr	r3, [pc, #164]	; (8012354 <tcp_receive+0xf1c>)
 80122ae:	881b      	ldrh	r3, [r3, #0]
 80122b0:	461a      	mov	r2, r3
 80122b2:	4b26      	ldr	r3, [pc, #152]	; (801234c <tcp_receive+0xf14>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	441a      	add	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122bc:	6879      	ldr	r1, [r7, #4]
 80122be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80122c0:	440b      	add	r3, r1
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d019      	beq.n	80122fa <tcp_receive+0xec2>
 80122c6:	4b24      	ldr	r3, [pc, #144]	; (8012358 <tcp_receive+0xf20>)
 80122c8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80122cc:	4923      	ldr	r1, [pc, #140]	; (801235c <tcp_receive+0xf24>)
 80122ce:	4824      	ldr	r0, [pc, #144]	; (8012360 <tcp_receive+0xf28>)
 80122d0:	f004 fe3c 	bl	8016f4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80122d4:	e011      	b.n	80122fa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80122d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	63bb      	str	r3, [r7, #56]	; 0x38
 80122dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122de:	2b00      	cmp	r3, #0
 80122e0:	f47f aea4 	bne.w	801202c <tcp_receive+0xbf4>
 80122e4:	e00a      	b.n	80122fc <tcp_receive+0xec4>
                break;
 80122e6:	bf00      	nop
 80122e8:	e008      	b.n	80122fc <tcp_receive+0xec4>
                break;
 80122ea:	bf00      	nop
 80122ec:	e006      	b.n	80122fc <tcp_receive+0xec4>
                  break;
 80122ee:	bf00      	nop
 80122f0:	e004      	b.n	80122fc <tcp_receive+0xec4>
                  break;
 80122f2:	bf00      	nop
 80122f4:	e002      	b.n	80122fc <tcp_receive+0xec4>
                  break;
 80122f6:	bf00      	nop
 80122f8:	e000      	b.n	80122fc <tcp_receive+0xec4>
                break;
 80122fa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f001 fe8b 	bl	8014018 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012302:	e003      	b.n	801230c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f001 fe87 	bl	8014018 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801230a:	e01a      	b.n	8012342 <tcp_receive+0xf0a>
 801230c:	e019      	b.n	8012342 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801230e:	4b0f      	ldr	r3, [pc, #60]	; (801234c <tcp_receive+0xf14>)
 8012310:	681a      	ldr	r2, [r3, #0]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	2b00      	cmp	r3, #0
 801231a:	db0a      	blt.n	8012332 <tcp_receive+0xefa>
 801231c:	4b0b      	ldr	r3, [pc, #44]	; (801234c <tcp_receive+0xf14>)
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012324:	6879      	ldr	r1, [r7, #4]
 8012326:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012328:	440b      	add	r3, r1
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	3301      	adds	r3, #1
 801232e:	2b00      	cmp	r3, #0
 8012330:	dd07      	ble.n	8012342 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	8b5b      	ldrh	r3, [r3, #26]
 8012336:	f043 0302 	orr.w	r3, r3, #2
 801233a:	b29a      	uxth	r2, r3
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012340:	e7ff      	b.n	8012342 <tcp_receive+0xf0a>
 8012342:	bf00      	nop
 8012344:	3750      	adds	r7, #80	; 0x50
 8012346:	46bd      	mov	sp, r7
 8012348:	bdb0      	pop	{r4, r5, r7, pc}
 801234a:	bf00      	nop
 801234c:	200016c8 	.word	0x200016c8
 8012350:	200016a8 	.word	0x200016a8
 8012354:	200016d2 	.word	0x200016d2
 8012358:	0801aa00 	.word	0x0801aa00
 801235c:	0801ada8 	.word	0x0801ada8
 8012360:	0801aa4c 	.word	0x0801aa4c

08012364 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012364:	b480      	push	{r7}
 8012366:	b083      	sub	sp, #12
 8012368:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801236a:	4b15      	ldr	r3, [pc, #84]	; (80123c0 <tcp_get_next_optbyte+0x5c>)
 801236c:	881b      	ldrh	r3, [r3, #0]
 801236e:	1c5a      	adds	r2, r3, #1
 8012370:	b291      	uxth	r1, r2
 8012372:	4a13      	ldr	r2, [pc, #76]	; (80123c0 <tcp_get_next_optbyte+0x5c>)
 8012374:	8011      	strh	r1, [r2, #0]
 8012376:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012378:	4b12      	ldr	r3, [pc, #72]	; (80123c4 <tcp_get_next_optbyte+0x60>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d004      	beq.n	801238a <tcp_get_next_optbyte+0x26>
 8012380:	4b11      	ldr	r3, [pc, #68]	; (80123c8 <tcp_get_next_optbyte+0x64>)
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	88fa      	ldrh	r2, [r7, #6]
 8012386:	429a      	cmp	r2, r3
 8012388:	d208      	bcs.n	801239c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801238a:	4b10      	ldr	r3, [pc, #64]	; (80123cc <tcp_get_next_optbyte+0x68>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	3314      	adds	r3, #20
 8012390:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012392:	88fb      	ldrh	r3, [r7, #6]
 8012394:	683a      	ldr	r2, [r7, #0]
 8012396:	4413      	add	r3, r2
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	e00b      	b.n	80123b4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801239c:	88fb      	ldrh	r3, [r7, #6]
 801239e:	b2da      	uxtb	r2, r3
 80123a0:	4b09      	ldr	r3, [pc, #36]	; (80123c8 <tcp_get_next_optbyte+0x64>)
 80123a2:	881b      	ldrh	r3, [r3, #0]
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	1ad3      	subs	r3, r2, r3
 80123a8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80123aa:	4b06      	ldr	r3, [pc, #24]	; (80123c4 <tcp_get_next_optbyte+0x60>)
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	797b      	ldrb	r3, [r7, #5]
 80123b0:	4413      	add	r3, r2
 80123b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	370c      	adds	r7, #12
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr
 80123c0:	200016c4 	.word	0x200016c4
 80123c4:	200016c0 	.word	0x200016c0
 80123c8:	200016be 	.word	0x200016be
 80123cc:	200016b8 	.word	0x200016b8

080123d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d106      	bne.n	80123ec <tcp_parseopt+0x1c>
 80123de:	4b32      	ldr	r3, [pc, #200]	; (80124a8 <tcp_parseopt+0xd8>)
 80123e0:	f240 727d 	movw	r2, #1917	; 0x77d
 80123e4:	4931      	ldr	r1, [pc, #196]	; (80124ac <tcp_parseopt+0xdc>)
 80123e6:	4832      	ldr	r0, [pc, #200]	; (80124b0 <tcp_parseopt+0xe0>)
 80123e8:	f004 fdb0 	bl	8016f4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80123ec:	4b31      	ldr	r3, [pc, #196]	; (80124b4 <tcp_parseopt+0xe4>)
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d055      	beq.n	80124a0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80123f4:	4b30      	ldr	r3, [pc, #192]	; (80124b8 <tcp_parseopt+0xe8>)
 80123f6:	2200      	movs	r2, #0
 80123f8:	801a      	strh	r2, [r3, #0]
 80123fa:	e045      	b.n	8012488 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80123fc:	f7ff ffb2 	bl	8012364 <tcp_get_next_optbyte>
 8012400:	4603      	mov	r3, r0
 8012402:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012404:	7bfb      	ldrb	r3, [r7, #15]
 8012406:	2b02      	cmp	r3, #2
 8012408:	d006      	beq.n	8012418 <tcp_parseopt+0x48>
 801240a:	2b02      	cmp	r3, #2
 801240c:	dc2b      	bgt.n	8012466 <tcp_parseopt+0x96>
 801240e:	2b00      	cmp	r3, #0
 8012410:	d041      	beq.n	8012496 <tcp_parseopt+0xc6>
 8012412:	2b01      	cmp	r3, #1
 8012414:	d127      	bne.n	8012466 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012416:	e037      	b.n	8012488 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012418:	f7ff ffa4 	bl	8012364 <tcp_get_next_optbyte>
 801241c:	4603      	mov	r3, r0
 801241e:	2b04      	cmp	r3, #4
 8012420:	d13b      	bne.n	801249a <tcp_parseopt+0xca>
 8012422:	4b25      	ldr	r3, [pc, #148]	; (80124b8 <tcp_parseopt+0xe8>)
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	3301      	adds	r3, #1
 8012428:	4a22      	ldr	r2, [pc, #136]	; (80124b4 <tcp_parseopt+0xe4>)
 801242a:	8812      	ldrh	r2, [r2, #0]
 801242c:	4293      	cmp	r3, r2
 801242e:	da34      	bge.n	801249a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012430:	f7ff ff98 	bl	8012364 <tcp_get_next_optbyte>
 8012434:	4603      	mov	r3, r0
 8012436:	b29b      	uxth	r3, r3
 8012438:	021b      	lsls	r3, r3, #8
 801243a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801243c:	f7ff ff92 	bl	8012364 <tcp_get_next_optbyte>
 8012440:	4603      	mov	r3, r0
 8012442:	b29a      	uxth	r2, r3
 8012444:	89bb      	ldrh	r3, [r7, #12]
 8012446:	4313      	orrs	r3, r2
 8012448:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801244a:	89bb      	ldrh	r3, [r7, #12]
 801244c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012450:	d804      	bhi.n	801245c <tcp_parseopt+0x8c>
 8012452:	89bb      	ldrh	r3, [r7, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d001      	beq.n	801245c <tcp_parseopt+0x8c>
 8012458:	89ba      	ldrh	r2, [r7, #12]
 801245a:	e001      	b.n	8012460 <tcp_parseopt+0x90>
 801245c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012464:	e010      	b.n	8012488 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012466:	f7ff ff7d 	bl	8012364 <tcp_get_next_optbyte>
 801246a:	4603      	mov	r3, r0
 801246c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801246e:	7afb      	ldrb	r3, [r7, #11]
 8012470:	2b01      	cmp	r3, #1
 8012472:	d914      	bls.n	801249e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012474:	7afb      	ldrb	r3, [r7, #11]
 8012476:	b29a      	uxth	r2, r3
 8012478:	4b0f      	ldr	r3, [pc, #60]	; (80124b8 <tcp_parseopt+0xe8>)
 801247a:	881b      	ldrh	r3, [r3, #0]
 801247c:	4413      	add	r3, r2
 801247e:	b29b      	uxth	r3, r3
 8012480:	3b02      	subs	r3, #2
 8012482:	b29a      	uxth	r2, r3
 8012484:	4b0c      	ldr	r3, [pc, #48]	; (80124b8 <tcp_parseopt+0xe8>)
 8012486:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012488:	4b0b      	ldr	r3, [pc, #44]	; (80124b8 <tcp_parseopt+0xe8>)
 801248a:	881a      	ldrh	r2, [r3, #0]
 801248c:	4b09      	ldr	r3, [pc, #36]	; (80124b4 <tcp_parseopt+0xe4>)
 801248e:	881b      	ldrh	r3, [r3, #0]
 8012490:	429a      	cmp	r2, r3
 8012492:	d3b3      	bcc.n	80123fc <tcp_parseopt+0x2c>
 8012494:	e004      	b.n	80124a0 <tcp_parseopt+0xd0>
          return;
 8012496:	bf00      	nop
 8012498:	e002      	b.n	80124a0 <tcp_parseopt+0xd0>
            return;
 801249a:	bf00      	nop
 801249c:	e000      	b.n	80124a0 <tcp_parseopt+0xd0>
            return;
 801249e:	bf00      	nop
      }
    }
  }
}
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	0801aa00 	.word	0x0801aa00
 80124ac:	0801ae64 	.word	0x0801ae64
 80124b0:	0801aa4c 	.word	0x0801aa4c
 80124b4:	200016bc 	.word	0x200016bc
 80124b8:	200016c4 	.word	0x200016c4

080124bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80124bc:	b480      	push	{r7}
 80124be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80124c0:	4b05      	ldr	r3, [pc, #20]	; (80124d8 <tcp_trigger_input_pcb_close+0x1c>)
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	f043 0310 	orr.w	r3, r3, #16
 80124c8:	b2da      	uxtb	r2, r3
 80124ca:	4b03      	ldr	r3, [pc, #12]	; (80124d8 <tcp_trigger_input_pcb_close+0x1c>)
 80124cc:	701a      	strb	r2, [r3, #0]
}
 80124ce:	bf00      	nop
 80124d0:	46bd      	mov	sp, r7
 80124d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d6:	4770      	bx	lr
 80124d8:	200016d5 	.word	0x200016d5

080124dc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d00a      	beq.n	8012504 <tcp_route+0x28>
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	7a1b      	ldrb	r3, [r3, #8]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d006      	beq.n	8012504 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	7a1b      	ldrb	r3, [r3, #8]
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fb f8b8 	bl	800d670 <netif_get_by_index>
 8012500:	4603      	mov	r3, r0
 8012502:	e003      	b.n	801250c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f003 fad5 	bl	8015ab4 <ip4_route>
 801250a:	4603      	mov	r3, r0
  }
}
 801250c:	4618      	mov	r0, r3
 801250e:	3710      	adds	r7, #16
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012514:	b590      	push	{r4, r7, lr}
 8012516:	b087      	sub	sp, #28
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	603b      	str	r3, [r7, #0]
 8012520:	4613      	mov	r3, r2
 8012522:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d105      	bne.n	8012536 <tcp_create_segment+0x22>
 801252a:	4b44      	ldr	r3, [pc, #272]	; (801263c <tcp_create_segment+0x128>)
 801252c:	22a3      	movs	r2, #163	; 0xa3
 801252e:	4944      	ldr	r1, [pc, #272]	; (8012640 <tcp_create_segment+0x12c>)
 8012530:	4844      	ldr	r0, [pc, #272]	; (8012644 <tcp_create_segment+0x130>)
 8012532:	f004 fd0b 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d105      	bne.n	8012548 <tcp_create_segment+0x34>
 801253c:	4b3f      	ldr	r3, [pc, #252]	; (801263c <tcp_create_segment+0x128>)
 801253e:	22a4      	movs	r2, #164	; 0xa4
 8012540:	4941      	ldr	r1, [pc, #260]	; (8012648 <tcp_create_segment+0x134>)
 8012542:	4840      	ldr	r0, [pc, #256]	; (8012644 <tcp_create_segment+0x130>)
 8012544:	f004 fd02 	bl	8016f4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012548:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801254c:	009b      	lsls	r3, r3, #2
 801254e:	b2db      	uxtb	r3, r3
 8012550:	f003 0304 	and.w	r3, r3, #4
 8012554:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012556:	2003      	movs	r0, #3
 8012558:	f7fa fd8c 	bl	800d074 <memp_malloc>
 801255c:	6138      	str	r0, [r7, #16]
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d104      	bne.n	801256e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012564:	68b8      	ldr	r0, [r7, #8]
 8012566:	f7fb fbe3 	bl	800dd30 <pbuf_free>
    return NULL;
 801256a:	2300      	movs	r3, #0
 801256c:	e061      	b.n	8012632 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012574:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	2200      	movs	r2, #0
 801257a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	68ba      	ldr	r2, [r7, #8]
 8012580:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	891a      	ldrh	r2, [r3, #8]
 8012586:	7dfb      	ldrb	r3, [r7, #23]
 8012588:	b29b      	uxth	r3, r3
 801258a:	429a      	cmp	r2, r3
 801258c:	d205      	bcs.n	801259a <tcp_create_segment+0x86>
 801258e:	4b2b      	ldr	r3, [pc, #172]	; (801263c <tcp_create_segment+0x128>)
 8012590:	22b0      	movs	r2, #176	; 0xb0
 8012592:	492e      	ldr	r1, [pc, #184]	; (801264c <tcp_create_segment+0x138>)
 8012594:	482b      	ldr	r0, [pc, #172]	; (8012644 <tcp_create_segment+0x130>)
 8012596:	f004 fcd9 	bl	8016f4c <iprintf>
  seg->len = p->tot_len - optlen;
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	891a      	ldrh	r2, [r3, #8]
 801259e:	7dfb      	ldrb	r3, [r7, #23]
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	1ad3      	subs	r3, r2, r3
 80125a4:	b29a      	uxth	r2, r3
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80125aa:	2114      	movs	r1, #20
 80125ac:	68b8      	ldr	r0, [r7, #8]
 80125ae:	f7fb fb29 	bl	800dc04 <pbuf_add_header>
 80125b2:	4603      	mov	r3, r0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d004      	beq.n	80125c2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80125b8:	6938      	ldr	r0, [r7, #16]
 80125ba:	f7fc ffe6 	bl	800f58a <tcp_seg_free>
    return NULL;
 80125be:	2300      	movs	r3, #0
 80125c0:	e037      	b.n	8012632 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	685a      	ldr	r2, [r3, #4]
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	8ada      	ldrh	r2, [r3, #22]
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	68dc      	ldr	r4, [r3, #12]
 80125d4:	4610      	mov	r0, r2
 80125d6:	f7fa f819 	bl	800c60c <lwip_htons>
 80125da:	4603      	mov	r3, r0
 80125dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	8b1a      	ldrh	r2, [r3, #24]
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	68dc      	ldr	r4, [r3, #12]
 80125e6:	4610      	mov	r0, r2
 80125e8:	f7fa f810 	bl	800c60c <lwip_htons>
 80125ec:	4603      	mov	r3, r0
 80125ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	68dc      	ldr	r4, [r3, #12]
 80125f4:	6838      	ldr	r0, [r7, #0]
 80125f6:	f7fa f81e 	bl	800c636 <lwip_htonl>
 80125fa:	4603      	mov	r3, r0
 80125fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80125fe:	7dfb      	ldrb	r3, [r7, #23]
 8012600:	089b      	lsrs	r3, r3, #2
 8012602:	b2db      	uxtb	r3, r3
 8012604:	b29b      	uxth	r3, r3
 8012606:	3305      	adds	r3, #5
 8012608:	b29b      	uxth	r3, r3
 801260a:	031b      	lsls	r3, r3, #12
 801260c:	b29a      	uxth	r2, r3
 801260e:	79fb      	ldrb	r3, [r7, #7]
 8012610:	b29b      	uxth	r3, r3
 8012612:	4313      	orrs	r3, r2
 8012614:	b29a      	uxth	r2, r3
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	68dc      	ldr	r4, [r3, #12]
 801261a:	4610      	mov	r0, r2
 801261c:	f7f9 fff6 	bl	800c60c <lwip_htons>
 8012620:	4603      	mov	r3, r0
 8012622:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	68db      	ldr	r3, [r3, #12]
 8012628:	2200      	movs	r2, #0
 801262a:	749a      	strb	r2, [r3, #18]
 801262c:	2200      	movs	r2, #0
 801262e:	74da      	strb	r2, [r3, #19]
  return seg;
 8012630:	693b      	ldr	r3, [r7, #16]
}
 8012632:	4618      	mov	r0, r3
 8012634:	371c      	adds	r7, #28
 8012636:	46bd      	mov	sp, r7
 8012638:	bd90      	pop	{r4, r7, pc}
 801263a:	bf00      	nop
 801263c:	0801ae80 	.word	0x0801ae80
 8012640:	0801aeb4 	.word	0x0801aeb4
 8012644:	0801aed4 	.word	0x0801aed4
 8012648:	0801aefc 	.word	0x0801aefc
 801264c:	0801af20 	.word	0x0801af20

08012650 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b086      	sub	sp, #24
 8012654:	af00      	add	r7, sp, #0
 8012656:	607b      	str	r3, [r7, #4]
 8012658:	4603      	mov	r3, r0
 801265a:	73fb      	strb	r3, [r7, #15]
 801265c:	460b      	mov	r3, r1
 801265e:	81bb      	strh	r3, [r7, #12]
 8012660:	4613      	mov	r3, r2
 8012662:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012664:	89bb      	ldrh	r3, [r7, #12]
 8012666:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d105      	bne.n	801267a <tcp_pbuf_prealloc+0x2a>
 801266e:	4b30      	ldr	r3, [pc, #192]	; (8012730 <tcp_pbuf_prealloc+0xe0>)
 8012670:	22e8      	movs	r2, #232	; 0xe8
 8012672:	4930      	ldr	r1, [pc, #192]	; (8012734 <tcp_pbuf_prealloc+0xe4>)
 8012674:	4830      	ldr	r0, [pc, #192]	; (8012738 <tcp_pbuf_prealloc+0xe8>)
 8012676:	f004 fc69 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801267a:	6a3b      	ldr	r3, [r7, #32]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d105      	bne.n	801268c <tcp_pbuf_prealloc+0x3c>
 8012680:	4b2b      	ldr	r3, [pc, #172]	; (8012730 <tcp_pbuf_prealloc+0xe0>)
 8012682:	22e9      	movs	r2, #233	; 0xe9
 8012684:	492d      	ldr	r1, [pc, #180]	; (801273c <tcp_pbuf_prealloc+0xec>)
 8012686:	482c      	ldr	r0, [pc, #176]	; (8012738 <tcp_pbuf_prealloc+0xe8>)
 8012688:	f004 fc60 	bl	8016f4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801268c:	89ba      	ldrh	r2, [r7, #12]
 801268e:	897b      	ldrh	r3, [r7, #10]
 8012690:	429a      	cmp	r2, r3
 8012692:	d221      	bcs.n	80126d8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012694:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012698:	f003 0302 	and.w	r3, r3, #2
 801269c:	2b00      	cmp	r3, #0
 801269e:	d111      	bne.n	80126c4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80126a0:	6a3b      	ldr	r3, [r7, #32]
 80126a2:	8b5b      	ldrh	r3, [r3, #26]
 80126a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d115      	bne.n	80126d8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80126ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d007      	beq.n	80126c4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80126b4:	6a3b      	ldr	r3, [r7, #32]
 80126b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d103      	bne.n	80126c4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80126bc:	6a3b      	ldr	r3, [r7, #32]
 80126be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d009      	beq.n	80126d8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80126c4:	89bb      	ldrh	r3, [r7, #12]
 80126c6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80126ca:	f023 0203 	bic.w	r2, r3, #3
 80126ce:	897b      	ldrh	r3, [r7, #10]
 80126d0:	4293      	cmp	r3, r2
 80126d2:	bf28      	it	cs
 80126d4:	4613      	movcs	r3, r2
 80126d6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80126d8:	8af9      	ldrh	r1, [r7, #22]
 80126da:	7bfb      	ldrb	r3, [r7, #15]
 80126dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7fb f841 	bl	800d768 <pbuf_alloc>
 80126e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d101      	bne.n	80126f2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80126ee:	2300      	movs	r3, #0
 80126f0:	e019      	b.n	8012726 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d006      	beq.n	8012708 <tcp_pbuf_prealloc+0xb8>
 80126fa:	4b0d      	ldr	r3, [pc, #52]	; (8012730 <tcp_pbuf_prealloc+0xe0>)
 80126fc:	f240 120b 	movw	r2, #267	; 0x10b
 8012700:	490f      	ldr	r1, [pc, #60]	; (8012740 <tcp_pbuf_prealloc+0xf0>)
 8012702:	480d      	ldr	r0, [pc, #52]	; (8012738 <tcp_pbuf_prealloc+0xe8>)
 8012704:	f004 fc22 	bl	8016f4c <iprintf>
  *oversize = p->len - length;
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	895a      	ldrh	r2, [r3, #10]
 801270c:	89bb      	ldrh	r3, [r7, #12]
 801270e:	1ad3      	subs	r3, r2, r3
 8012710:	b29a      	uxth	r2, r3
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	89ba      	ldrh	r2, [r7, #12]
 801271a:	811a      	strh	r2, [r3, #8]
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	891a      	ldrh	r2, [r3, #8]
 8012720:	693b      	ldr	r3, [r7, #16]
 8012722:	815a      	strh	r2, [r3, #10]
  return p;
 8012724:	693b      	ldr	r3, [r7, #16]
}
 8012726:	4618      	mov	r0, r3
 8012728:	3718      	adds	r7, #24
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop
 8012730:	0801ae80 	.word	0x0801ae80
 8012734:	0801af38 	.word	0x0801af38
 8012738:	0801aed4 	.word	0x0801aed4
 801273c:	0801af5c 	.word	0x0801af5c
 8012740:	0801af7c 	.word	0x0801af7c

08012744 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	460b      	mov	r3, r1
 801274e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d106      	bne.n	8012764 <tcp_write_checks+0x20>
 8012756:	4b33      	ldr	r3, [pc, #204]	; (8012824 <tcp_write_checks+0xe0>)
 8012758:	f240 1233 	movw	r2, #307	; 0x133
 801275c:	4932      	ldr	r1, [pc, #200]	; (8012828 <tcp_write_checks+0xe4>)
 801275e:	4833      	ldr	r0, [pc, #204]	; (801282c <tcp_write_checks+0xe8>)
 8012760:	f004 fbf4 	bl	8016f4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	7d1b      	ldrb	r3, [r3, #20]
 8012768:	2b04      	cmp	r3, #4
 801276a:	d00e      	beq.n	801278a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012770:	2b07      	cmp	r3, #7
 8012772:	d00a      	beq.n	801278a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012778:	2b02      	cmp	r3, #2
 801277a:	d006      	beq.n	801278a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012780:	2b03      	cmp	r3, #3
 8012782:	d002      	beq.n	801278a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012784:	f06f 030a 	mvn.w	r3, #10
 8012788:	e048      	b.n	801281c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801278a:	887b      	ldrh	r3, [r7, #2]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d101      	bne.n	8012794 <tcp_write_checks+0x50>
    return ERR_OK;
 8012790:	2300      	movs	r3, #0
 8012792:	e043      	b.n	801281c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801279a:	887a      	ldrh	r2, [r7, #2]
 801279c:	429a      	cmp	r2, r3
 801279e:	d909      	bls.n	80127b4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	8b5b      	ldrh	r3, [r3, #26]
 80127a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80127ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127b2:	e033      	b.n	801281c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127ba:	2b08      	cmp	r3, #8
 80127bc:	d909      	bls.n	80127d2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	8b5b      	ldrh	r3, [r3, #26]
 80127c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127c6:	b29a      	uxth	r2, r3
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80127cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127d0:	e024      	b.n	801281c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d00f      	beq.n	80127fc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d11a      	bne.n	801281a <tcp_write_checks+0xd6>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d116      	bne.n	801281a <tcp_write_checks+0xd6>
 80127ec:	4b0d      	ldr	r3, [pc, #52]	; (8012824 <tcp_write_checks+0xe0>)
 80127ee:	f240 1255 	movw	r2, #341	; 0x155
 80127f2:	490f      	ldr	r1, [pc, #60]	; (8012830 <tcp_write_checks+0xec>)
 80127f4:	480d      	ldr	r0, [pc, #52]	; (801282c <tcp_write_checks+0xe8>)
 80127f6:	f004 fba9 	bl	8016f4c <iprintf>
 80127fa:	e00e      	b.n	801281a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012800:	2b00      	cmp	r3, #0
 8012802:	d103      	bne.n	801280c <tcp_write_checks+0xc8>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012808:	2b00      	cmp	r3, #0
 801280a:	d006      	beq.n	801281a <tcp_write_checks+0xd6>
 801280c:	4b05      	ldr	r3, [pc, #20]	; (8012824 <tcp_write_checks+0xe0>)
 801280e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012812:	4908      	ldr	r1, [pc, #32]	; (8012834 <tcp_write_checks+0xf0>)
 8012814:	4805      	ldr	r0, [pc, #20]	; (801282c <tcp_write_checks+0xe8>)
 8012816:	f004 fb99 	bl	8016f4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801281a:	2300      	movs	r3, #0
}
 801281c:	4618      	mov	r0, r3
 801281e:	3708      	adds	r7, #8
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	0801ae80 	.word	0x0801ae80
 8012828:	0801af90 	.word	0x0801af90
 801282c:	0801aed4 	.word	0x0801aed4
 8012830:	0801afb0 	.word	0x0801afb0
 8012834:	0801afec 	.word	0x0801afec

08012838 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012838:	b590      	push	{r4, r7, lr}
 801283a:	b09b      	sub	sp, #108	; 0x6c
 801283c:	af04      	add	r7, sp, #16
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	4611      	mov	r1, r2
 8012844:	461a      	mov	r2, r3
 8012846:	460b      	mov	r3, r1
 8012848:	80fb      	strh	r3, [r7, #6]
 801284a:	4613      	mov	r3, r2
 801284c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801284e:	2300      	movs	r3, #0
 8012850:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012852:	2300      	movs	r3, #0
 8012854:	653b      	str	r3, [r7, #80]	; 0x50
 8012856:	2300      	movs	r3, #0
 8012858:	64fb      	str	r3, [r7, #76]	; 0x4c
 801285a:	2300      	movs	r3, #0
 801285c:	64bb      	str	r3, [r7, #72]	; 0x48
 801285e:	2300      	movs	r3, #0
 8012860:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012862:	2300      	movs	r3, #0
 8012864:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012868:	2300      	movs	r3, #0
 801286a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801286e:	2300      	movs	r3, #0
 8012870:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012872:	2300      	movs	r3, #0
 8012874:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012876:	2300      	movs	r3, #0
 8012878:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d109      	bne.n	8012894 <tcp_write+0x5c>
 8012880:	4ba4      	ldr	r3, [pc, #656]	; (8012b14 <tcp_write+0x2dc>)
 8012882:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012886:	49a4      	ldr	r1, [pc, #656]	; (8012b18 <tcp_write+0x2e0>)
 8012888:	48a4      	ldr	r0, [pc, #656]	; (8012b1c <tcp_write+0x2e4>)
 801288a:	f004 fb5f 	bl	8016f4c <iprintf>
 801288e:	f06f 030f 	mvn.w	r3, #15
 8012892:	e32a      	b.n	8012eea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801289a:	085b      	lsrs	r3, r3, #1
 801289c:	b29a      	uxth	r2, r3
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128a2:	4293      	cmp	r3, r2
 80128a4:	bf28      	it	cs
 80128a6:	4613      	movcs	r3, r2
 80128a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80128aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d102      	bne.n	80128b6 <tcp_write+0x7e>
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128b4:	e000      	b.n	80128b8 <tcp_write+0x80>
 80128b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d109      	bne.n	80128d4 <tcp_write+0x9c>
 80128c0:	4b94      	ldr	r3, [pc, #592]	; (8012b14 <tcp_write+0x2dc>)
 80128c2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80128c6:	4996      	ldr	r1, [pc, #600]	; (8012b20 <tcp_write+0x2e8>)
 80128c8:	4894      	ldr	r0, [pc, #592]	; (8012b1c <tcp_write+0x2e4>)
 80128ca:	f004 fb3f 	bl	8016f4c <iprintf>
 80128ce:	f06f 030f 	mvn.w	r3, #15
 80128d2:	e30a      	b.n	8012eea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80128d4:	88fb      	ldrh	r3, [r7, #6]
 80128d6:	4619      	mov	r1, r3
 80128d8:	68f8      	ldr	r0, [r7, #12]
 80128da:	f7ff ff33 	bl	8012744 <tcp_write_checks>
 80128de:	4603      	mov	r3, r0
 80128e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80128e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d002      	beq.n	80128f2 <tcp_write+0xba>
    return err;
 80128ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80128f0:	e2fb      	b.n	8012eea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80128fc:	2300      	movs	r3, #0
 80128fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012906:	2b00      	cmp	r3, #0
 8012908:	f000 80f6 	beq.w	8012af8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012910:	653b      	str	r3, [r7, #80]	; 0x50
 8012912:	e002      	b.n	801291a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801291a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d1f8      	bne.n	8012914 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012924:	7a9b      	ldrb	r3, [r3, #10]
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	b29b      	uxth	r3, r3
 801292a:	f003 0304 	and.w	r3, r3, #4
 801292e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012930:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012934:	891b      	ldrh	r3, [r3, #8]
 8012936:	4619      	mov	r1, r3
 8012938:	8c3b      	ldrh	r3, [r7, #32]
 801293a:	440b      	add	r3, r1
 801293c:	429a      	cmp	r2, r3
 801293e:	da06      	bge.n	801294e <tcp_write+0x116>
 8012940:	4b74      	ldr	r3, [pc, #464]	; (8012b14 <tcp_write+0x2dc>)
 8012942:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012946:	4977      	ldr	r1, [pc, #476]	; (8012b24 <tcp_write+0x2ec>)
 8012948:	4874      	ldr	r0, [pc, #464]	; (8012b1c <tcp_write+0x2e4>)
 801294a:	f004 faff 	bl	8016f4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801294e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012950:	891a      	ldrh	r2, [r3, #8]
 8012952:	8c3b      	ldrh	r3, [r7, #32]
 8012954:	4413      	add	r3, r2
 8012956:	b29b      	uxth	r3, r3
 8012958:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801295a:	1ad3      	subs	r3, r2, r3
 801295c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012964:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012966:	8a7b      	ldrh	r3, [r7, #18]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d026      	beq.n	80129ba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801296c:	8a7b      	ldrh	r3, [r7, #18]
 801296e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012970:	429a      	cmp	r2, r3
 8012972:	d206      	bcs.n	8012982 <tcp_write+0x14a>
 8012974:	4b67      	ldr	r3, [pc, #412]	; (8012b14 <tcp_write+0x2dc>)
 8012976:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801297a:	496b      	ldr	r1, [pc, #428]	; (8012b28 <tcp_write+0x2f0>)
 801297c:	4867      	ldr	r0, [pc, #412]	; (8012b1c <tcp_write+0x2e4>)
 801297e:	f004 fae5 	bl	8016f4c <iprintf>
      seg = last_unsent;
 8012982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012984:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012986:	8a7b      	ldrh	r3, [r7, #18]
 8012988:	88fa      	ldrh	r2, [r7, #6]
 801298a:	4293      	cmp	r3, r2
 801298c:	bf28      	it	cs
 801298e:	4613      	movcs	r3, r2
 8012990:	b29b      	uxth	r3, r3
 8012992:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012994:	4293      	cmp	r3, r2
 8012996:	bf28      	it	cs
 8012998:	4613      	movcs	r3, r2
 801299a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801299c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80129a2:	4413      	add	r3, r2
 80129a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80129a8:	8a7a      	ldrh	r2, [r7, #18]
 80129aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80129ac:	1ad3      	subs	r3, r2, r3
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80129b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80129b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80129ba:	8a7b      	ldrh	r3, [r7, #18]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d00b      	beq.n	80129d8 <tcp_write+0x1a0>
 80129c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129c4:	88fb      	ldrh	r3, [r7, #6]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d006      	beq.n	80129d8 <tcp_write+0x1a0>
 80129ca:	4b52      	ldr	r3, [pc, #328]	; (8012b14 <tcp_write+0x2dc>)
 80129cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129d0:	4956      	ldr	r1, [pc, #344]	; (8012b2c <tcp_write+0x2f4>)
 80129d2:	4852      	ldr	r0, [pc, #328]	; (8012b1c <tcp_write+0x2e4>)
 80129d4:	f004 faba 	bl	8016f4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80129d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129dc:	88fb      	ldrh	r3, [r7, #6]
 80129de:	429a      	cmp	r2, r3
 80129e0:	f080 8167 	bcs.w	8012cb2 <tcp_write+0x47a>
 80129e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f000 8163 	beq.w	8012cb2 <tcp_write+0x47a>
 80129ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ee:	891b      	ldrh	r3, [r3, #8]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f000 815e 	beq.w	8012cb2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80129f6:	88fa      	ldrh	r2, [r7, #6]
 80129f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80129fc:	1ad2      	subs	r2, r2, r3
 80129fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a00:	4293      	cmp	r3, r2
 8012a02:	bfa8      	it	ge
 8012a04:	4613      	movge	r3, r2
 8012a06:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a0a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012a0c:	797b      	ldrb	r3, [r7, #5]
 8012a0e:	f003 0301 	and.w	r3, r3, #1
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d027      	beq.n	8012a66 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012a16:	f107 0012 	add.w	r0, r7, #18
 8012a1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a1c:	8bf9      	ldrh	r1, [r7, #30]
 8012a1e:	2301      	movs	r3, #1
 8012a20:	9302      	str	r3, [sp, #8]
 8012a22:	797b      	ldrb	r3, [r7, #5]
 8012a24:	9301      	str	r3, [sp, #4]
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	f7ff fe0f 	bl	8012650 <tcp_pbuf_prealloc>
 8012a32:	6578      	str	r0, [r7, #84]	; 0x54
 8012a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	f000 8225 	beq.w	8012e86 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a3e:	6858      	ldr	r0, [r3, #4]
 8012a40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a44:	68ba      	ldr	r2, [r7, #8]
 8012a46:	4413      	add	r3, r2
 8012a48:	8bfa      	ldrh	r2, [r7, #30]
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	f004 fa4e 	bl	8016eec <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012a50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012a52:	f7fb f9f5 	bl	800de40 <pbuf_clen>
 8012a56:	4603      	mov	r3, r0
 8012a58:	461a      	mov	r2, r3
 8012a5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012a5e:	4413      	add	r3, r2
 8012a60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012a64:	e041      	b.n	8012aea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8012a6c:	e002      	b.n	8012a74 <tcp_write+0x23c>
 8012a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	637b      	str	r3, [r7, #52]	; 0x34
 8012a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1f8      	bne.n	8012a6e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a7e:	7b1b      	ldrb	r3, [r3, #12]
 8012a80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d115      	bne.n	8012ab4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a8e:	8952      	ldrh	r2, [r2, #10]
 8012a90:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012a92:	68ba      	ldr	r2, [r7, #8]
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d10d      	bne.n	8012ab4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012a98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d006      	beq.n	8012aae <tcp_write+0x276>
 8012aa0:	4b1c      	ldr	r3, [pc, #112]	; (8012b14 <tcp_write+0x2dc>)
 8012aa2:	f240 2231 	movw	r2, #561	; 0x231
 8012aa6:	4922      	ldr	r1, [pc, #136]	; (8012b30 <tcp_write+0x2f8>)
 8012aa8:	481c      	ldr	r0, [pc, #112]	; (8012b1c <tcp_write+0x2e4>)
 8012aaa:	f004 fa4f 	bl	8016f4c <iprintf>
          extendlen = seglen;
 8012aae:	8bfb      	ldrh	r3, [r7, #30]
 8012ab0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012ab2:	e01a      	b.n	8012aea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012ab4:	8bfb      	ldrh	r3, [r7, #30]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	4619      	mov	r1, r3
 8012aba:	2000      	movs	r0, #0
 8012abc:	f7fa fe54 	bl	800d768 <pbuf_alloc>
 8012ac0:	6578      	str	r0, [r7, #84]	; 0x54
 8012ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	f000 81e0 	beq.w	8012e8a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012aca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ace:	68ba      	ldr	r2, [r7, #8]
 8012ad0:	441a      	add	r2, r3
 8012ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ad4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012ad6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012ad8:	f7fb f9b2 	bl	800de40 <pbuf_clen>
 8012adc:	4603      	mov	r3, r0
 8012ade:	461a      	mov	r2, r3
 8012ae0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012ae4:	4413      	add	r3, r2
 8012ae6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012aea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012aee:	8bfb      	ldrh	r3, [r7, #30]
 8012af0:	4413      	add	r3, r2
 8012af2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012af6:	e0dc      	b.n	8012cb2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	f000 80d7 	beq.w	8012cb2 <tcp_write+0x47a>
 8012b04:	4b03      	ldr	r3, [pc, #12]	; (8012b14 <tcp_write+0x2dc>)
 8012b06:	f240 224a 	movw	r2, #586	; 0x24a
 8012b0a:	490a      	ldr	r1, [pc, #40]	; (8012b34 <tcp_write+0x2fc>)
 8012b0c:	4803      	ldr	r0, [pc, #12]	; (8012b1c <tcp_write+0x2e4>)
 8012b0e:	f004 fa1d 	bl	8016f4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012b12:	e0ce      	b.n	8012cb2 <tcp_write+0x47a>
 8012b14:	0801ae80 	.word	0x0801ae80
 8012b18:	0801b020 	.word	0x0801b020
 8012b1c:	0801aed4 	.word	0x0801aed4
 8012b20:	0801b038 	.word	0x0801b038
 8012b24:	0801b06c 	.word	0x0801b06c
 8012b28:	0801b084 	.word	0x0801b084
 8012b2c:	0801b0a4 	.word	0x0801b0a4
 8012b30:	0801b0c4 	.word	0x0801b0c4
 8012b34:	0801b0f0 	.word	0x0801b0f0
    struct pbuf *p;
    u16_t left = len - pos;
 8012b38:	88fa      	ldrh	r2, [r7, #6]
 8012b3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012b42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b4a:	1ad3      	subs	r3, r2, r3
 8012b4c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012b4e:	8b7a      	ldrh	r2, [r7, #26]
 8012b50:	8bbb      	ldrh	r3, [r7, #28]
 8012b52:	4293      	cmp	r3, r2
 8012b54:	bf28      	it	cs
 8012b56:	4613      	movcs	r3, r2
 8012b58:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012b5a:	797b      	ldrb	r3, [r7, #5]
 8012b5c:	f003 0301 	and.w	r3, r3, #1
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d036      	beq.n	8012bd2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012b64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	8b3b      	ldrh	r3, [r7, #24]
 8012b6c:	4413      	add	r3, r2
 8012b6e:	b299      	uxth	r1, r3
 8012b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	bf0c      	ite	eq
 8012b76:	2301      	moveq	r3, #1
 8012b78:	2300      	movne	r3, #0
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	f107 0012 	add.w	r0, r7, #18
 8012b80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b82:	9302      	str	r3, [sp, #8]
 8012b84:	797b      	ldrb	r3, [r7, #5]
 8012b86:	9301      	str	r3, [sp, #4]
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	9300      	str	r3, [sp, #0]
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	2036      	movs	r0, #54	; 0x36
 8012b90:	f7ff fd5e 	bl	8012650 <tcp_pbuf_prealloc>
 8012b94:	6338      	str	r0, [r7, #48]	; 0x30
 8012b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	f000 8178 	beq.w	8012e8e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba0:	895b      	ldrh	r3, [r3, #10]
 8012ba2:	8b3a      	ldrh	r2, [r7, #24]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d906      	bls.n	8012bb6 <tcp_write+0x37e>
 8012ba8:	4b8c      	ldr	r3, [pc, #560]	; (8012ddc <tcp_write+0x5a4>)
 8012baa:	f240 2266 	movw	r2, #614	; 0x266
 8012bae:	498c      	ldr	r1, [pc, #560]	; (8012de0 <tcp_write+0x5a8>)
 8012bb0:	488c      	ldr	r0, [pc, #560]	; (8012de4 <tcp_write+0x5ac>)
 8012bb2:	f004 f9cb 	bl	8016f4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb8:	685a      	ldr	r2, [r3, #4]
 8012bba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012bbe:	18d0      	adds	r0, r2, r3
 8012bc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bc4:	68ba      	ldr	r2, [r7, #8]
 8012bc6:	4413      	add	r3, r2
 8012bc8:	8b3a      	ldrh	r2, [r7, #24]
 8012bca:	4619      	mov	r1, r3
 8012bcc:	f004 f98e 	bl	8016eec <memcpy>
 8012bd0:	e02f      	b.n	8012c32 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012bd2:	8a7b      	ldrh	r3, [r7, #18]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d006      	beq.n	8012be6 <tcp_write+0x3ae>
 8012bd8:	4b80      	ldr	r3, [pc, #512]	; (8012ddc <tcp_write+0x5a4>)
 8012bda:	f240 2271 	movw	r2, #625	; 0x271
 8012bde:	4982      	ldr	r1, [pc, #520]	; (8012de8 <tcp_write+0x5b0>)
 8012be0:	4880      	ldr	r0, [pc, #512]	; (8012de4 <tcp_write+0x5ac>)
 8012be2:	f004 f9b3 	bl	8016f4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012be6:	8b3b      	ldrh	r3, [r7, #24]
 8012be8:	2201      	movs	r2, #1
 8012bea:	4619      	mov	r1, r3
 8012bec:	2036      	movs	r0, #54	; 0x36
 8012bee:	f7fa fdbb 	bl	800d768 <pbuf_alloc>
 8012bf2:	6178      	str	r0, [r7, #20]
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	f000 814b 	beq.w	8012e92 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012bfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c00:	68ba      	ldr	r2, [r7, #8]
 8012c02:	441a      	add	r2, r3
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012c08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c0c:	b29b      	uxth	r3, r3
 8012c0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c12:	4619      	mov	r1, r3
 8012c14:	2036      	movs	r0, #54	; 0x36
 8012c16:	f7fa fda7 	bl	800d768 <pbuf_alloc>
 8012c1a:	6338      	str	r0, [r7, #48]	; 0x30
 8012c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d103      	bne.n	8012c2a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012c22:	6978      	ldr	r0, [r7, #20]
 8012c24:	f7fb f884 	bl	800dd30 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012c28:	e136      	b.n	8012e98 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012c2a:	6979      	ldr	r1, [r7, #20]
 8012c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c2e:	f7fb f941 	bl	800deb4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c34:	f7fb f904 	bl	800de40 <pbuf_clen>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c40:	4413      	add	r3, r2
 8012c42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012c46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c4a:	2b09      	cmp	r3, #9
 8012c4c:	d903      	bls.n	8012c56 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012c4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c50:	f7fb f86e 	bl	800dd30 <pbuf_free>
      goto memerr;
 8012c54:	e120      	b.n	8012e98 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012c5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c5e:	441a      	add	r2, r3
 8012c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c64:	9300      	str	r3, [sp, #0]
 8012c66:	4613      	mov	r3, r2
 8012c68:	2200      	movs	r2, #0
 8012c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012c6c:	68f8      	ldr	r0, [r7, #12]
 8012c6e:	f7ff fc51 	bl	8012514 <tcp_create_segment>
 8012c72:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	f000 810d 	beq.w	8012e96 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d102      	bne.n	8012c88 <tcp_write+0x450>
      queue = seg;
 8012c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c84:	647b      	str	r3, [r7, #68]	; 0x44
 8012c86:	e00c      	b.n	8012ca2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d106      	bne.n	8012c9c <tcp_write+0x464>
 8012c8e:	4b53      	ldr	r3, [pc, #332]	; (8012ddc <tcp_write+0x5a4>)
 8012c90:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012c94:	4955      	ldr	r1, [pc, #340]	; (8012dec <tcp_write+0x5b4>)
 8012c96:	4853      	ldr	r0, [pc, #332]	; (8012de4 <tcp_write+0x5ac>)
 8012c98:	f004 f958 	bl	8016f4c <iprintf>
      prev_seg->next = seg;
 8012c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ca0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ca4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012ca6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012caa:	8b3b      	ldrh	r3, [r7, #24]
 8012cac:	4413      	add	r3, r2
 8012cae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012cb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012cb6:	88fb      	ldrh	r3, [r7, #6]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	f4ff af3d 	bcc.w	8012b38 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012cbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d02c      	beq.n	8012d1e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012cca:	e01e      	b.n	8012d0a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cce:	891a      	ldrh	r2, [r3, #8]
 8012cd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012cd2:	4413      	add	r3, r2
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d110      	bne.n	8012d04 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce4:	685b      	ldr	r3, [r3, #4]
 8012ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ce8:	8952      	ldrh	r2, [r2, #10]
 8012cea:	4413      	add	r3, r2
 8012cec:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012cee:	68b9      	ldr	r1, [r7, #8]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f004 f8fb 	bl	8016eec <memcpy>
        p->len += oversize_used;
 8012cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf8:	895a      	ldrh	r2, [r3, #10]
 8012cfa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012cfc:	4413      	add	r3, r2
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d02:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d1dd      	bne.n	8012ccc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d12:	891a      	ldrh	r2, [r3, #8]
 8012d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d16:	4413      	add	r3, r2
 8012d18:	b29a      	uxth	r2, r3
 8012d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d1c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012d1e:	8a7a      	ldrh	r2, [r7, #18]
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d018      	beq.n	8012d5e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d106      	bne.n	8012d40 <tcp_write+0x508>
 8012d32:	4b2a      	ldr	r3, [pc, #168]	; (8012ddc <tcp_write+0x5a4>)
 8012d34:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012d38:	492d      	ldr	r1, [pc, #180]	; (8012df0 <tcp_write+0x5b8>)
 8012d3a:	482a      	ldr	r0, [pc, #168]	; (8012de4 <tcp_write+0x5ac>)
 8012d3c:	f004 f906 	bl	8016f4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7fb f8b4 	bl	800deb4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d4e:	891a      	ldrh	r2, [r3, #8]
 8012d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d52:	891b      	ldrh	r3, [r3, #8]
 8012d54:	4413      	add	r3, r2
 8012d56:	b29a      	uxth	r2, r3
 8012d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d5a:	811a      	strh	r2, [r3, #8]
 8012d5c:	e037      	b.n	8012dce <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012d5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d034      	beq.n	8012dce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d003      	beq.n	8012d72 <tcp_write+0x53a>
 8012d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d6c:	685b      	ldr	r3, [r3, #4]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d106      	bne.n	8012d80 <tcp_write+0x548>
 8012d72:	4b1a      	ldr	r3, [pc, #104]	; (8012ddc <tcp_write+0x5a4>)
 8012d74:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012d78:	491e      	ldr	r1, [pc, #120]	; (8012df4 <tcp_write+0x5bc>)
 8012d7a:	481a      	ldr	r0, [pc, #104]	; (8012de4 <tcp_write+0x5ac>)
 8012d7c:	f004 f8e6 	bl	8016f4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d86:	e009      	b.n	8012d9c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d8a:	891a      	ldrh	r2, [r3, #8]
 8012d8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d8e:	4413      	add	r3, r2
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d94:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1f1      	bne.n	8012d88 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da6:	891a      	ldrh	r2, [r3, #8]
 8012da8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012daa:	4413      	add	r3, r2
 8012dac:	b29a      	uxth	r2, r3
 8012dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db4:	895a      	ldrh	r2, [r3, #10]
 8012db6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012db8:	4413      	add	r3, r2
 8012dba:	b29a      	uxth	r2, r3
 8012dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dbe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dc2:	891a      	ldrh	r2, [r3, #8]
 8012dc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012dc6:	4413      	add	r3, r2
 8012dc8:	b29a      	uxth	r2, r3
 8012dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dcc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d111      	bne.n	8012df8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012dd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8012dda:	e010      	b.n	8012dfe <tcp_write+0x5c6>
 8012ddc:	0801ae80 	.word	0x0801ae80
 8012de0:	0801b120 	.word	0x0801b120
 8012de4:	0801aed4 	.word	0x0801aed4
 8012de8:	0801b160 	.word	0x0801b160
 8012dec:	0801b170 	.word	0x0801b170
 8012df0:	0801b184 	.word	0x0801b184
 8012df4:	0801b1bc 	.word	0x0801b1bc
  } else {
    last_unsent->next = queue;
 8012df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012dfc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012e02:	88fb      	ldrh	r3, [r7, #6]
 8012e04:	441a      	add	r2, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012e10:	88fb      	ldrh	r3, [r7, #6]
 8012e12:	1ad3      	subs	r3, r2, r3
 8012e14:	b29a      	uxth	r2, r3
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012e22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d00e      	beq.n	8012e4e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d10a      	bne.n	8012e4e <tcp_write+0x616>
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d106      	bne.n	8012e4e <tcp_write+0x616>
 8012e40:	4b2c      	ldr	r3, [pc, #176]	; (8012ef4 <tcp_write+0x6bc>)
 8012e42:	f240 3212 	movw	r2, #786	; 0x312
 8012e46:	492c      	ldr	r1, [pc, #176]	; (8012ef8 <tcp_write+0x6c0>)
 8012e48:	482c      	ldr	r0, [pc, #176]	; (8012efc <tcp_write+0x6c4>)
 8012e4a:	f004 f87f 	bl	8016f4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d016      	beq.n	8012e82 <tcp_write+0x64a>
 8012e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e56:	68db      	ldr	r3, [r3, #12]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d012      	beq.n	8012e82 <tcp_write+0x64a>
 8012e5c:	797b      	ldrb	r3, [r7, #5]
 8012e5e:	f003 0302 	and.w	r3, r3, #2
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d10d      	bne.n	8012e82 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e68:	68db      	ldr	r3, [r3, #12]
 8012e6a:	899b      	ldrh	r3, [r3, #12]
 8012e6c:	b29c      	uxth	r4, r3
 8012e6e:	2008      	movs	r0, #8
 8012e70:	f7f9 fbcc 	bl	800c60c <lwip_htons>
 8012e74:	4603      	mov	r3, r0
 8012e76:	461a      	mov	r2, r3
 8012e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	4322      	orrs	r2, r4
 8012e7e:	b292      	uxth	r2, r2
 8012e80:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012e82:	2300      	movs	r3, #0
 8012e84:	e031      	b.n	8012eea <tcp_write+0x6b2>
          goto memerr;
 8012e86:	bf00      	nop
 8012e88:	e006      	b.n	8012e98 <tcp_write+0x660>
            goto memerr;
 8012e8a:	bf00      	nop
 8012e8c:	e004      	b.n	8012e98 <tcp_write+0x660>
        goto memerr;
 8012e8e:	bf00      	nop
 8012e90:	e002      	b.n	8012e98 <tcp_write+0x660>
        goto memerr;
 8012e92:	bf00      	nop
 8012e94:	e000      	b.n	8012e98 <tcp_write+0x660>
      goto memerr;
 8012e96:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	8b5b      	ldrh	r3, [r3, #26]
 8012e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ea0:	b29a      	uxth	r2, r3
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d002      	beq.n	8012eb2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012eac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012eae:	f7fa ff3f 	bl	800dd30 <pbuf_free>
  }
  if (queue != NULL) {
 8012eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d002      	beq.n	8012ebe <tcp_write+0x686>
    tcp_segs_free(queue);
 8012eb8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012eba:	f7fc fb51 	bl	800f560 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d00e      	beq.n	8012ee6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d10a      	bne.n	8012ee6 <tcp_write+0x6ae>
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d106      	bne.n	8012ee6 <tcp_write+0x6ae>
 8012ed8:	4b06      	ldr	r3, [pc, #24]	; (8012ef4 <tcp_write+0x6bc>)
 8012eda:	f240 3227 	movw	r2, #807	; 0x327
 8012ede:	4906      	ldr	r1, [pc, #24]	; (8012ef8 <tcp_write+0x6c0>)
 8012ee0:	4806      	ldr	r0, [pc, #24]	; (8012efc <tcp_write+0x6c4>)
 8012ee2:	f004 f833 	bl	8016f4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	375c      	adds	r7, #92	; 0x5c
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd90      	pop	{r4, r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	0801ae80 	.word	0x0801ae80
 8012ef8:	0801b1f4 	.word	0x0801b1f4
 8012efc:	0801aed4 	.word	0x0801aed4

08012f00 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012f00:	b590      	push	{r4, r7, lr}
 8012f02:	b08b      	sub	sp, #44	; 0x2c
 8012f04:	af02      	add	r7, sp, #8
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	460b      	mov	r3, r1
 8012f0a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	61fb      	str	r3, [r7, #28]
 8012f10:	2300      	movs	r3, #0
 8012f12:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012f14:	2300      	movs	r3, #0
 8012f16:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d106      	bne.n	8012f2c <tcp_split_unsent_seg+0x2c>
 8012f1e:	4b95      	ldr	r3, [pc, #596]	; (8013174 <tcp_split_unsent_seg+0x274>)
 8012f20:	f240 324b 	movw	r2, #843	; 0x34b
 8012f24:	4994      	ldr	r1, [pc, #592]	; (8013178 <tcp_split_unsent_seg+0x278>)
 8012f26:	4895      	ldr	r0, [pc, #596]	; (801317c <tcp_split_unsent_seg+0x27c>)
 8012f28:	f004 f810 	bl	8016f4c <iprintf>

  useg = pcb->unsent;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f30:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d102      	bne.n	8012f3e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f3c:	e116      	b.n	801316c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012f3e:	887b      	ldrh	r3, [r7, #2]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d109      	bne.n	8012f58 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012f44:	4b8b      	ldr	r3, [pc, #556]	; (8013174 <tcp_split_unsent_seg+0x274>)
 8012f46:	f240 3253 	movw	r2, #851	; 0x353
 8012f4a:	498d      	ldr	r1, [pc, #564]	; (8013180 <tcp_split_unsent_seg+0x280>)
 8012f4c:	488b      	ldr	r0, [pc, #556]	; (801317c <tcp_split_unsent_seg+0x27c>)
 8012f4e:	f003 fffd 	bl	8016f4c <iprintf>
    return ERR_VAL;
 8012f52:	f06f 0305 	mvn.w	r3, #5
 8012f56:	e109      	b.n	801316c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	891b      	ldrh	r3, [r3, #8]
 8012f5c:	887a      	ldrh	r2, [r7, #2]
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d301      	bcc.n	8012f66 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012f62:	2300      	movs	r3, #0
 8012f64:	e102      	b.n	801316c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f6a:	887a      	ldrh	r2, [r7, #2]
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d906      	bls.n	8012f7e <tcp_split_unsent_seg+0x7e>
 8012f70:	4b80      	ldr	r3, [pc, #512]	; (8013174 <tcp_split_unsent_seg+0x274>)
 8012f72:	f240 325b 	movw	r2, #859	; 0x35b
 8012f76:	4983      	ldr	r1, [pc, #524]	; (8013184 <tcp_split_unsent_seg+0x284>)
 8012f78:	4880      	ldr	r0, [pc, #512]	; (801317c <tcp_split_unsent_seg+0x27c>)
 8012f7a:	f003 ffe7 	bl	8016f4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	891b      	ldrh	r3, [r3, #8]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d106      	bne.n	8012f94 <tcp_split_unsent_seg+0x94>
 8012f86:	4b7b      	ldr	r3, [pc, #492]	; (8013174 <tcp_split_unsent_seg+0x274>)
 8012f88:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012f8c:	497e      	ldr	r1, [pc, #504]	; (8013188 <tcp_split_unsent_seg+0x288>)
 8012f8e:	487b      	ldr	r0, [pc, #492]	; (801317c <tcp_split_unsent_seg+0x27c>)
 8012f90:	f003 ffdc 	bl	8016f4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	7a9b      	ldrb	r3, [r3, #10]
 8012f98:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012f9a:	7bfb      	ldrb	r3, [r7, #15]
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	f003 0304 	and.w	r3, r3, #4
 8012fa4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	891a      	ldrh	r2, [r3, #8]
 8012faa:	887b      	ldrh	r3, [r7, #2]
 8012fac:	1ad3      	subs	r3, r2, r3
 8012fae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012fb0:	7bbb      	ldrb	r3, [r7, #14]
 8012fb2:	b29a      	uxth	r2, r3
 8012fb4:	89bb      	ldrh	r3, [r7, #12]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	2036      	movs	r0, #54	; 0x36
 8012fc2:	f7fa fbd1 	bl	800d768 <pbuf_alloc>
 8012fc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	f000 80b7 	beq.w	801313e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	891a      	ldrh	r2, [r3, #8]
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	891b      	ldrh	r3, [r3, #8]
 8012fda:	1ad3      	subs	r3, r2, r3
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	887b      	ldrh	r3, [r7, #2]
 8012fe0:	4413      	add	r3, r2
 8012fe2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	6858      	ldr	r0, [r3, #4]
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	685a      	ldr	r2, [r3, #4]
 8012fec:	7bbb      	ldrb	r3, [r7, #14]
 8012fee:	18d1      	adds	r1, r2, r3
 8012ff0:	897b      	ldrh	r3, [r7, #10]
 8012ff2:	89ba      	ldrh	r2, [r7, #12]
 8012ff4:	f7fb f886 	bl	800e104 <pbuf_copy_partial>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	89bb      	ldrh	r3, [r7, #12]
 8012ffe:	4293      	cmp	r3, r2
 8013000:	f040 809f 	bne.w	8013142 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	68db      	ldr	r3, [r3, #12]
 8013008:	899b      	ldrh	r3, [r3, #12]
 801300a:	b29b      	uxth	r3, r3
 801300c:	4618      	mov	r0, r3
 801300e:	f7f9 fafd 	bl	800c60c <lwip_htons>
 8013012:	4603      	mov	r3, r0
 8013014:	b2db      	uxtb	r3, r3
 8013016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801301a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801301c:	2300      	movs	r3, #0
 801301e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013020:	7efb      	ldrb	r3, [r7, #27]
 8013022:	f003 0308 	and.w	r3, r3, #8
 8013026:	2b00      	cmp	r3, #0
 8013028:	d007      	beq.n	801303a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801302a:	7efb      	ldrb	r3, [r7, #27]
 801302c:	f023 0308 	bic.w	r3, r3, #8
 8013030:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013032:	7ebb      	ldrb	r3, [r7, #26]
 8013034:	f043 0308 	orr.w	r3, r3, #8
 8013038:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801303a:	7efb      	ldrb	r3, [r7, #27]
 801303c:	f003 0301 	and.w	r3, r3, #1
 8013040:	2b00      	cmp	r3, #0
 8013042:	d007      	beq.n	8013054 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013044:	7efb      	ldrb	r3, [r7, #27]
 8013046:	f023 0301 	bic.w	r3, r3, #1
 801304a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801304c:	7ebb      	ldrb	r3, [r7, #26]
 801304e:	f043 0301 	orr.w	r3, r3, #1
 8013052:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	4618      	mov	r0, r3
 801305c:	f7f9 faeb 	bl	800c636 <lwip_htonl>
 8013060:	4602      	mov	r2, r0
 8013062:	887b      	ldrh	r3, [r7, #2]
 8013064:	18d1      	adds	r1, r2, r3
 8013066:	7eba      	ldrb	r2, [r7, #26]
 8013068:	7bfb      	ldrb	r3, [r7, #15]
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	460b      	mov	r3, r1
 801306e:	6939      	ldr	r1, [r7, #16]
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f7ff fa4f 	bl	8012514 <tcp_create_segment>
 8013076:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d063      	beq.n	8013146 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	4618      	mov	r0, r3
 8013084:	f7fa fedc 	bl	800de40 <pbuf_clen>
 8013088:	4603      	mov	r3, r0
 801308a:	461a      	mov	r2, r3
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013092:	1a9b      	subs	r3, r3, r2
 8013094:	b29a      	uxth	r2, r3
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	6858      	ldr	r0, [r3, #4]
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	891a      	ldrh	r2, [r3, #8]
 80130a6:	89bb      	ldrh	r3, [r7, #12]
 80130a8:	1ad3      	subs	r3, r2, r3
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	4619      	mov	r1, r3
 80130ae:	f7fa fcb9 	bl	800da24 <pbuf_realloc>
  useg->len -= remainder;
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	891a      	ldrh	r2, [r3, #8]
 80130b6:	89bb      	ldrh	r3, [r7, #12]
 80130b8:	1ad3      	subs	r3, r2, r3
 80130ba:	b29a      	uxth	r2, r3
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	899b      	ldrh	r3, [r3, #12]
 80130c6:	b29c      	uxth	r4, r3
 80130c8:	7efb      	ldrb	r3, [r7, #27]
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7f9 fa9d 	bl	800c60c <lwip_htons>
 80130d2:	4603      	mov	r3, r0
 80130d4:	461a      	mov	r2, r3
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	4322      	orrs	r2, r4
 80130dc:	b292      	uxth	r2, r2
 80130de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7fa feab 	bl	800de40 <pbuf_clen>
 80130ea:	4603      	mov	r3, r0
 80130ec:	461a      	mov	r2, r3
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130f4:	4413      	add	r3, r2
 80130f6:	b29a      	uxth	r2, r3
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80130fe:	69fb      	ldr	r3, [r7, #28]
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	4618      	mov	r0, r3
 8013104:	f7fa fe9c 	bl	800de40 <pbuf_clen>
 8013108:	4603      	mov	r3, r0
 801310a:	461a      	mov	r2, r3
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013112:	4413      	add	r3, r2
 8013114:	b29a      	uxth	r2, r3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	69fa      	ldr	r2, [r7, #28]
 8013128:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d103      	bne.n	801313a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801313a:	2300      	movs	r3, #0
 801313c:	e016      	b.n	801316c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801313e:	bf00      	nop
 8013140:	e002      	b.n	8013148 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013142:	bf00      	nop
 8013144:	e000      	b.n	8013148 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013146:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013148:	69fb      	ldr	r3, [r7, #28]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d006      	beq.n	801315c <tcp_split_unsent_seg+0x25c>
 801314e:	4b09      	ldr	r3, [pc, #36]	; (8013174 <tcp_split_unsent_seg+0x274>)
 8013150:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013154:	490d      	ldr	r1, [pc, #52]	; (801318c <tcp_split_unsent_seg+0x28c>)
 8013156:	4809      	ldr	r0, [pc, #36]	; (801317c <tcp_split_unsent_seg+0x27c>)
 8013158:	f003 fef8 	bl	8016f4c <iprintf>
  if (p != NULL) {
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d002      	beq.n	8013168 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013162:	6938      	ldr	r0, [r7, #16]
 8013164:	f7fa fde4 	bl	800dd30 <pbuf_free>
  }

  return ERR_MEM;
 8013168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801316c:	4618      	mov	r0, r3
 801316e:	3724      	adds	r7, #36	; 0x24
 8013170:	46bd      	mov	sp, r7
 8013172:	bd90      	pop	{r4, r7, pc}
 8013174:	0801ae80 	.word	0x0801ae80
 8013178:	0801b214 	.word	0x0801b214
 801317c:	0801aed4 	.word	0x0801aed4
 8013180:	0801b238 	.word	0x0801b238
 8013184:	0801b25c 	.word	0x0801b25c
 8013188:	0801b26c 	.word	0x0801b26c
 801318c:	0801b27c 	.word	0x0801b27c

08013190 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013190:	b590      	push	{r4, r7, lr}
 8013192:	b085      	sub	sp, #20
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d106      	bne.n	80131ac <tcp_send_fin+0x1c>
 801319e:	4b21      	ldr	r3, [pc, #132]	; (8013224 <tcp_send_fin+0x94>)
 80131a0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80131a4:	4920      	ldr	r1, [pc, #128]	; (8013228 <tcp_send_fin+0x98>)
 80131a6:	4821      	ldr	r0, [pc, #132]	; (801322c <tcp_send_fin+0x9c>)
 80131a8:	f003 fed0 	bl	8016f4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d02e      	beq.n	8013212 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131b8:	60fb      	str	r3, [r7, #12]
 80131ba:	e002      	b.n	80131c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1f8      	bne.n	80131bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	68db      	ldr	r3, [r3, #12]
 80131ce:	899b      	ldrh	r3, [r3, #12]
 80131d0:	b29b      	uxth	r3, r3
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7f9 fa1a 	bl	800c60c <lwip_htons>
 80131d8:	4603      	mov	r3, r0
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	f003 0307 	and.w	r3, r3, #7
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d116      	bne.n	8013212 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	899b      	ldrh	r3, [r3, #12]
 80131ea:	b29c      	uxth	r4, r3
 80131ec:	2001      	movs	r0, #1
 80131ee:	f7f9 fa0d 	bl	800c60c <lwip_htons>
 80131f2:	4603      	mov	r3, r0
 80131f4:	461a      	mov	r2, r3
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	68db      	ldr	r3, [r3, #12]
 80131fa:	4322      	orrs	r2, r4
 80131fc:	b292      	uxth	r2, r2
 80131fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	8b5b      	ldrh	r3, [r3, #26]
 8013204:	f043 0320 	orr.w	r3, r3, #32
 8013208:	b29a      	uxth	r2, r3
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801320e:	2300      	movs	r3, #0
 8013210:	e004      	b.n	801321c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013212:	2101      	movs	r1, #1
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f000 f80b 	bl	8013230 <tcp_enqueue_flags>
 801321a:	4603      	mov	r3, r0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3714      	adds	r7, #20
 8013220:	46bd      	mov	sp, r7
 8013222:	bd90      	pop	{r4, r7, pc}
 8013224:	0801ae80 	.word	0x0801ae80
 8013228:	0801b288 	.word	0x0801b288
 801322c:	0801aed4 	.word	0x0801aed4

08013230 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b08a      	sub	sp, #40	; 0x28
 8013234:	af02      	add	r7, sp, #8
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	460b      	mov	r3, r1
 801323a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801323c:	2300      	movs	r3, #0
 801323e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013240:	2300      	movs	r3, #0
 8013242:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013244:	78fb      	ldrb	r3, [r7, #3]
 8013246:	f003 0303 	and.w	r3, r3, #3
 801324a:	2b00      	cmp	r3, #0
 801324c:	d106      	bne.n	801325c <tcp_enqueue_flags+0x2c>
 801324e:	4b67      	ldr	r3, [pc, #412]	; (80133ec <tcp_enqueue_flags+0x1bc>)
 8013250:	f240 4211 	movw	r2, #1041	; 0x411
 8013254:	4966      	ldr	r1, [pc, #408]	; (80133f0 <tcp_enqueue_flags+0x1c0>)
 8013256:	4867      	ldr	r0, [pc, #412]	; (80133f4 <tcp_enqueue_flags+0x1c4>)
 8013258:	f003 fe78 	bl	8016f4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d106      	bne.n	8013270 <tcp_enqueue_flags+0x40>
 8013262:	4b62      	ldr	r3, [pc, #392]	; (80133ec <tcp_enqueue_flags+0x1bc>)
 8013264:	f240 4213 	movw	r2, #1043	; 0x413
 8013268:	4963      	ldr	r1, [pc, #396]	; (80133f8 <tcp_enqueue_flags+0x1c8>)
 801326a:	4862      	ldr	r0, [pc, #392]	; (80133f4 <tcp_enqueue_flags+0x1c4>)
 801326c:	f003 fe6e 	bl	8016f4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013270:	78fb      	ldrb	r3, [r7, #3]
 8013272:	f003 0302 	and.w	r3, r3, #2
 8013276:	2b00      	cmp	r3, #0
 8013278:	d001      	beq.n	801327e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801327a:	2301      	movs	r3, #1
 801327c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801327e:	7ffb      	ldrb	r3, [r7, #31]
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	b2db      	uxtb	r3, r3
 8013284:	f003 0304 	and.w	r3, r3, #4
 8013288:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801328a:	7dfb      	ldrb	r3, [r7, #23]
 801328c:	b29b      	uxth	r3, r3
 801328e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013292:	4619      	mov	r1, r3
 8013294:	2036      	movs	r0, #54	; 0x36
 8013296:	f7fa fa67 	bl	800d768 <pbuf_alloc>
 801329a:	6138      	str	r0, [r7, #16]
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d109      	bne.n	80132b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	8b5b      	ldrh	r3, [r3, #26]
 80132a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80132b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132b4:	e095      	b.n	80133e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	895a      	ldrh	r2, [r3, #10]
 80132ba:	7dfb      	ldrb	r3, [r7, #23]
 80132bc:	b29b      	uxth	r3, r3
 80132be:	429a      	cmp	r2, r3
 80132c0:	d206      	bcs.n	80132d0 <tcp_enqueue_flags+0xa0>
 80132c2:	4b4a      	ldr	r3, [pc, #296]	; (80133ec <tcp_enqueue_flags+0x1bc>)
 80132c4:	f240 4239 	movw	r2, #1081	; 0x439
 80132c8:	494c      	ldr	r1, [pc, #304]	; (80133fc <tcp_enqueue_flags+0x1cc>)
 80132ca:	484a      	ldr	r0, [pc, #296]	; (80133f4 <tcp_enqueue_flags+0x1c4>)
 80132cc:	f003 fe3e 	bl	8016f4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80132d4:	78fa      	ldrb	r2, [r7, #3]
 80132d6:	7ffb      	ldrb	r3, [r7, #31]
 80132d8:	9300      	str	r3, [sp, #0]
 80132da:	460b      	mov	r3, r1
 80132dc:	6939      	ldr	r1, [r7, #16]
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f7ff f918 	bl	8012514 <tcp_create_segment>
 80132e4:	60f8      	str	r0, [r7, #12]
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d109      	bne.n	8013300 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	8b5b      	ldrh	r3, [r3, #26]
 80132f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132f4:	b29a      	uxth	r2, r3
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80132fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132fe:	e070      	b.n	80133e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	68db      	ldr	r3, [r3, #12]
 8013304:	f003 0303 	and.w	r3, r3, #3
 8013308:	2b00      	cmp	r3, #0
 801330a:	d006      	beq.n	801331a <tcp_enqueue_flags+0xea>
 801330c:	4b37      	ldr	r3, [pc, #220]	; (80133ec <tcp_enqueue_flags+0x1bc>)
 801330e:	f240 4242 	movw	r2, #1090	; 0x442
 8013312:	493b      	ldr	r1, [pc, #236]	; (8013400 <tcp_enqueue_flags+0x1d0>)
 8013314:	4837      	ldr	r0, [pc, #220]	; (80133f4 <tcp_enqueue_flags+0x1c4>)
 8013316:	f003 fe19 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	891b      	ldrh	r3, [r3, #8]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d006      	beq.n	8013330 <tcp_enqueue_flags+0x100>
 8013322:	4b32      	ldr	r3, [pc, #200]	; (80133ec <tcp_enqueue_flags+0x1bc>)
 8013324:	f240 4243 	movw	r2, #1091	; 0x443
 8013328:	4936      	ldr	r1, [pc, #216]	; (8013404 <tcp_enqueue_flags+0x1d4>)
 801332a:	4832      	ldr	r0, [pc, #200]	; (80133f4 <tcp_enqueue_flags+0x1c4>)
 801332c:	f003 fe0e 	bl	8016f4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013334:	2b00      	cmp	r3, #0
 8013336:	d103      	bne.n	8013340 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	66da      	str	r2, [r3, #108]	; 0x6c
 801333e:	e00d      	b.n	801335c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013344:	61bb      	str	r3, [r7, #24]
 8013346:	e002      	b.n	801334e <tcp_enqueue_flags+0x11e>
 8013348:	69bb      	ldr	r3, [r7, #24]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	61bb      	str	r3, [r7, #24]
 801334e:	69bb      	ldr	r3, [r7, #24]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d1f8      	bne.n	8013348 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013356:	69bb      	ldr	r3, [r7, #24]
 8013358:	68fa      	ldr	r2, [r7, #12]
 801335a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2200      	movs	r2, #0
 8013360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013364:	78fb      	ldrb	r3, [r7, #3]
 8013366:	f003 0302 	and.w	r3, r3, #2
 801336a:	2b00      	cmp	r3, #0
 801336c:	d104      	bne.n	8013378 <tcp_enqueue_flags+0x148>
 801336e:	78fb      	ldrb	r3, [r7, #3]
 8013370:	f003 0301 	and.w	r3, r3, #1
 8013374:	2b00      	cmp	r3, #0
 8013376:	d004      	beq.n	8013382 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801337c:	1c5a      	adds	r2, r3, #1
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013382:	78fb      	ldrb	r3, [r7, #3]
 8013384:	f003 0301 	and.w	r3, r3, #1
 8013388:	2b00      	cmp	r3, #0
 801338a:	d006      	beq.n	801339a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	8b5b      	ldrh	r3, [r3, #26]
 8013390:	f043 0320 	orr.w	r3, r3, #32
 8013394:	b29a      	uxth	r2, r3
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	4618      	mov	r0, r3
 80133a0:	f7fa fd4e 	bl	800de40 <pbuf_clen>
 80133a4:	4603      	mov	r3, r0
 80133a6:	461a      	mov	r2, r3
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133ae:	4413      	add	r3, r2
 80133b0:	b29a      	uxth	r2, r3
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d00e      	beq.n	80133e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d10a      	bne.n	80133e0 <tcp_enqueue_flags+0x1b0>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d106      	bne.n	80133e0 <tcp_enqueue_flags+0x1b0>
 80133d2:	4b06      	ldr	r3, [pc, #24]	; (80133ec <tcp_enqueue_flags+0x1bc>)
 80133d4:	f240 4265 	movw	r2, #1125	; 0x465
 80133d8:	490b      	ldr	r1, [pc, #44]	; (8013408 <tcp_enqueue_flags+0x1d8>)
 80133da:	4806      	ldr	r0, [pc, #24]	; (80133f4 <tcp_enqueue_flags+0x1c4>)
 80133dc:	f003 fdb6 	bl	8016f4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80133e0:	2300      	movs	r3, #0
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	3720      	adds	r7, #32
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}
 80133ea:	bf00      	nop
 80133ec:	0801ae80 	.word	0x0801ae80
 80133f0:	0801b2a4 	.word	0x0801b2a4
 80133f4:	0801aed4 	.word	0x0801aed4
 80133f8:	0801b2fc 	.word	0x0801b2fc
 80133fc:	0801b31c 	.word	0x0801b31c
 8013400:	0801b358 	.word	0x0801b358
 8013404:	0801b370 	.word	0x0801b370
 8013408:	0801b39c 	.word	0x0801b39c

0801340c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801340c:	b5b0      	push	{r4, r5, r7, lr}
 801340e:	b08a      	sub	sp, #40	; 0x28
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d106      	bne.n	8013428 <tcp_output+0x1c>
 801341a:	4b9e      	ldr	r3, [pc, #632]	; (8013694 <tcp_output+0x288>)
 801341c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013420:	499d      	ldr	r1, [pc, #628]	; (8013698 <tcp_output+0x28c>)
 8013422:	489e      	ldr	r0, [pc, #632]	; (801369c <tcp_output+0x290>)
 8013424:	f003 fd92 	bl	8016f4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	7d1b      	ldrb	r3, [r3, #20]
 801342c:	2b01      	cmp	r3, #1
 801342e:	d106      	bne.n	801343e <tcp_output+0x32>
 8013430:	4b98      	ldr	r3, [pc, #608]	; (8013694 <tcp_output+0x288>)
 8013432:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013436:	499a      	ldr	r1, [pc, #616]	; (80136a0 <tcp_output+0x294>)
 8013438:	4898      	ldr	r0, [pc, #608]	; (801369c <tcp_output+0x290>)
 801343a:	f003 fd87 	bl	8016f4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801343e:	4b99      	ldr	r3, [pc, #612]	; (80136a4 <tcp_output+0x298>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	687a      	ldr	r2, [r7, #4]
 8013444:	429a      	cmp	r2, r3
 8013446:	d101      	bne.n	801344c <tcp_output+0x40>
    return ERR_OK;
 8013448:	2300      	movs	r3, #0
 801344a:	e1ce      	b.n	80137ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013458:	4293      	cmp	r3, r2
 801345a:	bf28      	it	cs
 801345c:	4613      	movcs	r3, r2
 801345e:	b29b      	uxth	r3, r3
 8013460:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013466:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346a:	2b00      	cmp	r3, #0
 801346c:	d10b      	bne.n	8013486 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	8b5b      	ldrh	r3, [r3, #26]
 8013472:	f003 0302 	and.w	r3, r3, #2
 8013476:	2b00      	cmp	r3, #0
 8013478:	f000 81aa 	beq.w	80137d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f000 fdcb 	bl	8014018 <tcp_send_empty_ack>
 8013482:	4603      	mov	r3, r0
 8013484:	e1b1      	b.n	80137ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013486:	6879      	ldr	r1, [r7, #4]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	3304      	adds	r3, #4
 801348c:	461a      	mov	r2, r3
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f7ff f824 	bl	80124dc <tcp_route>
 8013494:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d102      	bne.n	80134a2 <tcp_output+0x96>
    return ERR_RTE;
 801349c:	f06f 0303 	mvn.w	r3, #3
 80134a0:	e1a3      	b.n	80137ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d003      	beq.n	80134b0 <tcp_output+0xa4>
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d111      	bne.n	80134d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d002      	beq.n	80134bc <tcp_output+0xb0>
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	3304      	adds	r3, #4
 80134ba:	e000      	b.n	80134be <tcp_output+0xb2>
 80134bc:	2300      	movs	r3, #0
 80134be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d102      	bne.n	80134cc <tcp_output+0xc0>
      return ERR_RTE;
 80134c6:	f06f 0303 	mvn.w	r3, #3
 80134ca:	e18e      	b.n	80137ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80134d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	4618      	mov	r0, r3
 80134dc:	f7f9 f8ab 	bl	800c636 <lwip_htonl>
 80134e0:	4602      	mov	r2, r0
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134e6:	1ad3      	subs	r3, r2, r3
 80134e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134ea:	8912      	ldrh	r2, [r2, #8]
 80134ec:	4413      	add	r3, r2
 80134ee:	69ba      	ldr	r2, [r7, #24]
 80134f0:	429a      	cmp	r2, r3
 80134f2:	d227      	bcs.n	8013544 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80134fa:	461a      	mov	r2, r3
 80134fc:	69bb      	ldr	r3, [r7, #24]
 80134fe:	4293      	cmp	r3, r2
 8013500:	d114      	bne.n	801352c <tcp_output+0x120>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013506:	2b00      	cmp	r3, #0
 8013508:	d110      	bne.n	801352c <tcp_output+0x120>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013510:	2b00      	cmp	r3, #0
 8013512:	d10b      	bne.n	801352c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2200      	movs	r2, #0
 8013518:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2201      	movs	r2, #1
 8013520:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2200      	movs	r2, #0
 8013528:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	8b5b      	ldrh	r3, [r3, #26]
 8013530:	f003 0302 	and.w	r3, r3, #2
 8013534:	2b00      	cmp	r3, #0
 8013536:	f000 814d 	beq.w	80137d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 fd6c 	bl	8014018 <tcp_send_empty_ack>
 8013540:	4603      	mov	r3, r0
 8013542:	e152      	b.n	80137ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2200      	movs	r2, #0
 8013548:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013550:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013552:	6a3b      	ldr	r3, [r7, #32]
 8013554:	2b00      	cmp	r3, #0
 8013556:	f000 811c 	beq.w	8013792 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801355a:	e002      	b.n	8013562 <tcp_output+0x156>
 801355c:	6a3b      	ldr	r3, [r7, #32]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	623b      	str	r3, [r7, #32]
 8013562:	6a3b      	ldr	r3, [r7, #32]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d1f8      	bne.n	801355c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801356a:	e112      	b.n	8013792 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356e:	68db      	ldr	r3, [r3, #12]
 8013570:	899b      	ldrh	r3, [r3, #12]
 8013572:	b29b      	uxth	r3, r3
 8013574:	4618      	mov	r0, r3
 8013576:	f7f9 f849 	bl	800c60c <lwip_htons>
 801357a:	4603      	mov	r3, r0
 801357c:	b2db      	uxtb	r3, r3
 801357e:	f003 0304 	and.w	r3, r3, #4
 8013582:	2b00      	cmp	r3, #0
 8013584:	d006      	beq.n	8013594 <tcp_output+0x188>
 8013586:	4b43      	ldr	r3, [pc, #268]	; (8013694 <tcp_output+0x288>)
 8013588:	f240 5236 	movw	r2, #1334	; 0x536
 801358c:	4946      	ldr	r1, [pc, #280]	; (80136a8 <tcp_output+0x29c>)
 801358e:	4843      	ldr	r0, [pc, #268]	; (801369c <tcp_output+0x290>)
 8013590:	f003 fcdc 	bl	8016f4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013598:	2b00      	cmp	r3, #0
 801359a:	d01f      	beq.n	80135dc <tcp_output+0x1d0>
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	8b5b      	ldrh	r3, [r3, #26]
 80135a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d119      	bne.n	80135dc <tcp_output+0x1d0>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d00b      	beq.n	80135c8 <tcp_output+0x1bc>
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d110      	bne.n	80135dc <tcp_output+0x1d0>
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135be:	891a      	ldrh	r2, [r3, #8]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d209      	bcs.n	80135dc <tcp_output+0x1d0>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d004      	beq.n	80135dc <tcp_output+0x1d0>
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135d8:	2b08      	cmp	r3, #8
 80135da:	d901      	bls.n	80135e0 <tcp_output+0x1d4>
 80135dc:	2301      	movs	r3, #1
 80135de:	e000      	b.n	80135e2 <tcp_output+0x1d6>
 80135e0:	2300      	movs	r3, #0
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d106      	bne.n	80135f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	8b5b      	ldrh	r3, [r3, #26]
 80135ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	f000 80e4 	beq.w	80137bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	7d1b      	ldrb	r3, [r3, #20]
 80135f8:	2b02      	cmp	r3, #2
 80135fa:	d00d      	beq.n	8013618 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80135fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	899b      	ldrh	r3, [r3, #12]
 8013602:	b29c      	uxth	r4, r3
 8013604:	2010      	movs	r0, #16
 8013606:	f7f9 f801 	bl	800c60c <lwip_htons>
 801360a:	4603      	mov	r3, r0
 801360c:	461a      	mov	r2, r3
 801360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	4322      	orrs	r2, r4
 8013614:	b292      	uxth	r2, r2
 8013616:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013618:	697a      	ldr	r2, [r7, #20]
 801361a:	6879      	ldr	r1, [r7, #4]
 801361c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801361e:	f000 f909 	bl	8013834 <tcp_output_segment>
 8013622:	4603      	mov	r3, r0
 8013624:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d009      	beq.n	8013642 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	8b5b      	ldrh	r3, [r3, #26]
 8013632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013636:	b29a      	uxth	r2, r3
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	835a      	strh	r2, [r3, #26]
      return err;
 801363c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013640:	e0d3      	b.n	80137ea <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013644:	681a      	ldr	r2, [r3, #0]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	7d1b      	ldrb	r3, [r3, #20]
 801364e:	2b02      	cmp	r3, #2
 8013650:	d006      	beq.n	8013660 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	8b5b      	ldrh	r3, [r3, #26]
 8013656:	f023 0303 	bic.w	r3, r3, #3
 801365a:	b29a      	uxth	r2, r3
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013662:	68db      	ldr	r3, [r3, #12]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	4618      	mov	r0, r3
 8013668:	f7f8 ffe5 	bl	800c636 <lwip_htonl>
 801366c:	4604      	mov	r4, r0
 801366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013670:	891b      	ldrh	r3, [r3, #8]
 8013672:	461d      	mov	r5, r3
 8013674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013676:	68db      	ldr	r3, [r3, #12]
 8013678:	899b      	ldrh	r3, [r3, #12]
 801367a:	b29b      	uxth	r3, r3
 801367c:	4618      	mov	r0, r3
 801367e:	f7f8 ffc5 	bl	800c60c <lwip_htons>
 8013682:	4603      	mov	r3, r0
 8013684:	b2db      	uxtb	r3, r3
 8013686:	f003 0303 	and.w	r3, r3, #3
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00e      	beq.n	80136ac <tcp_output+0x2a0>
 801368e:	2301      	movs	r3, #1
 8013690:	e00d      	b.n	80136ae <tcp_output+0x2a2>
 8013692:	bf00      	nop
 8013694:	0801ae80 	.word	0x0801ae80
 8013698:	0801b3c4 	.word	0x0801b3c4
 801369c:	0801aed4 	.word	0x0801aed4
 80136a0:	0801b3dc 	.word	0x0801b3dc
 80136a4:	200114e0 	.word	0x200114e0
 80136a8:	0801b404 	.word	0x0801b404
 80136ac:	2300      	movs	r3, #0
 80136ae:	442b      	add	r3, r5
 80136b0:	4423      	add	r3, r4
 80136b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	1ad3      	subs	r3, r2, r3
 80136bc:	2b00      	cmp	r3, #0
 80136be:	da02      	bge.n	80136c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	68ba      	ldr	r2, [r7, #8]
 80136c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80136c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c8:	891b      	ldrh	r3, [r3, #8]
 80136ca:	461c      	mov	r4, r3
 80136cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ce:	68db      	ldr	r3, [r3, #12]
 80136d0:	899b      	ldrh	r3, [r3, #12]
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7f8 ff99 	bl	800c60c <lwip_htons>
 80136da:	4603      	mov	r3, r0
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	f003 0303 	and.w	r3, r3, #3
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d001      	beq.n	80136ea <tcp_output+0x2de>
 80136e6:	2301      	movs	r3, #1
 80136e8:	e000      	b.n	80136ec <tcp_output+0x2e0>
 80136ea:	2300      	movs	r3, #0
 80136ec:	4423      	add	r3, r4
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d049      	beq.n	8013786 <tcp_output+0x37a>
      seg->next = NULL;
 80136f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f4:	2200      	movs	r2, #0
 80136f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d105      	bne.n	801370c <tcp_output+0x300>
        pcb->unacked = seg;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013704:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013708:	623b      	str	r3, [r7, #32]
 801370a:	e03f      	b.n	801378c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	4618      	mov	r0, r3
 8013714:	f7f8 ff8f 	bl	800c636 <lwip_htonl>
 8013718:	4604      	mov	r4, r0
 801371a:	6a3b      	ldr	r3, [r7, #32]
 801371c:	68db      	ldr	r3, [r3, #12]
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	4618      	mov	r0, r3
 8013722:	f7f8 ff88 	bl	800c636 <lwip_htonl>
 8013726:	4603      	mov	r3, r0
 8013728:	1ae3      	subs	r3, r4, r3
 801372a:	2b00      	cmp	r3, #0
 801372c:	da24      	bge.n	8013778 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	3370      	adds	r3, #112	; 0x70
 8013732:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013734:	e002      	b.n	801373c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013736:	69fb      	ldr	r3, [r7, #28]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d011      	beq.n	8013768 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	68db      	ldr	r3, [r3, #12]
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	4618      	mov	r0, r3
 801374e:	f7f8 ff72 	bl	800c636 <lwip_htonl>
 8013752:	4604      	mov	r4, r0
 8013754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	4618      	mov	r0, r3
 801375c:	f7f8 ff6b 	bl	800c636 <lwip_htonl>
 8013760:	4603      	mov	r3, r0
 8013762:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013764:	2b00      	cmp	r3, #0
 8013766:	dbe6      	blt.n	8013736 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	681a      	ldr	r2, [r3, #0]
 801376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013774:	601a      	str	r2, [r3, #0]
 8013776:	e009      	b.n	801378c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013778:	6a3b      	ldr	r3, [r7, #32]
 801377a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801377c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801377e:	6a3b      	ldr	r3, [r7, #32]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	623b      	str	r3, [r7, #32]
 8013784:	e002      	b.n	801378c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013788:	f7fb feff 	bl	800f58a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013790:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013794:	2b00      	cmp	r3, #0
 8013796:	d012      	beq.n	80137be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379a:	68db      	ldr	r3, [r3, #12]
 801379c:	685b      	ldr	r3, [r3, #4]
 801379e:	4618      	mov	r0, r3
 80137a0:	f7f8 ff49 	bl	800c636 <lwip_htonl>
 80137a4:	4602      	mov	r2, r0
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137aa:	1ad3      	subs	r3, r2, r3
 80137ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ae:	8912      	ldrh	r2, [r2, #8]
 80137b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80137b2:	69ba      	ldr	r2, [r7, #24]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	f4bf aed9 	bcs.w	801356c <tcp_output+0x160>
 80137ba:	e000      	b.n	80137be <tcp_output+0x3b2>
      break;
 80137bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d108      	bne.n	80137d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2200      	movs	r2, #0
 80137ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80137ce:	e004      	b.n	80137da <tcp_output+0x3ce>
    goto output_done;
 80137d0:	bf00      	nop
 80137d2:	e002      	b.n	80137da <tcp_output+0x3ce>
    goto output_done;
 80137d4:	bf00      	nop
 80137d6:	e000      	b.n	80137da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80137d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	8b5b      	ldrh	r3, [r3, #26]
 80137de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80137e2:	b29a      	uxth	r2, r3
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80137e8:	2300      	movs	r3, #0
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3728      	adds	r7, #40	; 0x28
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bdb0      	pop	{r4, r5, r7, pc}
 80137f2:	bf00      	nop

080137f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d106      	bne.n	8013810 <tcp_output_segment_busy+0x1c>
 8013802:	4b09      	ldr	r3, [pc, #36]	; (8013828 <tcp_output_segment_busy+0x34>)
 8013804:	f240 529a 	movw	r2, #1434	; 0x59a
 8013808:	4908      	ldr	r1, [pc, #32]	; (801382c <tcp_output_segment_busy+0x38>)
 801380a:	4809      	ldr	r0, [pc, #36]	; (8013830 <tcp_output_segment_busy+0x3c>)
 801380c:	f003 fb9e 	bl	8016f4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	685b      	ldr	r3, [r3, #4]
 8013814:	7b9b      	ldrb	r3, [r3, #14]
 8013816:	2b01      	cmp	r3, #1
 8013818:	d001      	beq.n	801381e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801381a:	2301      	movs	r3, #1
 801381c:	e000      	b.n	8013820 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801381e:	2300      	movs	r3, #0
}
 8013820:	4618      	mov	r0, r3
 8013822:	3708      	adds	r7, #8
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}
 8013828:	0801ae80 	.word	0x0801ae80
 801382c:	0801b41c 	.word	0x0801b41c
 8013830:	0801aed4 	.word	0x0801aed4

08013834 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013834:	b5b0      	push	{r4, r5, r7, lr}
 8013836:	b08c      	sub	sp, #48	; 0x30
 8013838:	af04      	add	r7, sp, #16
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d106      	bne.n	8013854 <tcp_output_segment+0x20>
 8013846:	4b63      	ldr	r3, [pc, #396]	; (80139d4 <tcp_output_segment+0x1a0>)
 8013848:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801384c:	4962      	ldr	r1, [pc, #392]	; (80139d8 <tcp_output_segment+0x1a4>)
 801384e:	4863      	ldr	r0, [pc, #396]	; (80139dc <tcp_output_segment+0x1a8>)
 8013850:	f003 fb7c 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d106      	bne.n	8013868 <tcp_output_segment+0x34>
 801385a:	4b5e      	ldr	r3, [pc, #376]	; (80139d4 <tcp_output_segment+0x1a0>)
 801385c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013860:	495f      	ldr	r1, [pc, #380]	; (80139e0 <tcp_output_segment+0x1ac>)
 8013862:	485e      	ldr	r0, [pc, #376]	; (80139dc <tcp_output_segment+0x1a8>)
 8013864:	f003 fb72 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d106      	bne.n	801387c <tcp_output_segment+0x48>
 801386e:	4b59      	ldr	r3, [pc, #356]	; (80139d4 <tcp_output_segment+0x1a0>)
 8013870:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013874:	495b      	ldr	r1, [pc, #364]	; (80139e4 <tcp_output_segment+0x1b0>)
 8013876:	4859      	ldr	r0, [pc, #356]	; (80139dc <tcp_output_segment+0x1a8>)
 8013878:	f003 fb68 	bl	8016f4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801387c:	68f8      	ldr	r0, [r7, #12]
 801387e:	f7ff ffb9 	bl	80137f4 <tcp_output_segment_busy>
 8013882:	4603      	mov	r3, r0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d001      	beq.n	801388c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013888:	2300      	movs	r3, #0
 801388a:	e09f      	b.n	80139cc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	68dc      	ldr	r4, [r3, #12]
 8013894:	4610      	mov	r0, r2
 8013896:	f7f8 fece 	bl	800c636 <lwip_htonl>
 801389a:	4603      	mov	r3, r0
 801389c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	68dc      	ldr	r4, [r3, #12]
 80138a6:	4610      	mov	r0, r2
 80138a8:	f7f8 feb0 	bl	800c60c <lwip_htons>
 80138ac:	4603      	mov	r3, r0
 80138ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b4:	68ba      	ldr	r2, [r7, #8]
 80138b6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80138b8:	441a      	add	r2, r3
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	68db      	ldr	r3, [r3, #12]
 80138c2:	3314      	adds	r3, #20
 80138c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	7a9b      	ldrb	r3, [r3, #10]
 80138ca:	f003 0301 	and.w	r3, r3, #1
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d015      	beq.n	80138fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	3304      	adds	r3, #4
 80138d6:	461a      	mov	r2, r3
 80138d8:	6879      	ldr	r1, [r7, #4]
 80138da:	f44f 7006 	mov.w	r0, #536	; 0x218
 80138de:	f7fc fa37 	bl	800fd50 <tcp_eff_send_mss_netif>
 80138e2:	4603      	mov	r3, r0
 80138e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80138e6:	8b7b      	ldrh	r3, [r7, #26]
 80138e8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7f8 fea2 	bl	800c636 <lwip_htonl>
 80138f2:	4602      	mov	r2, r0
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	3304      	adds	r3, #4
 80138fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013904:	2b00      	cmp	r3, #0
 8013906:	da02      	bge.n	801390e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	2200      	movs	r2, #0
 801390c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013912:	2b00      	cmp	r3, #0
 8013914:	d10c      	bne.n	8013930 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013916:	4b34      	ldr	r3, [pc, #208]	; (80139e8 <tcp_output_segment+0x1b4>)
 8013918:	681a      	ldr	r2, [r3, #0]
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	4618      	mov	r0, r3
 8013926:	f7f8 fe86 	bl	800c636 <lwip_htonl>
 801392a:	4602      	mov	r2, r0
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	68da      	ldr	r2, [r3, #12]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	685b      	ldr	r3, [r3, #4]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	8959      	ldrh	r1, [r3, #10]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	8b3a      	ldrh	r2, [r7, #24]
 801394a:	1a8a      	subs	r2, r1, r2
 801394c:	b292      	uxth	r2, r2
 801394e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	8919      	ldrh	r1, [r3, #8]
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	8b3a      	ldrh	r2, [r7, #24]
 801395c:	1a8a      	subs	r2, r1, r2
 801395e:	b292      	uxth	r2, r2
 8013960:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	68fa      	ldr	r2, [r7, #12]
 8013968:	68d2      	ldr	r2, [r2, #12]
 801396a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	68db      	ldr	r3, [r3, #12]
 8013970:	2200      	movs	r2, #0
 8013972:	741a      	strb	r2, [r3, #16]
 8013974:	2200      	movs	r2, #0
 8013976:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	68db      	ldr	r3, [r3, #12]
 801397c:	f103 0214 	add.w	r2, r3, #20
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	7a9b      	ldrb	r3, [r3, #10]
 8013984:	009b      	lsls	r3, r3, #2
 8013986:	f003 0304 	and.w	r3, r3, #4
 801398a:	4413      	add	r3, r2
 801398c:	69fa      	ldr	r2, [r7, #28]
 801398e:	429a      	cmp	r2, r3
 8013990:	d006      	beq.n	80139a0 <tcp_output_segment+0x16c>
 8013992:	4b10      	ldr	r3, [pc, #64]	; (80139d4 <tcp_output_segment+0x1a0>)
 8013994:	f240 621c 	movw	r2, #1564	; 0x61c
 8013998:	4914      	ldr	r1, [pc, #80]	; (80139ec <tcp_output_segment+0x1b8>)
 801399a:	4810      	ldr	r0, [pc, #64]	; (80139dc <tcp_output_segment+0x1a8>)
 801399c:	f003 fad6 	bl	8016f4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	6858      	ldr	r0, [r3, #4]
 80139a4:	68b9      	ldr	r1, [r7, #8]
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	1d1c      	adds	r4, r3, #4
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	7add      	ldrb	r5, [r3, #11]
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	7a9b      	ldrb	r3, [r3, #10]
 80139b2:	687a      	ldr	r2, [r7, #4]
 80139b4:	9202      	str	r2, [sp, #8]
 80139b6:	2206      	movs	r2, #6
 80139b8:	9201      	str	r2, [sp, #4]
 80139ba:	9300      	str	r3, [sp, #0]
 80139bc:	462b      	mov	r3, r5
 80139be:	4622      	mov	r2, r4
 80139c0:	f002 fa36 	bl	8015e30 <ip4_output_if>
 80139c4:	4603      	mov	r3, r0
 80139c6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80139c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3720      	adds	r7, #32
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bdb0      	pop	{r4, r5, r7, pc}
 80139d4:	0801ae80 	.word	0x0801ae80
 80139d8:	0801b444 	.word	0x0801b444
 80139dc:	0801aed4 	.word	0x0801aed4
 80139e0:	0801b464 	.word	0x0801b464
 80139e4:	0801b484 	.word	0x0801b484
 80139e8:	200114d0 	.word	0x200114d0
 80139ec:	0801b4a8 	.word	0x0801b4a8

080139f0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80139f0:	b5b0      	push	{r4, r5, r7, lr}
 80139f2:	b084      	sub	sp, #16
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d106      	bne.n	8013a0c <tcp_rexmit_rto_prepare+0x1c>
 80139fe:	4b31      	ldr	r3, [pc, #196]	; (8013ac4 <tcp_rexmit_rto_prepare+0xd4>)
 8013a00:	f240 6263 	movw	r2, #1635	; 0x663
 8013a04:	4930      	ldr	r1, [pc, #192]	; (8013ac8 <tcp_rexmit_rto_prepare+0xd8>)
 8013a06:	4831      	ldr	r0, [pc, #196]	; (8013acc <tcp_rexmit_rto_prepare+0xdc>)
 8013a08:	f003 faa0 	bl	8016f4c <iprintf>

  if (pcb->unacked == NULL) {
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d102      	bne.n	8013a1a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013a14:	f06f 0305 	mvn.w	r3, #5
 8013a18:	e050      	b.n	8013abc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a1e:	60fb      	str	r3, [r7, #12]
 8013a20:	e00b      	b.n	8013a3a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013a22:	68f8      	ldr	r0, [r7, #12]
 8013a24:	f7ff fee6 	bl	80137f4 <tcp_output_segment_busy>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d002      	beq.n	8013a34 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013a2e:	f06f 0305 	mvn.w	r3, #5
 8013a32:	e043      	b.n	8013abc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	60fb      	str	r3, [r7, #12]
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d1ef      	bne.n	8013a22 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f7ff fed6 	bl	80137f4 <tcp_output_segment_busy>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d002      	beq.n	8013a54 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013a4e:	f06f 0305 	mvn.w	r3, #5
 8013a52:	e033      	b.n	8013abc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2200      	movs	r2, #0
 8013a68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	8b5b      	ldrh	r3, [r3, #26]
 8013a6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013a72:	b29a      	uxth	r2, r3
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	68db      	ldr	r3, [r3, #12]
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7f8 fdd9 	bl	800c636 <lwip_htonl>
 8013a84:	4604      	mov	r4, r0
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	891b      	ldrh	r3, [r3, #8]
 8013a8a:	461d      	mov	r5, r3
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	899b      	ldrh	r3, [r3, #12]
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7f8 fdb9 	bl	800c60c <lwip_htons>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	f003 0303 	and.w	r3, r3, #3
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d001      	beq.n	8013aaa <tcp_rexmit_rto_prepare+0xba>
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	e000      	b.n	8013aac <tcp_rexmit_rto_prepare+0xbc>
 8013aaa:	2300      	movs	r3, #0
 8013aac:	442b      	add	r3, r5
 8013aae:	18e2      	adds	r2, r4, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013aba:	2300      	movs	r3, #0
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3710      	adds	r7, #16
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8013ac4:	0801ae80 	.word	0x0801ae80
 8013ac8:	0801b4bc 	.word	0x0801b4bc
 8013acc:	0801aed4 	.word	0x0801aed4

08013ad0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d106      	bne.n	8013aec <tcp_rexmit_rto_commit+0x1c>
 8013ade:	4b0d      	ldr	r3, [pc, #52]	; (8013b14 <tcp_rexmit_rto_commit+0x44>)
 8013ae0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013ae4:	490c      	ldr	r1, [pc, #48]	; (8013b18 <tcp_rexmit_rto_commit+0x48>)
 8013ae6:	480d      	ldr	r0, [pc, #52]	; (8013b1c <tcp_rexmit_rto_commit+0x4c>)
 8013ae8:	f003 fa30 	bl	8016f4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013af2:	2bff      	cmp	r3, #255	; 0xff
 8013af4:	d007      	beq.n	8013b06 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013afc:	3301      	adds	r3, #1
 8013afe:	b2da      	uxtb	r2, r3
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f7ff fc80 	bl	801340c <tcp_output>
}
 8013b0c:	bf00      	nop
 8013b0e:	3708      	adds	r7, #8
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}
 8013b14:	0801ae80 	.word	0x0801ae80
 8013b18:	0801b4e0 	.word	0x0801b4e0
 8013b1c:	0801aed4 	.word	0x0801aed4

08013b20 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b082      	sub	sp, #8
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d106      	bne.n	8013b3c <tcp_rexmit_rto+0x1c>
 8013b2e:	4b0a      	ldr	r3, [pc, #40]	; (8013b58 <tcp_rexmit_rto+0x38>)
 8013b30:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013b34:	4909      	ldr	r1, [pc, #36]	; (8013b5c <tcp_rexmit_rto+0x3c>)
 8013b36:	480a      	ldr	r0, [pc, #40]	; (8013b60 <tcp_rexmit_rto+0x40>)
 8013b38:	f003 fa08 	bl	8016f4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f7ff ff57 	bl	80139f0 <tcp_rexmit_rto_prepare>
 8013b42:	4603      	mov	r3, r0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d102      	bne.n	8013b4e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f7ff ffc1 	bl	8013ad0 <tcp_rexmit_rto_commit>
  }
}
 8013b4e:	bf00      	nop
 8013b50:	3708      	adds	r7, #8
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	0801ae80 	.word	0x0801ae80
 8013b5c:	0801b504 	.word	0x0801b504
 8013b60:	0801aed4 	.word	0x0801aed4

08013b64 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013b64:	b590      	push	{r4, r7, lr}
 8013b66:	b085      	sub	sp, #20
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d106      	bne.n	8013b80 <tcp_rexmit+0x1c>
 8013b72:	4b2f      	ldr	r3, [pc, #188]	; (8013c30 <tcp_rexmit+0xcc>)
 8013b74:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013b78:	492e      	ldr	r1, [pc, #184]	; (8013c34 <tcp_rexmit+0xd0>)
 8013b7a:	482f      	ldr	r0, [pc, #188]	; (8013c38 <tcp_rexmit+0xd4>)
 8013b7c:	f003 f9e6 	bl	8016f4c <iprintf>

  if (pcb->unacked == NULL) {
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d102      	bne.n	8013b8e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013b88:	f06f 0305 	mvn.w	r3, #5
 8013b8c:	e04c      	b.n	8013c28 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b92:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013b94:	68b8      	ldr	r0, [r7, #8]
 8013b96:	f7ff fe2d 	bl	80137f4 <tcp_output_segment_busy>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d002      	beq.n	8013ba6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013ba0:	f06f 0305 	mvn.w	r3, #5
 8013ba4:	e040      	b.n	8013c28 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	681a      	ldr	r2, [r3, #0]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	336c      	adds	r3, #108	; 0x6c
 8013bb2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013bb4:	e002      	b.n	8013bbc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d011      	beq.n	8013be8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7f8 fd32 	bl	800c636 <lwip_htonl>
 8013bd2:	4604      	mov	r4, r0
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	68db      	ldr	r3, [r3, #12]
 8013bd8:	685b      	ldr	r3, [r3, #4]
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7f8 fd2b 	bl	800c636 <lwip_htonl>
 8013be0:	4603      	mov	r3, r0
 8013be2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	dbe6      	blt.n	8013bb6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	68ba      	ldr	r2, [r7, #8]
 8013bf4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d103      	bne.n	8013c06 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2200      	movs	r2, #0
 8013c02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c0c:	2bff      	cmp	r3, #255	; 0xff
 8013c0e:	d007      	beq.n	8013c20 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c16:	3301      	adds	r3, #1
 8013c18:	b2da      	uxtb	r2, r3
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2200      	movs	r2, #0
 8013c24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013c26:	2300      	movs	r3, #0
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3714      	adds	r7, #20
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd90      	pop	{r4, r7, pc}
 8013c30:	0801ae80 	.word	0x0801ae80
 8013c34:	0801b520 	.word	0x0801b520
 8013c38:	0801aed4 	.word	0x0801aed4

08013c3c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d106      	bne.n	8013c58 <tcp_rexmit_fast+0x1c>
 8013c4a:	4b2a      	ldr	r3, [pc, #168]	; (8013cf4 <tcp_rexmit_fast+0xb8>)
 8013c4c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013c50:	4929      	ldr	r1, [pc, #164]	; (8013cf8 <tcp_rexmit_fast+0xbc>)
 8013c52:	482a      	ldr	r0, [pc, #168]	; (8013cfc <tcp_rexmit_fast+0xc0>)
 8013c54:	f003 f97a 	bl	8016f4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d044      	beq.n	8013cea <tcp_rexmit_fast+0xae>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	8b5b      	ldrh	r3, [r3, #26]
 8013c64:	f003 0304 	and.w	r3, r3, #4
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d13e      	bne.n	8013cea <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f7ff ff79 	bl	8013b64 <tcp_rexmit>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d138      	bne.n	8013cea <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013c84:	4293      	cmp	r3, r2
 8013c86:	bf28      	it	cs
 8013c88:	4613      	movcs	r3, r2
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	0fda      	lsrs	r2, r3, #31
 8013c8e:	4413      	add	r3, r2
 8013c90:	105b      	asrs	r3, r3, #1
 8013c92:	b29a      	uxth	r2, r3
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ca6:	005b      	lsls	r3, r3, #1
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d206      	bcs.n	8013cba <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cb0:	005b      	lsls	r3, r3, #1
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	0049      	lsls	r1, r1, #1
 8013cc8:	440b      	add	r3, r1
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	4413      	add	r3, r2
 8013cce:	b29a      	uxth	r2, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	8b5b      	ldrh	r3, [r3, #26]
 8013cda:	f043 0304 	orr.w	r3, r3, #4
 8013cde:	b29a      	uxth	r2, r3
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013cea:	bf00      	nop
 8013cec:	3708      	adds	r7, #8
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	0801ae80 	.word	0x0801ae80
 8013cf8:	0801b538 	.word	0x0801b538
 8013cfc:	0801aed4 	.word	0x0801aed4

08013d00 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b086      	sub	sp, #24
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	60f8      	str	r0, [r7, #12]
 8013d08:	607b      	str	r3, [r7, #4]
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	817b      	strh	r3, [r7, #10]
 8013d0e:	4613      	mov	r3, r2
 8013d10:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013d12:	897a      	ldrh	r2, [r7, #10]
 8013d14:	893b      	ldrh	r3, [r7, #8]
 8013d16:	4413      	add	r3, r2
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	3314      	adds	r3, #20
 8013d1c:	b29b      	uxth	r3, r3
 8013d1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d22:	4619      	mov	r1, r3
 8013d24:	2022      	movs	r0, #34	; 0x22
 8013d26:	f7f9 fd1f 	bl	800d768 <pbuf_alloc>
 8013d2a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d04d      	beq.n	8013dce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013d32:	897b      	ldrh	r3, [r7, #10]
 8013d34:	3313      	adds	r3, #19
 8013d36:	697a      	ldr	r2, [r7, #20]
 8013d38:	8952      	ldrh	r2, [r2, #10]
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	db06      	blt.n	8013d4c <tcp_output_alloc_header_common+0x4c>
 8013d3e:	4b26      	ldr	r3, [pc, #152]	; (8013dd8 <tcp_output_alloc_header_common+0xd8>)
 8013d40:	f240 7223 	movw	r2, #1827	; 0x723
 8013d44:	4925      	ldr	r1, [pc, #148]	; (8013ddc <tcp_output_alloc_header_common+0xdc>)
 8013d46:	4826      	ldr	r0, [pc, #152]	; (8013de0 <tcp_output_alloc_header_common+0xe0>)
 8013d48:	f003 f900 	bl	8016f4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013d52:	8c3b      	ldrh	r3, [r7, #32]
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7f8 fc59 	bl	800c60c <lwip_htons>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	693b      	ldr	r3, [r7, #16]
 8013d60:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7f8 fc51 	bl	800c60c <lwip_htons>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	687a      	ldr	r2, [r7, #4]
 8013d76:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013d78:	68f8      	ldr	r0, [r7, #12]
 8013d7a:	f7f8 fc5c 	bl	800c636 <lwip_htonl>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013d84:	897b      	ldrh	r3, [r7, #10]
 8013d86:	089b      	lsrs	r3, r3, #2
 8013d88:	b29b      	uxth	r3, r3
 8013d8a:	3305      	adds	r3, #5
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	031b      	lsls	r3, r3, #12
 8013d90:	b29a      	uxth	r2, r3
 8013d92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7f8 fc35 	bl	800c60c <lwip_htons>
 8013da2:	4603      	mov	r3, r0
 8013da4:	461a      	mov	r2, r3
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013daa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7f8 fc2d 	bl	800c60c <lwip_htons>
 8013db2:	4603      	mov	r3, r0
 8013db4:	461a      	mov	r2, r3
 8013db6:	693b      	ldr	r3, [r7, #16]
 8013db8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	741a      	strb	r2, [r3, #16]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	749a      	strb	r2, [r3, #18]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013dce:	697b      	ldr	r3, [r7, #20]
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3718      	adds	r7, #24
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	0801ae80 	.word	0x0801ae80
 8013ddc:	0801b558 	.word	0x0801b558
 8013de0:	0801aed4 	.word	0x0801aed4

08013de4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013de4:	b5b0      	push	{r4, r5, r7, lr}
 8013de6:	b08a      	sub	sp, #40	; 0x28
 8013de8:	af04      	add	r7, sp, #16
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	607b      	str	r3, [r7, #4]
 8013dee:	460b      	mov	r3, r1
 8013df0:	817b      	strh	r3, [r7, #10]
 8013df2:	4613      	mov	r3, r2
 8013df4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d106      	bne.n	8013e0a <tcp_output_alloc_header+0x26>
 8013dfc:	4b15      	ldr	r3, [pc, #84]	; (8013e54 <tcp_output_alloc_header+0x70>)
 8013dfe:	f240 7242 	movw	r2, #1858	; 0x742
 8013e02:	4915      	ldr	r1, [pc, #84]	; (8013e58 <tcp_output_alloc_header+0x74>)
 8013e04:	4815      	ldr	r0, [pc, #84]	; (8013e5c <tcp_output_alloc_header+0x78>)
 8013e06:	f003 f8a1 	bl	8016f4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	8adb      	ldrh	r3, [r3, #22]
 8013e12:	68fa      	ldr	r2, [r7, #12]
 8013e14:	8b12      	ldrh	r2, [r2, #24]
 8013e16:	68f9      	ldr	r1, [r7, #12]
 8013e18:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013e1a:	893d      	ldrh	r5, [r7, #8]
 8013e1c:	897c      	ldrh	r4, [r7, #10]
 8013e1e:	9103      	str	r1, [sp, #12]
 8013e20:	2110      	movs	r1, #16
 8013e22:	9102      	str	r1, [sp, #8]
 8013e24:	9201      	str	r2, [sp, #4]
 8013e26:	9300      	str	r3, [sp, #0]
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	462a      	mov	r2, r5
 8013e2c:	4621      	mov	r1, r4
 8013e2e:	f7ff ff67 	bl	8013d00 <tcp_output_alloc_header_common>
 8013e32:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d006      	beq.n	8013e48 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e3e:	68fa      	ldr	r2, [r7, #12]
 8013e40:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013e42:	441a      	add	r2, r3
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013e48:	697b      	ldr	r3, [r7, #20]
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	3718      	adds	r7, #24
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bdb0      	pop	{r4, r5, r7, pc}
 8013e52:	bf00      	nop
 8013e54:	0801ae80 	.word	0x0801ae80
 8013e58:	0801b588 	.word	0x0801b588
 8013e5c:	0801aed4 	.word	0x0801aed4

08013e60 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b088      	sub	sp, #32
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	4611      	mov	r1, r2
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	460b      	mov	r3, r1
 8013e70:	71fb      	strb	r3, [r7, #7]
 8013e72:	4613      	mov	r3, r2
 8013e74:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013e76:	2300      	movs	r3, #0
 8013e78:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d106      	bne.n	8013e8e <tcp_output_fill_options+0x2e>
 8013e80:	4b13      	ldr	r3, [pc, #76]	; (8013ed0 <tcp_output_fill_options+0x70>)
 8013e82:	f240 7256 	movw	r2, #1878	; 0x756
 8013e86:	4913      	ldr	r1, [pc, #76]	; (8013ed4 <tcp_output_fill_options+0x74>)
 8013e88:	4813      	ldr	r0, [pc, #76]	; (8013ed8 <tcp_output_fill_options+0x78>)
 8013e8a:	f003 f85f 	bl	8016f4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013e94:	69bb      	ldr	r3, [r7, #24]
 8013e96:	3314      	adds	r3, #20
 8013e98:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013e9a:	69bb      	ldr	r3, [r7, #24]
 8013e9c:	f103 0214 	add.w	r2, r3, #20
 8013ea0:	8bfb      	ldrh	r3, [r7, #30]
 8013ea2:	009b      	lsls	r3, r3, #2
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	79fb      	ldrb	r3, [r7, #7]
 8013ea8:	009b      	lsls	r3, r3, #2
 8013eaa:	f003 0304 	and.w	r3, r3, #4
 8013eae:	440b      	add	r3, r1
 8013eb0:	4413      	add	r3, r2
 8013eb2:	697a      	ldr	r2, [r7, #20]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d006      	beq.n	8013ec6 <tcp_output_fill_options+0x66>
 8013eb8:	4b05      	ldr	r3, [pc, #20]	; (8013ed0 <tcp_output_fill_options+0x70>)
 8013eba:	f240 7275 	movw	r2, #1909	; 0x775
 8013ebe:	4907      	ldr	r1, [pc, #28]	; (8013edc <tcp_output_fill_options+0x7c>)
 8013ec0:	4805      	ldr	r0, [pc, #20]	; (8013ed8 <tcp_output_fill_options+0x78>)
 8013ec2:	f003 f843 	bl	8016f4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013ec6:	bf00      	nop
 8013ec8:	3720      	adds	r7, #32
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop
 8013ed0:	0801ae80 	.word	0x0801ae80
 8013ed4:	0801b5b0 	.word	0x0801b5b0
 8013ed8:	0801aed4 	.word	0x0801aed4
 8013edc:	0801b4a8 	.word	0x0801b4a8

08013ee0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b08a      	sub	sp, #40	; 0x28
 8013ee4:	af04      	add	r7, sp, #16
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
 8013eec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d106      	bne.n	8013f02 <tcp_output_control_segment+0x22>
 8013ef4:	4b1c      	ldr	r3, [pc, #112]	; (8013f68 <tcp_output_control_segment+0x88>)
 8013ef6:	f240 7287 	movw	r2, #1927	; 0x787
 8013efa:	491c      	ldr	r1, [pc, #112]	; (8013f6c <tcp_output_control_segment+0x8c>)
 8013efc:	481c      	ldr	r0, [pc, #112]	; (8013f70 <tcp_output_control_segment+0x90>)
 8013efe:	f003 f825 	bl	8016f4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013f02:	683a      	ldr	r2, [r7, #0]
 8013f04:	6879      	ldr	r1, [r7, #4]
 8013f06:	68f8      	ldr	r0, [r7, #12]
 8013f08:	f7fe fae8 	bl	80124dc <tcp_route>
 8013f0c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d102      	bne.n	8013f1a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013f14:	23fc      	movs	r3, #252	; 0xfc
 8013f16:	75fb      	strb	r3, [r7, #23]
 8013f18:	e01c      	b.n	8013f54 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d006      	beq.n	8013f2e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	7adb      	ldrb	r3, [r3, #11]
 8013f24:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	7a9b      	ldrb	r3, [r3, #10]
 8013f2a:	757b      	strb	r3, [r7, #21]
 8013f2c:	e003      	b.n	8013f36 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013f2e:	23ff      	movs	r3, #255	; 0xff
 8013f30:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013f32:	2300      	movs	r3, #0
 8013f34:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013f36:	7dba      	ldrb	r2, [r7, #22]
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	9302      	str	r3, [sp, #8]
 8013f3c:	2306      	movs	r3, #6
 8013f3e:	9301      	str	r3, [sp, #4]
 8013f40:	7d7b      	ldrb	r3, [r7, #21]
 8013f42:	9300      	str	r3, [sp, #0]
 8013f44:	4613      	mov	r3, r2
 8013f46:	683a      	ldr	r2, [r7, #0]
 8013f48:	6879      	ldr	r1, [r7, #4]
 8013f4a:	68b8      	ldr	r0, [r7, #8]
 8013f4c:	f001 ff70 	bl	8015e30 <ip4_output_if>
 8013f50:	4603      	mov	r3, r0
 8013f52:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013f54:	68b8      	ldr	r0, [r7, #8]
 8013f56:	f7f9 feeb 	bl	800dd30 <pbuf_free>
  return err;
 8013f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3718      	adds	r7, #24
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	0801ae80 	.word	0x0801ae80
 8013f6c:	0801b5d8 	.word	0x0801b5d8
 8013f70:	0801aed4 	.word	0x0801aed4

08013f74 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013f74:	b590      	push	{r4, r7, lr}
 8013f76:	b08b      	sub	sp, #44	; 0x2c
 8013f78:	af04      	add	r7, sp, #16
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	60b9      	str	r1, [r7, #8]
 8013f7e:	607a      	str	r2, [r7, #4]
 8013f80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d106      	bne.n	8013f96 <tcp_rst+0x22>
 8013f88:	4b1f      	ldr	r3, [pc, #124]	; (8014008 <tcp_rst+0x94>)
 8013f8a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013f8e:	491f      	ldr	r1, [pc, #124]	; (801400c <tcp_rst+0x98>)
 8013f90:	481f      	ldr	r0, [pc, #124]	; (8014010 <tcp_rst+0x9c>)
 8013f92:	f002 ffdb 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d106      	bne.n	8013faa <tcp_rst+0x36>
 8013f9c:	4b1a      	ldr	r3, [pc, #104]	; (8014008 <tcp_rst+0x94>)
 8013f9e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013fa2:	491c      	ldr	r1, [pc, #112]	; (8014014 <tcp_rst+0xa0>)
 8013fa4:	481a      	ldr	r0, [pc, #104]	; (8014010 <tcp_rst+0x9c>)
 8013fa6:	f002 ffd1 	bl	8016f4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013faa:	2300      	movs	r3, #0
 8013fac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013fae:	f246 0308 	movw	r3, #24584	; 0x6008
 8013fb2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013fb4:	7dfb      	ldrb	r3, [r7, #23]
 8013fb6:	b29c      	uxth	r4, r3
 8013fb8:	68b8      	ldr	r0, [r7, #8]
 8013fba:	f7f8 fb3c 	bl	800c636 <lwip_htonl>
 8013fbe:	4602      	mov	r2, r0
 8013fc0:	8abb      	ldrh	r3, [r7, #20]
 8013fc2:	9303      	str	r3, [sp, #12]
 8013fc4:	2314      	movs	r3, #20
 8013fc6:	9302      	str	r3, [sp, #8]
 8013fc8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013fca:	9301      	str	r3, [sp, #4]
 8013fcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013fce:	9300      	str	r3, [sp, #0]
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	4621      	mov	r1, r4
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f7ff fe92 	bl	8013d00 <tcp_output_alloc_header_common>
 8013fdc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d00c      	beq.n	8013ffe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013fe4:	7dfb      	ldrb	r3, [r7, #23]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	6939      	ldr	r1, [r7, #16]
 8013fea:	68f8      	ldr	r0, [r7, #12]
 8013fec:	f7ff ff38 	bl	8013e60 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff2:	683a      	ldr	r2, [r7, #0]
 8013ff4:	6939      	ldr	r1, [r7, #16]
 8013ff6:	68f8      	ldr	r0, [r7, #12]
 8013ff8:	f7ff ff72 	bl	8013ee0 <tcp_output_control_segment>
 8013ffc:	e000      	b.n	8014000 <tcp_rst+0x8c>
    return;
 8013ffe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014000:	371c      	adds	r7, #28
 8014002:	46bd      	mov	sp, r7
 8014004:	bd90      	pop	{r4, r7, pc}
 8014006:	bf00      	nop
 8014008:	0801ae80 	.word	0x0801ae80
 801400c:	0801b604 	.word	0x0801b604
 8014010:	0801aed4 	.word	0x0801aed4
 8014014:	0801b620 	.word	0x0801b620

08014018 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014018:	b590      	push	{r4, r7, lr}
 801401a:	b087      	sub	sp, #28
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014020:	2300      	movs	r3, #0
 8014022:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014024:	2300      	movs	r3, #0
 8014026:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d106      	bne.n	801403c <tcp_send_empty_ack+0x24>
 801402e:	4b28      	ldr	r3, [pc, #160]	; (80140d0 <tcp_send_empty_ack+0xb8>)
 8014030:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014034:	4927      	ldr	r1, [pc, #156]	; (80140d4 <tcp_send_empty_ack+0xbc>)
 8014036:	4828      	ldr	r0, [pc, #160]	; (80140d8 <tcp_send_empty_ack+0xc0>)
 8014038:	f002 ff88 	bl	8016f4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801403c:	7dfb      	ldrb	r3, [r7, #23]
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	b2db      	uxtb	r3, r3
 8014042:	f003 0304 	and.w	r3, r3, #4
 8014046:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014048:	7d7b      	ldrb	r3, [r7, #21]
 801404a:	b29c      	uxth	r4, r3
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014050:	4618      	mov	r0, r3
 8014052:	f7f8 faf0 	bl	800c636 <lwip_htonl>
 8014056:	4603      	mov	r3, r0
 8014058:	2200      	movs	r2, #0
 801405a:	4621      	mov	r1, r4
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f7ff fec1 	bl	8013de4 <tcp_output_alloc_header>
 8014062:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d109      	bne.n	801407e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	8b5b      	ldrh	r3, [r3, #26]
 801406e:	f043 0303 	orr.w	r3, r3, #3
 8014072:	b29a      	uxth	r2, r3
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014078:	f06f 0301 	mvn.w	r3, #1
 801407c:	e023      	b.n	80140c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801407e:	7dbb      	ldrb	r3, [r7, #22]
 8014080:	7dfa      	ldrb	r2, [r7, #23]
 8014082:	6939      	ldr	r1, [r7, #16]
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f7ff feeb 	bl	8013e60 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801408a:	687a      	ldr	r2, [r7, #4]
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	3304      	adds	r3, #4
 8014090:	6939      	ldr	r1, [r7, #16]
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f7ff ff24 	bl	8013ee0 <tcp_output_control_segment>
 8014098:	4603      	mov	r3, r0
 801409a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801409c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d007      	beq.n	80140b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	8b5b      	ldrh	r3, [r3, #26]
 80140a8:	f043 0303 	orr.w	r3, r3, #3
 80140ac:	b29a      	uxth	r2, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	835a      	strh	r2, [r3, #26]
 80140b2:	e006      	b.n	80140c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	8b5b      	ldrh	r3, [r3, #26]
 80140b8:	f023 0303 	bic.w	r3, r3, #3
 80140bc:	b29a      	uxth	r2, r3
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80140c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	371c      	adds	r7, #28
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd90      	pop	{r4, r7, pc}
 80140ce:	bf00      	nop
 80140d0:	0801ae80 	.word	0x0801ae80
 80140d4:	0801b63c 	.word	0x0801b63c
 80140d8:	0801aed4 	.word	0x0801aed4

080140dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80140dc:	b590      	push	{r4, r7, lr}
 80140de:	b087      	sub	sp, #28
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80140e4:	2300      	movs	r3, #0
 80140e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d106      	bne.n	80140fc <tcp_keepalive+0x20>
 80140ee:	4b18      	ldr	r3, [pc, #96]	; (8014150 <tcp_keepalive+0x74>)
 80140f0:	f640 0224 	movw	r2, #2084	; 0x824
 80140f4:	4917      	ldr	r1, [pc, #92]	; (8014154 <tcp_keepalive+0x78>)
 80140f6:	4818      	ldr	r0, [pc, #96]	; (8014158 <tcp_keepalive+0x7c>)
 80140f8:	f002 ff28 	bl	8016f4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80140fc:	7dfb      	ldrb	r3, [r7, #23]
 80140fe:	b29c      	uxth	r4, r3
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014104:	3b01      	subs	r3, #1
 8014106:	4618      	mov	r0, r3
 8014108:	f7f8 fa95 	bl	800c636 <lwip_htonl>
 801410c:	4603      	mov	r3, r0
 801410e:	2200      	movs	r2, #0
 8014110:	4621      	mov	r1, r4
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f7ff fe66 	bl	8013de4 <tcp_output_alloc_header>
 8014118:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d102      	bne.n	8014126 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014124:	e010      	b.n	8014148 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014126:	7dfb      	ldrb	r3, [r7, #23]
 8014128:	2200      	movs	r2, #0
 801412a:	6939      	ldr	r1, [r7, #16]
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f7ff fe97 	bl	8013e60 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	3304      	adds	r3, #4
 8014138:	6939      	ldr	r1, [r7, #16]
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f7ff fed0 	bl	8013ee0 <tcp_output_control_segment>
 8014140:	4603      	mov	r3, r0
 8014142:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014144:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014148:	4618      	mov	r0, r3
 801414a:	371c      	adds	r7, #28
 801414c:	46bd      	mov	sp, r7
 801414e:	bd90      	pop	{r4, r7, pc}
 8014150:	0801ae80 	.word	0x0801ae80
 8014154:	0801b65c 	.word	0x0801b65c
 8014158:	0801aed4 	.word	0x0801aed4

0801415c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801415c:	b590      	push	{r4, r7, lr}
 801415e:	b08b      	sub	sp, #44	; 0x2c
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014164:	2300      	movs	r3, #0
 8014166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d106      	bne.n	801417e <tcp_zero_window_probe+0x22>
 8014170:	4b4c      	ldr	r3, [pc, #304]	; (80142a4 <tcp_zero_window_probe+0x148>)
 8014172:	f640 024f 	movw	r2, #2127	; 0x84f
 8014176:	494c      	ldr	r1, [pc, #304]	; (80142a8 <tcp_zero_window_probe+0x14c>)
 8014178:	484c      	ldr	r0, [pc, #304]	; (80142ac <tcp_zero_window_probe+0x150>)
 801417a:	f002 fee7 	bl	8016f4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014182:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014184:	6a3b      	ldr	r3, [r7, #32]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d101      	bne.n	801418e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801418a:	2300      	movs	r3, #0
 801418c:	e086      	b.n	801429c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014194:	2bff      	cmp	r3, #255	; 0xff
 8014196:	d007      	beq.n	80141a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801419e:	3301      	adds	r3, #1
 80141a0:	b2da      	uxtb	r2, r3
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80141a8:	6a3b      	ldr	r3, [r7, #32]
 80141aa:	68db      	ldr	r3, [r3, #12]
 80141ac:	899b      	ldrh	r3, [r3, #12]
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7f8 fa2b 	bl	800c60c <lwip_htons>
 80141b6:	4603      	mov	r3, r0
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	f003 0301 	and.w	r3, r3, #1
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d005      	beq.n	80141ce <tcp_zero_window_probe+0x72>
 80141c2:	6a3b      	ldr	r3, [r7, #32]
 80141c4:	891b      	ldrh	r3, [r3, #8]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d101      	bne.n	80141ce <tcp_zero_window_probe+0x72>
 80141ca:	2301      	movs	r3, #1
 80141cc:	e000      	b.n	80141d0 <tcp_zero_window_probe+0x74>
 80141ce:	2300      	movs	r3, #0
 80141d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80141d2:	7ffb      	ldrb	r3, [r7, #31]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	bf0c      	ite	eq
 80141d8:	2301      	moveq	r3, #1
 80141da:	2300      	movne	r3, #0
 80141dc:	b2db      	uxtb	r3, r3
 80141de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80141e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141e4:	b299      	uxth	r1, r3
 80141e6:	6a3b      	ldr	r3, [r7, #32]
 80141e8:	68db      	ldr	r3, [r3, #12]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	8bba      	ldrh	r2, [r7, #28]
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f7ff fdf8 	bl	8013de4 <tcp_output_alloc_header>
 80141f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80141f6:	69bb      	ldr	r3, [r7, #24]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d102      	bne.n	8014202 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80141fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014200:	e04c      	b.n	801429c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014202:	69bb      	ldr	r3, [r7, #24]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014208:	7ffb      	ldrb	r3, [r7, #31]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d011      	beq.n	8014232 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	899b      	ldrh	r3, [r3, #12]
 8014212:	b29b      	uxth	r3, r3
 8014214:	b21b      	sxth	r3, r3
 8014216:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801421a:	b21c      	sxth	r4, r3
 801421c:	2011      	movs	r0, #17
 801421e:	f7f8 f9f5 	bl	800c60c <lwip_htons>
 8014222:	4603      	mov	r3, r0
 8014224:	b21b      	sxth	r3, r3
 8014226:	4323      	orrs	r3, r4
 8014228:	b21b      	sxth	r3, r3
 801422a:	b29a      	uxth	r2, r3
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	819a      	strh	r2, [r3, #12]
 8014230:	e010      	b.n	8014254 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	3314      	adds	r3, #20
 8014238:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801423a:	6a3b      	ldr	r3, [r7, #32]
 801423c:	6858      	ldr	r0, [r3, #4]
 801423e:	6a3b      	ldr	r3, [r7, #32]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	891a      	ldrh	r2, [r3, #8]
 8014244:	6a3b      	ldr	r3, [r7, #32]
 8014246:	891b      	ldrh	r3, [r3, #8]
 8014248:	1ad3      	subs	r3, r2, r3
 801424a:	b29b      	uxth	r3, r3
 801424c:	2201      	movs	r2, #1
 801424e:	6939      	ldr	r1, [r7, #16]
 8014250:	f7f9 ff58 	bl	800e104 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014254:	6a3b      	ldr	r3, [r7, #32]
 8014256:	68db      	ldr	r3, [r3, #12]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	4618      	mov	r0, r3
 801425c:	f7f8 f9eb 	bl	800c636 <lwip_htonl>
 8014260:	4603      	mov	r3, r0
 8014262:	3301      	adds	r3, #1
 8014264:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	1ad3      	subs	r3, r2, r3
 801426e:	2b00      	cmp	r3, #0
 8014270:	da02      	bge.n	8014278 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	68fa      	ldr	r2, [r7, #12]
 8014276:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801427c:	2200      	movs	r2, #0
 801427e:	69b9      	ldr	r1, [r7, #24]
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f7ff fded 	bl	8013e60 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	3304      	adds	r3, #4
 801428c:	69b9      	ldr	r1, [r7, #24]
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7ff fe26 	bl	8013ee0 <tcp_output_control_segment>
 8014294:	4603      	mov	r3, r0
 8014296:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014298:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801429c:	4618      	mov	r0, r3
 801429e:	372c      	adds	r7, #44	; 0x2c
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd90      	pop	{r4, r7, pc}
 80142a4:	0801ae80 	.word	0x0801ae80
 80142a8:	0801b678 	.word	0x0801b678
 80142ac:	0801aed4 	.word	0x0801aed4

080142b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80142b8:	f7fa f812 	bl	800e2e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80142bc:	4b0a      	ldr	r3, [pc, #40]	; (80142e8 <tcpip_tcp_timer+0x38>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d103      	bne.n	80142cc <tcpip_tcp_timer+0x1c>
 80142c4:	4b09      	ldr	r3, [pc, #36]	; (80142ec <tcpip_tcp_timer+0x3c>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d005      	beq.n	80142d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80142cc:	2200      	movs	r2, #0
 80142ce:	4908      	ldr	r1, [pc, #32]	; (80142f0 <tcpip_tcp_timer+0x40>)
 80142d0:	20fa      	movs	r0, #250	; 0xfa
 80142d2:	f000 f8f3 	bl	80144bc <sys_timeout>
 80142d6:	e003      	b.n	80142e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80142d8:	4b06      	ldr	r3, [pc, #24]	; (80142f4 <tcpip_tcp_timer+0x44>)
 80142da:	2200      	movs	r2, #0
 80142dc:	601a      	str	r2, [r3, #0]
  }
}
 80142de:	bf00      	nop
 80142e0:	bf00      	nop
 80142e2:	3708      	adds	r7, #8
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	200114cc 	.word	0x200114cc
 80142ec:	200114dc 	.word	0x200114dc
 80142f0:	080142b1 	.word	0x080142b1
 80142f4:	200016e4 	.word	0x200016e4

080142f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80142fc:	4b0a      	ldr	r3, [pc, #40]	; (8014328 <tcp_timer_needed+0x30>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d10f      	bne.n	8014324 <tcp_timer_needed+0x2c>
 8014304:	4b09      	ldr	r3, [pc, #36]	; (801432c <tcp_timer_needed+0x34>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d103      	bne.n	8014314 <tcp_timer_needed+0x1c>
 801430c:	4b08      	ldr	r3, [pc, #32]	; (8014330 <tcp_timer_needed+0x38>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d007      	beq.n	8014324 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014314:	4b04      	ldr	r3, [pc, #16]	; (8014328 <tcp_timer_needed+0x30>)
 8014316:	2201      	movs	r2, #1
 8014318:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801431a:	2200      	movs	r2, #0
 801431c:	4905      	ldr	r1, [pc, #20]	; (8014334 <tcp_timer_needed+0x3c>)
 801431e:	20fa      	movs	r0, #250	; 0xfa
 8014320:	f000 f8cc 	bl	80144bc <sys_timeout>
  }
}
 8014324:	bf00      	nop
 8014326:	bd80      	pop	{r7, pc}
 8014328:	200016e4 	.word	0x200016e4
 801432c:	200114cc 	.word	0x200114cc
 8014330:	200114dc 	.word	0x200114dc
 8014334:	080142b1 	.word	0x080142b1

08014338 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b086      	sub	sp, #24
 801433c:	af00      	add	r7, sp, #0
 801433e:	60f8      	str	r0, [r7, #12]
 8014340:	60b9      	str	r1, [r7, #8]
 8014342:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014344:	2006      	movs	r0, #6
 8014346:	f7f8 fe95 	bl	800d074 <memp_malloc>
 801434a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d109      	bne.n	8014366 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d151      	bne.n	80143fc <sys_timeout_abs+0xc4>
 8014358:	4b2a      	ldr	r3, [pc, #168]	; (8014404 <sys_timeout_abs+0xcc>)
 801435a:	22be      	movs	r2, #190	; 0xbe
 801435c:	492a      	ldr	r1, [pc, #168]	; (8014408 <sys_timeout_abs+0xd0>)
 801435e:	482b      	ldr	r0, [pc, #172]	; (801440c <sys_timeout_abs+0xd4>)
 8014360:	f002 fdf4 	bl	8016f4c <iprintf>
    return;
 8014364:	e04a      	b.n	80143fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	2200      	movs	r2, #0
 801436a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	68ba      	ldr	r2, [r7, #8]
 8014370:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	687a      	ldr	r2, [r7, #4]
 8014376:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014378:	693b      	ldr	r3, [r7, #16]
 801437a:	68fa      	ldr	r2, [r7, #12]
 801437c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801437e:	4b24      	ldr	r3, [pc, #144]	; (8014410 <sys_timeout_abs+0xd8>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d103      	bne.n	801438e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014386:	4a22      	ldr	r2, [pc, #136]	; (8014410 <sys_timeout_abs+0xd8>)
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	6013      	str	r3, [r2, #0]
    return;
 801438c:	e037      	b.n	80143fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	685a      	ldr	r2, [r3, #4]
 8014392:	4b1f      	ldr	r3, [pc, #124]	; (8014410 <sys_timeout_abs+0xd8>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	1ad3      	subs	r3, r2, r3
 801439a:	0fdb      	lsrs	r3, r3, #31
 801439c:	f003 0301 	and.w	r3, r3, #1
 80143a0:	b2db      	uxtb	r3, r3
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d007      	beq.n	80143b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80143a6:	4b1a      	ldr	r3, [pc, #104]	; (8014410 <sys_timeout_abs+0xd8>)
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80143ae:	4a18      	ldr	r2, [pc, #96]	; (8014410 <sys_timeout_abs+0xd8>)
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	6013      	str	r3, [r2, #0]
 80143b4:	e023      	b.n	80143fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80143b6:	4b16      	ldr	r3, [pc, #88]	; (8014410 <sys_timeout_abs+0xd8>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	617b      	str	r3, [r7, #20]
 80143bc:	e01a      	b.n	80143f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d00b      	beq.n	80143de <sys_timeout_abs+0xa6>
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	685a      	ldr	r2, [r3, #4]
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	685b      	ldr	r3, [r3, #4]
 80143d0:	1ad3      	subs	r3, r2, r3
 80143d2:	0fdb      	lsrs	r3, r3, #31
 80143d4:	f003 0301 	and.w	r3, r3, #1
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d007      	beq.n	80143ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	681a      	ldr	r2, [r3, #0]
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80143e6:	697b      	ldr	r3, [r7, #20]
 80143e8:	693a      	ldr	r2, [r7, #16]
 80143ea:	601a      	str	r2, [r3, #0]
        break;
 80143ec:	e007      	b.n	80143fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	617b      	str	r3, [r7, #20]
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d1e1      	bne.n	80143be <sys_timeout_abs+0x86>
 80143fa:	e000      	b.n	80143fe <sys_timeout_abs+0xc6>
    return;
 80143fc:	bf00      	nop
      }
    }
  }
}
 80143fe:	3718      	adds	r7, #24
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	0801b69c 	.word	0x0801b69c
 8014408:	0801b6d0 	.word	0x0801b6d0
 801440c:	0801b710 	.word	0x0801b710
 8014410:	200016dc 	.word	0x200016dc

08014414 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b086      	sub	sp, #24
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014420:	697b      	ldr	r3, [r7, #20]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	4798      	blx	r3

  now = sys_now();
 8014426:	f7f3 fc9b 	bl	8007d60 <sys_now>
 801442a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	4b0f      	ldr	r3, [pc, #60]	; (8014470 <lwip_cyclic_timer+0x5c>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	4413      	add	r3, r2
 8014436:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014438:	68fa      	ldr	r2, [r7, #12]
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	1ad3      	subs	r3, r2, r3
 801443e:	0fdb      	lsrs	r3, r3, #31
 8014440:	f003 0301 	and.w	r3, r3, #1
 8014444:	b2db      	uxtb	r3, r3
 8014446:	2b00      	cmp	r3, #0
 8014448:	d009      	beq.n	801445e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	4413      	add	r3, r2
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	4907      	ldr	r1, [pc, #28]	; (8014474 <lwip_cyclic_timer+0x60>)
 8014456:	4618      	mov	r0, r3
 8014458:	f7ff ff6e 	bl	8014338 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801445c:	e004      	b.n	8014468 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801445e:	687a      	ldr	r2, [r7, #4]
 8014460:	4904      	ldr	r1, [pc, #16]	; (8014474 <lwip_cyclic_timer+0x60>)
 8014462:	68f8      	ldr	r0, [r7, #12]
 8014464:	f7ff ff68 	bl	8014338 <sys_timeout_abs>
}
 8014468:	bf00      	nop
 801446a:	3718      	adds	r7, #24
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	200016e0 	.word	0x200016e0
 8014474:	08014415 	.word	0x08014415

08014478 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801447e:	2301      	movs	r3, #1
 8014480:	607b      	str	r3, [r7, #4]
 8014482:	e00e      	b.n	80144a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014484:	4a0b      	ldr	r2, [pc, #44]	; (80144b4 <sys_timeouts_init+0x3c>)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	00db      	lsls	r3, r3, #3
 8014490:	4a08      	ldr	r2, [pc, #32]	; (80144b4 <sys_timeouts_init+0x3c>)
 8014492:	4413      	add	r3, r2
 8014494:	461a      	mov	r2, r3
 8014496:	4908      	ldr	r1, [pc, #32]	; (80144b8 <sys_timeouts_init+0x40>)
 8014498:	f000 f810 	bl	80144bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	3301      	adds	r3, #1
 80144a0:	607b      	str	r3, [r7, #4]
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2b02      	cmp	r3, #2
 80144a6:	d9ed      	bls.n	8014484 <sys_timeouts_init+0xc>
  }
}
 80144a8:	bf00      	nop
 80144aa:	bf00      	nop
 80144ac:	3708      	adds	r7, #8
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	0801eabc 	.word	0x0801eabc
 80144b8:	08014415 	.word	0x08014415

080144bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b086      	sub	sp, #24
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	60f8      	str	r0, [r7, #12]
 80144c4:	60b9      	str	r1, [r7, #8]
 80144c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80144ce:	d306      	bcc.n	80144de <sys_timeout+0x22>
 80144d0:	4b0a      	ldr	r3, [pc, #40]	; (80144fc <sys_timeout+0x40>)
 80144d2:	f240 1229 	movw	r2, #297	; 0x129
 80144d6:	490a      	ldr	r1, [pc, #40]	; (8014500 <sys_timeout+0x44>)
 80144d8:	480a      	ldr	r0, [pc, #40]	; (8014504 <sys_timeout+0x48>)
 80144da:	f002 fd37 	bl	8016f4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80144de:	f7f3 fc3f 	bl	8007d60 <sys_now>
 80144e2:	4602      	mov	r2, r0
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	4413      	add	r3, r2
 80144e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80144ea:	687a      	ldr	r2, [r7, #4]
 80144ec:	68b9      	ldr	r1, [r7, #8]
 80144ee:	6978      	ldr	r0, [r7, #20]
 80144f0:	f7ff ff22 	bl	8014338 <sys_timeout_abs>
#endif
}
 80144f4:	bf00      	nop
 80144f6:	3718      	adds	r7, #24
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}
 80144fc:	0801b69c 	.word	0x0801b69c
 8014500:	0801b738 	.word	0x0801b738
 8014504:	0801b710 	.word	0x0801b710

08014508 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b084      	sub	sp, #16
 801450c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801450e:	f7f3 fc27 	bl	8007d60 <sys_now>
 8014512:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8014514:	4b1a      	ldr	r3, [pc, #104]	; (8014580 <sys_check_timeouts+0x78>)
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	b2db      	uxtb	r3, r3
 801451a:	2b00      	cmp	r3, #0
 801451c:	d001      	beq.n	8014522 <sys_check_timeouts+0x1a>
 801451e:	f7f9 f8cd 	bl	800d6bc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8014522:	4b18      	ldr	r3, [pc, #96]	; (8014584 <sys_check_timeouts+0x7c>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d022      	beq.n	8014574 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	68fa      	ldr	r2, [r7, #12]
 8014534:	1ad3      	subs	r3, r2, r3
 8014536:	0fdb      	lsrs	r3, r3, #31
 8014538:	f003 0301 	and.w	r3, r3, #1
 801453c:	b2db      	uxtb	r3, r3
 801453e:	2b00      	cmp	r3, #0
 8014540:	d11a      	bne.n	8014578 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	4a0f      	ldr	r2, [pc, #60]	; (8014584 <sys_check_timeouts+0x7c>)
 8014548:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	689b      	ldr	r3, [r3, #8]
 801454e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	68db      	ldr	r3, [r3, #12]
 8014554:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014556:	68bb      	ldr	r3, [r7, #8]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	4a0b      	ldr	r2, [pc, #44]	; (8014588 <sys_check_timeouts+0x80>)
 801455c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801455e:	68b9      	ldr	r1, [r7, #8]
 8014560:	2006      	movs	r0, #6
 8014562:	f7f8 fdd3 	bl	800d10c <memp_free>
    if (handler != NULL) {
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d0d3      	beq.n	8014514 <sys_check_timeouts+0xc>
      handler(arg);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	6838      	ldr	r0, [r7, #0]
 8014570:	4798      	blx	r3
  do {
 8014572:	e7cf      	b.n	8014514 <sys_check_timeouts+0xc>
      return;
 8014574:	bf00      	nop
 8014576:	e000      	b.n	801457a <sys_check_timeouts+0x72>
      return;
 8014578:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801457a:	3710      	adds	r7, #16
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	200114c4 	.word	0x200114c4
 8014584:	200016dc 	.word	0x200016dc
 8014588:	200016e0 	.word	0x200016e0

0801458c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014590:	f002 fd6a 	bl	8017068 <rand>
 8014594:	4603      	mov	r3, r0
 8014596:	b29b      	uxth	r3, r3
 8014598:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801459c:	b29b      	uxth	r3, r3
 801459e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80145a2:	b29a      	uxth	r2, r3
 80145a4:	4b01      	ldr	r3, [pc, #4]	; (80145ac <udp_init+0x20>)
 80145a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80145a8:	bf00      	nop
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	20000148 	.word	0x20000148

080145b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	4613      	mov	r3, r2
 80145bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d105      	bne.n	80145d0 <udp_input_local_match+0x20>
 80145c4:	4b27      	ldr	r3, [pc, #156]	; (8014664 <udp_input_local_match+0xb4>)
 80145c6:	2287      	movs	r2, #135	; 0x87
 80145c8:	4927      	ldr	r1, [pc, #156]	; (8014668 <udp_input_local_match+0xb8>)
 80145ca:	4828      	ldr	r0, [pc, #160]	; (801466c <udp_input_local_match+0xbc>)
 80145cc:	f002 fcbe 	bl	8016f4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d105      	bne.n	80145e2 <udp_input_local_match+0x32>
 80145d6:	4b23      	ldr	r3, [pc, #140]	; (8014664 <udp_input_local_match+0xb4>)
 80145d8:	2288      	movs	r2, #136	; 0x88
 80145da:	4925      	ldr	r1, [pc, #148]	; (8014670 <udp_input_local_match+0xc0>)
 80145dc:	4823      	ldr	r0, [pc, #140]	; (801466c <udp_input_local_match+0xbc>)
 80145de:	f002 fcb5 	bl	8016f4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	7a1b      	ldrb	r3, [r3, #8]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d00b      	beq.n	8014602 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	7a1a      	ldrb	r2, [r3, #8]
 80145ee:	4b21      	ldr	r3, [pc, #132]	; (8014674 <udp_input_local_match+0xc4>)
 80145f0:	685b      	ldr	r3, [r3, #4]
 80145f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80145f6:	3301      	adds	r3, #1
 80145f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d001      	beq.n	8014602 <udp_input_local_match+0x52>
    return 0;
 80145fe:	2300      	movs	r3, #0
 8014600:	e02b      	b.n	801465a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014602:	79fb      	ldrb	r3, [r7, #7]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d018      	beq.n	801463a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d013      	beq.n	8014636 <udp_input_local_match+0x86>
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d00f      	beq.n	8014636 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014616:	4b17      	ldr	r3, [pc, #92]	; (8014674 <udp_input_local_match+0xc4>)
 8014618:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801461a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801461e:	d00a      	beq.n	8014636 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	681a      	ldr	r2, [r3, #0]
 8014624:	4b13      	ldr	r3, [pc, #76]	; (8014674 <udp_input_local_match+0xc4>)
 8014626:	695b      	ldr	r3, [r3, #20]
 8014628:	405a      	eors	r2, r3
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	3308      	adds	r3, #8
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014632:	2b00      	cmp	r3, #0
 8014634:	d110      	bne.n	8014658 <udp_input_local_match+0xa8>
          return 1;
 8014636:	2301      	movs	r3, #1
 8014638:	e00f      	b.n	801465a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d009      	beq.n	8014654 <udp_input_local_match+0xa4>
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d005      	beq.n	8014654 <udp_input_local_match+0xa4>
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	4b09      	ldr	r3, [pc, #36]	; (8014674 <udp_input_local_match+0xc4>)
 801464e:	695b      	ldr	r3, [r3, #20]
 8014650:	429a      	cmp	r2, r3
 8014652:	d101      	bne.n	8014658 <udp_input_local_match+0xa8>
        return 1;
 8014654:	2301      	movs	r3, #1
 8014656:	e000      	b.n	801465a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014658:	2300      	movs	r3, #0
}
 801465a:	4618      	mov	r0, r3
 801465c:	3710      	adds	r7, #16
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	0801b784 	.word	0x0801b784
 8014668:	0801b7b4 	.word	0x0801b7b4
 801466c:	0801b7d8 	.word	0x0801b7d8
 8014670:	0801b800 	.word	0x0801b800
 8014674:	2000df88 	.word	0x2000df88

08014678 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014678:	b590      	push	{r4, r7, lr}
 801467a:	b08d      	sub	sp, #52	; 0x34
 801467c:	af02      	add	r7, sp, #8
 801467e:	6078      	str	r0, [r7, #4]
 8014680:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014682:	2300      	movs	r3, #0
 8014684:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d105      	bne.n	8014698 <udp_input+0x20>
 801468c:	4b7c      	ldr	r3, [pc, #496]	; (8014880 <udp_input+0x208>)
 801468e:	22cf      	movs	r2, #207	; 0xcf
 8014690:	497c      	ldr	r1, [pc, #496]	; (8014884 <udp_input+0x20c>)
 8014692:	487d      	ldr	r0, [pc, #500]	; (8014888 <udp_input+0x210>)
 8014694:	f002 fc5a 	bl	8016f4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d105      	bne.n	80146aa <udp_input+0x32>
 801469e:	4b78      	ldr	r3, [pc, #480]	; (8014880 <udp_input+0x208>)
 80146a0:	22d0      	movs	r2, #208	; 0xd0
 80146a2:	497a      	ldr	r1, [pc, #488]	; (801488c <udp_input+0x214>)
 80146a4:	4878      	ldr	r0, [pc, #480]	; (8014888 <udp_input+0x210>)
 80146a6:	f002 fc51 	bl	8016f4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	895b      	ldrh	r3, [r3, #10]
 80146ae:	2b07      	cmp	r3, #7
 80146b0:	d803      	bhi.n	80146ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7f9 fb3c 	bl	800dd30 <pbuf_free>
    goto end;
 80146b8:	e0de      	b.n	8014878 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80146c0:	4b73      	ldr	r3, [pc, #460]	; (8014890 <udp_input+0x218>)
 80146c2:	695b      	ldr	r3, [r3, #20]
 80146c4:	4a72      	ldr	r2, [pc, #456]	; (8014890 <udp_input+0x218>)
 80146c6:	6812      	ldr	r2, [r2, #0]
 80146c8:	4611      	mov	r1, r2
 80146ca:	4618      	mov	r0, r3
 80146cc:	f001 fc88 	bl	8015fe0 <ip4_addr_isbroadcast_u32>
 80146d0:	4603      	mov	r3, r0
 80146d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	881b      	ldrh	r3, [r3, #0]
 80146d8:	b29b      	uxth	r3, r3
 80146da:	4618      	mov	r0, r3
 80146dc:	f7f7 ff96 	bl	800c60c <lwip_htons>
 80146e0:	4603      	mov	r3, r0
 80146e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	885b      	ldrh	r3, [r3, #2]
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7f7 ff8e 	bl	800c60c <lwip_htons>
 80146f0:	4603      	mov	r3, r0
 80146f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80146f4:	2300      	movs	r3, #0
 80146f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80146f8:	2300      	movs	r3, #0
 80146fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80146fc:	2300      	movs	r3, #0
 80146fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014700:	4b64      	ldr	r3, [pc, #400]	; (8014894 <udp_input+0x21c>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	627b      	str	r3, [r7, #36]	; 0x24
 8014706:	e054      	b.n	80147b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470a:	8a5b      	ldrh	r3, [r3, #18]
 801470c:	89fa      	ldrh	r2, [r7, #14]
 801470e:	429a      	cmp	r2, r3
 8014710:	d14a      	bne.n	80147a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014712:	7cfb      	ldrb	r3, [r7, #19]
 8014714:	461a      	mov	r2, r3
 8014716:	6839      	ldr	r1, [r7, #0]
 8014718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801471a:	f7ff ff49 	bl	80145b0 <udp_input_local_match>
 801471e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014720:	2b00      	cmp	r3, #0
 8014722:	d041      	beq.n	80147a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014726:	7c1b      	ldrb	r3, [r3, #16]
 8014728:	f003 0304 	and.w	r3, r3, #4
 801472c:	2b00      	cmp	r3, #0
 801472e:	d11d      	bne.n	801476c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014730:	69fb      	ldr	r3, [r7, #28]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d102      	bne.n	801473c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014738:	61fb      	str	r3, [r7, #28]
 801473a:	e017      	b.n	801476c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801473c:	7cfb      	ldrb	r3, [r7, #19]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d014      	beq.n	801476c <udp_input+0xf4>
 8014742:	4b53      	ldr	r3, [pc, #332]	; (8014890 <udp_input+0x218>)
 8014744:	695b      	ldr	r3, [r3, #20]
 8014746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801474a:	d10f      	bne.n	801476c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	3304      	adds	r3, #4
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	429a      	cmp	r2, r3
 8014758:	d008      	beq.n	801476c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	3304      	adds	r3, #4
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	429a      	cmp	r2, r3
 8014766:	d101      	bne.n	801476c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476e:	8a9b      	ldrh	r3, [r3, #20]
 8014770:	8a3a      	ldrh	r2, [r7, #16]
 8014772:	429a      	cmp	r2, r3
 8014774:	d118      	bne.n	80147a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014778:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801477a:	2b00      	cmp	r3, #0
 801477c:	d005      	beq.n	801478a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	685a      	ldr	r2, [r3, #4]
 8014782:	4b43      	ldr	r3, [pc, #268]	; (8014890 <udp_input+0x218>)
 8014784:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014786:	429a      	cmp	r2, r3
 8014788:	d10e      	bne.n	80147a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801478a:	6a3b      	ldr	r3, [r7, #32]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d014      	beq.n	80147ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014792:	68da      	ldr	r2, [r3, #12]
 8014794:	6a3b      	ldr	r3, [r7, #32]
 8014796:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014798:	4b3e      	ldr	r3, [pc, #248]	; (8014894 <udp_input+0x21c>)
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801479e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80147a0:	4a3c      	ldr	r2, [pc, #240]	; (8014894 <udp_input+0x21c>)
 80147a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80147a6:	e008      	b.n	80147ba <udp_input+0x142>
      }
    }

    prev = pcb;
 80147a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80147ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ae:	68db      	ldr	r3, [r3, #12]
 80147b0:	627b      	str	r3, [r7, #36]	; 0x24
 80147b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d1a7      	bne.n	8014708 <udp_input+0x90>
 80147b8:	e000      	b.n	80147bc <udp_input+0x144>
        break;
 80147ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80147bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d101      	bne.n	80147c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80147c2:	69fb      	ldr	r3, [r7, #28]
 80147c4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80147c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d002      	beq.n	80147d2 <udp_input+0x15a>
    for_us = 1;
 80147cc:	2301      	movs	r3, #1
 80147ce:	76fb      	strb	r3, [r7, #27]
 80147d0:	e00a      	b.n	80147e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	3304      	adds	r3, #4
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	4b2d      	ldr	r3, [pc, #180]	; (8014890 <udp_input+0x218>)
 80147da:	695b      	ldr	r3, [r3, #20]
 80147dc:	429a      	cmp	r2, r3
 80147de:	bf0c      	ite	eq
 80147e0:	2301      	moveq	r3, #1
 80147e2:	2300      	movne	r3, #0
 80147e4:	b2db      	uxtb	r3, r3
 80147e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80147e8:	7efb      	ldrb	r3, [r7, #27]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d041      	beq.n	8014872 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80147ee:	2108      	movs	r1, #8
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7f9 fa17 	bl	800dc24 <pbuf_remove_header>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d00a      	beq.n	8014812 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80147fc:	4b20      	ldr	r3, [pc, #128]	; (8014880 <udp_input+0x208>)
 80147fe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014802:	4925      	ldr	r1, [pc, #148]	; (8014898 <udp_input+0x220>)
 8014804:	4820      	ldr	r0, [pc, #128]	; (8014888 <udp_input+0x210>)
 8014806:	f002 fba1 	bl	8016f4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f7f9 fa90 	bl	800dd30 <pbuf_free>
      goto end;
 8014810:	e032      	b.n	8014878 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014814:	2b00      	cmp	r3, #0
 8014816:	d012      	beq.n	801483e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481a:	699b      	ldr	r3, [r3, #24]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d00a      	beq.n	8014836 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014822:	699c      	ldr	r4, [r3, #24]
 8014824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014826:	69d8      	ldr	r0, [r3, #28]
 8014828:	8a3b      	ldrh	r3, [r7, #16]
 801482a:	9300      	str	r3, [sp, #0]
 801482c:	4b1b      	ldr	r3, [pc, #108]	; (801489c <udp_input+0x224>)
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014832:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014834:	e021      	b.n	801487a <udp_input+0x202>
        pbuf_free(p);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f7f9 fa7a 	bl	800dd30 <pbuf_free>
        goto end;
 801483c:	e01c      	b.n	8014878 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801483e:	7cfb      	ldrb	r3, [r7, #19]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d112      	bne.n	801486a <udp_input+0x1f2>
 8014844:	4b12      	ldr	r3, [pc, #72]	; (8014890 <udp_input+0x218>)
 8014846:	695b      	ldr	r3, [r3, #20]
 8014848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801484c:	2be0      	cmp	r3, #224	; 0xe0
 801484e:	d00c      	beq.n	801486a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014850:	4b0f      	ldr	r3, [pc, #60]	; (8014890 <udp_input+0x218>)
 8014852:	899b      	ldrh	r3, [r3, #12]
 8014854:	3308      	adds	r3, #8
 8014856:	b29b      	uxth	r3, r3
 8014858:	b21b      	sxth	r3, r3
 801485a:	4619      	mov	r1, r3
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f7f9 fa54 	bl	800dd0a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014862:	2103      	movs	r1, #3
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f001 f89b 	bl	80159a0 <icmp_dest_unreach>
      pbuf_free(p);
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f7f9 fa60 	bl	800dd30 <pbuf_free>
  return;
 8014870:	e003      	b.n	801487a <udp_input+0x202>
    pbuf_free(p);
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f7f9 fa5c 	bl	800dd30 <pbuf_free>
  return;
 8014878:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801487a:	372c      	adds	r7, #44	; 0x2c
 801487c:	46bd      	mov	sp, r7
 801487e:	bd90      	pop	{r4, r7, pc}
 8014880:	0801b784 	.word	0x0801b784
 8014884:	0801b828 	.word	0x0801b828
 8014888:	0801b7d8 	.word	0x0801b7d8
 801488c:	0801b840 	.word	0x0801b840
 8014890:	2000df88 	.word	0x2000df88
 8014894:	200114e4 	.word	0x200114e4
 8014898:	0801b85c 	.word	0x0801b85c
 801489c:	2000df98 	.word	0x2000df98

080148a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80148a0:	b480      	push	{r7}
 80148a2:	b085      	sub	sp, #20
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d01e      	beq.n	80148ee <udp_netif_ip_addr_changed+0x4e>
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d01a      	beq.n	80148ee <udp_netif_ip_addr_changed+0x4e>
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d017      	beq.n	80148ee <udp_netif_ip_addr_changed+0x4e>
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d013      	beq.n	80148ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80148c6:	4b0d      	ldr	r3, [pc, #52]	; (80148fc <udp_netif_ip_addr_changed+0x5c>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	60fb      	str	r3, [r7, #12]
 80148cc:	e00c      	b.n	80148e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d103      	bne.n	80148e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	681a      	ldr	r2, [r3, #0]
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	60fb      	str	r3, [r7, #12]
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d1ef      	bne.n	80148ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80148ee:	bf00      	nop
 80148f0:	3714      	adds	r7, #20
 80148f2:	46bd      	mov	sp, r7
 80148f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f8:	4770      	bx	lr
 80148fa:	bf00      	nop
 80148fc:	200114e4 	.word	0x200114e4

08014900 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014908:	4915      	ldr	r1, [pc, #84]	; (8014960 <etharp_free_entry+0x60>)
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	4613      	mov	r3, r2
 801490e:	005b      	lsls	r3, r3, #1
 8014910:	4413      	add	r3, r2
 8014912:	00db      	lsls	r3, r3, #3
 8014914:	440b      	add	r3, r1
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d013      	beq.n	8014944 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801491c:	4910      	ldr	r1, [pc, #64]	; (8014960 <etharp_free_entry+0x60>)
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	4613      	mov	r3, r2
 8014922:	005b      	lsls	r3, r3, #1
 8014924:	4413      	add	r3, r2
 8014926:	00db      	lsls	r3, r3, #3
 8014928:	440b      	add	r3, r1
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	4618      	mov	r0, r3
 801492e:	f7f9 f9ff 	bl	800dd30 <pbuf_free>
    arp_table[i].q = NULL;
 8014932:	490b      	ldr	r1, [pc, #44]	; (8014960 <etharp_free_entry+0x60>)
 8014934:	687a      	ldr	r2, [r7, #4]
 8014936:	4613      	mov	r3, r2
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	4413      	add	r3, r2
 801493c:	00db      	lsls	r3, r3, #3
 801493e:	440b      	add	r3, r1
 8014940:	2200      	movs	r2, #0
 8014942:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014944:	4906      	ldr	r1, [pc, #24]	; (8014960 <etharp_free_entry+0x60>)
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	4613      	mov	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	00db      	lsls	r3, r3, #3
 8014950:	440b      	add	r3, r1
 8014952:	3314      	adds	r3, #20
 8014954:	2200      	movs	r2, #0
 8014956:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014958:	bf00      	nop
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	200016e8 	.word	0x200016e8

08014964 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801496a:	2300      	movs	r3, #0
 801496c:	607b      	str	r3, [r7, #4]
 801496e:	e096      	b.n	8014a9e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014970:	494f      	ldr	r1, [pc, #316]	; (8014ab0 <etharp_tmr+0x14c>)
 8014972:	687a      	ldr	r2, [r7, #4]
 8014974:	4613      	mov	r3, r2
 8014976:	005b      	lsls	r3, r3, #1
 8014978:	4413      	add	r3, r2
 801497a:	00db      	lsls	r3, r3, #3
 801497c:	440b      	add	r3, r1
 801497e:	3314      	adds	r3, #20
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014984:	78fb      	ldrb	r3, [r7, #3]
 8014986:	2b00      	cmp	r3, #0
 8014988:	f000 8086 	beq.w	8014a98 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801498c:	4948      	ldr	r1, [pc, #288]	; (8014ab0 <etharp_tmr+0x14c>)
 801498e:	687a      	ldr	r2, [r7, #4]
 8014990:	4613      	mov	r3, r2
 8014992:	005b      	lsls	r3, r3, #1
 8014994:	4413      	add	r3, r2
 8014996:	00db      	lsls	r3, r3, #3
 8014998:	440b      	add	r3, r1
 801499a:	3312      	adds	r3, #18
 801499c:	881b      	ldrh	r3, [r3, #0]
 801499e:	3301      	adds	r3, #1
 80149a0:	b298      	uxth	r0, r3
 80149a2:	4943      	ldr	r1, [pc, #268]	; (8014ab0 <etharp_tmr+0x14c>)
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	4613      	mov	r3, r2
 80149a8:	005b      	lsls	r3, r3, #1
 80149aa:	4413      	add	r3, r2
 80149ac:	00db      	lsls	r3, r3, #3
 80149ae:	440b      	add	r3, r1
 80149b0:	3312      	adds	r3, #18
 80149b2:	4602      	mov	r2, r0
 80149b4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80149b6:	493e      	ldr	r1, [pc, #248]	; (8014ab0 <etharp_tmr+0x14c>)
 80149b8:	687a      	ldr	r2, [r7, #4]
 80149ba:	4613      	mov	r3, r2
 80149bc:	005b      	lsls	r3, r3, #1
 80149be:	4413      	add	r3, r2
 80149c0:	00db      	lsls	r3, r3, #3
 80149c2:	440b      	add	r3, r1
 80149c4:	3312      	adds	r3, #18
 80149c6:	881b      	ldrh	r3, [r3, #0]
 80149c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80149cc:	d215      	bcs.n	80149fa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80149ce:	4938      	ldr	r1, [pc, #224]	; (8014ab0 <etharp_tmr+0x14c>)
 80149d0:	687a      	ldr	r2, [r7, #4]
 80149d2:	4613      	mov	r3, r2
 80149d4:	005b      	lsls	r3, r3, #1
 80149d6:	4413      	add	r3, r2
 80149d8:	00db      	lsls	r3, r3, #3
 80149da:	440b      	add	r3, r1
 80149dc:	3314      	adds	r3, #20
 80149de:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80149e0:	2b01      	cmp	r3, #1
 80149e2:	d10e      	bne.n	8014a02 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80149e4:	4932      	ldr	r1, [pc, #200]	; (8014ab0 <etharp_tmr+0x14c>)
 80149e6:	687a      	ldr	r2, [r7, #4]
 80149e8:	4613      	mov	r3, r2
 80149ea:	005b      	lsls	r3, r3, #1
 80149ec:	4413      	add	r3, r2
 80149ee:	00db      	lsls	r3, r3, #3
 80149f0:	440b      	add	r3, r1
 80149f2:	3312      	adds	r3, #18
 80149f4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80149f6:	2b04      	cmp	r3, #4
 80149f8:	d903      	bls.n	8014a02 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f7ff ff80 	bl	8014900 <etharp_free_entry>
 8014a00:	e04a      	b.n	8014a98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014a02:	492b      	ldr	r1, [pc, #172]	; (8014ab0 <etharp_tmr+0x14c>)
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	4613      	mov	r3, r2
 8014a08:	005b      	lsls	r3, r3, #1
 8014a0a:	4413      	add	r3, r2
 8014a0c:	00db      	lsls	r3, r3, #3
 8014a0e:	440b      	add	r3, r1
 8014a10:	3314      	adds	r3, #20
 8014a12:	781b      	ldrb	r3, [r3, #0]
 8014a14:	2b03      	cmp	r3, #3
 8014a16:	d10a      	bne.n	8014a2e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014a18:	4925      	ldr	r1, [pc, #148]	; (8014ab0 <etharp_tmr+0x14c>)
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	005b      	lsls	r3, r3, #1
 8014a20:	4413      	add	r3, r2
 8014a22:	00db      	lsls	r3, r3, #3
 8014a24:	440b      	add	r3, r1
 8014a26:	3314      	adds	r3, #20
 8014a28:	2204      	movs	r2, #4
 8014a2a:	701a      	strb	r2, [r3, #0]
 8014a2c:	e034      	b.n	8014a98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014a2e:	4920      	ldr	r1, [pc, #128]	; (8014ab0 <etharp_tmr+0x14c>)
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	4613      	mov	r3, r2
 8014a34:	005b      	lsls	r3, r3, #1
 8014a36:	4413      	add	r3, r2
 8014a38:	00db      	lsls	r3, r3, #3
 8014a3a:	440b      	add	r3, r1
 8014a3c:	3314      	adds	r3, #20
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	2b04      	cmp	r3, #4
 8014a42:	d10a      	bne.n	8014a5a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014a44:	491a      	ldr	r1, [pc, #104]	; (8014ab0 <etharp_tmr+0x14c>)
 8014a46:	687a      	ldr	r2, [r7, #4]
 8014a48:	4613      	mov	r3, r2
 8014a4a:	005b      	lsls	r3, r3, #1
 8014a4c:	4413      	add	r3, r2
 8014a4e:	00db      	lsls	r3, r3, #3
 8014a50:	440b      	add	r3, r1
 8014a52:	3314      	adds	r3, #20
 8014a54:	2202      	movs	r2, #2
 8014a56:	701a      	strb	r2, [r3, #0]
 8014a58:	e01e      	b.n	8014a98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014a5a:	4915      	ldr	r1, [pc, #84]	; (8014ab0 <etharp_tmr+0x14c>)
 8014a5c:	687a      	ldr	r2, [r7, #4]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	005b      	lsls	r3, r3, #1
 8014a62:	4413      	add	r3, r2
 8014a64:	00db      	lsls	r3, r3, #3
 8014a66:	440b      	add	r3, r1
 8014a68:	3314      	adds	r3, #20
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d113      	bne.n	8014a98 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014a70:	490f      	ldr	r1, [pc, #60]	; (8014ab0 <etharp_tmr+0x14c>)
 8014a72:	687a      	ldr	r2, [r7, #4]
 8014a74:	4613      	mov	r3, r2
 8014a76:	005b      	lsls	r3, r3, #1
 8014a78:	4413      	add	r3, r2
 8014a7a:	00db      	lsls	r3, r3, #3
 8014a7c:	440b      	add	r3, r1
 8014a7e:	3308      	adds	r3, #8
 8014a80:	6818      	ldr	r0, [r3, #0]
 8014a82:	687a      	ldr	r2, [r7, #4]
 8014a84:	4613      	mov	r3, r2
 8014a86:	005b      	lsls	r3, r3, #1
 8014a88:	4413      	add	r3, r2
 8014a8a:	00db      	lsls	r3, r3, #3
 8014a8c:	4a08      	ldr	r2, [pc, #32]	; (8014ab0 <etharp_tmr+0x14c>)
 8014a8e:	4413      	add	r3, r2
 8014a90:	3304      	adds	r3, #4
 8014a92:	4619      	mov	r1, r3
 8014a94:	f000 fe6e 	bl	8015774 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	607b      	str	r3, [r7, #4]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	2b09      	cmp	r3, #9
 8014aa2:	f77f af65 	ble.w	8014970 <etharp_tmr+0xc>
      }
    }
  }
}
 8014aa6:	bf00      	nop
 8014aa8:	bf00      	nop
 8014aaa:	3708      	adds	r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}
 8014ab0:	200016e8 	.word	0x200016e8

08014ab4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b08a      	sub	sp, #40	; 0x28
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	460b      	mov	r3, r1
 8014abe:	607a      	str	r2, [r7, #4]
 8014ac0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014ac2:	230a      	movs	r3, #10
 8014ac4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014ac6:	230a      	movs	r3, #10
 8014ac8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014aca:	230a      	movs	r3, #10
 8014acc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014ad2:	230a      	movs	r3, #10
 8014ad4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	83bb      	strh	r3, [r7, #28]
 8014ada:	2300      	movs	r3, #0
 8014adc:	837b      	strh	r3, [r7, #26]
 8014ade:	2300      	movs	r3, #0
 8014ae0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	843b      	strh	r3, [r7, #32]
 8014ae6:	e0ae      	b.n	8014c46 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014ae8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014aec:	49a6      	ldr	r1, [pc, #664]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014aee:	4613      	mov	r3, r2
 8014af0:	005b      	lsls	r3, r3, #1
 8014af2:	4413      	add	r3, r2
 8014af4:	00db      	lsls	r3, r3, #3
 8014af6:	440b      	add	r3, r1
 8014af8:	3314      	adds	r3, #20
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014afe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014b02:	2b0a      	cmp	r3, #10
 8014b04:	d105      	bne.n	8014b12 <etharp_find_entry+0x5e>
 8014b06:	7dfb      	ldrb	r3, [r7, #23]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d102      	bne.n	8014b12 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014b0c:	8c3b      	ldrh	r3, [r7, #32]
 8014b0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014b10:	e095      	b.n	8014c3e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014b12:	7dfb      	ldrb	r3, [r7, #23]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	f000 8092 	beq.w	8014c3e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014b1a:	7dfb      	ldrb	r3, [r7, #23]
 8014b1c:	2b01      	cmp	r3, #1
 8014b1e:	d009      	beq.n	8014b34 <etharp_find_entry+0x80>
 8014b20:	7dfb      	ldrb	r3, [r7, #23]
 8014b22:	2b01      	cmp	r3, #1
 8014b24:	d806      	bhi.n	8014b34 <etharp_find_entry+0x80>
 8014b26:	4b99      	ldr	r3, [pc, #612]	; (8014d8c <etharp_find_entry+0x2d8>)
 8014b28:	f240 1223 	movw	r2, #291	; 0x123
 8014b2c:	4998      	ldr	r1, [pc, #608]	; (8014d90 <etharp_find_entry+0x2dc>)
 8014b2e:	4899      	ldr	r0, [pc, #612]	; (8014d94 <etharp_find_entry+0x2e0>)
 8014b30:	f002 fa0c 	bl	8016f4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d020      	beq.n	8014b7c <etharp_find_entry+0xc8>
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	6819      	ldr	r1, [r3, #0]
 8014b3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b42:	4891      	ldr	r0, [pc, #580]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014b44:	4613      	mov	r3, r2
 8014b46:	005b      	lsls	r3, r3, #1
 8014b48:	4413      	add	r3, r2
 8014b4a:	00db      	lsls	r3, r3, #3
 8014b4c:	4403      	add	r3, r0
 8014b4e:	3304      	adds	r3, #4
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	4299      	cmp	r1, r3
 8014b54:	d112      	bne.n	8014b7c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d00c      	beq.n	8014b76 <etharp_find_entry+0xc2>
 8014b5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b60:	4989      	ldr	r1, [pc, #548]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014b62:	4613      	mov	r3, r2
 8014b64:	005b      	lsls	r3, r3, #1
 8014b66:	4413      	add	r3, r2
 8014b68:	00db      	lsls	r3, r3, #3
 8014b6a:	440b      	add	r3, r1
 8014b6c:	3308      	adds	r3, #8
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	687a      	ldr	r2, [r7, #4]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d102      	bne.n	8014b7c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014b76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b7a:	e100      	b.n	8014d7e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014b7c:	7dfb      	ldrb	r3, [r7, #23]
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	d140      	bne.n	8014c04 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014b82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b86:	4980      	ldr	r1, [pc, #512]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014b88:	4613      	mov	r3, r2
 8014b8a:	005b      	lsls	r3, r3, #1
 8014b8c:	4413      	add	r3, r2
 8014b8e:	00db      	lsls	r3, r3, #3
 8014b90:	440b      	add	r3, r1
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d01a      	beq.n	8014bce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014b98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b9c:	497a      	ldr	r1, [pc, #488]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014b9e:	4613      	mov	r3, r2
 8014ba0:	005b      	lsls	r3, r3, #1
 8014ba2:	4413      	add	r3, r2
 8014ba4:	00db      	lsls	r3, r3, #3
 8014ba6:	440b      	add	r3, r1
 8014ba8:	3312      	adds	r3, #18
 8014baa:	881b      	ldrh	r3, [r3, #0]
 8014bac:	8bba      	ldrh	r2, [r7, #28]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d845      	bhi.n	8014c3e <etharp_find_entry+0x18a>
            old_queue = i;
 8014bb2:	8c3b      	ldrh	r3, [r7, #32]
 8014bb4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014bb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bba:	4973      	ldr	r1, [pc, #460]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014bbc:	4613      	mov	r3, r2
 8014bbe:	005b      	lsls	r3, r3, #1
 8014bc0:	4413      	add	r3, r2
 8014bc2:	00db      	lsls	r3, r3, #3
 8014bc4:	440b      	add	r3, r1
 8014bc6:	3312      	adds	r3, #18
 8014bc8:	881b      	ldrh	r3, [r3, #0]
 8014bca:	83bb      	strh	r3, [r7, #28]
 8014bcc:	e037      	b.n	8014c3e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014bce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bd2:	496d      	ldr	r1, [pc, #436]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	005b      	lsls	r3, r3, #1
 8014bd8:	4413      	add	r3, r2
 8014bda:	00db      	lsls	r3, r3, #3
 8014bdc:	440b      	add	r3, r1
 8014bde:	3312      	adds	r3, #18
 8014be0:	881b      	ldrh	r3, [r3, #0]
 8014be2:	8b7a      	ldrh	r2, [r7, #26]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d82a      	bhi.n	8014c3e <etharp_find_entry+0x18a>
            old_pending = i;
 8014be8:	8c3b      	ldrh	r3, [r7, #32]
 8014bea:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014bec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bf0:	4965      	ldr	r1, [pc, #404]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014bf2:	4613      	mov	r3, r2
 8014bf4:	005b      	lsls	r3, r3, #1
 8014bf6:	4413      	add	r3, r2
 8014bf8:	00db      	lsls	r3, r3, #3
 8014bfa:	440b      	add	r3, r1
 8014bfc:	3312      	adds	r3, #18
 8014bfe:	881b      	ldrh	r3, [r3, #0]
 8014c00:	837b      	strh	r3, [r7, #26]
 8014c02:	e01c      	b.n	8014c3e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014c04:	7dfb      	ldrb	r3, [r7, #23]
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d919      	bls.n	8014c3e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014c0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c0e:	495e      	ldr	r1, [pc, #376]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014c10:	4613      	mov	r3, r2
 8014c12:	005b      	lsls	r3, r3, #1
 8014c14:	4413      	add	r3, r2
 8014c16:	00db      	lsls	r3, r3, #3
 8014c18:	440b      	add	r3, r1
 8014c1a:	3312      	adds	r3, #18
 8014c1c:	881b      	ldrh	r3, [r3, #0]
 8014c1e:	8b3a      	ldrh	r2, [r7, #24]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d80c      	bhi.n	8014c3e <etharp_find_entry+0x18a>
            old_stable = i;
 8014c24:	8c3b      	ldrh	r3, [r7, #32]
 8014c26:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014c28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c2c:	4956      	ldr	r1, [pc, #344]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014c2e:	4613      	mov	r3, r2
 8014c30:	005b      	lsls	r3, r3, #1
 8014c32:	4413      	add	r3, r2
 8014c34:	00db      	lsls	r3, r3, #3
 8014c36:	440b      	add	r3, r1
 8014c38:	3312      	adds	r3, #18
 8014c3a:	881b      	ldrh	r3, [r3, #0]
 8014c3c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c3e:	8c3b      	ldrh	r3, [r7, #32]
 8014c40:	3301      	adds	r3, #1
 8014c42:	b29b      	uxth	r3, r3
 8014c44:	843b      	strh	r3, [r7, #32]
 8014c46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c4a:	2b09      	cmp	r3, #9
 8014c4c:	f77f af4c 	ble.w	8014ae8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014c50:	7afb      	ldrb	r3, [r7, #11]
 8014c52:	f003 0302 	and.w	r3, r3, #2
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d108      	bne.n	8014c6c <etharp_find_entry+0x1b8>
 8014c5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014c5e:	2b0a      	cmp	r3, #10
 8014c60:	d107      	bne.n	8014c72 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014c62:	7afb      	ldrb	r3, [r7, #11]
 8014c64:	f003 0301 	and.w	r3, r3, #1
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d102      	bne.n	8014c72 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c70:	e085      	b.n	8014d7e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014c72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014c76:	2b09      	cmp	r3, #9
 8014c78:	dc02      	bgt.n	8014c80 <etharp_find_entry+0x1cc>
    i = empty;
 8014c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c7c:	843b      	strh	r3, [r7, #32]
 8014c7e:	e039      	b.n	8014cf4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014c80:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014c84:	2b09      	cmp	r3, #9
 8014c86:	dc14      	bgt.n	8014cb2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c8a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014c8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c90:	493d      	ldr	r1, [pc, #244]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014c92:	4613      	mov	r3, r2
 8014c94:	005b      	lsls	r3, r3, #1
 8014c96:	4413      	add	r3, r2
 8014c98:	00db      	lsls	r3, r3, #3
 8014c9a:	440b      	add	r3, r1
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d018      	beq.n	8014cd4 <etharp_find_entry+0x220>
 8014ca2:	4b3a      	ldr	r3, [pc, #232]	; (8014d8c <etharp_find_entry+0x2d8>)
 8014ca4:	f240 126d 	movw	r2, #365	; 0x16d
 8014ca8:	493b      	ldr	r1, [pc, #236]	; (8014d98 <etharp_find_entry+0x2e4>)
 8014caa:	483a      	ldr	r0, [pc, #232]	; (8014d94 <etharp_find_entry+0x2e0>)
 8014cac:	f002 f94e 	bl	8016f4c <iprintf>
 8014cb0:	e010      	b.n	8014cd4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014cb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014cb6:	2b09      	cmp	r3, #9
 8014cb8:	dc02      	bgt.n	8014cc0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014cba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014cbc:	843b      	strh	r3, [r7, #32]
 8014cbe:	e009      	b.n	8014cd4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014cc0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014cc4:	2b09      	cmp	r3, #9
 8014cc6:	dc02      	bgt.n	8014cce <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014cc8:	8bfb      	ldrh	r3, [r7, #30]
 8014cca:	843b      	strh	r3, [r7, #32]
 8014ccc:	e002      	b.n	8014cd4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cd2:	e054      	b.n	8014d7e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014cd4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014cd8:	2b09      	cmp	r3, #9
 8014cda:	dd06      	ble.n	8014cea <etharp_find_entry+0x236>
 8014cdc:	4b2b      	ldr	r3, [pc, #172]	; (8014d8c <etharp_find_entry+0x2d8>)
 8014cde:	f240 127f 	movw	r2, #383	; 0x17f
 8014ce2:	492e      	ldr	r1, [pc, #184]	; (8014d9c <etharp_find_entry+0x2e8>)
 8014ce4:	482b      	ldr	r0, [pc, #172]	; (8014d94 <etharp_find_entry+0x2e0>)
 8014ce6:	f002 f931 	bl	8016f4c <iprintf>
    etharp_free_entry(i);
 8014cea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7ff fe06 	bl	8014900 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014cf4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014cf8:	2b09      	cmp	r3, #9
 8014cfa:	dd06      	ble.n	8014d0a <etharp_find_entry+0x256>
 8014cfc:	4b23      	ldr	r3, [pc, #140]	; (8014d8c <etharp_find_entry+0x2d8>)
 8014cfe:	f240 1283 	movw	r2, #387	; 0x183
 8014d02:	4926      	ldr	r1, [pc, #152]	; (8014d9c <etharp_find_entry+0x2e8>)
 8014d04:	4823      	ldr	r0, [pc, #140]	; (8014d94 <etharp_find_entry+0x2e0>)
 8014d06:	f002 f921 	bl	8016f4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014d0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d0e:	491e      	ldr	r1, [pc, #120]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014d10:	4613      	mov	r3, r2
 8014d12:	005b      	lsls	r3, r3, #1
 8014d14:	4413      	add	r3, r2
 8014d16:	00db      	lsls	r3, r3, #3
 8014d18:	440b      	add	r3, r1
 8014d1a:	3314      	adds	r3, #20
 8014d1c:	781b      	ldrb	r3, [r3, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d006      	beq.n	8014d30 <etharp_find_entry+0x27c>
 8014d22:	4b1a      	ldr	r3, [pc, #104]	; (8014d8c <etharp_find_entry+0x2d8>)
 8014d24:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014d28:	491d      	ldr	r1, [pc, #116]	; (8014da0 <etharp_find_entry+0x2ec>)
 8014d2a:	481a      	ldr	r0, [pc, #104]	; (8014d94 <etharp_find_entry+0x2e0>)
 8014d2c:	f002 f90e 	bl	8016f4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d00b      	beq.n	8014d4e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014d36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	6819      	ldr	r1, [r3, #0]
 8014d3e:	4812      	ldr	r0, [pc, #72]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014d40:	4613      	mov	r3, r2
 8014d42:	005b      	lsls	r3, r3, #1
 8014d44:	4413      	add	r3, r2
 8014d46:	00db      	lsls	r3, r3, #3
 8014d48:	4403      	add	r3, r0
 8014d4a:	3304      	adds	r3, #4
 8014d4c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014d4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d52:	490d      	ldr	r1, [pc, #52]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014d54:	4613      	mov	r3, r2
 8014d56:	005b      	lsls	r3, r3, #1
 8014d58:	4413      	add	r3, r2
 8014d5a:	00db      	lsls	r3, r3, #3
 8014d5c:	440b      	add	r3, r1
 8014d5e:	3312      	adds	r3, #18
 8014d60:	2200      	movs	r2, #0
 8014d62:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014d64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d68:	4907      	ldr	r1, [pc, #28]	; (8014d88 <etharp_find_entry+0x2d4>)
 8014d6a:	4613      	mov	r3, r2
 8014d6c:	005b      	lsls	r3, r3, #1
 8014d6e:	4413      	add	r3, r2
 8014d70:	00db      	lsls	r3, r3, #3
 8014d72:	440b      	add	r3, r1
 8014d74:	3308      	adds	r3, #8
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014d7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3728      	adds	r7, #40	; 0x28
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}
 8014d86:	bf00      	nop
 8014d88:	200016e8 	.word	0x200016e8
 8014d8c:	0801bae8 	.word	0x0801bae8
 8014d90:	0801bb20 	.word	0x0801bb20
 8014d94:	0801bb60 	.word	0x0801bb60
 8014d98:	0801bb88 	.word	0x0801bb88
 8014d9c:	0801bba0 	.word	0x0801bba0
 8014da0:	0801bbb4 	.word	0x0801bbb4

08014da4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b088      	sub	sp, #32
 8014da8:	af02      	add	r7, sp, #8
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	60b9      	str	r1, [r7, #8]
 8014dae:	607a      	str	r2, [r7, #4]
 8014db0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014db8:	2b06      	cmp	r3, #6
 8014dba:	d006      	beq.n	8014dca <etharp_update_arp_entry+0x26>
 8014dbc:	4b48      	ldr	r3, [pc, #288]	; (8014ee0 <etharp_update_arp_entry+0x13c>)
 8014dbe:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014dc2:	4948      	ldr	r1, [pc, #288]	; (8014ee4 <etharp_update_arp_entry+0x140>)
 8014dc4:	4848      	ldr	r0, [pc, #288]	; (8014ee8 <etharp_update_arp_entry+0x144>)
 8014dc6:	f002 f8c1 	bl	8016f4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d012      	beq.n	8014df6 <etharp_update_arp_entry+0x52>
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d00e      	beq.n	8014df6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	68f9      	ldr	r1, [r7, #12]
 8014dde:	4618      	mov	r0, r3
 8014de0:	f001 f8fe 	bl	8015fe0 <ip4_addr_isbroadcast_u32>
 8014de4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d105      	bne.n	8014df6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014df2:	2be0      	cmp	r3, #224	; 0xe0
 8014df4:	d102      	bne.n	8014dfc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014df6:	f06f 030f 	mvn.w	r3, #15
 8014dfa:	e06c      	b.n	8014ed6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014dfc:	78fb      	ldrb	r3, [r7, #3]
 8014dfe:	68fa      	ldr	r2, [r7, #12]
 8014e00:	4619      	mov	r1, r3
 8014e02:	68b8      	ldr	r0, [r7, #8]
 8014e04:	f7ff fe56 	bl	8014ab4 <etharp_find_entry>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014e0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	da02      	bge.n	8014e1a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014e14:	8afb      	ldrh	r3, [r7, #22]
 8014e16:	b25b      	sxtb	r3, r3
 8014e18:	e05d      	b.n	8014ed6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014e1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e1e:	4933      	ldr	r1, [pc, #204]	; (8014eec <etharp_update_arp_entry+0x148>)
 8014e20:	4613      	mov	r3, r2
 8014e22:	005b      	lsls	r3, r3, #1
 8014e24:	4413      	add	r3, r2
 8014e26:	00db      	lsls	r3, r3, #3
 8014e28:	440b      	add	r3, r1
 8014e2a:	3314      	adds	r3, #20
 8014e2c:	2202      	movs	r2, #2
 8014e2e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014e30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e34:	492d      	ldr	r1, [pc, #180]	; (8014eec <etharp_update_arp_entry+0x148>)
 8014e36:	4613      	mov	r3, r2
 8014e38:	005b      	lsls	r3, r3, #1
 8014e3a:	4413      	add	r3, r2
 8014e3c:	00db      	lsls	r3, r3, #3
 8014e3e:	440b      	add	r3, r1
 8014e40:	3308      	adds	r3, #8
 8014e42:	68fa      	ldr	r2, [r7, #12]
 8014e44:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014e46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e4a:	4613      	mov	r3, r2
 8014e4c:	005b      	lsls	r3, r3, #1
 8014e4e:	4413      	add	r3, r2
 8014e50:	00db      	lsls	r3, r3, #3
 8014e52:	3308      	adds	r3, #8
 8014e54:	4a25      	ldr	r2, [pc, #148]	; (8014eec <etharp_update_arp_entry+0x148>)
 8014e56:	4413      	add	r3, r2
 8014e58:	3304      	adds	r3, #4
 8014e5a:	2206      	movs	r2, #6
 8014e5c:	6879      	ldr	r1, [r7, #4]
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f002 f844 	bl	8016eec <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014e64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e68:	4920      	ldr	r1, [pc, #128]	; (8014eec <etharp_update_arp_entry+0x148>)
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	005b      	lsls	r3, r3, #1
 8014e6e:	4413      	add	r3, r2
 8014e70:	00db      	lsls	r3, r3, #3
 8014e72:	440b      	add	r3, r1
 8014e74:	3312      	adds	r3, #18
 8014e76:	2200      	movs	r2, #0
 8014e78:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014e7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e7e:	491b      	ldr	r1, [pc, #108]	; (8014eec <etharp_update_arp_entry+0x148>)
 8014e80:	4613      	mov	r3, r2
 8014e82:	005b      	lsls	r3, r3, #1
 8014e84:	4413      	add	r3, r2
 8014e86:	00db      	lsls	r3, r3, #3
 8014e88:	440b      	add	r3, r1
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d021      	beq.n	8014ed4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014e90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014e94:	4915      	ldr	r1, [pc, #84]	; (8014eec <etharp_update_arp_entry+0x148>)
 8014e96:	4613      	mov	r3, r2
 8014e98:	005b      	lsls	r3, r3, #1
 8014e9a:	4413      	add	r3, r2
 8014e9c:	00db      	lsls	r3, r3, #3
 8014e9e:	440b      	add	r3, r1
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014ea4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ea8:	4910      	ldr	r1, [pc, #64]	; (8014eec <etharp_update_arp_entry+0x148>)
 8014eaa:	4613      	mov	r3, r2
 8014eac:	005b      	lsls	r3, r3, #1
 8014eae:	4413      	add	r3, r2
 8014eb0:	00db      	lsls	r3, r3, #3
 8014eb2:	440b      	add	r3, r1
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014ebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ec2:	9300      	str	r3, [sp, #0]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6939      	ldr	r1, [r7, #16]
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f001 ff91 	bl	8016df0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014ece:	6938      	ldr	r0, [r7, #16]
 8014ed0:	f7f8 ff2e 	bl	800dd30 <pbuf_free>
  }
  return ERR_OK;
 8014ed4:	2300      	movs	r3, #0
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3718      	adds	r7, #24
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop
 8014ee0:	0801bae8 	.word	0x0801bae8
 8014ee4:	0801bbe0 	.word	0x0801bbe0
 8014ee8:	0801bb60 	.word	0x0801bb60
 8014eec:	200016e8 	.word	0x200016e8

08014ef0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b084      	sub	sp, #16
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ef8:	2300      	movs	r3, #0
 8014efa:	60fb      	str	r3, [r7, #12]
 8014efc:	e01e      	b.n	8014f3c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014efe:	4913      	ldr	r1, [pc, #76]	; (8014f4c <etharp_cleanup_netif+0x5c>)
 8014f00:	68fa      	ldr	r2, [r7, #12]
 8014f02:	4613      	mov	r3, r2
 8014f04:	005b      	lsls	r3, r3, #1
 8014f06:	4413      	add	r3, r2
 8014f08:	00db      	lsls	r3, r3, #3
 8014f0a:	440b      	add	r3, r1
 8014f0c:	3314      	adds	r3, #20
 8014f0e:	781b      	ldrb	r3, [r3, #0]
 8014f10:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014f12:	7afb      	ldrb	r3, [r7, #11]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d00e      	beq.n	8014f36 <etharp_cleanup_netif+0x46>
 8014f18:	490c      	ldr	r1, [pc, #48]	; (8014f4c <etharp_cleanup_netif+0x5c>)
 8014f1a:	68fa      	ldr	r2, [r7, #12]
 8014f1c:	4613      	mov	r3, r2
 8014f1e:	005b      	lsls	r3, r3, #1
 8014f20:	4413      	add	r3, r2
 8014f22:	00db      	lsls	r3, r3, #3
 8014f24:	440b      	add	r3, r1
 8014f26:	3308      	adds	r3, #8
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d102      	bne.n	8014f36 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014f30:	68f8      	ldr	r0, [r7, #12]
 8014f32:	f7ff fce5 	bl	8014900 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	3301      	adds	r3, #1
 8014f3a:	60fb      	str	r3, [r7, #12]
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2b09      	cmp	r3, #9
 8014f40:	dddd      	ble.n	8014efe <etharp_cleanup_netif+0xe>
    }
  }
}
 8014f42:	bf00      	nop
 8014f44:	bf00      	nop
 8014f46:	3710      	adds	r7, #16
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}
 8014f4c:	200016e8 	.word	0x200016e8

08014f50 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014f50:	b5b0      	push	{r4, r5, r7, lr}
 8014f52:	b08a      	sub	sp, #40	; 0x28
 8014f54:	af04      	add	r7, sp, #16
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d107      	bne.n	8014f70 <etharp_input+0x20>
 8014f60:	4b3d      	ldr	r3, [pc, #244]	; (8015058 <etharp_input+0x108>)
 8014f62:	f240 228a 	movw	r2, #650	; 0x28a
 8014f66:	493d      	ldr	r1, [pc, #244]	; (801505c <etharp_input+0x10c>)
 8014f68:	483d      	ldr	r0, [pc, #244]	; (8015060 <etharp_input+0x110>)
 8014f6a:	f001 ffef 	bl	8016f4c <iprintf>
 8014f6e:	e06f      	b.n	8015050 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	685b      	ldr	r3, [r3, #4]
 8014f74:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	881b      	ldrh	r3, [r3, #0]
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f80:	d10c      	bne.n	8014f9c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014f86:	2b06      	cmp	r3, #6
 8014f88:	d108      	bne.n	8014f9c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014f8a:	693b      	ldr	r3, [r7, #16]
 8014f8c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014f8e:	2b04      	cmp	r3, #4
 8014f90:	d104      	bne.n	8014f9c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	885b      	ldrh	r3, [r3, #2]
 8014f96:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014f98:	2b08      	cmp	r3, #8
 8014f9a:	d003      	beq.n	8014fa4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7f8 fec7 	bl	800dd30 <pbuf_free>
    return;
 8014fa2:	e055      	b.n	8015050 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	330e      	adds	r3, #14
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	3318      	adds	r3, #24
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	3304      	adds	r3, #4
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d102      	bne.n	8014fc4 <etharp_input+0x74>
    for_us = 0;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	75fb      	strb	r3, [r7, #23]
 8014fc2:	e009      	b.n	8014fd8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014fc4:	68ba      	ldr	r2, [r7, #8]
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	3304      	adds	r3, #4
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	429a      	cmp	r2, r3
 8014fce:	bf0c      	ite	eq
 8014fd0:	2301      	moveq	r3, #1
 8014fd2:	2300      	movne	r3, #0
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	f103 0208 	add.w	r2, r3, #8
 8014fde:	7dfb      	ldrb	r3, [r7, #23]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d001      	beq.n	8014fe8 <etharp_input+0x98>
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	e000      	b.n	8014fea <etharp_input+0x9a>
 8014fe8:	2302      	movs	r3, #2
 8014fea:	f107 010c 	add.w	r1, r7, #12
 8014fee:	6838      	ldr	r0, [r7, #0]
 8014ff0:	f7ff fed8 	bl	8014da4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	88db      	ldrh	r3, [r3, #6]
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ffe:	d003      	beq.n	8015008 <etharp_input+0xb8>
 8015000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015004:	d01e      	beq.n	8015044 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015006:	e020      	b.n	801504a <etharp_input+0xfa>
      if (for_us) {
 8015008:	7dfb      	ldrb	r3, [r7, #23]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d01c      	beq.n	8015048 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015024:	693a      	ldr	r2, [r7, #16]
 8015026:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015028:	2102      	movs	r1, #2
 801502a:	9103      	str	r1, [sp, #12]
 801502c:	f107 010c 	add.w	r1, r7, #12
 8015030:	9102      	str	r1, [sp, #8]
 8015032:	9201      	str	r2, [sp, #4]
 8015034:	9300      	str	r3, [sp, #0]
 8015036:	462b      	mov	r3, r5
 8015038:	4622      	mov	r2, r4
 801503a:	4601      	mov	r1, r0
 801503c:	6838      	ldr	r0, [r7, #0]
 801503e:	f000 faeb 	bl	8015618 <etharp_raw>
      break;
 8015042:	e001      	b.n	8015048 <etharp_input+0xf8>
      break;
 8015044:	bf00      	nop
 8015046:	e000      	b.n	801504a <etharp_input+0xfa>
      break;
 8015048:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801504a:	6878      	ldr	r0, [r7, #4]
 801504c:	f7f8 fe70 	bl	800dd30 <pbuf_free>
}
 8015050:	3718      	adds	r7, #24
 8015052:	46bd      	mov	sp, r7
 8015054:	bdb0      	pop	{r4, r5, r7, pc}
 8015056:	bf00      	nop
 8015058:	0801bae8 	.word	0x0801bae8
 801505c:	0801bc38 	.word	0x0801bc38
 8015060:	0801bb60 	.word	0x0801bb60

08015064 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b086      	sub	sp, #24
 8015068:	af02      	add	r7, sp, #8
 801506a:	60f8      	str	r0, [r7, #12]
 801506c:	60b9      	str	r1, [r7, #8]
 801506e:	4613      	mov	r3, r2
 8015070:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015072:	79fa      	ldrb	r2, [r7, #7]
 8015074:	4944      	ldr	r1, [pc, #272]	; (8015188 <etharp_output_to_arp_index+0x124>)
 8015076:	4613      	mov	r3, r2
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	4413      	add	r3, r2
 801507c:	00db      	lsls	r3, r3, #3
 801507e:	440b      	add	r3, r1
 8015080:	3314      	adds	r3, #20
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	2b01      	cmp	r3, #1
 8015086:	d806      	bhi.n	8015096 <etharp_output_to_arp_index+0x32>
 8015088:	4b40      	ldr	r3, [pc, #256]	; (801518c <etharp_output_to_arp_index+0x128>)
 801508a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801508e:	4940      	ldr	r1, [pc, #256]	; (8015190 <etharp_output_to_arp_index+0x12c>)
 8015090:	4840      	ldr	r0, [pc, #256]	; (8015194 <etharp_output_to_arp_index+0x130>)
 8015092:	f001 ff5b 	bl	8016f4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015096:	79fa      	ldrb	r2, [r7, #7]
 8015098:	493b      	ldr	r1, [pc, #236]	; (8015188 <etharp_output_to_arp_index+0x124>)
 801509a:	4613      	mov	r3, r2
 801509c:	005b      	lsls	r3, r3, #1
 801509e:	4413      	add	r3, r2
 80150a0:	00db      	lsls	r3, r3, #3
 80150a2:	440b      	add	r3, r1
 80150a4:	3314      	adds	r3, #20
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	2b02      	cmp	r3, #2
 80150aa:	d153      	bne.n	8015154 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80150ac:	79fa      	ldrb	r2, [r7, #7]
 80150ae:	4936      	ldr	r1, [pc, #216]	; (8015188 <etharp_output_to_arp_index+0x124>)
 80150b0:	4613      	mov	r3, r2
 80150b2:	005b      	lsls	r3, r3, #1
 80150b4:	4413      	add	r3, r2
 80150b6:	00db      	lsls	r3, r3, #3
 80150b8:	440b      	add	r3, r1
 80150ba:	3312      	adds	r3, #18
 80150bc:	881b      	ldrh	r3, [r3, #0]
 80150be:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80150c2:	d919      	bls.n	80150f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80150c4:	79fa      	ldrb	r2, [r7, #7]
 80150c6:	4613      	mov	r3, r2
 80150c8:	005b      	lsls	r3, r3, #1
 80150ca:	4413      	add	r3, r2
 80150cc:	00db      	lsls	r3, r3, #3
 80150ce:	4a2e      	ldr	r2, [pc, #184]	; (8015188 <etharp_output_to_arp_index+0x124>)
 80150d0:	4413      	add	r3, r2
 80150d2:	3304      	adds	r3, #4
 80150d4:	4619      	mov	r1, r3
 80150d6:	68f8      	ldr	r0, [r7, #12]
 80150d8:	f000 fb4c 	bl	8015774 <etharp_request>
 80150dc:	4603      	mov	r3, r0
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d138      	bne.n	8015154 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80150e2:	79fa      	ldrb	r2, [r7, #7]
 80150e4:	4928      	ldr	r1, [pc, #160]	; (8015188 <etharp_output_to_arp_index+0x124>)
 80150e6:	4613      	mov	r3, r2
 80150e8:	005b      	lsls	r3, r3, #1
 80150ea:	4413      	add	r3, r2
 80150ec:	00db      	lsls	r3, r3, #3
 80150ee:	440b      	add	r3, r1
 80150f0:	3314      	adds	r3, #20
 80150f2:	2203      	movs	r2, #3
 80150f4:	701a      	strb	r2, [r3, #0]
 80150f6:	e02d      	b.n	8015154 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80150f8:	79fa      	ldrb	r2, [r7, #7]
 80150fa:	4923      	ldr	r1, [pc, #140]	; (8015188 <etharp_output_to_arp_index+0x124>)
 80150fc:	4613      	mov	r3, r2
 80150fe:	005b      	lsls	r3, r3, #1
 8015100:	4413      	add	r3, r2
 8015102:	00db      	lsls	r3, r3, #3
 8015104:	440b      	add	r3, r1
 8015106:	3312      	adds	r3, #18
 8015108:	881b      	ldrh	r3, [r3, #0]
 801510a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801510e:	d321      	bcc.n	8015154 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015110:	79fa      	ldrb	r2, [r7, #7]
 8015112:	4613      	mov	r3, r2
 8015114:	005b      	lsls	r3, r3, #1
 8015116:	4413      	add	r3, r2
 8015118:	00db      	lsls	r3, r3, #3
 801511a:	4a1b      	ldr	r2, [pc, #108]	; (8015188 <etharp_output_to_arp_index+0x124>)
 801511c:	4413      	add	r3, r2
 801511e:	1d19      	adds	r1, r3, #4
 8015120:	79fa      	ldrb	r2, [r7, #7]
 8015122:	4613      	mov	r3, r2
 8015124:	005b      	lsls	r3, r3, #1
 8015126:	4413      	add	r3, r2
 8015128:	00db      	lsls	r3, r3, #3
 801512a:	3308      	adds	r3, #8
 801512c:	4a16      	ldr	r2, [pc, #88]	; (8015188 <etharp_output_to_arp_index+0x124>)
 801512e:	4413      	add	r3, r2
 8015130:	3304      	adds	r3, #4
 8015132:	461a      	mov	r2, r3
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	f000 fafb 	bl	8015730 <etharp_request_dst>
 801513a:	4603      	mov	r3, r0
 801513c:	2b00      	cmp	r3, #0
 801513e:	d109      	bne.n	8015154 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015140:	79fa      	ldrb	r2, [r7, #7]
 8015142:	4911      	ldr	r1, [pc, #68]	; (8015188 <etharp_output_to_arp_index+0x124>)
 8015144:	4613      	mov	r3, r2
 8015146:	005b      	lsls	r3, r3, #1
 8015148:	4413      	add	r3, r2
 801514a:	00db      	lsls	r3, r3, #3
 801514c:	440b      	add	r3, r1
 801514e:	3314      	adds	r3, #20
 8015150:	2203      	movs	r2, #3
 8015152:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801515a:	79fa      	ldrb	r2, [r7, #7]
 801515c:	4613      	mov	r3, r2
 801515e:	005b      	lsls	r3, r3, #1
 8015160:	4413      	add	r3, r2
 8015162:	00db      	lsls	r3, r3, #3
 8015164:	3308      	adds	r3, #8
 8015166:	4a08      	ldr	r2, [pc, #32]	; (8015188 <etharp_output_to_arp_index+0x124>)
 8015168:	4413      	add	r3, r2
 801516a:	3304      	adds	r3, #4
 801516c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015170:	9200      	str	r2, [sp, #0]
 8015172:	460a      	mov	r2, r1
 8015174:	68b9      	ldr	r1, [r7, #8]
 8015176:	68f8      	ldr	r0, [r7, #12]
 8015178:	f001 fe3a 	bl	8016df0 <ethernet_output>
 801517c:	4603      	mov	r3, r0
}
 801517e:	4618      	mov	r0, r3
 8015180:	3710      	adds	r7, #16
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}
 8015186:	bf00      	nop
 8015188:	200016e8 	.word	0x200016e8
 801518c:	0801bae8 	.word	0x0801bae8
 8015190:	0801bc58 	.word	0x0801bc58
 8015194:	0801bb60 	.word	0x0801bb60

08015198 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b08a      	sub	sp, #40	; 0x28
 801519c:	af02      	add	r7, sp, #8
 801519e:	60f8      	str	r0, [r7, #12]
 80151a0:	60b9      	str	r1, [r7, #8]
 80151a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d106      	bne.n	80151bc <etharp_output+0x24>
 80151ae:	4b73      	ldr	r3, [pc, #460]	; (801537c <etharp_output+0x1e4>)
 80151b0:	f240 321e 	movw	r2, #798	; 0x31e
 80151b4:	4972      	ldr	r1, [pc, #456]	; (8015380 <etharp_output+0x1e8>)
 80151b6:	4873      	ldr	r0, [pc, #460]	; (8015384 <etharp_output+0x1ec>)
 80151b8:	f001 fec8 	bl	8016f4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d106      	bne.n	80151d0 <etharp_output+0x38>
 80151c2:	4b6e      	ldr	r3, [pc, #440]	; (801537c <etharp_output+0x1e4>)
 80151c4:	f240 321f 	movw	r2, #799	; 0x31f
 80151c8:	496f      	ldr	r1, [pc, #444]	; (8015388 <etharp_output+0x1f0>)
 80151ca:	486e      	ldr	r0, [pc, #440]	; (8015384 <etharp_output+0x1ec>)
 80151cc:	f001 febe 	bl	8016f4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d106      	bne.n	80151e4 <etharp_output+0x4c>
 80151d6:	4b69      	ldr	r3, [pc, #420]	; (801537c <etharp_output+0x1e4>)
 80151d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80151dc:	496b      	ldr	r1, [pc, #428]	; (801538c <etharp_output+0x1f4>)
 80151de:	4869      	ldr	r0, [pc, #420]	; (8015384 <etharp_output+0x1ec>)
 80151e0:	f001 feb4 	bl	8016f4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	68f9      	ldr	r1, [r7, #12]
 80151ea:	4618      	mov	r0, r3
 80151ec:	f000 fef8 	bl	8015fe0 <ip4_addr_isbroadcast_u32>
 80151f0:	4603      	mov	r3, r0
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d002      	beq.n	80151fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80151f6:	4b66      	ldr	r3, [pc, #408]	; (8015390 <etharp_output+0x1f8>)
 80151f8:	61fb      	str	r3, [r7, #28]
 80151fa:	e0af      	b.n	801535c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015204:	2be0      	cmp	r3, #224	; 0xe0
 8015206:	d118      	bne.n	801523a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015208:	2301      	movs	r3, #1
 801520a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801520c:	2300      	movs	r3, #0
 801520e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015210:	235e      	movs	r3, #94	; 0x5e
 8015212:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	3301      	adds	r3, #1
 8015218:	781b      	ldrb	r3, [r3, #0]
 801521a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801521e:	b2db      	uxtb	r3, r3
 8015220:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	3302      	adds	r3, #2
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	3303      	adds	r3, #3
 801522e:	781b      	ldrb	r3, [r3, #0]
 8015230:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015232:	f107 0310 	add.w	r3, r7, #16
 8015236:	61fb      	str	r3, [r7, #28]
 8015238:	e090      	b.n	801535c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	3304      	adds	r3, #4
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	405a      	eors	r2, r3
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	3308      	adds	r3, #8
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	4013      	ands	r3, r2
 801524e:	2b00      	cmp	r3, #0
 8015250:	d012      	beq.n	8015278 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015258:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801525c:	4293      	cmp	r3, r2
 801525e:	d00b      	beq.n	8015278 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	330c      	adds	r3, #12
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d003      	beq.n	8015272 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	330c      	adds	r3, #12
 801526e:	61bb      	str	r3, [r7, #24]
 8015270:	e002      	b.n	8015278 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015272:	f06f 0303 	mvn.w	r3, #3
 8015276:	e07d      	b.n	8015374 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015278:	4b46      	ldr	r3, [pc, #280]	; (8015394 <etharp_output+0x1fc>)
 801527a:	781b      	ldrb	r3, [r3, #0]
 801527c:	4619      	mov	r1, r3
 801527e:	4a46      	ldr	r2, [pc, #280]	; (8015398 <etharp_output+0x200>)
 8015280:	460b      	mov	r3, r1
 8015282:	005b      	lsls	r3, r3, #1
 8015284:	440b      	add	r3, r1
 8015286:	00db      	lsls	r3, r3, #3
 8015288:	4413      	add	r3, r2
 801528a:	3314      	adds	r3, #20
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	2b01      	cmp	r3, #1
 8015290:	d925      	bls.n	80152de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015292:	4b40      	ldr	r3, [pc, #256]	; (8015394 <etharp_output+0x1fc>)
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	4619      	mov	r1, r3
 8015298:	4a3f      	ldr	r2, [pc, #252]	; (8015398 <etharp_output+0x200>)
 801529a:	460b      	mov	r3, r1
 801529c:	005b      	lsls	r3, r3, #1
 801529e:	440b      	add	r3, r1
 80152a0:	00db      	lsls	r3, r3, #3
 80152a2:	4413      	add	r3, r2
 80152a4:	3308      	adds	r3, #8
 80152a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80152a8:	68fa      	ldr	r2, [r7, #12]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d117      	bne.n	80152de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	4b38      	ldr	r3, [pc, #224]	; (8015394 <etharp_output+0x1fc>)
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	4618      	mov	r0, r3
 80152b8:	4937      	ldr	r1, [pc, #220]	; (8015398 <etharp_output+0x200>)
 80152ba:	4603      	mov	r3, r0
 80152bc:	005b      	lsls	r3, r3, #1
 80152be:	4403      	add	r3, r0
 80152c0:	00db      	lsls	r3, r3, #3
 80152c2:	440b      	add	r3, r1
 80152c4:	3304      	adds	r3, #4
 80152c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d108      	bne.n	80152de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80152cc:	4b31      	ldr	r3, [pc, #196]	; (8015394 <etharp_output+0x1fc>)
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	461a      	mov	r2, r3
 80152d2:	68b9      	ldr	r1, [r7, #8]
 80152d4:	68f8      	ldr	r0, [r7, #12]
 80152d6:	f7ff fec5 	bl	8015064 <etharp_output_to_arp_index>
 80152da:	4603      	mov	r3, r0
 80152dc:	e04a      	b.n	8015374 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80152de:	2300      	movs	r3, #0
 80152e0:	75fb      	strb	r3, [r7, #23]
 80152e2:	e031      	b.n	8015348 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80152e4:	7dfa      	ldrb	r2, [r7, #23]
 80152e6:	492c      	ldr	r1, [pc, #176]	; (8015398 <etharp_output+0x200>)
 80152e8:	4613      	mov	r3, r2
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	4413      	add	r3, r2
 80152ee:	00db      	lsls	r3, r3, #3
 80152f0:	440b      	add	r3, r1
 80152f2:	3314      	adds	r3, #20
 80152f4:	781b      	ldrb	r3, [r3, #0]
 80152f6:	2b01      	cmp	r3, #1
 80152f8:	d923      	bls.n	8015342 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80152fa:	7dfa      	ldrb	r2, [r7, #23]
 80152fc:	4926      	ldr	r1, [pc, #152]	; (8015398 <etharp_output+0x200>)
 80152fe:	4613      	mov	r3, r2
 8015300:	005b      	lsls	r3, r3, #1
 8015302:	4413      	add	r3, r2
 8015304:	00db      	lsls	r3, r3, #3
 8015306:	440b      	add	r3, r1
 8015308:	3308      	adds	r3, #8
 801530a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801530c:	68fa      	ldr	r2, [r7, #12]
 801530e:	429a      	cmp	r2, r3
 8015310:	d117      	bne.n	8015342 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015312:	69bb      	ldr	r3, [r7, #24]
 8015314:	6819      	ldr	r1, [r3, #0]
 8015316:	7dfa      	ldrb	r2, [r7, #23]
 8015318:	481f      	ldr	r0, [pc, #124]	; (8015398 <etharp_output+0x200>)
 801531a:	4613      	mov	r3, r2
 801531c:	005b      	lsls	r3, r3, #1
 801531e:	4413      	add	r3, r2
 8015320:	00db      	lsls	r3, r3, #3
 8015322:	4403      	add	r3, r0
 8015324:	3304      	adds	r3, #4
 8015326:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015328:	4299      	cmp	r1, r3
 801532a:	d10a      	bne.n	8015342 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801532c:	4a19      	ldr	r2, [pc, #100]	; (8015394 <etharp_output+0x1fc>)
 801532e:	7dfb      	ldrb	r3, [r7, #23]
 8015330:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015332:	7dfb      	ldrb	r3, [r7, #23]
 8015334:	461a      	mov	r2, r3
 8015336:	68b9      	ldr	r1, [r7, #8]
 8015338:	68f8      	ldr	r0, [r7, #12]
 801533a:	f7ff fe93 	bl	8015064 <etharp_output_to_arp_index>
 801533e:	4603      	mov	r3, r0
 8015340:	e018      	b.n	8015374 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015342:	7dfb      	ldrb	r3, [r7, #23]
 8015344:	3301      	adds	r3, #1
 8015346:	75fb      	strb	r3, [r7, #23]
 8015348:	7dfb      	ldrb	r3, [r7, #23]
 801534a:	2b09      	cmp	r3, #9
 801534c:	d9ca      	bls.n	80152e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801534e:	68ba      	ldr	r2, [r7, #8]
 8015350:	69b9      	ldr	r1, [r7, #24]
 8015352:	68f8      	ldr	r0, [r7, #12]
 8015354:	f000 f822 	bl	801539c <etharp_query>
 8015358:	4603      	mov	r3, r0
 801535a:	e00b      	b.n	8015374 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015366:	9300      	str	r3, [sp, #0]
 8015368:	69fb      	ldr	r3, [r7, #28]
 801536a:	68b9      	ldr	r1, [r7, #8]
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f001 fd3f 	bl	8016df0 <ethernet_output>
 8015372:	4603      	mov	r3, r0
}
 8015374:	4618      	mov	r0, r3
 8015376:	3720      	adds	r7, #32
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}
 801537c:	0801bae8 	.word	0x0801bae8
 8015380:	0801bc38 	.word	0x0801bc38
 8015384:	0801bb60 	.word	0x0801bb60
 8015388:	0801bc88 	.word	0x0801bc88
 801538c:	0801bc28 	.word	0x0801bc28
 8015390:	0801ead8 	.word	0x0801ead8
 8015394:	200017d8 	.word	0x200017d8
 8015398:	200016e8 	.word	0x200016e8

0801539c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b08c      	sub	sp, #48	; 0x30
 80153a0:	af02      	add	r7, sp, #8
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	3326      	adds	r3, #38	; 0x26
 80153ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80153ae:	23ff      	movs	r3, #255	; 0xff
 80153b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80153b4:	2300      	movs	r3, #0
 80153b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	68f9      	ldr	r1, [r7, #12]
 80153be:	4618      	mov	r0, r3
 80153c0:	f000 fe0e 	bl	8015fe0 <ip4_addr_isbroadcast_u32>
 80153c4:	4603      	mov	r3, r0
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d10c      	bne.n	80153e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80153d2:	2be0      	cmp	r3, #224	; 0xe0
 80153d4:	d006      	beq.n	80153e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d003      	beq.n	80153e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d102      	bne.n	80153ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80153e4:	f06f 030f 	mvn.w	r3, #15
 80153e8:	e101      	b.n	80155ee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80153ea:	68fa      	ldr	r2, [r7, #12]
 80153ec:	2101      	movs	r1, #1
 80153ee:	68b8      	ldr	r0, [r7, #8]
 80153f0:	f7ff fb60 	bl	8014ab4 <etharp_find_entry>
 80153f4:	4603      	mov	r3, r0
 80153f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80153f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	da02      	bge.n	8015406 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015400:	8a7b      	ldrh	r3, [r7, #18]
 8015402:	b25b      	sxtb	r3, r3
 8015404:	e0f3      	b.n	80155ee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015406:	8a7b      	ldrh	r3, [r7, #18]
 8015408:	2b7e      	cmp	r3, #126	; 0x7e
 801540a:	d906      	bls.n	801541a <etharp_query+0x7e>
 801540c:	4b7a      	ldr	r3, [pc, #488]	; (80155f8 <etharp_query+0x25c>)
 801540e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015412:	497a      	ldr	r1, [pc, #488]	; (80155fc <etharp_query+0x260>)
 8015414:	487a      	ldr	r0, [pc, #488]	; (8015600 <etharp_query+0x264>)
 8015416:	f001 fd99 	bl	8016f4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801541a:	8a7b      	ldrh	r3, [r7, #18]
 801541c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801541e:	7c7a      	ldrb	r2, [r7, #17]
 8015420:	4978      	ldr	r1, [pc, #480]	; (8015604 <etharp_query+0x268>)
 8015422:	4613      	mov	r3, r2
 8015424:	005b      	lsls	r3, r3, #1
 8015426:	4413      	add	r3, r2
 8015428:	00db      	lsls	r3, r3, #3
 801542a:	440b      	add	r3, r1
 801542c:	3314      	adds	r3, #20
 801542e:	781b      	ldrb	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d115      	bne.n	8015460 <etharp_query+0xc4>
    is_new_entry = 1;
 8015434:	2301      	movs	r3, #1
 8015436:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015438:	7c7a      	ldrb	r2, [r7, #17]
 801543a:	4972      	ldr	r1, [pc, #456]	; (8015604 <etharp_query+0x268>)
 801543c:	4613      	mov	r3, r2
 801543e:	005b      	lsls	r3, r3, #1
 8015440:	4413      	add	r3, r2
 8015442:	00db      	lsls	r3, r3, #3
 8015444:	440b      	add	r3, r1
 8015446:	3314      	adds	r3, #20
 8015448:	2201      	movs	r2, #1
 801544a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801544c:	7c7a      	ldrb	r2, [r7, #17]
 801544e:	496d      	ldr	r1, [pc, #436]	; (8015604 <etharp_query+0x268>)
 8015450:	4613      	mov	r3, r2
 8015452:	005b      	lsls	r3, r3, #1
 8015454:	4413      	add	r3, r2
 8015456:	00db      	lsls	r3, r3, #3
 8015458:	440b      	add	r3, r1
 801545a:	3308      	adds	r3, #8
 801545c:	68fa      	ldr	r2, [r7, #12]
 801545e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015460:	7c7a      	ldrb	r2, [r7, #17]
 8015462:	4968      	ldr	r1, [pc, #416]	; (8015604 <etharp_query+0x268>)
 8015464:	4613      	mov	r3, r2
 8015466:	005b      	lsls	r3, r3, #1
 8015468:	4413      	add	r3, r2
 801546a:	00db      	lsls	r3, r3, #3
 801546c:	440b      	add	r3, r1
 801546e:	3314      	adds	r3, #20
 8015470:	781b      	ldrb	r3, [r3, #0]
 8015472:	2b01      	cmp	r3, #1
 8015474:	d011      	beq.n	801549a <etharp_query+0xfe>
 8015476:	7c7a      	ldrb	r2, [r7, #17]
 8015478:	4962      	ldr	r1, [pc, #392]	; (8015604 <etharp_query+0x268>)
 801547a:	4613      	mov	r3, r2
 801547c:	005b      	lsls	r3, r3, #1
 801547e:	4413      	add	r3, r2
 8015480:	00db      	lsls	r3, r3, #3
 8015482:	440b      	add	r3, r1
 8015484:	3314      	adds	r3, #20
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	2b01      	cmp	r3, #1
 801548a:	d806      	bhi.n	801549a <etharp_query+0xfe>
 801548c:	4b5a      	ldr	r3, [pc, #360]	; (80155f8 <etharp_query+0x25c>)
 801548e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015492:	495d      	ldr	r1, [pc, #372]	; (8015608 <etharp_query+0x26c>)
 8015494:	485a      	ldr	r0, [pc, #360]	; (8015600 <etharp_query+0x264>)
 8015496:	f001 fd59 	bl	8016f4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801549a:	6a3b      	ldr	r3, [r7, #32]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d102      	bne.n	80154a6 <etharp_query+0x10a>
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d10c      	bne.n	80154c0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80154a6:	68b9      	ldr	r1, [r7, #8]
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	f000 f963 	bl	8015774 <etharp_request>
 80154ae:	4603      	mov	r3, r0
 80154b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d102      	bne.n	80154c0 <etharp_query+0x124>
      return result;
 80154ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80154be:	e096      	b.n	80155ee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d106      	bne.n	80154d4 <etharp_query+0x138>
 80154c6:	4b4c      	ldr	r3, [pc, #304]	; (80155f8 <etharp_query+0x25c>)
 80154c8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80154cc:	494f      	ldr	r1, [pc, #316]	; (801560c <etharp_query+0x270>)
 80154ce:	484c      	ldr	r0, [pc, #304]	; (8015600 <etharp_query+0x264>)
 80154d0:	f001 fd3c 	bl	8016f4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80154d4:	7c7a      	ldrb	r2, [r7, #17]
 80154d6:	494b      	ldr	r1, [pc, #300]	; (8015604 <etharp_query+0x268>)
 80154d8:	4613      	mov	r3, r2
 80154da:	005b      	lsls	r3, r3, #1
 80154dc:	4413      	add	r3, r2
 80154de:	00db      	lsls	r3, r3, #3
 80154e0:	440b      	add	r3, r1
 80154e2:	3314      	adds	r3, #20
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	2b01      	cmp	r3, #1
 80154e8:	d917      	bls.n	801551a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80154ea:	4a49      	ldr	r2, [pc, #292]	; (8015610 <etharp_query+0x274>)
 80154ec:	7c7b      	ldrb	r3, [r7, #17]
 80154ee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80154f0:	7c7a      	ldrb	r2, [r7, #17]
 80154f2:	4613      	mov	r3, r2
 80154f4:	005b      	lsls	r3, r3, #1
 80154f6:	4413      	add	r3, r2
 80154f8:	00db      	lsls	r3, r3, #3
 80154fa:	3308      	adds	r3, #8
 80154fc:	4a41      	ldr	r2, [pc, #260]	; (8015604 <etharp_query+0x268>)
 80154fe:	4413      	add	r3, r2
 8015500:	3304      	adds	r3, #4
 8015502:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015506:	9200      	str	r2, [sp, #0]
 8015508:	697a      	ldr	r2, [r7, #20]
 801550a:	6879      	ldr	r1, [r7, #4]
 801550c:	68f8      	ldr	r0, [r7, #12]
 801550e:	f001 fc6f 	bl	8016df0 <ethernet_output>
 8015512:	4603      	mov	r3, r0
 8015514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015518:	e067      	b.n	80155ea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801551a:	7c7a      	ldrb	r2, [r7, #17]
 801551c:	4939      	ldr	r1, [pc, #228]	; (8015604 <etharp_query+0x268>)
 801551e:	4613      	mov	r3, r2
 8015520:	005b      	lsls	r3, r3, #1
 8015522:	4413      	add	r3, r2
 8015524:	00db      	lsls	r3, r3, #3
 8015526:	440b      	add	r3, r1
 8015528:	3314      	adds	r3, #20
 801552a:	781b      	ldrb	r3, [r3, #0]
 801552c:	2b01      	cmp	r3, #1
 801552e:	d15c      	bne.n	80155ea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015530:	2300      	movs	r3, #0
 8015532:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015538:	e01c      	b.n	8015574 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	895a      	ldrh	r2, [r3, #10]
 801553e:	69fb      	ldr	r3, [r7, #28]
 8015540:	891b      	ldrh	r3, [r3, #8]
 8015542:	429a      	cmp	r2, r3
 8015544:	d10a      	bne.n	801555c <etharp_query+0x1c0>
 8015546:	69fb      	ldr	r3, [r7, #28]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d006      	beq.n	801555c <etharp_query+0x1c0>
 801554e:	4b2a      	ldr	r3, [pc, #168]	; (80155f8 <etharp_query+0x25c>)
 8015550:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015554:	492f      	ldr	r1, [pc, #188]	; (8015614 <etharp_query+0x278>)
 8015556:	482a      	ldr	r0, [pc, #168]	; (8015600 <etharp_query+0x264>)
 8015558:	f001 fcf8 	bl	8016f4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	7b1b      	ldrb	r3, [r3, #12]
 8015560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015564:	2b00      	cmp	r3, #0
 8015566:	d002      	beq.n	801556e <etharp_query+0x1d2>
        copy_needed = 1;
 8015568:	2301      	movs	r3, #1
 801556a:	61bb      	str	r3, [r7, #24]
        break;
 801556c:	e005      	b.n	801557a <etharp_query+0x1de>
      }
      p = p->next;
 801556e:	69fb      	ldr	r3, [r7, #28]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015574:	69fb      	ldr	r3, [r7, #28]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d1df      	bne.n	801553a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801557a:	69bb      	ldr	r3, [r7, #24]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d007      	beq.n	8015590 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015580:	687a      	ldr	r2, [r7, #4]
 8015582:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015586:	200e      	movs	r0, #14
 8015588:	f7f8 fe2e 	bl	800e1e8 <pbuf_clone>
 801558c:	61f8      	str	r0, [r7, #28]
 801558e:	e004      	b.n	801559a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015594:	69f8      	ldr	r0, [r7, #28]
 8015596:	f7f8 fc6b 	bl	800de70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d021      	beq.n	80155e4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80155a0:	7c7a      	ldrb	r2, [r7, #17]
 80155a2:	4918      	ldr	r1, [pc, #96]	; (8015604 <etharp_query+0x268>)
 80155a4:	4613      	mov	r3, r2
 80155a6:	005b      	lsls	r3, r3, #1
 80155a8:	4413      	add	r3, r2
 80155aa:	00db      	lsls	r3, r3, #3
 80155ac:	440b      	add	r3, r1
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d00a      	beq.n	80155ca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80155b4:	7c7a      	ldrb	r2, [r7, #17]
 80155b6:	4913      	ldr	r1, [pc, #76]	; (8015604 <etharp_query+0x268>)
 80155b8:	4613      	mov	r3, r2
 80155ba:	005b      	lsls	r3, r3, #1
 80155bc:	4413      	add	r3, r2
 80155be:	00db      	lsls	r3, r3, #3
 80155c0:	440b      	add	r3, r1
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7f8 fbb3 	bl	800dd30 <pbuf_free>
      }
      arp_table[i].q = p;
 80155ca:	7c7a      	ldrb	r2, [r7, #17]
 80155cc:	490d      	ldr	r1, [pc, #52]	; (8015604 <etharp_query+0x268>)
 80155ce:	4613      	mov	r3, r2
 80155d0:	005b      	lsls	r3, r3, #1
 80155d2:	4413      	add	r3, r2
 80155d4:	00db      	lsls	r3, r3, #3
 80155d6:	440b      	add	r3, r1
 80155d8:	69fa      	ldr	r2, [r7, #28]
 80155da:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80155dc:	2300      	movs	r3, #0
 80155de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155e2:	e002      	b.n	80155ea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80155e4:	23ff      	movs	r3, #255	; 0xff
 80155e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80155ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3728      	adds	r7, #40	; 0x28
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	0801bae8 	.word	0x0801bae8
 80155fc:	0801bc94 	.word	0x0801bc94
 8015600:	0801bb60 	.word	0x0801bb60
 8015604:	200016e8 	.word	0x200016e8
 8015608:	0801bca4 	.word	0x0801bca4
 801560c:	0801bc88 	.word	0x0801bc88
 8015610:	200017d8 	.word	0x200017d8
 8015614:	0801bccc 	.word	0x0801bccc

08015618 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b08a      	sub	sp, #40	; 0x28
 801561c:	af02      	add	r7, sp, #8
 801561e:	60f8      	str	r0, [r7, #12]
 8015620:	60b9      	str	r1, [r7, #8]
 8015622:	607a      	str	r2, [r7, #4]
 8015624:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015626:	2300      	movs	r3, #0
 8015628:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d106      	bne.n	801563e <etharp_raw+0x26>
 8015630:	4b3a      	ldr	r3, [pc, #232]	; (801571c <etharp_raw+0x104>)
 8015632:	f240 4257 	movw	r2, #1111	; 0x457
 8015636:	493a      	ldr	r1, [pc, #232]	; (8015720 <etharp_raw+0x108>)
 8015638:	483a      	ldr	r0, [pc, #232]	; (8015724 <etharp_raw+0x10c>)
 801563a:	f001 fc87 	bl	8016f4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801563e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015642:	211c      	movs	r1, #28
 8015644:	200e      	movs	r0, #14
 8015646:	f7f8 f88f 	bl	800d768 <pbuf_alloc>
 801564a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801564c:	69bb      	ldr	r3, [r7, #24]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d102      	bne.n	8015658 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015656:	e05d      	b.n	8015714 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	895b      	ldrh	r3, [r3, #10]
 801565c:	2b1b      	cmp	r3, #27
 801565e:	d806      	bhi.n	801566e <etharp_raw+0x56>
 8015660:	4b2e      	ldr	r3, [pc, #184]	; (801571c <etharp_raw+0x104>)
 8015662:	f240 4262 	movw	r2, #1122	; 0x462
 8015666:	4930      	ldr	r1, [pc, #192]	; (8015728 <etharp_raw+0x110>)
 8015668:	482e      	ldr	r0, [pc, #184]	; (8015724 <etharp_raw+0x10c>)
 801566a:	f001 fc6f 	bl	8016f4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801566e:	69bb      	ldr	r3, [r7, #24]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015674:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015676:	4618      	mov	r0, r3
 8015678:	f7f6 ffc8 	bl	800c60c <lwip_htons>
 801567c:	4603      	mov	r3, r0
 801567e:	461a      	mov	r2, r3
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801568a:	2b06      	cmp	r3, #6
 801568c:	d006      	beq.n	801569c <etharp_raw+0x84>
 801568e:	4b23      	ldr	r3, [pc, #140]	; (801571c <etharp_raw+0x104>)
 8015690:	f240 4269 	movw	r2, #1129	; 0x469
 8015694:	4925      	ldr	r1, [pc, #148]	; (801572c <etharp_raw+0x114>)
 8015696:	4823      	ldr	r0, [pc, #140]	; (8015724 <etharp_raw+0x10c>)
 8015698:	f001 fc58 	bl	8016f4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	3308      	adds	r3, #8
 80156a0:	2206      	movs	r2, #6
 80156a2:	6839      	ldr	r1, [r7, #0]
 80156a4:	4618      	mov	r0, r3
 80156a6:	f001 fc21 	bl	8016eec <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	3312      	adds	r3, #18
 80156ae:	2206      	movs	r2, #6
 80156b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80156b2:	4618      	mov	r0, r3
 80156b4:	f001 fc1a 	bl	8016eec <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	330e      	adds	r3, #14
 80156bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156be:	6812      	ldr	r2, [r2, #0]
 80156c0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80156c2:	697b      	ldr	r3, [r7, #20]
 80156c4:	3318      	adds	r3, #24
 80156c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156c8:	6812      	ldr	r2, [r2, #0]
 80156ca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	2200      	movs	r2, #0
 80156d0:	701a      	strb	r2, [r3, #0]
 80156d2:	2200      	movs	r2, #0
 80156d4:	f042 0201 	orr.w	r2, r2, #1
 80156d8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80156da:	697b      	ldr	r3, [r7, #20]
 80156dc:	2200      	movs	r2, #0
 80156de:	f042 0208 	orr.w	r2, r2, #8
 80156e2:	709a      	strb	r2, [r3, #2]
 80156e4:	2200      	movs	r2, #0
 80156e6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	2206      	movs	r2, #6
 80156ec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	2204      	movs	r2, #4
 80156f2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80156f4:	f640 0306 	movw	r3, #2054	; 0x806
 80156f8:	9300      	str	r3, [sp, #0]
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	68ba      	ldr	r2, [r7, #8]
 80156fe:	69b9      	ldr	r1, [r7, #24]
 8015700:	68f8      	ldr	r0, [r7, #12]
 8015702:	f001 fb75 	bl	8016df0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015706:	69b8      	ldr	r0, [r7, #24]
 8015708:	f7f8 fb12 	bl	800dd30 <pbuf_free>
  p = NULL;
 801570c:	2300      	movs	r3, #0
 801570e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015710:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015714:	4618      	mov	r0, r3
 8015716:	3720      	adds	r7, #32
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}
 801571c:	0801bae8 	.word	0x0801bae8
 8015720:	0801bc38 	.word	0x0801bc38
 8015724:	0801bb60 	.word	0x0801bb60
 8015728:	0801bce8 	.word	0x0801bce8
 801572c:	0801bd1c 	.word	0x0801bd1c

08015730 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b088      	sub	sp, #32
 8015734:	af04      	add	r7, sp, #16
 8015736:	60f8      	str	r0, [r7, #12]
 8015738:	60b9      	str	r1, [r7, #8]
 801573a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801574c:	2201      	movs	r2, #1
 801574e:	9203      	str	r2, [sp, #12]
 8015750:	68ba      	ldr	r2, [r7, #8]
 8015752:	9202      	str	r2, [sp, #8]
 8015754:	4a06      	ldr	r2, [pc, #24]	; (8015770 <etharp_request_dst+0x40>)
 8015756:	9201      	str	r2, [sp, #4]
 8015758:	9300      	str	r3, [sp, #0]
 801575a:	4603      	mov	r3, r0
 801575c:	687a      	ldr	r2, [r7, #4]
 801575e:	68f8      	ldr	r0, [r7, #12]
 8015760:	f7ff ff5a 	bl	8015618 <etharp_raw>
 8015764:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015766:	4618      	mov	r0, r3
 8015768:	3710      	adds	r7, #16
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	0801eae0 	.word	0x0801eae0

08015774 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801577e:	4a05      	ldr	r2, [pc, #20]	; (8015794 <etharp_request+0x20>)
 8015780:	6839      	ldr	r1, [r7, #0]
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f7ff ffd4 	bl	8015730 <etharp_request_dst>
 8015788:	4603      	mov	r3, r0
}
 801578a:	4618      	mov	r0, r3
 801578c:	3708      	adds	r7, #8
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
 8015792:	bf00      	nop
 8015794:	0801ead8 	.word	0x0801ead8

08015798 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b08e      	sub	sp, #56	; 0x38
 801579c:	af04      	add	r7, sp, #16
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80157a2:	4b79      	ldr	r3, [pc, #484]	; (8015988 <icmp_input+0x1f0>)
 80157a4:	689b      	ldr	r3, [r3, #8]
 80157a6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80157a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157aa:	781b      	ldrb	r3, [r3, #0]
 80157ac:	f003 030f 	and.w	r3, r3, #15
 80157b0:	b2db      	uxtb	r3, r3
 80157b2:	009b      	lsls	r3, r3, #2
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80157b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157ba:	2b13      	cmp	r3, #19
 80157bc:	f240 80cd 	bls.w	801595a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	895b      	ldrh	r3, [r3, #10]
 80157c4:	2b03      	cmp	r3, #3
 80157c6:	f240 80ca 	bls.w	801595e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	685b      	ldr	r3, [r3, #4]
 80157ce:	781b      	ldrb	r3, [r3, #0]
 80157d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80157d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80157d8:	2b00      	cmp	r3, #0
 80157da:	f000 80b7 	beq.w	801594c <icmp_input+0x1b4>
 80157de:	2b08      	cmp	r3, #8
 80157e0:	f040 80b7 	bne.w	8015952 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80157e4:	4b69      	ldr	r3, [pc, #420]	; (801598c <icmp_input+0x1f4>)
 80157e6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80157e8:	4b67      	ldr	r3, [pc, #412]	; (8015988 <icmp_input+0x1f0>)
 80157ea:	695b      	ldr	r3, [r3, #20]
 80157ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80157f0:	2be0      	cmp	r3, #224	; 0xe0
 80157f2:	f000 80bb 	beq.w	801596c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80157f6:	4b64      	ldr	r3, [pc, #400]	; (8015988 <icmp_input+0x1f0>)
 80157f8:	695b      	ldr	r3, [r3, #20]
 80157fa:	4a63      	ldr	r2, [pc, #396]	; (8015988 <icmp_input+0x1f0>)
 80157fc:	6812      	ldr	r2, [r2, #0]
 80157fe:	4611      	mov	r1, r2
 8015800:	4618      	mov	r0, r3
 8015802:	f000 fbed 	bl	8015fe0 <ip4_addr_isbroadcast_u32>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	f040 80b1 	bne.w	8015970 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	891b      	ldrh	r3, [r3, #8]
 8015812:	2b07      	cmp	r3, #7
 8015814:	f240 80a5 	bls.w	8015962 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015818:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801581a:	330e      	adds	r3, #14
 801581c:	4619      	mov	r1, r3
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f7f8 f9f0 	bl	800dc04 <pbuf_add_header>
 8015824:	4603      	mov	r3, r0
 8015826:	2b00      	cmp	r3, #0
 8015828:	d04b      	beq.n	80158c2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	891a      	ldrh	r2, [r3, #8]
 801582e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015830:	4413      	add	r3, r2
 8015832:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	891b      	ldrh	r3, [r3, #8]
 8015838:	8b7a      	ldrh	r2, [r7, #26]
 801583a:	429a      	cmp	r2, r3
 801583c:	f0c0 809a 	bcc.w	8015974 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015840:	8b7b      	ldrh	r3, [r7, #26]
 8015842:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015846:	4619      	mov	r1, r3
 8015848:	200e      	movs	r0, #14
 801584a:	f7f7 ff8d 	bl	800d768 <pbuf_alloc>
 801584e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	2b00      	cmp	r3, #0
 8015854:	f000 8090 	beq.w	8015978 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	895b      	ldrh	r3, [r3, #10]
 801585c:	461a      	mov	r2, r3
 801585e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015860:	3308      	adds	r3, #8
 8015862:	429a      	cmp	r2, r3
 8015864:	d203      	bcs.n	801586e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015866:	6978      	ldr	r0, [r7, #20]
 8015868:	f7f8 fa62 	bl	800dd30 <pbuf_free>
          goto icmperr;
 801586c:	e085      	b.n	801597a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015876:	4618      	mov	r0, r3
 8015878:	f001 fb38 	bl	8016eec <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801587c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801587e:	4619      	mov	r1, r3
 8015880:	6978      	ldr	r0, [r7, #20]
 8015882:	f7f8 f9cf 	bl	800dc24 <pbuf_remove_header>
 8015886:	4603      	mov	r3, r0
 8015888:	2b00      	cmp	r3, #0
 801588a:	d009      	beq.n	80158a0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801588c:	4b40      	ldr	r3, [pc, #256]	; (8015990 <icmp_input+0x1f8>)
 801588e:	22b6      	movs	r2, #182	; 0xb6
 8015890:	4940      	ldr	r1, [pc, #256]	; (8015994 <icmp_input+0x1fc>)
 8015892:	4841      	ldr	r0, [pc, #260]	; (8015998 <icmp_input+0x200>)
 8015894:	f001 fb5a 	bl	8016f4c <iprintf>
          pbuf_free(r);
 8015898:	6978      	ldr	r0, [r7, #20]
 801589a:	f7f8 fa49 	bl	800dd30 <pbuf_free>
          goto icmperr;
 801589e:	e06c      	b.n	801597a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80158a0:	6879      	ldr	r1, [r7, #4]
 80158a2:	6978      	ldr	r0, [r7, #20]
 80158a4:	f7f8 fb5c 	bl	800df60 <pbuf_copy>
 80158a8:	4603      	mov	r3, r0
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d003      	beq.n	80158b6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80158ae:	6978      	ldr	r0, [r7, #20]
 80158b0:	f7f8 fa3e 	bl	800dd30 <pbuf_free>
          goto icmperr;
 80158b4:	e061      	b.n	801597a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f7f8 fa3a 	bl	800dd30 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	607b      	str	r3, [r7, #4]
 80158c0:	e00f      	b.n	80158e2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80158c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80158c4:	330e      	adds	r3, #14
 80158c6:	4619      	mov	r1, r3
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f7f8 f9ab 	bl	800dc24 <pbuf_remove_header>
 80158ce:	4603      	mov	r3, r0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d006      	beq.n	80158e2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80158d4:	4b2e      	ldr	r3, [pc, #184]	; (8015990 <icmp_input+0x1f8>)
 80158d6:	22c7      	movs	r2, #199	; 0xc7
 80158d8:	4930      	ldr	r1, [pc, #192]	; (801599c <icmp_input+0x204>)
 80158da:	482f      	ldr	r0, [pc, #188]	; (8015998 <icmp_input+0x200>)
 80158dc:	f001 fb36 	bl	8016f4c <iprintf>
          goto icmperr;
 80158e0:	e04b      	b.n	801597a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80158e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80158ea:	4619      	mov	r1, r3
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f7f8 f989 	bl	800dc04 <pbuf_add_header>
 80158f2:	4603      	mov	r3, r0
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d12b      	bne.n	8015950 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80158fe:	69fb      	ldr	r3, [r7, #28]
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015906:	4b20      	ldr	r3, [pc, #128]	; (8015988 <icmp_input+0x1f0>)
 8015908:	691a      	ldr	r2, [r3, #16]
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	2200      	movs	r2, #0
 8015912:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015914:	693b      	ldr	r3, [r7, #16]
 8015916:	2200      	movs	r2, #0
 8015918:	709a      	strb	r2, [r3, #2]
 801591a:	2200      	movs	r2, #0
 801591c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	22ff      	movs	r2, #255	; 0xff
 8015922:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2200      	movs	r2, #0
 8015928:	729a      	strb	r2, [r3, #10]
 801592a:	2200      	movs	r2, #0
 801592c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	9302      	str	r3, [sp, #8]
 8015932:	2301      	movs	r3, #1
 8015934:	9301      	str	r3, [sp, #4]
 8015936:	2300      	movs	r3, #0
 8015938:	9300      	str	r3, [sp, #0]
 801593a:	23ff      	movs	r3, #255	; 0xff
 801593c:	2200      	movs	r2, #0
 801593e:	69f9      	ldr	r1, [r7, #28]
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f000 fa75 	bl	8015e30 <ip4_output_if>
 8015946:	4603      	mov	r3, r0
 8015948:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801594a:	e001      	b.n	8015950 <icmp_input+0x1b8>
      break;
 801594c:	bf00      	nop
 801594e:	e000      	b.n	8015952 <icmp_input+0x1ba>
      break;
 8015950:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f7f8 f9ec 	bl	800dd30 <pbuf_free>
  return;
 8015958:	e013      	b.n	8015982 <icmp_input+0x1ea>
    goto lenerr;
 801595a:	bf00      	nop
 801595c:	e002      	b.n	8015964 <icmp_input+0x1cc>
    goto lenerr;
 801595e:	bf00      	nop
 8015960:	e000      	b.n	8015964 <icmp_input+0x1cc>
        goto lenerr;
 8015962:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015964:	6878      	ldr	r0, [r7, #4]
 8015966:	f7f8 f9e3 	bl	800dd30 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801596a:	e00a      	b.n	8015982 <icmp_input+0x1ea>
        goto icmperr;
 801596c:	bf00      	nop
 801596e:	e004      	b.n	801597a <icmp_input+0x1e2>
        goto icmperr;
 8015970:	bf00      	nop
 8015972:	e002      	b.n	801597a <icmp_input+0x1e2>
          goto icmperr;
 8015974:	bf00      	nop
 8015976:	e000      	b.n	801597a <icmp_input+0x1e2>
          goto icmperr;
 8015978:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f7f8 f9d8 	bl	800dd30 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015980:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015982:	3728      	adds	r7, #40	; 0x28
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	2000df88 	.word	0x2000df88
 801598c:	2000df9c 	.word	0x2000df9c
 8015990:	0801bd60 	.word	0x0801bd60
 8015994:	0801bd98 	.word	0x0801bd98
 8015998:	0801bdd0 	.word	0x0801bdd0
 801599c:	0801bdf8 	.word	0x0801bdf8

080159a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
 80159a8:	460b      	mov	r3, r1
 80159aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80159ac:	78fb      	ldrb	r3, [r7, #3]
 80159ae:	461a      	mov	r2, r3
 80159b0:	2103      	movs	r1, #3
 80159b2:	6878      	ldr	r0, [r7, #4]
 80159b4:	f000 f814 	bl	80159e0 <icmp_send_response>
}
 80159b8:	bf00      	nop
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
 80159c8:	460b      	mov	r3, r1
 80159ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80159cc:	78fb      	ldrb	r3, [r7, #3]
 80159ce:	461a      	mov	r2, r3
 80159d0:	210b      	movs	r1, #11
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f000 f804 	bl	80159e0 <icmp_send_response>
}
 80159d8:	bf00      	nop
 80159da:	3708      	adds	r7, #8
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}

080159e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b08c      	sub	sp, #48	; 0x30
 80159e4:	af04      	add	r7, sp, #16
 80159e6:	6078      	str	r0, [r7, #4]
 80159e8:	460b      	mov	r3, r1
 80159ea:	70fb      	strb	r3, [r7, #3]
 80159ec:	4613      	mov	r3, r2
 80159ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80159f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80159f4:	2124      	movs	r1, #36	; 0x24
 80159f6:	2022      	movs	r0, #34	; 0x22
 80159f8:	f7f7 feb6 	bl	800d768 <pbuf_alloc>
 80159fc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80159fe:	69fb      	ldr	r3, [r7, #28]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d04c      	beq.n	8015a9e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015a04:	69fb      	ldr	r3, [r7, #28]
 8015a06:	895b      	ldrh	r3, [r3, #10]
 8015a08:	2b23      	cmp	r3, #35	; 0x23
 8015a0a:	d806      	bhi.n	8015a1a <icmp_send_response+0x3a>
 8015a0c:	4b26      	ldr	r3, [pc, #152]	; (8015aa8 <icmp_send_response+0xc8>)
 8015a0e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015a12:	4926      	ldr	r1, [pc, #152]	; (8015aac <icmp_send_response+0xcc>)
 8015a14:	4826      	ldr	r0, [pc, #152]	; (8015ab0 <icmp_send_response+0xd0>)
 8015a16:	f001 fa99 	bl	8016f4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	685b      	ldr	r3, [r3, #4]
 8015a1e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015a20:	69fb      	ldr	r3, [r7, #28]
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	78fa      	ldrb	r2, [r7, #3]
 8015a2a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	78ba      	ldrb	r2, [r7, #2]
 8015a30:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015a32:	697b      	ldr	r3, [r7, #20]
 8015a34:	2200      	movs	r2, #0
 8015a36:	711a      	strb	r2, [r3, #4]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	2200      	movs	r2, #0
 8015a40:	719a      	strb	r2, [r3, #6]
 8015a42:	2200      	movs	r2, #0
 8015a44:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015a46:	69fb      	ldr	r3, [r7, #28]
 8015a48:	685b      	ldr	r3, [r3, #4]
 8015a4a:	f103 0008 	add.w	r0, r3, #8
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	221c      	movs	r2, #28
 8015a54:	4619      	mov	r1, r3
 8015a56:	f001 fa49 	bl	8016eec <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015a5a:	69bb      	ldr	r3, [r7, #24]
 8015a5c:	68db      	ldr	r3, [r3, #12]
 8015a5e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015a60:	f107 030c 	add.w	r3, r7, #12
 8015a64:	4618      	mov	r0, r3
 8015a66:	f000 f825 	bl	8015ab4 <ip4_route>
 8015a6a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015a6c:	693b      	ldr	r3, [r7, #16]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d011      	beq.n	8015a96 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	2200      	movs	r2, #0
 8015a76:	709a      	strb	r2, [r3, #2]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015a7c:	f107 020c 	add.w	r2, r7, #12
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	9302      	str	r3, [sp, #8]
 8015a84:	2301      	movs	r3, #1
 8015a86:	9301      	str	r3, [sp, #4]
 8015a88:	2300      	movs	r3, #0
 8015a8a:	9300      	str	r3, [sp, #0]
 8015a8c:	23ff      	movs	r3, #255	; 0xff
 8015a8e:	2100      	movs	r1, #0
 8015a90:	69f8      	ldr	r0, [r7, #28]
 8015a92:	f000 f9cd 	bl	8015e30 <ip4_output_if>
  }
  pbuf_free(q);
 8015a96:	69f8      	ldr	r0, [r7, #28]
 8015a98:	f7f8 f94a 	bl	800dd30 <pbuf_free>
 8015a9c:	e000      	b.n	8015aa0 <icmp_send_response+0xc0>
    return;
 8015a9e:	bf00      	nop
}
 8015aa0:	3720      	adds	r7, #32
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	0801bd60 	.word	0x0801bd60
 8015aac:	0801be2c 	.word	0x0801be2c
 8015ab0:	0801bdd0 	.word	0x0801bdd0

08015ab4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015ab4:	b480      	push	{r7}
 8015ab6:	b085      	sub	sp, #20
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015abc:	4b33      	ldr	r3, [pc, #204]	; (8015b8c <ip4_route+0xd8>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	60fb      	str	r3, [r7, #12]
 8015ac2:	e036      	b.n	8015b32 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015aca:	f003 0301 	and.w	r3, r3, #1
 8015ace:	b2db      	uxtb	r3, r3
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d02b      	beq.n	8015b2c <ip4_route+0x78>
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ada:	089b      	lsrs	r3, r3, #2
 8015adc:	f003 0301 	and.w	r3, r3, #1
 8015ae0:	b2db      	uxtb	r3, r3
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d022      	beq.n	8015b2c <ip4_route+0x78>
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	3304      	adds	r3, #4
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d01d      	beq.n	8015b2c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	3304      	adds	r3, #4
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	405a      	eors	r2, r3
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	3308      	adds	r3, #8
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	4013      	ands	r3, r2
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d101      	bne.n	8015b0c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	e038      	b.n	8015b7e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015b12:	f003 0302 	and.w	r3, r3, #2
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d108      	bne.n	8015b2c <ip4_route+0x78>
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681a      	ldr	r2, [r3, #0]
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	330c      	adds	r3, #12
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d101      	bne.n	8015b2c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	e028      	b.n	8015b7e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	60fb      	str	r3, [r7, #12]
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d1c5      	bne.n	8015ac4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015b38:	4b15      	ldr	r3, [pc, #84]	; (8015b90 <ip4_route+0xdc>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d01a      	beq.n	8015b76 <ip4_route+0xc2>
 8015b40:	4b13      	ldr	r3, [pc, #76]	; (8015b90 <ip4_route+0xdc>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015b48:	f003 0301 	and.w	r3, r3, #1
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d012      	beq.n	8015b76 <ip4_route+0xc2>
 8015b50:	4b0f      	ldr	r3, [pc, #60]	; (8015b90 <ip4_route+0xdc>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015b58:	f003 0304 	and.w	r3, r3, #4
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d00a      	beq.n	8015b76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015b60:	4b0b      	ldr	r3, [pc, #44]	; (8015b90 <ip4_route+0xdc>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	3304      	adds	r3, #4
 8015b66:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d004      	beq.n	8015b76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	b2db      	uxtb	r3, r3
 8015b72:	2b7f      	cmp	r3, #127	; 0x7f
 8015b74:	d101      	bne.n	8015b7a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015b76:	2300      	movs	r3, #0
 8015b78:	e001      	b.n	8015b7e <ip4_route+0xca>
  }

  return netif_default;
 8015b7a:	4b05      	ldr	r3, [pc, #20]	; (8015b90 <ip4_route+0xdc>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3714      	adds	r7, #20
 8015b82:	46bd      	mov	sp, r7
 8015b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b88:	4770      	bx	lr
 8015b8a:	bf00      	nop
 8015b8c:	200114bc 	.word	0x200114bc
 8015b90:	200114c0 	.word	0x200114c0

08015b94 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ba2:	f003 0301 	and.w	r3, r3, #1
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d016      	beq.n	8015bda <ip4_input_accept+0x46>
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	3304      	adds	r3, #4
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d011      	beq.n	8015bda <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015bb6:	4b0b      	ldr	r3, [pc, #44]	; (8015be4 <ip4_input_accept+0x50>)
 8015bb8:	695a      	ldr	r2, [r3, #20]
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	3304      	adds	r3, #4
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d008      	beq.n	8015bd6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015bc4:	4b07      	ldr	r3, [pc, #28]	; (8015be4 <ip4_input_accept+0x50>)
 8015bc6:	695b      	ldr	r3, [r3, #20]
 8015bc8:	6879      	ldr	r1, [r7, #4]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f000 fa08 	bl	8015fe0 <ip4_addr_isbroadcast_u32>
 8015bd0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d001      	beq.n	8015bda <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	e000      	b.n	8015bdc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015bda:	2300      	movs	r3, #0
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3708      	adds	r7, #8
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}
 8015be4:	2000df88 	.word	0x2000df88

08015be8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b086      	sub	sp, #24
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
 8015bf0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	685b      	ldr	r3, [r3, #4]
 8015bf6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	091b      	lsrs	r3, r3, #4
 8015bfe:	b2db      	uxtb	r3, r3
 8015c00:	2b04      	cmp	r3, #4
 8015c02:	d004      	beq.n	8015c0e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f7f8 f893 	bl	800dd30 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	e107      	b.n	8015e1e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	781b      	ldrb	r3, [r3, #0]
 8015c12:	f003 030f 	and.w	r3, r3, #15
 8015c16:	b2db      	uxtb	r3, r3
 8015c18:	009b      	lsls	r3, r3, #2
 8015c1a:	b2db      	uxtb	r3, r3
 8015c1c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015c1e:	697b      	ldr	r3, [r7, #20]
 8015c20:	885b      	ldrh	r3, [r3, #2]
 8015c22:	b29b      	uxth	r3, r3
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7f6 fcf1 	bl	800c60c <lwip_htons>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	891b      	ldrh	r3, [r3, #8]
 8015c32:	89ba      	ldrh	r2, [r7, #12]
 8015c34:	429a      	cmp	r2, r3
 8015c36:	d204      	bcs.n	8015c42 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015c38:	89bb      	ldrh	r3, [r7, #12]
 8015c3a:	4619      	mov	r1, r3
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f7f7 fef1 	bl	800da24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	895b      	ldrh	r3, [r3, #10]
 8015c46:	89fa      	ldrh	r2, [r7, #14]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d807      	bhi.n	8015c5c <ip4_input+0x74>
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	891b      	ldrh	r3, [r3, #8]
 8015c50:	89ba      	ldrh	r2, [r7, #12]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d802      	bhi.n	8015c5c <ip4_input+0x74>
 8015c56:	89fb      	ldrh	r3, [r7, #14]
 8015c58:	2b13      	cmp	r3, #19
 8015c5a:	d804      	bhi.n	8015c66 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f7f8 f867 	bl	800dd30 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015c62:	2300      	movs	r3, #0
 8015c64:	e0db      	b.n	8015e1e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	691b      	ldr	r3, [r3, #16]
 8015c6a:	4a6f      	ldr	r2, [pc, #444]	; (8015e28 <ip4_input+0x240>)
 8015c6c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	68db      	ldr	r3, [r3, #12]
 8015c72:	4a6d      	ldr	r2, [pc, #436]	; (8015e28 <ip4_input+0x240>)
 8015c74:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c76:	4b6c      	ldr	r3, [pc, #432]	; (8015e28 <ip4_input+0x240>)
 8015c78:	695b      	ldr	r3, [r3, #20]
 8015c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c7e:	2be0      	cmp	r3, #224	; 0xe0
 8015c80:	d112      	bne.n	8015ca8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c88:	f003 0301 	and.w	r3, r3, #1
 8015c8c:	b2db      	uxtb	r3, r3
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d007      	beq.n	8015ca2 <ip4_input+0xba>
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	3304      	adds	r3, #4
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d002      	beq.n	8015ca2 <ip4_input+0xba>
      netif = inp;
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	613b      	str	r3, [r7, #16]
 8015ca0:	e02a      	b.n	8015cf8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	613b      	str	r3, [r7, #16]
 8015ca6:	e027      	b.n	8015cf8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015ca8:	6838      	ldr	r0, [r7, #0]
 8015caa:	f7ff ff73 	bl	8015b94 <ip4_input_accept>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d002      	beq.n	8015cba <ip4_input+0xd2>
      netif = inp;
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	613b      	str	r3, [r7, #16]
 8015cb8:	e01e      	b.n	8015cf8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015cbe:	4b5a      	ldr	r3, [pc, #360]	; (8015e28 <ip4_input+0x240>)
 8015cc0:	695b      	ldr	r3, [r3, #20]
 8015cc2:	b2db      	uxtb	r3, r3
 8015cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8015cc6:	d017      	beq.n	8015cf8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015cc8:	4b58      	ldr	r3, [pc, #352]	; (8015e2c <ip4_input+0x244>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	613b      	str	r3, [r7, #16]
 8015cce:	e00e      	b.n	8015cee <ip4_input+0x106>
          if (netif == inp) {
 8015cd0:	693a      	ldr	r2, [r7, #16]
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d006      	beq.n	8015ce6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015cd8:	6938      	ldr	r0, [r7, #16]
 8015cda:	f7ff ff5b 	bl	8015b94 <ip4_input_accept>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d108      	bne.n	8015cf6 <ip4_input+0x10e>
 8015ce4:	e000      	b.n	8015ce8 <ip4_input+0x100>
            continue;
 8015ce6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	613b      	str	r3, [r7, #16]
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d1ed      	bne.n	8015cd0 <ip4_input+0xe8>
 8015cf4:	e000      	b.n	8015cf8 <ip4_input+0x110>
            break;
 8015cf6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015cf8:	4b4b      	ldr	r3, [pc, #300]	; (8015e28 <ip4_input+0x240>)
 8015cfa:	691b      	ldr	r3, [r3, #16]
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f000 f96e 	bl	8015fe0 <ip4_addr_isbroadcast_u32>
 8015d04:	4603      	mov	r3, r0
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d105      	bne.n	8015d16 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015d0a:	4b47      	ldr	r3, [pc, #284]	; (8015e28 <ip4_input+0x240>)
 8015d0c:	691b      	ldr	r3, [r3, #16]
 8015d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015d12:	2be0      	cmp	r3, #224	; 0xe0
 8015d14:	d104      	bne.n	8015d20 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f7f8 f80a 	bl	800dd30 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	e07e      	b.n	8015e1e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015d20:	693b      	ldr	r3, [r7, #16]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d104      	bne.n	8015d30 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f7f8 f802 	bl	800dd30 <pbuf_free>
    return ERR_OK;
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	e076      	b.n	8015e1e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	88db      	ldrh	r3, [r3, #6]
 8015d34:	b29b      	uxth	r3, r3
 8015d36:	461a      	mov	r2, r3
 8015d38:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015d3c:	4013      	ands	r3, r2
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d00b      	beq.n	8015d5a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f000 fc92 	bl	801666c <ip4_reass>
 8015d48:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d101      	bne.n	8015d54 <ip4_input+0x16c>
      return ERR_OK;
 8015d50:	2300      	movs	r3, #0
 8015d52:	e064      	b.n	8015e1e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	685b      	ldr	r3, [r3, #4]
 8015d58:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015d5a:	4a33      	ldr	r2, [pc, #204]	; (8015e28 <ip4_input+0x240>)
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015d60:	4a31      	ldr	r2, [pc, #196]	; (8015e28 <ip4_input+0x240>)
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015d66:	4a30      	ldr	r2, [pc, #192]	; (8015e28 <ip4_input+0x240>)
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015d6c:	697b      	ldr	r3, [r7, #20]
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	f003 030f 	and.w	r3, r3, #15
 8015d74:	b2db      	uxtb	r3, r3
 8015d76:	009b      	lsls	r3, r3, #2
 8015d78:	b2db      	uxtb	r3, r3
 8015d7a:	b29a      	uxth	r2, r3
 8015d7c:	4b2a      	ldr	r3, [pc, #168]	; (8015e28 <ip4_input+0x240>)
 8015d7e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015d80:	89fb      	ldrh	r3, [r7, #14]
 8015d82:	4619      	mov	r1, r3
 8015d84:	6878      	ldr	r0, [r7, #4]
 8015d86:	f7f7 ff4d 	bl	800dc24 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015d8a:	697b      	ldr	r3, [r7, #20]
 8015d8c:	7a5b      	ldrb	r3, [r3, #9]
 8015d8e:	2b11      	cmp	r3, #17
 8015d90:	d006      	beq.n	8015da0 <ip4_input+0x1b8>
 8015d92:	2b11      	cmp	r3, #17
 8015d94:	dc13      	bgt.n	8015dbe <ip4_input+0x1d6>
 8015d96:	2b01      	cmp	r3, #1
 8015d98:	d00c      	beq.n	8015db4 <ip4_input+0x1cc>
 8015d9a:	2b06      	cmp	r3, #6
 8015d9c:	d005      	beq.n	8015daa <ip4_input+0x1c2>
 8015d9e:	e00e      	b.n	8015dbe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015da0:	6839      	ldr	r1, [r7, #0]
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f7fe fc68 	bl	8014678 <udp_input>
        break;
 8015da8:	e026      	b.n	8015df8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015daa:	6839      	ldr	r1, [r7, #0]
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f7fa f88d 	bl	800fecc <tcp_input>
        break;
 8015db2:	e021      	b.n	8015df8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015db4:	6839      	ldr	r1, [r7, #0]
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f7ff fcee 	bl	8015798 <icmp_input>
        break;
 8015dbc:	e01c      	b.n	8015df8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015dbe:	4b1a      	ldr	r3, [pc, #104]	; (8015e28 <ip4_input+0x240>)
 8015dc0:	695b      	ldr	r3, [r3, #20]
 8015dc2:	6939      	ldr	r1, [r7, #16]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f000 f90b 	bl	8015fe0 <ip4_addr_isbroadcast_u32>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d10f      	bne.n	8015df0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015dd0:	4b15      	ldr	r3, [pc, #84]	; (8015e28 <ip4_input+0x240>)
 8015dd2:	695b      	ldr	r3, [r3, #20]
 8015dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015dd8:	2be0      	cmp	r3, #224	; 0xe0
 8015dda:	d009      	beq.n	8015df0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015ddc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015de0:	4619      	mov	r1, r3
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f7f7 ff91 	bl	800dd0a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015de8:	2102      	movs	r1, #2
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f7ff fdd8 	bl	80159a0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f7f7 ff9d 	bl	800dd30 <pbuf_free>
        break;
 8015df6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015df8:	4b0b      	ldr	r3, [pc, #44]	; (8015e28 <ip4_input+0x240>)
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015dfe:	4b0a      	ldr	r3, [pc, #40]	; (8015e28 <ip4_input+0x240>)
 8015e00:	2200      	movs	r2, #0
 8015e02:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015e04:	4b08      	ldr	r3, [pc, #32]	; (8015e28 <ip4_input+0x240>)
 8015e06:	2200      	movs	r2, #0
 8015e08:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015e0a:	4b07      	ldr	r3, [pc, #28]	; (8015e28 <ip4_input+0x240>)
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015e10:	4b05      	ldr	r3, [pc, #20]	; (8015e28 <ip4_input+0x240>)
 8015e12:	2200      	movs	r2, #0
 8015e14:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015e16:	4b04      	ldr	r3, [pc, #16]	; (8015e28 <ip4_input+0x240>)
 8015e18:	2200      	movs	r2, #0
 8015e1a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015e1c:	2300      	movs	r3, #0
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3718      	adds	r7, #24
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	2000df88 	.word	0x2000df88
 8015e2c:	200114bc 	.word	0x200114bc

08015e30 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b08a      	sub	sp, #40	; 0x28
 8015e34:	af04      	add	r7, sp, #16
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	60b9      	str	r1, [r7, #8]
 8015e3a:	607a      	str	r2, [r7, #4]
 8015e3c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d009      	beq.n	8015e5c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015e48:	68bb      	ldr	r3, [r7, #8]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d003      	beq.n	8015e56 <ip4_output_if+0x26>
 8015e4e:	68bb      	ldr	r3, [r7, #8]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d102      	bne.n	8015e5c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e58:	3304      	adds	r3, #4
 8015e5a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015e5c:	78fa      	ldrb	r2, [r7, #3]
 8015e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e60:	9302      	str	r3, [sp, #8]
 8015e62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e66:	9301      	str	r3, [sp, #4]
 8015e68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015e6c:	9300      	str	r3, [sp, #0]
 8015e6e:	4613      	mov	r3, r2
 8015e70:	687a      	ldr	r2, [r7, #4]
 8015e72:	6979      	ldr	r1, [r7, #20]
 8015e74:	68f8      	ldr	r0, [r7, #12]
 8015e76:	f000 f805 	bl	8015e84 <ip4_output_if_src>
 8015e7a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3718      	adds	r7, #24
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b088      	sub	sp, #32
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	60b9      	str	r1, [r7, #8]
 8015e8e:	607a      	str	r2, [r7, #4]
 8015e90:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	7b9b      	ldrb	r3, [r3, #14]
 8015e96:	2b01      	cmp	r3, #1
 8015e98:	d006      	beq.n	8015ea8 <ip4_output_if_src+0x24>
 8015e9a:	4b4b      	ldr	r3, [pc, #300]	; (8015fc8 <ip4_output_if_src+0x144>)
 8015e9c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015ea0:	494a      	ldr	r1, [pc, #296]	; (8015fcc <ip4_output_if_src+0x148>)
 8015ea2:	484b      	ldr	r0, [pc, #300]	; (8015fd0 <ip4_output_if_src+0x14c>)
 8015ea4:	f001 f852 	bl	8016f4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d060      	beq.n	8015f70 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015eae:	2314      	movs	r3, #20
 8015eb0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015eb2:	2114      	movs	r1, #20
 8015eb4:	68f8      	ldr	r0, [r7, #12]
 8015eb6:	f7f7 fea5 	bl	800dc04 <pbuf_add_header>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d002      	beq.n	8015ec6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ec0:	f06f 0301 	mvn.w	r3, #1
 8015ec4:	e07c      	b.n	8015fc0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	895b      	ldrh	r3, [r3, #10]
 8015ed0:	2b13      	cmp	r3, #19
 8015ed2:	d806      	bhi.n	8015ee2 <ip4_output_if_src+0x5e>
 8015ed4:	4b3c      	ldr	r3, [pc, #240]	; (8015fc8 <ip4_output_if_src+0x144>)
 8015ed6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015eda:	493e      	ldr	r1, [pc, #248]	; (8015fd4 <ip4_output_if_src+0x150>)
 8015edc:	483c      	ldr	r0, [pc, #240]	; (8015fd0 <ip4_output_if_src+0x14c>)
 8015ede:	f001 f835 	bl	8016f4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015ee2:	69fb      	ldr	r3, [r7, #28]
 8015ee4:	78fa      	ldrb	r2, [r7, #3]
 8015ee6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015eee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681a      	ldr	r2, [r3, #0]
 8015ef4:	69fb      	ldr	r3, [r7, #28]
 8015ef6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015ef8:	8b7b      	ldrh	r3, [r7, #26]
 8015efa:	089b      	lsrs	r3, r3, #2
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	b2db      	uxtb	r3, r3
 8015f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f04:	b2da      	uxtb	r2, r3
 8015f06:	69fb      	ldr	r3, [r7, #28]
 8015f08:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015f0a:	69fb      	ldr	r3, [r7, #28]
 8015f0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015f10:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	891b      	ldrh	r3, [r3, #8]
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7f6 fb78 	bl	800c60c <lwip_htons>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	461a      	mov	r2, r3
 8015f20:	69fb      	ldr	r3, [r7, #28]
 8015f22:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015f24:	69fb      	ldr	r3, [r7, #28]
 8015f26:	2200      	movs	r2, #0
 8015f28:	719a      	strb	r2, [r3, #6]
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015f2e:	4b2a      	ldr	r3, [pc, #168]	; (8015fd8 <ip4_output_if_src+0x154>)
 8015f30:	881b      	ldrh	r3, [r3, #0]
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7f6 fb6a 	bl	800c60c <lwip_htons>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	461a      	mov	r2, r3
 8015f3c:	69fb      	ldr	r3, [r7, #28]
 8015f3e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015f40:	4b25      	ldr	r3, [pc, #148]	; (8015fd8 <ip4_output_if_src+0x154>)
 8015f42:	881b      	ldrh	r3, [r3, #0]
 8015f44:	3301      	adds	r3, #1
 8015f46:	b29a      	uxth	r2, r3
 8015f48:	4b23      	ldr	r3, [pc, #140]	; (8015fd8 <ip4_output_if_src+0x154>)
 8015f4a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d104      	bne.n	8015f5c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015f52:	4b22      	ldr	r3, [pc, #136]	; (8015fdc <ip4_output_if_src+0x158>)
 8015f54:	681a      	ldr	r2, [r3, #0]
 8015f56:	69fb      	ldr	r3, [r7, #28]
 8015f58:	60da      	str	r2, [r3, #12]
 8015f5a:	e003      	b.n	8015f64 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	681a      	ldr	r2, [r3, #0]
 8015f60:	69fb      	ldr	r3, [r7, #28]
 8015f62:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015f64:	69fb      	ldr	r3, [r7, #28]
 8015f66:	2200      	movs	r2, #0
 8015f68:	729a      	strb	r2, [r3, #10]
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	72da      	strb	r2, [r3, #11]
 8015f6e:	e00f      	b.n	8015f90 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	895b      	ldrh	r3, [r3, #10]
 8015f74:	2b13      	cmp	r3, #19
 8015f76:	d802      	bhi.n	8015f7e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015f78:	f06f 0301 	mvn.w	r3, #1
 8015f7c:	e020      	b.n	8015fc0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015f84:	69fb      	ldr	r3, [r7, #28]
 8015f86:	691b      	ldr	r3, [r3, #16]
 8015f88:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015f8a:	f107 0314 	add.w	r3, r7, #20
 8015f8e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d00c      	beq.n	8015fb2 <ip4_output_if_src+0x12e>
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	891a      	ldrh	r2, [r3, #8]
 8015f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d906      	bls.n	8015fb2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015fa4:	687a      	ldr	r2, [r7, #4]
 8015fa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015fa8:	68f8      	ldr	r0, [r7, #12]
 8015faa:	f000 fd4d 	bl	8016a48 <ip4_frag>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	e006      	b.n	8015fc0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb4:	695b      	ldr	r3, [r3, #20]
 8015fb6:	687a      	ldr	r2, [r7, #4]
 8015fb8:	68f9      	ldr	r1, [r7, #12]
 8015fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fbc:	4798      	blx	r3
 8015fbe:	4603      	mov	r3, r0
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3720      	adds	r7, #32
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}
 8015fc8:	0801be58 	.word	0x0801be58
 8015fcc:	0801be8c 	.word	0x0801be8c
 8015fd0:	0801be98 	.word	0x0801be98
 8015fd4:	0801bec0 	.word	0x0801bec0
 8015fd8:	200017da 	.word	0x200017da
 8015fdc:	0801ead4 	.word	0x0801ead4

08015fe0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015fe0:	b480      	push	{r7}
 8015fe2:	b085      	sub	sp, #20
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ff4:	d002      	beq.n	8015ffc <ip4_addr_isbroadcast_u32+0x1c>
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d101      	bne.n	8016000 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	e02a      	b.n	8016056 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016006:	f003 0302 	and.w	r3, r3, #2
 801600a:	2b00      	cmp	r3, #0
 801600c:	d101      	bne.n	8016012 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801600e:	2300      	movs	r3, #0
 8016010:	e021      	b.n	8016056 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	3304      	adds	r3, #4
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	687a      	ldr	r2, [r7, #4]
 801601a:	429a      	cmp	r2, r3
 801601c:	d101      	bne.n	8016022 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801601e:	2300      	movs	r3, #0
 8016020:	e019      	b.n	8016056 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016022:	68fa      	ldr	r2, [r7, #12]
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	3304      	adds	r3, #4
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	405a      	eors	r2, r3
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	3308      	adds	r3, #8
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	4013      	ands	r3, r2
 8016034:	2b00      	cmp	r3, #0
 8016036:	d10d      	bne.n	8016054 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	3308      	adds	r3, #8
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	43da      	mvns	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	3308      	adds	r3, #8
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801604c:	429a      	cmp	r2, r3
 801604e:	d101      	bne.n	8016054 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016050:	2301      	movs	r3, #1
 8016052:	e000      	b.n	8016056 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016054:	2300      	movs	r3, #0
  }
}
 8016056:	4618      	mov	r0, r3
 8016058:	3714      	adds	r7, #20
 801605a:	46bd      	mov	sp, r7
 801605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016060:	4770      	bx	lr
	...

08016064 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801606a:	2300      	movs	r3, #0
 801606c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801606e:	4b12      	ldr	r3, [pc, #72]	; (80160b8 <ip_reass_tmr+0x54>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016074:	e018      	b.n	80160a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	7fdb      	ldrb	r3, [r3, #31]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d00b      	beq.n	8016096 <ip_reass_tmr+0x32>
      r->timer--;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	7fdb      	ldrb	r3, [r3, #31]
 8016082:	3b01      	subs	r3, #1
 8016084:	b2da      	uxtb	r2, r3
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	60fb      	str	r3, [r7, #12]
 8016094:	e008      	b.n	80160a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80160a0:	68b9      	ldr	r1, [r7, #8]
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f000 f80a 	bl	80160bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d1e3      	bne.n	8016076 <ip_reass_tmr+0x12>
    }
  }
}
 80160ae:	bf00      	nop
 80160b0:	bf00      	nop
 80160b2:	3710      	adds	r7, #16
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}
 80160b8:	200017dc 	.word	0x200017dc

080160bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b088      	sub	sp, #32
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80160c6:	2300      	movs	r3, #0
 80160c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80160ca:	683a      	ldr	r2, [r7, #0]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	429a      	cmp	r2, r3
 80160d0:	d105      	bne.n	80160de <ip_reass_free_complete_datagram+0x22>
 80160d2:	4b45      	ldr	r3, [pc, #276]	; (80161e8 <ip_reass_free_complete_datagram+0x12c>)
 80160d4:	22ab      	movs	r2, #171	; 0xab
 80160d6:	4945      	ldr	r1, [pc, #276]	; (80161ec <ip_reass_free_complete_datagram+0x130>)
 80160d8:	4845      	ldr	r0, [pc, #276]	; (80161f0 <ip_reass_free_complete_datagram+0x134>)
 80160da:	f000 ff37 	bl	8016f4c <iprintf>
  if (prev != NULL) {
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d00a      	beq.n	80160fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80160e4:	683b      	ldr	r3, [r7, #0]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	687a      	ldr	r2, [r7, #4]
 80160ea:	429a      	cmp	r2, r3
 80160ec:	d005      	beq.n	80160fa <ip_reass_free_complete_datagram+0x3e>
 80160ee:	4b3e      	ldr	r3, [pc, #248]	; (80161e8 <ip_reass_free_complete_datagram+0x12c>)
 80160f0:	22ad      	movs	r2, #173	; 0xad
 80160f2:	4940      	ldr	r1, [pc, #256]	; (80161f4 <ip_reass_free_complete_datagram+0x138>)
 80160f4:	483e      	ldr	r0, [pc, #248]	; (80161f0 <ip_reass_free_complete_datagram+0x134>)
 80160f6:	f000 ff29 	bl	8016f4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	685b      	ldr	r3, [r3, #4]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	889b      	ldrh	r3, [r3, #4]
 8016106:	b29b      	uxth	r3, r3
 8016108:	2b00      	cmp	r3, #0
 801610a:	d12a      	bne.n	8016162 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016112:	697b      	ldr	r3, [r7, #20]
 8016114:	681a      	ldr	r2, [r3, #0]
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801611a:	69bb      	ldr	r3, [r7, #24]
 801611c:	6858      	ldr	r0, [r3, #4]
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	3308      	adds	r3, #8
 8016122:	2214      	movs	r2, #20
 8016124:	4619      	mov	r1, r3
 8016126:	f000 fee1 	bl	8016eec <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801612a:	2101      	movs	r1, #1
 801612c:	69b8      	ldr	r0, [r7, #24]
 801612e:	f7ff fc47 	bl	80159c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016132:	69b8      	ldr	r0, [r7, #24]
 8016134:	f7f7 fe84 	bl	800de40 <pbuf_clen>
 8016138:	4603      	mov	r3, r0
 801613a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801613c:	8bfa      	ldrh	r2, [r7, #30]
 801613e:	8a7b      	ldrh	r3, [r7, #18]
 8016140:	4413      	add	r3, r2
 8016142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016146:	db05      	blt.n	8016154 <ip_reass_free_complete_datagram+0x98>
 8016148:	4b27      	ldr	r3, [pc, #156]	; (80161e8 <ip_reass_free_complete_datagram+0x12c>)
 801614a:	22bc      	movs	r2, #188	; 0xbc
 801614c:	492a      	ldr	r1, [pc, #168]	; (80161f8 <ip_reass_free_complete_datagram+0x13c>)
 801614e:	4828      	ldr	r0, [pc, #160]	; (80161f0 <ip_reass_free_complete_datagram+0x134>)
 8016150:	f000 fefc 	bl	8016f4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016154:	8bfa      	ldrh	r2, [r7, #30]
 8016156:	8a7b      	ldrh	r3, [r7, #18]
 8016158:	4413      	add	r3, r2
 801615a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801615c:	69b8      	ldr	r0, [r7, #24]
 801615e:	f7f7 fde7 	bl	800dd30 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016168:	e01f      	b.n	80161aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801616a:	69bb      	ldr	r3, [r7, #24]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016170:	69bb      	ldr	r3, [r7, #24]
 8016172:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801617a:	68f8      	ldr	r0, [r7, #12]
 801617c:	f7f7 fe60 	bl	800de40 <pbuf_clen>
 8016180:	4603      	mov	r3, r0
 8016182:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016184:	8bfa      	ldrh	r2, [r7, #30]
 8016186:	8a7b      	ldrh	r3, [r7, #18]
 8016188:	4413      	add	r3, r2
 801618a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801618e:	db05      	blt.n	801619c <ip_reass_free_complete_datagram+0xe0>
 8016190:	4b15      	ldr	r3, [pc, #84]	; (80161e8 <ip_reass_free_complete_datagram+0x12c>)
 8016192:	22cc      	movs	r2, #204	; 0xcc
 8016194:	4918      	ldr	r1, [pc, #96]	; (80161f8 <ip_reass_free_complete_datagram+0x13c>)
 8016196:	4816      	ldr	r0, [pc, #88]	; (80161f0 <ip_reass_free_complete_datagram+0x134>)
 8016198:	f000 fed8 	bl	8016f4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801619c:	8bfa      	ldrh	r2, [r7, #30]
 801619e:	8a7b      	ldrh	r3, [r7, #18]
 80161a0:	4413      	add	r3, r2
 80161a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80161a4:	68f8      	ldr	r0, [r7, #12]
 80161a6:	f7f7 fdc3 	bl	800dd30 <pbuf_free>
  while (p != NULL) {
 80161aa:	69bb      	ldr	r3, [r7, #24]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d1dc      	bne.n	801616a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80161b0:	6839      	ldr	r1, [r7, #0]
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f000 f8c2 	bl	801633c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80161b8:	4b10      	ldr	r3, [pc, #64]	; (80161fc <ip_reass_free_complete_datagram+0x140>)
 80161ba:	881b      	ldrh	r3, [r3, #0]
 80161bc:	8bfa      	ldrh	r2, [r7, #30]
 80161be:	429a      	cmp	r2, r3
 80161c0:	d905      	bls.n	80161ce <ip_reass_free_complete_datagram+0x112>
 80161c2:	4b09      	ldr	r3, [pc, #36]	; (80161e8 <ip_reass_free_complete_datagram+0x12c>)
 80161c4:	22d2      	movs	r2, #210	; 0xd2
 80161c6:	490e      	ldr	r1, [pc, #56]	; (8016200 <ip_reass_free_complete_datagram+0x144>)
 80161c8:	4809      	ldr	r0, [pc, #36]	; (80161f0 <ip_reass_free_complete_datagram+0x134>)
 80161ca:	f000 febf 	bl	8016f4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80161ce:	4b0b      	ldr	r3, [pc, #44]	; (80161fc <ip_reass_free_complete_datagram+0x140>)
 80161d0:	881a      	ldrh	r2, [r3, #0]
 80161d2:	8bfb      	ldrh	r3, [r7, #30]
 80161d4:	1ad3      	subs	r3, r2, r3
 80161d6:	b29a      	uxth	r2, r3
 80161d8:	4b08      	ldr	r3, [pc, #32]	; (80161fc <ip_reass_free_complete_datagram+0x140>)
 80161da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80161dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3720      	adds	r7, #32
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd80      	pop	{r7, pc}
 80161e6:	bf00      	nop
 80161e8:	0801bef0 	.word	0x0801bef0
 80161ec:	0801bf2c 	.word	0x0801bf2c
 80161f0:	0801bf38 	.word	0x0801bf38
 80161f4:	0801bf60 	.word	0x0801bf60
 80161f8:	0801bf74 	.word	0x0801bf74
 80161fc:	200017e0 	.word	0x200017e0
 8016200:	0801bf94 	.word	0x0801bf94

08016204 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b08a      	sub	sp, #40	; 0x28
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801620e:	2300      	movs	r3, #0
 8016210:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016212:	2300      	movs	r3, #0
 8016214:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016216:	2300      	movs	r3, #0
 8016218:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801621a:	2300      	movs	r3, #0
 801621c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801621e:	2300      	movs	r3, #0
 8016220:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016222:	4b28      	ldr	r3, [pc, #160]	; (80162c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016228:	e030      	b.n	801628c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801622c:	695a      	ldr	r2, [r3, #20]
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	68db      	ldr	r3, [r3, #12]
 8016232:	429a      	cmp	r2, r3
 8016234:	d10c      	bne.n	8016250 <ip_reass_remove_oldest_datagram+0x4c>
 8016236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016238:	699a      	ldr	r2, [r3, #24]
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	691b      	ldr	r3, [r3, #16]
 801623e:	429a      	cmp	r2, r3
 8016240:	d106      	bne.n	8016250 <ip_reass_remove_oldest_datagram+0x4c>
 8016242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016244:	899a      	ldrh	r2, [r3, #12]
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	889b      	ldrh	r3, [r3, #4]
 801624a:	b29b      	uxth	r3, r3
 801624c:	429a      	cmp	r2, r3
 801624e:	d014      	beq.n	801627a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	3301      	adds	r3, #1
 8016254:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016256:	6a3b      	ldr	r3, [r7, #32]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d104      	bne.n	8016266 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016260:	69fb      	ldr	r3, [r7, #28]
 8016262:	61bb      	str	r3, [r7, #24]
 8016264:	e009      	b.n	801627a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016268:	7fda      	ldrb	r2, [r3, #31]
 801626a:	6a3b      	ldr	r3, [r7, #32]
 801626c:	7fdb      	ldrb	r3, [r3, #31]
 801626e:	429a      	cmp	r2, r3
 8016270:	d803      	bhi.n	801627a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016274:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d001      	beq.n	8016286 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016284:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801628e:	2b00      	cmp	r3, #0
 8016290:	d1cb      	bne.n	801622a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016292:	6a3b      	ldr	r3, [r7, #32]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d008      	beq.n	80162aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016298:	69b9      	ldr	r1, [r7, #24]
 801629a:	6a38      	ldr	r0, [r7, #32]
 801629c:	f7ff ff0e 	bl	80160bc <ip_reass_free_complete_datagram>
 80162a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80162a2:	697a      	ldr	r2, [r7, #20]
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	4413      	add	r3, r2
 80162a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80162aa:	697a      	ldr	r2, [r7, #20]
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	429a      	cmp	r2, r3
 80162b0:	da02      	bge.n	80162b8 <ip_reass_remove_oldest_datagram+0xb4>
 80162b2:	693b      	ldr	r3, [r7, #16]
 80162b4:	2b01      	cmp	r3, #1
 80162b6:	dcac      	bgt.n	8016212 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80162b8:	697b      	ldr	r3, [r7, #20]
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	3728      	adds	r7, #40	; 0x28
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}
 80162c2:	bf00      	nop
 80162c4:	200017dc 	.word	0x200017dc

080162c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80162d2:	2004      	movs	r0, #4
 80162d4:	f7f6 fece 	bl	800d074 <memp_malloc>
 80162d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d110      	bne.n	8016302 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80162e0:	6839      	ldr	r1, [r7, #0]
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f7ff ff8e 	bl	8016204 <ip_reass_remove_oldest_datagram>
 80162e8:	4602      	mov	r2, r0
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	4293      	cmp	r3, r2
 80162ee:	dc03      	bgt.n	80162f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80162f0:	2004      	movs	r0, #4
 80162f2:	f7f6 febf 	bl	800d074 <memp_malloc>
 80162f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d101      	bne.n	8016302 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80162fe:	2300      	movs	r3, #0
 8016300:	e016      	b.n	8016330 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016302:	2220      	movs	r2, #32
 8016304:	2100      	movs	r1, #0
 8016306:	68f8      	ldr	r0, [r7, #12]
 8016308:	f000 fe18 	bl	8016f3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	220f      	movs	r2, #15
 8016310:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016312:	4b09      	ldr	r3, [pc, #36]	; (8016338 <ip_reass_enqueue_new_datagram+0x70>)
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801631a:	4a07      	ldr	r2, [pc, #28]	; (8016338 <ip_reass_enqueue_new_datagram+0x70>)
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	3308      	adds	r3, #8
 8016324:	2214      	movs	r2, #20
 8016326:	6879      	ldr	r1, [r7, #4]
 8016328:	4618      	mov	r0, r3
 801632a:	f000 fddf 	bl	8016eec <memcpy>
  return ipr;
 801632e:	68fb      	ldr	r3, [r7, #12]
}
 8016330:	4618      	mov	r0, r3
 8016332:	3710      	adds	r7, #16
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}
 8016338:	200017dc 	.word	0x200017dc

0801633c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b082      	sub	sp, #8
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016346:	4b10      	ldr	r3, [pc, #64]	; (8016388 <ip_reass_dequeue_datagram+0x4c>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	687a      	ldr	r2, [r7, #4]
 801634c:	429a      	cmp	r2, r3
 801634e:	d104      	bne.n	801635a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	4a0c      	ldr	r2, [pc, #48]	; (8016388 <ip_reass_dequeue_datagram+0x4c>)
 8016356:	6013      	str	r3, [r2, #0]
 8016358:	e00d      	b.n	8016376 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d106      	bne.n	801636e <ip_reass_dequeue_datagram+0x32>
 8016360:	4b0a      	ldr	r3, [pc, #40]	; (801638c <ip_reass_dequeue_datagram+0x50>)
 8016362:	f240 1245 	movw	r2, #325	; 0x145
 8016366:	490a      	ldr	r1, [pc, #40]	; (8016390 <ip_reass_dequeue_datagram+0x54>)
 8016368:	480a      	ldr	r0, [pc, #40]	; (8016394 <ip_reass_dequeue_datagram+0x58>)
 801636a:	f000 fdef 	bl	8016f4c <iprintf>
    prev->next = ipr->next;
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681a      	ldr	r2, [r3, #0]
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016376:	6879      	ldr	r1, [r7, #4]
 8016378:	2004      	movs	r0, #4
 801637a:	f7f6 fec7 	bl	800d10c <memp_free>
}
 801637e:	bf00      	nop
 8016380:	3708      	adds	r7, #8
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	200017dc 	.word	0x200017dc
 801638c:	0801bef0 	.word	0x0801bef0
 8016390:	0801bfb8 	.word	0x0801bfb8
 8016394:	0801bf38 	.word	0x0801bf38

08016398 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b08c      	sub	sp, #48	; 0x30
 801639c:	af00      	add	r7, sp, #0
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80163a4:	2300      	movs	r3, #0
 80163a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80163a8:	2301      	movs	r3, #1
 80163aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80163ac:	68bb      	ldr	r3, [r7, #8]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80163b2:	69fb      	ldr	r3, [r7, #28]
 80163b4:	885b      	ldrh	r3, [r3, #2]
 80163b6:	b29b      	uxth	r3, r3
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7f6 f927 	bl	800c60c <lwip_htons>
 80163be:	4603      	mov	r3, r0
 80163c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80163c2:	69fb      	ldr	r3, [r7, #28]
 80163c4:	781b      	ldrb	r3, [r3, #0]
 80163c6:	f003 030f 	and.w	r3, r3, #15
 80163ca:	b2db      	uxtb	r3, r3
 80163cc:	009b      	lsls	r3, r3, #2
 80163ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80163d0:	7e7b      	ldrb	r3, [r7, #25]
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	8b7a      	ldrh	r2, [r7, #26]
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d202      	bcs.n	80163e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80163de:	e135      	b.n	801664c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80163e0:	7e7b      	ldrb	r3, [r7, #25]
 80163e2:	b29b      	uxth	r3, r3
 80163e4:	8b7a      	ldrh	r2, [r7, #26]
 80163e6:	1ad3      	subs	r3, r2, r3
 80163e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80163ea:	69fb      	ldr	r3, [r7, #28]
 80163ec:	88db      	ldrh	r3, [r3, #6]
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7f6 f90b 	bl	800c60c <lwip_htons>
 80163f6:	4603      	mov	r3, r0
 80163f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163fc:	b29b      	uxth	r3, r3
 80163fe:	00db      	lsls	r3, r3, #3
 8016400:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640a:	2200      	movs	r2, #0
 801640c:	701a      	strb	r2, [r3, #0]
 801640e:	2200      	movs	r2, #0
 8016410:	705a      	strb	r2, [r3, #1]
 8016412:	2200      	movs	r2, #0
 8016414:	709a      	strb	r2, [r3, #2]
 8016416:	2200      	movs	r2, #0
 8016418:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641c:	8afa      	ldrh	r2, [r7, #22]
 801641e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016420:	8afa      	ldrh	r2, [r7, #22]
 8016422:	8b7b      	ldrh	r3, [r7, #26]
 8016424:	4413      	add	r3, r2
 8016426:	b29a      	uxth	r2, r3
 8016428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642e:	88db      	ldrh	r3, [r3, #6]
 8016430:	b29b      	uxth	r3, r3
 8016432:	8afa      	ldrh	r2, [r7, #22]
 8016434:	429a      	cmp	r2, r3
 8016436:	d902      	bls.n	801643e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801643c:	e106      	b.n	801664c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	685b      	ldr	r3, [r3, #4]
 8016442:	627b      	str	r3, [r7, #36]	; 0x24
 8016444:	e068      	b.n	8016518 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801644e:	889b      	ldrh	r3, [r3, #4]
 8016450:	b29a      	uxth	r2, r3
 8016452:	693b      	ldr	r3, [r7, #16]
 8016454:	889b      	ldrh	r3, [r3, #4]
 8016456:	b29b      	uxth	r3, r3
 8016458:	429a      	cmp	r2, r3
 801645a:	d235      	bcs.n	80164c8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801645e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016460:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016464:	2b00      	cmp	r3, #0
 8016466:	d020      	beq.n	80164aa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801646a:	889b      	ldrh	r3, [r3, #4]
 801646c:	b29a      	uxth	r2, r3
 801646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016470:	88db      	ldrh	r3, [r3, #6]
 8016472:	b29b      	uxth	r3, r3
 8016474:	429a      	cmp	r2, r3
 8016476:	d307      	bcc.n	8016488 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801647a:	88db      	ldrh	r3, [r3, #6]
 801647c:	b29a      	uxth	r2, r3
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	889b      	ldrh	r3, [r3, #4]
 8016482:	b29b      	uxth	r3, r3
 8016484:	429a      	cmp	r2, r3
 8016486:	d902      	bls.n	801648e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801648c:	e0de      	b.n	801664c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016490:	68ba      	ldr	r2, [r7, #8]
 8016492:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016496:	88db      	ldrh	r3, [r3, #6]
 8016498:	b29a      	uxth	r2, r3
 801649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801649c:	889b      	ldrh	r3, [r3, #4]
 801649e:	b29b      	uxth	r3, r3
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d03d      	beq.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80164a4:	2300      	movs	r3, #0
 80164a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80164a8:	e03a      	b.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80164aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ac:	88db      	ldrh	r3, [r3, #6]
 80164ae:	b29a      	uxth	r2, r3
 80164b0:	693b      	ldr	r3, [r7, #16]
 80164b2:	889b      	ldrh	r3, [r3, #4]
 80164b4:	b29b      	uxth	r3, r3
 80164b6:	429a      	cmp	r2, r3
 80164b8:	d902      	bls.n	80164c0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80164ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164be:	e0c5      	b.n	801664c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	68ba      	ldr	r2, [r7, #8]
 80164c4:	605a      	str	r2, [r3, #4]
      break;
 80164c6:	e02b      	b.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80164c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ca:	889b      	ldrh	r3, [r3, #4]
 80164cc:	b29a      	uxth	r2, r3
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	889b      	ldrh	r3, [r3, #4]
 80164d2:	b29b      	uxth	r3, r3
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d102      	bne.n	80164de <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80164d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164dc:	e0b6      	b.n	801664c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80164de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e0:	889b      	ldrh	r3, [r3, #4]
 80164e2:	b29a      	uxth	r2, r3
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	88db      	ldrh	r3, [r3, #6]
 80164e8:	b29b      	uxth	r3, r3
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d202      	bcs.n	80164f4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80164ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164f2:	e0ab      	b.n	801664c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80164f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d009      	beq.n	801650e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80164fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164fc:	88db      	ldrh	r3, [r3, #6]
 80164fe:	b29a      	uxth	r2, r3
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	889b      	ldrh	r3, [r3, #4]
 8016504:	b29b      	uxth	r3, r3
 8016506:	429a      	cmp	r2, r3
 8016508:	d001      	beq.n	801650e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801650a:	2300      	movs	r3, #0
 801650c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801650e:	693b      	ldr	r3, [r7, #16]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016514:	693b      	ldr	r3, [r7, #16]
 8016516:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651a:	2b00      	cmp	r3, #0
 801651c:	d193      	bne.n	8016446 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801651e:	e000      	b.n	8016522 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016520:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016524:	2b00      	cmp	r3, #0
 8016526:	d12d      	bne.n	8016584 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652a:	2b00      	cmp	r3, #0
 801652c:	d01c      	beq.n	8016568 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016530:	88db      	ldrh	r3, [r3, #6]
 8016532:	b29a      	uxth	r2, r3
 8016534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016536:	889b      	ldrh	r3, [r3, #4]
 8016538:	b29b      	uxth	r3, r3
 801653a:	429a      	cmp	r2, r3
 801653c:	d906      	bls.n	801654c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801653e:	4b45      	ldr	r3, [pc, #276]	; (8016654 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016540:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016544:	4944      	ldr	r1, [pc, #272]	; (8016658 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016546:	4845      	ldr	r0, [pc, #276]	; (801665c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016548:	f000 fd00 	bl	8016f4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801654e:	68ba      	ldr	r2, [r7, #8]
 8016550:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016554:	88db      	ldrh	r3, [r3, #6]
 8016556:	b29a      	uxth	r2, r3
 8016558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655a:	889b      	ldrh	r3, [r3, #4]
 801655c:	b29b      	uxth	r3, r3
 801655e:	429a      	cmp	r2, r3
 8016560:	d010      	beq.n	8016584 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016562:	2300      	movs	r3, #0
 8016564:	623b      	str	r3, [r7, #32]
 8016566:	e00d      	b.n	8016584 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d006      	beq.n	801657e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016570:	4b38      	ldr	r3, [pc, #224]	; (8016654 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016572:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016576:	493a      	ldr	r1, [pc, #232]	; (8016660 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016578:	4838      	ldr	r0, [pc, #224]	; (801665c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801657a:	f000 fce7 	bl	8016f4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	68ba      	ldr	r2, [r7, #8]
 8016582:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d105      	bne.n	8016596 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	7f9b      	ldrb	r3, [r3, #30]
 801658e:	f003 0301 	and.w	r3, r3, #1
 8016592:	2b00      	cmp	r3, #0
 8016594:	d059      	beq.n	801664a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016596:	6a3b      	ldr	r3, [r7, #32]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d04f      	beq.n	801663c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d006      	beq.n	80165b2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	685b      	ldr	r3, [r3, #4]
 80165a8:	685b      	ldr	r3, [r3, #4]
 80165aa:	889b      	ldrh	r3, [r3, #4]
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d002      	beq.n	80165b8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80165b2:	2300      	movs	r3, #0
 80165b4:	623b      	str	r3, [r7, #32]
 80165b6:	e041      	b.n	801663c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80165b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80165bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80165c2:	e012      	b.n	80165ea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80165c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c6:	685b      	ldr	r3, [r3, #4]
 80165c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80165ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165cc:	88db      	ldrh	r3, [r3, #6]
 80165ce:	b29a      	uxth	r2, r3
 80165d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d2:	889b      	ldrh	r3, [r3, #4]
 80165d4:	b29b      	uxth	r3, r3
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d002      	beq.n	80165e0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80165da:	2300      	movs	r3, #0
 80165dc:	623b      	str	r3, [r7, #32]
            break;
 80165de:	e007      	b.n	80165f0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80165e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80165e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80165ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d1e9      	bne.n	80165c4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80165f0:	6a3b      	ldr	r3, [r7, #32]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d022      	beq.n	801663c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d106      	bne.n	801660c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80165fe:	4b15      	ldr	r3, [pc, #84]	; (8016654 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016600:	f240 12df 	movw	r2, #479	; 0x1df
 8016604:	4917      	ldr	r1, [pc, #92]	; (8016664 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016606:	4815      	ldr	r0, [pc, #84]	; (801665c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016608:	f000 fca0 	bl	8016f4c <iprintf>
          LWIP_ASSERT("sanity check",
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	685b      	ldr	r3, [r3, #4]
 8016610:	685b      	ldr	r3, [r3, #4]
 8016612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016614:	429a      	cmp	r2, r3
 8016616:	d106      	bne.n	8016626 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016618:	4b0e      	ldr	r3, [pc, #56]	; (8016654 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801661a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801661e:	4911      	ldr	r1, [pc, #68]	; (8016664 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016620:	480e      	ldr	r0, [pc, #56]	; (801665c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016622:	f000 fc93 	bl	8016f4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d006      	beq.n	801663c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801662e:	4b09      	ldr	r3, [pc, #36]	; (8016654 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016630:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016634:	490c      	ldr	r1, [pc, #48]	; (8016668 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016636:	4809      	ldr	r0, [pc, #36]	; (801665c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016638:	f000 fc88 	bl	8016f4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801663c:	6a3b      	ldr	r3, [r7, #32]
 801663e:	2b00      	cmp	r3, #0
 8016640:	bf14      	ite	ne
 8016642:	2301      	movne	r3, #1
 8016644:	2300      	moveq	r3, #0
 8016646:	b2db      	uxtb	r3, r3
 8016648:	e000      	b.n	801664c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801664a:	2300      	movs	r3, #0
}
 801664c:	4618      	mov	r0, r3
 801664e:	3730      	adds	r7, #48	; 0x30
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}
 8016654:	0801bef0 	.word	0x0801bef0
 8016658:	0801bfd4 	.word	0x0801bfd4
 801665c:	0801bf38 	.word	0x0801bf38
 8016660:	0801bff4 	.word	0x0801bff4
 8016664:	0801c02c 	.word	0x0801c02c
 8016668:	0801c03c 	.word	0x0801c03c

0801666c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b08e      	sub	sp, #56	; 0x38
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	685b      	ldr	r3, [r3, #4]
 8016678:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801667c:	781b      	ldrb	r3, [r3, #0]
 801667e:	f003 030f 	and.w	r3, r3, #15
 8016682:	b2db      	uxtb	r3, r3
 8016684:	009b      	lsls	r3, r3, #2
 8016686:	b2db      	uxtb	r3, r3
 8016688:	2b14      	cmp	r3, #20
 801668a:	f040 8167 	bne.w	801695c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016690:	88db      	ldrh	r3, [r3, #6]
 8016692:	b29b      	uxth	r3, r3
 8016694:	4618      	mov	r0, r3
 8016696:	f7f5 ffb9 	bl	800c60c <lwip_htons>
 801669a:	4603      	mov	r3, r0
 801669c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166a0:	b29b      	uxth	r3, r3
 80166a2:	00db      	lsls	r3, r3, #3
 80166a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80166a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a8:	885b      	ldrh	r3, [r3, #2]
 80166aa:	b29b      	uxth	r3, r3
 80166ac:	4618      	mov	r0, r3
 80166ae:	f7f5 ffad 	bl	800c60c <lwip_htons>
 80166b2:	4603      	mov	r3, r0
 80166b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80166b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b8:	781b      	ldrb	r3, [r3, #0]
 80166ba:	f003 030f 	and.w	r3, r3, #15
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	009b      	lsls	r3, r3, #2
 80166c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80166c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80166ca:	b29b      	uxth	r3, r3
 80166cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80166ce:	429a      	cmp	r2, r3
 80166d0:	f0c0 8146 	bcc.w	8016960 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80166d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80166d8:	b29b      	uxth	r3, r3
 80166da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80166dc:	1ad3      	subs	r3, r2, r3
 80166de:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f7f7 fbad 	bl	800de40 <pbuf_clen>
 80166e6:	4603      	mov	r3, r0
 80166e8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80166ea:	4b9f      	ldr	r3, [pc, #636]	; (8016968 <ip4_reass+0x2fc>)
 80166ec:	881b      	ldrh	r3, [r3, #0]
 80166ee:	461a      	mov	r2, r3
 80166f0:	8c3b      	ldrh	r3, [r7, #32]
 80166f2:	4413      	add	r3, r2
 80166f4:	2b0a      	cmp	r3, #10
 80166f6:	dd10      	ble.n	801671a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80166f8:	8c3b      	ldrh	r3, [r7, #32]
 80166fa:	4619      	mov	r1, r3
 80166fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166fe:	f7ff fd81 	bl	8016204 <ip_reass_remove_oldest_datagram>
 8016702:	4603      	mov	r3, r0
 8016704:	2b00      	cmp	r3, #0
 8016706:	f000 812d 	beq.w	8016964 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801670a:	4b97      	ldr	r3, [pc, #604]	; (8016968 <ip4_reass+0x2fc>)
 801670c:	881b      	ldrh	r3, [r3, #0]
 801670e:	461a      	mov	r2, r3
 8016710:	8c3b      	ldrh	r3, [r7, #32]
 8016712:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016714:	2b0a      	cmp	r3, #10
 8016716:	f300 8125 	bgt.w	8016964 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801671a:	4b94      	ldr	r3, [pc, #592]	; (801696c <ip4_reass+0x300>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	633b      	str	r3, [r7, #48]	; 0x30
 8016720:	e015      	b.n	801674e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016724:	695a      	ldr	r2, [r3, #20]
 8016726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016728:	68db      	ldr	r3, [r3, #12]
 801672a:	429a      	cmp	r2, r3
 801672c:	d10c      	bne.n	8016748 <ip4_reass+0xdc>
 801672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016730:	699a      	ldr	r2, [r3, #24]
 8016732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016734:	691b      	ldr	r3, [r3, #16]
 8016736:	429a      	cmp	r2, r3
 8016738:	d106      	bne.n	8016748 <ip4_reass+0xdc>
 801673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801673c:	899a      	ldrh	r2, [r3, #12]
 801673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016740:	889b      	ldrh	r3, [r3, #4]
 8016742:	b29b      	uxth	r3, r3
 8016744:	429a      	cmp	r2, r3
 8016746:	d006      	beq.n	8016756 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	633b      	str	r3, [r7, #48]	; 0x30
 801674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016750:	2b00      	cmp	r3, #0
 8016752:	d1e6      	bne.n	8016722 <ip4_reass+0xb6>
 8016754:	e000      	b.n	8016758 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016756:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801675a:	2b00      	cmp	r3, #0
 801675c:	d109      	bne.n	8016772 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801675e:	8c3b      	ldrh	r3, [r7, #32]
 8016760:	4619      	mov	r1, r3
 8016762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016764:	f7ff fdb0 	bl	80162c8 <ip_reass_enqueue_new_datagram>
 8016768:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801676c:	2b00      	cmp	r3, #0
 801676e:	d11c      	bne.n	80167aa <ip4_reass+0x13e>
      goto nullreturn;
 8016770:	e109      	b.n	8016986 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016774:	88db      	ldrh	r3, [r3, #6]
 8016776:	b29b      	uxth	r3, r3
 8016778:	4618      	mov	r0, r3
 801677a:	f7f5 ff47 	bl	800c60c <lwip_htons>
 801677e:	4603      	mov	r3, r0
 8016780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016784:	2b00      	cmp	r3, #0
 8016786:	d110      	bne.n	80167aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801678a:	89db      	ldrh	r3, [r3, #14]
 801678c:	4618      	mov	r0, r3
 801678e:	f7f5 ff3d 	bl	800c60c <lwip_htons>
 8016792:	4603      	mov	r3, r0
 8016794:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016798:	2b00      	cmp	r3, #0
 801679a:	d006      	beq.n	80167aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801679e:	3308      	adds	r3, #8
 80167a0:	2214      	movs	r2, #20
 80167a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80167a4:	4618      	mov	r0, r3
 80167a6:	f000 fba1 	bl	8016eec <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80167aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ac:	88db      	ldrh	r3, [r3, #6]
 80167ae:	b29b      	uxth	r3, r3
 80167b0:	f003 0320 	and.w	r3, r3, #32
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	bf0c      	ite	eq
 80167b8:	2301      	moveq	r3, #1
 80167ba:	2300      	movne	r3, #0
 80167bc:	b2db      	uxtb	r3, r3
 80167be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80167c0:	69fb      	ldr	r3, [r7, #28]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00e      	beq.n	80167e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80167c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80167c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167ca:	4413      	add	r3, r2
 80167cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80167ce:	8b7a      	ldrh	r2, [r7, #26]
 80167d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80167d2:	429a      	cmp	r2, r3
 80167d4:	f0c0 80a0 	bcc.w	8016918 <ip4_reass+0x2ac>
 80167d8:	8b7b      	ldrh	r3, [r7, #26]
 80167da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80167de:	4293      	cmp	r3, r2
 80167e0:	f200 809a 	bhi.w	8016918 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80167e4:	69fa      	ldr	r2, [r7, #28]
 80167e6:	6879      	ldr	r1, [r7, #4]
 80167e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167ea:	f7ff fdd5 	bl	8016398 <ip_reass_chain_frag_into_datagram_and_validate>
 80167ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80167f0:	697b      	ldr	r3, [r7, #20]
 80167f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80167f6:	f000 8091 	beq.w	801691c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80167fa:	4b5b      	ldr	r3, [pc, #364]	; (8016968 <ip4_reass+0x2fc>)
 80167fc:	881a      	ldrh	r2, [r3, #0]
 80167fe:	8c3b      	ldrh	r3, [r7, #32]
 8016800:	4413      	add	r3, r2
 8016802:	b29a      	uxth	r2, r3
 8016804:	4b58      	ldr	r3, [pc, #352]	; (8016968 <ip4_reass+0x2fc>)
 8016806:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016808:	69fb      	ldr	r3, [r7, #28]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00d      	beq.n	801682a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801680e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016812:	4413      	add	r3, r2
 8016814:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016818:	8a7a      	ldrh	r2, [r7, #18]
 801681a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801681e:	7f9b      	ldrb	r3, [r3, #30]
 8016820:	f043 0301 	orr.w	r3, r3, #1
 8016824:	b2da      	uxtb	r2, r3
 8016826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016828:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801682a:	697b      	ldr	r3, [r7, #20]
 801682c:	2b01      	cmp	r3, #1
 801682e:	d171      	bne.n	8016914 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016832:	8b9b      	ldrh	r3, [r3, #28]
 8016834:	3314      	adds	r3, #20
 8016836:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	685b      	ldr	r3, [r3, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	685b      	ldr	r3, [r3, #4]
 8016848:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801684c:	3308      	adds	r3, #8
 801684e:	2214      	movs	r2, #20
 8016850:	4619      	mov	r1, r3
 8016852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016854:	f000 fb4a 	bl	8016eec <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016858:	8a3b      	ldrh	r3, [r7, #16]
 801685a:	4618      	mov	r0, r3
 801685c:	f7f5 fed6 	bl	800c60c <lwip_htons>
 8016860:	4603      	mov	r3, r0
 8016862:	461a      	mov	r2, r3
 8016864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016866:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801686a:	2200      	movs	r2, #0
 801686c:	719a      	strb	r2, [r3, #6]
 801686e:	2200      	movs	r2, #0
 8016870:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016874:	2200      	movs	r2, #0
 8016876:	729a      	strb	r2, [r3, #10]
 8016878:	2200      	movs	r2, #0
 801687a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016882:	e00d      	b.n	80168a0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016886:	685b      	ldr	r3, [r3, #4]
 8016888:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801688a:	2114      	movs	r1, #20
 801688c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801688e:	f7f7 f9c9 	bl	800dc24 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016892:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016894:	6878      	ldr	r0, [r7, #4]
 8016896:	f7f7 fb0d 	bl	800deb4 <pbuf_cat>
      r = iprh->next_pbuf;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80168a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d1ee      	bne.n	8016884 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80168a6:	4b31      	ldr	r3, [pc, #196]	; (801696c <ip4_reass+0x300>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168ac:	429a      	cmp	r2, r3
 80168ae:	d102      	bne.n	80168b6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80168b0:	2300      	movs	r3, #0
 80168b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80168b4:	e010      	b.n	80168d8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80168b6:	4b2d      	ldr	r3, [pc, #180]	; (801696c <ip4_reass+0x300>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80168bc:	e007      	b.n	80168ce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80168be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168c4:	429a      	cmp	r2, r3
 80168c6:	d006      	beq.n	80168d6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80168c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80168ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d1f4      	bne.n	80168be <ip4_reass+0x252>
 80168d4:	e000      	b.n	80168d8 <ip4_reass+0x26c>
          break;
 80168d6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80168d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80168da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168dc:	f7ff fd2e 	bl	801633c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80168e0:	6878      	ldr	r0, [r7, #4]
 80168e2:	f7f7 faad 	bl	800de40 <pbuf_clen>
 80168e6:	4603      	mov	r3, r0
 80168e8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80168ea:	4b1f      	ldr	r3, [pc, #124]	; (8016968 <ip4_reass+0x2fc>)
 80168ec:	881b      	ldrh	r3, [r3, #0]
 80168ee:	8c3a      	ldrh	r2, [r7, #32]
 80168f0:	429a      	cmp	r2, r3
 80168f2:	d906      	bls.n	8016902 <ip4_reass+0x296>
 80168f4:	4b1e      	ldr	r3, [pc, #120]	; (8016970 <ip4_reass+0x304>)
 80168f6:	f240 229b 	movw	r2, #667	; 0x29b
 80168fa:	491e      	ldr	r1, [pc, #120]	; (8016974 <ip4_reass+0x308>)
 80168fc:	481e      	ldr	r0, [pc, #120]	; (8016978 <ip4_reass+0x30c>)
 80168fe:	f000 fb25 	bl	8016f4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016902:	4b19      	ldr	r3, [pc, #100]	; (8016968 <ip4_reass+0x2fc>)
 8016904:	881a      	ldrh	r2, [r3, #0]
 8016906:	8c3b      	ldrh	r3, [r7, #32]
 8016908:	1ad3      	subs	r3, r2, r3
 801690a:	b29a      	uxth	r2, r3
 801690c:	4b16      	ldr	r3, [pc, #88]	; (8016968 <ip4_reass+0x2fc>)
 801690e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	e03c      	b.n	801698e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016914:	2300      	movs	r3, #0
 8016916:	e03a      	b.n	801698e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016918:	bf00      	nop
 801691a:	e000      	b.n	801691e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801691c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016920:	2b00      	cmp	r3, #0
 8016922:	d106      	bne.n	8016932 <ip4_reass+0x2c6>
 8016924:	4b12      	ldr	r3, [pc, #72]	; (8016970 <ip4_reass+0x304>)
 8016926:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801692a:	4914      	ldr	r1, [pc, #80]	; (801697c <ip4_reass+0x310>)
 801692c:	4812      	ldr	r0, [pc, #72]	; (8016978 <ip4_reass+0x30c>)
 801692e:	f000 fb0d 	bl	8016f4c <iprintf>
  if (ipr->p == NULL) {
 8016932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016934:	685b      	ldr	r3, [r3, #4]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d124      	bne.n	8016984 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801693a:	4b0c      	ldr	r3, [pc, #48]	; (801696c <ip4_reass+0x300>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016940:	429a      	cmp	r2, r3
 8016942:	d006      	beq.n	8016952 <ip4_reass+0x2e6>
 8016944:	4b0a      	ldr	r3, [pc, #40]	; (8016970 <ip4_reass+0x304>)
 8016946:	f240 22ab 	movw	r2, #683	; 0x2ab
 801694a:	490d      	ldr	r1, [pc, #52]	; (8016980 <ip4_reass+0x314>)
 801694c:	480a      	ldr	r0, [pc, #40]	; (8016978 <ip4_reass+0x30c>)
 801694e:	f000 fafd 	bl	8016f4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016952:	2100      	movs	r1, #0
 8016954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016956:	f7ff fcf1 	bl	801633c <ip_reass_dequeue_datagram>
 801695a:	e014      	b.n	8016986 <ip4_reass+0x31a>
    goto nullreturn;
 801695c:	bf00      	nop
 801695e:	e012      	b.n	8016986 <ip4_reass+0x31a>
    goto nullreturn;
 8016960:	bf00      	nop
 8016962:	e010      	b.n	8016986 <ip4_reass+0x31a>
      goto nullreturn;
 8016964:	bf00      	nop
 8016966:	e00e      	b.n	8016986 <ip4_reass+0x31a>
 8016968:	200017e0 	.word	0x200017e0
 801696c:	200017dc 	.word	0x200017dc
 8016970:	0801bef0 	.word	0x0801bef0
 8016974:	0801c060 	.word	0x0801c060
 8016978:	0801bf38 	.word	0x0801bf38
 801697c:	0801c07c 	.word	0x0801c07c
 8016980:	0801c088 	.word	0x0801c088
  }

nullreturn:
 8016984:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	f7f7 f9d2 	bl	800dd30 <pbuf_free>
  return NULL;
 801698c:	2300      	movs	r3, #0
}
 801698e:	4618      	mov	r0, r3
 8016990:	3738      	adds	r7, #56	; 0x38
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
 8016996:	bf00      	nop

08016998 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801699c:	2005      	movs	r0, #5
 801699e:	f7f6 fb69 	bl	800d074 <memp_malloc>
 80169a2:	4603      	mov	r3, r0
}
 80169a4:	4618      	mov	r0, r3
 80169a6:	bd80      	pop	{r7, pc}

080169a8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d106      	bne.n	80169c4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80169b6:	4b07      	ldr	r3, [pc, #28]	; (80169d4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80169b8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80169bc:	4906      	ldr	r1, [pc, #24]	; (80169d8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80169be:	4807      	ldr	r0, [pc, #28]	; (80169dc <ip_frag_free_pbuf_custom_ref+0x34>)
 80169c0:	f000 fac4 	bl	8016f4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80169c4:	6879      	ldr	r1, [r7, #4]
 80169c6:	2005      	movs	r0, #5
 80169c8:	f7f6 fba0 	bl	800d10c <memp_free>
}
 80169cc:	bf00      	nop
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}
 80169d4:	0801bef0 	.word	0x0801bef0
 80169d8:	0801c0a8 	.word	0x0801c0a8
 80169dc:	0801bf38 	.word	0x0801bf38

080169e0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b084      	sub	sp, #16
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d106      	bne.n	8016a00 <ipfrag_free_pbuf_custom+0x20>
 80169f2:	4b11      	ldr	r3, [pc, #68]	; (8016a38 <ipfrag_free_pbuf_custom+0x58>)
 80169f4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80169f8:	4910      	ldr	r1, [pc, #64]	; (8016a3c <ipfrag_free_pbuf_custom+0x5c>)
 80169fa:	4811      	ldr	r0, [pc, #68]	; (8016a40 <ipfrag_free_pbuf_custom+0x60>)
 80169fc:	f000 faa6 	bl	8016f4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016a00:	68fa      	ldr	r2, [r7, #12]
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	429a      	cmp	r2, r3
 8016a06:	d006      	beq.n	8016a16 <ipfrag_free_pbuf_custom+0x36>
 8016a08:	4b0b      	ldr	r3, [pc, #44]	; (8016a38 <ipfrag_free_pbuf_custom+0x58>)
 8016a0a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016a0e:	490d      	ldr	r1, [pc, #52]	; (8016a44 <ipfrag_free_pbuf_custom+0x64>)
 8016a10:	480b      	ldr	r0, [pc, #44]	; (8016a40 <ipfrag_free_pbuf_custom+0x60>)
 8016a12:	f000 fa9b 	bl	8016f4c <iprintf>
  if (pcr->original != NULL) {
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	695b      	ldr	r3, [r3, #20]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d004      	beq.n	8016a28 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	695b      	ldr	r3, [r3, #20]
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7f7 f984 	bl	800dd30 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016a28:	68f8      	ldr	r0, [r7, #12]
 8016a2a:	f7ff ffbd 	bl	80169a8 <ip_frag_free_pbuf_custom_ref>
}
 8016a2e:	bf00      	nop
 8016a30:	3710      	adds	r7, #16
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}
 8016a36:	bf00      	nop
 8016a38:	0801bef0 	.word	0x0801bef0
 8016a3c:	0801c0b4 	.word	0x0801c0b4
 8016a40:	0801bf38 	.word	0x0801bf38
 8016a44:	0801c0c0 	.word	0x0801c0c0

08016a48 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b094      	sub	sp, #80	; 0x50
 8016a4c:	af02      	add	r7, sp, #8
 8016a4e:	60f8      	str	r0, [r7, #12]
 8016a50:	60b9      	str	r1, [r7, #8]
 8016a52:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016a54:	2300      	movs	r3, #0
 8016a56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016a5a:	68bb      	ldr	r3, [r7, #8]
 8016a5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016a5e:	3b14      	subs	r3, #20
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	da00      	bge.n	8016a66 <ip4_frag+0x1e>
 8016a64:	3307      	adds	r3, #7
 8016a66:	10db      	asrs	r3, r3, #3
 8016a68:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016a6a:	2314      	movs	r3, #20
 8016a6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	685b      	ldr	r3, [r3, #4]
 8016a72:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a76:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	f003 030f 	and.w	r3, r3, #15
 8016a80:	b2db      	uxtb	r3, r3
 8016a82:	009b      	lsls	r3, r3, #2
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	2b14      	cmp	r3, #20
 8016a88:	d002      	beq.n	8016a90 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016a8a:	f06f 0305 	mvn.w	r3, #5
 8016a8e:	e110      	b.n	8016cb2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	895b      	ldrh	r3, [r3, #10]
 8016a94:	2b13      	cmp	r3, #19
 8016a96:	d809      	bhi.n	8016aac <ip4_frag+0x64>
 8016a98:	4b88      	ldr	r3, [pc, #544]	; (8016cbc <ip4_frag+0x274>)
 8016a9a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016a9e:	4988      	ldr	r1, [pc, #544]	; (8016cc0 <ip4_frag+0x278>)
 8016aa0:	4888      	ldr	r0, [pc, #544]	; (8016cc4 <ip4_frag+0x27c>)
 8016aa2:	f000 fa53 	bl	8016f4c <iprintf>
 8016aa6:	f06f 0305 	mvn.w	r3, #5
 8016aaa:	e102      	b.n	8016cb2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aae:	88db      	ldrh	r3, [r3, #6]
 8016ab0:	b29b      	uxth	r3, r3
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f7f5 fdaa 	bl	800c60c <lwip_htons>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016abc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016abe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ac2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016ac6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016acc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	891b      	ldrh	r3, [r3, #8]
 8016ad2:	3b14      	subs	r3, #20
 8016ad4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016ad8:	e0e1      	b.n	8016c9e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016ada:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016adc:	00db      	lsls	r3, r3, #3
 8016ade:	b29b      	uxth	r3, r3
 8016ae0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ae4:	4293      	cmp	r3, r2
 8016ae6:	bf28      	it	cs
 8016ae8:	4613      	movcs	r3, r2
 8016aea:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016aec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016af0:	2114      	movs	r1, #20
 8016af2:	200e      	movs	r0, #14
 8016af4:	f7f6 fe38 	bl	800d768 <pbuf_alloc>
 8016af8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	f000 80d5 	beq.w	8016cac <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b04:	895b      	ldrh	r3, [r3, #10]
 8016b06:	2b13      	cmp	r3, #19
 8016b08:	d806      	bhi.n	8016b18 <ip4_frag+0xd0>
 8016b0a:	4b6c      	ldr	r3, [pc, #432]	; (8016cbc <ip4_frag+0x274>)
 8016b0c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016b10:	496d      	ldr	r1, [pc, #436]	; (8016cc8 <ip4_frag+0x280>)
 8016b12:	486c      	ldr	r0, [pc, #432]	; (8016cc4 <ip4_frag+0x27c>)
 8016b14:	f000 fa1a 	bl	8016f4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1a:	685b      	ldr	r3, [r3, #4]
 8016b1c:	2214      	movs	r2, #20
 8016b1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016b20:	4618      	mov	r0, r3
 8016b22:	f000 f9e3 	bl	8016eec <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b28:	685b      	ldr	r3, [r3, #4]
 8016b2a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016b2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016b32:	e064      	b.n	8016bfe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	895a      	ldrh	r2, [r3, #10]
 8016b38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b3a:	1ad3      	subs	r3, r2, r3
 8016b3c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	895b      	ldrh	r3, [r3, #10]
 8016b42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d906      	bls.n	8016b56 <ip4_frag+0x10e>
 8016b48:	4b5c      	ldr	r3, [pc, #368]	; (8016cbc <ip4_frag+0x274>)
 8016b4a:	f240 322d 	movw	r2, #813	; 0x32d
 8016b4e:	495f      	ldr	r1, [pc, #380]	; (8016ccc <ip4_frag+0x284>)
 8016b50:	485c      	ldr	r0, [pc, #368]	; (8016cc4 <ip4_frag+0x27c>)
 8016b52:	f000 f9fb 	bl	8016f4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016b56:	8bfa      	ldrh	r2, [r7, #30]
 8016b58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016b5c:	4293      	cmp	r3, r2
 8016b5e:	bf28      	it	cs
 8016b60:	4613      	movcs	r3, r2
 8016b62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016b66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d105      	bne.n	8016b7a <ip4_frag+0x132>
        poff = 0;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	60fb      	str	r3, [r7, #12]
        continue;
 8016b78:	e041      	b.n	8016bfe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016b7a:	f7ff ff0d 	bl	8016998 <ip_frag_alloc_pbuf_custom_ref>
 8016b7e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016b80:	69bb      	ldr	r3, [r7, #24]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d103      	bne.n	8016b8e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016b86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b88:	f7f7 f8d2 	bl	800dd30 <pbuf_free>
        goto memerr;
 8016b8c:	e08f      	b.n	8016cae <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016b8e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016b94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b96:	4413      	add	r3, r2
 8016b98:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016b9c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016ba0:	9201      	str	r2, [sp, #4]
 8016ba2:	9300      	str	r3, [sp, #0]
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	2241      	movs	r2, #65	; 0x41
 8016ba8:	2000      	movs	r0, #0
 8016baa:	f7f6 ff07 	bl	800d9bc <pbuf_alloced_custom>
 8016bae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016bb0:	697b      	ldr	r3, [r7, #20]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d106      	bne.n	8016bc4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016bb6:	69b8      	ldr	r0, [r7, #24]
 8016bb8:	f7ff fef6 	bl	80169a8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016bbe:	f7f7 f8b7 	bl	800dd30 <pbuf_free>
        goto memerr;
 8016bc2:	e074      	b.n	8016cae <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016bc4:	68f8      	ldr	r0, [r7, #12]
 8016bc6:	f7f7 f953 	bl	800de70 <pbuf_ref>
      pcr->original = p;
 8016bca:	69bb      	ldr	r3, [r7, #24]
 8016bcc:	68fa      	ldr	r2, [r7, #12]
 8016bce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	4a3f      	ldr	r2, [pc, #252]	; (8016cd0 <ip4_frag+0x288>)
 8016bd4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016bd6:	6979      	ldr	r1, [r7, #20]
 8016bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016bda:	f7f7 f96b 	bl	800deb4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016bde:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016be2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016be6:	1ad3      	subs	r3, r2, r3
 8016be8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016bec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d004      	beq.n	8016bfe <ip4_frag+0x1b6>
        poff = 0;
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016bfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d196      	bne.n	8016b34 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016c06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016c08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016c0c:	4413      	add	r3, r2
 8016c0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c14:	f1a3 0213 	sub.w	r2, r3, #19
 8016c18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	bfcc      	ite	gt
 8016c20:	2301      	movgt	r3, #1
 8016c22:	2300      	movle	r3, #0
 8016c24:	b2db      	uxtb	r3, r3
 8016c26:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016c28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016c32:	6a3b      	ldr	r3, [r7, #32]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d002      	beq.n	8016c3e <ip4_frag+0x1f6>
 8016c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d003      	beq.n	8016c46 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016c3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016c44:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016c46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7f5 fcdf 	bl	800c60c <lwip_htons>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	461a      	mov	r2, r3
 8016c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c54:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016c56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016c58:	3314      	adds	r3, #20
 8016c5a:	b29b      	uxth	r3, r3
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7f5 fcd5 	bl	800c60c <lwip_htons>
 8016c62:	4603      	mov	r3, r0
 8016c64:	461a      	mov	r2, r3
 8016c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c68:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	729a      	strb	r2, [r3, #10]
 8016c70:	2200      	movs	r2, #0
 8016c72:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016c74:	68bb      	ldr	r3, [r7, #8]
 8016c76:	695b      	ldr	r3, [r3, #20]
 8016c78:	687a      	ldr	r2, [r7, #4]
 8016c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c7c:	68b8      	ldr	r0, [r7, #8]
 8016c7e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c82:	f7f7 f855 	bl	800dd30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016c86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016c8c:	1ad3      	subs	r3, r2, r3
 8016c8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016c92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016c96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c98:	4413      	add	r3, r2
 8016c9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016c9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	f47f af19 	bne.w	8016ada <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	e002      	b.n	8016cb2 <ip4_frag+0x26a>
      goto memerr;
 8016cac:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3748      	adds	r7, #72	; 0x48
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	0801bef0 	.word	0x0801bef0
 8016cc0:	0801c0cc 	.word	0x0801c0cc
 8016cc4:	0801bf38 	.word	0x0801bf38
 8016cc8:	0801c0e8 	.word	0x0801c0e8
 8016ccc:	0801c108 	.word	0x0801c108
 8016cd0:	080169e1 	.word	0x080169e1

08016cd4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b086      	sub	sp, #24
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
 8016cdc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016cde:	230e      	movs	r3, #14
 8016ce0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	895b      	ldrh	r3, [r3, #10]
 8016ce6:	2b0e      	cmp	r3, #14
 8016ce8:	d96e      	bls.n	8016dc8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	7bdb      	ldrb	r3, [r3, #15]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d106      	bne.n	8016d00 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016cf8:	3301      	adds	r3, #1
 8016cfa:	b2da      	uxtb	r2, r3
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	685b      	ldr	r3, [r3, #4]
 8016d04:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	7b1a      	ldrb	r2, [r3, #12]
 8016d0a:	7b5b      	ldrb	r3, [r3, #13]
 8016d0c:	021b      	lsls	r3, r3, #8
 8016d0e:	4313      	orrs	r3, r2
 8016d10:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016d12:	693b      	ldr	r3, [r7, #16]
 8016d14:	781b      	ldrb	r3, [r3, #0]
 8016d16:	f003 0301 	and.w	r3, r3, #1
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d023      	beq.n	8016d66 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	781b      	ldrb	r3, [r3, #0]
 8016d22:	2b01      	cmp	r3, #1
 8016d24:	d10f      	bne.n	8016d46 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	785b      	ldrb	r3, [r3, #1]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d11b      	bne.n	8016d66 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016d2e:	693b      	ldr	r3, [r7, #16]
 8016d30:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016d32:	2b5e      	cmp	r3, #94	; 0x5e
 8016d34:	d117      	bne.n	8016d66 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	7b5b      	ldrb	r3, [r3, #13]
 8016d3a:	f043 0310 	orr.w	r3, r3, #16
 8016d3e:	b2da      	uxtb	r2, r3
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	735a      	strb	r2, [r3, #13]
 8016d44:	e00f      	b.n	8016d66 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016d46:	693b      	ldr	r3, [r7, #16]
 8016d48:	2206      	movs	r2, #6
 8016d4a:	4928      	ldr	r1, [pc, #160]	; (8016dec <ethernet_input+0x118>)
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f000 f8bf 	bl	8016ed0 <memcmp>
 8016d52:	4603      	mov	r3, r0
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d106      	bne.n	8016d66 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	7b5b      	ldrb	r3, [r3, #13]
 8016d5c:	f043 0308 	orr.w	r3, r3, #8
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016d66:	89fb      	ldrh	r3, [r7, #14]
 8016d68:	2b08      	cmp	r3, #8
 8016d6a:	d003      	beq.n	8016d74 <ethernet_input+0xa0>
 8016d6c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016d70:	d014      	beq.n	8016d9c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016d72:	e032      	b.n	8016dda <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d7a:	f003 0308 	and.w	r3, r3, #8
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d024      	beq.n	8016dcc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016d82:	8afb      	ldrh	r3, [r7, #22]
 8016d84:	4619      	mov	r1, r3
 8016d86:	6878      	ldr	r0, [r7, #4]
 8016d88:	f7f6 ff4c 	bl	800dc24 <pbuf_remove_header>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d11e      	bne.n	8016dd0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016d92:	6839      	ldr	r1, [r7, #0]
 8016d94:	6878      	ldr	r0, [r7, #4]
 8016d96:	f7fe ff27 	bl	8015be8 <ip4_input>
      break;
 8016d9a:	e013      	b.n	8016dc4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016d9c:	683b      	ldr	r3, [r7, #0]
 8016d9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016da2:	f003 0308 	and.w	r3, r3, #8
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d014      	beq.n	8016dd4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016daa:	8afb      	ldrh	r3, [r7, #22]
 8016dac:	4619      	mov	r1, r3
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f7f6 ff38 	bl	800dc24 <pbuf_remove_header>
 8016db4:	4603      	mov	r3, r0
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d10e      	bne.n	8016dd8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016dba:	6839      	ldr	r1, [r7, #0]
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f7fe f8c7 	bl	8014f50 <etharp_input>
      break;
 8016dc2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	e00c      	b.n	8016de2 <ethernet_input+0x10e>
    goto free_and_return;
 8016dc8:	bf00      	nop
 8016dca:	e006      	b.n	8016dda <ethernet_input+0x106>
        goto free_and_return;
 8016dcc:	bf00      	nop
 8016dce:	e004      	b.n	8016dda <ethernet_input+0x106>
        goto free_and_return;
 8016dd0:	bf00      	nop
 8016dd2:	e002      	b.n	8016dda <ethernet_input+0x106>
        goto free_and_return;
 8016dd4:	bf00      	nop
 8016dd6:	e000      	b.n	8016dda <ethernet_input+0x106>
        goto free_and_return;
 8016dd8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016dda:	6878      	ldr	r0, [r7, #4]
 8016ddc:	f7f6 ffa8 	bl	800dd30 <pbuf_free>
  return ERR_OK;
 8016de0:	2300      	movs	r3, #0
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3718      	adds	r7, #24
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}
 8016dea:	bf00      	nop
 8016dec:	0801ead8 	.word	0x0801ead8

08016df0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b086      	sub	sp, #24
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	60b9      	str	r1, [r7, #8]
 8016dfa:	607a      	str	r2, [r7, #4]
 8016dfc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016dfe:	8c3b      	ldrh	r3, [r7, #32]
 8016e00:	4618      	mov	r0, r3
 8016e02:	f7f5 fc03 	bl	800c60c <lwip_htons>
 8016e06:	4603      	mov	r3, r0
 8016e08:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016e0a:	210e      	movs	r1, #14
 8016e0c:	68b8      	ldr	r0, [r7, #8]
 8016e0e:	f7f6 fef9 	bl	800dc04 <pbuf_add_header>
 8016e12:	4603      	mov	r3, r0
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d125      	bne.n	8016e64 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016e18:	68bb      	ldr	r3, [r7, #8]
 8016e1a:	685b      	ldr	r3, [r3, #4]
 8016e1c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	8afa      	ldrh	r2, [r7, #22]
 8016e22:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016e24:	693b      	ldr	r3, [r7, #16]
 8016e26:	2206      	movs	r2, #6
 8016e28:	6839      	ldr	r1, [r7, #0]
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f000 f85e 	bl	8016eec <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016e30:	693b      	ldr	r3, [r7, #16]
 8016e32:	3306      	adds	r3, #6
 8016e34:	2206      	movs	r2, #6
 8016e36:	6879      	ldr	r1, [r7, #4]
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f000 f857 	bl	8016eec <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016e44:	2b06      	cmp	r3, #6
 8016e46:	d006      	beq.n	8016e56 <ethernet_output+0x66>
 8016e48:	4b0a      	ldr	r3, [pc, #40]	; (8016e74 <ethernet_output+0x84>)
 8016e4a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016e4e:	490a      	ldr	r1, [pc, #40]	; (8016e78 <ethernet_output+0x88>)
 8016e50:	480a      	ldr	r0, [pc, #40]	; (8016e7c <ethernet_output+0x8c>)
 8016e52:	f000 f87b 	bl	8016f4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	699b      	ldr	r3, [r3, #24]
 8016e5a:	68b9      	ldr	r1, [r7, #8]
 8016e5c:	68f8      	ldr	r0, [r7, #12]
 8016e5e:	4798      	blx	r3
 8016e60:	4603      	mov	r3, r0
 8016e62:	e002      	b.n	8016e6a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016e64:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016e66:	f06f 0301 	mvn.w	r3, #1
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3718      	adds	r7, #24
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop
 8016e74:	0801c118 	.word	0x0801c118
 8016e78:	0801c150 	.word	0x0801c150
 8016e7c:	0801c184 	.word	0x0801c184

08016e80 <atoi>:
 8016e80:	220a      	movs	r2, #10
 8016e82:	2100      	movs	r1, #0
 8016e84:	f000 ba94 	b.w	80173b0 <strtol>

08016e88 <__libc_init_array>:
 8016e88:	b570      	push	{r4, r5, r6, lr}
 8016e8a:	4d0d      	ldr	r5, [pc, #52]	; (8016ec0 <__libc_init_array+0x38>)
 8016e8c:	4c0d      	ldr	r4, [pc, #52]	; (8016ec4 <__libc_init_array+0x3c>)
 8016e8e:	1b64      	subs	r4, r4, r5
 8016e90:	10a4      	asrs	r4, r4, #2
 8016e92:	2600      	movs	r6, #0
 8016e94:	42a6      	cmp	r6, r4
 8016e96:	d109      	bne.n	8016eac <__libc_init_array+0x24>
 8016e98:	4d0b      	ldr	r5, [pc, #44]	; (8016ec8 <__libc_init_array+0x40>)
 8016e9a:	4c0c      	ldr	r4, [pc, #48]	; (8016ecc <__libc_init_array+0x44>)
 8016e9c:	f001 fbe4 	bl	8018668 <_init>
 8016ea0:	1b64      	subs	r4, r4, r5
 8016ea2:	10a4      	asrs	r4, r4, #2
 8016ea4:	2600      	movs	r6, #0
 8016ea6:	42a6      	cmp	r6, r4
 8016ea8:	d105      	bne.n	8016eb6 <__libc_init_array+0x2e>
 8016eaa:	bd70      	pop	{r4, r5, r6, pc}
 8016eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8016eb0:	4798      	blx	r3
 8016eb2:	3601      	adds	r6, #1
 8016eb4:	e7ee      	b.n	8016e94 <__libc_init_array+0xc>
 8016eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016eba:	4798      	blx	r3
 8016ebc:	3601      	adds	r6, #1
 8016ebe:	e7f2      	b.n	8016ea6 <__libc_init_array+0x1e>
 8016ec0:	0801ed3c 	.word	0x0801ed3c
 8016ec4:	0801ed3c 	.word	0x0801ed3c
 8016ec8:	0801ed3c 	.word	0x0801ed3c
 8016ecc:	0801ed40 	.word	0x0801ed40

08016ed0 <memcmp>:
 8016ed0:	b530      	push	{r4, r5, lr}
 8016ed2:	3901      	subs	r1, #1
 8016ed4:	2400      	movs	r4, #0
 8016ed6:	42a2      	cmp	r2, r4
 8016ed8:	d101      	bne.n	8016ede <memcmp+0xe>
 8016eda:	2000      	movs	r0, #0
 8016edc:	e005      	b.n	8016eea <memcmp+0x1a>
 8016ede:	5d03      	ldrb	r3, [r0, r4]
 8016ee0:	3401      	adds	r4, #1
 8016ee2:	5d0d      	ldrb	r5, [r1, r4]
 8016ee4:	42ab      	cmp	r3, r5
 8016ee6:	d0f6      	beq.n	8016ed6 <memcmp+0x6>
 8016ee8:	1b58      	subs	r0, r3, r5
 8016eea:	bd30      	pop	{r4, r5, pc}

08016eec <memcpy>:
 8016eec:	440a      	add	r2, r1
 8016eee:	4291      	cmp	r1, r2
 8016ef0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016ef4:	d100      	bne.n	8016ef8 <memcpy+0xc>
 8016ef6:	4770      	bx	lr
 8016ef8:	b510      	push	{r4, lr}
 8016efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f02:	4291      	cmp	r1, r2
 8016f04:	d1f9      	bne.n	8016efa <memcpy+0xe>
 8016f06:	bd10      	pop	{r4, pc}

08016f08 <memmove>:
 8016f08:	4288      	cmp	r0, r1
 8016f0a:	b510      	push	{r4, lr}
 8016f0c:	eb01 0402 	add.w	r4, r1, r2
 8016f10:	d902      	bls.n	8016f18 <memmove+0x10>
 8016f12:	4284      	cmp	r4, r0
 8016f14:	4623      	mov	r3, r4
 8016f16:	d807      	bhi.n	8016f28 <memmove+0x20>
 8016f18:	1e43      	subs	r3, r0, #1
 8016f1a:	42a1      	cmp	r1, r4
 8016f1c:	d008      	beq.n	8016f30 <memmove+0x28>
 8016f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016f26:	e7f8      	b.n	8016f1a <memmove+0x12>
 8016f28:	4402      	add	r2, r0
 8016f2a:	4601      	mov	r1, r0
 8016f2c:	428a      	cmp	r2, r1
 8016f2e:	d100      	bne.n	8016f32 <memmove+0x2a>
 8016f30:	bd10      	pop	{r4, pc}
 8016f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016f3a:	e7f7      	b.n	8016f2c <memmove+0x24>

08016f3c <memset>:
 8016f3c:	4402      	add	r2, r0
 8016f3e:	4603      	mov	r3, r0
 8016f40:	4293      	cmp	r3, r2
 8016f42:	d100      	bne.n	8016f46 <memset+0xa>
 8016f44:	4770      	bx	lr
 8016f46:	f803 1b01 	strb.w	r1, [r3], #1
 8016f4a:	e7f9      	b.n	8016f40 <memset+0x4>

08016f4c <iprintf>:
 8016f4c:	b40f      	push	{r0, r1, r2, r3}
 8016f4e:	4b0a      	ldr	r3, [pc, #40]	; (8016f78 <iprintf+0x2c>)
 8016f50:	b513      	push	{r0, r1, r4, lr}
 8016f52:	681c      	ldr	r4, [r3, #0]
 8016f54:	b124      	cbz	r4, 8016f60 <iprintf+0x14>
 8016f56:	69a3      	ldr	r3, [r4, #24]
 8016f58:	b913      	cbnz	r3, 8016f60 <iprintf+0x14>
 8016f5a:	4620      	mov	r0, r4
 8016f5c:	f000 fc30 	bl	80177c0 <__sinit>
 8016f60:	ab05      	add	r3, sp, #20
 8016f62:	9a04      	ldr	r2, [sp, #16]
 8016f64:	68a1      	ldr	r1, [r4, #8]
 8016f66:	9301      	str	r3, [sp, #4]
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f000 ff77 	bl	8017e5c <_vfiprintf_r>
 8016f6e:	b002      	add	sp, #8
 8016f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f74:	b004      	add	sp, #16
 8016f76:	4770      	bx	lr
 8016f78:	2000014c 	.word	0x2000014c

08016f7c <_puts_r>:
 8016f7c:	b570      	push	{r4, r5, r6, lr}
 8016f7e:	460e      	mov	r6, r1
 8016f80:	4605      	mov	r5, r0
 8016f82:	b118      	cbz	r0, 8016f8c <_puts_r+0x10>
 8016f84:	6983      	ldr	r3, [r0, #24]
 8016f86:	b90b      	cbnz	r3, 8016f8c <_puts_r+0x10>
 8016f88:	f000 fc1a 	bl	80177c0 <__sinit>
 8016f8c:	69ab      	ldr	r3, [r5, #24]
 8016f8e:	68ac      	ldr	r4, [r5, #8]
 8016f90:	b913      	cbnz	r3, 8016f98 <_puts_r+0x1c>
 8016f92:	4628      	mov	r0, r5
 8016f94:	f000 fc14 	bl	80177c0 <__sinit>
 8016f98:	4b2c      	ldr	r3, [pc, #176]	; (801704c <_puts_r+0xd0>)
 8016f9a:	429c      	cmp	r4, r3
 8016f9c:	d120      	bne.n	8016fe0 <_puts_r+0x64>
 8016f9e:	686c      	ldr	r4, [r5, #4]
 8016fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016fa2:	07db      	lsls	r3, r3, #31
 8016fa4:	d405      	bmi.n	8016fb2 <_puts_r+0x36>
 8016fa6:	89a3      	ldrh	r3, [r4, #12]
 8016fa8:	0598      	lsls	r0, r3, #22
 8016faa:	d402      	bmi.n	8016fb2 <_puts_r+0x36>
 8016fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fae:	f000 fcb7 	bl	8017920 <__retarget_lock_acquire_recursive>
 8016fb2:	89a3      	ldrh	r3, [r4, #12]
 8016fb4:	0719      	lsls	r1, r3, #28
 8016fb6:	d51d      	bpl.n	8016ff4 <_puts_r+0x78>
 8016fb8:	6923      	ldr	r3, [r4, #16]
 8016fba:	b1db      	cbz	r3, 8016ff4 <_puts_r+0x78>
 8016fbc:	3e01      	subs	r6, #1
 8016fbe:	68a3      	ldr	r3, [r4, #8]
 8016fc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016fc4:	3b01      	subs	r3, #1
 8016fc6:	60a3      	str	r3, [r4, #8]
 8016fc8:	bb39      	cbnz	r1, 801701a <_puts_r+0x9e>
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	da38      	bge.n	8017040 <_puts_r+0xc4>
 8016fce:	4622      	mov	r2, r4
 8016fd0:	210a      	movs	r1, #10
 8016fd2:	4628      	mov	r0, r5
 8016fd4:	f000 f9f6 	bl	80173c4 <__swbuf_r>
 8016fd8:	3001      	adds	r0, #1
 8016fda:	d011      	beq.n	8017000 <_puts_r+0x84>
 8016fdc:	250a      	movs	r5, #10
 8016fde:	e011      	b.n	8017004 <_puts_r+0x88>
 8016fe0:	4b1b      	ldr	r3, [pc, #108]	; (8017050 <_puts_r+0xd4>)
 8016fe2:	429c      	cmp	r4, r3
 8016fe4:	d101      	bne.n	8016fea <_puts_r+0x6e>
 8016fe6:	68ac      	ldr	r4, [r5, #8]
 8016fe8:	e7da      	b.n	8016fa0 <_puts_r+0x24>
 8016fea:	4b1a      	ldr	r3, [pc, #104]	; (8017054 <_puts_r+0xd8>)
 8016fec:	429c      	cmp	r4, r3
 8016fee:	bf08      	it	eq
 8016ff0:	68ec      	ldreq	r4, [r5, #12]
 8016ff2:	e7d5      	b.n	8016fa0 <_puts_r+0x24>
 8016ff4:	4621      	mov	r1, r4
 8016ff6:	4628      	mov	r0, r5
 8016ff8:	f000 fa36 	bl	8017468 <__swsetup_r>
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	d0dd      	beq.n	8016fbc <_puts_r+0x40>
 8017000:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017006:	07da      	lsls	r2, r3, #31
 8017008:	d405      	bmi.n	8017016 <_puts_r+0x9a>
 801700a:	89a3      	ldrh	r3, [r4, #12]
 801700c:	059b      	lsls	r3, r3, #22
 801700e:	d402      	bmi.n	8017016 <_puts_r+0x9a>
 8017010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017012:	f000 fc86 	bl	8017922 <__retarget_lock_release_recursive>
 8017016:	4628      	mov	r0, r5
 8017018:	bd70      	pop	{r4, r5, r6, pc}
 801701a:	2b00      	cmp	r3, #0
 801701c:	da04      	bge.n	8017028 <_puts_r+0xac>
 801701e:	69a2      	ldr	r2, [r4, #24]
 8017020:	429a      	cmp	r2, r3
 8017022:	dc06      	bgt.n	8017032 <_puts_r+0xb6>
 8017024:	290a      	cmp	r1, #10
 8017026:	d004      	beq.n	8017032 <_puts_r+0xb6>
 8017028:	6823      	ldr	r3, [r4, #0]
 801702a:	1c5a      	adds	r2, r3, #1
 801702c:	6022      	str	r2, [r4, #0]
 801702e:	7019      	strb	r1, [r3, #0]
 8017030:	e7c5      	b.n	8016fbe <_puts_r+0x42>
 8017032:	4622      	mov	r2, r4
 8017034:	4628      	mov	r0, r5
 8017036:	f000 f9c5 	bl	80173c4 <__swbuf_r>
 801703a:	3001      	adds	r0, #1
 801703c:	d1bf      	bne.n	8016fbe <_puts_r+0x42>
 801703e:	e7df      	b.n	8017000 <_puts_r+0x84>
 8017040:	6823      	ldr	r3, [r4, #0]
 8017042:	250a      	movs	r5, #10
 8017044:	1c5a      	adds	r2, r3, #1
 8017046:	6022      	str	r2, [r4, #0]
 8017048:	701d      	strb	r5, [r3, #0]
 801704a:	e7db      	b.n	8017004 <_puts_r+0x88>
 801704c:	0801ecc0 	.word	0x0801ecc0
 8017050:	0801ece0 	.word	0x0801ece0
 8017054:	0801eca0 	.word	0x0801eca0

08017058 <puts>:
 8017058:	4b02      	ldr	r3, [pc, #8]	; (8017064 <puts+0xc>)
 801705a:	4601      	mov	r1, r0
 801705c:	6818      	ldr	r0, [r3, #0]
 801705e:	f7ff bf8d 	b.w	8016f7c <_puts_r>
 8017062:	bf00      	nop
 8017064:	2000014c 	.word	0x2000014c

08017068 <rand>:
 8017068:	4b17      	ldr	r3, [pc, #92]	; (80170c8 <rand+0x60>)
 801706a:	b510      	push	{r4, lr}
 801706c:	681c      	ldr	r4, [r3, #0]
 801706e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017070:	b9b3      	cbnz	r3, 80170a0 <rand+0x38>
 8017072:	2018      	movs	r0, #24
 8017074:	f000 fcba 	bl	80179ec <malloc>
 8017078:	63a0      	str	r0, [r4, #56]	; 0x38
 801707a:	b928      	cbnz	r0, 8017088 <rand+0x20>
 801707c:	4602      	mov	r2, r0
 801707e:	4b13      	ldr	r3, [pc, #76]	; (80170cc <rand+0x64>)
 8017080:	4813      	ldr	r0, [pc, #76]	; (80170d0 <rand+0x68>)
 8017082:	214e      	movs	r1, #78	; 0x4e
 8017084:	f000 fa5e 	bl	8017544 <__assert_func>
 8017088:	4a12      	ldr	r2, [pc, #72]	; (80170d4 <rand+0x6c>)
 801708a:	4b13      	ldr	r3, [pc, #76]	; (80170d8 <rand+0x70>)
 801708c:	e9c0 2300 	strd	r2, r3, [r0]
 8017090:	4b12      	ldr	r3, [pc, #72]	; (80170dc <rand+0x74>)
 8017092:	6083      	str	r3, [r0, #8]
 8017094:	230b      	movs	r3, #11
 8017096:	8183      	strh	r3, [r0, #12]
 8017098:	2201      	movs	r2, #1
 801709a:	2300      	movs	r3, #0
 801709c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80170a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80170a2:	480f      	ldr	r0, [pc, #60]	; (80170e0 <rand+0x78>)
 80170a4:	690a      	ldr	r2, [r1, #16]
 80170a6:	694b      	ldr	r3, [r1, #20]
 80170a8:	4c0e      	ldr	r4, [pc, #56]	; (80170e4 <rand+0x7c>)
 80170aa:	4350      	muls	r0, r2
 80170ac:	fb04 0003 	mla	r0, r4, r3, r0
 80170b0:	fba2 3404 	umull	r3, r4, r2, r4
 80170b4:	1c5a      	adds	r2, r3, #1
 80170b6:	4404      	add	r4, r0
 80170b8:	f144 0000 	adc.w	r0, r4, #0
 80170bc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80170c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80170c4:	bd10      	pop	{r4, pc}
 80170c6:	bf00      	nop
 80170c8:	2000014c 	.word	0x2000014c
 80170cc:	0801ebec 	.word	0x0801ebec
 80170d0:	0801ec03 	.word	0x0801ec03
 80170d4:	abcd330e 	.word	0xabcd330e
 80170d8:	e66d1234 	.word	0xe66d1234
 80170dc:	0005deec 	.word	0x0005deec
 80170e0:	5851f42d 	.word	0x5851f42d
 80170e4:	4c957f2d 	.word	0x4c957f2d

080170e8 <sniprintf>:
 80170e8:	b40c      	push	{r2, r3}
 80170ea:	b530      	push	{r4, r5, lr}
 80170ec:	4b17      	ldr	r3, [pc, #92]	; (801714c <sniprintf+0x64>)
 80170ee:	1e0c      	subs	r4, r1, #0
 80170f0:	681d      	ldr	r5, [r3, #0]
 80170f2:	b09d      	sub	sp, #116	; 0x74
 80170f4:	da08      	bge.n	8017108 <sniprintf+0x20>
 80170f6:	238b      	movs	r3, #139	; 0x8b
 80170f8:	602b      	str	r3, [r5, #0]
 80170fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170fe:	b01d      	add	sp, #116	; 0x74
 8017100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017104:	b002      	add	sp, #8
 8017106:	4770      	bx	lr
 8017108:	f44f 7302 	mov.w	r3, #520	; 0x208
 801710c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017110:	bf14      	ite	ne
 8017112:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017116:	4623      	moveq	r3, r4
 8017118:	9304      	str	r3, [sp, #16]
 801711a:	9307      	str	r3, [sp, #28]
 801711c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017120:	9002      	str	r0, [sp, #8]
 8017122:	9006      	str	r0, [sp, #24]
 8017124:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017128:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801712a:	ab21      	add	r3, sp, #132	; 0x84
 801712c:	a902      	add	r1, sp, #8
 801712e:	4628      	mov	r0, r5
 8017130:	9301      	str	r3, [sp, #4]
 8017132:	f000 fd69 	bl	8017c08 <_svfiprintf_r>
 8017136:	1c43      	adds	r3, r0, #1
 8017138:	bfbc      	itt	lt
 801713a:	238b      	movlt	r3, #139	; 0x8b
 801713c:	602b      	strlt	r3, [r5, #0]
 801713e:	2c00      	cmp	r4, #0
 8017140:	d0dd      	beq.n	80170fe <sniprintf+0x16>
 8017142:	9b02      	ldr	r3, [sp, #8]
 8017144:	2200      	movs	r2, #0
 8017146:	701a      	strb	r2, [r3, #0]
 8017148:	e7d9      	b.n	80170fe <sniprintf+0x16>
 801714a:	bf00      	nop
 801714c:	2000014c 	.word	0x2000014c

08017150 <siprintf>:
 8017150:	b40e      	push	{r1, r2, r3}
 8017152:	b500      	push	{lr}
 8017154:	b09c      	sub	sp, #112	; 0x70
 8017156:	ab1d      	add	r3, sp, #116	; 0x74
 8017158:	9002      	str	r0, [sp, #8]
 801715a:	9006      	str	r0, [sp, #24]
 801715c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017160:	4809      	ldr	r0, [pc, #36]	; (8017188 <siprintf+0x38>)
 8017162:	9107      	str	r1, [sp, #28]
 8017164:	9104      	str	r1, [sp, #16]
 8017166:	4909      	ldr	r1, [pc, #36]	; (801718c <siprintf+0x3c>)
 8017168:	f853 2b04 	ldr.w	r2, [r3], #4
 801716c:	9105      	str	r1, [sp, #20]
 801716e:	6800      	ldr	r0, [r0, #0]
 8017170:	9301      	str	r3, [sp, #4]
 8017172:	a902      	add	r1, sp, #8
 8017174:	f000 fd48 	bl	8017c08 <_svfiprintf_r>
 8017178:	9b02      	ldr	r3, [sp, #8]
 801717a:	2200      	movs	r2, #0
 801717c:	701a      	strb	r2, [r3, #0]
 801717e:	b01c      	add	sp, #112	; 0x70
 8017180:	f85d eb04 	ldr.w	lr, [sp], #4
 8017184:	b003      	add	sp, #12
 8017186:	4770      	bx	lr
 8017188:	2000014c 	.word	0x2000014c
 801718c:	ffff0208 	.word	0xffff0208

08017190 <strcat>:
 8017190:	b510      	push	{r4, lr}
 8017192:	4602      	mov	r2, r0
 8017194:	7814      	ldrb	r4, [r2, #0]
 8017196:	4613      	mov	r3, r2
 8017198:	3201      	adds	r2, #1
 801719a:	2c00      	cmp	r4, #0
 801719c:	d1fa      	bne.n	8017194 <strcat+0x4>
 801719e:	3b01      	subs	r3, #1
 80171a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80171a8:	2a00      	cmp	r2, #0
 80171aa:	d1f9      	bne.n	80171a0 <strcat+0x10>
 80171ac:	bd10      	pop	{r4, pc}

080171ae <strchr>:
 80171ae:	b2c9      	uxtb	r1, r1
 80171b0:	4603      	mov	r3, r0
 80171b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171b6:	b11a      	cbz	r2, 80171c0 <strchr+0x12>
 80171b8:	428a      	cmp	r2, r1
 80171ba:	d1f9      	bne.n	80171b0 <strchr+0x2>
 80171bc:	4618      	mov	r0, r3
 80171be:	4770      	bx	lr
 80171c0:	2900      	cmp	r1, #0
 80171c2:	bf18      	it	ne
 80171c4:	2300      	movne	r3, #0
 80171c6:	e7f9      	b.n	80171bc <strchr+0xe>

080171c8 <strcpy>:
 80171c8:	4603      	mov	r3, r0
 80171ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171ce:	f803 2b01 	strb.w	r2, [r3], #1
 80171d2:	2a00      	cmp	r2, #0
 80171d4:	d1f9      	bne.n	80171ca <strcpy+0x2>
 80171d6:	4770      	bx	lr

080171d8 <strncmp>:
 80171d8:	b510      	push	{r4, lr}
 80171da:	b16a      	cbz	r2, 80171f8 <strncmp+0x20>
 80171dc:	3901      	subs	r1, #1
 80171de:	1884      	adds	r4, r0, r2
 80171e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80171e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80171e8:	4293      	cmp	r3, r2
 80171ea:	d103      	bne.n	80171f4 <strncmp+0x1c>
 80171ec:	42a0      	cmp	r0, r4
 80171ee:	d001      	beq.n	80171f4 <strncmp+0x1c>
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d1f5      	bne.n	80171e0 <strncmp+0x8>
 80171f4:	1a98      	subs	r0, r3, r2
 80171f6:	bd10      	pop	{r4, pc}
 80171f8:	4610      	mov	r0, r2
 80171fa:	e7fc      	b.n	80171f6 <strncmp+0x1e>

080171fc <strncpy>:
 80171fc:	b510      	push	{r4, lr}
 80171fe:	3901      	subs	r1, #1
 8017200:	4603      	mov	r3, r0
 8017202:	b132      	cbz	r2, 8017212 <strncpy+0x16>
 8017204:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017208:	f803 4b01 	strb.w	r4, [r3], #1
 801720c:	3a01      	subs	r2, #1
 801720e:	2c00      	cmp	r4, #0
 8017210:	d1f7      	bne.n	8017202 <strncpy+0x6>
 8017212:	441a      	add	r2, r3
 8017214:	2100      	movs	r1, #0
 8017216:	4293      	cmp	r3, r2
 8017218:	d100      	bne.n	801721c <strncpy+0x20>
 801721a:	bd10      	pop	{r4, pc}
 801721c:	f803 1b01 	strb.w	r1, [r3], #1
 8017220:	e7f9      	b.n	8017216 <strncpy+0x1a>

08017222 <strstr>:
 8017222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017224:	780c      	ldrb	r4, [r1, #0]
 8017226:	b164      	cbz	r4, 8017242 <strstr+0x20>
 8017228:	4603      	mov	r3, r0
 801722a:	781a      	ldrb	r2, [r3, #0]
 801722c:	4618      	mov	r0, r3
 801722e:	1c5e      	adds	r6, r3, #1
 8017230:	b90a      	cbnz	r2, 8017236 <strstr+0x14>
 8017232:	4610      	mov	r0, r2
 8017234:	e005      	b.n	8017242 <strstr+0x20>
 8017236:	4294      	cmp	r4, r2
 8017238:	d108      	bne.n	801724c <strstr+0x2a>
 801723a:	460d      	mov	r5, r1
 801723c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8017240:	b902      	cbnz	r2, 8017244 <strstr+0x22>
 8017242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017244:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8017248:	4297      	cmp	r7, r2
 801724a:	d0f7      	beq.n	801723c <strstr+0x1a>
 801724c:	4633      	mov	r3, r6
 801724e:	e7ec      	b.n	801722a <strstr+0x8>

08017250 <__strtok_r>:
 8017250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017252:	b908      	cbnz	r0, 8017258 <__strtok_r+0x8>
 8017254:	6810      	ldr	r0, [r2, #0]
 8017256:	b188      	cbz	r0, 801727c <__strtok_r+0x2c>
 8017258:	4604      	mov	r4, r0
 801725a:	4620      	mov	r0, r4
 801725c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017260:	460f      	mov	r7, r1
 8017262:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017266:	b91e      	cbnz	r6, 8017270 <__strtok_r+0x20>
 8017268:	b965      	cbnz	r5, 8017284 <__strtok_r+0x34>
 801726a:	6015      	str	r5, [r2, #0]
 801726c:	4628      	mov	r0, r5
 801726e:	e005      	b.n	801727c <__strtok_r+0x2c>
 8017270:	42b5      	cmp	r5, r6
 8017272:	d1f6      	bne.n	8017262 <__strtok_r+0x12>
 8017274:	2b00      	cmp	r3, #0
 8017276:	d1f0      	bne.n	801725a <__strtok_r+0xa>
 8017278:	6014      	str	r4, [r2, #0]
 801727a:	7003      	strb	r3, [r0, #0]
 801727c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801727e:	461c      	mov	r4, r3
 8017280:	e00c      	b.n	801729c <__strtok_r+0x4c>
 8017282:	b915      	cbnz	r5, 801728a <__strtok_r+0x3a>
 8017284:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017288:	460e      	mov	r6, r1
 801728a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801728e:	42ab      	cmp	r3, r5
 8017290:	d1f7      	bne.n	8017282 <__strtok_r+0x32>
 8017292:	2b00      	cmp	r3, #0
 8017294:	d0f3      	beq.n	801727e <__strtok_r+0x2e>
 8017296:	2300      	movs	r3, #0
 8017298:	f804 3c01 	strb.w	r3, [r4, #-1]
 801729c:	6014      	str	r4, [r2, #0]
 801729e:	e7ed      	b.n	801727c <__strtok_r+0x2c>

080172a0 <strtok_r>:
 80172a0:	2301      	movs	r3, #1
 80172a2:	f7ff bfd5 	b.w	8017250 <__strtok_r>
	...

080172a8 <_strtol_l.isra.0>:
 80172a8:	2b01      	cmp	r3, #1
 80172aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172ae:	d001      	beq.n	80172b4 <_strtol_l.isra.0+0xc>
 80172b0:	2b24      	cmp	r3, #36	; 0x24
 80172b2:	d906      	bls.n	80172c2 <_strtol_l.isra.0+0x1a>
 80172b4:	f000 f964 	bl	8017580 <__errno>
 80172b8:	2316      	movs	r3, #22
 80172ba:	6003      	str	r3, [r0, #0]
 80172bc:	2000      	movs	r0, #0
 80172be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172c2:	4f3a      	ldr	r7, [pc, #232]	; (80173ac <_strtol_l.isra.0+0x104>)
 80172c4:	468e      	mov	lr, r1
 80172c6:	4676      	mov	r6, lr
 80172c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80172cc:	5de5      	ldrb	r5, [r4, r7]
 80172ce:	f015 0508 	ands.w	r5, r5, #8
 80172d2:	d1f8      	bne.n	80172c6 <_strtol_l.isra.0+0x1e>
 80172d4:	2c2d      	cmp	r4, #45	; 0x2d
 80172d6:	d134      	bne.n	8017342 <_strtol_l.isra.0+0x9a>
 80172d8:	f89e 4000 	ldrb.w	r4, [lr]
 80172dc:	f04f 0801 	mov.w	r8, #1
 80172e0:	f106 0e02 	add.w	lr, r6, #2
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d05c      	beq.n	80173a2 <_strtol_l.isra.0+0xfa>
 80172e8:	2b10      	cmp	r3, #16
 80172ea:	d10c      	bne.n	8017306 <_strtol_l.isra.0+0x5e>
 80172ec:	2c30      	cmp	r4, #48	; 0x30
 80172ee:	d10a      	bne.n	8017306 <_strtol_l.isra.0+0x5e>
 80172f0:	f89e 4000 	ldrb.w	r4, [lr]
 80172f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80172f8:	2c58      	cmp	r4, #88	; 0x58
 80172fa:	d14d      	bne.n	8017398 <_strtol_l.isra.0+0xf0>
 80172fc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017300:	2310      	movs	r3, #16
 8017302:	f10e 0e02 	add.w	lr, lr, #2
 8017306:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801730a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801730e:	2600      	movs	r6, #0
 8017310:	fbbc f9f3 	udiv	r9, ip, r3
 8017314:	4635      	mov	r5, r6
 8017316:	fb03 ca19 	mls	sl, r3, r9, ip
 801731a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801731e:	2f09      	cmp	r7, #9
 8017320:	d818      	bhi.n	8017354 <_strtol_l.isra.0+0xac>
 8017322:	463c      	mov	r4, r7
 8017324:	42a3      	cmp	r3, r4
 8017326:	dd24      	ble.n	8017372 <_strtol_l.isra.0+0xca>
 8017328:	2e00      	cmp	r6, #0
 801732a:	db1f      	blt.n	801736c <_strtol_l.isra.0+0xc4>
 801732c:	45a9      	cmp	r9, r5
 801732e:	d31d      	bcc.n	801736c <_strtol_l.isra.0+0xc4>
 8017330:	d101      	bne.n	8017336 <_strtol_l.isra.0+0x8e>
 8017332:	45a2      	cmp	sl, r4
 8017334:	db1a      	blt.n	801736c <_strtol_l.isra.0+0xc4>
 8017336:	fb05 4503 	mla	r5, r5, r3, r4
 801733a:	2601      	movs	r6, #1
 801733c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017340:	e7eb      	b.n	801731a <_strtol_l.isra.0+0x72>
 8017342:	2c2b      	cmp	r4, #43	; 0x2b
 8017344:	bf08      	it	eq
 8017346:	f89e 4000 	ldrbeq.w	r4, [lr]
 801734a:	46a8      	mov	r8, r5
 801734c:	bf08      	it	eq
 801734e:	f106 0e02 	addeq.w	lr, r6, #2
 8017352:	e7c7      	b.n	80172e4 <_strtol_l.isra.0+0x3c>
 8017354:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017358:	2f19      	cmp	r7, #25
 801735a:	d801      	bhi.n	8017360 <_strtol_l.isra.0+0xb8>
 801735c:	3c37      	subs	r4, #55	; 0x37
 801735e:	e7e1      	b.n	8017324 <_strtol_l.isra.0+0x7c>
 8017360:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017364:	2f19      	cmp	r7, #25
 8017366:	d804      	bhi.n	8017372 <_strtol_l.isra.0+0xca>
 8017368:	3c57      	subs	r4, #87	; 0x57
 801736a:	e7db      	b.n	8017324 <_strtol_l.isra.0+0x7c>
 801736c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017370:	e7e4      	b.n	801733c <_strtol_l.isra.0+0x94>
 8017372:	2e00      	cmp	r6, #0
 8017374:	da05      	bge.n	8017382 <_strtol_l.isra.0+0xda>
 8017376:	2322      	movs	r3, #34	; 0x22
 8017378:	6003      	str	r3, [r0, #0]
 801737a:	4665      	mov	r5, ip
 801737c:	b942      	cbnz	r2, 8017390 <_strtol_l.isra.0+0xe8>
 801737e:	4628      	mov	r0, r5
 8017380:	e79d      	b.n	80172be <_strtol_l.isra.0+0x16>
 8017382:	f1b8 0f00 	cmp.w	r8, #0
 8017386:	d000      	beq.n	801738a <_strtol_l.isra.0+0xe2>
 8017388:	426d      	negs	r5, r5
 801738a:	2a00      	cmp	r2, #0
 801738c:	d0f7      	beq.n	801737e <_strtol_l.isra.0+0xd6>
 801738e:	b10e      	cbz	r6, 8017394 <_strtol_l.isra.0+0xec>
 8017390:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8017394:	6011      	str	r1, [r2, #0]
 8017396:	e7f2      	b.n	801737e <_strtol_l.isra.0+0xd6>
 8017398:	2430      	movs	r4, #48	; 0x30
 801739a:	2b00      	cmp	r3, #0
 801739c:	d1b3      	bne.n	8017306 <_strtol_l.isra.0+0x5e>
 801739e:	2308      	movs	r3, #8
 80173a0:	e7b1      	b.n	8017306 <_strtol_l.isra.0+0x5e>
 80173a2:	2c30      	cmp	r4, #48	; 0x30
 80173a4:	d0a4      	beq.n	80172f0 <_strtol_l.isra.0+0x48>
 80173a6:	230a      	movs	r3, #10
 80173a8:	e7ad      	b.n	8017306 <_strtol_l.isra.0+0x5e>
 80173aa:	bf00      	nop
 80173ac:	0801eae7 	.word	0x0801eae7

080173b0 <strtol>:
 80173b0:	4613      	mov	r3, r2
 80173b2:	460a      	mov	r2, r1
 80173b4:	4601      	mov	r1, r0
 80173b6:	4802      	ldr	r0, [pc, #8]	; (80173c0 <strtol+0x10>)
 80173b8:	6800      	ldr	r0, [r0, #0]
 80173ba:	f7ff bf75 	b.w	80172a8 <_strtol_l.isra.0>
 80173be:	bf00      	nop
 80173c0:	2000014c 	.word	0x2000014c

080173c4 <__swbuf_r>:
 80173c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173c6:	460e      	mov	r6, r1
 80173c8:	4614      	mov	r4, r2
 80173ca:	4605      	mov	r5, r0
 80173cc:	b118      	cbz	r0, 80173d6 <__swbuf_r+0x12>
 80173ce:	6983      	ldr	r3, [r0, #24]
 80173d0:	b90b      	cbnz	r3, 80173d6 <__swbuf_r+0x12>
 80173d2:	f000 f9f5 	bl	80177c0 <__sinit>
 80173d6:	4b21      	ldr	r3, [pc, #132]	; (801745c <__swbuf_r+0x98>)
 80173d8:	429c      	cmp	r4, r3
 80173da:	d12b      	bne.n	8017434 <__swbuf_r+0x70>
 80173dc:	686c      	ldr	r4, [r5, #4]
 80173de:	69a3      	ldr	r3, [r4, #24]
 80173e0:	60a3      	str	r3, [r4, #8]
 80173e2:	89a3      	ldrh	r3, [r4, #12]
 80173e4:	071a      	lsls	r2, r3, #28
 80173e6:	d52f      	bpl.n	8017448 <__swbuf_r+0x84>
 80173e8:	6923      	ldr	r3, [r4, #16]
 80173ea:	b36b      	cbz	r3, 8017448 <__swbuf_r+0x84>
 80173ec:	6923      	ldr	r3, [r4, #16]
 80173ee:	6820      	ldr	r0, [r4, #0]
 80173f0:	1ac0      	subs	r0, r0, r3
 80173f2:	6963      	ldr	r3, [r4, #20]
 80173f4:	b2f6      	uxtb	r6, r6
 80173f6:	4283      	cmp	r3, r0
 80173f8:	4637      	mov	r7, r6
 80173fa:	dc04      	bgt.n	8017406 <__swbuf_r+0x42>
 80173fc:	4621      	mov	r1, r4
 80173fe:	4628      	mov	r0, r5
 8017400:	f000 f94a 	bl	8017698 <_fflush_r>
 8017404:	bb30      	cbnz	r0, 8017454 <__swbuf_r+0x90>
 8017406:	68a3      	ldr	r3, [r4, #8]
 8017408:	3b01      	subs	r3, #1
 801740a:	60a3      	str	r3, [r4, #8]
 801740c:	6823      	ldr	r3, [r4, #0]
 801740e:	1c5a      	adds	r2, r3, #1
 8017410:	6022      	str	r2, [r4, #0]
 8017412:	701e      	strb	r6, [r3, #0]
 8017414:	6963      	ldr	r3, [r4, #20]
 8017416:	3001      	adds	r0, #1
 8017418:	4283      	cmp	r3, r0
 801741a:	d004      	beq.n	8017426 <__swbuf_r+0x62>
 801741c:	89a3      	ldrh	r3, [r4, #12]
 801741e:	07db      	lsls	r3, r3, #31
 8017420:	d506      	bpl.n	8017430 <__swbuf_r+0x6c>
 8017422:	2e0a      	cmp	r6, #10
 8017424:	d104      	bne.n	8017430 <__swbuf_r+0x6c>
 8017426:	4621      	mov	r1, r4
 8017428:	4628      	mov	r0, r5
 801742a:	f000 f935 	bl	8017698 <_fflush_r>
 801742e:	b988      	cbnz	r0, 8017454 <__swbuf_r+0x90>
 8017430:	4638      	mov	r0, r7
 8017432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017434:	4b0a      	ldr	r3, [pc, #40]	; (8017460 <__swbuf_r+0x9c>)
 8017436:	429c      	cmp	r4, r3
 8017438:	d101      	bne.n	801743e <__swbuf_r+0x7a>
 801743a:	68ac      	ldr	r4, [r5, #8]
 801743c:	e7cf      	b.n	80173de <__swbuf_r+0x1a>
 801743e:	4b09      	ldr	r3, [pc, #36]	; (8017464 <__swbuf_r+0xa0>)
 8017440:	429c      	cmp	r4, r3
 8017442:	bf08      	it	eq
 8017444:	68ec      	ldreq	r4, [r5, #12]
 8017446:	e7ca      	b.n	80173de <__swbuf_r+0x1a>
 8017448:	4621      	mov	r1, r4
 801744a:	4628      	mov	r0, r5
 801744c:	f000 f80c 	bl	8017468 <__swsetup_r>
 8017450:	2800      	cmp	r0, #0
 8017452:	d0cb      	beq.n	80173ec <__swbuf_r+0x28>
 8017454:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017458:	e7ea      	b.n	8017430 <__swbuf_r+0x6c>
 801745a:	bf00      	nop
 801745c:	0801ecc0 	.word	0x0801ecc0
 8017460:	0801ece0 	.word	0x0801ece0
 8017464:	0801eca0 	.word	0x0801eca0

08017468 <__swsetup_r>:
 8017468:	4b32      	ldr	r3, [pc, #200]	; (8017534 <__swsetup_r+0xcc>)
 801746a:	b570      	push	{r4, r5, r6, lr}
 801746c:	681d      	ldr	r5, [r3, #0]
 801746e:	4606      	mov	r6, r0
 8017470:	460c      	mov	r4, r1
 8017472:	b125      	cbz	r5, 801747e <__swsetup_r+0x16>
 8017474:	69ab      	ldr	r3, [r5, #24]
 8017476:	b913      	cbnz	r3, 801747e <__swsetup_r+0x16>
 8017478:	4628      	mov	r0, r5
 801747a:	f000 f9a1 	bl	80177c0 <__sinit>
 801747e:	4b2e      	ldr	r3, [pc, #184]	; (8017538 <__swsetup_r+0xd0>)
 8017480:	429c      	cmp	r4, r3
 8017482:	d10f      	bne.n	80174a4 <__swsetup_r+0x3c>
 8017484:	686c      	ldr	r4, [r5, #4]
 8017486:	89a3      	ldrh	r3, [r4, #12]
 8017488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801748c:	0719      	lsls	r1, r3, #28
 801748e:	d42c      	bmi.n	80174ea <__swsetup_r+0x82>
 8017490:	06dd      	lsls	r5, r3, #27
 8017492:	d411      	bmi.n	80174b8 <__swsetup_r+0x50>
 8017494:	2309      	movs	r3, #9
 8017496:	6033      	str	r3, [r6, #0]
 8017498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801749c:	81a3      	strh	r3, [r4, #12]
 801749e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174a2:	e03e      	b.n	8017522 <__swsetup_r+0xba>
 80174a4:	4b25      	ldr	r3, [pc, #148]	; (801753c <__swsetup_r+0xd4>)
 80174a6:	429c      	cmp	r4, r3
 80174a8:	d101      	bne.n	80174ae <__swsetup_r+0x46>
 80174aa:	68ac      	ldr	r4, [r5, #8]
 80174ac:	e7eb      	b.n	8017486 <__swsetup_r+0x1e>
 80174ae:	4b24      	ldr	r3, [pc, #144]	; (8017540 <__swsetup_r+0xd8>)
 80174b0:	429c      	cmp	r4, r3
 80174b2:	bf08      	it	eq
 80174b4:	68ec      	ldreq	r4, [r5, #12]
 80174b6:	e7e6      	b.n	8017486 <__swsetup_r+0x1e>
 80174b8:	0758      	lsls	r0, r3, #29
 80174ba:	d512      	bpl.n	80174e2 <__swsetup_r+0x7a>
 80174bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80174be:	b141      	cbz	r1, 80174d2 <__swsetup_r+0x6a>
 80174c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174c4:	4299      	cmp	r1, r3
 80174c6:	d002      	beq.n	80174ce <__swsetup_r+0x66>
 80174c8:	4630      	mov	r0, r6
 80174ca:	f000 fa97 	bl	80179fc <_free_r>
 80174ce:	2300      	movs	r3, #0
 80174d0:	6363      	str	r3, [r4, #52]	; 0x34
 80174d2:	89a3      	ldrh	r3, [r4, #12]
 80174d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80174d8:	81a3      	strh	r3, [r4, #12]
 80174da:	2300      	movs	r3, #0
 80174dc:	6063      	str	r3, [r4, #4]
 80174de:	6923      	ldr	r3, [r4, #16]
 80174e0:	6023      	str	r3, [r4, #0]
 80174e2:	89a3      	ldrh	r3, [r4, #12]
 80174e4:	f043 0308 	orr.w	r3, r3, #8
 80174e8:	81a3      	strh	r3, [r4, #12]
 80174ea:	6923      	ldr	r3, [r4, #16]
 80174ec:	b94b      	cbnz	r3, 8017502 <__swsetup_r+0x9a>
 80174ee:	89a3      	ldrh	r3, [r4, #12]
 80174f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80174f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80174f8:	d003      	beq.n	8017502 <__swsetup_r+0x9a>
 80174fa:	4621      	mov	r1, r4
 80174fc:	4630      	mov	r0, r6
 80174fe:	f000 fa35 	bl	801796c <__smakebuf_r>
 8017502:	89a0      	ldrh	r0, [r4, #12]
 8017504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017508:	f010 0301 	ands.w	r3, r0, #1
 801750c:	d00a      	beq.n	8017524 <__swsetup_r+0xbc>
 801750e:	2300      	movs	r3, #0
 8017510:	60a3      	str	r3, [r4, #8]
 8017512:	6963      	ldr	r3, [r4, #20]
 8017514:	425b      	negs	r3, r3
 8017516:	61a3      	str	r3, [r4, #24]
 8017518:	6923      	ldr	r3, [r4, #16]
 801751a:	b943      	cbnz	r3, 801752e <__swsetup_r+0xc6>
 801751c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017520:	d1ba      	bne.n	8017498 <__swsetup_r+0x30>
 8017522:	bd70      	pop	{r4, r5, r6, pc}
 8017524:	0781      	lsls	r1, r0, #30
 8017526:	bf58      	it	pl
 8017528:	6963      	ldrpl	r3, [r4, #20]
 801752a:	60a3      	str	r3, [r4, #8]
 801752c:	e7f4      	b.n	8017518 <__swsetup_r+0xb0>
 801752e:	2000      	movs	r0, #0
 8017530:	e7f7      	b.n	8017522 <__swsetup_r+0xba>
 8017532:	bf00      	nop
 8017534:	2000014c 	.word	0x2000014c
 8017538:	0801ecc0 	.word	0x0801ecc0
 801753c:	0801ece0 	.word	0x0801ece0
 8017540:	0801eca0 	.word	0x0801eca0

08017544 <__assert_func>:
 8017544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017546:	4614      	mov	r4, r2
 8017548:	461a      	mov	r2, r3
 801754a:	4b09      	ldr	r3, [pc, #36]	; (8017570 <__assert_func+0x2c>)
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	4605      	mov	r5, r0
 8017550:	68d8      	ldr	r0, [r3, #12]
 8017552:	b14c      	cbz	r4, 8017568 <__assert_func+0x24>
 8017554:	4b07      	ldr	r3, [pc, #28]	; (8017574 <__assert_func+0x30>)
 8017556:	9100      	str	r1, [sp, #0]
 8017558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801755c:	4906      	ldr	r1, [pc, #24]	; (8017578 <__assert_func+0x34>)
 801755e:	462b      	mov	r3, r5
 8017560:	f000 f9ac 	bl	80178bc <fiprintf>
 8017564:	f000 ffa4 	bl	80184b0 <abort>
 8017568:	4b04      	ldr	r3, [pc, #16]	; (801757c <__assert_func+0x38>)
 801756a:	461c      	mov	r4, r3
 801756c:	e7f3      	b.n	8017556 <__assert_func+0x12>
 801756e:	bf00      	nop
 8017570:	2000014c 	.word	0x2000014c
 8017574:	0801ec62 	.word	0x0801ec62
 8017578:	0801ec6f 	.word	0x0801ec6f
 801757c:	0801ec9d 	.word	0x0801ec9d

08017580 <__errno>:
 8017580:	4b01      	ldr	r3, [pc, #4]	; (8017588 <__errno+0x8>)
 8017582:	6818      	ldr	r0, [r3, #0]
 8017584:	4770      	bx	lr
 8017586:	bf00      	nop
 8017588:	2000014c 	.word	0x2000014c

0801758c <__sflush_r>:
 801758c:	898a      	ldrh	r2, [r1, #12]
 801758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017592:	4605      	mov	r5, r0
 8017594:	0710      	lsls	r0, r2, #28
 8017596:	460c      	mov	r4, r1
 8017598:	d458      	bmi.n	801764c <__sflush_r+0xc0>
 801759a:	684b      	ldr	r3, [r1, #4]
 801759c:	2b00      	cmp	r3, #0
 801759e:	dc05      	bgt.n	80175ac <__sflush_r+0x20>
 80175a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	dc02      	bgt.n	80175ac <__sflush_r+0x20>
 80175a6:	2000      	movs	r0, #0
 80175a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175ae:	2e00      	cmp	r6, #0
 80175b0:	d0f9      	beq.n	80175a6 <__sflush_r+0x1a>
 80175b2:	2300      	movs	r3, #0
 80175b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80175b8:	682f      	ldr	r7, [r5, #0]
 80175ba:	602b      	str	r3, [r5, #0]
 80175bc:	d032      	beq.n	8017624 <__sflush_r+0x98>
 80175be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80175c0:	89a3      	ldrh	r3, [r4, #12]
 80175c2:	075a      	lsls	r2, r3, #29
 80175c4:	d505      	bpl.n	80175d2 <__sflush_r+0x46>
 80175c6:	6863      	ldr	r3, [r4, #4]
 80175c8:	1ac0      	subs	r0, r0, r3
 80175ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80175cc:	b10b      	cbz	r3, 80175d2 <__sflush_r+0x46>
 80175ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80175d0:	1ac0      	subs	r0, r0, r3
 80175d2:	2300      	movs	r3, #0
 80175d4:	4602      	mov	r2, r0
 80175d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175d8:	6a21      	ldr	r1, [r4, #32]
 80175da:	4628      	mov	r0, r5
 80175dc:	47b0      	blx	r6
 80175de:	1c43      	adds	r3, r0, #1
 80175e0:	89a3      	ldrh	r3, [r4, #12]
 80175e2:	d106      	bne.n	80175f2 <__sflush_r+0x66>
 80175e4:	6829      	ldr	r1, [r5, #0]
 80175e6:	291d      	cmp	r1, #29
 80175e8:	d82c      	bhi.n	8017644 <__sflush_r+0xb8>
 80175ea:	4a2a      	ldr	r2, [pc, #168]	; (8017694 <__sflush_r+0x108>)
 80175ec:	40ca      	lsrs	r2, r1
 80175ee:	07d6      	lsls	r6, r2, #31
 80175f0:	d528      	bpl.n	8017644 <__sflush_r+0xb8>
 80175f2:	2200      	movs	r2, #0
 80175f4:	6062      	str	r2, [r4, #4]
 80175f6:	04d9      	lsls	r1, r3, #19
 80175f8:	6922      	ldr	r2, [r4, #16]
 80175fa:	6022      	str	r2, [r4, #0]
 80175fc:	d504      	bpl.n	8017608 <__sflush_r+0x7c>
 80175fe:	1c42      	adds	r2, r0, #1
 8017600:	d101      	bne.n	8017606 <__sflush_r+0x7a>
 8017602:	682b      	ldr	r3, [r5, #0]
 8017604:	b903      	cbnz	r3, 8017608 <__sflush_r+0x7c>
 8017606:	6560      	str	r0, [r4, #84]	; 0x54
 8017608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801760a:	602f      	str	r7, [r5, #0]
 801760c:	2900      	cmp	r1, #0
 801760e:	d0ca      	beq.n	80175a6 <__sflush_r+0x1a>
 8017610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017614:	4299      	cmp	r1, r3
 8017616:	d002      	beq.n	801761e <__sflush_r+0x92>
 8017618:	4628      	mov	r0, r5
 801761a:	f000 f9ef 	bl	80179fc <_free_r>
 801761e:	2000      	movs	r0, #0
 8017620:	6360      	str	r0, [r4, #52]	; 0x34
 8017622:	e7c1      	b.n	80175a8 <__sflush_r+0x1c>
 8017624:	6a21      	ldr	r1, [r4, #32]
 8017626:	2301      	movs	r3, #1
 8017628:	4628      	mov	r0, r5
 801762a:	47b0      	blx	r6
 801762c:	1c41      	adds	r1, r0, #1
 801762e:	d1c7      	bne.n	80175c0 <__sflush_r+0x34>
 8017630:	682b      	ldr	r3, [r5, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d0c4      	beq.n	80175c0 <__sflush_r+0x34>
 8017636:	2b1d      	cmp	r3, #29
 8017638:	d001      	beq.n	801763e <__sflush_r+0xb2>
 801763a:	2b16      	cmp	r3, #22
 801763c:	d101      	bne.n	8017642 <__sflush_r+0xb6>
 801763e:	602f      	str	r7, [r5, #0]
 8017640:	e7b1      	b.n	80175a6 <__sflush_r+0x1a>
 8017642:	89a3      	ldrh	r3, [r4, #12]
 8017644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017648:	81a3      	strh	r3, [r4, #12]
 801764a:	e7ad      	b.n	80175a8 <__sflush_r+0x1c>
 801764c:	690f      	ldr	r7, [r1, #16]
 801764e:	2f00      	cmp	r7, #0
 8017650:	d0a9      	beq.n	80175a6 <__sflush_r+0x1a>
 8017652:	0793      	lsls	r3, r2, #30
 8017654:	680e      	ldr	r6, [r1, #0]
 8017656:	bf08      	it	eq
 8017658:	694b      	ldreq	r3, [r1, #20]
 801765a:	600f      	str	r7, [r1, #0]
 801765c:	bf18      	it	ne
 801765e:	2300      	movne	r3, #0
 8017660:	eba6 0807 	sub.w	r8, r6, r7
 8017664:	608b      	str	r3, [r1, #8]
 8017666:	f1b8 0f00 	cmp.w	r8, #0
 801766a:	dd9c      	ble.n	80175a6 <__sflush_r+0x1a>
 801766c:	6a21      	ldr	r1, [r4, #32]
 801766e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017670:	4643      	mov	r3, r8
 8017672:	463a      	mov	r2, r7
 8017674:	4628      	mov	r0, r5
 8017676:	47b0      	blx	r6
 8017678:	2800      	cmp	r0, #0
 801767a:	dc06      	bgt.n	801768a <__sflush_r+0xfe>
 801767c:	89a3      	ldrh	r3, [r4, #12]
 801767e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017682:	81a3      	strh	r3, [r4, #12]
 8017684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017688:	e78e      	b.n	80175a8 <__sflush_r+0x1c>
 801768a:	4407      	add	r7, r0
 801768c:	eba8 0800 	sub.w	r8, r8, r0
 8017690:	e7e9      	b.n	8017666 <__sflush_r+0xda>
 8017692:	bf00      	nop
 8017694:	20400001 	.word	0x20400001

08017698 <_fflush_r>:
 8017698:	b538      	push	{r3, r4, r5, lr}
 801769a:	690b      	ldr	r3, [r1, #16]
 801769c:	4605      	mov	r5, r0
 801769e:	460c      	mov	r4, r1
 80176a0:	b913      	cbnz	r3, 80176a8 <_fflush_r+0x10>
 80176a2:	2500      	movs	r5, #0
 80176a4:	4628      	mov	r0, r5
 80176a6:	bd38      	pop	{r3, r4, r5, pc}
 80176a8:	b118      	cbz	r0, 80176b2 <_fflush_r+0x1a>
 80176aa:	6983      	ldr	r3, [r0, #24]
 80176ac:	b90b      	cbnz	r3, 80176b2 <_fflush_r+0x1a>
 80176ae:	f000 f887 	bl	80177c0 <__sinit>
 80176b2:	4b14      	ldr	r3, [pc, #80]	; (8017704 <_fflush_r+0x6c>)
 80176b4:	429c      	cmp	r4, r3
 80176b6:	d11b      	bne.n	80176f0 <_fflush_r+0x58>
 80176b8:	686c      	ldr	r4, [r5, #4]
 80176ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d0ef      	beq.n	80176a2 <_fflush_r+0xa>
 80176c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80176c4:	07d0      	lsls	r0, r2, #31
 80176c6:	d404      	bmi.n	80176d2 <_fflush_r+0x3a>
 80176c8:	0599      	lsls	r1, r3, #22
 80176ca:	d402      	bmi.n	80176d2 <_fflush_r+0x3a>
 80176cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176ce:	f000 f927 	bl	8017920 <__retarget_lock_acquire_recursive>
 80176d2:	4628      	mov	r0, r5
 80176d4:	4621      	mov	r1, r4
 80176d6:	f7ff ff59 	bl	801758c <__sflush_r>
 80176da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80176dc:	07da      	lsls	r2, r3, #31
 80176de:	4605      	mov	r5, r0
 80176e0:	d4e0      	bmi.n	80176a4 <_fflush_r+0xc>
 80176e2:	89a3      	ldrh	r3, [r4, #12]
 80176e4:	059b      	lsls	r3, r3, #22
 80176e6:	d4dd      	bmi.n	80176a4 <_fflush_r+0xc>
 80176e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176ea:	f000 f91a 	bl	8017922 <__retarget_lock_release_recursive>
 80176ee:	e7d9      	b.n	80176a4 <_fflush_r+0xc>
 80176f0:	4b05      	ldr	r3, [pc, #20]	; (8017708 <_fflush_r+0x70>)
 80176f2:	429c      	cmp	r4, r3
 80176f4:	d101      	bne.n	80176fa <_fflush_r+0x62>
 80176f6:	68ac      	ldr	r4, [r5, #8]
 80176f8:	e7df      	b.n	80176ba <_fflush_r+0x22>
 80176fa:	4b04      	ldr	r3, [pc, #16]	; (801770c <_fflush_r+0x74>)
 80176fc:	429c      	cmp	r4, r3
 80176fe:	bf08      	it	eq
 8017700:	68ec      	ldreq	r4, [r5, #12]
 8017702:	e7da      	b.n	80176ba <_fflush_r+0x22>
 8017704:	0801ecc0 	.word	0x0801ecc0
 8017708:	0801ece0 	.word	0x0801ece0
 801770c:	0801eca0 	.word	0x0801eca0

08017710 <std>:
 8017710:	2300      	movs	r3, #0
 8017712:	b510      	push	{r4, lr}
 8017714:	4604      	mov	r4, r0
 8017716:	e9c0 3300 	strd	r3, r3, [r0]
 801771a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801771e:	6083      	str	r3, [r0, #8]
 8017720:	8181      	strh	r1, [r0, #12]
 8017722:	6643      	str	r3, [r0, #100]	; 0x64
 8017724:	81c2      	strh	r2, [r0, #14]
 8017726:	6183      	str	r3, [r0, #24]
 8017728:	4619      	mov	r1, r3
 801772a:	2208      	movs	r2, #8
 801772c:	305c      	adds	r0, #92	; 0x5c
 801772e:	f7ff fc05 	bl	8016f3c <memset>
 8017732:	4b05      	ldr	r3, [pc, #20]	; (8017748 <std+0x38>)
 8017734:	6263      	str	r3, [r4, #36]	; 0x24
 8017736:	4b05      	ldr	r3, [pc, #20]	; (801774c <std+0x3c>)
 8017738:	62a3      	str	r3, [r4, #40]	; 0x28
 801773a:	4b05      	ldr	r3, [pc, #20]	; (8017750 <std+0x40>)
 801773c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801773e:	4b05      	ldr	r3, [pc, #20]	; (8017754 <std+0x44>)
 8017740:	6224      	str	r4, [r4, #32]
 8017742:	6323      	str	r3, [r4, #48]	; 0x30
 8017744:	bd10      	pop	{r4, pc}
 8017746:	bf00      	nop
 8017748:	08018405 	.word	0x08018405
 801774c:	08018427 	.word	0x08018427
 8017750:	0801845f 	.word	0x0801845f
 8017754:	08018483 	.word	0x08018483

08017758 <_cleanup_r>:
 8017758:	4901      	ldr	r1, [pc, #4]	; (8017760 <_cleanup_r+0x8>)
 801775a:	f000 b8c1 	b.w	80178e0 <_fwalk_reent>
 801775e:	bf00      	nop
 8017760:	08017699 	.word	0x08017699

08017764 <__sfmoreglue>:
 8017764:	b570      	push	{r4, r5, r6, lr}
 8017766:	1e4a      	subs	r2, r1, #1
 8017768:	2568      	movs	r5, #104	; 0x68
 801776a:	4355      	muls	r5, r2
 801776c:	460e      	mov	r6, r1
 801776e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017772:	f000 f993 	bl	8017a9c <_malloc_r>
 8017776:	4604      	mov	r4, r0
 8017778:	b140      	cbz	r0, 801778c <__sfmoreglue+0x28>
 801777a:	2100      	movs	r1, #0
 801777c:	e9c0 1600 	strd	r1, r6, [r0]
 8017780:	300c      	adds	r0, #12
 8017782:	60a0      	str	r0, [r4, #8]
 8017784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017788:	f7ff fbd8 	bl	8016f3c <memset>
 801778c:	4620      	mov	r0, r4
 801778e:	bd70      	pop	{r4, r5, r6, pc}

08017790 <__sfp_lock_acquire>:
 8017790:	4801      	ldr	r0, [pc, #4]	; (8017798 <__sfp_lock_acquire+0x8>)
 8017792:	f000 b8c5 	b.w	8017920 <__retarget_lock_acquire_recursive>
 8017796:	bf00      	nop
 8017798:	200114f4 	.word	0x200114f4

0801779c <__sfp_lock_release>:
 801779c:	4801      	ldr	r0, [pc, #4]	; (80177a4 <__sfp_lock_release+0x8>)
 801779e:	f000 b8c0 	b.w	8017922 <__retarget_lock_release_recursive>
 80177a2:	bf00      	nop
 80177a4:	200114f4 	.word	0x200114f4

080177a8 <__sinit_lock_acquire>:
 80177a8:	4801      	ldr	r0, [pc, #4]	; (80177b0 <__sinit_lock_acquire+0x8>)
 80177aa:	f000 b8b9 	b.w	8017920 <__retarget_lock_acquire_recursive>
 80177ae:	bf00      	nop
 80177b0:	200114ef 	.word	0x200114ef

080177b4 <__sinit_lock_release>:
 80177b4:	4801      	ldr	r0, [pc, #4]	; (80177bc <__sinit_lock_release+0x8>)
 80177b6:	f000 b8b4 	b.w	8017922 <__retarget_lock_release_recursive>
 80177ba:	bf00      	nop
 80177bc:	200114ef 	.word	0x200114ef

080177c0 <__sinit>:
 80177c0:	b510      	push	{r4, lr}
 80177c2:	4604      	mov	r4, r0
 80177c4:	f7ff fff0 	bl	80177a8 <__sinit_lock_acquire>
 80177c8:	69a3      	ldr	r3, [r4, #24]
 80177ca:	b11b      	cbz	r3, 80177d4 <__sinit+0x14>
 80177cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177d0:	f7ff bff0 	b.w	80177b4 <__sinit_lock_release>
 80177d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80177d8:	6523      	str	r3, [r4, #80]	; 0x50
 80177da:	4b13      	ldr	r3, [pc, #76]	; (8017828 <__sinit+0x68>)
 80177dc:	4a13      	ldr	r2, [pc, #76]	; (801782c <__sinit+0x6c>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80177e2:	42a3      	cmp	r3, r4
 80177e4:	bf04      	itt	eq
 80177e6:	2301      	moveq	r3, #1
 80177e8:	61a3      	streq	r3, [r4, #24]
 80177ea:	4620      	mov	r0, r4
 80177ec:	f000 f820 	bl	8017830 <__sfp>
 80177f0:	6060      	str	r0, [r4, #4]
 80177f2:	4620      	mov	r0, r4
 80177f4:	f000 f81c 	bl	8017830 <__sfp>
 80177f8:	60a0      	str	r0, [r4, #8]
 80177fa:	4620      	mov	r0, r4
 80177fc:	f000 f818 	bl	8017830 <__sfp>
 8017800:	2200      	movs	r2, #0
 8017802:	60e0      	str	r0, [r4, #12]
 8017804:	2104      	movs	r1, #4
 8017806:	6860      	ldr	r0, [r4, #4]
 8017808:	f7ff ff82 	bl	8017710 <std>
 801780c:	68a0      	ldr	r0, [r4, #8]
 801780e:	2201      	movs	r2, #1
 8017810:	2109      	movs	r1, #9
 8017812:	f7ff ff7d 	bl	8017710 <std>
 8017816:	68e0      	ldr	r0, [r4, #12]
 8017818:	2202      	movs	r2, #2
 801781a:	2112      	movs	r1, #18
 801781c:	f7ff ff78 	bl	8017710 <std>
 8017820:	2301      	movs	r3, #1
 8017822:	61a3      	str	r3, [r4, #24]
 8017824:	e7d2      	b.n	80177cc <__sinit+0xc>
 8017826:	bf00      	nop
 8017828:	0801ebe8 	.word	0x0801ebe8
 801782c:	08017759 	.word	0x08017759

08017830 <__sfp>:
 8017830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017832:	4607      	mov	r7, r0
 8017834:	f7ff ffac 	bl	8017790 <__sfp_lock_acquire>
 8017838:	4b1e      	ldr	r3, [pc, #120]	; (80178b4 <__sfp+0x84>)
 801783a:	681e      	ldr	r6, [r3, #0]
 801783c:	69b3      	ldr	r3, [r6, #24]
 801783e:	b913      	cbnz	r3, 8017846 <__sfp+0x16>
 8017840:	4630      	mov	r0, r6
 8017842:	f7ff ffbd 	bl	80177c0 <__sinit>
 8017846:	3648      	adds	r6, #72	; 0x48
 8017848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801784c:	3b01      	subs	r3, #1
 801784e:	d503      	bpl.n	8017858 <__sfp+0x28>
 8017850:	6833      	ldr	r3, [r6, #0]
 8017852:	b30b      	cbz	r3, 8017898 <__sfp+0x68>
 8017854:	6836      	ldr	r6, [r6, #0]
 8017856:	e7f7      	b.n	8017848 <__sfp+0x18>
 8017858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801785c:	b9d5      	cbnz	r5, 8017894 <__sfp+0x64>
 801785e:	4b16      	ldr	r3, [pc, #88]	; (80178b8 <__sfp+0x88>)
 8017860:	60e3      	str	r3, [r4, #12]
 8017862:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017866:	6665      	str	r5, [r4, #100]	; 0x64
 8017868:	f000 f859 	bl	801791e <__retarget_lock_init_recursive>
 801786c:	f7ff ff96 	bl	801779c <__sfp_lock_release>
 8017870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017878:	6025      	str	r5, [r4, #0]
 801787a:	61a5      	str	r5, [r4, #24]
 801787c:	2208      	movs	r2, #8
 801787e:	4629      	mov	r1, r5
 8017880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017884:	f7ff fb5a 	bl	8016f3c <memset>
 8017888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801788c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017890:	4620      	mov	r0, r4
 8017892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017894:	3468      	adds	r4, #104	; 0x68
 8017896:	e7d9      	b.n	801784c <__sfp+0x1c>
 8017898:	2104      	movs	r1, #4
 801789a:	4638      	mov	r0, r7
 801789c:	f7ff ff62 	bl	8017764 <__sfmoreglue>
 80178a0:	4604      	mov	r4, r0
 80178a2:	6030      	str	r0, [r6, #0]
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d1d5      	bne.n	8017854 <__sfp+0x24>
 80178a8:	f7ff ff78 	bl	801779c <__sfp_lock_release>
 80178ac:	230c      	movs	r3, #12
 80178ae:	603b      	str	r3, [r7, #0]
 80178b0:	e7ee      	b.n	8017890 <__sfp+0x60>
 80178b2:	bf00      	nop
 80178b4:	0801ebe8 	.word	0x0801ebe8
 80178b8:	ffff0001 	.word	0xffff0001

080178bc <fiprintf>:
 80178bc:	b40e      	push	{r1, r2, r3}
 80178be:	b503      	push	{r0, r1, lr}
 80178c0:	4601      	mov	r1, r0
 80178c2:	ab03      	add	r3, sp, #12
 80178c4:	4805      	ldr	r0, [pc, #20]	; (80178dc <fiprintf+0x20>)
 80178c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80178ca:	6800      	ldr	r0, [r0, #0]
 80178cc:	9301      	str	r3, [sp, #4]
 80178ce:	f000 fac5 	bl	8017e5c <_vfiprintf_r>
 80178d2:	b002      	add	sp, #8
 80178d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80178d8:	b003      	add	sp, #12
 80178da:	4770      	bx	lr
 80178dc:	2000014c 	.word	0x2000014c

080178e0 <_fwalk_reent>:
 80178e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178e4:	4606      	mov	r6, r0
 80178e6:	4688      	mov	r8, r1
 80178e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80178ec:	2700      	movs	r7, #0
 80178ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80178f2:	f1b9 0901 	subs.w	r9, r9, #1
 80178f6:	d505      	bpl.n	8017904 <_fwalk_reent+0x24>
 80178f8:	6824      	ldr	r4, [r4, #0]
 80178fa:	2c00      	cmp	r4, #0
 80178fc:	d1f7      	bne.n	80178ee <_fwalk_reent+0xe>
 80178fe:	4638      	mov	r0, r7
 8017900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017904:	89ab      	ldrh	r3, [r5, #12]
 8017906:	2b01      	cmp	r3, #1
 8017908:	d907      	bls.n	801791a <_fwalk_reent+0x3a>
 801790a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801790e:	3301      	adds	r3, #1
 8017910:	d003      	beq.n	801791a <_fwalk_reent+0x3a>
 8017912:	4629      	mov	r1, r5
 8017914:	4630      	mov	r0, r6
 8017916:	47c0      	blx	r8
 8017918:	4307      	orrs	r7, r0
 801791a:	3568      	adds	r5, #104	; 0x68
 801791c:	e7e9      	b.n	80178f2 <_fwalk_reent+0x12>

0801791e <__retarget_lock_init_recursive>:
 801791e:	4770      	bx	lr

08017920 <__retarget_lock_acquire_recursive>:
 8017920:	4770      	bx	lr

08017922 <__retarget_lock_release_recursive>:
 8017922:	4770      	bx	lr

08017924 <__swhatbuf_r>:
 8017924:	b570      	push	{r4, r5, r6, lr}
 8017926:	460e      	mov	r6, r1
 8017928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801792c:	2900      	cmp	r1, #0
 801792e:	b096      	sub	sp, #88	; 0x58
 8017930:	4614      	mov	r4, r2
 8017932:	461d      	mov	r5, r3
 8017934:	da07      	bge.n	8017946 <__swhatbuf_r+0x22>
 8017936:	2300      	movs	r3, #0
 8017938:	602b      	str	r3, [r5, #0]
 801793a:	89b3      	ldrh	r3, [r6, #12]
 801793c:	061a      	lsls	r2, r3, #24
 801793e:	d410      	bmi.n	8017962 <__swhatbuf_r+0x3e>
 8017940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017944:	e00e      	b.n	8017964 <__swhatbuf_r+0x40>
 8017946:	466a      	mov	r2, sp
 8017948:	f000 fdca 	bl	80184e0 <_fstat_r>
 801794c:	2800      	cmp	r0, #0
 801794e:	dbf2      	blt.n	8017936 <__swhatbuf_r+0x12>
 8017950:	9a01      	ldr	r2, [sp, #4]
 8017952:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017956:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801795a:	425a      	negs	r2, r3
 801795c:	415a      	adcs	r2, r3
 801795e:	602a      	str	r2, [r5, #0]
 8017960:	e7ee      	b.n	8017940 <__swhatbuf_r+0x1c>
 8017962:	2340      	movs	r3, #64	; 0x40
 8017964:	2000      	movs	r0, #0
 8017966:	6023      	str	r3, [r4, #0]
 8017968:	b016      	add	sp, #88	; 0x58
 801796a:	bd70      	pop	{r4, r5, r6, pc}

0801796c <__smakebuf_r>:
 801796c:	898b      	ldrh	r3, [r1, #12]
 801796e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017970:	079d      	lsls	r5, r3, #30
 8017972:	4606      	mov	r6, r0
 8017974:	460c      	mov	r4, r1
 8017976:	d507      	bpl.n	8017988 <__smakebuf_r+0x1c>
 8017978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801797c:	6023      	str	r3, [r4, #0]
 801797e:	6123      	str	r3, [r4, #16]
 8017980:	2301      	movs	r3, #1
 8017982:	6163      	str	r3, [r4, #20]
 8017984:	b002      	add	sp, #8
 8017986:	bd70      	pop	{r4, r5, r6, pc}
 8017988:	ab01      	add	r3, sp, #4
 801798a:	466a      	mov	r2, sp
 801798c:	f7ff ffca 	bl	8017924 <__swhatbuf_r>
 8017990:	9900      	ldr	r1, [sp, #0]
 8017992:	4605      	mov	r5, r0
 8017994:	4630      	mov	r0, r6
 8017996:	f000 f881 	bl	8017a9c <_malloc_r>
 801799a:	b948      	cbnz	r0, 80179b0 <__smakebuf_r+0x44>
 801799c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179a0:	059a      	lsls	r2, r3, #22
 80179a2:	d4ef      	bmi.n	8017984 <__smakebuf_r+0x18>
 80179a4:	f023 0303 	bic.w	r3, r3, #3
 80179a8:	f043 0302 	orr.w	r3, r3, #2
 80179ac:	81a3      	strh	r3, [r4, #12]
 80179ae:	e7e3      	b.n	8017978 <__smakebuf_r+0xc>
 80179b0:	4b0d      	ldr	r3, [pc, #52]	; (80179e8 <__smakebuf_r+0x7c>)
 80179b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80179b4:	89a3      	ldrh	r3, [r4, #12]
 80179b6:	6020      	str	r0, [r4, #0]
 80179b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179bc:	81a3      	strh	r3, [r4, #12]
 80179be:	9b00      	ldr	r3, [sp, #0]
 80179c0:	6163      	str	r3, [r4, #20]
 80179c2:	9b01      	ldr	r3, [sp, #4]
 80179c4:	6120      	str	r0, [r4, #16]
 80179c6:	b15b      	cbz	r3, 80179e0 <__smakebuf_r+0x74>
 80179c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179cc:	4630      	mov	r0, r6
 80179ce:	f000 fd99 	bl	8018504 <_isatty_r>
 80179d2:	b128      	cbz	r0, 80179e0 <__smakebuf_r+0x74>
 80179d4:	89a3      	ldrh	r3, [r4, #12]
 80179d6:	f023 0303 	bic.w	r3, r3, #3
 80179da:	f043 0301 	orr.w	r3, r3, #1
 80179de:	81a3      	strh	r3, [r4, #12]
 80179e0:	89a0      	ldrh	r0, [r4, #12]
 80179e2:	4305      	orrs	r5, r0
 80179e4:	81a5      	strh	r5, [r4, #12]
 80179e6:	e7cd      	b.n	8017984 <__smakebuf_r+0x18>
 80179e8:	08017759 	.word	0x08017759

080179ec <malloc>:
 80179ec:	4b02      	ldr	r3, [pc, #8]	; (80179f8 <malloc+0xc>)
 80179ee:	4601      	mov	r1, r0
 80179f0:	6818      	ldr	r0, [r3, #0]
 80179f2:	f000 b853 	b.w	8017a9c <_malloc_r>
 80179f6:	bf00      	nop
 80179f8:	2000014c 	.word	0x2000014c

080179fc <_free_r>:
 80179fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179fe:	2900      	cmp	r1, #0
 8017a00:	d048      	beq.n	8017a94 <_free_r+0x98>
 8017a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a06:	9001      	str	r0, [sp, #4]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8017a0e:	bfb8      	it	lt
 8017a10:	18e4      	addlt	r4, r4, r3
 8017a12:	f000 fd99 	bl	8018548 <__malloc_lock>
 8017a16:	4a20      	ldr	r2, [pc, #128]	; (8017a98 <_free_r+0x9c>)
 8017a18:	9801      	ldr	r0, [sp, #4]
 8017a1a:	6813      	ldr	r3, [r2, #0]
 8017a1c:	4615      	mov	r5, r2
 8017a1e:	b933      	cbnz	r3, 8017a2e <_free_r+0x32>
 8017a20:	6063      	str	r3, [r4, #4]
 8017a22:	6014      	str	r4, [r2, #0]
 8017a24:	b003      	add	sp, #12
 8017a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a2a:	f000 bd93 	b.w	8018554 <__malloc_unlock>
 8017a2e:	42a3      	cmp	r3, r4
 8017a30:	d90b      	bls.n	8017a4a <_free_r+0x4e>
 8017a32:	6821      	ldr	r1, [r4, #0]
 8017a34:	1862      	adds	r2, r4, r1
 8017a36:	4293      	cmp	r3, r2
 8017a38:	bf04      	itt	eq
 8017a3a:	681a      	ldreq	r2, [r3, #0]
 8017a3c:	685b      	ldreq	r3, [r3, #4]
 8017a3e:	6063      	str	r3, [r4, #4]
 8017a40:	bf04      	itt	eq
 8017a42:	1852      	addeq	r2, r2, r1
 8017a44:	6022      	streq	r2, [r4, #0]
 8017a46:	602c      	str	r4, [r5, #0]
 8017a48:	e7ec      	b.n	8017a24 <_free_r+0x28>
 8017a4a:	461a      	mov	r2, r3
 8017a4c:	685b      	ldr	r3, [r3, #4]
 8017a4e:	b10b      	cbz	r3, 8017a54 <_free_r+0x58>
 8017a50:	42a3      	cmp	r3, r4
 8017a52:	d9fa      	bls.n	8017a4a <_free_r+0x4e>
 8017a54:	6811      	ldr	r1, [r2, #0]
 8017a56:	1855      	adds	r5, r2, r1
 8017a58:	42a5      	cmp	r5, r4
 8017a5a:	d10b      	bne.n	8017a74 <_free_r+0x78>
 8017a5c:	6824      	ldr	r4, [r4, #0]
 8017a5e:	4421      	add	r1, r4
 8017a60:	1854      	adds	r4, r2, r1
 8017a62:	42a3      	cmp	r3, r4
 8017a64:	6011      	str	r1, [r2, #0]
 8017a66:	d1dd      	bne.n	8017a24 <_free_r+0x28>
 8017a68:	681c      	ldr	r4, [r3, #0]
 8017a6a:	685b      	ldr	r3, [r3, #4]
 8017a6c:	6053      	str	r3, [r2, #4]
 8017a6e:	4421      	add	r1, r4
 8017a70:	6011      	str	r1, [r2, #0]
 8017a72:	e7d7      	b.n	8017a24 <_free_r+0x28>
 8017a74:	d902      	bls.n	8017a7c <_free_r+0x80>
 8017a76:	230c      	movs	r3, #12
 8017a78:	6003      	str	r3, [r0, #0]
 8017a7a:	e7d3      	b.n	8017a24 <_free_r+0x28>
 8017a7c:	6825      	ldr	r5, [r4, #0]
 8017a7e:	1961      	adds	r1, r4, r5
 8017a80:	428b      	cmp	r3, r1
 8017a82:	bf04      	itt	eq
 8017a84:	6819      	ldreq	r1, [r3, #0]
 8017a86:	685b      	ldreq	r3, [r3, #4]
 8017a88:	6063      	str	r3, [r4, #4]
 8017a8a:	bf04      	itt	eq
 8017a8c:	1949      	addeq	r1, r1, r5
 8017a8e:	6021      	streq	r1, [r4, #0]
 8017a90:	6054      	str	r4, [r2, #4]
 8017a92:	e7c7      	b.n	8017a24 <_free_r+0x28>
 8017a94:	b003      	add	sp, #12
 8017a96:	bd30      	pop	{r4, r5, pc}
 8017a98:	200017e4 	.word	0x200017e4

08017a9c <_malloc_r>:
 8017a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a9e:	1ccd      	adds	r5, r1, #3
 8017aa0:	f025 0503 	bic.w	r5, r5, #3
 8017aa4:	3508      	adds	r5, #8
 8017aa6:	2d0c      	cmp	r5, #12
 8017aa8:	bf38      	it	cc
 8017aaa:	250c      	movcc	r5, #12
 8017aac:	2d00      	cmp	r5, #0
 8017aae:	4606      	mov	r6, r0
 8017ab0:	db01      	blt.n	8017ab6 <_malloc_r+0x1a>
 8017ab2:	42a9      	cmp	r1, r5
 8017ab4:	d903      	bls.n	8017abe <_malloc_r+0x22>
 8017ab6:	230c      	movs	r3, #12
 8017ab8:	6033      	str	r3, [r6, #0]
 8017aba:	2000      	movs	r0, #0
 8017abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017abe:	f000 fd43 	bl	8018548 <__malloc_lock>
 8017ac2:	4921      	ldr	r1, [pc, #132]	; (8017b48 <_malloc_r+0xac>)
 8017ac4:	680a      	ldr	r2, [r1, #0]
 8017ac6:	4614      	mov	r4, r2
 8017ac8:	b99c      	cbnz	r4, 8017af2 <_malloc_r+0x56>
 8017aca:	4f20      	ldr	r7, [pc, #128]	; (8017b4c <_malloc_r+0xb0>)
 8017acc:	683b      	ldr	r3, [r7, #0]
 8017ace:	b923      	cbnz	r3, 8017ada <_malloc_r+0x3e>
 8017ad0:	4621      	mov	r1, r4
 8017ad2:	4630      	mov	r0, r6
 8017ad4:	f000 fc86 	bl	80183e4 <_sbrk_r>
 8017ad8:	6038      	str	r0, [r7, #0]
 8017ada:	4629      	mov	r1, r5
 8017adc:	4630      	mov	r0, r6
 8017ade:	f000 fc81 	bl	80183e4 <_sbrk_r>
 8017ae2:	1c43      	adds	r3, r0, #1
 8017ae4:	d123      	bne.n	8017b2e <_malloc_r+0x92>
 8017ae6:	230c      	movs	r3, #12
 8017ae8:	6033      	str	r3, [r6, #0]
 8017aea:	4630      	mov	r0, r6
 8017aec:	f000 fd32 	bl	8018554 <__malloc_unlock>
 8017af0:	e7e3      	b.n	8017aba <_malloc_r+0x1e>
 8017af2:	6823      	ldr	r3, [r4, #0]
 8017af4:	1b5b      	subs	r3, r3, r5
 8017af6:	d417      	bmi.n	8017b28 <_malloc_r+0x8c>
 8017af8:	2b0b      	cmp	r3, #11
 8017afa:	d903      	bls.n	8017b04 <_malloc_r+0x68>
 8017afc:	6023      	str	r3, [r4, #0]
 8017afe:	441c      	add	r4, r3
 8017b00:	6025      	str	r5, [r4, #0]
 8017b02:	e004      	b.n	8017b0e <_malloc_r+0x72>
 8017b04:	6863      	ldr	r3, [r4, #4]
 8017b06:	42a2      	cmp	r2, r4
 8017b08:	bf0c      	ite	eq
 8017b0a:	600b      	streq	r3, [r1, #0]
 8017b0c:	6053      	strne	r3, [r2, #4]
 8017b0e:	4630      	mov	r0, r6
 8017b10:	f000 fd20 	bl	8018554 <__malloc_unlock>
 8017b14:	f104 000b 	add.w	r0, r4, #11
 8017b18:	1d23      	adds	r3, r4, #4
 8017b1a:	f020 0007 	bic.w	r0, r0, #7
 8017b1e:	1ac2      	subs	r2, r0, r3
 8017b20:	d0cc      	beq.n	8017abc <_malloc_r+0x20>
 8017b22:	1a1b      	subs	r3, r3, r0
 8017b24:	50a3      	str	r3, [r4, r2]
 8017b26:	e7c9      	b.n	8017abc <_malloc_r+0x20>
 8017b28:	4622      	mov	r2, r4
 8017b2a:	6864      	ldr	r4, [r4, #4]
 8017b2c:	e7cc      	b.n	8017ac8 <_malloc_r+0x2c>
 8017b2e:	1cc4      	adds	r4, r0, #3
 8017b30:	f024 0403 	bic.w	r4, r4, #3
 8017b34:	42a0      	cmp	r0, r4
 8017b36:	d0e3      	beq.n	8017b00 <_malloc_r+0x64>
 8017b38:	1a21      	subs	r1, r4, r0
 8017b3a:	4630      	mov	r0, r6
 8017b3c:	f000 fc52 	bl	80183e4 <_sbrk_r>
 8017b40:	3001      	adds	r0, #1
 8017b42:	d1dd      	bne.n	8017b00 <_malloc_r+0x64>
 8017b44:	e7cf      	b.n	8017ae6 <_malloc_r+0x4a>
 8017b46:	bf00      	nop
 8017b48:	200017e4 	.word	0x200017e4
 8017b4c:	200017e8 	.word	0x200017e8

08017b50 <__ssputs_r>:
 8017b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b54:	688e      	ldr	r6, [r1, #8]
 8017b56:	429e      	cmp	r6, r3
 8017b58:	4682      	mov	sl, r0
 8017b5a:	460c      	mov	r4, r1
 8017b5c:	4690      	mov	r8, r2
 8017b5e:	461f      	mov	r7, r3
 8017b60:	d838      	bhi.n	8017bd4 <__ssputs_r+0x84>
 8017b62:	898a      	ldrh	r2, [r1, #12]
 8017b64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017b68:	d032      	beq.n	8017bd0 <__ssputs_r+0x80>
 8017b6a:	6825      	ldr	r5, [r4, #0]
 8017b6c:	6909      	ldr	r1, [r1, #16]
 8017b6e:	eba5 0901 	sub.w	r9, r5, r1
 8017b72:	6965      	ldr	r5, [r4, #20]
 8017b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017b7c:	3301      	adds	r3, #1
 8017b7e:	444b      	add	r3, r9
 8017b80:	106d      	asrs	r5, r5, #1
 8017b82:	429d      	cmp	r5, r3
 8017b84:	bf38      	it	cc
 8017b86:	461d      	movcc	r5, r3
 8017b88:	0553      	lsls	r3, r2, #21
 8017b8a:	d531      	bpl.n	8017bf0 <__ssputs_r+0xa0>
 8017b8c:	4629      	mov	r1, r5
 8017b8e:	f7ff ff85 	bl	8017a9c <_malloc_r>
 8017b92:	4606      	mov	r6, r0
 8017b94:	b950      	cbnz	r0, 8017bac <__ssputs_r+0x5c>
 8017b96:	230c      	movs	r3, #12
 8017b98:	f8ca 3000 	str.w	r3, [sl]
 8017b9c:	89a3      	ldrh	r3, [r4, #12]
 8017b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ba2:	81a3      	strh	r3, [r4, #12]
 8017ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bac:	6921      	ldr	r1, [r4, #16]
 8017bae:	464a      	mov	r2, r9
 8017bb0:	f7ff f99c 	bl	8016eec <memcpy>
 8017bb4:	89a3      	ldrh	r3, [r4, #12]
 8017bb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bbe:	81a3      	strh	r3, [r4, #12]
 8017bc0:	6126      	str	r6, [r4, #16]
 8017bc2:	6165      	str	r5, [r4, #20]
 8017bc4:	444e      	add	r6, r9
 8017bc6:	eba5 0509 	sub.w	r5, r5, r9
 8017bca:	6026      	str	r6, [r4, #0]
 8017bcc:	60a5      	str	r5, [r4, #8]
 8017bce:	463e      	mov	r6, r7
 8017bd0:	42be      	cmp	r6, r7
 8017bd2:	d900      	bls.n	8017bd6 <__ssputs_r+0x86>
 8017bd4:	463e      	mov	r6, r7
 8017bd6:	4632      	mov	r2, r6
 8017bd8:	6820      	ldr	r0, [r4, #0]
 8017bda:	4641      	mov	r1, r8
 8017bdc:	f7ff f994 	bl	8016f08 <memmove>
 8017be0:	68a3      	ldr	r3, [r4, #8]
 8017be2:	6822      	ldr	r2, [r4, #0]
 8017be4:	1b9b      	subs	r3, r3, r6
 8017be6:	4432      	add	r2, r6
 8017be8:	60a3      	str	r3, [r4, #8]
 8017bea:	6022      	str	r2, [r4, #0]
 8017bec:	2000      	movs	r0, #0
 8017bee:	e7db      	b.n	8017ba8 <__ssputs_r+0x58>
 8017bf0:	462a      	mov	r2, r5
 8017bf2:	f000 fcb5 	bl	8018560 <_realloc_r>
 8017bf6:	4606      	mov	r6, r0
 8017bf8:	2800      	cmp	r0, #0
 8017bfa:	d1e1      	bne.n	8017bc0 <__ssputs_r+0x70>
 8017bfc:	6921      	ldr	r1, [r4, #16]
 8017bfe:	4650      	mov	r0, sl
 8017c00:	f7ff fefc 	bl	80179fc <_free_r>
 8017c04:	e7c7      	b.n	8017b96 <__ssputs_r+0x46>
	...

08017c08 <_svfiprintf_r>:
 8017c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c0c:	4698      	mov	r8, r3
 8017c0e:	898b      	ldrh	r3, [r1, #12]
 8017c10:	061b      	lsls	r3, r3, #24
 8017c12:	b09d      	sub	sp, #116	; 0x74
 8017c14:	4607      	mov	r7, r0
 8017c16:	460d      	mov	r5, r1
 8017c18:	4614      	mov	r4, r2
 8017c1a:	d50e      	bpl.n	8017c3a <_svfiprintf_r+0x32>
 8017c1c:	690b      	ldr	r3, [r1, #16]
 8017c1e:	b963      	cbnz	r3, 8017c3a <_svfiprintf_r+0x32>
 8017c20:	2140      	movs	r1, #64	; 0x40
 8017c22:	f7ff ff3b 	bl	8017a9c <_malloc_r>
 8017c26:	6028      	str	r0, [r5, #0]
 8017c28:	6128      	str	r0, [r5, #16]
 8017c2a:	b920      	cbnz	r0, 8017c36 <_svfiprintf_r+0x2e>
 8017c2c:	230c      	movs	r3, #12
 8017c2e:	603b      	str	r3, [r7, #0]
 8017c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c34:	e0d1      	b.n	8017dda <_svfiprintf_r+0x1d2>
 8017c36:	2340      	movs	r3, #64	; 0x40
 8017c38:	616b      	str	r3, [r5, #20]
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c3e:	2320      	movs	r3, #32
 8017c40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c48:	2330      	movs	r3, #48	; 0x30
 8017c4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017df4 <_svfiprintf_r+0x1ec>
 8017c4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c52:	f04f 0901 	mov.w	r9, #1
 8017c56:	4623      	mov	r3, r4
 8017c58:	469a      	mov	sl, r3
 8017c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c5e:	b10a      	cbz	r2, 8017c64 <_svfiprintf_r+0x5c>
 8017c60:	2a25      	cmp	r2, #37	; 0x25
 8017c62:	d1f9      	bne.n	8017c58 <_svfiprintf_r+0x50>
 8017c64:	ebba 0b04 	subs.w	fp, sl, r4
 8017c68:	d00b      	beq.n	8017c82 <_svfiprintf_r+0x7a>
 8017c6a:	465b      	mov	r3, fp
 8017c6c:	4622      	mov	r2, r4
 8017c6e:	4629      	mov	r1, r5
 8017c70:	4638      	mov	r0, r7
 8017c72:	f7ff ff6d 	bl	8017b50 <__ssputs_r>
 8017c76:	3001      	adds	r0, #1
 8017c78:	f000 80aa 	beq.w	8017dd0 <_svfiprintf_r+0x1c8>
 8017c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c7e:	445a      	add	r2, fp
 8017c80:	9209      	str	r2, [sp, #36]	; 0x24
 8017c82:	f89a 3000 	ldrb.w	r3, [sl]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	f000 80a2 	beq.w	8017dd0 <_svfiprintf_r+0x1c8>
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c96:	f10a 0a01 	add.w	sl, sl, #1
 8017c9a:	9304      	str	r3, [sp, #16]
 8017c9c:	9307      	str	r3, [sp, #28]
 8017c9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8017ca4:	4654      	mov	r4, sl
 8017ca6:	2205      	movs	r2, #5
 8017ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cac:	4851      	ldr	r0, [pc, #324]	; (8017df4 <_svfiprintf_r+0x1ec>)
 8017cae:	f7e8 faa7 	bl	8000200 <memchr>
 8017cb2:	9a04      	ldr	r2, [sp, #16]
 8017cb4:	b9d8      	cbnz	r0, 8017cee <_svfiprintf_r+0xe6>
 8017cb6:	06d0      	lsls	r0, r2, #27
 8017cb8:	bf44      	itt	mi
 8017cba:	2320      	movmi	r3, #32
 8017cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cc0:	0711      	lsls	r1, r2, #28
 8017cc2:	bf44      	itt	mi
 8017cc4:	232b      	movmi	r3, #43	; 0x2b
 8017cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cca:	f89a 3000 	ldrb.w	r3, [sl]
 8017cce:	2b2a      	cmp	r3, #42	; 0x2a
 8017cd0:	d015      	beq.n	8017cfe <_svfiprintf_r+0xf6>
 8017cd2:	9a07      	ldr	r2, [sp, #28]
 8017cd4:	4654      	mov	r4, sl
 8017cd6:	2000      	movs	r0, #0
 8017cd8:	f04f 0c0a 	mov.w	ip, #10
 8017cdc:	4621      	mov	r1, r4
 8017cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ce2:	3b30      	subs	r3, #48	; 0x30
 8017ce4:	2b09      	cmp	r3, #9
 8017ce6:	d94e      	bls.n	8017d86 <_svfiprintf_r+0x17e>
 8017ce8:	b1b0      	cbz	r0, 8017d18 <_svfiprintf_r+0x110>
 8017cea:	9207      	str	r2, [sp, #28]
 8017cec:	e014      	b.n	8017d18 <_svfiprintf_r+0x110>
 8017cee:	eba0 0308 	sub.w	r3, r0, r8
 8017cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8017cf6:	4313      	orrs	r3, r2
 8017cf8:	9304      	str	r3, [sp, #16]
 8017cfa:	46a2      	mov	sl, r4
 8017cfc:	e7d2      	b.n	8017ca4 <_svfiprintf_r+0x9c>
 8017cfe:	9b03      	ldr	r3, [sp, #12]
 8017d00:	1d19      	adds	r1, r3, #4
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	9103      	str	r1, [sp, #12]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	bfbb      	ittet	lt
 8017d0a:	425b      	neglt	r3, r3
 8017d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8017d10:	9307      	strge	r3, [sp, #28]
 8017d12:	9307      	strlt	r3, [sp, #28]
 8017d14:	bfb8      	it	lt
 8017d16:	9204      	strlt	r2, [sp, #16]
 8017d18:	7823      	ldrb	r3, [r4, #0]
 8017d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8017d1c:	d10c      	bne.n	8017d38 <_svfiprintf_r+0x130>
 8017d1e:	7863      	ldrb	r3, [r4, #1]
 8017d20:	2b2a      	cmp	r3, #42	; 0x2a
 8017d22:	d135      	bne.n	8017d90 <_svfiprintf_r+0x188>
 8017d24:	9b03      	ldr	r3, [sp, #12]
 8017d26:	1d1a      	adds	r2, r3, #4
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	9203      	str	r2, [sp, #12]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	bfb8      	it	lt
 8017d30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017d34:	3402      	adds	r4, #2
 8017d36:	9305      	str	r3, [sp, #20]
 8017d38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017e04 <_svfiprintf_r+0x1fc>
 8017d3c:	7821      	ldrb	r1, [r4, #0]
 8017d3e:	2203      	movs	r2, #3
 8017d40:	4650      	mov	r0, sl
 8017d42:	f7e8 fa5d 	bl	8000200 <memchr>
 8017d46:	b140      	cbz	r0, 8017d5a <_svfiprintf_r+0x152>
 8017d48:	2340      	movs	r3, #64	; 0x40
 8017d4a:	eba0 000a 	sub.w	r0, r0, sl
 8017d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8017d52:	9b04      	ldr	r3, [sp, #16]
 8017d54:	4303      	orrs	r3, r0
 8017d56:	3401      	adds	r4, #1
 8017d58:	9304      	str	r3, [sp, #16]
 8017d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d5e:	4826      	ldr	r0, [pc, #152]	; (8017df8 <_svfiprintf_r+0x1f0>)
 8017d60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d64:	2206      	movs	r2, #6
 8017d66:	f7e8 fa4b 	bl	8000200 <memchr>
 8017d6a:	2800      	cmp	r0, #0
 8017d6c:	d038      	beq.n	8017de0 <_svfiprintf_r+0x1d8>
 8017d6e:	4b23      	ldr	r3, [pc, #140]	; (8017dfc <_svfiprintf_r+0x1f4>)
 8017d70:	bb1b      	cbnz	r3, 8017dba <_svfiprintf_r+0x1b2>
 8017d72:	9b03      	ldr	r3, [sp, #12]
 8017d74:	3307      	adds	r3, #7
 8017d76:	f023 0307 	bic.w	r3, r3, #7
 8017d7a:	3308      	adds	r3, #8
 8017d7c:	9303      	str	r3, [sp, #12]
 8017d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d80:	4433      	add	r3, r6
 8017d82:	9309      	str	r3, [sp, #36]	; 0x24
 8017d84:	e767      	b.n	8017c56 <_svfiprintf_r+0x4e>
 8017d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d8a:	460c      	mov	r4, r1
 8017d8c:	2001      	movs	r0, #1
 8017d8e:	e7a5      	b.n	8017cdc <_svfiprintf_r+0xd4>
 8017d90:	2300      	movs	r3, #0
 8017d92:	3401      	adds	r4, #1
 8017d94:	9305      	str	r3, [sp, #20]
 8017d96:	4619      	mov	r1, r3
 8017d98:	f04f 0c0a 	mov.w	ip, #10
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017da2:	3a30      	subs	r2, #48	; 0x30
 8017da4:	2a09      	cmp	r2, #9
 8017da6:	d903      	bls.n	8017db0 <_svfiprintf_r+0x1a8>
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d0c5      	beq.n	8017d38 <_svfiprintf_r+0x130>
 8017dac:	9105      	str	r1, [sp, #20]
 8017dae:	e7c3      	b.n	8017d38 <_svfiprintf_r+0x130>
 8017db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8017db4:	4604      	mov	r4, r0
 8017db6:	2301      	movs	r3, #1
 8017db8:	e7f0      	b.n	8017d9c <_svfiprintf_r+0x194>
 8017dba:	ab03      	add	r3, sp, #12
 8017dbc:	9300      	str	r3, [sp, #0]
 8017dbe:	462a      	mov	r2, r5
 8017dc0:	4b0f      	ldr	r3, [pc, #60]	; (8017e00 <_svfiprintf_r+0x1f8>)
 8017dc2:	a904      	add	r1, sp, #16
 8017dc4:	4638      	mov	r0, r7
 8017dc6:	f3af 8000 	nop.w
 8017dca:	1c42      	adds	r2, r0, #1
 8017dcc:	4606      	mov	r6, r0
 8017dce:	d1d6      	bne.n	8017d7e <_svfiprintf_r+0x176>
 8017dd0:	89ab      	ldrh	r3, [r5, #12]
 8017dd2:	065b      	lsls	r3, r3, #25
 8017dd4:	f53f af2c 	bmi.w	8017c30 <_svfiprintf_r+0x28>
 8017dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017dda:	b01d      	add	sp, #116	; 0x74
 8017ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de0:	ab03      	add	r3, sp, #12
 8017de2:	9300      	str	r3, [sp, #0]
 8017de4:	462a      	mov	r2, r5
 8017de6:	4b06      	ldr	r3, [pc, #24]	; (8017e00 <_svfiprintf_r+0x1f8>)
 8017de8:	a904      	add	r1, sp, #16
 8017dea:	4638      	mov	r0, r7
 8017dec:	f000 f9d4 	bl	8018198 <_printf_i>
 8017df0:	e7eb      	b.n	8017dca <_svfiprintf_r+0x1c2>
 8017df2:	bf00      	nop
 8017df4:	0801ed00 	.word	0x0801ed00
 8017df8:	0801ed0a 	.word	0x0801ed0a
 8017dfc:	00000000 	.word	0x00000000
 8017e00:	08017b51 	.word	0x08017b51
 8017e04:	0801ed06 	.word	0x0801ed06

08017e08 <__sfputc_r>:
 8017e08:	6893      	ldr	r3, [r2, #8]
 8017e0a:	3b01      	subs	r3, #1
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	b410      	push	{r4}
 8017e10:	6093      	str	r3, [r2, #8]
 8017e12:	da08      	bge.n	8017e26 <__sfputc_r+0x1e>
 8017e14:	6994      	ldr	r4, [r2, #24]
 8017e16:	42a3      	cmp	r3, r4
 8017e18:	db01      	blt.n	8017e1e <__sfputc_r+0x16>
 8017e1a:	290a      	cmp	r1, #10
 8017e1c:	d103      	bne.n	8017e26 <__sfputc_r+0x1e>
 8017e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e22:	f7ff bacf 	b.w	80173c4 <__swbuf_r>
 8017e26:	6813      	ldr	r3, [r2, #0]
 8017e28:	1c58      	adds	r0, r3, #1
 8017e2a:	6010      	str	r0, [r2, #0]
 8017e2c:	7019      	strb	r1, [r3, #0]
 8017e2e:	4608      	mov	r0, r1
 8017e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e34:	4770      	bx	lr

08017e36 <__sfputs_r>:
 8017e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e38:	4606      	mov	r6, r0
 8017e3a:	460f      	mov	r7, r1
 8017e3c:	4614      	mov	r4, r2
 8017e3e:	18d5      	adds	r5, r2, r3
 8017e40:	42ac      	cmp	r4, r5
 8017e42:	d101      	bne.n	8017e48 <__sfputs_r+0x12>
 8017e44:	2000      	movs	r0, #0
 8017e46:	e007      	b.n	8017e58 <__sfputs_r+0x22>
 8017e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e4c:	463a      	mov	r2, r7
 8017e4e:	4630      	mov	r0, r6
 8017e50:	f7ff ffda 	bl	8017e08 <__sfputc_r>
 8017e54:	1c43      	adds	r3, r0, #1
 8017e56:	d1f3      	bne.n	8017e40 <__sfputs_r+0xa>
 8017e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017e5c <_vfiprintf_r>:
 8017e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e60:	460d      	mov	r5, r1
 8017e62:	b09d      	sub	sp, #116	; 0x74
 8017e64:	4614      	mov	r4, r2
 8017e66:	4698      	mov	r8, r3
 8017e68:	4606      	mov	r6, r0
 8017e6a:	b118      	cbz	r0, 8017e74 <_vfiprintf_r+0x18>
 8017e6c:	6983      	ldr	r3, [r0, #24]
 8017e6e:	b90b      	cbnz	r3, 8017e74 <_vfiprintf_r+0x18>
 8017e70:	f7ff fca6 	bl	80177c0 <__sinit>
 8017e74:	4b89      	ldr	r3, [pc, #548]	; (801809c <_vfiprintf_r+0x240>)
 8017e76:	429d      	cmp	r5, r3
 8017e78:	d11b      	bne.n	8017eb2 <_vfiprintf_r+0x56>
 8017e7a:	6875      	ldr	r5, [r6, #4]
 8017e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e7e:	07d9      	lsls	r1, r3, #31
 8017e80:	d405      	bmi.n	8017e8e <_vfiprintf_r+0x32>
 8017e82:	89ab      	ldrh	r3, [r5, #12]
 8017e84:	059a      	lsls	r2, r3, #22
 8017e86:	d402      	bmi.n	8017e8e <_vfiprintf_r+0x32>
 8017e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e8a:	f7ff fd49 	bl	8017920 <__retarget_lock_acquire_recursive>
 8017e8e:	89ab      	ldrh	r3, [r5, #12]
 8017e90:	071b      	lsls	r3, r3, #28
 8017e92:	d501      	bpl.n	8017e98 <_vfiprintf_r+0x3c>
 8017e94:	692b      	ldr	r3, [r5, #16]
 8017e96:	b9eb      	cbnz	r3, 8017ed4 <_vfiprintf_r+0x78>
 8017e98:	4629      	mov	r1, r5
 8017e9a:	4630      	mov	r0, r6
 8017e9c:	f7ff fae4 	bl	8017468 <__swsetup_r>
 8017ea0:	b1c0      	cbz	r0, 8017ed4 <_vfiprintf_r+0x78>
 8017ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ea4:	07dc      	lsls	r4, r3, #31
 8017ea6:	d50e      	bpl.n	8017ec6 <_vfiprintf_r+0x6a>
 8017ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017eac:	b01d      	add	sp, #116	; 0x74
 8017eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eb2:	4b7b      	ldr	r3, [pc, #492]	; (80180a0 <_vfiprintf_r+0x244>)
 8017eb4:	429d      	cmp	r5, r3
 8017eb6:	d101      	bne.n	8017ebc <_vfiprintf_r+0x60>
 8017eb8:	68b5      	ldr	r5, [r6, #8]
 8017eba:	e7df      	b.n	8017e7c <_vfiprintf_r+0x20>
 8017ebc:	4b79      	ldr	r3, [pc, #484]	; (80180a4 <_vfiprintf_r+0x248>)
 8017ebe:	429d      	cmp	r5, r3
 8017ec0:	bf08      	it	eq
 8017ec2:	68f5      	ldreq	r5, [r6, #12]
 8017ec4:	e7da      	b.n	8017e7c <_vfiprintf_r+0x20>
 8017ec6:	89ab      	ldrh	r3, [r5, #12]
 8017ec8:	0598      	lsls	r0, r3, #22
 8017eca:	d4ed      	bmi.n	8017ea8 <_vfiprintf_r+0x4c>
 8017ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ece:	f7ff fd28 	bl	8017922 <__retarget_lock_release_recursive>
 8017ed2:	e7e9      	b.n	8017ea8 <_vfiprintf_r+0x4c>
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8017ed8:	2320      	movs	r3, #32
 8017eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ee2:	2330      	movs	r3, #48	; 0x30
 8017ee4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80180a8 <_vfiprintf_r+0x24c>
 8017ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017eec:	f04f 0901 	mov.w	r9, #1
 8017ef0:	4623      	mov	r3, r4
 8017ef2:	469a      	mov	sl, r3
 8017ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ef8:	b10a      	cbz	r2, 8017efe <_vfiprintf_r+0xa2>
 8017efa:	2a25      	cmp	r2, #37	; 0x25
 8017efc:	d1f9      	bne.n	8017ef2 <_vfiprintf_r+0x96>
 8017efe:	ebba 0b04 	subs.w	fp, sl, r4
 8017f02:	d00b      	beq.n	8017f1c <_vfiprintf_r+0xc0>
 8017f04:	465b      	mov	r3, fp
 8017f06:	4622      	mov	r2, r4
 8017f08:	4629      	mov	r1, r5
 8017f0a:	4630      	mov	r0, r6
 8017f0c:	f7ff ff93 	bl	8017e36 <__sfputs_r>
 8017f10:	3001      	adds	r0, #1
 8017f12:	f000 80aa 	beq.w	801806a <_vfiprintf_r+0x20e>
 8017f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f18:	445a      	add	r2, fp
 8017f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8017f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	f000 80a2 	beq.w	801806a <_vfiprintf_r+0x20e>
 8017f26:	2300      	movs	r3, #0
 8017f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f30:	f10a 0a01 	add.w	sl, sl, #1
 8017f34:	9304      	str	r3, [sp, #16]
 8017f36:	9307      	str	r3, [sp, #28]
 8017f38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8017f3e:	4654      	mov	r4, sl
 8017f40:	2205      	movs	r2, #5
 8017f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f46:	4858      	ldr	r0, [pc, #352]	; (80180a8 <_vfiprintf_r+0x24c>)
 8017f48:	f7e8 f95a 	bl	8000200 <memchr>
 8017f4c:	9a04      	ldr	r2, [sp, #16]
 8017f4e:	b9d8      	cbnz	r0, 8017f88 <_vfiprintf_r+0x12c>
 8017f50:	06d1      	lsls	r1, r2, #27
 8017f52:	bf44      	itt	mi
 8017f54:	2320      	movmi	r3, #32
 8017f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f5a:	0713      	lsls	r3, r2, #28
 8017f5c:	bf44      	itt	mi
 8017f5e:	232b      	movmi	r3, #43	; 0x2b
 8017f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f64:	f89a 3000 	ldrb.w	r3, [sl]
 8017f68:	2b2a      	cmp	r3, #42	; 0x2a
 8017f6a:	d015      	beq.n	8017f98 <_vfiprintf_r+0x13c>
 8017f6c:	9a07      	ldr	r2, [sp, #28]
 8017f6e:	4654      	mov	r4, sl
 8017f70:	2000      	movs	r0, #0
 8017f72:	f04f 0c0a 	mov.w	ip, #10
 8017f76:	4621      	mov	r1, r4
 8017f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f7c:	3b30      	subs	r3, #48	; 0x30
 8017f7e:	2b09      	cmp	r3, #9
 8017f80:	d94e      	bls.n	8018020 <_vfiprintf_r+0x1c4>
 8017f82:	b1b0      	cbz	r0, 8017fb2 <_vfiprintf_r+0x156>
 8017f84:	9207      	str	r2, [sp, #28]
 8017f86:	e014      	b.n	8017fb2 <_vfiprintf_r+0x156>
 8017f88:	eba0 0308 	sub.w	r3, r0, r8
 8017f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8017f90:	4313      	orrs	r3, r2
 8017f92:	9304      	str	r3, [sp, #16]
 8017f94:	46a2      	mov	sl, r4
 8017f96:	e7d2      	b.n	8017f3e <_vfiprintf_r+0xe2>
 8017f98:	9b03      	ldr	r3, [sp, #12]
 8017f9a:	1d19      	adds	r1, r3, #4
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	9103      	str	r1, [sp, #12]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	bfbb      	ittet	lt
 8017fa4:	425b      	neglt	r3, r3
 8017fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8017faa:	9307      	strge	r3, [sp, #28]
 8017fac:	9307      	strlt	r3, [sp, #28]
 8017fae:	bfb8      	it	lt
 8017fb0:	9204      	strlt	r2, [sp, #16]
 8017fb2:	7823      	ldrb	r3, [r4, #0]
 8017fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8017fb6:	d10c      	bne.n	8017fd2 <_vfiprintf_r+0x176>
 8017fb8:	7863      	ldrb	r3, [r4, #1]
 8017fba:	2b2a      	cmp	r3, #42	; 0x2a
 8017fbc:	d135      	bne.n	801802a <_vfiprintf_r+0x1ce>
 8017fbe:	9b03      	ldr	r3, [sp, #12]
 8017fc0:	1d1a      	adds	r2, r3, #4
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	9203      	str	r2, [sp, #12]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	bfb8      	it	lt
 8017fca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017fce:	3402      	adds	r4, #2
 8017fd0:	9305      	str	r3, [sp, #20]
 8017fd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80180b8 <_vfiprintf_r+0x25c>
 8017fd6:	7821      	ldrb	r1, [r4, #0]
 8017fd8:	2203      	movs	r2, #3
 8017fda:	4650      	mov	r0, sl
 8017fdc:	f7e8 f910 	bl	8000200 <memchr>
 8017fe0:	b140      	cbz	r0, 8017ff4 <_vfiprintf_r+0x198>
 8017fe2:	2340      	movs	r3, #64	; 0x40
 8017fe4:	eba0 000a 	sub.w	r0, r0, sl
 8017fe8:	fa03 f000 	lsl.w	r0, r3, r0
 8017fec:	9b04      	ldr	r3, [sp, #16]
 8017fee:	4303      	orrs	r3, r0
 8017ff0:	3401      	adds	r4, #1
 8017ff2:	9304      	str	r3, [sp, #16]
 8017ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ff8:	482c      	ldr	r0, [pc, #176]	; (80180ac <_vfiprintf_r+0x250>)
 8017ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ffe:	2206      	movs	r2, #6
 8018000:	f7e8 f8fe 	bl	8000200 <memchr>
 8018004:	2800      	cmp	r0, #0
 8018006:	d03f      	beq.n	8018088 <_vfiprintf_r+0x22c>
 8018008:	4b29      	ldr	r3, [pc, #164]	; (80180b0 <_vfiprintf_r+0x254>)
 801800a:	bb1b      	cbnz	r3, 8018054 <_vfiprintf_r+0x1f8>
 801800c:	9b03      	ldr	r3, [sp, #12]
 801800e:	3307      	adds	r3, #7
 8018010:	f023 0307 	bic.w	r3, r3, #7
 8018014:	3308      	adds	r3, #8
 8018016:	9303      	str	r3, [sp, #12]
 8018018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801801a:	443b      	add	r3, r7
 801801c:	9309      	str	r3, [sp, #36]	; 0x24
 801801e:	e767      	b.n	8017ef0 <_vfiprintf_r+0x94>
 8018020:	fb0c 3202 	mla	r2, ip, r2, r3
 8018024:	460c      	mov	r4, r1
 8018026:	2001      	movs	r0, #1
 8018028:	e7a5      	b.n	8017f76 <_vfiprintf_r+0x11a>
 801802a:	2300      	movs	r3, #0
 801802c:	3401      	adds	r4, #1
 801802e:	9305      	str	r3, [sp, #20]
 8018030:	4619      	mov	r1, r3
 8018032:	f04f 0c0a 	mov.w	ip, #10
 8018036:	4620      	mov	r0, r4
 8018038:	f810 2b01 	ldrb.w	r2, [r0], #1
 801803c:	3a30      	subs	r2, #48	; 0x30
 801803e:	2a09      	cmp	r2, #9
 8018040:	d903      	bls.n	801804a <_vfiprintf_r+0x1ee>
 8018042:	2b00      	cmp	r3, #0
 8018044:	d0c5      	beq.n	8017fd2 <_vfiprintf_r+0x176>
 8018046:	9105      	str	r1, [sp, #20]
 8018048:	e7c3      	b.n	8017fd2 <_vfiprintf_r+0x176>
 801804a:	fb0c 2101 	mla	r1, ip, r1, r2
 801804e:	4604      	mov	r4, r0
 8018050:	2301      	movs	r3, #1
 8018052:	e7f0      	b.n	8018036 <_vfiprintf_r+0x1da>
 8018054:	ab03      	add	r3, sp, #12
 8018056:	9300      	str	r3, [sp, #0]
 8018058:	462a      	mov	r2, r5
 801805a:	4b16      	ldr	r3, [pc, #88]	; (80180b4 <_vfiprintf_r+0x258>)
 801805c:	a904      	add	r1, sp, #16
 801805e:	4630      	mov	r0, r6
 8018060:	f3af 8000 	nop.w
 8018064:	4607      	mov	r7, r0
 8018066:	1c78      	adds	r0, r7, #1
 8018068:	d1d6      	bne.n	8018018 <_vfiprintf_r+0x1bc>
 801806a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801806c:	07d9      	lsls	r1, r3, #31
 801806e:	d405      	bmi.n	801807c <_vfiprintf_r+0x220>
 8018070:	89ab      	ldrh	r3, [r5, #12]
 8018072:	059a      	lsls	r2, r3, #22
 8018074:	d402      	bmi.n	801807c <_vfiprintf_r+0x220>
 8018076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018078:	f7ff fc53 	bl	8017922 <__retarget_lock_release_recursive>
 801807c:	89ab      	ldrh	r3, [r5, #12]
 801807e:	065b      	lsls	r3, r3, #25
 8018080:	f53f af12 	bmi.w	8017ea8 <_vfiprintf_r+0x4c>
 8018084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018086:	e711      	b.n	8017eac <_vfiprintf_r+0x50>
 8018088:	ab03      	add	r3, sp, #12
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	462a      	mov	r2, r5
 801808e:	4b09      	ldr	r3, [pc, #36]	; (80180b4 <_vfiprintf_r+0x258>)
 8018090:	a904      	add	r1, sp, #16
 8018092:	4630      	mov	r0, r6
 8018094:	f000 f880 	bl	8018198 <_printf_i>
 8018098:	e7e4      	b.n	8018064 <_vfiprintf_r+0x208>
 801809a:	bf00      	nop
 801809c:	0801ecc0 	.word	0x0801ecc0
 80180a0:	0801ece0 	.word	0x0801ece0
 80180a4:	0801eca0 	.word	0x0801eca0
 80180a8:	0801ed00 	.word	0x0801ed00
 80180ac:	0801ed0a 	.word	0x0801ed0a
 80180b0:	00000000 	.word	0x00000000
 80180b4:	08017e37 	.word	0x08017e37
 80180b8:	0801ed06 	.word	0x0801ed06

080180bc <_printf_common>:
 80180bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180c0:	4616      	mov	r6, r2
 80180c2:	4699      	mov	r9, r3
 80180c4:	688a      	ldr	r2, [r1, #8]
 80180c6:	690b      	ldr	r3, [r1, #16]
 80180c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80180cc:	4293      	cmp	r3, r2
 80180ce:	bfb8      	it	lt
 80180d0:	4613      	movlt	r3, r2
 80180d2:	6033      	str	r3, [r6, #0]
 80180d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80180d8:	4607      	mov	r7, r0
 80180da:	460c      	mov	r4, r1
 80180dc:	b10a      	cbz	r2, 80180e2 <_printf_common+0x26>
 80180de:	3301      	adds	r3, #1
 80180e0:	6033      	str	r3, [r6, #0]
 80180e2:	6823      	ldr	r3, [r4, #0]
 80180e4:	0699      	lsls	r1, r3, #26
 80180e6:	bf42      	ittt	mi
 80180e8:	6833      	ldrmi	r3, [r6, #0]
 80180ea:	3302      	addmi	r3, #2
 80180ec:	6033      	strmi	r3, [r6, #0]
 80180ee:	6825      	ldr	r5, [r4, #0]
 80180f0:	f015 0506 	ands.w	r5, r5, #6
 80180f4:	d106      	bne.n	8018104 <_printf_common+0x48>
 80180f6:	f104 0a19 	add.w	sl, r4, #25
 80180fa:	68e3      	ldr	r3, [r4, #12]
 80180fc:	6832      	ldr	r2, [r6, #0]
 80180fe:	1a9b      	subs	r3, r3, r2
 8018100:	42ab      	cmp	r3, r5
 8018102:	dc26      	bgt.n	8018152 <_printf_common+0x96>
 8018104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018108:	1e13      	subs	r3, r2, #0
 801810a:	6822      	ldr	r2, [r4, #0]
 801810c:	bf18      	it	ne
 801810e:	2301      	movne	r3, #1
 8018110:	0692      	lsls	r2, r2, #26
 8018112:	d42b      	bmi.n	801816c <_printf_common+0xb0>
 8018114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018118:	4649      	mov	r1, r9
 801811a:	4638      	mov	r0, r7
 801811c:	47c0      	blx	r8
 801811e:	3001      	adds	r0, #1
 8018120:	d01e      	beq.n	8018160 <_printf_common+0xa4>
 8018122:	6823      	ldr	r3, [r4, #0]
 8018124:	68e5      	ldr	r5, [r4, #12]
 8018126:	6832      	ldr	r2, [r6, #0]
 8018128:	f003 0306 	and.w	r3, r3, #6
 801812c:	2b04      	cmp	r3, #4
 801812e:	bf08      	it	eq
 8018130:	1aad      	subeq	r5, r5, r2
 8018132:	68a3      	ldr	r3, [r4, #8]
 8018134:	6922      	ldr	r2, [r4, #16]
 8018136:	bf0c      	ite	eq
 8018138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801813c:	2500      	movne	r5, #0
 801813e:	4293      	cmp	r3, r2
 8018140:	bfc4      	itt	gt
 8018142:	1a9b      	subgt	r3, r3, r2
 8018144:	18ed      	addgt	r5, r5, r3
 8018146:	2600      	movs	r6, #0
 8018148:	341a      	adds	r4, #26
 801814a:	42b5      	cmp	r5, r6
 801814c:	d11a      	bne.n	8018184 <_printf_common+0xc8>
 801814e:	2000      	movs	r0, #0
 8018150:	e008      	b.n	8018164 <_printf_common+0xa8>
 8018152:	2301      	movs	r3, #1
 8018154:	4652      	mov	r2, sl
 8018156:	4649      	mov	r1, r9
 8018158:	4638      	mov	r0, r7
 801815a:	47c0      	blx	r8
 801815c:	3001      	adds	r0, #1
 801815e:	d103      	bne.n	8018168 <_printf_common+0xac>
 8018160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018168:	3501      	adds	r5, #1
 801816a:	e7c6      	b.n	80180fa <_printf_common+0x3e>
 801816c:	18e1      	adds	r1, r4, r3
 801816e:	1c5a      	adds	r2, r3, #1
 8018170:	2030      	movs	r0, #48	; 0x30
 8018172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018176:	4422      	add	r2, r4
 8018178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801817c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018180:	3302      	adds	r3, #2
 8018182:	e7c7      	b.n	8018114 <_printf_common+0x58>
 8018184:	2301      	movs	r3, #1
 8018186:	4622      	mov	r2, r4
 8018188:	4649      	mov	r1, r9
 801818a:	4638      	mov	r0, r7
 801818c:	47c0      	blx	r8
 801818e:	3001      	adds	r0, #1
 8018190:	d0e6      	beq.n	8018160 <_printf_common+0xa4>
 8018192:	3601      	adds	r6, #1
 8018194:	e7d9      	b.n	801814a <_printf_common+0x8e>
	...

08018198 <_printf_i>:
 8018198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801819c:	460c      	mov	r4, r1
 801819e:	4691      	mov	r9, r2
 80181a0:	7e27      	ldrb	r7, [r4, #24]
 80181a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80181a4:	2f78      	cmp	r7, #120	; 0x78
 80181a6:	4680      	mov	r8, r0
 80181a8:	469a      	mov	sl, r3
 80181aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80181ae:	d807      	bhi.n	80181c0 <_printf_i+0x28>
 80181b0:	2f62      	cmp	r7, #98	; 0x62
 80181b2:	d80a      	bhi.n	80181ca <_printf_i+0x32>
 80181b4:	2f00      	cmp	r7, #0
 80181b6:	f000 80d8 	beq.w	801836a <_printf_i+0x1d2>
 80181ba:	2f58      	cmp	r7, #88	; 0x58
 80181bc:	f000 80a3 	beq.w	8018306 <_printf_i+0x16e>
 80181c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80181c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80181c8:	e03a      	b.n	8018240 <_printf_i+0xa8>
 80181ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80181ce:	2b15      	cmp	r3, #21
 80181d0:	d8f6      	bhi.n	80181c0 <_printf_i+0x28>
 80181d2:	a001      	add	r0, pc, #4	; (adr r0, 80181d8 <_printf_i+0x40>)
 80181d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80181d8:	08018231 	.word	0x08018231
 80181dc:	08018245 	.word	0x08018245
 80181e0:	080181c1 	.word	0x080181c1
 80181e4:	080181c1 	.word	0x080181c1
 80181e8:	080181c1 	.word	0x080181c1
 80181ec:	080181c1 	.word	0x080181c1
 80181f0:	08018245 	.word	0x08018245
 80181f4:	080181c1 	.word	0x080181c1
 80181f8:	080181c1 	.word	0x080181c1
 80181fc:	080181c1 	.word	0x080181c1
 8018200:	080181c1 	.word	0x080181c1
 8018204:	08018351 	.word	0x08018351
 8018208:	08018275 	.word	0x08018275
 801820c:	08018333 	.word	0x08018333
 8018210:	080181c1 	.word	0x080181c1
 8018214:	080181c1 	.word	0x080181c1
 8018218:	08018373 	.word	0x08018373
 801821c:	080181c1 	.word	0x080181c1
 8018220:	08018275 	.word	0x08018275
 8018224:	080181c1 	.word	0x080181c1
 8018228:	080181c1 	.word	0x080181c1
 801822c:	0801833b 	.word	0x0801833b
 8018230:	680b      	ldr	r3, [r1, #0]
 8018232:	1d1a      	adds	r2, r3, #4
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	600a      	str	r2, [r1, #0]
 8018238:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801823c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018240:	2301      	movs	r3, #1
 8018242:	e0a3      	b.n	801838c <_printf_i+0x1f4>
 8018244:	6825      	ldr	r5, [r4, #0]
 8018246:	6808      	ldr	r0, [r1, #0]
 8018248:	062e      	lsls	r6, r5, #24
 801824a:	f100 0304 	add.w	r3, r0, #4
 801824e:	d50a      	bpl.n	8018266 <_printf_i+0xce>
 8018250:	6805      	ldr	r5, [r0, #0]
 8018252:	600b      	str	r3, [r1, #0]
 8018254:	2d00      	cmp	r5, #0
 8018256:	da03      	bge.n	8018260 <_printf_i+0xc8>
 8018258:	232d      	movs	r3, #45	; 0x2d
 801825a:	426d      	negs	r5, r5
 801825c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018260:	485e      	ldr	r0, [pc, #376]	; (80183dc <_printf_i+0x244>)
 8018262:	230a      	movs	r3, #10
 8018264:	e019      	b.n	801829a <_printf_i+0x102>
 8018266:	f015 0f40 	tst.w	r5, #64	; 0x40
 801826a:	6805      	ldr	r5, [r0, #0]
 801826c:	600b      	str	r3, [r1, #0]
 801826e:	bf18      	it	ne
 8018270:	b22d      	sxthne	r5, r5
 8018272:	e7ef      	b.n	8018254 <_printf_i+0xbc>
 8018274:	680b      	ldr	r3, [r1, #0]
 8018276:	6825      	ldr	r5, [r4, #0]
 8018278:	1d18      	adds	r0, r3, #4
 801827a:	6008      	str	r0, [r1, #0]
 801827c:	0628      	lsls	r0, r5, #24
 801827e:	d501      	bpl.n	8018284 <_printf_i+0xec>
 8018280:	681d      	ldr	r5, [r3, #0]
 8018282:	e002      	b.n	801828a <_printf_i+0xf2>
 8018284:	0669      	lsls	r1, r5, #25
 8018286:	d5fb      	bpl.n	8018280 <_printf_i+0xe8>
 8018288:	881d      	ldrh	r5, [r3, #0]
 801828a:	4854      	ldr	r0, [pc, #336]	; (80183dc <_printf_i+0x244>)
 801828c:	2f6f      	cmp	r7, #111	; 0x6f
 801828e:	bf0c      	ite	eq
 8018290:	2308      	moveq	r3, #8
 8018292:	230a      	movne	r3, #10
 8018294:	2100      	movs	r1, #0
 8018296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801829a:	6866      	ldr	r6, [r4, #4]
 801829c:	60a6      	str	r6, [r4, #8]
 801829e:	2e00      	cmp	r6, #0
 80182a0:	bfa2      	ittt	ge
 80182a2:	6821      	ldrge	r1, [r4, #0]
 80182a4:	f021 0104 	bicge.w	r1, r1, #4
 80182a8:	6021      	strge	r1, [r4, #0]
 80182aa:	b90d      	cbnz	r5, 80182b0 <_printf_i+0x118>
 80182ac:	2e00      	cmp	r6, #0
 80182ae:	d04d      	beq.n	801834c <_printf_i+0x1b4>
 80182b0:	4616      	mov	r6, r2
 80182b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80182b6:	fb03 5711 	mls	r7, r3, r1, r5
 80182ba:	5dc7      	ldrb	r7, [r0, r7]
 80182bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80182c0:	462f      	mov	r7, r5
 80182c2:	42bb      	cmp	r3, r7
 80182c4:	460d      	mov	r5, r1
 80182c6:	d9f4      	bls.n	80182b2 <_printf_i+0x11a>
 80182c8:	2b08      	cmp	r3, #8
 80182ca:	d10b      	bne.n	80182e4 <_printf_i+0x14c>
 80182cc:	6823      	ldr	r3, [r4, #0]
 80182ce:	07df      	lsls	r7, r3, #31
 80182d0:	d508      	bpl.n	80182e4 <_printf_i+0x14c>
 80182d2:	6923      	ldr	r3, [r4, #16]
 80182d4:	6861      	ldr	r1, [r4, #4]
 80182d6:	4299      	cmp	r1, r3
 80182d8:	bfde      	ittt	le
 80182da:	2330      	movle	r3, #48	; 0x30
 80182dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80182e0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80182e4:	1b92      	subs	r2, r2, r6
 80182e6:	6122      	str	r2, [r4, #16]
 80182e8:	f8cd a000 	str.w	sl, [sp]
 80182ec:	464b      	mov	r3, r9
 80182ee:	aa03      	add	r2, sp, #12
 80182f0:	4621      	mov	r1, r4
 80182f2:	4640      	mov	r0, r8
 80182f4:	f7ff fee2 	bl	80180bc <_printf_common>
 80182f8:	3001      	adds	r0, #1
 80182fa:	d14c      	bne.n	8018396 <_printf_i+0x1fe>
 80182fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018300:	b004      	add	sp, #16
 8018302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018306:	4835      	ldr	r0, [pc, #212]	; (80183dc <_printf_i+0x244>)
 8018308:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801830c:	6823      	ldr	r3, [r4, #0]
 801830e:	680e      	ldr	r6, [r1, #0]
 8018310:	061f      	lsls	r7, r3, #24
 8018312:	f856 5b04 	ldr.w	r5, [r6], #4
 8018316:	600e      	str	r6, [r1, #0]
 8018318:	d514      	bpl.n	8018344 <_printf_i+0x1ac>
 801831a:	07d9      	lsls	r1, r3, #31
 801831c:	bf44      	itt	mi
 801831e:	f043 0320 	orrmi.w	r3, r3, #32
 8018322:	6023      	strmi	r3, [r4, #0]
 8018324:	b91d      	cbnz	r5, 801832e <_printf_i+0x196>
 8018326:	6823      	ldr	r3, [r4, #0]
 8018328:	f023 0320 	bic.w	r3, r3, #32
 801832c:	6023      	str	r3, [r4, #0]
 801832e:	2310      	movs	r3, #16
 8018330:	e7b0      	b.n	8018294 <_printf_i+0xfc>
 8018332:	6823      	ldr	r3, [r4, #0]
 8018334:	f043 0320 	orr.w	r3, r3, #32
 8018338:	6023      	str	r3, [r4, #0]
 801833a:	2378      	movs	r3, #120	; 0x78
 801833c:	4828      	ldr	r0, [pc, #160]	; (80183e0 <_printf_i+0x248>)
 801833e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018342:	e7e3      	b.n	801830c <_printf_i+0x174>
 8018344:	065e      	lsls	r6, r3, #25
 8018346:	bf48      	it	mi
 8018348:	b2ad      	uxthmi	r5, r5
 801834a:	e7e6      	b.n	801831a <_printf_i+0x182>
 801834c:	4616      	mov	r6, r2
 801834e:	e7bb      	b.n	80182c8 <_printf_i+0x130>
 8018350:	680b      	ldr	r3, [r1, #0]
 8018352:	6826      	ldr	r6, [r4, #0]
 8018354:	6960      	ldr	r0, [r4, #20]
 8018356:	1d1d      	adds	r5, r3, #4
 8018358:	600d      	str	r5, [r1, #0]
 801835a:	0635      	lsls	r5, r6, #24
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	d501      	bpl.n	8018364 <_printf_i+0x1cc>
 8018360:	6018      	str	r0, [r3, #0]
 8018362:	e002      	b.n	801836a <_printf_i+0x1d2>
 8018364:	0671      	lsls	r1, r6, #25
 8018366:	d5fb      	bpl.n	8018360 <_printf_i+0x1c8>
 8018368:	8018      	strh	r0, [r3, #0]
 801836a:	2300      	movs	r3, #0
 801836c:	6123      	str	r3, [r4, #16]
 801836e:	4616      	mov	r6, r2
 8018370:	e7ba      	b.n	80182e8 <_printf_i+0x150>
 8018372:	680b      	ldr	r3, [r1, #0]
 8018374:	1d1a      	adds	r2, r3, #4
 8018376:	600a      	str	r2, [r1, #0]
 8018378:	681e      	ldr	r6, [r3, #0]
 801837a:	6862      	ldr	r2, [r4, #4]
 801837c:	2100      	movs	r1, #0
 801837e:	4630      	mov	r0, r6
 8018380:	f7e7 ff3e 	bl	8000200 <memchr>
 8018384:	b108      	cbz	r0, 801838a <_printf_i+0x1f2>
 8018386:	1b80      	subs	r0, r0, r6
 8018388:	6060      	str	r0, [r4, #4]
 801838a:	6863      	ldr	r3, [r4, #4]
 801838c:	6123      	str	r3, [r4, #16]
 801838e:	2300      	movs	r3, #0
 8018390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018394:	e7a8      	b.n	80182e8 <_printf_i+0x150>
 8018396:	6923      	ldr	r3, [r4, #16]
 8018398:	4632      	mov	r2, r6
 801839a:	4649      	mov	r1, r9
 801839c:	4640      	mov	r0, r8
 801839e:	47d0      	blx	sl
 80183a0:	3001      	adds	r0, #1
 80183a2:	d0ab      	beq.n	80182fc <_printf_i+0x164>
 80183a4:	6823      	ldr	r3, [r4, #0]
 80183a6:	079b      	lsls	r3, r3, #30
 80183a8:	d413      	bmi.n	80183d2 <_printf_i+0x23a>
 80183aa:	68e0      	ldr	r0, [r4, #12]
 80183ac:	9b03      	ldr	r3, [sp, #12]
 80183ae:	4298      	cmp	r0, r3
 80183b0:	bfb8      	it	lt
 80183b2:	4618      	movlt	r0, r3
 80183b4:	e7a4      	b.n	8018300 <_printf_i+0x168>
 80183b6:	2301      	movs	r3, #1
 80183b8:	4632      	mov	r2, r6
 80183ba:	4649      	mov	r1, r9
 80183bc:	4640      	mov	r0, r8
 80183be:	47d0      	blx	sl
 80183c0:	3001      	adds	r0, #1
 80183c2:	d09b      	beq.n	80182fc <_printf_i+0x164>
 80183c4:	3501      	adds	r5, #1
 80183c6:	68e3      	ldr	r3, [r4, #12]
 80183c8:	9903      	ldr	r1, [sp, #12]
 80183ca:	1a5b      	subs	r3, r3, r1
 80183cc:	42ab      	cmp	r3, r5
 80183ce:	dcf2      	bgt.n	80183b6 <_printf_i+0x21e>
 80183d0:	e7eb      	b.n	80183aa <_printf_i+0x212>
 80183d2:	2500      	movs	r5, #0
 80183d4:	f104 0619 	add.w	r6, r4, #25
 80183d8:	e7f5      	b.n	80183c6 <_printf_i+0x22e>
 80183da:	bf00      	nop
 80183dc:	0801ed11 	.word	0x0801ed11
 80183e0:	0801ed22 	.word	0x0801ed22

080183e4 <_sbrk_r>:
 80183e4:	b538      	push	{r3, r4, r5, lr}
 80183e6:	4d06      	ldr	r5, [pc, #24]	; (8018400 <_sbrk_r+0x1c>)
 80183e8:	2300      	movs	r3, #0
 80183ea:	4604      	mov	r4, r0
 80183ec:	4608      	mov	r0, r1
 80183ee:	602b      	str	r3, [r5, #0]
 80183f0:	f7e9 f99c 	bl	800172c <_sbrk>
 80183f4:	1c43      	adds	r3, r0, #1
 80183f6:	d102      	bne.n	80183fe <_sbrk_r+0x1a>
 80183f8:	682b      	ldr	r3, [r5, #0]
 80183fa:	b103      	cbz	r3, 80183fe <_sbrk_r+0x1a>
 80183fc:	6023      	str	r3, [r4, #0]
 80183fe:	bd38      	pop	{r3, r4, r5, pc}
 8018400:	200114e8 	.word	0x200114e8

08018404 <__sread>:
 8018404:	b510      	push	{r4, lr}
 8018406:	460c      	mov	r4, r1
 8018408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801840c:	f000 f8ce 	bl	80185ac <_read_r>
 8018410:	2800      	cmp	r0, #0
 8018412:	bfab      	itete	ge
 8018414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018416:	89a3      	ldrhlt	r3, [r4, #12]
 8018418:	181b      	addge	r3, r3, r0
 801841a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801841e:	bfac      	ite	ge
 8018420:	6563      	strge	r3, [r4, #84]	; 0x54
 8018422:	81a3      	strhlt	r3, [r4, #12]
 8018424:	bd10      	pop	{r4, pc}

08018426 <__swrite>:
 8018426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801842a:	461f      	mov	r7, r3
 801842c:	898b      	ldrh	r3, [r1, #12]
 801842e:	05db      	lsls	r3, r3, #23
 8018430:	4605      	mov	r5, r0
 8018432:	460c      	mov	r4, r1
 8018434:	4616      	mov	r6, r2
 8018436:	d505      	bpl.n	8018444 <__swrite+0x1e>
 8018438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801843c:	2302      	movs	r3, #2
 801843e:	2200      	movs	r2, #0
 8018440:	f000 f870 	bl	8018524 <_lseek_r>
 8018444:	89a3      	ldrh	r3, [r4, #12]
 8018446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801844a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801844e:	81a3      	strh	r3, [r4, #12]
 8018450:	4632      	mov	r2, r6
 8018452:	463b      	mov	r3, r7
 8018454:	4628      	mov	r0, r5
 8018456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801845a:	f000 b817 	b.w	801848c <_write_r>

0801845e <__sseek>:
 801845e:	b510      	push	{r4, lr}
 8018460:	460c      	mov	r4, r1
 8018462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018466:	f000 f85d 	bl	8018524 <_lseek_r>
 801846a:	1c43      	adds	r3, r0, #1
 801846c:	89a3      	ldrh	r3, [r4, #12]
 801846e:	bf15      	itete	ne
 8018470:	6560      	strne	r0, [r4, #84]	; 0x54
 8018472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801847a:	81a3      	strheq	r3, [r4, #12]
 801847c:	bf18      	it	ne
 801847e:	81a3      	strhne	r3, [r4, #12]
 8018480:	bd10      	pop	{r4, pc}

08018482 <__sclose>:
 8018482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018486:	f000 b81b 	b.w	80184c0 <_close_r>
	...

0801848c <_write_r>:
 801848c:	b538      	push	{r3, r4, r5, lr}
 801848e:	4d07      	ldr	r5, [pc, #28]	; (80184ac <_write_r+0x20>)
 8018490:	4604      	mov	r4, r0
 8018492:	4608      	mov	r0, r1
 8018494:	4611      	mov	r1, r2
 8018496:	2200      	movs	r2, #0
 8018498:	602a      	str	r2, [r5, #0]
 801849a:	461a      	mov	r2, r3
 801849c:	f7e8 fda0 	bl	8000fe0 <_write>
 80184a0:	1c43      	adds	r3, r0, #1
 80184a2:	d102      	bne.n	80184aa <_write_r+0x1e>
 80184a4:	682b      	ldr	r3, [r5, #0]
 80184a6:	b103      	cbz	r3, 80184aa <_write_r+0x1e>
 80184a8:	6023      	str	r3, [r4, #0]
 80184aa:	bd38      	pop	{r3, r4, r5, pc}
 80184ac:	200114e8 	.word	0x200114e8

080184b0 <abort>:
 80184b0:	b508      	push	{r3, lr}
 80184b2:	2006      	movs	r0, #6
 80184b4:	f000 f8b4 	bl	8018620 <raise>
 80184b8:	2001      	movs	r0, #1
 80184ba:	f7e9 f8db 	bl	8001674 <_exit>
	...

080184c0 <_close_r>:
 80184c0:	b538      	push	{r3, r4, r5, lr}
 80184c2:	4d06      	ldr	r5, [pc, #24]	; (80184dc <_close_r+0x1c>)
 80184c4:	2300      	movs	r3, #0
 80184c6:	4604      	mov	r4, r0
 80184c8:	4608      	mov	r0, r1
 80184ca:	602b      	str	r3, [r5, #0]
 80184cc:	f7e9 f8f9 	bl	80016c2 <_close>
 80184d0:	1c43      	adds	r3, r0, #1
 80184d2:	d102      	bne.n	80184da <_close_r+0x1a>
 80184d4:	682b      	ldr	r3, [r5, #0]
 80184d6:	b103      	cbz	r3, 80184da <_close_r+0x1a>
 80184d8:	6023      	str	r3, [r4, #0]
 80184da:	bd38      	pop	{r3, r4, r5, pc}
 80184dc:	200114e8 	.word	0x200114e8

080184e0 <_fstat_r>:
 80184e0:	b538      	push	{r3, r4, r5, lr}
 80184e2:	4d07      	ldr	r5, [pc, #28]	; (8018500 <_fstat_r+0x20>)
 80184e4:	2300      	movs	r3, #0
 80184e6:	4604      	mov	r4, r0
 80184e8:	4608      	mov	r0, r1
 80184ea:	4611      	mov	r1, r2
 80184ec:	602b      	str	r3, [r5, #0]
 80184ee:	f7e9 f8f4 	bl	80016da <_fstat>
 80184f2:	1c43      	adds	r3, r0, #1
 80184f4:	d102      	bne.n	80184fc <_fstat_r+0x1c>
 80184f6:	682b      	ldr	r3, [r5, #0]
 80184f8:	b103      	cbz	r3, 80184fc <_fstat_r+0x1c>
 80184fa:	6023      	str	r3, [r4, #0]
 80184fc:	bd38      	pop	{r3, r4, r5, pc}
 80184fe:	bf00      	nop
 8018500:	200114e8 	.word	0x200114e8

08018504 <_isatty_r>:
 8018504:	b538      	push	{r3, r4, r5, lr}
 8018506:	4d06      	ldr	r5, [pc, #24]	; (8018520 <_isatty_r+0x1c>)
 8018508:	2300      	movs	r3, #0
 801850a:	4604      	mov	r4, r0
 801850c:	4608      	mov	r0, r1
 801850e:	602b      	str	r3, [r5, #0]
 8018510:	f7e9 f8f3 	bl	80016fa <_isatty>
 8018514:	1c43      	adds	r3, r0, #1
 8018516:	d102      	bne.n	801851e <_isatty_r+0x1a>
 8018518:	682b      	ldr	r3, [r5, #0]
 801851a:	b103      	cbz	r3, 801851e <_isatty_r+0x1a>
 801851c:	6023      	str	r3, [r4, #0]
 801851e:	bd38      	pop	{r3, r4, r5, pc}
 8018520:	200114e8 	.word	0x200114e8

08018524 <_lseek_r>:
 8018524:	b538      	push	{r3, r4, r5, lr}
 8018526:	4d07      	ldr	r5, [pc, #28]	; (8018544 <_lseek_r+0x20>)
 8018528:	4604      	mov	r4, r0
 801852a:	4608      	mov	r0, r1
 801852c:	4611      	mov	r1, r2
 801852e:	2200      	movs	r2, #0
 8018530:	602a      	str	r2, [r5, #0]
 8018532:	461a      	mov	r2, r3
 8018534:	f7e9 f8ec 	bl	8001710 <_lseek>
 8018538:	1c43      	adds	r3, r0, #1
 801853a:	d102      	bne.n	8018542 <_lseek_r+0x1e>
 801853c:	682b      	ldr	r3, [r5, #0]
 801853e:	b103      	cbz	r3, 8018542 <_lseek_r+0x1e>
 8018540:	6023      	str	r3, [r4, #0]
 8018542:	bd38      	pop	{r3, r4, r5, pc}
 8018544:	200114e8 	.word	0x200114e8

08018548 <__malloc_lock>:
 8018548:	4801      	ldr	r0, [pc, #4]	; (8018550 <__malloc_lock+0x8>)
 801854a:	f7ff b9e9 	b.w	8017920 <__retarget_lock_acquire_recursive>
 801854e:	bf00      	nop
 8018550:	200114f0 	.word	0x200114f0

08018554 <__malloc_unlock>:
 8018554:	4801      	ldr	r0, [pc, #4]	; (801855c <__malloc_unlock+0x8>)
 8018556:	f7ff b9e4 	b.w	8017922 <__retarget_lock_release_recursive>
 801855a:	bf00      	nop
 801855c:	200114f0 	.word	0x200114f0

08018560 <_realloc_r>:
 8018560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018562:	4607      	mov	r7, r0
 8018564:	4614      	mov	r4, r2
 8018566:	460e      	mov	r6, r1
 8018568:	b921      	cbnz	r1, 8018574 <_realloc_r+0x14>
 801856a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801856e:	4611      	mov	r1, r2
 8018570:	f7ff ba94 	b.w	8017a9c <_malloc_r>
 8018574:	b922      	cbnz	r2, 8018580 <_realloc_r+0x20>
 8018576:	f7ff fa41 	bl	80179fc <_free_r>
 801857a:	4625      	mov	r5, r4
 801857c:	4628      	mov	r0, r5
 801857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018580:	f000 f86a 	bl	8018658 <_malloc_usable_size_r>
 8018584:	42a0      	cmp	r0, r4
 8018586:	d20f      	bcs.n	80185a8 <_realloc_r+0x48>
 8018588:	4621      	mov	r1, r4
 801858a:	4638      	mov	r0, r7
 801858c:	f7ff fa86 	bl	8017a9c <_malloc_r>
 8018590:	4605      	mov	r5, r0
 8018592:	2800      	cmp	r0, #0
 8018594:	d0f2      	beq.n	801857c <_realloc_r+0x1c>
 8018596:	4631      	mov	r1, r6
 8018598:	4622      	mov	r2, r4
 801859a:	f7fe fca7 	bl	8016eec <memcpy>
 801859e:	4631      	mov	r1, r6
 80185a0:	4638      	mov	r0, r7
 80185a2:	f7ff fa2b 	bl	80179fc <_free_r>
 80185a6:	e7e9      	b.n	801857c <_realloc_r+0x1c>
 80185a8:	4635      	mov	r5, r6
 80185aa:	e7e7      	b.n	801857c <_realloc_r+0x1c>

080185ac <_read_r>:
 80185ac:	b538      	push	{r3, r4, r5, lr}
 80185ae:	4d07      	ldr	r5, [pc, #28]	; (80185cc <_read_r+0x20>)
 80185b0:	4604      	mov	r4, r0
 80185b2:	4608      	mov	r0, r1
 80185b4:	4611      	mov	r1, r2
 80185b6:	2200      	movs	r2, #0
 80185b8:	602a      	str	r2, [r5, #0]
 80185ba:	461a      	mov	r2, r3
 80185bc:	f7e9 f864 	bl	8001688 <_read>
 80185c0:	1c43      	adds	r3, r0, #1
 80185c2:	d102      	bne.n	80185ca <_read_r+0x1e>
 80185c4:	682b      	ldr	r3, [r5, #0]
 80185c6:	b103      	cbz	r3, 80185ca <_read_r+0x1e>
 80185c8:	6023      	str	r3, [r4, #0]
 80185ca:	bd38      	pop	{r3, r4, r5, pc}
 80185cc:	200114e8 	.word	0x200114e8

080185d0 <_raise_r>:
 80185d0:	291f      	cmp	r1, #31
 80185d2:	b538      	push	{r3, r4, r5, lr}
 80185d4:	4604      	mov	r4, r0
 80185d6:	460d      	mov	r5, r1
 80185d8:	d904      	bls.n	80185e4 <_raise_r+0x14>
 80185da:	2316      	movs	r3, #22
 80185dc:	6003      	str	r3, [r0, #0]
 80185de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80185e2:	bd38      	pop	{r3, r4, r5, pc}
 80185e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80185e6:	b112      	cbz	r2, 80185ee <_raise_r+0x1e>
 80185e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80185ec:	b94b      	cbnz	r3, 8018602 <_raise_r+0x32>
 80185ee:	4620      	mov	r0, r4
 80185f0:	f000 f830 	bl	8018654 <_getpid_r>
 80185f4:	462a      	mov	r2, r5
 80185f6:	4601      	mov	r1, r0
 80185f8:	4620      	mov	r0, r4
 80185fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80185fe:	f000 b817 	b.w	8018630 <_kill_r>
 8018602:	2b01      	cmp	r3, #1
 8018604:	d00a      	beq.n	801861c <_raise_r+0x4c>
 8018606:	1c59      	adds	r1, r3, #1
 8018608:	d103      	bne.n	8018612 <_raise_r+0x42>
 801860a:	2316      	movs	r3, #22
 801860c:	6003      	str	r3, [r0, #0]
 801860e:	2001      	movs	r0, #1
 8018610:	e7e7      	b.n	80185e2 <_raise_r+0x12>
 8018612:	2400      	movs	r4, #0
 8018614:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018618:	4628      	mov	r0, r5
 801861a:	4798      	blx	r3
 801861c:	2000      	movs	r0, #0
 801861e:	e7e0      	b.n	80185e2 <_raise_r+0x12>

08018620 <raise>:
 8018620:	4b02      	ldr	r3, [pc, #8]	; (801862c <raise+0xc>)
 8018622:	4601      	mov	r1, r0
 8018624:	6818      	ldr	r0, [r3, #0]
 8018626:	f7ff bfd3 	b.w	80185d0 <_raise_r>
 801862a:	bf00      	nop
 801862c:	2000014c 	.word	0x2000014c

08018630 <_kill_r>:
 8018630:	b538      	push	{r3, r4, r5, lr}
 8018632:	4d07      	ldr	r5, [pc, #28]	; (8018650 <_kill_r+0x20>)
 8018634:	2300      	movs	r3, #0
 8018636:	4604      	mov	r4, r0
 8018638:	4608      	mov	r0, r1
 801863a:	4611      	mov	r1, r2
 801863c:	602b      	str	r3, [r5, #0]
 801863e:	f7e9 f807 	bl	8001650 <_kill>
 8018642:	1c43      	adds	r3, r0, #1
 8018644:	d102      	bne.n	801864c <_kill_r+0x1c>
 8018646:	682b      	ldr	r3, [r5, #0]
 8018648:	b103      	cbz	r3, 801864c <_kill_r+0x1c>
 801864a:	6023      	str	r3, [r4, #0]
 801864c:	bd38      	pop	{r3, r4, r5, pc}
 801864e:	bf00      	nop
 8018650:	200114e8 	.word	0x200114e8

08018654 <_getpid_r>:
 8018654:	f7e8 bff4 	b.w	8001640 <_getpid>

08018658 <_malloc_usable_size_r>:
 8018658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801865c:	1f18      	subs	r0, r3, #4
 801865e:	2b00      	cmp	r3, #0
 8018660:	bfbc      	itt	lt
 8018662:	580b      	ldrlt	r3, [r1, r0]
 8018664:	18c0      	addlt	r0, r0, r3
 8018666:	4770      	bx	lr

08018668 <_init>:
 8018668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801866a:	bf00      	nop
 801866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801866e:	bc08      	pop	{r3}
 8018670:	469e      	mov	lr, r3
 8018672:	4770      	bx	lr

08018674 <_fini>:
 8018674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018676:	bf00      	nop
 8018678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801867a:	bc08      	pop	{r3}
 801867c:	469e      	mov	lr, r3
 801867e:	4770      	bx	lr
