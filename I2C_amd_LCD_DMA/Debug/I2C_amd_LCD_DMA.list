
I2C_amd_LCD_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a08  08003a08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a08  08003a08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a08  08003a08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003a1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003a1c  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aa2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001699  00000000  00000000  00027ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00029170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  000298d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160bf  00000000  00000000  00029fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009434  00000000  00000000  0004006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e59e  00000000  00000000  000494a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7a41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d38  00000000  00000000  000c7a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003998 	.word	0x08003998

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003998 	.word	0x08003998

0800014c <lcd_send_cmd>:
#include "i2c-lcd_dma.h"
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

  #define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

	void lcd_send_cmd(char cmd) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
		char data_u, data_l;
		uint8_t data_t[4];
		data_u = (cmd & 0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
		data_l = ((cmd << 4) & 0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
		data_t[0] = data_u | 0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
		data_t[1] = data_u | 0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
		data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
		data_t[3] = data_l | 0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
		 transfer before starting a new one.
		 For simplicity reasons, this example is just waiting till the end of the
		 transfer, but application may perform other tasks while transfer operation
		 is ongoing. */

		while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD,
 800018c:	e007      	b.n	800019e <lcd_send_cmd+0x52>
				(uint8_t*) data_t, 4) != HAL_OK) {
			/* Error_Handler() function is called when Timeout error occurs.
			 When Acknowledge failure occurs (Slave don't acknowledge its address)
			 Master restarts communication */
			if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF) {
 800018e:	480f      	ldr	r0, [pc, #60]	; (80001cc <lcd_send_cmd+0x80>)
 8000190:	f001 fcd2 	bl	8001b38 <HAL_I2C_GetError>
 8000194:	4603      	mov	r3, r0
 8000196:	2b04      	cmp	r3, #4
 8000198:	d001      	beq.n	800019e <lcd_send_cmd+0x52>
				Error_Handler();
 800019a:	f000 f9ed 	bl	8000578 <Error_Handler>
		while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD,
 800019e:	f107 0208 	add.w	r2, r7, #8
 80001a2:	2304      	movs	r3, #4
 80001a4:	214e      	movs	r1, #78	; 0x4e
 80001a6:	4809      	ldr	r0, [pc, #36]	; (80001cc <lcd_send_cmd+0x80>)
 80001a8:	f001 f9c2 	bl	8001530 <HAL_I2C_Master_Transmit_DMA>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d1ed      	bne.n	800018e <lcd_send_cmd+0x42>
			}
		}
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80001b2:	bf00      	nop
 80001b4:	4805      	ldr	r0, [pc, #20]	; (80001cc <lcd_send_cmd+0x80>)
 80001b6:	f001 fcb2 	bl	8001b1e <HAL_I2C_GetState>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b20      	cmp	r3, #32
 80001be:	d1f9      	bne.n	80001b4 <lcd_send_cmd+0x68>

			/*##-2- Start the transmission process #####################################*/
			/* While the I2C in reception process, user can transmit data through
			 "aTxBuffer" buffer */
		}
	}
 80001c0:	bf00      	nop
 80001c2:	bf00      	nop
 80001c4:	3710      	adds	r7, #16
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	2000006c 	.word	0x2000006c

080001d0 <lcd_send_data>:
  void lcd_send_data (char data)
  {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
  	uint8_t data_t[4];
  	data_u = (data&0xf0);
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f023 030f 	bic.w	r3, r3, #15
 80001e0:	73fb      	strb	r3, [r7, #15]
  	data_l = ((data<<4)&0xf0);
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	011b      	lsls	r3, r3, #4
 80001e6:	73bb      	strb	r3, [r7, #14]
  	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001e8:	7bfb      	ldrb	r3, [r7, #15]
 80001ea:	f043 030d 	orr.w	r3, r3, #13
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	723b      	strb	r3, [r7, #8]
  	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f043 0309 	orr.w	r3, r3, #9
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	727b      	strb	r3, [r7, #9]
  	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001fc:	7bbb      	ldrb	r3, [r7, #14]
 80001fe:	f043 030d 	orr.w	r3, r3, #13
 8000202:	b2db      	uxtb	r3, r3
 8000204:	72bb      	strb	r3, [r7, #10]
  	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000206:	7bbb      	ldrb	r3, [r7, #14]
 8000208:	f043 0309 	orr.w	r3, r3, #9
 800020c:	b2db      	uxtb	r3, r3
 800020e:	72fb      	strb	r3, [r7, #11]
	 state of the peripheral; if itï¿½s busy you need to wait for the end of current
	 transfer before starting a new one.
	 For simplicity reasons, this example is just waiting till the end of the
	 transfer, but application may perform other tasks while transfer operation
	 is ongoing. */
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD,
 8000210:	e007      	b.n	8000222 <lcd_send_data+0x52>
			(uint8_t*) data_t, 4) != HAL_OK) {
		/* Error_Handler() function is called when Timeout error occurs.
		 When Acknowledge failure occurs (Slave don't acknowledge its address)
		 Master restarts communication */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF) {
 8000212:	480f      	ldr	r0, [pc, #60]	; (8000250 <lcd_send_data+0x80>)
 8000214:	f001 fc90 	bl	8001b38 <HAL_I2C_GetError>
 8000218:	4603      	mov	r3, r0
 800021a:	2b04      	cmp	r3, #4
 800021c:	d001      	beq.n	8000222 <lcd_send_data+0x52>
			Error_Handler();
 800021e:	f000 f9ab 	bl	8000578 <Error_Handler>
	while (HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD,
 8000222:	f107 0208 	add.w	r2, r7, #8
 8000226:	2304      	movs	r3, #4
 8000228:	214e      	movs	r1, #78	; 0x4e
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <lcd_send_data+0x80>)
 800022c:	f001 f980 	bl	8001530 <HAL_I2C_Master_Transmit_DMA>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d1ed      	bne.n	8000212 <lcd_send_data+0x42>
		}
	}
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8000236:	bf00      	nop
 8000238:	4805      	ldr	r0, [pc, #20]	; (8000250 <lcd_send_data+0x80>)
 800023a:	f001 fc70 	bl	8001b1e <HAL_I2C_GetState>
 800023e:	4603      	mov	r3, r0
 8000240:	2b20      	cmp	r3, #32
 8000242:	d1f9      	bne.n	8000238 <lcd_send_data+0x68>

		/*##-2- Start the transmission process #####################################*/
		/* While the I2C in reception process, user can transmit data through
		 "aTxBuffer" buffer */
	}
}
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000006c 	.word	0x2000006c

08000254 <lcd_clear>:

  void lcd_clear (void)
  {
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  	lcd_send_cmd (0x80);
 800025a:	2080      	movs	r0, #128	; 0x80
 800025c:	f7ff ff76 	bl	800014c <lcd_send_cmd>
  	for (int i=0; i<70; i++)
 8000260:	2300      	movs	r3, #0
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	e005      	b.n	8000272 <lcd_clear+0x1e>
  	{
  		lcd_send_data (' ');
 8000266:	2020      	movs	r0, #32
 8000268:	f7ff ffb2 	bl	80001d0 <lcd_send_data>
  	for (int i=0; i<70; i++)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3301      	adds	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2b45      	cmp	r3, #69	; 0x45
 8000276:	ddf6      	ble.n	8000266 <lcd_clear+0x12>
  	}
  }
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}

08000282 <lcd_put_cur>:

  void lcd_put_cur(int row, int col)
  {
 8000282:	b580      	push	{r7, lr}
 8000284:	b082      	sub	sp, #8
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
      switch (row)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d003      	beq.n	800029a <lcd_put_cur+0x18>
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d005      	beq.n	80002a4 <lcd_put_cur+0x22>
 8000298:	e009      	b.n	80002ae <lcd_put_cur+0x2c>
      {
          case 0:
              col |= 0x80;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a0:	603b      	str	r3, [r7, #0]
              break;
 80002a2:	e004      	b.n	80002ae <lcd_put_cur+0x2c>
          case 1:
              col |= 0xC0;
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002aa:	603b      	str	r3, [r7, #0]
              break;
 80002ac:	bf00      	nop
      }

      lcd_send_cmd (col);
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff4a 	bl	800014c <lcd_send_cmd>
  }
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <lcd_init>:


  void lcd_init (void)
  {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  	// 4 bit initialisation
  	HAL_Delay(50);  // wait for >40ms
 80002c4:	2032      	movs	r0, #50	; 0x32
 80002c6:	f000 fac9 	bl	800085c <HAL_Delay>
  	lcd_send_cmd (0x30);
 80002ca:	2030      	movs	r0, #48	; 0x30
 80002cc:	f7ff ff3e 	bl	800014c <lcd_send_cmd>
  	HAL_Delay(5);  // wait for >4.1ms
 80002d0:	2005      	movs	r0, #5
 80002d2:	f000 fac3 	bl	800085c <HAL_Delay>
  	lcd_send_cmd (0x30);
 80002d6:	2030      	movs	r0, #48	; 0x30
 80002d8:	f7ff ff38 	bl	800014c <lcd_send_cmd>
  	HAL_Delay(1);  // wait for >100us
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 fabd 	bl	800085c <HAL_Delay>
  	lcd_send_cmd (0x30);
 80002e2:	2030      	movs	r0, #48	; 0x30
 80002e4:	f7ff ff32 	bl	800014c <lcd_send_cmd>
  	HAL_Delay(10);
 80002e8:	200a      	movs	r0, #10
 80002ea:	f000 fab7 	bl	800085c <HAL_Delay>
  	lcd_send_cmd (0x20);  // 4bit mode
 80002ee:	2020      	movs	r0, #32
 80002f0:	f7ff ff2c 	bl	800014c <lcd_send_cmd>
  	HAL_Delay(10);
 80002f4:	200a      	movs	r0, #10
 80002f6:	f000 fab1 	bl	800085c <HAL_Delay>

    // dislay initialisation
  	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002fa:	2028      	movs	r0, #40	; 0x28
 80002fc:	f7ff ff26 	bl	800014c <lcd_send_cmd>
  	HAL_Delay(1);
 8000300:	2001      	movs	r0, #1
 8000302:	f000 faab 	bl	800085c <HAL_Delay>
  	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000306:	2008      	movs	r0, #8
 8000308:	f7ff ff20 	bl	800014c <lcd_send_cmd>
  	HAL_Delay(1);
 800030c:	2001      	movs	r0, #1
 800030e:	f000 faa5 	bl	800085c <HAL_Delay>
  	lcd_send_cmd (0x01);  // clear display
 8000312:	2001      	movs	r0, #1
 8000314:	f7ff ff1a 	bl	800014c <lcd_send_cmd>
  	HAL_Delay(1);
 8000318:	2001      	movs	r0, #1
 800031a:	f000 fa9f 	bl	800085c <HAL_Delay>
  	HAL_Delay(1);
 800031e:	2001      	movs	r0, #1
 8000320:	f000 fa9c 	bl	800085c <HAL_Delay>
  	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000324:	2006      	movs	r0, #6
 8000326:	f7ff ff11 	bl	800014c <lcd_send_cmd>
  	HAL_Delay(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f000 fa96 	bl	800085c <HAL_Delay>
  	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000330:	200c      	movs	r0, #12
 8000332:	f7ff ff0b 	bl	800014c <lcd_send_cmd>
  }
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}

0800033a <lcd_send_string>:

  void lcd_send_string (char *str)
  {
 800033a:	b580      	push	{r7, lr}
 800033c:	b082      	sub	sp, #8
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
  	while (*str) lcd_send_data (*str++);
 8000342:	e006      	b.n	8000352 <lcd_send_string+0x18>
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	1c5a      	adds	r2, r3, #1
 8000348:	607a      	str	r2, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff3f 	bl	80001d0 <lcd_send_data>
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1f4      	bne.n	8000344 <lcd_send_string+0xa>
  }
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fa16 	bl	8000798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f844 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 f8d4 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 8000374:	f000 f8b4 	bl	80004e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000378:	f000 f884 	bl	8000484 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 800037c:	f7ff ffa0 	bl	80002c0 <lcd_init>
  lcd_clear(); // clear LCD
 8000380:	f7ff ff68 	bl	8000254 <lcd_clear>
  lcd_put_cur(0,0); // Put are cursor in the right place
 8000384:	2100      	movs	r1, #0
 8000386:	2000      	movs	r0, #0
 8000388:	f7ff ff7b 	bl	8000282 <lcd_put_cur>
  lcd_send_string ("Hello World!");
 800038c:	4816      	ldr	r0, [pc, #88]	; (80003e8 <main+0x84>)
 800038e:	f7ff ffd4 	bl	800033a <lcd_send_string>
  HAL_Delay(1500);
 8000392:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000396:	f000 fa61 	bl	800085c <HAL_Delay>

  lcd_put_cur(1,0); // Put are cursor in the right place
 800039a:	2100      	movs	r1, #0
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff ff70 	bl	8000282 <lcd_put_cur>
  lcd_send_string ("Cool, It works!");
 80003a2:	4812      	ldr	r0, [pc, #72]	; (80003ec <main+0x88>)
 80003a4:	f7ff ffc9 	bl	800033a <lcd_send_string>
  HAL_Delay(1500);
 80003a8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80003ac:	f000 fa56 	bl	800085c <HAL_Delay>
  lcd_clear(); // clear LCD
 80003b0:	f7ff ff50 	bl	8000254 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1500);
 80003b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80003b8:	f000 fa50 	bl	800085c <HAL_Delay>
	  lcd_put_cur(0,6);
 80003bc:	2106      	movs	r1, #6
 80003be:	2000      	movs	r0, #0
 80003c0:	f7ff ff5f 	bl	8000282 <lcd_put_cur>
	  lcd_send_string ("HELLO");
 80003c4:	480a      	ldr	r0, [pc, #40]	; (80003f0 <main+0x8c>)
 80003c6:	f7ff ffb8 	bl	800033a <lcd_send_string>
	  lcd_put_cur(1,6);
 80003ca:	2106      	movs	r1, #6
 80003cc:	2001      	movs	r0, #1
 80003ce:	f7ff ff58 	bl	8000282 <lcd_put_cur>
	  lcd_send_string ("WORLD!");
 80003d2:	4808      	ldr	r0, [pc, #32]	; (80003f4 <main+0x90>)
 80003d4:	f7ff ffb1 	bl	800033a <lcd_send_string>
	  HAL_Delay(1500);
 80003d8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80003dc:	f000 fa3e 	bl	800085c <HAL_Delay>
	  lcd_clear();
 80003e0:	f7ff ff38 	bl	8000254 <lcd_clear>
	  HAL_Delay(1500);
 80003e4:	e7e6      	b.n	80003b4 <main+0x50>
 80003e6:	bf00      	nop
 80003e8:	080039b0 	.word	0x080039b0
 80003ec:	080039c0 	.word	0x080039c0
 80003f0:	080039d0 	.word	0x080039d0
 80003f4:	080039d8 	.word	0x080039d8

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b090      	sub	sp, #64	; 0x40
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f003 fabe 	bl	8003988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041a:	2301      	movs	r3, #1
 800041c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800041e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000422:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042c:	2302      	movs	r3, #2
 800042e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000436:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800043a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4618      	mov	r0, r3
 8000442:	f002 fe77 	bl	8003134 <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800044c:	f000 f894 	bl	8000578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
 8000452:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2302      	movs	r3, #2
 8000456:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f003 f8e2 	bl	8003634 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000476:	f000 f87f 	bl	8000578 <Error_Handler>
  }
}
 800047a:	bf00      	nop
 800047c:	3740      	adds	r7, #64	; 0x40
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_I2C1_Init+0x50>)
 800048a:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <MX_I2C1_Init+0x54>)
 800048c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_I2C1_Init+0x50>)
 8000490:	4a12      	ldr	r2, [pc, #72]	; (80004dc <MX_I2C1_Init+0x58>)
 8000492:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_I2C1_Init+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MX_I2C1_Init+0x50>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004c2:	f000 fef1 	bl	80012a8 <HAL_I2C_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004cc:	f000 f854 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000006c 	.word	0x2000006c
 80004d8:	40005400 	.word	0x40005400
 80004dc:	000186a0 	.word	0x000186a0

080004e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_DMA_Init+0x38>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <MX_DMA_Init+0x38>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_DMA_Init+0x38>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2010      	movs	r0, #16
 8000504:	f000 faa5 	bl	8000a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000508:	2010      	movs	r0, #16
 800050a:	f000 fabe 	bl	8000a8a <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_GPIO_Init+0x58>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a13      	ldr	r2, [pc, #76]	; (8000574 <MX_GPIO_Init+0x58>)
 8000528:	f043 0320 	orr.w	r3, r3, #32
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_GPIO_Init+0x58>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0320 	and.w	r3, r3, #32
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_GPIO_Init+0x58>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <MX_GPIO_Init+0x58>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_GPIO_Init+0x58>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_GPIO_Init+0x58>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <MX_GPIO_Init+0x58>)
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <MX_GPIO_Init+0x58>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f003 0308 	and.w	r3, r3, #8
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40021000 	.word	0x40021000

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	e7fe      	b.n	8000580 <Error_Handler+0x8>
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_MspInit+0x5c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_MspInit+0x5c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_MspInit+0x5c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x5c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_MspInit+0x5c>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_MspInit+0x5c>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_MspInit+0x60>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <HAL_MspInit+0x60>)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010000 	.word	0x40010000

080005e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <HAL_I2C_MspInit+0xcc>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d151      	bne.n	80006ac <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <HAL_I2C_MspInit+0xd0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <HAL_I2C_MspInit+0xd0>)
 800060e:	f043 0308 	orr.w	r3, r3, #8
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <HAL_I2C_MspInit+0xd0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000620:	23c0      	movs	r3, #192	; 0xc0
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000624:	2312      	movs	r3, #18
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4822      	ldr	r0, [pc, #136]	; (80006bc <HAL_I2C_MspInit+0xd4>)
 8000634:	f000 fcb4 	bl	8000fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <HAL_I2C_MspInit+0xd0>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	4a1e      	ldr	r2, [pc, #120]	; (80006b8 <HAL_I2C_MspInit+0xd0>)
 800063e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000642:	61d3      	str	r3, [r2, #28]
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <HAL_I2C_MspInit+0xd0>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <HAL_I2C_MspInit+0xdc>)
 8000654:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 8000658:	2210      	movs	r2, #16
 800065a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000680:	480f      	ldr	r0, [pc, #60]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 8000682:	f000 fa1d 	bl	8000ac0 <HAL_DMA_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 800068c:	f7ff ff74 	bl	8000578 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <HAL_I2C_MspInit+0xd8>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	201f      	movs	r0, #31
 80006a2:	f000 f9d6 	bl	8000a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006a6:	201f      	movs	r0, #31
 80006a8:	f000 f9ef 	bl	8000a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40005400 	.word	0x40005400
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	20000028 	.word	0x20000028
 80006c4:	4002006c 	.word	0x4002006c

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler+0x4>

080006da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070e:	f000 f889 	bl	8000824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <DMA1_Channel6_IRQHandler+0x10>)
 800071e:	f000 faff 	bl	8000d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000028 	.word	0x20000028

0800072c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <I2C1_EV_IRQHandler+0x10>)
 8000732:	f001 f825 	bl	8001780 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000006c 	.word	0x2000006c

08000740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800074e:	490d      	ldr	r1, [pc, #52]	; (8000784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000750:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000764:	4c0a      	ldr	r4, [pc, #40]	; (8000790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000772:	f7ff ffe5 	bl	8000740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f003 f8e3 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff fdf3 	bl	8000364 <main>
  bx lr
 800077e:	4770      	bx	lr
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000788:	08003a10 	.word	0x08003a10
  ldr r2, =_sbss
 800078c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000790:	200000c4 	.word	0x200000c4

08000794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_2_IRQHandler>
	...

08000798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_Init+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <HAL_Init+0x28>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 f947 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ae:	200f      	movs	r0, #15
 80007b0:	f000 f808 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b4:	f7ff fee6 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_InitTick+0x54>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x58>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	fbb3 f3f1 	udiv	r3, r3, r1
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f95f 	bl	8000aa6 <HAL_SYSTICK_Config>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e00e      	b.n	8000810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	d80a      	bhi.n	800080e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f8:	2200      	movs	r2, #0
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000800:	f000 f927 	bl	8000a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000804:	4a06      	ldr	r2, [pc, #24]	; (8000820 <HAL_InitTick+0x5c>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
 800080c:	e000      	b.n	8000810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000000 	.word	0x20000000
 800081c:	20000008 	.word	0x20000008
 8000820:	20000004 	.word	0x20000004

08000824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_IncTick+0x1c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x20>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a03      	ldr	r2, [pc, #12]	; (8000844 <HAL_IncTick+0x20>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20000008 	.word	0x20000008
 8000844:	200000c0 	.word	0x200000c0

08000848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <HAL_GetTick+0x10>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	200000c0 	.word	0x200000c0

0800085c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000864:	f7ff fff0 	bl	8000848 <HAL_GetTick>
 8000868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000874:	d005      	beq.n	8000882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_Delay+0x44>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4413      	add	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000882:	bf00      	nop
 8000884:	f7ff ffe0 	bl	8000848 <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	429a      	cmp	r2, r3
 8000892:	d8f7      	bhi.n	8000884 <HAL_Delay+0x28>
  {
  }
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000008 	.word	0x20000008

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	db0b      	blt.n	8000932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 021f 	and.w	r2, r3, #31
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <__NVIC_EnableIRQ+0x34>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	2001      	movs	r0, #1
 800092a:	fa00 f202 	lsl.w	r2, r0, r2
 800092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	e000e100 	.word	0xe000e100

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	; (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	; 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a1c:	f7ff ff90 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff2d 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a64:	f7ff ff42 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff ff90 	bl	8000994 <NVIC_EncodePriority>
 8000a74:	4602      	mov	r2, r0
 8000a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5f 	bl	8000940 <__NVIC_SetPriority>
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff35 	bl	8000908 <__NVIC_EnableIRQ>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa2 	bl	80009f8 <SysTick_Config>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e043      	b.n	8000b5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <HAL_DMA_Init+0xa8>)
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a22      	ldr	r2, [pc, #136]	; (8000b6c <HAL_DMA_Init+0xac>)
 8000ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae6:	091b      	lsrs	r3, r3, #4
 8000ae8:	009a      	lsls	r2, r3, #2
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <HAL_DMA_Init+0xb0>)
 8000af2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2202      	movs	r2, #2
 8000af8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	bffdfff8 	.word	0xbffdfff8
 8000b6c:	cccccccd 	.word	0xcccccccd
 8000b70:	40020000 	.word	0x40020000

08000b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d101      	bne.n	8000b94 <HAL_DMA_Start_IT+0x20>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e04a      	b.n	8000c2a <HAL_DMA_Start_IT+0xb6>
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d13a      	bne.n	8000c1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2202      	movs	r2, #2
 8000baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0201 	bic.w	r2, r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f000 f9ba 	bl	8000f44 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d008      	beq.n	8000bea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f042 020e 	orr.w	r2, r2, #14
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	e00f      	b.n	8000c0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0204 	bic.w	r2, r2, #4
 8000bf8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f042 020a 	orr.w	r2, r2, #10
 8000c08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f042 0201 	orr.w	r2, r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e005      	b.n	8000c28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c24:	2302      	movs	r3, #2
 8000c26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d005      	beq.n	8000c56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	e051      	b.n	8000cfa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 020e 	bic.w	r2, r2, #14
 8000c64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 0201 	bic.w	r2, r2, #1
 8000c74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a22      	ldr	r2, [pc, #136]	; (8000d04 <HAL_DMA_Abort_IT+0xd0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d029      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0xa0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <HAL_DMA_Abort_IT+0xd4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d022      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0x9c>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <HAL_DMA_Abort_IT+0xd8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d01a      	beq.n	8000cca <HAL_DMA_Abort_IT+0x96>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <HAL_DMA_Abort_IT+0xdc>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d012      	beq.n	8000cc4 <HAL_DMA_Abort_IT+0x90>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <HAL_DMA_Abort_IT+0xe0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d00a      	beq.n	8000cbe <HAL_DMA_Abort_IT+0x8a>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1a      	ldr	r2, [pc, #104]	; (8000d18 <HAL_DMA_Abort_IT+0xe4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d102      	bne.n	8000cb8 <HAL_DMA_Abort_IT+0x84>
 8000cb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cb6:	e00e      	b.n	8000cd6 <HAL_DMA_Abort_IT+0xa2>
 8000cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cbc:	e00b      	b.n	8000cd6 <HAL_DMA_Abort_IT+0xa2>
 8000cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc2:	e008      	b.n	8000cd6 <HAL_DMA_Abort_IT+0xa2>
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	e005      	b.n	8000cd6 <HAL_DMA_Abort_IT+0xa2>
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	e002      	b.n	8000cd6 <HAL_DMA_Abort_IT+0xa2>
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	e000      	b.n	8000cd6 <HAL_DMA_Abort_IT+0xa2>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <HAL_DMA_Abort_IT+0xe8>)
 8000cd8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	4798      	blx	r3
    } 
  }
  return status;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40020008 	.word	0x40020008
 8000d08:	4002001c 	.word	0x4002001c
 8000d0c:	40020030 	.word	0x40020030
 8000d10:	40020044 	.word	0x40020044
 8000d14:	40020058 	.word	0x40020058
 8000d18:	4002006c 	.word	0x4002006c
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d04f      	beq.n	8000de8 <HAL_DMA_IRQHandler+0xc8>
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d04a      	beq.n	8000de8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d107      	bne.n	8000d70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0204 	bic.w	r2, r2, #4
 8000d6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a66      	ldr	r2, [pc, #408]	; (8000f10 <HAL_DMA_IRQHandler+0x1f0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d029      	beq.n	8000dce <HAL_DMA_IRQHandler+0xae>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a65      	ldr	r2, [pc, #404]	; (8000f14 <HAL_DMA_IRQHandler+0x1f4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d022      	beq.n	8000dca <HAL_DMA_IRQHandler+0xaa>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a63      	ldr	r2, [pc, #396]	; (8000f18 <HAL_DMA_IRQHandler+0x1f8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d01a      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0xa4>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a62      	ldr	r2, [pc, #392]	; (8000f1c <HAL_DMA_IRQHandler+0x1fc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d012      	beq.n	8000dbe <HAL_DMA_IRQHandler+0x9e>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a60      	ldr	r2, [pc, #384]	; (8000f20 <HAL_DMA_IRQHandler+0x200>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00a      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x98>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a5f      	ldr	r2, [pc, #380]	; (8000f24 <HAL_DMA_IRQHandler+0x204>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d102      	bne.n	8000db2 <HAL_DMA_IRQHandler+0x92>
 8000dac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db0:	e00e      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000db2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000db6:	e00b      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000db8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dbc:	e008      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc2:	e005      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc8:	e002      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	e000      	b.n	8000dd0 <HAL_DMA_IRQHandler+0xb0>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	4a55      	ldr	r2, [pc, #340]	; (8000f28 <HAL_DMA_IRQHandler+0x208>)
 8000dd2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 8094 	beq.w	8000f06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000de6:	e08e      	b.n	8000f06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	2202      	movs	r2, #2
 8000dee:	409a      	lsls	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d056      	beq.n	8000ea6 <HAL_DMA_IRQHandler+0x186>
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d051      	beq.n	8000ea6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0320 	and.w	r3, r3, #32
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10b      	bne.n	8000e28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 020a 	bic.w	r2, r2, #10
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a38      	ldr	r2, [pc, #224]	; (8000f10 <HAL_DMA_IRQHandler+0x1f0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d029      	beq.n	8000e86 <HAL_DMA_IRQHandler+0x166>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a37      	ldr	r2, [pc, #220]	; (8000f14 <HAL_DMA_IRQHandler+0x1f4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d022      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x162>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a35      	ldr	r2, [pc, #212]	; (8000f18 <HAL_DMA_IRQHandler+0x1f8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01a      	beq.n	8000e7c <HAL_DMA_IRQHandler+0x15c>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a34      	ldr	r2, [pc, #208]	; (8000f1c <HAL_DMA_IRQHandler+0x1fc>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d012      	beq.n	8000e76 <HAL_DMA_IRQHandler+0x156>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a32      	ldr	r2, [pc, #200]	; (8000f20 <HAL_DMA_IRQHandler+0x200>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00a      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x150>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <HAL_DMA_IRQHandler+0x204>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d102      	bne.n	8000e6a <HAL_DMA_IRQHandler+0x14a>
 8000e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e68:	e00e      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e6e:	e00b      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e74:	e008      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7a:	e005      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e80:	e002      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e82:	2320      	movs	r3, #32
 8000e84:	e000      	b.n	8000e88 <HAL_DMA_IRQHandler+0x168>
 8000e86:	2302      	movs	r3, #2
 8000e88:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <HAL_DMA_IRQHandler+0x208>)
 8000e8a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d034      	beq.n	8000f06 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ea4:	e02f      	b.n	8000f06 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	2208      	movs	r2, #8
 8000eac:	409a      	lsls	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d028      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x1e8>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d023      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 020e 	bic.w	r2, r2, #14
 8000ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f202 	lsl.w	r2, r1, r2
 8000ede:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d004      	beq.n	8000f08 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
    }
  }
  return;
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
}
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40020008 	.word	0x40020008
 8000f14:	4002001c 	.word	0x4002001c
 8000f18:	40020030 	.word	0x40020030
 8000f1c:	40020044 	.word	0x40020044
 8000f20:	40020058 	.word	0x40020058
 8000f24:	4002006c 	.word	0x4002006c
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b10      	cmp	r3, #16
 8000f70:	d108      	bne.n	8000f84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f82:	e007      	b.n	8000f94 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	60da      	str	r2, [r3, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b08b      	sub	sp, #44	; 0x2c
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb2:	e169      	b.n	8001288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 8158 	bne.w	8001282 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4a9a      	ldr	r2, [pc, #616]	; (8001240 <HAL_GPIO_Init+0x2a0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d05e      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8000fdc:	4a98      	ldr	r2, [pc, #608]	; (8001240 <HAL_GPIO_Init+0x2a0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d875      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8000fe2:	4a98      	ldr	r2, [pc, #608]	; (8001244 <HAL_GPIO_Init+0x2a4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d058      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8000fe8:	4a96      	ldr	r2, [pc, #600]	; (8001244 <HAL_GPIO_Init+0x2a4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d86f      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8000fee:	4a96      	ldr	r2, [pc, #600]	; (8001248 <HAL_GPIO_Init+0x2a8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d052      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8000ff4:	4a94      	ldr	r2, [pc, #592]	; (8001248 <HAL_GPIO_Init+0x2a8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d869      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8000ffa:	4a94      	ldr	r2, [pc, #592]	; (800124c <HAL_GPIO_Init+0x2ac>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d04c      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 8001000:	4a92      	ldr	r2, [pc, #584]	; (800124c <HAL_GPIO_Init+0x2ac>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d863      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8001006:	4a92      	ldr	r2, [pc, #584]	; (8001250 <HAL_GPIO_Init+0x2b0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d046      	beq.n	800109a <HAL_GPIO_Init+0xfa>
 800100c:	4a90      	ldr	r2, [pc, #576]	; (8001250 <HAL_GPIO_Init+0x2b0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d85d      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 8001012:	2b12      	cmp	r3, #18
 8001014:	d82a      	bhi.n	800106c <HAL_GPIO_Init+0xcc>
 8001016:	2b12      	cmp	r3, #18
 8001018:	d859      	bhi.n	80010ce <HAL_GPIO_Init+0x12e>
 800101a:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <HAL_GPIO_Init+0x80>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	0800109b 	.word	0x0800109b
 8001024:	08001075 	.word	0x08001075
 8001028:	08001087 	.word	0x08001087
 800102c:	080010c9 	.word	0x080010c9
 8001030:	080010cf 	.word	0x080010cf
 8001034:	080010cf 	.word	0x080010cf
 8001038:	080010cf 	.word	0x080010cf
 800103c:	080010cf 	.word	0x080010cf
 8001040:	080010cf 	.word	0x080010cf
 8001044:	080010cf 	.word	0x080010cf
 8001048:	080010cf 	.word	0x080010cf
 800104c:	080010cf 	.word	0x080010cf
 8001050:	080010cf 	.word	0x080010cf
 8001054:	080010cf 	.word	0x080010cf
 8001058:	080010cf 	.word	0x080010cf
 800105c:	080010cf 	.word	0x080010cf
 8001060:	080010cf 	.word	0x080010cf
 8001064:	0800107d 	.word	0x0800107d
 8001068:	08001091 	.word	0x08001091
 800106c:	4a79      	ldr	r2, [pc, #484]	; (8001254 <HAL_GPIO_Init+0x2b4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001072:	e02c      	b.n	80010ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e029      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	3304      	adds	r3, #4
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e024      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	3308      	adds	r3, #8
 800108c:	623b      	str	r3, [r7, #32]
          break;
 800108e:	e01f      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	330c      	adds	r3, #12
 8001096:	623b      	str	r3, [r7, #32]
          break;
 8001098:	e01a      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010a2:	2304      	movs	r3, #4
 80010a4:	623b      	str	r3, [r7, #32]
          break;
 80010a6:	e013      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d105      	bne.n	80010bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b0:	2308      	movs	r3, #8
 80010b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	611a      	str	r2, [r3, #16]
          break;
 80010ba:	e009      	b.n	80010d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010bc:	2308      	movs	r3, #8
 80010be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	615a      	str	r2, [r3, #20]
          break;
 80010c6:	e003      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
          break;
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x130>
          break;
 80010ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2bff      	cmp	r3, #255	; 0xff
 80010d4:	d801      	bhi.n	80010da <HAL_GPIO_Init+0x13a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	e001      	b.n	80010de <HAL_GPIO_Init+0x13e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3304      	adds	r3, #4
 80010de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d802      	bhi.n	80010ec <HAL_GPIO_Init+0x14c>
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x152>
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	3b08      	subs	r3, #8
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	210f      	movs	r1, #15
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	6a39      	ldr	r1, [r7, #32]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80b1 	beq.w	8001282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001120:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a4c      	ldr	r2, [pc, #304]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001138:	4a48      	ldr	r2, [pc, #288]	; (800125c <HAL_GPIO_Init+0x2bc>)
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a40      	ldr	r2, [pc, #256]	; (8001260 <HAL_GPIO_Init+0x2c0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d013      	beq.n	800118c <HAL_GPIO_Init+0x1ec>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3f      	ldr	r2, [pc, #252]	; (8001264 <HAL_GPIO_Init+0x2c4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00d      	beq.n	8001188 <HAL_GPIO_Init+0x1e8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a3e      	ldr	r2, [pc, #248]	; (8001268 <HAL_GPIO_Init+0x2c8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d007      	beq.n	8001184 <HAL_GPIO_Init+0x1e4>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_GPIO_Init+0x2cc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_GPIO_Init+0x1e0>
 800117c:	2303      	movs	r3, #3
 800117e:	e006      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 8001180:	2304      	movs	r3, #4
 8001182:	e004      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_GPIO_Init+0x1ee>
 800118c:	2300      	movs	r3, #0
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4093      	lsls	r3, r2
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800119e:	492f      	ldr	r1, [pc, #188]	; (800125c <HAL_GPIO_Init+0x2bc>)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	492c      	ldr	r1, [pc, #176]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4928      	ldr	r1, [pc, #160]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4922      	ldr	r1, [pc, #136]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	491e      	ldr	r1, [pc, #120]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	4918      	ldr	r1, [pc, #96]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	43db      	mvns	r3, r3
 800121e:	4914      	ldr	r1, [pc, #80]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001220:	4013      	ands	r3, r2
 8001222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d021      	beq.n	8001274 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <HAL_GPIO_Init+0x2d0>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	60cb      	str	r3, [r1, #12]
 800123c:	e021      	b.n	8001282 <HAL_GPIO_Init+0x2e2>
 800123e:	bf00      	nop
 8001240:	10320000 	.word	0x10320000
 8001244:	10310000 	.word	0x10310000
 8001248:	10220000 	.word	0x10220000
 800124c:	10210000 	.word	0x10210000
 8001250:	10120000 	.word	0x10120000
 8001254:	10110000 	.word	0x10110000
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00
 8001268:	40011000 	.word	0x40011000
 800126c:	40011400 	.word	0x40011400
 8001270:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_GPIO_Init+0x304>)
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	43db      	mvns	r3, r3
 800127c:	4909      	ldr	r1, [pc, #36]	; (80012a4 <HAL_GPIO_Init+0x304>)
 800127e:	4013      	ands	r3, r2
 8001280:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	3301      	adds	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	f47f ae8e 	bne.w	8000fb4 <HAL_GPIO_Init+0x14>
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	372c      	adds	r7, #44	; 0x2c
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40010400 	.word	0x40010400

080012a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e12b      	b.n	8001512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d106      	bne.n	80012d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f98a 	bl	80005e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2224      	movs	r2, #36	; 0x24
 80012d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800130a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800130c:	f002 fae6 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 8001310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a81      	ldr	r2, [pc, #516]	; (800151c <HAL_I2C_Init+0x274>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d807      	bhi.n	800132c <HAL_I2C_Init+0x84>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a80      	ldr	r2, [pc, #512]	; (8001520 <HAL_I2C_Init+0x278>)
 8001320:	4293      	cmp	r3, r2
 8001322:	bf94      	ite	ls
 8001324:	2301      	movls	r3, #1
 8001326:	2300      	movhi	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	e006      	b.n	800133a <HAL_I2C_Init+0x92>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4a7d      	ldr	r2, [pc, #500]	; (8001524 <HAL_I2C_Init+0x27c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	bf94      	ite	ls
 8001334:	2301      	movls	r3, #1
 8001336:	2300      	movhi	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e0e7      	b.n	8001512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4a78      	ldr	r2, [pc, #480]	; (8001528 <HAL_I2C_Init+0x280>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9b      	lsrs	r3, r3, #18
 800134c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a6a      	ldr	r2, [pc, #424]	; (800151c <HAL_I2C_Init+0x274>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d802      	bhi.n	800137c <HAL_I2C_Init+0xd4>
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3301      	adds	r3, #1
 800137a:	e009      	b.n	8001390 <HAL_I2C_Init+0xe8>
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	4a69      	ldr	r2, [pc, #420]	; (800152c <HAL_I2C_Init+0x284>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	099b      	lsrs	r3, r3, #6
 800138e:	3301      	adds	r3, #1
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	430b      	orrs	r3, r1
 8001396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	495c      	ldr	r1, [pc, #368]	; (800151c <HAL_I2C_Init+0x274>)
 80013ac:	428b      	cmp	r3, r1
 80013ae:	d819      	bhi.n	80013e4 <HAL_I2C_Init+0x13c>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1e59      	subs	r1, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80013be:	1c59      	adds	r1, r3, #1
 80013c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013c4:	400b      	ands	r3, r1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00a      	beq.n	80013e0 <HAL_I2C_Init+0x138>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1e59      	subs	r1, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d8:	3301      	adds	r3, #1
 80013da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013de:	e051      	b.n	8001484 <HAL_I2C_Init+0x1dc>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e04f      	b.n	8001484 <HAL_I2C_Init+0x1dc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d111      	bne.n	8001410 <HAL_I2C_Init+0x168>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1e58      	subs	r0, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	440b      	add	r3, r1
 80013fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	e012      	b.n	8001436 <HAL_I2C_Init+0x18e>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	0099      	lsls	r1, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	fbb0 f3f3 	udiv	r3, r0, r3
 8001426:	3301      	adds	r3, #1
 8001428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_Init+0x196>
 800143a:	2301      	movs	r3, #1
 800143c:	e022      	b.n	8001484 <HAL_I2C_Init+0x1dc>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10e      	bne.n	8001464 <HAL_I2C_Init+0x1bc>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1e58      	subs	r0, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6859      	ldr	r1, [r3, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	440b      	add	r3, r1
 8001454:	fbb0 f3f3 	udiv	r3, r0, r3
 8001458:	3301      	adds	r3, #1
 800145a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800145e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001462:	e00f      	b.n	8001484 <HAL_I2C_Init+0x1dc>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1e58      	subs	r0, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	0099      	lsls	r1, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	fbb0 f3f3 	udiv	r3, r0, r3
 800147a:	3301      	adds	r3, #1
 800147c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	6809      	ldr	r1, [r1, #0]
 8001488:	4313      	orrs	r3, r2
 800148a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69da      	ldr	r2, [r3, #28]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6911      	ldr	r1, [r2, #16]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68d2      	ldr	r2, [r2, #12]
 80014be:	4311      	orrs	r1, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	000186a0 	.word	0x000186a0
 8001520:	001e847f 	.word	0x001e847f
 8001524:	003d08ff 	.word	0x003d08ff
 8001528:	431bde83 	.word	0x431bde83
 800152c:	10624dd3 	.word	0x10624dd3

08001530 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	460b      	mov	r3, r1
 800153e:	817b      	strh	r3, [r7, #10]
 8001540:	4613      	mov	r3, r2
 8001542:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b20      	cmp	r3, #32
 8001552:	f040 8105 	bne.w	8001760 <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001556:	4b85      	ldr	r3, [pc, #532]	; (800176c <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	08db      	lsrs	r3, r3, #3
 800155c:	4a84      	ldr	r2, [pc, #528]	; (8001770 <HAL_I2C_Master_Transmit_DMA+0x240>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0a1a      	lsrs	r2, r3, #8
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	009a      	lsls	r2, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	3b01      	subs	r3, #1
 8001574:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d116      	bne.n	80015aa <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2200      	movs	r2, #0
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2220      	movs	r2, #32
 8001586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f043 0220 	orr.w	r2, r3, #32
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0db      	b.n	8001762 <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d0db      	beq.n	8001570 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_I2C_Master_Transmit_DMA+0x96>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e0cd      	b.n	8001762 <HAL_I2C_Master_Transmit_DMA+0x232>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d007      	beq.n	80015ec <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2221      	movs	r2, #33	; 0x21
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2210      	movs	r2, #16
 8001608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	893a      	ldrh	r2, [r7, #8]
 800161c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a52      	ldr	r2, [pc, #328]	; (8001774 <HAL_I2C_Master_Transmit_DMA+0x244>)
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800162e:	897a      	ldrh	r2, [r7, #10]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001638:	2b00      	cmp	r3, #0
 800163a:	d073      	beq.n	8001724 <HAL_I2C_Master_Transmit_DMA+0x1f4>
    {
      if (hi2c->hdmatx != NULL)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001640:	2b00      	cmp	r3, #0
 8001642:	d022      	beq.n	800168a <HAL_I2C_Master_Transmit_DMA+0x15a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <HAL_I2C_Master_Transmit_DMA+0x248>)
 800164a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001650:	4a4a      	ldr	r2, [pc, #296]	; (800177c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8001652:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001658:	2200      	movs	r2, #0
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001660:	2200      	movs	r2, #0
 8001662:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3310      	adds	r3, #16
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167a:	f7ff fa7b 	bl	8000b74 <HAL_DMA_Start_IT>
 800167e:	4603      	mov	r3, r0
 8001680:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d139      	bne.n	80016fc <HAL_I2C_Master_Transmit_DMA+0x1cc>
 8001688:	e013      	b.n	80016b2 <HAL_I2C_Master_Transmit_DMA+0x182>
        hi2c->State     = HAL_I2C_STATE_READY;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e057      	b.n	8001762 <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80016c8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016d8:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016e8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e02f      	b.n	800175c <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2220      	movs	r2, #32
 8001700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e01e      	b.n	8001762 <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001732:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001742:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800175a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	e000      	b.n	8001762 <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8001760:	2302      	movs	r3, #2
  }
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000
 8001770:	14f8b589 	.word	0x14f8b589
 8001774:	ffff0000 	.word	0xffff0000
 8001778:	08002d35 	.word	0x08002d35
 800177c:	08002edf 	.word	0x08002edf

08001780 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d003      	beq.n	80017b8 <HAL_I2C_EV_IRQHandler+0x38>
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b40      	cmp	r3, #64	; 0x40
 80017b4:	f040 80c1 	bne.w	800193a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10d      	bne.n	80017ee <HAL_I2C_EV_IRQHandler+0x6e>
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80017d8:	d003      	beq.n	80017e2 <HAL_I2C_EV_IRQHandler+0x62>
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80017e0:	d101      	bne.n	80017e6 <HAL_I2C_EV_IRQHandler+0x66>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_I2C_EV_IRQHandler+0x68>
 80017e6:	2300      	movs	r3, #0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	f000 8132 	beq.w	8001a52 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00c      	beq.n	8001812 <HAL_I2C_EV_IRQHandler+0x92>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	0a5b      	lsrs	r3, r3, #9
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f001 fc7b 	bl	8003100 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fce0 	bl	80021d0 <I2C_Master_SB>
 8001810:	e092      	b.n	8001938 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	08db      	lsrs	r3, r3, #3
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_I2C_EV_IRQHandler+0xb2>
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	0a5b      	lsrs	r3, r3, #9
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fd55 	bl	80022da <I2C_Master_ADD10>
 8001830:	e082      	b.n	8001938 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_I2C_EV_IRQHandler+0xd2>
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	0a5b      	lsrs	r3, r3, #9
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fd6e 	bl	800232c <I2C_Master_ADDR>
 8001850:	e072      	b.n	8001938 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d03b      	beq.n	80018d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800186c:	f000 80f3 	beq.w	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	09db      	lsrs	r3, r3, #7
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00f      	beq.n	800189c <HAL_I2C_EV_IRQHandler+0x11c>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	0a9b      	lsrs	r3, r3, #10
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <HAL_I2C_EV_IRQHandler+0x11c>
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d103      	bne.n	800189c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f95a 	bl	8001b4e <I2C_MasterTransmit_TXE>
 800189a:	e04d      	b.n	8001938 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80d6 	beq.w	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	0a5b      	lsrs	r3, r3, #9
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80cf 	beq.w	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	2b21      	cmp	r3, #33	; 0x21
 80018bc:	d103      	bne.n	80018c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f9e1 	bl	8001c86 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018c4:	e0c7      	b.n	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b40      	cmp	r3, #64	; 0x40
 80018ca:	f040 80c4 	bne.w	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fa4f 	bl	8001d72 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d4:	e0bf      	b.n	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e4:	f000 80b7 	beq.w	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <HAL_I2C_EV_IRQHandler+0x194>
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <HAL_I2C_EV_IRQHandler+0x194>
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d103      	bne.n	8001914 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 fac4 	bl	8001e9a <I2C_MasterReceive_RXNE>
 8001912:	e011      	b.n	8001938 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 809a 	beq.w	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	0a5b      	lsrs	r3, r3, #9
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8093 	beq.w	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fb63 	bl	8001ffc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001936:	e08e      	b.n	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001938:	e08d      	b.n	8001a56 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e007      	b.n	800195c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d012      	beq.n	800198e <HAL_I2C_EV_IRQHandler+0x20e>
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	0a5b      	lsrs	r3, r3, #9
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00c      	beq.n	800198e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001984:	69b9      	ldr	r1, [r7, #24]
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 ff27 	bl	80027da <I2C_Slave_ADDR>
 800198c:	e066      	b.n	8001a5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_I2C_EV_IRQHandler+0x22e>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	0a5b      	lsrs	r3, r3, #9
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 ff62 	bl	8002870 <I2C_Slave_STOPF>
 80019ac:	e056      	b.n	8001a5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	2b21      	cmp	r3, #33	; 0x21
 80019b2:	d002      	beq.n	80019ba <HAL_I2C_EV_IRQHandler+0x23a>
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	2b29      	cmp	r3, #41	; 0x29
 80019b8:	d125      	bne.n	8001a06 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	09db      	lsrs	r3, r3, #7
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00f      	beq.n	80019e6 <HAL_I2C_EV_IRQHandler+0x266>
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	0a9b      	lsrs	r3, r3, #10
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_I2C_EV_IRQHandler+0x266>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d103      	bne.n	80019e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fe3f 	bl	8002662 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019e4:	e039      	b.n	8001a5a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d033      	beq.n	8001a5a <HAL_I2C_EV_IRQHandler+0x2da>
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	0a5b      	lsrs	r3, r3, #9
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d02d      	beq.n	8001a5a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fe6c 	bl	80026dc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a04:	e029      	b.n	8001a5a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	099b      	lsrs	r3, r3, #6
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00f      	beq.n	8001a32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	0a9b      	lsrs	r3, r3, #10
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fe76 	bl	800271c <I2C_SlaveReceive_RXNE>
 8001a30:	e014      	b.n	8001a5c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00e      	beq.n	8001a5c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	0a5b      	lsrs	r3, r3, #9
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fea4 	bl	8002798 <I2C_SlaveReceive_BTF>
 8001a50:	e004      	b.n	8001a5c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001a52:	bf00      	nop
 8001a54:	e002      	b.n	8001a5c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a56:	bf00      	nop
 8001a58:	e000      	b.n	8001a5c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	70fb      	strb	r3, [r7, #3]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b64:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d150      	bne.n	8001c16 <I2C_MasterTransmit_TXE+0xc8>
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b21      	cmp	r3, #33	; 0x21
 8001b78:	d14d      	bne.n	8001c16 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d01d      	beq.n	8001bbc <I2C_MasterTransmit_TXE+0x6e>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d01a      	beq.n	8001bbc <I2C_MasterTransmit_TXE+0x6e>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b8c:	d016      	beq.n	8001bbc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b9c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2211      	movs	r2, #17
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff54 	bl	8001a62 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bba:	e060      	b.n	8001c7e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bda:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d107      	bne.n	8001c06 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff69 	bl	8001ad6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c04:	e03b      	b.n	8001c7e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ff27 	bl	8001a62 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c14:	e033      	b.n	8001c7e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b21      	cmp	r3, #33	; 0x21
 8001c1a:	d005      	beq.n	8001c28 <I2C_MasterTransmit_TXE+0xda>
 8001c1c:	7bbb      	ldrb	r3, [r7, #14]
 8001c1e:	2b40      	cmp	r3, #64	; 0x40
 8001c20:	d12d      	bne.n	8001c7e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	2b22      	cmp	r3, #34	; 0x22
 8001c26:	d12a      	bne.n	8001c7e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d108      	bne.n	8001c44 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c40:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001c42:	e01c      	b.n	8001c7e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b40      	cmp	r3, #64	; 0x40
 8001c4e:	d103      	bne.n	8001c58 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f88e 	bl	8001d72 <I2C_MemoryTransmit_TXE_BTF>
}
 8001c56:	e012      	b.n	8001c7e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c7c:	e7ff      	b.n	8001c7e <I2C_MasterTransmit_TXE+0x130>
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b21      	cmp	r3, #33	; 0x21
 8001c9e:	d164      	bne.n	8001d6a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d012      	beq.n	8001cd0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	781a      	ldrb	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001cce:	e04c      	b.n	8001d6a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d01d      	beq.n	8001d12 <I2C_MasterTransmit_BTF+0x8c>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d01a      	beq.n	8001d12 <I2C_MasterTransmit_BTF+0x8c>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ce2:	d016      	beq.n	8001d12 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cf2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2211      	movs	r2, #17
 8001cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fea9 	bl	8001a62 <HAL_I2C_MasterTxCpltCallback>
}
 8001d10:	e02b      	b.n	8001d6a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d20:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d30:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b40      	cmp	r3, #64	; 0x40
 8001d4a:	d107      	bne.n	8001d5c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff febe 	bl	8001ad6 <HAL_I2C_MemTxCpltCallback>
}
 8001d5a:	e006      	b.n	8001d6a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fe7c 	bl	8001a62 <HAL_I2C_MasterTxCpltCallback>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d11d      	bne.n	8001dc6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10b      	bne.n	8001daa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da2:	1c9a      	adds	r2, r3, #2
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001da8:	e073      	b.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	121b      	asrs	r3, r3, #8
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dc4:	e065      	b.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10b      	bne.n	8001de6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001de4:	e055      	b.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d151      	bne.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b22      	cmp	r3, #34	; 0x22
 8001df2:	d10d      	bne.n	8001e10 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e02:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e0e:	e040      	b.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2b21      	cmp	r3, #33	; 0x21
 8001e1e:	d112      	bne.n	8001e46 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e44:	e025      	b.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d120      	bne.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b21      	cmp	r3, #33	; 0x21
 8001e54:	d11d      	bne.n	8001e92 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e64:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e74:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fe22 	bl	8001ad6 <HAL_I2C_MemTxCpltCallback>
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b22      	cmp	r3, #34	; 0x22
 8001eac:	f040 80a2 	bne.w	8001ff4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d921      	bls.n	8001f02 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	f040 8082 	bne.w	8001ff4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001efe:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001f00:	e078      	b.n	8001ff4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d074      	beq.n	8001ff4 <I2C_MasterReceive_RXNE+0x15a>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d002      	beq.n	8001f16 <I2C_MasterReceive_RXNE+0x7c>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d16e      	bne.n	8001ff4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f001 f8c0 	bl	800309c <I2C_WaitOnSTOPRequestThroughIT>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d142      	bne.n	8001fa8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f30:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f40:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b40      	cmp	r3, #64	; 0x40
 8001f7a:	d10a      	bne.n	8001f92 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fdac 	bl	8001ae8 <HAL_I2C_MemRxCpltCallback>
}
 8001f90:	e030      	b.n	8001ff4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2212      	movs	r2, #18
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fd67 	bl	8001a74 <HAL_I2C_MasterRxCpltCallback>
}
 8001fa6:	e025      	b.n	8001ff4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fd83 	bl	8001afa <HAL_I2C_ErrorCallback>
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b04      	cmp	r3, #4
 8002012:	d11b      	bne.n	800204c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002022:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800204a:	e0bd      	b.n	80021c8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b03      	cmp	r3, #3
 8002054:	d129      	bne.n	80020aa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002064:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d00a      	beq.n	8002082 <I2C_MasterReceive_BTF+0x86>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d007      	beq.n	8002082 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002080:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020a8:	e08e      	b.n	80021c8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d176      	bne.n	80021a2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d002      	beq.n	80020c0 <I2C_MasterReceive_BTF+0xc4>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d108      	bne.n	80020d2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e019      	b.n	8002106 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d002      	beq.n	80020de <I2C_MasterReceive_BTF+0xe2>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d108      	bne.n	80020f0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e00a      	b.n	8002106 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d007      	beq.n	8002106 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002104:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002160:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d10a      	bne.n	800218c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fcaf 	bl	8001ae8 <HAL_I2C_MemRxCpltCallback>
}
 800218a:	e01d      	b.n	80021c8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2212      	movs	r2, #18
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fc6a 	bl	8001a74 <HAL_I2C_MasterRxCpltCallback>
}
 80021a0:	e012      	b.n	80021c8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d117      	bne.n	8002214 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021fc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80021fe:	e067      	b.n	80022d0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	b2da      	uxtb	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	611a      	str	r2, [r3, #16]
}
 8002212:	e05d      	b.n	80022d0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800221c:	d133      	bne.n	8002286 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b21      	cmp	r3, #33	; 0x21
 8002228:	d109      	bne.n	800223e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800223a:	611a      	str	r2, [r3, #16]
 800223c:	e008      	b.n	8002250 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <I2C_Master_SB+0x92>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	2b00      	cmp	r3, #0
 8002268:	d032      	beq.n	80022d0 <I2C_Master_SB+0x100>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02d      	beq.n	80022d0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002282:	605a      	str	r2, [r3, #4]
}
 8002284:	e024      	b.n	80022d0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10e      	bne.n	80022ac <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	b29b      	uxth	r3, r3
 8002294:	11db      	asrs	r3, r3, #7
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f003 0306 	and.w	r3, r3, #6
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f063 030f 	orn	r3, r3, #15
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	611a      	str	r2, [r3, #16]
}
 80022aa:	e011      	b.n	80022d0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10d      	bne.n	80022d0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	11db      	asrs	r3, r3, #7
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 0306 	and.w	r3, r3, #6
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f063 030e 	orn	r3, r3, #14
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	611a      	str	r2, [r3, #16]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <I2C_Master_ADD10+0x26>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d108      	bne.n	8002312 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <I2C_Master_ADD10+0x48>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002320:	605a      	str	r2, [r3, #4]
  }
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800232c:	b480      	push	{r7}
 800232e:	b091      	sub	sp, #68	; 0x44
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800233a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b22      	cmp	r3, #34	; 0x22
 8002354:	f040 8174 	bne.w	8002640 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10f      	bne.n	8002380 <I2C_Master_ADDR+0x54>
 8002360:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002364:	2b40      	cmp	r3, #64	; 0x40
 8002366:	d10b      	bne.n	8002380 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002368:	2300      	movs	r3, #0
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	e16b      	b.n	8002658 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002384:	2b00      	cmp	r3, #0
 8002386:	d11d      	bne.n	80023c4 <I2C_Master_ADDR+0x98>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002390:	d118      	bne.n	80023c4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002392:	2300      	movs	r3, #0
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	651a      	str	r2, [r3, #80]	; 0x50
 80023c2:	e149      	b.n	8002658 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d113      	bne.n	80023f6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ce:	2300      	movs	r3, #0
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e120      	b.n	8002638 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	f040 808a 	bne.w	8002516 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002404:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002408:	d137      	bne.n	800247a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002418:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002428:	d113      	bne.n	8002452 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002438:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	e0f2      	b.n	8002638 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e0de      	b.n	8002638 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	2b08      	cmp	r3, #8
 800247e:	d02e      	beq.n	80024de <I2C_Master_ADDR+0x1b2>
 8002480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002482:	2b20      	cmp	r3, #32
 8002484:	d02b      	beq.n	80024de <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002488:	2b12      	cmp	r3, #18
 800248a:	d102      	bne.n	8002492 <I2C_Master_ADDR+0x166>
 800248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248e:	2b01      	cmp	r3, #1
 8002490:	d125      	bne.n	80024de <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002494:	2b04      	cmp	r3, #4
 8002496:	d00e      	beq.n	80024b6 <I2C_Master_ADDR+0x18a>
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	2b02      	cmp	r3, #2
 800249c:	d00b      	beq.n	80024b6 <I2C_Master_ADDR+0x18a>
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d008      	beq.n	80024b6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e007      	b.n	80024c6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	e0ac      	b.n	8002638 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ec:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e090      	b.n	8002638 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d158      	bne.n	80025d2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002522:	2b04      	cmp	r3, #4
 8002524:	d021      	beq.n	800256a <I2C_Master_ADDR+0x23e>
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	2b02      	cmp	r3, #2
 800252a:	d01e      	beq.n	800256a <I2C_Master_ADDR+0x23e>
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	2b10      	cmp	r3, #16
 8002530:	d01b      	beq.n	800256a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002540:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e012      	b.n	8002590 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002578:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259e:	d14b      	bne.n	8002638 <I2C_Master_ADDR+0x30c>
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025a6:	d00b      	beq.n	80025c0 <I2C_Master_ADDR+0x294>
 80025a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d008      	beq.n	80025c0 <I2C_Master_ADDR+0x294>
 80025ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d005      	beq.n	80025c0 <I2C_Master_ADDR+0x294>
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d002      	beq.n	80025c0 <I2C_Master_ADDR+0x294>
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d13b      	bne.n	8002638 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	e032      	b.n	8002638 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025f0:	d117      	bne.n	8002622 <I2C_Master_ADDR+0x2f6>
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f8:	d00b      	beq.n	8002612 <I2C_Master_ADDR+0x2e6>
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d008      	beq.n	8002612 <I2C_Master_ADDR+0x2e6>
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	2b08      	cmp	r3, #8
 8002604:	d005      	beq.n	8002612 <I2C_Master_ADDR+0x2e6>
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	2b10      	cmp	r3, #16
 800260a:	d002      	beq.n	8002612 <I2C_Master_ADDR+0x2e6>
 800260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260e:	2b20      	cmp	r3, #32
 8002610:	d107      	bne.n	8002622 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002620:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800263e:	e00b      	b.n	8002658 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
}
 8002656:	e7ff      	b.n	8002658 <I2C_Master_ADDR+0x32c>
 8002658:	bf00      	nop
 800265a:	3744      	adds	r7, #68	; 0x44
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02b      	beq.n	80026d4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d114      	bne.n	80026d4 <I2C_SlaveTransmit_TXE+0x72>
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b29      	cmp	r3, #41	; 0x29
 80026ae:	d111      	bne.n	80026d4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2221      	movs	r2, #33	; 0x21
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2228      	movs	r2, #40	; 0x28
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff f9d9 	bl	8001a86 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02c      	beq.n	8002790 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d114      	bne.n	8002790 <I2C_SlaveReceive_RXNE+0x74>
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b2a      	cmp	r3, #42	; 0x2a
 800276a:	d111      	bne.n	8002790 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2222      	movs	r2, #34	; 0x22
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2228      	movs	r2, #40	; 0x28
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff f984 	bl	8001a98 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027f4:	2b28      	cmp	r3, #40	; 0x28
 80027f6:	d127      	bne.n	8002848 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002806:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	09db      	lsrs	r3, r3, #7
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	81bb      	strh	r3, [r7, #12]
 800282a:	e002      	b.n	8002832 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800283a:	89ba      	ldrh	r2, [r7, #12]
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff f932 	bl	8001aaa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002846:	e00e      	b.n	8002866 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800288e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028cc:	d172      	bne.n	80029b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b22      	cmp	r3, #34	; 0x22
 80028d2:	d002      	beq.n	80028da <I2C_Slave_STOPF+0x6a>
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b2a      	cmp	r3, #42	; 0x2a
 80028d8:	d135      	bne.n	8002946 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fb0a 	bl	8000f2c <HAL_DMA_GetState>
 8002918:	4603      	mov	r3, r0
 800291a:	2b01      	cmp	r3, #1
 800291c:	d049      	beq.n	80029b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <I2C_Slave_STOPF+0x258>)
 8002924:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe f982 	bl	8000c34 <HAL_DMA_Abort_IT>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03d      	beq.n	80029b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002940:	4610      	mov	r0, r2
 8002942:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002944:	e035      	b.n	80029b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f043 0204 	orr.w	r2, r3, #4
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002978:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fad4 	bl	8000f2c <HAL_DMA_GetState>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d014      	beq.n	80029b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	4a4e      	ldr	r2, [pc, #312]	; (8002ac8 <I2C_Slave_STOPF+0x258>)
 8002990:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe f94c 	bl	8000c34 <HAL_DMA_Abort_IT>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ac:	4610      	mov	r0, r2
 80029ae:	4798      	blx	r3
 80029b0:	e000      	b.n	80029b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d03e      	beq.n	8002a3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d112      	bne.n	80029f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b40      	cmp	r3, #64	; 0x40
 80029fe:	d112      	bne.n	8002a26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f843 	bl	8002ad0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002a4a:	e039      	b.n	8002ac0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a50:	d109      	bne.n	8002a66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2228      	movs	r2, #40	; 0x28
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff f819 	bl	8001a98 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b28      	cmp	r3, #40	; 0x28
 8002a70:	d111      	bne.n	8002a96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a15      	ldr	r2, [pc, #84]	; (8002acc <I2C_Slave_STOPF+0x25c>)
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff f818 	bl	8001ac4 <HAL_I2C_ListenCpltCallback>
}
 8002a94:	e014      	b.n	8002ac0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	2b22      	cmp	r3, #34	; 0x22
 8002a9c:	d002      	beq.n	8002aa4 <I2C_Slave_STOPF+0x234>
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b22      	cmp	r3, #34	; 0x22
 8002aa2:	d10d      	bne.n	8002ac0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe ffec 	bl	8001a98 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	08002f4d 	.word	0x08002f4d
 8002acc:	ffff0000 	.word	0xffff0000

08002ad0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ae8:	7bbb      	ldrb	r3, [r7, #14]
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d002      	beq.n	8002af4 <I2C_ITError+0x24>
 8002aee:	7bbb      	ldrb	r3, [r7, #14]
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d10a      	bne.n	8002b0a <I2C_ITError+0x3a>
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b22      	cmp	r3, #34	; 0x22
 8002af8:	d107      	bne.n	8002b0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b10:	2b28      	cmp	r3, #40	; 0x28
 8002b12:	d107      	bne.n	8002b24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2228      	movs	r2, #40	; 0x28
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b22:	e015      	b.n	8002b50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b32:	d00a      	beq.n	8002b4a <I2C_ITError+0x7a>
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b60      	cmp	r3, #96	; 0x60
 8002b38:	d007      	beq.n	8002b4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5e:	d161      	bne.n	8002c24 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d020      	beq.n	8002bbe <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b80:	4a6a      	ldr	r2, [pc, #424]	; (8002d2c <I2C_ITError+0x25c>)
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe f853 	bl	8000c34 <HAL_DMA_Abort_IT>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8089 	beq.w	8002ca8 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4798      	blx	r3
 8002bbc:	e074      	b.n	8002ca8 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	4a5a      	ldr	r2, [pc, #360]	; (8002d2c <I2C_ITError+0x25c>)
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe f832 	bl	8000c34 <HAL_DMA_Abort_IT>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d068      	beq.n	8002ca8 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d10b      	bne.n	8002bfc <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4798      	blx	r3
 8002c22:	e041      	b.n	8002ca8 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b60      	cmp	r3, #96	; 0x60
 8002c2e:	d125      	bne.n	8002c7c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d10b      	bne.n	8002c64 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7fe ff49 	bl	8001b0c <HAL_I2C_AbortCpltCallback>
 8002c7a:	e015      	b.n	8002ca8 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d10b      	bne.n	8002ca2 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe ff29 	bl	8001afa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10e      	bne.n	8002cd6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ce4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cec:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d113      	bne.n	8002d22 <I2C_ITError+0x252>
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b28      	cmp	r3, #40	; 0x28
 8002cfe:	d110      	bne.n	8002d22 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <I2C_ITError+0x260>)
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7fe fed1 	bl	8001ac4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	08002f4d 	.word	0x08002f4d
 8002d30:	ffff0000 	.word	0xffff0000

08002d34 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d50:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d66:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d8e:	2b21      	cmp	r3, #33	; 0x21
 8002d90:	d007      	beq.n	8002da2 <I2C_DMAXferCplt+0x6e>
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8002d98:	2b22      	cmp	r3, #34	; 0x22
 8002d9a:	d131      	bne.n	8002e00 <I2C_DMAXferCplt+0xcc>
 8002d9c:	7cbb      	ldrb	r3, [r7, #18]
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d12e      	bne.n	8002e00 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b29      	cmp	r3, #41	; 0x29
 8002dbc:	d10a      	bne.n	8002dd4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2221      	movs	r2, #33	; 0x21
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2228      	movs	r2, #40	; 0x28
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dcc:	6978      	ldr	r0, [r7, #20]
 8002dce:	f7fe fe5a 	bl	8001a86 <HAL_I2C_SlaveTxCpltCallback>
 8002dd2:	e00c      	b.n	8002dee <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd8:	d109      	bne.n	8002dee <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2222      	movs	r2, #34	; 0x22
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2228      	movs	r2, #40	; 0x28
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f7fe fe55 	bl	8001a98 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002dfc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002dfe:	e06a      	b.n	8002ed6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d064      	beq.n	8002ed6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d107      	bne.n	8002e26 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e24:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e34:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e3c:	d009      	beq.n	8002e52 <I2C_DMAXferCplt+0x11e>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d006      	beq.n	8002e52 <I2C_DMAXferCplt+0x11e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e4a:	d002      	beq.n	8002e52 <I2C_DMAXferCplt+0x11e>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d107      	bne.n	8002e62 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e60:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e70:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e80:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8002e90:	6978      	ldr	r0, [r7, #20]
 8002e92:	f7fe fe32 	bl	8001afa <HAL_I2C_ErrorCallback>
}
 8002e96:	e01e      	b.n	8002ed6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d10a      	bne.n	8002ec2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f7fe fe14 	bl	8001ae8 <HAL_I2C_MemRxCpltCallback>
}
 8002ec0:	e009      	b.n	8002ed6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2212      	movs	r2, #18
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f7fe fdcf 	bl	8001a74 <HAL_I2C_MasterRxCpltCallback>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	2200      	movs	r2, #0
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f043 0210 	orr.w	r2, r3, #16
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7fe fddb 	bl	8001afa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f66:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <I2C_DMAAbort+0x148>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	08db      	lsrs	r3, r3, #3
 8002f6c:	4a4a      	ldr	r2, [pc, #296]	; (8003098 <I2C_DMAAbort+0x14c>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0a1a      	lsrs	r2, r3, #8
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00da      	lsls	r2, r3, #3
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f043 0220 	orr.w	r2, r3, #32
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002f92:	e00a      	b.n	8002faa <I2C_DMAAbort+0x5e>
    }
    count--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d0ea      	beq.n	8002f80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	2200      	movs	r2, #0
 8002fee:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b60      	cmp	r3, #96	; 0x60
 800301a:	d10e      	bne.n	800303a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7fe fd6a 	bl	8001b0c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003038:	e027      	b.n	800308a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003040:	2b28      	cmp	r3, #40	; 0x28
 8003042:	d117      	bne.n	8003074 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003062:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2228      	movs	r2, #40	; 0x28
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003072:	e007      	b.n	8003084 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003084:	6978      	ldr	r0, [r7, #20]
 8003086:	f7fe fd38 	bl	8001afa <HAL_I2C_ErrorCallback>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000
 8003098:	14f8b589 	.word	0x14f8b589

0800309c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80030a8:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	4a13      	ldr	r2, [pc, #76]	; (80030fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	0a1a      	lsrs	r2, r3, #8
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d107      	bne.n	80030da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e008      	b.n	80030ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e8:	d0e9      	beq.n	80030be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000000 	.word	0x20000000
 80030fc:	14f8b589 	.word	0x14f8b589

08003100 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003110:	d103      	bne.n	800311a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003118:	e007      	b.n	800312a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003122:	d102      	bne.n	800312a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2208      	movs	r2, #8
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e26c      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8087 	beq.w	8003262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003154:	4b92      	ldr	r3, [pc, #584]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00c      	beq.n	800317a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003160:	4b8f      	ldr	r3, [pc, #572]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d112      	bne.n	8003192 <HAL_RCC_OscConfig+0x5e>
 800316c:	4b8c      	ldr	r3, [pc, #560]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d10b      	bne.n	8003192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317a:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06c      	beq.n	8003260 <HAL_RCC_OscConfig+0x12c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d168      	bne.n	8003260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e246      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x76>
 800319c:	4b80      	ldr	r3, [pc, #512]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a7f      	ldr	r2, [pc, #508]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e02e      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b7b      	ldr	r3, [pc, #492]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7a      	ldr	r2, [pc, #488]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a77      	ldr	r2, [pc, #476]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e01d      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0xbc>
 80031d6:	4b72      	ldr	r3, [pc, #456]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a71      	ldr	r2, [pc, #452]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6e      	ldr	r2, [pc, #440]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031f0:	4b6b      	ldr	r3, [pc, #428]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6a      	ldr	r2, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a67      	ldr	r2, [pc, #412]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fd fb1a 	bl	8000848 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fd fb16 	bl	8000848 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1fa      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xe4>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fd fb06 	bl	8000848 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003240:	f7fd fb02 	bl	8000848 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1e6      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x10c>
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800326e:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800327a:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x18c>
 8003286:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x176>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e1ba      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4939      	ldr	r1, [pc, #228]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	e03a      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCC_OscConfig+0x270>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fd fabb 	bl	8000848 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7fd fab7 	bl	8000848 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e19b      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4927      	ldr	r1, [pc, #156]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
 8003308:	e015      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <HAL_RCC_OscConfig+0x270>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fd fa9a 	bl	8000848 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003318:	f7fd fa96 	bl	8000848 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e17a      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d03a      	beq.n	80033b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d019      	beq.n	800337e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_RCC_OscConfig+0x274>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003350:	f7fd fa7a 	bl	8000848 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003358:	f7fd fa76 	bl	8000848 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e15a      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003376:	2001      	movs	r0, #1
 8003378:	f000 fac4 	bl	8003904 <RCC_Delay>
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCC_OscConfig+0x274>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7fd fa60 	bl	8000848 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338a:	e00f      	b.n	80033ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7fd fa5c 	bl	8000848 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d908      	bls.n	80033ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e140      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	42420000 	.word	0x42420000
 80033a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	4b9e      	ldr	r3, [pc, #632]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e9      	bne.n	800338c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a6 	beq.w	8003512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b97      	ldr	r3, [pc, #604]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b94      	ldr	r3, [pc, #592]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a93      	ldr	r2, [pc, #588]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	61d3      	str	r3, [r2, #28]
 80033e2:	4b91      	ldr	r3, [pc, #580]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	4b8e      	ldr	r3, [pc, #568]	; (800362c <HAL_RCC_OscConfig+0x4f8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fe:	4b8b      	ldr	r3, [pc, #556]	; (800362c <HAL_RCC_OscConfig+0x4f8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a8a      	ldr	r2, [pc, #552]	; (800362c <HAL_RCC_OscConfig+0x4f8>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7fd fa1d 	bl	8000848 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7fd fa19 	bl	8000848 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b64      	cmp	r3, #100	; 0x64
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0fd      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b81      	ldr	r3, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x4f8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x312>
 8003438:	4b7b      	ldr	r3, [pc, #492]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a7a      	ldr	r2, [pc, #488]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	e02d      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x334>
 800344e:	4b76      	ldr	r3, [pc, #472]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4a75      	ldr	r2, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6213      	str	r3, [r2, #32]
 800345a:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a72      	ldr	r2, [pc, #456]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6213      	str	r3, [r2, #32]
 8003466:	e01c      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d10c      	bne.n	800348a <HAL_RCC_OscConfig+0x356>
 8003470:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4a6c      	ldr	r2, [pc, #432]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6213      	str	r3, [r2, #32]
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4a69      	ldr	r2, [pc, #420]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	e00b      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 800348a:	4b67      	ldr	r3, [pc, #412]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4a66      	ldr	r2, [pc, #408]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6213      	str	r3, [r2, #32]
 8003496:	4b64      	ldr	r3, [pc, #400]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a63      	ldr	r2, [pc, #396]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d015      	beq.n	80034d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7fd f9cd 	bl	8000848 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fd f9c9 	bl	8000848 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0ab      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	4b57      	ldr	r3, [pc, #348]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ee      	beq.n	80034b2 <HAL_RCC_OscConfig+0x37e>
 80034d4:	e014      	b.n	8003500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d6:	f7fd f9b7 	bl	8000848 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd f9b3 	bl	8000848 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e095      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f4:	4b4c      	ldr	r3, [pc, #304]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003506:	4b48      	ldr	r3, [pc, #288]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4a47      	ldr	r2, [pc, #284]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800350c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8081 	beq.w	800361e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351c:	4b42      	ldr	r3, [pc, #264]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d061      	beq.n	80035ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d146      	bne.n	80035be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003530:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_RCC_OscConfig+0x4fc>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7fd f987 	bl	8000848 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fd f983 	bl	8000848 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e067      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d108      	bne.n	8003578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003566:	4b30      	ldr	r3, [pc, #192]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	492d      	ldr	r1, [pc, #180]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a19      	ldr	r1, [r3, #32]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	430b      	orrs	r3, r1
 800358a:	4927      	ldr	r1, [pc, #156]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <HAL_RCC_OscConfig+0x4fc>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fd f957 	bl	8000848 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7fd f953 	bl	8000848 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e037      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x46a>
 80035bc:	e02f      	b.n	800361e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <HAL_RCC_OscConfig+0x4fc>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd f940 	bl	8000848 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fd f93c 	bl	8000848 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e020      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035de:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x498>
 80035ea:	e018      	b.n	800361e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e013      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	429a      	cmp	r2, r3
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
 8003630:	42420060 	.word	0x42420060

08003634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0d0      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d910      	bls.n	8003678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 0207 	bic.w	r2, r3, #7
 800365e:	4965      	ldr	r1, [pc, #404]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b63      	ldr	r3, [pc, #396]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0b8      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003690:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4a58      	ldr	r2, [pc, #352]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800369a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a8:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a52      	ldr	r2, [pc, #328]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b4:	4b50      	ldr	r3, [pc, #320]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	494d      	ldr	r1, [pc, #308]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d040      	beq.n	8003754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d115      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07f      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e073      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3d      	ldr	r3, [pc, #244]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06b      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4936      	ldr	r1, [pc, #216]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003724:	f7fd f890 	bl	8000848 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fd f88c 	bl	8000848 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e053      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d210      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 0207 	bic.w	r2, r3, #7
 800376a:	4922      	ldr	r1, [pc, #136]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e032      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4916      	ldr	r1, [pc, #88]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	490e      	ldr	r1, [pc, #56]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037c2:	f000 f821 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	490a      	ldr	r1, [pc, #40]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	4a09      	ldr	r2, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1cc>)
 80037dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <HAL_RCC_ClockConfig+0x1d0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc ffee 	bl	80007c4 <HAL_InitTick>

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40021000 	.word	0x40021000
 80037fc:	080039f0 	.word	0x080039f0
 8003800:	20000000 	.word	0x20000000
 8003804:	20000004 	.word	0x20000004

08003808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003808:	b490      	push	{r4, r7}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800380e:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003810:	1d3c      	adds	r4, r7, #4
 8003812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003818:	f240 2301 	movw	r3, #513	; 0x201
 800381c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	2300      	movs	r3, #0
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b04      	cmp	r3, #4
 8003840:	d002      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x40>
 8003842:	2b08      	cmp	r3, #8
 8003844:	d003      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x46>
 8003846:	e02d      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800384a:	623b      	str	r3, [r7, #32]
      break;
 800384c:	e02d      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	0c9b      	lsrs	r3, r3, #18
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800385a:	4413      	add	r3, r2
 800385c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003860:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d013      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0c5b      	lsrs	r3, r3, #17
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800387a:	4413      	add	r3, r2
 800387c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003880:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003886:	fb02 f203 	mul.w	r2, r2, r3
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	e004      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003898:	fb02 f303 	mul.w	r3, r2, r3
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	623b      	str	r3, [r7, #32]
      break;
 80038a2:	e002      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a6:	623b      	str	r3, [r7, #32]
      break;
 80038a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038aa:	6a3b      	ldr	r3, [r7, #32]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3728      	adds	r7, #40	; 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc90      	pop	{r4, r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	080039e0 	.word	0x080039e0
 80038bc:	40021000 	.word	0x40021000
 80038c0:	007a1200 	.word	0x007a1200
 80038c4:	003d0900 	.word	0x003d0900

080038c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	20000000 	.word	0x20000000

080038dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038e0:	f7ff fff2 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	08003a00 	.word	0x08003a00

08003904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <RCC_Delay+0x34>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <RCC_Delay+0x38>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	0a5b      	lsrs	r3, r3, #9
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003920:	bf00      	nop
  }
  while (Delay --);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1e5a      	subs	r2, r3, #1
 8003926:	60fa      	str	r2, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f9      	bne.n	8003920 <RCC_Delay+0x1c>
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	20000000 	.word	0x20000000
 800393c:	10624dd3 	.word	0x10624dd3

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	2600      	movs	r6, #0
 8003944:	4d0c      	ldr	r5, [pc, #48]	; (8003978 <__libc_init_array+0x38>)
 8003946:	4c0d      	ldr	r4, [pc, #52]	; (800397c <__libc_init_array+0x3c>)
 8003948:	1b64      	subs	r4, r4, r5
 800394a:	10a4      	asrs	r4, r4, #2
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	f000 f822 	bl	8003998 <_init>
 8003954:	2600      	movs	r6, #0
 8003956:	4d0a      	ldr	r5, [pc, #40]	; (8003980 <__libc_init_array+0x40>)
 8003958:	4c0a      	ldr	r4, [pc, #40]	; (8003984 <__libc_init_array+0x44>)
 800395a:	1b64      	subs	r4, r4, r5
 800395c:	10a4      	asrs	r4, r4, #2
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f855 3b04 	ldr.w	r3, [r5], #4
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	08003a08 	.word	0x08003a08
 800397c:	08003a08 	.word	0x08003a08
 8003980:	08003a08 	.word	0x08003a08
 8003984:	08003a0c 	.word	0x08003a0c

08003988 <memset>:
 8003988:	4603      	mov	r3, r0
 800398a:	4402      	add	r2, r0
 800398c:	4293      	cmp	r3, r2
 800398e:	d100      	bne.n	8003992 <memset+0xa>
 8003990:	4770      	bx	lr
 8003992:	f803 1b01 	strb.w	r1, [r3], #1
 8003996:	e7f9      	b.n	800398c <memset+0x4>

08003998 <_init>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr

080039a4 <_fini>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	bf00      	nop
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr
