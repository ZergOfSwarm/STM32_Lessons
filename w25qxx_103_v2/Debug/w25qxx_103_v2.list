
w25qxx_103_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006104  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006554  08006554  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006554  08006554  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800655c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000070  080065cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080065cc  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3ff  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000278f  00000000  00000000  0002f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00031c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00032c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019289  00000000  00000000  00033b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c07  00000000  00000000  0004cde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de37  00000000  00000000  0005d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb81f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  000eb870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080061f8 	.word	0x080061f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080061f8 	.word	0x080061f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	2332      	movs	r3, #50	; 0x32
 80001ba:	68b9      	ldr	r1, [r7, #8]
 80001bc:	480c      	ldr	r0, [pc, #48]	; (80001f0 <_write+0x48>)
 80001be:	f004 f95e 	bl	800447e <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	617b      	str	r3, [r7, #20]
 80001c6:	e009      	b.n	80001dc <_write+0x34>
		ITM_SendChar(*ptr++);
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	1c5a      	adds	r2, r3, #1
 80001cc:	60ba      	str	r2, [r7, #8]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f7ff ffc3 	bl	800015c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001d6:	697b      	ldr	r3, [r7, #20]
 80001d8:	3301      	adds	r3, #1
 80001da:	617b      	str	r3, [r7, #20]
 80001dc:	697a      	ldr	r2, [r7, #20]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	dbf1      	blt.n	80001c8 <_write+0x20>
	}
	return len;
 80001e4:	687b      	ldr	r3, [r7, #4]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3718      	adds	r7, #24
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200000e8 	.word	0x200000e8

080001f4 <W25Qxxx>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void W25Qxxx()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b094      	sub	sp, #80	; 0x50
 80001f8:	af00      	add	r7, sp, #0
	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Start W25QXX\n", 13, 1000);
 80001fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001fe:	220d      	movs	r2, #13
 8000200:	49a2      	ldr	r1, [pc, #648]	; (800048c <W25Qxxx+0x298>)
 8000202:	48a3      	ldr	r0, [pc, #652]	; (8000490 <W25Qxxx+0x29c>)
 8000204:	f004 f93b 	bl	800447e <HAL_UART_Transmit>

	  ///////////////////////////////////// ИНИЦИАЛИЗАЦИЯ ФЛЕШКИ ////////////////////////////////
	  W25qxx_Init();
 8000208:	f000 fe5e 	bl	8000ec8 <W25qxx_Init>

	  ///////////////////////////////////// ОЧИСТКА ВСЕЙ ФЛЕШКИ ////////////////////////////////
	  //W25qxx_EraseChip();

	  ///////////////////////////////////// ОЧИСТКА БЛОКА ////////////////////////////////
	  W25qxx_EraseBlock(0); // 65536 байт
 800020c:	2000      	movs	r0, #0
 800020e:	f001 f8bf 	bl	8001390 <W25qxx_EraseBlock>

	  ///////////////////////////////////// ОЧИСТКА СЕКТОРА ////////////////////////////////
	  //W25qxx_EraseSector(0); // 4096 байт

	  ///////////////////////////////////// ЗАПИСЬ ПОБАЙТНО ////////////////////////////////
	  uint8_t b0 = 's';
 8000212:	2373      	movs	r3, #115	; 0x73
 8000214:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  uint8_t b1 = 't';
 8000218:	2374      	movs	r3, #116	; 0x74
 800021a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	  uint8_t b2 = 'D';
 800021e:	2344      	movs	r3, #68	; 0x44
 8000220:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	  W25qxx_WriteByte(b0, 25);
 8000224:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000228:	2119      	movs	r1, #25
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fbd6 	bl	80019dc <W25qxx_WriteByte>
	  W25qxx_WriteByte(b1, 26);
 8000230:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000234:	211a      	movs	r1, #26
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fbd0 	bl	80019dc <W25qxx_WriteByte>
	  W25qxx_WriteByte(b2, 27);
 800023c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000240:	211b      	movs	r1, #27
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fbca 	bl	80019dc <W25qxx_WriteByte>

	  ///////////////////////////////////// ЧТЕНИЕ ПОБАЙТНО ////////////////////////////////
	  uint8_t buf[64] = {0,};
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	f107 0310 	add.w	r3, r7, #16
 8000250:	223c      	movs	r2, #60	; 0x3c
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f004 ff4b 	bl	80050f0 <memset>

	  W25qxx_ReadByte(&buf[0], 25);
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	2119      	movs	r1, #25
 8000260:	4618      	mov	r0, r3
 8000262:	f001 fd49 	bl	8001cf8 <W25qxx_ReadByte>
	  W25qxx_ReadByte(&buf[1], 26);
 8000266:	f107 030c 	add.w	r3, r7, #12
 800026a:	3301      	adds	r3, #1
 800026c:	211a      	movs	r1, #26
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fd42 	bl	8001cf8 <W25qxx_ReadByte>
	  W25qxx_ReadByte(&buf[2], 27);
 8000274:	f107 030c 	add.w	r3, r7, #12
 8000278:	3302      	adds	r3, #2
 800027a:	211b      	movs	r1, #27
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fd3b 	bl	8001cf8 <W25qxx_ReadByte>

	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 8000282:	f107 030c 	add.w	r3, r7, #12
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ff60 	bl	800014c <strlen>
 800028c:	4603      	mov	r3, r0
 800028e:	b29a      	uxth	r2, r3
 8000290:	f107 010c 	add.w	r1, r7, #12
 8000294:	2364      	movs	r3, #100	; 0x64
 8000296:	487e      	ldr	r0, [pc, #504]	; (8000490 <W25Qxxx+0x29c>)
 8000298:	f004 f8f1 	bl	800447e <HAL_UART_Transmit>
	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 800029c:	2364      	movs	r3, #100	; 0x64
 800029e:	2202      	movs	r2, #2
 80002a0:	497c      	ldr	r1, [pc, #496]	; (8000494 <W25Qxxx+0x2a0>)
 80002a2:	487b      	ldr	r0, [pc, #492]	; (8000490 <W25Qxxx+0x29c>)
 80002a4:	f004 f8eb 	bl	800447e <HAL_UART_Transmit>

	  ///////////////////////////////////// ЗАПИСЬ СТРАНИЦЫ ////////////////////////////////
	  uint8_t w_buf[] = "istarik.ru";
 80002a8:	4a7b      	ldr	r2, [pc, #492]	; (8000498 <W25Qxxx+0x2a4>)
 80002aa:	463b      	mov	r3, r7
 80002ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ae:	c303      	stmia	r3!, {r0, r1}
 80002b0:	801a      	strh	r2, [r3, #0]
 80002b2:	3302      	adds	r3, #2
 80002b4:	0c12      	lsrs	r2, r2, #16
 80002b6:	701a      	strb	r2, [r3, #0]

	  W25qxx_WritePage(w_buf, 0, 28, 10);
 80002b8:	4638      	mov	r0, r7
 80002ba:	230a      	movs	r3, #10
 80002bc:	221c      	movs	r2, #28
 80002be:	2100      	movs	r1, #0
 80002c0:	f001 fbe0 	bl	8001a84 <W25qxx_WritePage>

	  ///////////////////////////////////// ЧТЕНИЕ СТРАНИЦЫ ////////////////////////////////
	  memset(buf, 0, 64);
 80002c4:	f107 030c 	add.w	r3, r7, #12
 80002c8:	2240      	movs	r2, #64	; 0x40
 80002ca:	2100      	movs	r1, #0
 80002cc:	4618      	mov	r0, r3
 80002ce:	f004 ff0f 	bl	80050f0 <memset>
	  W25qxx_ReadPage(buf, 0, 28, 10);
 80002d2:	f107 000c 	add.w	r0, r7, #12
 80002d6:	230a      	movs	r3, #10
 80002d8:	221c      	movs	r2, #28
 80002da:	2100      	movs	r1, #0
 80002dc:	f001 fdb8 	bl	8001e50 <W25qxx_ReadPage>

	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 80002e0:	f107 030c 	add.w	r3, r7, #12
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ff31 	bl	800014c <strlen>
 80002ea:	4603      	mov	r3, r0
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	f107 010c 	add.w	r1, r7, #12
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	4866      	ldr	r0, [pc, #408]	; (8000490 <W25Qxxx+0x29c>)
 80002f6:	f004 f8c2 	bl	800447e <HAL_UART_Transmit>
	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 80002fa:	2364      	movs	r3, #100	; 0x64
 80002fc:	2202      	movs	r2, #2
 80002fe:	4965      	ldr	r1, [pc, #404]	; (8000494 <W25Qxxx+0x2a0>)
 8000300:	4863      	ldr	r0, [pc, #396]	; (8000490 <W25Qxxx+0x29c>)
 8000302:	f004 f8bc 	bl	800447e <HAL_UART_Transmit>

	  ///////////////////////////////////// ЗАПИСЬ СЕКТОРА ////////////////////////////////
	  W25qxx_WriteSector(w_buf, 0, 1350, 10);
 8000306:	4638      	mov	r0, r7
 8000308:	230a      	movs	r3, #10
 800030a:	f240 5246 	movw	r2, #1350	; 0x546
 800030e:	2100      	movs	r1, #0
 8000310:	f001 fc3a 	bl	8001b88 <W25qxx_WriteSector>

	  ///////////////////////////////////// ЧТЕНИЕ СЕКТОРА ////////////////////////////////
	  memset(buf, 0, 64);
 8000314:	f107 030c 	add.w	r3, r7, #12
 8000318:	2240      	movs	r2, #64	; 0x40
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f004 fee7 	bl	80050f0 <memset>
	  W25qxx_ReadSector(buf, 0, 1350, 10);
 8000322:	f107 000c 	add.w	r0, r7, #12
 8000326:	230a      	movs	r3, #10
 8000328:	f240 5246 	movw	r2, #1350	; 0x546
 800032c:	2100      	movs	r1, #0
 800032e:	f001 fe0b 	bl	8001f48 <W25qxx_ReadSector>

	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 8000332:	f107 030c 	add.w	r3, r7, #12
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff08 	bl	800014c <strlen>
 800033c:	4603      	mov	r3, r0
 800033e:	b29a      	uxth	r2, r3
 8000340:	f107 010c 	add.w	r1, r7, #12
 8000344:	2364      	movs	r3, #100	; 0x64
 8000346:	4852      	ldr	r0, [pc, #328]	; (8000490 <W25Qxxx+0x29c>)
 8000348:	f004 f899 	bl	800447e <HAL_UART_Transmit>
	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	2202      	movs	r2, #2
 8000350:	4950      	ldr	r1, [pc, #320]	; (8000494 <W25Qxxx+0x2a0>)
 8000352:	484f      	ldr	r0, [pc, #316]	; (8000490 <W25Qxxx+0x29c>)
 8000354:	f004 f893 	bl	800447e <HAL_UART_Transmit>

	  ///////////////////////////////////// ЗАПИСЬ БЛОКА ////////////////////////////////
	  W25qxx_WriteBlock(w_buf, 0, 9350, 10);
 8000358:	4638      	mov	r0, r7
 800035a:	230a      	movs	r3, #10
 800035c:	f242 4286 	movw	r2, #9350	; 0x2486
 8000360:	2100      	movs	r1, #0
 8000362:	f001 fc6d 	bl	8001c40 <W25qxx_WriteBlock>

	  ///////////////////////////////////// ЧТЕНИЕ БЛОКА ////////////////////////////////
	  memset(buf, 0, 64);
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	2240      	movs	r2, #64	; 0x40
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f004 febe 	bl	80050f0 <memset>
	  W25qxx_ReadBlock(buf, 0, 9350, 10);
 8000374:	f107 000c 	add.w	r0, r7, #12
 8000378:	230a      	movs	r3, #10
 800037a:	f242 4286 	movw	r2, #9350	; 0x2486
 800037e:	2100      	movs	r1, #0
 8000380:	f001 fe3e 	bl	8002000 <W25qxx_ReadBlock>

	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 8000384:	f107 030c 	add.w	r3, r7, #12
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fedf 	bl	800014c <strlen>
 800038e:	4603      	mov	r3, r0
 8000390:	b29a      	uxth	r2, r3
 8000392:	f107 010c 	add.w	r1, r7, #12
 8000396:	2364      	movs	r3, #100	; 0x64
 8000398:	483d      	ldr	r0, [pc, #244]	; (8000490 <W25Qxxx+0x29c>)
 800039a:	f004 f870 	bl	800447e <HAL_UART_Transmit>
	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 800039e:	2364      	movs	r3, #100	; 0x64
 80003a0:	2202      	movs	r2, #2
 80003a2:	493c      	ldr	r1, [pc, #240]	; (8000494 <W25Qxxx+0x2a0>)
 80003a4:	483a      	ldr	r0, [pc, #232]	; (8000490 <W25Qxxx+0x29c>)
 80003a6:	f004 f86a 	bl	800447e <HAL_UART_Transmit>


	  /////////////////////////////////// ЧТЕНИЕ ЛЮБОГО КОЛИЧЕСТВА БАЙТ /////////////////
	  memset(buf, 0, 64);
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2240      	movs	r2, #64	; 0x40
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f004 fe9c 	bl	80050f0 <memset>
	  W25qxx_ReadBytes(buf, 9350, 10);
 80003b8:	f107 030c 	add.w	r3, r7, #12
 80003bc:	220a      	movs	r2, #10
 80003be:	f242 4186 	movw	r1, #9350	; 0x2486
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fcea 	bl	8001d9c <W25qxx_ReadBytes>

	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 80003c8:	f107 030c 	add.w	r3, r7, #12
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff febd 	bl	800014c <strlen>
 80003d2:	4603      	mov	r3, r0
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	f107 010c 	add.w	r1, r7, #12
 80003da:	2364      	movs	r3, #100	; 0x64
 80003dc:	482c      	ldr	r0, [pc, #176]	; (8000490 <W25Qxxx+0x29c>)
 80003de:	f004 f84e 	bl	800447e <HAL_UART_Transmit>
	  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 80003e2:	2364      	movs	r3, #100	; 0x64
 80003e4:	2202      	movs	r2, #2
 80003e6:	492b      	ldr	r1, [pc, #172]	; (8000494 <W25Qxxx+0x2a0>)
 80003e8:	4829      	ldr	r0, [pc, #164]	; (8000490 <W25Qxxx+0x29c>)
 80003ea:	f004 f848 	bl	800447e <HAL_UART_Transmit>


	  /////////////////////////////////// СТЁРТА ЛИ СТРАНИЦА /////////////////////
	  uint8_t clear = W25qxx_IsEmptyPage(0, 40);
 80003ee:	2128      	movs	r1, #40	; 0x28
 80003f0:	2000      	movs	r0, #0
 80003f2:	f001 f84d 	bl	8001490 <W25qxx_IsEmptyPage>
 80003f6:	4603      	mov	r3, r0
 80003f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	  if(clear) HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Clear P\n", 8, 100);
 80003fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000400:	2b00      	cmp	r3, #0
 8000402:	d006      	beq.n	8000412 <W25Qxxx+0x21e>
 8000404:	2364      	movs	r3, #100	; 0x64
 8000406:	2208      	movs	r2, #8
 8000408:	4924      	ldr	r1, [pc, #144]	; (800049c <W25Qxxx+0x2a8>)
 800040a:	4821      	ldr	r0, [pc, #132]	; (8000490 <W25Qxxx+0x29c>)
 800040c:	f004 f837 	bl	800447e <HAL_UART_Transmit>
 8000410:	e005      	b.n	800041e <W25Qxxx+0x22a>
	  else HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Not clear P\n", 12, 100);
 8000412:	2364      	movs	r3, #100	; 0x64
 8000414:	220c      	movs	r2, #12
 8000416:	4922      	ldr	r1, [pc, #136]	; (80004a0 <W25Qxxx+0x2ac>)
 8000418:	481d      	ldr	r0, [pc, #116]	; (8000490 <W25Qxxx+0x29c>)
 800041a:	f004 f830 	bl	800447e <HAL_UART_Transmit>

	  /////////////////////////////////// СТЁРТ ЛИ СЕКТОР //////////////////////
	  clear = W25qxx_IsEmptySector(0, 1360);
 800041e:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8000422:	2000      	movs	r0, #0
 8000424:	f001 f8e4 	bl	80015f0 <W25qxx_IsEmptySector>
 8000428:	4603      	mov	r3, r0
 800042a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	  if(clear) HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Clear S\n", 8, 100);
 800042e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000432:	2b00      	cmp	r3, #0
 8000434:	d006      	beq.n	8000444 <W25Qxxx+0x250>
 8000436:	2364      	movs	r3, #100	; 0x64
 8000438:	2208      	movs	r2, #8
 800043a:	491a      	ldr	r1, [pc, #104]	; (80004a4 <W25Qxxx+0x2b0>)
 800043c:	4814      	ldr	r0, [pc, #80]	; (8000490 <W25Qxxx+0x29c>)
 800043e:	f004 f81e 	bl	800447e <HAL_UART_Transmit>
 8000442:	e005      	b.n	8000450 <W25Qxxx+0x25c>
	  else HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Not clear S\n", 12, 100);
 8000444:	2364      	movs	r3, #100	; 0x64
 8000446:	220c      	movs	r2, #12
 8000448:	4917      	ldr	r1, [pc, #92]	; (80004a8 <W25Qxxx+0x2b4>)
 800044a:	4811      	ldr	r0, [pc, #68]	; (8000490 <W25Qxxx+0x29c>)
 800044c:	f004 f817 	bl	800447e <HAL_UART_Transmit>

	  /////////////////////////////////// СТЁРТ ЛИ БЛОК ////////////////////////
	  clear = W25qxx_IsEmptyBlock(0, 9360);
 8000450:	f242 4190 	movw	r1, #9360	; 0x2490
 8000454:	2000      	movs	r0, #0
 8000456:	f001 f9c7 	bl	80017e8 <W25qxx_IsEmptyBlock>
 800045a:	4603      	mov	r3, r0
 800045c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	  if(clear) HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Clear B\n", 8, 100);
 8000460:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000464:	2b00      	cmp	r3, #0
 8000466:	d006      	beq.n	8000476 <W25Qxxx+0x282>
 8000468:	2364      	movs	r3, #100	; 0x64
 800046a:	2208      	movs	r2, #8
 800046c:	490f      	ldr	r1, [pc, #60]	; (80004ac <W25Qxxx+0x2b8>)
 800046e:	4808      	ldr	r0, [pc, #32]	; (8000490 <W25Qxxx+0x29c>)
 8000470:	f004 f805 	bl	800447e <HAL_UART_Transmit>
	  else HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Not clear B\n", 12, 100);

}
 8000474:	e005      	b.n	8000482 <W25Qxxx+0x28e>
	  else HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Not clear B\n", 12, 100);
 8000476:	2364      	movs	r3, #100	; 0x64
 8000478:	220c      	movs	r2, #12
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <W25Qxxx+0x2bc>)
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <W25Qxxx+0x29c>)
 800047e:	f003 fffe 	bl	800447e <HAL_UART_Transmit>
}
 8000482:	bf00      	nop
 8000484:	3750      	adds	r7, #80	; 0x50
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	08006210 	.word	0x08006210
 8000490:	200000e8 	.word	0x200000e8
 8000494:	08006220 	.word	0x08006220
 8000498:	08006278 	.word	0x08006278
 800049c:	08006224 	.word	0x08006224
 80004a0:	08006230 	.word	0x08006230
 80004a4:	08006240 	.word	0x08006240
 80004a8:	0800624c 	.word	0x0800624c
 80004ac:	0800625c 	.word	0x0800625c
 80004b0:	08006268 	.word	0x08006268

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f001 fe24 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f82a 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 f8ec 	bl	800069c <MX_GPIO_Init>
  MX_DMA_Init();
 80004c4:	f000 f8cc 	bl	8000660 <MX_DMA_Init>
  MX_SPI2_Init();
 80004c8:	f000 f86a 	bl	80005a0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80004cc:	f000 f89e 	bl	800060c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Ringbuf_Init();
 80004d0:	f000 fb92 	bl	8000bf8 <Ringbuf_Init>
	printf("Hello world!\r\n");
 80004d4:	480b      	ldr	r0, [pc, #44]	; (8000504 <main+0x50>)
 80004d6:	f004 fe81 	bl	80051dc <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//printf("MainBuf = %d\r\n", MainBuf);
		if (MainBuf == 55 && flag == 0) { // 7
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <main+0x54>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b37      	cmp	r3, #55	; 0x37
 80004e0:	d1fb      	bne.n	80004da <main+0x26>
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <main+0x58>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	f083 0301 	eor.w	r3, r3, #1
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0f4      	beq.n	80004da <main+0x26>
			flag = 1;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <main+0x58>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
			W25Qxxx();
 80004f6:	f7ff fe7d 	bl	80001f4 <W25Qxxx>
			printf("Data is recorded to w25qxx! \r\n");
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x5c>)
 80004fc:	f004 fe6e 	bl	80051dc <puts>
		if (MainBuf == 55 && flag == 0) { // 7
 8000500:	e7eb      	b.n	80004da <main+0x26>
 8000502:	bf00      	nop
 8000504:	08006284 	.word	0x08006284
 8000508:	200001c0 	.word	0x200001c0
 800050c:	2000008c 	.word	0x2000008c
 8000510:	08006294 	.word	0x08006294

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f004 fde4 	bl	80050f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
 800054a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000552:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000556:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fb41 	bl	8002be4 <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000568:	f000 f8f6 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	2302      	movs	r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2102      	movs	r1, #2
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fdae 	bl	80030e8 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000592:	f000 f8e1 	bl	8000758 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3740      	adds	r7, #64	; 0x40
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_SPI2_Init+0x64>)
 80005a6:	4a18      	ldr	r2, [pc, #96]	; (8000608 <MX_SPI2_Init+0x68>)
 80005a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_SPI2_Init+0x64>)
 80005ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_SPI2_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_SPI2_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_SPI2_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_SPI2_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_SPI2_Init+0x64>)
 80005cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_SPI2_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_SPI2_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_SPI2_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_SPI2_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_SPI2_Init+0x64>)
 80005ec:	220a      	movs	r2, #10
 80005ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_SPI2_Init+0x64>)
 80005f2:	f002 ff41 	bl	8003478 <HAL_SPI_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80005fc:	f000 f8ac 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000090 	.word	0x20000090
 8000608:	40003800 	.word	0x40003800

0800060c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART3_UART_Init+0x4c>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_USART3_UART_Init+0x50>)
 8000614:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_USART3_UART_Init+0x4c>)
 8000618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800061c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART3_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_USART3_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART3_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_USART3_UART_Init+0x4c>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART3_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_USART3_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART3_UART_Init+0x4c>)
 8000644:	f003 fece 	bl	80043e4 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800064e:	f000 f883 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000e8 	.word	0x200000e8
 800065c:	40004800 	.word	0x40004800

08000660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_DMA_Init+0x38>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <MX_DMA_Init+0x38>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_DMA_Init+0x38>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200d      	movs	r0, #13
 8000684:	f001 fe49 	bl	800231a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000688:	200d      	movs	r0, #13
 800068a:	f001 fe62 	bl	8002352 <HAL_NVIC_EnableIRQ>

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_GPIO_Init+0x90>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a1d      	ldr	r2, [pc, #116]	; (800072c <MX_GPIO_Init+0x90>)
 80006b6:	f043 0320 	orr.w	r3, r3, #32
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_GPIO_Init+0x90>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0320 	and.w	r3, r3, #32
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_GPIO_Init+0x90>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a17      	ldr	r2, [pc, #92]	; (800072c <MX_GPIO_Init+0x90>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_GPIO_Init+0x90>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0308 	and.w	r3, r3, #8
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_GPIO_Init+0x90>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a11      	ldr	r2, [pc, #68]	; (800072c <MX_GPIO_Init+0x90>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_GPIO_Init+0x90>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_GPIO_Init+0x94>)
 8000700:	f002 fa58 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2302      	movs	r3, #2
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_GPIO_Init+0x94>)
 800071e:	f002 f8c5 	bl	80028ac <HAL_GPIO_Init>

}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	40010c00 	.word	0x40010c00

08000734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d101      	bne.n	800074a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000746:	f001 fcf3 	bl	8002130 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40000800 	.word	0x40000800

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_MspInit+0x5c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <HAL_MspInit+0x5c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_MspInit+0x5c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x5c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x5c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x5c>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_MspInit+0x60>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_MspInit+0x60>)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010000 	.word	0x40010000

080007c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <HAL_SPI_MspInit+0x8c>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d131      	bne.n	800084c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_SPI_MspInit+0x90>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	4a1a      	ldr	r2, [pc, #104]	; (8000858 <HAL_SPI_MspInit+0x90>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f2:	61d3      	str	r3, [r2, #28]
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_SPI_MspInit+0x90>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_SPI_MspInit+0x90>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <HAL_SPI_MspInit+0x90>)
 8000806:	f043 0308 	orr.w	r3, r3, #8
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_SPI_MspInit+0x90>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0308 	and.w	r3, r3, #8
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000818:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800081c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <HAL_SPI_MspInit+0x94>)
 800082e:	f002 f83d 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000832:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_SPI_MspInit+0x94>)
 8000848:	f002 f830 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40003800 	.word	0x40003800
 8000858:	40021000 	.word	0x40021000
 800085c:	40010c00 	.word	0x40010c00

08000860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a33      	ldr	r2, [pc, #204]	; (8000948 <HAL_UART_MspInit+0xe8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d15f      	bne.n	8000940 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000880:	4b32      	ldr	r3, [pc, #200]	; (800094c <HAL_UART_MspInit+0xec>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	4a31      	ldr	r2, [pc, #196]	; (800094c <HAL_UART_MspInit+0xec>)
 8000886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088a:	61d3      	str	r3, [r2, #28]
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_UART_MspInit+0xec>)
 800088e:	69db      	ldr	r3, [r3, #28]
 8000890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b2c      	ldr	r3, [pc, #176]	; (800094c <HAL_UART_MspInit+0xec>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a2b      	ldr	r2, [pc, #172]	; (800094c <HAL_UART_MspInit+0xec>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b29      	ldr	r3, [pc, #164]	; (800094c <HAL_UART_MspInit+0xec>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	4822      	ldr	r0, [pc, #136]	; (8000950 <HAL_UART_MspInit+0xf0>)
 80008c6:	f001 fff1 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4619      	mov	r1, r3
 80008de:	481c      	ldr	r0, [pc, #112]	; (8000950 <HAL_UART_MspInit+0xf0>)
 80008e0:	f001 ffe4 	bl	80028ac <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <HAL_UART_MspInit+0xf4>)
 80008e6:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <HAL_UART_MspInit+0xf8>)
 80008e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <HAL_UART_MspInit+0xf4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_UART_MspInit+0xf4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_UART_MspInit+0xf4>)
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_UART_MspInit+0xf4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_UART_MspInit+0xf4>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_UART_MspInit+0xf4>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_UART_MspInit+0xf4>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000914:	480f      	ldr	r0, [pc, #60]	; (8000954 <HAL_UART_MspInit+0xf4>)
 8000916:	f001 fd2b 	bl	8002370 <HAL_DMA_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000920:	f7ff ff1a 	bl	8000758 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <HAL_UART_MspInit+0xf4>)
 8000928:	639a      	str	r2, [r3, #56]	; 0x38
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_UART_MspInit+0xf4>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2027      	movs	r0, #39	; 0x27
 8000936:	f001 fcf0 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800093a:	2027      	movs	r0, #39	; 0x27
 800093c:	f001 fd09 	bl	8002352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004800 	.word	0x40004800
 800094c:	40021000 	.word	0x40021000
 8000950:	40010c00 	.word	0x40010c00
 8000954:	2000012c 	.word	0x2000012c
 8000958:	40020030 	.word	0x40020030

0800095c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <HAL_InitTick+0xe8>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <HAL_InitTick+0xe8>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <HAL_InitTick+0xe8>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800098a:	f107 0210 	add.w	r2, r7, #16
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fd21 	bl	80033dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800099e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d103      	bne.n	80009ac <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009a4:	f002 fcf2 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 80009a8:	6378      	str	r0, [r7, #52]	; 0x34
 80009aa:	e004      	b.n	80009b6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ac:	f002 fcee 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 80009b0:	4603      	mov	r3, r0
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b8:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <HAL_InitTick+0xec>)
 80009ba:	fba2 2303 	umull	r2, r3, r2, r3
 80009be:	0c9b      	lsrs	r3, r3, #18
 80009c0:	3b01      	subs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <HAL_InitTick+0xf0>)
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <HAL_InitTick+0xf4>)
 80009c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <HAL_InitTick+0xf0>)
 80009cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009d2:	4a1e      	ldr	r2, [pc, #120]	; (8000a4c <HAL_InitTick+0xf0>)
 80009d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_InitTick+0xf0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_InitTick+0xf0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_InitTick+0xf0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <HAL_InitTick+0xf0>)
 80009ec:	f003 fab0 	bl	8003f50 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d11b      	bne.n	8000a36 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009fe:	4813      	ldr	r0, [pc, #76]	; (8000a4c <HAL_InitTick+0xf0>)
 8000a00:	f003 fafe 	bl	8004000 <HAL_TIM_Base_Start_IT>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d111      	bne.n	8000a36 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a12:	201e      	movs	r0, #30
 8000a14:	f001 fc9d 	bl	8002352 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d808      	bhi.n	8000a30 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	201e      	movs	r0, #30
 8000a24:	f001 fc79 	bl	800231a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_InitTick+0xf8>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	e002      	b.n	8000a36 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3738      	adds	r7, #56	; 0x38
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	431bde83 	.word	0x431bde83
 8000a4c:	20000170 	.word	0x20000170
 8000a50:	40000800 	.word	0x40000800
 8000a54:	20000004 	.word	0x20000004

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
	...

08000aa8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <DMA1_Channel3_IRQHandler+0x10>)
 8000aae:	f001 fdc9 	bl	8002644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000012c 	.word	0x2000012c

08000abc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM4_IRQHandler+0x10>)
 8000ac2:	f003 faef 	bl	80040a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000170 	.word	0x20000170

08000ad0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART3_IRQHandler+0x10>)
 8000ad6:	f003 fdb3 	bl	8004640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000e8 	.word	0x200000e8

08000ae4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e00a      	b.n	8000b0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000af6:	f3af 8000 	nop.w
 8000afa:	4601      	mov	r1, r0
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	b2ca      	uxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf0      	blt.n	8000af6 <_read+0x12>
	}

return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	return -1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b44:	605a      	str	r2, [r3, #4]
	return 0;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <_isatty>:

int _isatty(int file)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	return 1;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
	return 0;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
	...

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f004 fa66 	bl	8005080 <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20005000 	.word	0x20005000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	200001b8 	.word	0x200001b8
 8000be8:	20000250 	.word	0x20000250

08000bec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <Ringbuf_Init>:
/* Timeout is in milliseconds */
int32_t TIMEOUT = 0;

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <Ringbuf_Init+0x50>)
 8000c02:	f004 fa75 	bl	80050f0 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8000c06:	2202      	movs	r2, #2
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <Ringbuf_Init+0x54>)
 8000c0c:	f004 fa70 	bl	80050f0 <memset>

	Head = Tail = 0;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <Ringbuf_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	801a      	strh	r2, [r3, #0]
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <Ringbuf_Init+0x58>)
 8000c18:	881a      	ldrh	r2, [r3, #0]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <Ringbuf_Init+0x5c>)
 8000c1c:	801a      	strh	r2, [r3, #0]
	oldPos = 0;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <Ringbuf_Init+0x60>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <Ringbuf_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <Ringbuf_Init+0x50>)
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <Ringbuf_Init+0x68>)
 8000c30:	f003 fcb7 	bl	80045a2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <Ringbuf_Init+0x6c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <Ringbuf_Init+0x6c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0204 	bic.w	r2, r2, #4
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001bc 	.word	0x200001bc
 8000c4c:	200001c0 	.word	0x200001c0
 8000c50:	200001c8 	.word	0x200001c8
 8000c54:	200001c6 	.word	0x200001c6
 8000c58:	200001c2 	.word	0x200001c2
 8000c5c:	200001c4 	.word	0x200001c4
 8000c60:	200000e8 	.word	0x200000e8
 8000c64:	2000012c 	.word	0x2000012c

08000c68 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
		isDataAvailable = 1;
 8000c74:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <HAL_UARTEx_RxEventCallback+0x118>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]

		oldPos = newPos;  // Update the last position before copying new data
 8000c7a:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	4b42      	ldr	r3, [pc, #264]	; (8000d88 <HAL_UARTEx_RxEventCallback+0x120>)
 8000c80:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000c82:	4b41      	ldr	r3, [pc, #260]	; (8000d88 <HAL_UARTEx_RxEventCallback+0x120>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	dd22      	ble.n	8000cd6 <HAL_UARTEx_RxEventCallback+0x6e>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 8000c90:	4b3d      	ldr	r3, [pc, #244]	; (8000d88 <HAL_UARTEx_RxEventCallback+0x120>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	f1c3 0302 	rsb	r3, r3, #2
 8000c98:	817b      	strh	r3, [r7, #10]
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, datatocopy);  // copy data in that remaining space
 8000c9a:	4b3b      	ldr	r3, [pc, #236]	; (8000d88 <HAL_UARTEx_RxEventCallback+0x120>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <HAL_UARTEx_RxEventCallback+0x124>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	897a      	ldrh	r2, [r7, #10]
 8000ca6:	493a      	ldr	r1, [pc, #232]	; (8000d90 <HAL_UARTEx_RxEventCallback+0x128>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fa13 	bl	80050d4 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8000cae:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <HAL_UARTEx_RxEventCallback+0x120>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000cb4:	897b      	ldrh	r3, [r7, #10]
 8000cb6:	4a36      	ldr	r2, [pc, #216]	; (8000d90 <HAL_UARTEx_RxEventCallback+0x128>)
 8000cb8:	1899      	adds	r1, r3, r2
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	897b      	ldrh	r3, [r7, #10]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4832      	ldr	r0, [pc, #200]	; (8000d8c <HAL_UARTEx_RxEventCallback+0x124>)
 8000cc4:	f004 fa06 	bl	80050d4 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8000cc8:	887a      	ldrh	r2, [r7, #2]
 8000cca:	897b      	ldrh	r3, [r7, #10]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000cd2:	801a      	strh	r2, [r3, #0]
 8000cd4:	e010      	b.n	8000cf8 <HAL_UARTEx_RxEventCallback+0x90>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, Size);
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <HAL_UARTEx_RxEventCallback+0x120>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <HAL_UARTEx_RxEventCallback+0x124>)
 8000cde:	4413      	add	r3, r2
 8000ce0:	887a      	ldrh	r2, [r7, #2]
 8000ce2:	492b      	ldr	r1, [pc, #172]	; (8000d90 <HAL_UARTEx_RxEventCallback+0x128>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 f9f5 	bl	80050d4 <memcpy>
			newPos = Size+oldPos;
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <HAL_UARTEx_RxEventCallback+0x120>)
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000cf6:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (Head+Size < MainBuf_SIZE) Head = Head+Size;
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	4413      	add	r3, r2
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	dc07      	bgt.n	8000d16 <HAL_UARTEx_RxEventCallback+0xae>
 8000d06:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000d08:	881a      	ldrh	r2, [r3, #0]
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000d12:	801a      	strh	r2, [r3, #0]
 8000d14:	e008      	b.n	8000d28 <HAL_UARTEx_RxEventCallback+0xc0>
		else Head = Head+Size - MainBuf_SIZE;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000d18:	881a      	ldrh	r2, [r3, #0]
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	3b02      	subs	r3, #2
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000d26:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8000d28:	2202      	movs	r2, #2
 8000d2a:	4919      	ldr	r1, [pc, #100]	; (8000d90 <HAL_UARTEx_RxEventCallback+0x128>)
 8000d2c:	481a      	ldr	r0, [pc, #104]	; (8000d98 <HAL_UARTEx_RxEventCallback+0x130>)
 8000d2e:	f003 fc38 	bl	80045a2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <HAL_UARTEx_RxEventCallback+0x134>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_UARTEx_RxEventCallback+0x134>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0204 	bic.w	r2, r2, #4
 8000d40:	601a      	str	r2, [r3, #0]
	/****************** PROCESS (Little) THE DATA HERE *********************
	 * This is the PART OF  "isConfirmed" Function
	 */

	/* Let's say we want to check for the keyword "OK" within our incoming DATA */
	for (int i=0; i<Size; i++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	e011      	b.n	8000d6c <HAL_UARTEx_RxEventCallback+0x104>
	{
		if ((RxBuf[i] == 'O') && (RxBuf[i+1] == 'K'))
 8000d48:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <HAL_UARTEx_RxEventCallback+0x128>)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b4f      	cmp	r3, #79	; 0x4f
 8000d52:	d108      	bne.n	8000d66 <HAL_UARTEx_RxEventCallback+0xfe>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_UARTEx_RxEventCallback+0x128>)
 8000d5a:	5cd3      	ldrb	r3, [r2, r3]
 8000d5c:	2b4b      	cmp	r3, #75	; 0x4b
 8000d5e:	d102      	bne.n	8000d66 <HAL_UARTEx_RxEventCallback+0xfe>
		{
			isOK = 1;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_UARTEx_RxEventCallback+0x138>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
	for (int i=0; i<Size; i++)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbe9      	blt.n	8000d48 <HAL_UARTEx_RxEventCallback+0xe0>
		}
	}
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200001cc 	.word	0x200001cc
 8000d84:	200001c4 	.word	0x200001c4
 8000d88:	200001c2 	.word	0x200001c2
 8000d8c:	200001c0 	.word	0x200001c0
 8000d90:	200001bc 	.word	0x200001bc
 8000d94:	200001c6 	.word	0x200001c6
 8000d98:	200000e8 	.word	0x200000e8
 8000d9c:	2000012c 	.word	0x2000012c
 8000da0:	200001d0 	.word	0x200001d0

08000da4 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 8000dae:	f107 020f 	add.w	r2, r7, #15
 8000db2:	1df9      	adds	r1, r7, #7
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	4804      	ldr	r0, [pc, #16]	; (8000dcc <W25qxx_Spi+0x28>)
 8000dbc:	f002 fe2d 	bl	8003a1a <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000090 	.word	0x20000090

08000dd0 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dec:	4813      	ldr	r0, [pc, #76]	; (8000e3c <W25qxx_ReadID+0x6c>)
 8000dee:	f001 fee1 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 8000df2:	209f      	movs	r0, #159	; 0x9f
 8000df4:	f7ff ffd6 	bl	8000da4 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000df8:	20a5      	movs	r0, #165	; 0xa5
 8000dfa:	f7ff ffd3 	bl	8000da4 <W25qxx_Spi>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000e02:	20a5      	movs	r0, #165	; 0xa5
 8000e04:	f7ff ffce 	bl	8000da4 <W25qxx_Spi>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000e0c:	20a5      	movs	r0, #165	; 0xa5
 8000e0e:	f7ff ffc9 	bl	8000da4 <W25qxx_Spi>
 8000e12:	4603      	mov	r3, r0
 8000e14:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <W25qxx_ReadID+0x6c>)
 8000e1e:	f001 fec9 	bl	8002bb4 <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	041a      	lsls	r2, r3, #16
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]

	return Temp;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40010c00 	.word	0x40010c00

08000e40 <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4a:	4808      	ldr	r0, [pc, #32]	; (8000e6c <W25qxx_WriteEnable+0x2c>)
 8000e4c:	f001 feb2 	bl	8002bb4 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 8000e50:	2006      	movs	r0, #6
 8000e52:	f7ff ffa7 	bl	8000da4 <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <W25qxx_WriteEnable+0x2c>)
 8000e5e:	f001 fea9 	bl	8002bb4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f001 f980 	bl	8002168 <HAL_Delay>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f001 f977 	bl	8002168 <HAL_Delay>
	W25QFLASH_CS_SELECT;
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e80:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <W25qxx_WaitForWriteEnd+0x50>)
 8000e82:	f001 fe97 	bl	8002bb4 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 8000e86:	2005      	movs	r0, #5
 8000e88:	f7ff ff8c 	bl	8000da4 <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000e8c:	20a5      	movs	r0, #165	; 0xa5
 8000e8e:	f7ff ff89 	bl	8000da4 <W25qxx_Spi>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <W25qxx_WaitForWriteEnd+0x54>)
 8000e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f001 f963 	bl	8002168 <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <W25qxx_WaitForWriteEnd+0x54>)
 8000ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1ed      	bne.n	8000e8c <W25qxx_WaitForWriteEnd+0x1c>

	W25QFLASH_CS_UNSELECT;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <W25qxx_WaitForWriteEnd+0x50>)
 8000eb8:	f001 fe7c 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	20000214 	.word	0x20000214

08000ec8 <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8000ece:	4bb2      	ldr	r3, [pc, #712]	; (8001198 <W25qxx_Init+0x2d0>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 8000ed6:	e002      	b.n	8000ede <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f001 f945 	bl	8002168 <HAL_Delay>
	while(HAL_GetTick() < 100)
 8000ede:	f001 f939 	bl	8002154 <HAL_GetTick>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b63      	cmp	r3, #99	; 0x63
 8000ee6:	d9f7      	bls.n	8000ed8 <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eee:	48ab      	ldr	r0, [pc, #684]	; (800119c <W25qxx_Init+0x2d4>)
 8000ef0:	f001 fe60 	bl	8002bb4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f001 f937 	bl	8002168 <HAL_Delay>

	uint32_t id;

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	220e      	movs	r2, #14
 8000f00:	49a7      	ldr	r1, [pc, #668]	; (80011a0 <W25qxx_Init+0x2d8>)
 8000f02:	48a8      	ldr	r0, [pc, #672]	; (80011a4 <W25qxx_Init+0x2dc>)
 8000f04:	f003 fabb 	bl	800447e <HAL_UART_Transmit>
	#endif

	id = W25qxx_ReadID();
 8000f08:	f7ff ff62 	bl	8000dd0 <W25qxx_ReadID>
 8000f0c:	6078      	str	r0, [r7, #4]

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4aa5      	ldr	r2, [pc, #660]	; (80011a8 <W25qxx_Init+0x2e0>)
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	48a5      	ldr	r0, [pc, #660]	; (80011ac <W25qxx_Init+0x2e4>)
 8000f16:	f004 f969 	bl	80051ec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8000f1a:	48a4      	ldr	r0, [pc, #656]	; (80011ac <W25qxx_Init+0x2e4>)
 8000f1c:	f7ff f916 	bl	800014c <strlen>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f28:	49a0      	ldr	r1, [pc, #640]	; (80011ac <W25qxx_Init+0x2e4>)
 8000f2a:	489e      	ldr	r0, [pc, #632]	; (80011a4 <W25qxx_Init+0x2dc>)
 8000f2c:	f003 faa7 	bl	800447e <HAL_UART_Transmit>
	#endif

	switch(id & 0x0000FFFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	f243 0217 	movw	r2, #12311	; 0x3017
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d839      	bhi.n	8000fb0 <W25qxx_Init+0xe8>
 8000f3c:	f243 0211 	movw	r2, #12305	; 0x3011
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d21d      	bcs.n	8000f80 <W25qxx_Init+0xb8>
 8000f44:	e11a      	b.n	800117c <W25qxx_Init+0x2b4>
 8000f46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000f4a:	3b11      	subs	r3, #17
 8000f4c:	2b09      	cmp	r3, #9
 8000f4e:	f200 8115 	bhi.w	800117c <W25qxx_Init+0x2b4>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <W25qxx_Init+0x90>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	080010c7 	.word	0x080010c7
 8000f5c:	080010ab 	.word	0x080010ab
 8000f60:	0800108f 	.word	0x0800108f
 8000f64:	08001073 	.word	0x08001073
 8000f68:	08001057 	.word	0x08001057
 8000f6c:	0800103b 	.word	0x0800103b
 8000f70:	0800101f 	.word	0x0800101f
 8000f74:	08001001 	.word	0x08001001
 8000f78:	08000fe3 	.word	0x08000fe3
 8000f7c:	08000fc5 	.word	0x08000fc5
 8000f80:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8000f84:	3b11      	subs	r3, #17
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	f200 80f8 	bhi.w	800117c <W25qxx_Init+0x2b4>
 8000f8c:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <W25qxx_Init+0xcc>)
 8000f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f92:	bf00      	nop
 8000f94:	08001167 	.word	0x08001167
 8000f98:	08001151 	.word	0x08001151
 8000f9c:	0800113b 	.word	0x0800113b
 8000fa0:	08001125 	.word	0x08001125
 8000fa4:	0800110f 	.word	0x0800110f
 8000fa8:	080010f9 	.word	0x080010f9
 8000fac:	080010e3 	.word	0x080010e3
 8000fb0:	f244 021a 	movw	r2, #16410	; 0x401a
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	f200 80e1 	bhi.w	800117c <W25qxx_Init+0x2b4>
 8000fba:	f244 0211 	movw	r2, #16401	; 0x4011
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d2c1      	bcs.n	8000f46 <W25qxx_Init+0x7e>
 8000fc2:	e0db      	b.n	800117c <W25qxx_Init+0x2b4>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 8000fc4:	4b74      	ldr	r3, [pc, #464]	; (8001198 <W25qxx_Init+0x2d0>)
 8000fc6:	220a      	movs	r2, #10
 8000fc8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <W25qxx_Init+0x2d0>)
 8000fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	220e      	movs	r2, #14
 8000fd8:	4975      	ldr	r1, [pc, #468]	; (80011b0 <W25qxx_Init+0x2e8>)
 8000fda:	4872      	ldr	r0, [pc, #456]	; (80011a4 <W25qxx_Init+0x2dc>)
 8000fdc:	f003 fa4f 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 8000fe0:	e10a      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 8000fe2:	4b6d      	ldr	r3, [pc, #436]	; (8001198 <W25qxx_Init+0x2d0>)
 8000fe4:	2209      	movs	r2, #9
 8000fe6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 8000fe8:	4b6b      	ldr	r3, [pc, #428]	; (8001198 <W25qxx_Init+0x2d0>)
 8000fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fee:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	220e      	movs	r2, #14
 8000ff6:	496f      	ldr	r1, [pc, #444]	; (80011b4 <W25qxx_Init+0x2ec>)
 8000ff8:	486a      	ldr	r0, [pc, #424]	; (80011a4 <W25qxx_Init+0x2dc>)
 8000ffa:	f003 fa40 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 8000ffe:	e0fb      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 8001000:	4b65      	ldr	r3, [pc, #404]	; (8001198 <W25qxx_Init+0x2d0>)
 8001002:	2208      	movs	r2, #8
 8001004:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 8001006:	4b64      	ldr	r3, [pc, #400]	; (8001198 <W25qxx_Init+0x2d0>)
 8001008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	220e      	movs	r2, #14
 8001014:	4968      	ldr	r1, [pc, #416]	; (80011b8 <W25qxx_Init+0x2f0>)
 8001016:	4863      	ldr	r0, [pc, #396]	; (80011a4 <W25qxx_Init+0x2dc>)
 8001018:	f003 fa31 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 800101c:	e0ec      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 800101e:	4b5e      	ldr	r3, [pc, #376]	; (8001198 <W25qxx_Init+0x2d0>)
 8001020:	2207      	movs	r2, #7
 8001022:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 8001024:	4b5c      	ldr	r3, [pc, #368]	; (8001198 <W25qxx_Init+0x2d0>)
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	220d      	movs	r2, #13
 8001030:	4962      	ldr	r1, [pc, #392]	; (80011bc <W25qxx_Init+0x2f4>)
 8001032:	485c      	ldr	r0, [pc, #368]	; (80011a4 <W25qxx_Init+0x2dc>)
 8001034:	f003 fa23 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 8001038:	e0de      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 800103a:	4b57      	ldr	r3, [pc, #348]	; (8001198 <W25qxx_Init+0x2d0>)
 800103c:	2206      	movs	r2, #6
 800103e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 8001040:	4b55      	ldr	r3, [pc, #340]	; (8001198 <W25qxx_Init+0x2d0>)
 8001042:	2240      	movs	r2, #64	; 0x40
 8001044:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	220d      	movs	r2, #13
 800104c:	495c      	ldr	r1, [pc, #368]	; (80011c0 <W25qxx_Init+0x2f8>)
 800104e:	4855      	ldr	r0, [pc, #340]	; (80011a4 <W25qxx_Init+0x2dc>)
 8001050:	f003 fa15 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 8001054:	e0d0      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 8001056:	4b50      	ldr	r3, [pc, #320]	; (8001198 <W25qxx_Init+0x2d0>)
 8001058:	2205      	movs	r2, #5
 800105a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 800105c:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <W25qxx_Init+0x2d0>)
 800105e:	2220      	movs	r2, #32
 8001060:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	220d      	movs	r2, #13
 8001068:	4956      	ldr	r1, [pc, #344]	; (80011c4 <W25qxx_Init+0x2fc>)
 800106a:	484e      	ldr	r0, [pc, #312]	; (80011a4 <W25qxx_Init+0x2dc>)
 800106c:	f003 fa07 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 8001070:	e0c2      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 8001072:	4b49      	ldr	r3, [pc, #292]	; (8001198 <W25qxx_Init+0x2d0>)
 8001074:	2204      	movs	r2, #4
 8001076:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 8001078:	4b47      	ldr	r3, [pc, #284]	; (8001198 <W25qxx_Init+0x2d0>)
 800107a:	2210      	movs	r2, #16
 800107c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	220d      	movs	r2, #13
 8001084:	4950      	ldr	r1, [pc, #320]	; (80011c8 <W25qxx_Init+0x300>)
 8001086:	4847      	ldr	r0, [pc, #284]	; (80011a4 <W25qxx_Init+0x2dc>)
 8001088:	f003 f9f9 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 800108c:	e0b4      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 800108e:	4b42      	ldr	r3, [pc, #264]	; (8001198 <W25qxx_Init+0x2d0>)
 8001090:	2203      	movs	r2, #3
 8001092:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <W25qxx_Init+0x2d0>)
 8001096:	2208      	movs	r2, #8
 8001098:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	220d      	movs	r2, #13
 80010a0:	494a      	ldr	r1, [pc, #296]	; (80011cc <W25qxx_Init+0x304>)
 80010a2:	4840      	ldr	r0, [pc, #256]	; (80011a4 <W25qxx_Init+0x2dc>)
 80010a4:	f003 f9eb 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 80010a8:	e0a6      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 80010aa:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <W25qxx_Init+0x2d0>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 80010b0:	4b39      	ldr	r3, [pc, #228]	; (8001198 <W25qxx_Init+0x2d0>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	220d      	movs	r2, #13
 80010bc:	4944      	ldr	r1, [pc, #272]	; (80011d0 <W25qxx_Init+0x308>)
 80010be:	4839      	ldr	r0, [pc, #228]	; (80011a4 <W25qxx_Init+0x2dc>)
 80010c0:	f003 f9dd 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 80010c4:	e098      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <W25qxx_Init+0x2d0>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 80010cc:	4b32      	ldr	r3, [pc, #200]	; (8001198 <W25qxx_Init+0x2d0>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	220d      	movs	r2, #13
 80010d8:	493e      	ldr	r1, [pc, #248]	; (80011d4 <W25qxx_Init+0x30c>)
 80010da:	4832      	ldr	r0, [pc, #200]	; (80011a4 <W25qxx_Init+0x2dc>)
 80010dc:	f003 f9cf 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 80010e0:	e08a      	b.n	80011f8 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <W25qxx_Init+0x2d0>)
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
 80010e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ec:	220d      	movs	r2, #13
 80010ee:	493a      	ldr	r1, [pc, #232]	; (80011d8 <W25qxx_Init+0x310>)
 80010f0:	482c      	ldr	r0, [pc, #176]	; (80011a4 <W25qxx_Init+0x2dc>)
 80010f2:	f003 f9c4 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 80010f6:	e07f      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <W25qxx_Init+0x2d0>)
 80010fa:	2240      	movs	r2, #64	; 0x40
 80010fc:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	220d      	movs	r2, #13
 8001104:	4935      	ldr	r1, [pc, #212]	; (80011dc <W25qxx_Init+0x314>)
 8001106:	4827      	ldr	r0, [pc, #156]	; (80011a4 <W25qxx_Init+0x2dc>)
 8001108:	f003 f9b9 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 800110c:	e074      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <W25qxx_Init+0x2d0>)
 8001110:	2220      	movs	r2, #32
 8001112:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	220d      	movs	r2, #13
 800111a:	4931      	ldr	r1, [pc, #196]	; (80011e0 <W25qxx_Init+0x318>)
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <W25qxx_Init+0x2dc>)
 800111e:	f003 f9ae 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 8001122:	e069      	b.n	80011f8 <W25qxx_Init+0x330>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <W25qxx_Init+0x2d0>)
 8001126:	2210      	movs	r2, #16
 8001128:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	220d      	movs	r2, #13
 8001130:	492c      	ldr	r1, [pc, #176]	; (80011e4 <W25qxx_Init+0x31c>)
 8001132:	481c      	ldr	r0, [pc, #112]	; (80011a4 <W25qxx_Init+0x2dc>)
 8001134:	f003 f9a3 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 8001138:	e05e      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <W25qxx_Init+0x2d0>)
 800113c:	2208      	movs	r2, #8
 800113e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	220d      	movs	r2, #13
 8001146:	4928      	ldr	r1, [pc, #160]	; (80011e8 <W25qxx_Init+0x320>)
 8001148:	4816      	ldr	r0, [pc, #88]	; (80011a4 <W25qxx_Init+0x2dc>)
 800114a:	f003 f998 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 800114e:	e053      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <W25qxx_Init+0x2d0>)
 8001152:	2204      	movs	r2, #4
 8001154:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	220d      	movs	r2, #13
 800115c:	4923      	ldr	r1, [pc, #140]	; (80011ec <W25qxx_Init+0x324>)
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <W25qxx_Init+0x2dc>)
 8001160:	f003 f98d 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 8001164:	e048      	b.n	80011f8 <W25qxx_Init+0x330>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <W25qxx_Init+0x2d0>)
 8001168:	2202      	movs	r2, #2
 800116a:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 800116c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001170:	220d      	movs	r2, #13
 8001172:	491f      	ldr	r1, [pc, #124]	; (80011f0 <W25qxx_Init+0x328>)
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <W25qxx_Init+0x2dc>)
 8001176:	f003 f982 	bl	800447e <HAL_UART_Transmit>
			#endif
		break;
 800117a:	e03d      	b.n	80011f8 <W25qxx_Init+0x330>



		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	220b      	movs	r2, #11
 8001182:	491c      	ldr	r1, [pc, #112]	; (80011f4 <W25qxx_Init+0x32c>)
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <W25qxx_Init+0x2dc>)
 8001186:	f003 f97a 	bl	800447e <HAL_UART_Transmit>
			#endif

			w25qxx.Lock = 0;
 800118a:	4b03      	ldr	r3, [pc, #12]	; (8001198 <W25qxx_Init+0x2d0>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e0e1      	b.n	800135a <W25qxx_Init+0x492>
 8001196:	bf00      	nop
 8001198:	20000214 	.word	0x20000214
 800119c:	40010c00 	.word	0x40010c00
 80011a0:	080062b4 	.word	0x080062b4
 80011a4:	200000e8 	.word	0x200000e8
 80011a8:	080062c4 	.word	0x080062c4
 80011ac:	200001d4 	.word	0x200001d4
 80011b0:	080062d0 	.word	0x080062d0
 80011b4:	080062e0 	.word	0x080062e0
 80011b8:	080062f0 	.word	0x080062f0
 80011bc:	08006300 	.word	0x08006300
 80011c0:	08006310 	.word	0x08006310
 80011c4:	08006320 	.word	0x08006320
 80011c8:	08006330 	.word	0x08006330
 80011cc:	08006340 	.word	0x08006340
 80011d0:	08006350 	.word	0x08006350
 80011d4:	08006360 	.word	0x08006360
 80011d8:	08006370 	.word	0x08006370
 80011dc:	08006380 	.word	0x08006380
 80011e0:	08006390 	.word	0x08006390
 80011e4:	080063a0 	.word	0x080063a0
 80011e8:	080063b0 	.word	0x080063b0
 80011ec:	080063c0 	.word	0x080063c0
 80011f0:	080063d0 	.word	0x080063d0
 80011f4:	080063e0 	.word	0x080063e0
	}


	w25qxx.PageSize = 256;
 80011f8:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <W25qxx_Init+0x49c>)
 80011fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fe:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8001200:	4b58      	ldr	r3, [pc, #352]	; (8001364 <W25qxx_Init+0x49c>)
 8001202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001206:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8001208:	4b56      	ldr	r3, [pc, #344]	; (8001364 <W25qxx_Init+0x49c>)
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4a55      	ldr	r2, [pc, #340]	; (8001364 <W25qxx_Init+0x49c>)
 8001210:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8001212:	4b54      	ldr	r3, [pc, #336]	; (8001364 <W25qxx_Init+0x49c>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a53      	ldr	r2, [pc, #332]	; (8001364 <W25qxx_Init+0x49c>)
 8001218:	6912      	ldr	r2, [r2, #16]
 800121a:	fb02 f303 	mul.w	r3, r2, r3
 800121e:	4a51      	ldr	r2, [pc, #324]	; (8001364 <W25qxx_Init+0x49c>)
 8001220:	8952      	ldrh	r2, [r2, #10]
 8001222:	fbb3 f3f2 	udiv	r3, r3, r2
 8001226:	4a4f      	ldr	r2, [pc, #316]	; (8001364 <W25qxx_Init+0x49c>)
 8001228:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800122a:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <W25qxx_Init+0x49c>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <W25qxx_Init+0x49c>)
 8001232:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8001234:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <W25qxx_Init+0x49c>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	4a4a      	ldr	r2, [pc, #296]	; (8001364 <W25qxx_Init+0x49c>)
 800123a:	6912      	ldr	r2, [r2, #16]
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	0a9b      	lsrs	r3, r3, #10
 8001242:	4a48      	ldr	r2, [pc, #288]	; (8001364 <W25qxx_Init+0x49c>)
 8001244:	6213      	str	r3, [r2, #32]
	//W25qxx_ReadStatusRegister(1);
	//W25qxx_ReadStatusRegister(2);
	//W25qxx_ReadStatusRegister(3);

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "Page Size: %d Bytes\n", w25qxx.PageSize);
 8001246:	4b47      	ldr	r3, [pc, #284]	; (8001364 <W25qxx_Init+0x49c>)
 8001248:	895b      	ldrh	r3, [r3, #10]
 800124a:	4a47      	ldr	r2, [pc, #284]	; (8001368 <W25qxx_Init+0x4a0>)
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	4847      	ldr	r0, [pc, #284]	; (800136c <W25qxx_Init+0x4a4>)
 8001250:	f003 ffcc 	bl	80051ec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8001254:	4845      	ldr	r0, [pc, #276]	; (800136c <W25qxx_Init+0x4a4>)
 8001256:	f7fe ff79 	bl	800014c <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	4942      	ldr	r1, [pc, #264]	; (800136c <W25qxx_Init+0x4a4>)
 8001264:	4842      	ldr	r0, [pc, #264]	; (8001370 <W25qxx_Init+0x4a8>)
 8001266:	f003 f90a 	bl	800447e <HAL_UART_Transmit>

	snprintf(buf, 64, "Page Count: %lu\n", w25qxx.PageCount);
 800126a:	4b3e      	ldr	r3, [pc, #248]	; (8001364 <W25qxx_Init+0x49c>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	4a41      	ldr	r2, [pc, #260]	; (8001374 <W25qxx_Init+0x4ac>)
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	483e      	ldr	r0, [pc, #248]	; (800136c <W25qxx_Init+0x4a4>)
 8001274:	f003 ffba 	bl	80051ec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8001278:	483c      	ldr	r0, [pc, #240]	; (800136c <W25qxx_Init+0x4a4>)
 800127a:	f7fe ff67 	bl	800014c <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	b29a      	uxth	r2, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	4939      	ldr	r1, [pc, #228]	; (800136c <W25qxx_Init+0x4a4>)
 8001288:	4839      	ldr	r0, [pc, #228]	; (8001370 <W25qxx_Init+0x4a8>)
 800128a:	f003 f8f8 	bl	800447e <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Size: %lu Bytes\n", w25qxx.SectorSize);
 800128e:	4b35      	ldr	r3, [pc, #212]	; (8001364 <W25qxx_Init+0x49c>)
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	4a39      	ldr	r2, [pc, #228]	; (8001378 <W25qxx_Init+0x4b0>)
 8001294:	2140      	movs	r1, #64	; 0x40
 8001296:	4835      	ldr	r0, [pc, #212]	; (800136c <W25qxx_Init+0x4a4>)
 8001298:	f003 ffa8 	bl	80051ec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 800129c:	4833      	ldr	r0, [pc, #204]	; (800136c <W25qxx_Init+0x4a4>)
 800129e:	f7fe ff55 	bl	800014c <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	4930      	ldr	r1, [pc, #192]	; (800136c <W25qxx_Init+0x4a4>)
 80012ac:	4830      	ldr	r0, [pc, #192]	; (8001370 <W25qxx_Init+0x4a8>)
 80012ae:	f003 f8e6 	bl	800447e <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Count: %lu\n", w25qxx.SectorCount);
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <W25qxx_Init+0x49c>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a31      	ldr	r2, [pc, #196]	; (800137c <W25qxx_Init+0x4b4>)
 80012b8:	2140      	movs	r1, #64	; 0x40
 80012ba:	482c      	ldr	r0, [pc, #176]	; (800136c <W25qxx_Init+0x4a4>)
 80012bc:	f003 ff96 	bl	80051ec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80012c0:	482a      	ldr	r0, [pc, #168]	; (800136c <W25qxx_Init+0x4a4>)
 80012c2:	f7fe ff43 	bl	800014c <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	4927      	ldr	r1, [pc, #156]	; (800136c <W25qxx_Init+0x4a4>)
 80012d0:	4827      	ldr	r0, [pc, #156]	; (8001370 <W25qxx_Init+0x4a8>)
 80012d2:	f003 f8d4 	bl	800447e <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Size: %lu Bytes\n", w25qxx.BlockSize);
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <W25qxx_Init+0x49c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a29      	ldr	r2, [pc, #164]	; (8001380 <W25qxx_Init+0x4b8>)
 80012dc:	2140      	movs	r1, #64	; 0x40
 80012de:	4823      	ldr	r0, [pc, #140]	; (800136c <W25qxx_Init+0x4a4>)
 80012e0:	f003 ff84 	bl	80051ec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80012e4:	4821      	ldr	r0, [pc, #132]	; (800136c <W25qxx_Init+0x4a4>)
 80012e6:	f7fe ff31 	bl	800014c <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	491e      	ldr	r1, [pc, #120]	; (800136c <W25qxx_Init+0x4a4>)
 80012f4:	481e      	ldr	r0, [pc, #120]	; (8001370 <W25qxx_Init+0x4a8>)
 80012f6:	f003 f8c2 	bl	800447e <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Count: %lu\n", w25qxx.BlockCount);
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <W25qxx_Init+0x49c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <W25qxx_Init+0x4bc>)
 8001300:	2140      	movs	r1, #64	; 0x40
 8001302:	481a      	ldr	r0, [pc, #104]	; (800136c <W25qxx_Init+0x4a4>)
 8001304:	f003 ff72 	bl	80051ec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8001308:	4818      	ldr	r0, [pc, #96]	; (800136c <W25qxx_Init+0x4a4>)
 800130a:	f7fe ff1f 	bl	800014c <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	4915      	ldr	r1, [pc, #84]	; (800136c <W25qxx_Init+0x4a4>)
 8001318:	4815      	ldr	r0, [pc, #84]	; (8001370 <W25qxx_Init+0x4a8>)
 800131a:	f003 f8b0 	bl	800447e <HAL_UART_Transmit>

	snprintf(buf, 64, "Capacity: %lu KBytes\n", w25qxx.CapacityInKiloByte);
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <W25qxx_Init+0x49c>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <W25qxx_Init+0x4c0>)
 8001324:	2140      	movs	r1, #64	; 0x40
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <W25qxx_Init+0x4a4>)
 8001328:	f003 ff60 	bl	80051ec <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 800132c:	480f      	ldr	r0, [pc, #60]	; (800136c <W25qxx_Init+0x4a4>)
 800132e:	f7fe ff0d 	bl	800014c <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	490c      	ldr	r1, [pc, #48]	; (800136c <W25qxx_Init+0x4a4>)
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <W25qxx_Init+0x4a8>)
 800133e:	f003 f89e 	bl	800447e <HAL_UART_Transmit>

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	220a      	movs	r2, #10
 8001348:	4910      	ldr	r1, [pc, #64]	; (800138c <W25qxx_Init+0x4c4>)
 800134a:	4809      	ldr	r0, [pc, #36]	; (8001370 <W25qxx_Init+0x4a8>)
 800134c:	f003 f897 	bl	800447e <HAL_UART_Transmit>
	#endif

	w25qxx.Lock = 0;
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <W25qxx_Init+0x49c>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000214 	.word	0x20000214
 8001368:	080063ec 	.word	0x080063ec
 800136c:	200001d4 	.word	0x200001d4
 8001370:	200000e8 	.word	0x200000e8
 8001374:	08006404 	.word	0x08006404
 8001378:	08006418 	.word	0x08006418
 800137c:	08006430 	.word	0x08006430
 8001380:	08006444 	.word	0x08006444
 8001384:	0800645c 	.word	0x0800645c
 8001388:	08006470 	.word	0x08006470
 800138c:	08006488 	.word	0x08006488

08001390 <W25qxx_EraseBlock>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 8001398:	e002      	b.n	80013a0 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f000 fee4 	bl	8002168 <HAL_Delay>
	while(w25qxx.Lock == 1)
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <W25qxx_EraseBlock+0xa8>)
 80013a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d0f7      	beq.n	800139a <W25qxx_EraseBlock+0xa>

	w25qxx.Lock = 1;
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <W25qxx_EraseBlock+0xa8>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 80013b2:	f7ff fd5d 	bl	8000e70 <W25qxx_WaitForWriteEnd>

	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <W25qxx_EraseBlock+0xa8>)
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 80013c4:	f7ff fd3c 	bl	8000e40 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ce:	481b      	ldr	r0, [pc, #108]	; (800143c <W25qxx_EraseBlock+0xac>)
 80013d0:	f001 fbf0 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_BLOCK_ERASE);
 80013d4:	20d8      	movs	r0, #216	; 0xd8
 80013d6:	f7ff fce5 	bl	8000da4 <W25qxx_Spi>

	if(w25qxx.ID>=W25Q256)
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <W25qxx_EraseBlock+0xa8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d905      	bls.n	80013ee <W25qxx_EraseBlock+0x5e>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	0e1b      	lsrs	r3, r3, #24
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fcdb 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fcd5 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fccf 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fcca 	bl	8000da4 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <W25qxx_EraseBlock+0xac>)
 8001418:	f001 fbcc 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 800141c:	f7ff fd28 	bl	8000e70 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f000 fea1 	bl	8002168 <HAL_Delay>
	w25qxx.Lock = 0;
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <W25qxx_EraseBlock+0xa8>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000214 	.word	0x20000214
 800143c:	40010c00 	.word	0x40010c00

08001440 <W25qxx_SectorToPage>:
	return((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}

//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	return(SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <W25qxx_SectorToPage+0x24>)
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <W25qxx_SectorToPage+0x24>)
 8001454:	8952      	ldrh	r2, [r2, #10]
 8001456:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000214 	.word	0x20000214

08001468 <W25qxx_BlockToPage>:

//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <W25qxx_BlockToPage+0x24>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <W25qxx_BlockToPage+0x24>)
 800147c:	8952      	ldrh	r2, [r2, #10]
 800147e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000214 	.word	0x20000214

08001490 <W25qxx_IsEmptyPage>:

//###################################################################################################################
uint8_t W25qxx_IsEmptyPage(uint32_t Page_Address, uint32_t OffsetInByte)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0c6      	sub	sp, #280	; 0x118
 8001494:	af00      	add	r7, sp, #0
 8001496:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800149a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800149e:	6018      	str	r0, [r3, #0]
 80014a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014a8:	6019      	str	r1, [r3, #0]
	while(w25qxx.Lock == 1)
 80014aa:	e002      	b.n	80014b2 <W25qxx_IsEmptyPage+0x22>
	W25qxx_Delay(1);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f000 fe5b 	bl	8002168 <HAL_Delay>
	while(w25qxx.Lock == 1)
 80014b2:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <W25qxx_IsEmptyPage+0x154>)
 80014b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d0f7      	beq.n	80014ac <W25qxx_IsEmptyPage+0x1c>

	w25qxx.Lock = 1;
 80014bc:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <W25qxx_IsEmptyPage+0x154>)
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	uint8_t	pBuffer[256] = {0,};
 80014c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	3304      	adds	r3, #4
 80014d2:	22fc      	movs	r2, #252	; 0xfc
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 fe0a 	bl	80050f0 <memset>
	uint32_t WorkAddress = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint16_t size = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

	size = w25qxx.PageSize - OffsetInByte;
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <W25qxx_IsEmptyPage+0x154>)
 80014ea:	895a      	ldrh	r2, [r3, #10]
 80014ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	WorkAddress = (OffsetInByte + Page_Address * w25qxx.PageSize);
 80014fe:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <W25qxx_IsEmptyPage+0x154>)
 8001500:	895b      	ldrh	r3, [r3, #10]
 8001502:	461a      	mov	r2, r3
 8001504:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001508:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001516:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	4413      	add	r3, r2
 800151e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	W25QFLASH_CS_SELECT;
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001528:	482f      	ldr	r0, [pc, #188]	; (80015e8 <W25qxx_IsEmptyPage+0x158>)
 800152a:	f001 fb43 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 800152e:	200b      	movs	r0, #11
 8001530:	f7ff fc38 	bl	8000da4 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <W25qxx_IsEmptyPage+0x154>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d906      	bls.n	800154a <W25qxx_IsEmptyPage+0xba>
		W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800153c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001540:	0e1b      	lsrs	r3, r3, #24
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fc2d 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800154a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800154e:	0c1b      	lsrs	r3, r3, #16
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fc26 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001558:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fc1f 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi(WorkAddress & 0xFF);
 8001566:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fc19 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi(0);
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff fc16 	bl	8000da4 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, size, 100);
 8001578:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	481a      	ldr	r0, [pc, #104]	; (80015ec <W25qxx_IsEmptyPage+0x15c>)
 8001584:	f002 f938 	bl	80037f8 <HAL_SPI_Receive>

	W25QFLASH_CS_UNSELECT;
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800158e:	4816      	ldr	r0, [pc, #88]	; (80015e8 <W25qxx_IsEmptyPage+0x158>)
 8001590:	f001 fb10 	bl	8002bb4 <HAL_GPIO_WritePin>

	for(uint16_t i = 0; i < size; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 800159a:	e013      	b.n	80015c4 <W25qxx_IsEmptyPage+0x134>
	{
		if(pBuffer[i] != 0xFF)
 800159c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80015a0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80015a4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d005      	beq.n	80015ba <W25qxx_IsEmptyPage+0x12a>
		{
			w25qxx.Lock = 0;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <W25qxx_IsEmptyPage+0x154>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e00f      	b.n	80015da <W25qxx_IsEmptyPage+0x14a>
	for(uint16_t i = 0; i < size; i++)
 80015ba:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80015be:	3301      	adds	r3, #1
 80015c0:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 80015c4:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 80015c8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d3e5      	bcc.n	800159c <W25qxx_IsEmptyPage+0x10c>
		}
	}

	w25qxx.Lock = 0;
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <W25qxx_IsEmptyPage+0x154>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000214 	.word	0x20000214
 80015e8:	40010c00 	.word	0x40010c00
 80015ec:	20000090 	.word	0x20000090

080015f0 <W25qxx_IsEmptySector>:

//##################################################################################################################
uint8_t W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0c8      	sub	sp, #288	; 0x120
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015fe:	6018      	str	r0, [r3, #0]
 8001600:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001604:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001608:	6019      	str	r1, [r3, #0]
	while(w25qxx.Lock == 1)
 800160a:	e002      	b.n	8001612 <W25qxx_IsEmptySector+0x22>
	W25qxx_Delay(1);
 800160c:	2001      	movs	r0, #1
 800160e:	f000 fdab 	bl	8002168 <HAL_Delay>
	while(w25qxx.Lock == 1)
 8001612:	4b72      	ldr	r3, [pc, #456]	; (80017dc <W25qxx_IsEmptySector+0x1ec>)
 8001614:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001618:	2b01      	cmp	r3, #1
 800161a:	d0f7      	beq.n	800160c <W25qxx_IsEmptySector+0x1c>

	w25qxx.Lock = 1;
 800161c:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <W25qxx_IsEmptySector+0x1ec>)
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	uint8_t	pBuffer[256] = {0,};
 8001624:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001628:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	3304      	adds	r3, #4
 8001632:	22fc      	movs	r2, #252	; 0xfc
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f003 fd5a 	bl	80050f0 <memset>
	uint32_t WorkAddress = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint16_t s_buf = 256;
 8001642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001646:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
	uint16_t size = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118

	size = w25qxx.SectorSize - OffsetInByte;
 8001650:	4b62      	ldr	r3, [pc, #392]	; (80017dc <W25qxx_IsEmptySector+0x1ec>)
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	b29a      	uxth	r2, r3
 8001656:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800165a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	WorkAddress = (OffsetInByte + Sector_Address * w25qxx.SectorSize);
 8001668:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <W25qxx_IsEmptySector+0x1ec>)
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001670:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800167e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	4413      	add	r3, r2
 8001686:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

//char buf2[64] = {0,};
//snprintf(buf2, 64, "SIZE %d \n", size);
//HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), 100);

	uint16_t cikl = size / 256;
 800168a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	uint16_t cikl2 = size % 256;
 8001694:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t count_cikle = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

	if(size <= 256)
 80016a4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80016a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ac:	d803      	bhi.n	80016b6 <W25qxx_IsEmptySector+0xc6>
	{
		count_cikle = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 80016b4:	e00d      	b.n	80016d2 <W25qxx_IsEmptySector+0xe2>
		//HAL_UART_Transmit(&huart1, (uint8_t*)"1\n", 2, 100);
	}
	else if(cikl2 == 0)
 80016b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d104      	bne.n	80016c8 <W25qxx_IsEmptySector+0xd8>
	{
		count_cikle = cikl;
 80016be:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80016c2:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 80016c6:	e004      	b.n	80016d2 <W25qxx_IsEmptySector+0xe2>
		//HAL_UART_Transmit(&huart1, (uint8_t*)"2\n", 2, 100);
	}
	else
	{
		count_cikle = cikl + 1;
 80016c8:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80016cc:	3301      	adds	r3, #1
 80016ce:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
		//HAL_UART_Transmit(&huart1, (uint8_t*)"3\n", 2, 100);
	}


	for(uint16_t i = 0; i < count_cikle; i++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 80016d8:	e06f      	b.n	80017ba <W25qxx_IsEmptySector+0x1ca>
	{
		W25QFLASH_CS_SELECT;
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e0:	483f      	ldr	r0, [pc, #252]	; (80017e0 <W25qxx_IsEmptySector+0x1f0>)
 80016e2:	f001 fa67 	bl	8002bb4 <HAL_GPIO_WritePin>
		W25qxx_Spi(W25_FAST_READ);
 80016e6:	200b      	movs	r0, #11
 80016e8:	f7ff fb5c 	bl	8000da4 <W25qxx_Spi>

		if(w25qxx.ID>=W25Q256)
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <W25qxx_IsEmptySector+0x1ec>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d906      	bls.n	8001702 <W25qxx_IsEmptySector+0x112>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80016f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016f8:	0e1b      	lsrs	r3, r3, #24
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb51 	bl	8000da4 <W25qxx_Spi>

		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001702:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001706:	0c1b      	lsrs	r3, r3, #16
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fb4a 	bl	8000da4 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001710:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fb43 	bl	8000da4 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 800171e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001722:	b2db      	uxtb	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fb3d 	bl	8000da4 <W25qxx_Spi>

		W25qxx_Spi(0);
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff fb3a 	bl	8000da4 <W25qxx_Spi>

		if(size < 256) s_buf = size;
 8001730:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8001734:	2bff      	cmp	r3, #255	; 0xff
 8001736:	d803      	bhi.n	8001740 <W25qxx_IsEmptySector+0x150>
 8001738:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800173c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

//snprintf(buf2, 64, "RECIV %d %d %d %lu\n", size, s_buf, i, WorkAddress);
//HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), 100);

		HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, s_buf, 100);
 8001740:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8001744:	f107 010c 	add.w	r1, r7, #12
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	4826      	ldr	r0, [pc, #152]	; (80017e4 <W25qxx_IsEmptySector+0x1f4>)
 800174c:	f002 f854 	bl	80037f8 <HAL_SPI_Receive>

		W25QFLASH_CS_UNSELECT;
 8001750:	2201      	movs	r2, #1
 8001752:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001756:	4822      	ldr	r0, [pc, #136]	; (80017e0 <W25qxx_IsEmptySector+0x1f0>)
 8001758:	f001 fa2c 	bl	8002bb4 <HAL_GPIO_WritePin>

		for(uint16_t i = 0; i < s_buf; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8001762:	e013      	b.n	800178c <W25qxx_IsEmptySector+0x19c>
		{
			if(pBuffer[i] != 0xFF)
 8001764:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001768:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800176c:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	2bff      	cmp	r3, #255	; 0xff
 8001774:	d005      	beq.n	8001782 <W25qxx_IsEmptySector+0x192>
			{
				w25qxx.Lock = 0;
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <W25qxx_IsEmptySector+0x1ec>)
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				return 0;
 800177e:	2300      	movs	r3, #0
 8001780:	e026      	b.n	80017d0 <W25qxx_IsEmptySector+0x1e0>
		for(uint16_t i = 0; i < s_buf; i++)
 8001782:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8001786:	3301      	adds	r3, #1
 8001788:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800178c:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 8001790:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8001794:	429a      	cmp	r2, r3
 8001796:	d3e5      	bcc.n	8001764 <W25qxx_IsEmptySector+0x174>
			}
		}

		size = size - 256;
 8001798:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800179c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80017a0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
		WorkAddress = WorkAddress + 256;
 80017a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80017a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80017ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	for(uint16_t i = 0; i < count_cikle; i++)
 80017b0:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80017b4:	3301      	adds	r3, #1
 80017b6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 80017ba:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80017be:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d389      	bcc.n	80016da <W25qxx_IsEmptySector+0xea>
	}

	w25qxx.Lock = 0;
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <W25qxx_IsEmptySector+0x1ec>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000214 	.word	0x20000214
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	20000090 	.word	0x20000090

080017e8 <W25qxx_IsEmptyBlock>:

//###################################################################################################################
uint8_t W25qxx_IsEmptyBlock(uint32_t Block_Address, uint32_t OffsetInByte)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0c8      	sub	sp, #288	; 0x120
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80017f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017f6:	6018      	str	r0, [r3, #0]
 80017f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80017fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001800:	6019      	str	r1, [r3, #0]
	while(w25qxx.Lock == 1)
 8001802:	e002      	b.n	800180a <W25qxx_IsEmptyBlock+0x22>
	W25qxx_Delay(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f000 fcaf 	bl	8002168 <HAL_Delay>
	while(w25qxx.Lock == 1)
 800180a:	4b71      	ldr	r3, [pc, #452]	; (80019d0 <W25qxx_IsEmptyBlock+0x1e8>)
 800180c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001810:	2b01      	cmp	r3, #1
 8001812:	d0f7      	beq.n	8001804 <W25qxx_IsEmptyBlock+0x1c>

	w25qxx.Lock = 1;
 8001814:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <W25qxx_IsEmptyBlock+0x1e8>)
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	uint8_t	pBuffer[256] = {0,};
 800181c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001820:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	3304      	adds	r3, #4
 800182a:	22fc      	movs	r2, #252	; 0xfc
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fc5e 	bl	80050f0 <memset>
	uint32_t WorkAddress = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint16_t s_buf = 256;
 800183a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800183e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
	uint32_t size = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	size = w25qxx.BlockSize - OffsetInByte;
 8001848:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <W25qxx_IsEmptyBlock+0x1e8>)
 800184a:	699a      	ldr	r2, [r3, #24]
 800184c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001850:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	WorkAddress = (OffsetInByte + Block_Address * w25qxx.BlockSize);
 800185c:	4b5c      	ldr	r3, [pc, #368]	; (80019d0 <W25qxx_IsEmptyBlock+0x1e8>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001864:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001872:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4413      	add	r3, r2
 800187a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

//char buf2[64] = {0,};
//snprintf(buf2, 64, "SIZEB %lu \n", size);
//HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), 100);

	uint16_t cikl = size / 256;
 800187e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	uint16_t cikl2 = size % 256;
 8001888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800188c:	b29b      	uxth	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t count_cikle = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

	if(size <= 256)
 800189a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800189e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a2:	d803      	bhi.n	80018ac <W25qxx_IsEmptyBlock+0xc4>
	{
		count_cikle = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80018aa:	e00d      	b.n	80018c8 <W25qxx_IsEmptyBlock+0xe0>
		//HAL_UART_Transmit(&huart1, (uint8_t*)"1\n", 2, 100);
	}
	else if(cikl2 == 0)
 80018ac:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d104      	bne.n	80018be <W25qxx_IsEmptyBlock+0xd6>
	{
		count_cikle = cikl;
 80018b4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80018b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80018bc:	e004      	b.n	80018c8 <W25qxx_IsEmptyBlock+0xe0>
		//HAL_UART_Transmit(&huart1, (uint8_t*)"2\n", 2, 100);
	}
	else
	{
		count_cikle = cikl + 1;
 80018be:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80018c2:	3301      	adds	r3, #1
 80018c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
		//HAL_UART_Transmit(&huart1, (uint8_t*)"3\n", 2, 100);
	}


	for(uint16_t i = 0; i < count_cikle; i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80018ce:	e06f      	b.n	80019b0 <W25qxx_IsEmptyBlock+0x1c8>
	{
		W25QFLASH_CS_SELECT;
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d6:	483f      	ldr	r0, [pc, #252]	; (80019d4 <W25qxx_IsEmptyBlock+0x1ec>)
 80018d8:	f001 f96c 	bl	8002bb4 <HAL_GPIO_WritePin>
		W25qxx_Spi(W25_FAST_READ);
 80018dc:	200b      	movs	r0, #11
 80018de:	f7ff fa61 	bl	8000da4 <W25qxx_Spi>

		if(w25qxx.ID>=W25Q256)
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <W25qxx_IsEmptyBlock+0x1e8>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d906      	bls.n	80018f8 <W25qxx_IsEmptyBlock+0x110>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80018ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018ee:	0e1b      	lsrs	r3, r3, #24
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fa56 	bl	8000da4 <W25qxx_Spi>

		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80018f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fa4f 	bl	8000da4 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001906:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fa48 	bl	8000da4 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8001914:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fa42 	bl	8000da4 <W25qxx_Spi>

		W25qxx_Spi(0);
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fa3f 	bl	8000da4 <W25qxx_Spi>

		if(size < 256) s_buf = size;
 8001926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d803      	bhi.n	8001936 <W25qxx_IsEmptyBlock+0x14e>
 800192e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001932:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a

//snprintf(buf2, 64, "RECIVB %lu %d %d %lu\n", size, s_buf, i, WorkAddress);
//HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), 100);

		HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, s_buf, 100);
 8001936:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 800193a:	f107 0108 	add.w	r1, r7, #8
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	4825      	ldr	r0, [pc, #148]	; (80019d8 <W25qxx_IsEmptyBlock+0x1f0>)
 8001942:	f001 ff59 	bl	80037f8 <HAL_SPI_Receive>

		W25QFLASH_CS_UNSELECT;
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194c:	4821      	ldr	r0, [pc, #132]	; (80019d4 <W25qxx_IsEmptyBlock+0x1ec>)
 800194e:	f001 f931 	bl	8002bb4 <HAL_GPIO_WritePin>

		for(uint16_t i = 0; i < s_buf; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001958:	e013      	b.n	8001982 <W25qxx_IsEmptyBlock+0x19a>
		{
			if(pBuffer[i] != 0xFF)
 800195a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800195e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001962:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	2bff      	cmp	r3, #255	; 0xff
 800196a:	d005      	beq.n	8001978 <W25qxx_IsEmptyBlock+0x190>
			{
				w25qxx.Lock = 0;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <W25qxx_IsEmptyBlock+0x1e8>)
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				return 0;
 8001974:	2300      	movs	r3, #0
 8001976:	e026      	b.n	80019c6 <W25qxx_IsEmptyBlock+0x1de>
		for(uint16_t i = 0; i < s_buf; i++)
 8001978:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800197c:	3301      	adds	r3, #1
 800197e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001982:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8001986:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 800198a:	429a      	cmp	r2, r3
 800198c:	d3e5      	bcc.n	800195a <W25qxx_IsEmptyBlock+0x172>
			}
		}

		size = size - 256;
 800198e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001992:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001996:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		WorkAddress = WorkAddress + 256;
 800199a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800199e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	for(uint16_t i = 0; i < count_cikle; i++)
 80019a6:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80019aa:	3301      	adds	r3, #1
 80019ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80019b0:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80019b4:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d389      	bcc.n	80018d0 <W25qxx_IsEmptyBlock+0xe8>
	}

	w25qxx.Lock = 0;
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <W25qxx_IsEmptyBlock+0x1e8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000214 	.word	0x20000214
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	20000090 	.word	0x20000090

080019dc <W25qxx_WriteByte>:

//###################################################################################################################
void W25qxx_WriteByte(uint8_t byte, uint32_t addr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
	while(w25qxx.Lock == 1)
 80019e8:	e002      	b.n	80019f0 <W25qxx_WriteByte+0x14>
		W25qxx_Delay(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f000 fbbc 	bl	8002168 <HAL_Delay>
	while(w25qxx.Lock == 1)
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <W25qxx_WriteByte+0xa0>)
 80019f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d0f7      	beq.n	80019ea <W25qxx_WriteByte+0xe>

	w25qxx.Lock = 1;
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <W25qxx_WriteByte+0xa0>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 8001a02:	f7ff fa35 	bl	8000e70 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8001a06:	f7ff fa1b 	bl	8000e40 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a10:	481b      	ldr	r0, [pc, #108]	; (8001a80 <W25qxx_WriteByte+0xa4>)
 8001a12:	f001 f8cf 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 8001a16:	2002      	movs	r0, #2
 8001a18:	f7ff f9c4 	bl	8000da4 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <W25qxx_WriteByte+0xa0>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d905      	bls.n	8001a30 <W25qxx_WriteByte+0x54>
		W25qxx_Spi((addr & 0xFF000000) >> 24);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	0e1b      	lsrs	r3, r3, #24
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f9ba 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi((addr & 0xFF0000) >> 16);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f9b4 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi((addr & 0xFF00) >> 8);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f9ae 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi(addr & 0xFF);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9a9 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi(byte);
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f9a5 	bl	8000da4 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a60:	4807      	ldr	r0, [pc, #28]	; (8001a80 <W25qxx_WriteByte+0xa4>)
 8001a62:	f001 f8a7 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8001a66:	f7ff fa03 	bl	8000e70 <W25qxx_WaitForWriteEnd>

	w25qxx.Lock = 0;
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <W25qxx_WriteByte+0xa0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000214 	.word	0x20000214
 8001a80:	40010c00 	.word	0x40010c00

08001a84 <W25qxx_WritePage>:

//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock == 1)
 8001a92:	e002      	b.n	8001a9a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f000 fb67 	bl	8002168 <HAL_Delay>
	while(w25qxx.Lock == 1)
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <W25qxx_WritePage+0xf8>)
 8001a9c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d0f7      	beq.n	8001a94 <W25qxx_WritePage+0x10>

	w25qxx.Lock = 1;
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <W25qxx_WritePage+0xf8>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if(((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a32      	ldr	r2, [pc, #200]	; (8001b7c <W25qxx_WritePage+0xf8>)
 8001ab4:	8952      	ldrh	r2, [r2, #10]
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d802      	bhi.n	8001ac0 <W25qxx_WritePage+0x3c>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <W25qxx_WritePage+0xf8>)
 8001ac2:	895b      	ldrh	r3, [r3, #10]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	603b      	str	r3, [r7, #0]

	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <W25qxx_WritePage+0xf8>)
 8001ad4:	8952      	ldrh	r2, [r2, #10]
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d905      	bls.n	8001ae6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <W25qxx_WritePage+0xf8>)
 8001adc:	895b      	ldrh	r3, [r3, #10]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	603b      	str	r3, [r7, #0]


	W25qxx_WaitForWriteEnd();
 8001ae6:	f7ff f9c3 	bl	8000e70 <W25qxx_WaitForWriteEnd>

	W25qxx_WriteEnable();
 8001aea:	f7ff f9a9 	bl	8000e40 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af4:	4822      	ldr	r0, [pc, #136]	; (8001b80 <W25qxx_WritePage+0xfc>)
 8001af6:	f001 f85d 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7ff f952 	bl	8000da4 <W25qxx_Spi>

	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <W25qxx_WritePage+0xf8>)
 8001b02:	895b      	ldrh	r3, [r3, #10]
 8001b04:	461a      	mov	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60bb      	str	r3, [r7, #8]

	if(w25qxx.ID >= W25Q256)
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <W25qxx_WritePage+0xf8>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d905      	bls.n	8001b26 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	0e1b      	lsrs	r3, r3, #24
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f93f 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff f939 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f933 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f92e 	bl	8000da4 <W25qxx_Spi>

	HAL_SPI_Transmit(W25QXX_SPI_PTR, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2364      	movs	r3, #100	; 0x64
 8001b4e:	68f9      	ldr	r1, [r7, #12]
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <W25qxx_WritePage+0x100>)
 8001b52:	f001 fd15 	bl	8003580 <HAL_SPI_Transmit>

	W25QFLASH_CS_UNSELECT;
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b5c:	4808      	ldr	r0, [pc, #32]	; (8001b80 <W25qxx_WritePage+0xfc>)
 8001b5e:	f001 f829 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8001b62:	f7ff f985 	bl	8000e70 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 fafe 	bl	8002168 <HAL_Delay>
	w25qxx.Lock = 0;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <W25qxx_WritePage+0xf8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000214 	.word	0x20000214
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	20000090 	.word	0x20000090

08001b88 <W25qxx_WriteSector>:

//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <W25qxx_WriteSector+0xb4>)
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d802      	bhi.n	8001ba6 <W25qxx_WriteSector+0x1e>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <W25qxx_WriteSector+0xb4>)
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	603b      	str	r3, [r7, #0]

	uint32_t StartPage;
	int32_t	BytesToWrite;
	uint32_t LocalOffset;

	if((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	441a      	add	r2, r3
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <W25qxx_WriteSector+0xb4>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d905      	bls.n	8001bc6 <W25qxx_WriteSector+0x3e>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <W25qxx_WriteSector+0xb4>)
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	e001      	b.n	8001bca <W25qxx_WriteSector+0x42>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]

	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001bca:	68b8      	ldr	r0, [r7, #8]
 8001bcc:	f7ff fc38 	bl	8001440 <W25qxx_SectorToPage>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <W25qxx_WriteSector+0xb4>)
 8001bd4:	895b      	ldrh	r3, [r3, #10]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	4413      	add	r3, r2
 8001be0:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <W25qxx_WriteSector+0xb4>)
 8001be4:	895b      	ldrh	r3, [r3, #10]
 8001be6:	461a      	mov	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bee:	fb01 f202 	mul.w	r2, r1, r2
 8001bf2:	1a9b      	subs	r3, r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]

	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	69f9      	ldr	r1, [r7, #28]
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff ff41 	bl	8001a84 <W25qxx_WritePage>
		StartPage++;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]

		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <W25qxx_WriteSector+0xb4>)
 8001c0a:	895b      	ldrh	r3, [r3, #10]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	1a9a      	subs	r2, r3, r2
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4413      	add	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
		//pBuffer += w25qxx.PageSize;
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <W25qxx_WriteSector+0xb4>)
 8001c1a:	895b      	ldrh	r3, [r3, #10]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
	}
	while(BytesToWrite > 0);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	dce1      	bgt.n	8001bf6 <W25qxx_WriteSector+0x6e>
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000214 	.word	0x20000214

08001c40 <W25qxx_WriteBlock>:

//###################################################################################################################
void W25qxx_WriteBlock(uint8_t* pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_BlockSize)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize == 0))
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <W25qxx_WriteBlock+0xb4>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d802      	bhi.n	8001c5e <W25qxx_WriteBlock+0x1e>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <W25qxx_WriteBlock+0xb4>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	603b      	str	r3, [r7, #0]

	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;

	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	441a      	add	r2, r3
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <W25qxx_WriteBlock+0xb4>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d905      	bls.n	8001c7e <W25qxx_WriteBlock+0x3e>
		BytesToWrite = w25qxx.BlockSize - OffsetInByte;
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <W25qxx_WriteBlock+0xb4>)
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	e001      	b.n	8001c82 <W25qxx_WriteBlock+0x42>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	61bb      	str	r3, [r7, #24]

	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8001c82:	68b8      	ldr	r0, [r7, #8]
 8001c84:	f7ff fbf0 	bl	8001468 <W25qxx_BlockToPage>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <W25qxx_WriteBlock+0xb4>)
 8001c8c:	895b      	ldrh	r3, [r3, #10]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	4413      	add	r3, r2
 8001c98:	61fb      	str	r3, [r7, #28]

	LocalOffset = OffsetInByte%w25qxx.PageSize;
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <W25qxx_WriteBlock+0xb4>)
 8001c9c:	895b      	ldrh	r3, [r3, #10]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ca6:	fb01 f202 	mul.w	r2, r1, r2
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

	do
	{
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	69f9      	ldr	r1, [r7, #28]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff fee5 	bl	8001a84 <W25qxx_WritePage>
		StartPage++;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <W25qxx_WriteBlock+0xb4>)
 8001cc2:	895b      	ldrh	r3, [r3, #10]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	1a9a      	subs	r2, r3, r2
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4413      	add	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
		//pBuffer += w25qxx.PageSize;
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <W25qxx_WriteBlock+0xb4>)
 8001cd2:	895b      	ldrh	r3, [r3, #10]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
	}
	while(BytesToWrite > 0);
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	dce1      	bgt.n	8001cae <W25qxx_WriteBlock+0x6e>
}
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000214 	.word	0x20000214

08001cf8 <W25qxx_ReadByte>:

//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
	while(w25qxx.Lock==1)
 8001d02:	e002      	b.n	8001d0a <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f000 fa2f 	bl	8002168 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001d0a:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <W25qxx_ReadByte+0x9c>)
 8001d0c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d0f7      	beq.n	8001d04 <W25qxx_ReadByte+0xc>

	w25qxx.Lock=1;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <W25qxx_ReadByte+0x9c>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25QFLASH_CS_SELECT;
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d22:	481d      	ldr	r0, [pc, #116]	; (8001d98 <W25qxx_ReadByte+0xa0>)
 8001d24:	f000 ff46 	bl	8002bb4 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_FAST_READ);
 8001d28:	200b      	movs	r0, #11
 8001d2a:	f7ff f83b 	bl	8000da4 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <W25qxx_ReadByte+0x9c>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d905      	bls.n	8001d42 <W25qxx_ReadByte+0x4a>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	0e1b      	lsrs	r3, r3, #24
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f831 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f82b 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address& 0xFF00) >> 8);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f825 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f820 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff f81d 	bl	8000da4 <W25qxx_Spi>

	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d6a:	20a5      	movs	r0, #165	; 0xa5
 8001d6c:	f7ff f81a 	bl	8000da4 <W25qxx_Spi>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]

	W25QFLASH_CS_UNSELECT;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <W25qxx_ReadByte+0xa0>)
 8001d80:	f000 ff18 	bl	8002bb4 <HAL_GPIO_WritePin>

	w25qxx.Lock = 0;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <W25qxx_ReadByte+0x9c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000214 	.word	0x20000214
 8001d98:	40010c00 	.word	0x40010c00

08001d9c <W25qxx_ReadBytes>:

//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock == 1)
 8001da8:	e002      	b.n	8001db0 <W25qxx_ReadBytes+0x14>
	W25qxx_Delay(1);
 8001daa:	2001      	movs	r0, #1
 8001dac:	f000 f9dc 	bl	8002168 <HAL_Delay>
	while(w25qxx.Lock == 1)
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <W25qxx_ReadBytes+0xa8>)
 8001db2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d0f7      	beq.n	8001daa <W25qxx_ReadBytes+0xe>

	w25qxx.Lock = 1;
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <W25qxx_ReadBytes+0xa8>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25QFLASH_CS_SELECT;
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	481f      	ldr	r0, [pc, #124]	; (8001e48 <W25qxx_ReadBytes+0xac>)
 8001dca:	f000 fef3 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 8001dce:	200b      	movs	r0, #11
 8001dd0:	f7fe ffe8 	bl	8000da4 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <W25qxx_ReadBytes+0xa8>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d905      	bls.n	8001de8 <W25qxx_ReadBytes+0x4c>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	0e1b      	lsrs	r3, r3, #24
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ffde 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0c1b      	lsrs	r3, r3, #16
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe ffd8 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe ffd2 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe ffcd 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7fe ffca 	bl	8000da4 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, NumByteToRead, 2000);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e18:	68f9      	ldr	r1, [r7, #12]
 8001e1a:	480c      	ldr	r0, [pc, #48]	; (8001e4c <W25qxx_ReadBytes+0xb0>)
 8001e1c:	f001 fcec 	bl	80037f8 <HAL_SPI_Receive>
		while(!(W25QXX_SPI->SR & SPI_SR_RXNE));
		pBuffer[i++] = W25QXX_SPI->DR;
		NumByteToRead--;
	}*/

	W25QFLASH_CS_UNSELECT;
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <W25qxx_ReadBytes+0xac>)
 8001e28:	f000 fec4 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_Delay(1);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f000 f99b 	bl	8002168 <HAL_Delay>
	w25qxx.Lock = 0;
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <W25qxx_ReadBytes+0xa8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000214 	.word	0x20000214
 8001e48:	40010c00 	.word	0x40010c00
 8001e4c:	20000090 	.word	0x20000090

08001e50 <W25qxx_ReadPage>:

//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8001e5e:	e002      	b.n	8001e66 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f000 f981 	bl	8002168 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <W25qxx_ReadPage+0xec>)
 8001e68:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d0f7      	beq.n	8001e60 <W25qxx_ReadPage+0x10>

	w25qxx.Lock = 1;
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <W25qxx_ReadPage+0xec>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize) || (NumByteToRead_up_to_PageSize==0))
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <W25qxx_ReadPage+0xec>)
 8001e7a:	895b      	ldrh	r3, [r3, #10]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d802      	bhi.n	8001e8a <W25qxx_ReadPage+0x3a>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <W25qxx_ReadPage+0xec>)
 8001e8c:	895b      	ldrh	r3, [r3, #10]
 8001e8e:	603b      	str	r3, [r7, #0]

	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <W25qxx_ReadPage+0xec>)
 8001e98:	8952      	ldrh	r2, [r2, #10]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d905      	bls.n	8001eaa <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <W25qxx_ReadPage+0xec>)
 8001ea0:	895b      	ldrh	r3, [r3, #10]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	603b      	str	r3, [r7, #0]

	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <W25qxx_ReadPage+0xec>)
 8001eac:	895b      	ldrh	r3, [r3, #10]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
	W25QFLASH_CS_SELECT;
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec2:	481f      	ldr	r0, [pc, #124]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001ec4:	f000 fe76 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 8001ec8:	200b      	movs	r0, #11
 8001eca:	f7fe ff6b 	bl	8000da4 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <W25qxx_ReadPage+0xec>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d905      	bls.n	8001ee2 <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	0e1b      	lsrs	r3, r3, #24
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe ff61 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ff5b 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe ff55 	bl	8000da4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ff50 	bl	8000da4 <W25qxx_Spi>

	W25qxx_Spi(0);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7fe ff4d 	bl	8000da4 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	2364      	movs	r3, #100	; 0x64
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	480c      	ldr	r0, [pc, #48]	; (8001f44 <W25qxx_ReadPage+0xf4>)
 8001f14:	f001 fc70 	bl	80037f8 <HAL_SPI_Receive>
		while(!(W25QXX_SPI->SR & SPI_SR_RXNE));
		pBuffer[i++] = W25QXX_SPI->DR;
		NumByteToRead_up_to_PageSize--;
	}*/

	W25QFLASH_CS_UNSELECT;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1e:	4808      	ldr	r0, [pc, #32]	; (8001f40 <W25qxx_ReadPage+0xf0>)
 8001f20:	f000 fe48 	bl	8002bb4 <HAL_GPIO_WritePin>

	W25qxx_Delay(1);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f000 f91f 	bl	8002168 <HAL_Delay>
	w25qxx.Lock=0;
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <W25qxx_ReadPage+0xec>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000214 	.word	0x20000214
 8001f40:	40010c00 	.word	0x40010c00
 8001f44:	20000090 	.word	0x20000090

08001f48 <W25qxx_ReadSector>:

//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize==0))
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <W25qxx_ReadSector+0xb4>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d802      	bhi.n	8001f66 <W25qxx_ReadSector+0x1e>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <W25qxx_ReadSector+0xb4>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	603b      	str	r3, [r7, #0]

	uint32_t StartPage;
	int32_t	BytesToRead;
	uint32_t LocalOffset;

	if((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	441a      	add	r2, r3
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <W25qxx_ReadSector+0xb4>)
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d905      	bls.n	8001f86 <W25qxx_ReadSector+0x3e>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <W25qxx_ReadSector+0xb4>)
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e001      	b.n	8001f8a <W25qxx_ReadSector+0x42>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	61bb      	str	r3, [r7, #24]

	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001f8a:	68b8      	ldr	r0, [r7, #8]
 8001f8c:	f7ff fa58 	bl	8001440 <W25qxx_SectorToPage>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <W25qxx_ReadSector+0xb4>)
 8001f94:	895b      	ldrh	r3, [r3, #10]
 8001f96:	4619      	mov	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	61fb      	str	r3, [r7, #28]

	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <W25qxx_ReadSector+0xb4>)
 8001fa4:	895b      	ldrh	r3, [r3, #10]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fae:	fb01 f202 	mul.w	r2, r1, r2
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]

	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	69f9      	ldr	r1, [r7, #28]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff ff47 	bl	8001e50 <W25qxx_ReadPage>
		StartPage++;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize-LocalOffset;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <W25qxx_ReadSector+0xb4>)
 8001fca:	895b      	ldrh	r3, [r3, #10]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	1a9a      	subs	r2, r3, r2
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
		//pBuffer+=w25qxx.PageSize;
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <W25qxx_ReadSector+0xb4>)
 8001fda:	895b      	ldrh	r3, [r3, #10]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
	}
	while(BytesToRead > 0);
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	dce1      	bgt.n	8001fb6 <W25qxx_ReadSector+0x6e>
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000214 	.word	0x20000214

08002000 <W25qxx_ReadBlock>:

//###################################################################################################################
void W25qxx_ReadBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t	NumByteToRead_up_to_BlockSize)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 800200e:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <W25qxx_ReadBlock+0xb4>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d802      	bhi.n	800201e <W25qxx_ReadBlock+0x1e>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize = w25qxx.BlockSize;
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <W25qxx_ReadBlock+0xb4>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	603b      	str	r3, [r7, #0]

	uint32_t StartPage;
	int32_t	BytesToRead;
	uint32_t LocalOffset;

	if((OffsetInByte+NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	441a      	add	r2, r3
 800202a:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <W25qxx_ReadBlock+0xb4>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	429a      	cmp	r2, r3
 8002030:	d905      	bls.n	800203e <W25qxx_ReadBlock+0x3e>
		BytesToRead = w25qxx.BlockSize-OffsetInByte;
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <W25qxx_ReadBlock+0xb4>)
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	e001      	b.n	8002042 <W25qxx_ReadBlock+0x42>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	61bb      	str	r3, [r7, #24]

	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 8002042:	68b8      	ldr	r0, [r7, #8]
 8002044:	f7ff fa10 	bl	8001468 <W25qxx_BlockToPage>
 8002048:	4602      	mov	r2, r0
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <W25qxx_ReadBlock+0xb4>)
 800204c:	895b      	ldrh	r3, [r3, #10]
 800204e:	4619      	mov	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	4413      	add	r3, r2
 8002058:	61fb      	str	r3, [r7, #28]

	LocalOffset = OffsetInByte%w25qxx.PageSize;
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <W25qxx_ReadBlock+0xb4>)
 800205c:	895b      	ldrh	r3, [r3, #10]
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	fbb3 f1f2 	udiv	r1, r3, r2
 8002066:	fb01 f202 	mul.w	r2, r1, r2
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	617b      	str	r3, [r7, #20]

	do
	{
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	69f9      	ldr	r1, [r7, #28]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff feeb 	bl	8001e50 <W25qxx_ReadPage>
		StartPage++;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3301      	adds	r3, #1
 800207e:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <W25qxx_ReadBlock+0xb4>)
 8002082:	895b      	ldrh	r3, [r3, #10]
 8002084:	461a      	mov	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	1a9a      	subs	r2, r3, r2
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4413      	add	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
		//pBuffer+=w25qxx.PageSize;
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <W25qxx_ReadBlock+0xb4>)
 8002092:	895b      	ldrh	r3, [r3, #10]
 8002094:	461a      	mov	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
	}
	while(BytesToRead > 0);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	dce1      	bgt.n	800206e <W25qxx_ReadBlock+0x6e>
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000214 	.word	0x20000214

080020b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ba:	490d      	ldr	r1, [pc, #52]	; (80020f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d0:	4c0a      	ldr	r4, [pc, #40]	; (80020fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020de:	f7fe fd85 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f002 ffd3 	bl	800508c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020e6:	f7fe f9e5 	bl	80004b4 <main>
  bx lr
 80020ea:	4770      	bx	lr
  ldr r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020f4:	0800655c 	.word	0x0800655c
  ldr r2, =_sbss
 80020f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020fc:	20000250 	.word	0x20000250

08002100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC1_2_IRQHandler>
	...

08002104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_Init+0x28>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_Init+0x28>)
 800210e:	f043 0310 	orr.w	r3, r3, #16
 8002112:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 f8f5 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211a:	200f      	movs	r0, #15
 800211c:	f7fe fc1e 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002120:	f7fe fb20 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000

08002130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_IncTick+0x1c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_IncTick+0x20>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a03      	ldr	r2, [pc, #12]	; (8002150 <HAL_IncTick+0x20>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	20000008 	.word	0x20000008
 8002150:	2000023c 	.word	0x2000023c

08002154 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <HAL_GetTick+0x10>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	2000023c 	.word	0x2000023c

08002168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fff0 	bl	8002154 <HAL_GetTick>
 8002174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002180:	d005      	beq.n	800218e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_Delay+0x44>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800218e:	bf00      	nop
 8002190:	f7ff ffe0 	bl	8002154 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d8f7      	bhi.n	8002190 <HAL_Delay+0x28>
  {
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000008 	.word	0x20000008

080021b0 <__NVIC_SetPriorityGrouping>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4906      	ldr	r1, [pc, #24]	; (8002248 <__NVIC_EnableIRQ+0x34>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff4f 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800232c:	f7ff ff64 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 8002330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	6978      	ldr	r0, [r7, #20]
 8002338:	f7ff ffb2 	bl	80022a0 <NVIC_EncodePriority>
 800233c:	4602      	mov	r2, r0
 800233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff81 	bl	800224c <__NVIC_SetPriority>
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff57 	bl	8002214 <__NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e043      	b.n	800240e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_DMA_Init+0xa8>)
 800238e:	4413      	add	r3, r2
 8002390:	4a22      	ldr	r2, [pc, #136]	; (800241c <HAL_DMA_Init+0xac>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_DMA_Init+0xb0>)
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	bffdfff8 	.word	0xbffdfff8
 800241c:	cccccccd 	.word	0xcccccccd
 8002420:	40020000 	.word	0x40020000

08002424 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_DMA_Start_IT+0x20>
 8002440:	2302      	movs	r3, #2
 8002442:	e04a      	b.n	80024da <HAL_DMA_Start_IT+0xb6>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002452:	2b01      	cmp	r3, #1
 8002454:	d13a      	bne.n	80024cc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f9e8 	bl	8002850 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 020e 	orr.w	r2, r2, #14
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e00f      	b.n	80024ba <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0204 	bic.w	r2, r2, #4
 80024a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 020a 	orr.w	r2, r2, #10
 80024b8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0201 	orr.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e005      	b.n	80024d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
 80024d6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d008      	beq.n	800250a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2204      	movs	r2, #4
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e020      	b.n	800254c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 020e 	bic.w	r2, r2, #14
 8002518:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f202 	lsl.w	r2, r1, r2
 8002538:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
	...

08002558 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800256a:	2b02      	cmp	r3, #2
 800256c:	d005      	beq.n	800257a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2204      	movs	r2, #4
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	e051      	b.n	800261e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 020e 	bic.w	r2, r2, #14
 8002588:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0201 	bic.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a22      	ldr	r2, [pc, #136]	; (8002628 <HAL_DMA_Abort_IT+0xd0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d029      	beq.n	80025f8 <HAL_DMA_Abort_IT+0xa0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a20      	ldr	r2, [pc, #128]	; (800262c <HAL_DMA_Abort_IT+0xd4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d022      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x9c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <HAL_DMA_Abort_IT+0xd8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d01a      	beq.n	80025ee <HAL_DMA_Abort_IT+0x96>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <HAL_DMA_Abort_IT+0xdc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d012      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x90>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1c      	ldr	r2, [pc, #112]	; (8002638 <HAL_DMA_Abort_IT+0xe0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00a      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x8a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1a      	ldr	r2, [pc, #104]	; (800263c <HAL_DMA_Abort_IT+0xe4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d102      	bne.n	80025dc <HAL_DMA_Abort_IT+0x84>
 80025d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025da:	e00e      	b.n	80025fa <HAL_DMA_Abort_IT+0xa2>
 80025dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e0:	e00b      	b.n	80025fa <HAL_DMA_Abort_IT+0xa2>
 80025e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e6:	e008      	b.n	80025fa <HAL_DMA_Abort_IT+0xa2>
 80025e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ec:	e005      	b.n	80025fa <HAL_DMA_Abort_IT+0xa2>
 80025ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f2:	e002      	b.n	80025fa <HAL_DMA_Abort_IT+0xa2>
 80025f4:	2310      	movs	r3, #16
 80025f6:	e000      	b.n	80025fa <HAL_DMA_Abort_IT+0xa2>
 80025f8:	2301      	movs	r3, #1
 80025fa:	4a11      	ldr	r2, [pc, #68]	; (8002640 <HAL_DMA_Abort_IT+0xe8>)
 80025fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
    } 
  }
  return status;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40020008 	.word	0x40020008
 800262c:	4002001c 	.word	0x4002001c
 8002630:	40020030 	.word	0x40020030
 8002634:	40020044 	.word	0x40020044
 8002638:	40020058 	.word	0x40020058
 800263c:	4002006c 	.word	0x4002006c
 8002640:	40020000 	.word	0x40020000

08002644 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2204      	movs	r2, #4
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d04f      	beq.n	800270c <HAL_DMA_IRQHandler+0xc8>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d04a      	beq.n	800270c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a66      	ldr	r2, [pc, #408]	; (8002834 <HAL_DMA_IRQHandler+0x1f0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d029      	beq.n	80026f2 <HAL_DMA_IRQHandler+0xae>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_DMA_IRQHandler+0x1f4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <HAL_DMA_IRQHandler+0xaa>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a63      	ldr	r2, [pc, #396]	; (800283c <HAL_DMA_IRQHandler+0x1f8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01a      	beq.n	80026e8 <HAL_DMA_IRQHandler+0xa4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a62      	ldr	r2, [pc, #392]	; (8002840 <HAL_DMA_IRQHandler+0x1fc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d012      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x9e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a60      	ldr	r2, [pc, #384]	; (8002844 <HAL_DMA_IRQHandler+0x200>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00a      	beq.n	80026dc <HAL_DMA_IRQHandler+0x98>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5f      	ldr	r2, [pc, #380]	; (8002848 <HAL_DMA_IRQHandler+0x204>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d102      	bne.n	80026d6 <HAL_DMA_IRQHandler+0x92>
 80026d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026d4:	e00e      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026da:	e00b      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026e0:	e008      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026e6:	e005      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ec:	e002      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026ee:	2340      	movs	r3, #64	; 0x40
 80026f0:	e000      	b.n	80026f4 <HAL_DMA_IRQHandler+0xb0>
 80026f2:	2304      	movs	r3, #4
 80026f4:	4a55      	ldr	r2, [pc, #340]	; (800284c <HAL_DMA_IRQHandler+0x208>)
 80026f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8094 	beq.w	800282a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800270a:	e08e      	b.n	800282a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2202      	movs	r2, #2
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d056      	beq.n	80027ca <HAL_DMA_IRQHandler+0x186>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d051      	beq.n	80027ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020a 	bic.w	r2, r2, #10
 8002742:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a38      	ldr	r2, [pc, #224]	; (8002834 <HAL_DMA_IRQHandler+0x1f0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d029      	beq.n	80027aa <HAL_DMA_IRQHandler+0x166>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a37      	ldr	r2, [pc, #220]	; (8002838 <HAL_DMA_IRQHandler+0x1f4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x162>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a35      	ldr	r2, [pc, #212]	; (800283c <HAL_DMA_IRQHandler+0x1f8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01a      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x15c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a34      	ldr	r2, [pc, #208]	; (8002840 <HAL_DMA_IRQHandler+0x1fc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d012      	beq.n	800279a <HAL_DMA_IRQHandler+0x156>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a32      	ldr	r2, [pc, #200]	; (8002844 <HAL_DMA_IRQHandler+0x200>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00a      	beq.n	8002794 <HAL_DMA_IRQHandler+0x150>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a31      	ldr	r2, [pc, #196]	; (8002848 <HAL_DMA_IRQHandler+0x204>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d102      	bne.n	800278e <HAL_DMA_IRQHandler+0x14a>
 8002788:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800278c:	e00e      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 800278e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002792:	e00b      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 8002794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002798:	e008      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 800279a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279e:	e005      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 80027a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a4:	e002      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 80027a6:	2320      	movs	r3, #32
 80027a8:	e000      	b.n	80027ac <HAL_DMA_IRQHandler+0x168>
 80027aa:	2302      	movs	r3, #2
 80027ac:	4a27      	ldr	r2, [pc, #156]	; (800284c <HAL_DMA_IRQHandler+0x208>)
 80027ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d034      	beq.n	800282a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027c8:	e02f      	b.n	800282a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2208      	movs	r2, #8
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d028      	beq.n	800282c <HAL_DMA_IRQHandler+0x1e8>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d023      	beq.n	800282c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 020e 	bic.w	r2, r2, #14
 80027f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002802:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
    }
  }
  return;
 800282a:	bf00      	nop
 800282c:	bf00      	nop
}
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40020008 	.word	0x40020008
 8002838:	4002001c 	.word	0x4002001c
 800283c:	40020030 	.word	0x40020030
 8002840:	40020044 	.word	0x40020044
 8002844:	40020058 	.word	0x40020058
 8002848:	4002006c 	.word	0x4002006c
 800284c:	40020000 	.word	0x40020000

08002850 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	2101      	movs	r1, #1
 8002868:	fa01 f202 	lsl.w	r2, r1, r2
 800286c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b10      	cmp	r3, #16
 800287c:	d108      	bne.n	8002890 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800288e:	e007      	b.n	80028a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	60da      	str	r2, [r3, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b08b      	sub	sp, #44	; 0x2c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	e169      	b.n	8002b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c0:	2201      	movs	r2, #1
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 8158 	bne.w	8002b8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4a9a      	ldr	r2, [pc, #616]	; (8002b4c <HAL_GPIO_Init+0x2a0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d05e      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 80028e8:	4a98      	ldr	r2, [pc, #608]	; (8002b4c <HAL_GPIO_Init+0x2a0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d875      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 80028ee:	4a98      	ldr	r2, [pc, #608]	; (8002b50 <HAL_GPIO_Init+0x2a4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d058      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 80028f4:	4a96      	ldr	r2, [pc, #600]	; (8002b50 <HAL_GPIO_Init+0x2a4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d86f      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 80028fa:	4a96      	ldr	r2, [pc, #600]	; (8002b54 <HAL_GPIO_Init+0x2a8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d052      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 8002900:	4a94      	ldr	r2, [pc, #592]	; (8002b54 <HAL_GPIO_Init+0x2a8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d869      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002906:	4a94      	ldr	r2, [pc, #592]	; (8002b58 <HAL_GPIO_Init+0x2ac>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d04c      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 800290c:	4a92      	ldr	r2, [pc, #584]	; (8002b58 <HAL_GPIO_Init+0x2ac>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d863      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002912:	4a92      	ldr	r2, [pc, #584]	; (8002b5c <HAL_GPIO_Init+0x2b0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d046      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 8002918:	4a90      	ldr	r2, [pc, #576]	; (8002b5c <HAL_GPIO_Init+0x2b0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d85d      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 800291e:	2b12      	cmp	r3, #18
 8002920:	d82a      	bhi.n	8002978 <HAL_GPIO_Init+0xcc>
 8002922:	2b12      	cmp	r3, #18
 8002924:	d859      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HAL_GPIO_Init+0x80>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	080029a7 	.word	0x080029a7
 8002930:	08002981 	.word	0x08002981
 8002934:	08002993 	.word	0x08002993
 8002938:	080029d5 	.word	0x080029d5
 800293c:	080029db 	.word	0x080029db
 8002940:	080029db 	.word	0x080029db
 8002944:	080029db 	.word	0x080029db
 8002948:	080029db 	.word	0x080029db
 800294c:	080029db 	.word	0x080029db
 8002950:	080029db 	.word	0x080029db
 8002954:	080029db 	.word	0x080029db
 8002958:	080029db 	.word	0x080029db
 800295c:	080029db 	.word	0x080029db
 8002960:	080029db 	.word	0x080029db
 8002964:	080029db 	.word	0x080029db
 8002968:	080029db 	.word	0x080029db
 800296c:	080029db 	.word	0x080029db
 8002970:	08002989 	.word	0x08002989
 8002974:	0800299d 	.word	0x0800299d
 8002978:	4a79      	ldr	r2, [pc, #484]	; (8002b60 <HAL_GPIO_Init+0x2b4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297e:	e02c      	b.n	80029da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	623b      	str	r3, [r7, #32]
          break;
 8002986:	e029      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	3304      	adds	r3, #4
 800298e:	623b      	str	r3, [r7, #32]
          break;
 8002990:	e024      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	3308      	adds	r3, #8
 8002998:	623b      	str	r3, [r7, #32]
          break;
 800299a:	e01f      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	330c      	adds	r3, #12
 80029a2:	623b      	str	r3, [r7, #32]
          break;
 80029a4:	e01a      	b.n	80029dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029ae:	2304      	movs	r3, #4
 80029b0:	623b      	str	r3, [r7, #32]
          break;
 80029b2:	e013      	b.n	80029dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029bc:	2308      	movs	r3, #8
 80029be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	611a      	str	r2, [r3, #16]
          break;
 80029c6:	e009      	b.n	80029dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c8:	2308      	movs	r3, #8
 80029ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	615a      	str	r2, [r3, #20]
          break;
 80029d2:	e003      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
          break;
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x130>
          break;
 80029da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2bff      	cmp	r3, #255	; 0xff
 80029e0:	d801      	bhi.n	80029e6 <HAL_GPIO_Init+0x13a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	e001      	b.n	80029ea <HAL_GPIO_Init+0x13e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2bff      	cmp	r3, #255	; 0xff
 80029f0:	d802      	bhi.n	80029f8 <HAL_GPIO_Init+0x14c>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	e002      	b.n	80029fe <HAL_GPIO_Init+0x152>
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	3b08      	subs	r3, #8
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	210f      	movs	r1, #15
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	6a39      	ldr	r1, [r7, #32]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80b1 	beq.w	8002b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a2c:	4b4d      	ldr	r3, [pc, #308]	; (8002b64 <HAL_GPIO_Init+0x2b8>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4a4c      	ldr	r2, [pc, #304]	; (8002b64 <HAL_GPIO_Init+0x2b8>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6193      	str	r3, [r2, #24]
 8002a38:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_GPIO_Init+0x2b8>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a44:	4a48      	ldr	r2, [pc, #288]	; (8002b68 <HAL_GPIO_Init+0x2bc>)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a40      	ldr	r2, [pc, #256]	; (8002b6c <HAL_GPIO_Init+0x2c0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_GPIO_Init+0x1ec>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3f      	ldr	r2, [pc, #252]	; (8002b70 <HAL_GPIO_Init+0x2c4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00d      	beq.n	8002a94 <HAL_GPIO_Init+0x1e8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3e      	ldr	r2, [pc, #248]	; (8002b74 <HAL_GPIO_Init+0x2c8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <HAL_GPIO_Init+0x1e4>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3d      	ldr	r2, [pc, #244]	; (8002b78 <HAL_GPIO_Init+0x2cc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <HAL_GPIO_Init+0x1e0>
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e006      	b.n	8002a9a <HAL_GPIO_Init+0x1ee>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	e004      	b.n	8002a9a <HAL_GPIO_Init+0x1ee>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e002      	b.n	8002a9a <HAL_GPIO_Init+0x1ee>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_GPIO_Init+0x1ee>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	f002 0203 	and.w	r2, r2, #3
 8002aa0:	0092      	lsls	r2, r2, #2
 8002aa2:	4093      	lsls	r3, r2
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aaa:	492f      	ldr	r1, [pc, #188]	; (8002b68 <HAL_GPIO_Init+0x2bc>)
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	492c      	ldr	r1, [pc, #176]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]
 8002ad0:	e006      	b.n	8002ae0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	4928      	ldr	r1, [pc, #160]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4922      	ldr	r1, [pc, #136]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e006      	b.n	8002b08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	491e      	ldr	r1, [pc, #120]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d006      	beq.n	8002b22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4918      	ldr	r1, [pc, #96]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
 8002b20:	e006      	b.n	8002b30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	4914      	ldr	r1, [pc, #80]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d021      	beq.n	8002b80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	490e      	ldr	r1, [pc, #56]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60cb      	str	r3, [r1, #12]
 8002b48:	e021      	b.n	8002b8e <HAL_GPIO_Init+0x2e2>
 8002b4a:	bf00      	nop
 8002b4c:	10320000 	.word	0x10320000
 8002b50:	10310000 	.word	0x10310000
 8002b54:	10220000 	.word	0x10220000
 8002b58:	10210000 	.word	0x10210000
 8002b5c:	10120000 	.word	0x10120000
 8002b60:	10110000 	.word	0x10110000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40010000 	.word	0x40010000
 8002b6c:	40010800 	.word	0x40010800
 8002b70:	40010c00 	.word	0x40010c00
 8002b74:	40011000 	.word	0x40011000
 8002b78:	40011400 	.word	0x40011400
 8002b7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	4909      	ldr	r1, [pc, #36]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	3301      	adds	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f ae8e 	bne.w	80028c0 <HAL_GPIO_Init+0x14>
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	372c      	adds	r7, #44	; 0x2c
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	611a      	str	r2, [r3, #16]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e272      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8087 	beq.w	8002d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c04:	4b92      	ldr	r3, [pc, #584]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d00c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c10:	4b8f      	ldr	r3, [pc, #572]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d112      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
 8002c1c:	4b8c      	ldr	r3, [pc, #560]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2a:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x12c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d168      	bne.n	8002d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e24c      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x76>
 8002c4c:	4b80      	ldr	r3, [pc, #512]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7f      	ldr	r2, [pc, #508]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e02e      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x98>
 8002c62:	4b7b      	ldr	r3, [pc, #492]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7a      	ldr	r2, [pc, #488]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a77      	ldr	r2, [pc, #476]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e01d      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0xbc>
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6e      	ldr	r2, [pc, #440]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0xd4>
 8002ca0:	4b6b      	ldr	r3, [pc, #428]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6a      	ldr	r2, [pc, #424]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a67      	ldr	r2, [pc, #412]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7ff fa48 	bl	8002154 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7ff fa44 	bl	8002154 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e200      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xe4>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7ff fa34 	bl	8002154 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7ff fa30 	bl	8002154 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1ec      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d02:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x10c>
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d063      	beq.n	8002de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d2a:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d11c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x18c>
 8002d36:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x176>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e1c0      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4939      	ldr	r1, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	e03a      	b.n	8002de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7ff f9e9 	bl	8002154 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d86:	f7ff f9e5 	bl	8002154 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1a1      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4927      	ldr	r1, [pc, #156]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
 8002db8:	e015      	b.n	8002de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f9c8 	bl	8002154 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7ff f9c4 	bl	8002154 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e180      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d03a      	beq.n	8002e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d019      	beq.n	8002e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e00:	f7ff f9a8 	bl	8002154 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e08:	f7ff f9a4 	bl	8002154 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e160      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e26:	2001      	movs	r0, #1
 8002e28:	f000 fb08 	bl	800343c <RCC_Delay>
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_RCC_OscConfig+0x274>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7ff f98e 	bl	8002154 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3a:	e00f      	b.n	8002e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7ff f98a 	bl	8002154 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d908      	bls.n	8002e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e146      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	42420000 	.word	0x42420000
 8002e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b92      	ldr	r3, [pc, #584]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e9      	bne.n	8002e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a6 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b8b      	ldr	r3, [pc, #556]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b88      	ldr	r3, [pc, #544]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4a87      	ldr	r2, [pc, #540]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	61d3      	str	r3, [r2, #28]
 8002e92:	4b85      	ldr	r3, [pc, #532]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b82      	ldr	r3, [pc, #520]	; (80030ac <HAL_RCC_OscConfig+0x4c8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eae:	4b7f      	ldr	r3, [pc, #508]	; (80030ac <HAL_RCC_OscConfig+0x4c8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a7e      	ldr	r2, [pc, #504]	; (80030ac <HAL_RCC_OscConfig+0x4c8>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eba:	f7ff f94b 	bl	8002154 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec2:	f7ff f947 	bl	8002154 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b64      	cmp	r3, #100	; 0x64
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e103      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	4b75      	ldr	r3, [pc, #468]	; (80030ac <HAL_RCC_OscConfig+0x4c8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x312>
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a6e      	ldr	r2, [pc, #440]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	e02d      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x334>
 8002efe:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a69      	ldr	r2, [pc, #420]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6213      	str	r3, [r2, #32]
 8002f0a:	4b67      	ldr	r3, [pc, #412]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a66      	ldr	r2, [pc, #408]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6213      	str	r3, [r2, #32]
 8002f16:	e01c      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x356>
 8002f20:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a60      	ldr	r2, [pc, #384]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	4b5e      	ldr	r3, [pc, #376]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a5d      	ldr	r2, [pc, #372]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6213      	str	r3, [r2, #32]
 8002f38:	e00b      	b.n	8002f52 <HAL_RCC_OscConfig+0x36e>
 8002f3a:	4b5b      	ldr	r3, [pc, #364]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a5a      	ldr	r2, [pc, #360]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b58      	ldr	r3, [pc, #352]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a57      	ldr	r2, [pc, #348]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7ff f8fb 	bl	8002154 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7ff f8f7 	bl	8002154 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0b1      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ee      	beq.n	8002f62 <HAL_RCC_OscConfig+0x37e>
 8002f84:	e014      	b.n	8002fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7ff f8e5 	bl	8002154 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7ff f8e1 	bl	8002154 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e09b      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ee      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4b3c      	ldr	r3, [pc, #240]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8087 	beq.w	80030da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d061      	beq.n	800309c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d146      	bne.n	800306e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7ff f8b5 	bl	8002154 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7ff f8b1 	bl	8002154 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e06d      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d108      	bne.n	8003028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4921      	ldr	r1, [pc, #132]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003028:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a19      	ldr	r1, [r3, #32]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	430b      	orrs	r3, r1
 800303a:	491b      	ldr	r1, [pc, #108]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7ff f885 	bl	8002154 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7ff f881 	bl	8002154 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e03d      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x46a>
 800306c:	e035      	b.n	80030da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_RCC_OscConfig+0x4cc>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7ff f86e 	bl	8002154 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7ff f86a 	bl	8002154 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e026      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x498>
 800309a:	e01e      	b.n	80030da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e019      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40007000 	.word	0x40007000
 80030b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_OscConfig+0x500>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000

080030e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0d0      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b6a      	ldr	r3, [pc, #424]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d910      	bls.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b67      	ldr	r3, [pc, #412]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	4965      	ldr	r1, [pc, #404]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a58      	ldr	r2, [pc, #352]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800314e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a52      	ldr	r2, [pc, #328]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d040      	beq.n	8003208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d115      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e073      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06b      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c6:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4936      	ldr	r1, [pc, #216]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d8:	f7fe ffbc 	bl	8002154 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe ffb8 	bl	8002154 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e053      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 020c 	and.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d1eb      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d210      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	4922      	ldr	r1, [pc, #136]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fb60 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40021000 	.word	0x40021000
 80032b0:	080064a4 	.word	0x080064a4
 80032b4:	20000000 	.word	0x20000000
 80032b8:	20000004 	.word	0x20000004

080032bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	b490      	push	{r4, r7}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032c2:	4b29      	ldr	r3, [pc, #164]	; (8003368 <HAL_RCC_GetSysClockFreq+0xac>)
 80032c4:	1d3c      	adds	r4, r7, #4
 80032c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032cc:	f240 2301 	movw	r3, #513	; 0x201
 80032d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032e6:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_RCC_GetSysClockFreq+0xb0>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d002      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x40>
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x46>
 80032fa:	e02b      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fe:	623b      	str	r3, [r7, #32]
      break;
 8003300:	e02b      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	0c9b      	lsrs	r3, r3, #18
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	3328      	adds	r3, #40	; 0x28
 800330c:	443b      	add	r3, r7
 800330e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003312:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d012      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331e:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	0c5b      	lsrs	r3, r3, #17
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	3328      	adds	r3, #40	; 0x28
 800332a:	443b      	add	r3, r7
 800332c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003330:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003336:	fb03 f202 	mul.w	r2, r3, r2
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	e004      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	623b      	str	r3, [r7, #32]
      break;
 8003352:	e002      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003356:	623b      	str	r3, [r7, #32]
      break;
 8003358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335a:	6a3b      	ldr	r3, [r7, #32]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3728      	adds	r7, #40	; 0x28
 8003360:	46bd      	mov	sp, r7
 8003362:	bc90      	pop	{r4, r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	08006494 	.word	0x08006494
 800336c:	40021000 	.word	0x40021000
 8003370:	007a1200 	.word	0x007a1200
 8003374:	003d0900 	.word	0x003d0900

08003378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b02      	ldr	r3, [pc, #8]	; (8003388 <HAL_RCC_GetHCLKFreq+0x10>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	20000000 	.word	0x20000000

0800338c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003390:	f7ff fff2 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4903      	ldr	r1, [pc, #12]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000
 80033b0:	080064b4 	.word	0x080064b4

080033b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033b8:	f7ff ffde 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	0adb      	lsrs	r3, r3, #11
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	080064b4 	.word	0x080064b4

080033dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	220f      	movs	r2, #15
 80033ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_RCC_GetClockConfig+0x58>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0203 	and.w	r2, r3, #3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <HAL_RCC_GetClockConfig+0x58>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_GetClockConfig+0x58>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_RCC_GetClockConfig+0x58>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	08db      	lsrs	r3, r3, #3
 8003416:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_GetClockConfig+0x5c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0207 	and.w	r2, r3, #7
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	40021000 	.word	0x40021000
 8003438:	40022000 	.word	0x40022000

0800343c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <RCC_Delay+0x34>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <RCC_Delay+0x38>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0a5b      	lsrs	r3, r3, #9
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003458:	bf00      	nop
  }
  while (Delay --);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	60fa      	str	r2, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f9      	bne.n	8003458 <RCC_Delay+0x1c>
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	20000000 	.word	0x20000000
 8003474:	10624dd3 	.word	0x10624dd3

08003478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e076      	b.n	8003578 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349a:	d009      	beq.n	80034b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	61da      	str	r2, [r3, #28]
 80034a2:	e005      	b.n	80034b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd f97c 	bl	80007c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	ea42 0103 	orr.w	r1, r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	0c1a      	lsrs	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f002 0204 	and.w	r2, r2, #4
 8003556:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003566:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_Transmit+0x22>
 800359e:	2302      	movs	r3, #2
 80035a0:	e126      	b.n	80037f0 <HAL_SPI_Transmit+0x270>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035aa:	f7fe fdd3 	bl	8002154 <HAL_GetTick>
 80035ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d002      	beq.n	80035c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035c4:	e10b      	b.n	80037de <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_Transmit+0x52>
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035d6:	e102      	b.n	80037de <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2203      	movs	r2, #3
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800361e:	d10f      	bne.n	8003640 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800362e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d007      	beq.n	800365e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003666:	d14b      	bne.n	8003700 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_SPI_Transmit+0xf6>
 8003670:	8afb      	ldrh	r3, [r7, #22]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d13e      	bne.n	80036f4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	881a      	ldrh	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800369a:	e02b      	b.n	80036f4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d112      	bne.n	80036d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	881a      	ldrh	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	1c9a      	adds	r2, r3, #2
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80036ce:	e011      	b.n	80036f4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d0:	f7fe fd40 	bl	8002154 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d803      	bhi.n	80036e8 <HAL_SPI_Transmit+0x168>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e6:	d102      	bne.n	80036ee <HAL_SPI_Transmit+0x16e>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036f2:	e074      	b.n	80037de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ce      	bne.n	800369c <HAL_SPI_Transmit+0x11c>
 80036fe:	e04c      	b.n	800379a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_SPI_Transmit+0x18e>
 8003708:	8afb      	ldrh	r3, [r7, #22]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d140      	bne.n	8003790 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	330c      	adds	r3, #12
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003734:	e02c      	b.n	8003790 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b02      	cmp	r3, #2
 8003742:	d113      	bne.n	800376c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	86da      	strh	r2, [r3, #54]	; 0x36
 800376a:	e011      	b.n	8003790 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800376c:	f7fe fcf2 	bl	8002154 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d803      	bhi.n	8003784 <HAL_SPI_Transmit+0x204>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003782:	d102      	bne.n	800378a <HAL_SPI_Transmit+0x20a>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800378e:	e026      	b.n	80037de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1cd      	bne.n	8003736 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	6839      	ldr	r1, [r7, #0]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fbb8 	bl	8003f14 <SPI_EndRxTxTransaction>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e000      	b.n	80037de <HAL_SPI_Transmit+0x25e>
  }

error:
 80037dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003814:	d112      	bne.n	800383c <HAL_SPI_Receive+0x44>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10e      	bne.n	800383c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2204      	movs	r2, #4
 8003822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f8f1 	bl	8003a1a <HAL_SPI_TransmitReceive>
 8003838:	4603      	mov	r3, r0
 800383a:	e0ea      	b.n	8003a12 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_SPI_Receive+0x52>
 8003846:	2302      	movs	r3, #2
 8003848:	e0e3      	b.n	8003a12 <HAL_SPI_Receive+0x21a>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003852:	f7fe fc7f 	bl	8002154 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d002      	beq.n	800386a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003864:	2302      	movs	r3, #2
 8003866:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003868:	e0ca      	b.n	8003a00 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_SPI_Receive+0x7e>
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
    goto error;
 800387a:	e0c1      	b.n	8003a00 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2204      	movs	r2, #4
 8003880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c2:	d10f      	bne.n	80038e4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b40      	cmp	r3, #64	; 0x40
 80038f0:	d007      	beq.n	8003902 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d162      	bne.n	80039d0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800390a:	e02e      	b.n	800396a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d115      	bne.n	8003946 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f103 020c 	add.w	r2, r3, #12
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	7812      	ldrb	r2, [r2, #0]
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003944:	e011      	b.n	800396a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003946:	f7fe fc05 	bl	8002154 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d803      	bhi.n	800395e <HAL_SPI_Receive+0x166>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800395c:	d102      	bne.n	8003964 <HAL_SPI_Receive+0x16c>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003968:	e04a      	b.n	8003a00 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1cb      	bne.n	800390c <HAL_SPI_Receive+0x114>
 8003974:	e031      	b.n	80039da <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d113      	bne.n	80039ac <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	b292      	uxth	r2, r2
 8003990:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	1c9a      	adds	r2, r3, #2
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039aa:	e011      	b.n	80039d0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ac:	f7fe fbd2 	bl	8002154 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d803      	bhi.n	80039c4 <HAL_SPI_Receive+0x1cc>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c2:	d102      	bne.n	80039ca <HAL_SPI_Receive+0x1d2>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039ce:	e017      	b.n	8003a00 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1cd      	bne.n	8003976 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fa46 	bl	8003e70 <SPI_EndRxTransaction>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
 80039fc:	e000      	b.n	8003a00 <HAL_SPI_Receive+0x208>
  }

error :
 80039fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b08c      	sub	sp, #48	; 0x30
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x26>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e18a      	b.n	8003d56 <HAL_SPI_TransmitReceive+0x33c>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a48:	f7fe fb84 	bl	8002154 <HAL_GetTick>
 8003a4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d00f      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0x70>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a70:	d107      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x68>
 8003a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d003      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
 8003a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a88:	e15b      	b.n	8003d42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x82>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x82>
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aa2:	e14e      	b.n	8003d42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d003      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2205      	movs	r2, #5
 8003ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	887a      	ldrh	r2, [r7, #2]
 8003ace:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	887a      	ldrh	r2, [r7, #2]
 8003ada:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	887a      	ldrh	r2, [r7, #2]
 8003ae0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d007      	beq.n	8003b0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b14:	d178      	bne.n	8003c08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x10a>
 8003b1e:	8b7b      	ldrh	r3, [r7, #26]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d166      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b48:	e053      	b.n	8003bf2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d11b      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x176>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d016      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x176>
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d113      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	881a      	ldrh	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d119      	bne.n	8003bd2 <HAL_SPI_TransmitReceive+0x1b8>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d014      	beq.n	8003bd2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	1c9a      	adds	r2, r3, #2
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bd2:	f7fe fabf 	bl	8002154 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d807      	bhi.n	8003bf2 <HAL_SPI_TransmitReceive+0x1d8>
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be8:	d003      	beq.n	8003bf2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bf0:	e0a7      	b.n	8003d42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1a6      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x130>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1a1      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x130>
 8003c06:	e07c      	b.n	8003d02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x1fc>
 8003c10:	8b7b      	ldrh	r3, [r7, #26]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d16b      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c3c:	e057      	b.n	8003cee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d11c      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x26c>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d017      	beq.n	8003c86 <HAL_SPI_TransmitReceive+0x26c>
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d114      	bne.n	8003c86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	7812      	ldrb	r2, [r2, #0]
 8003c68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d119      	bne.n	8003cc8 <HAL_SPI_TransmitReceive+0x2ae>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d014      	beq.n	8003cc8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cc8:	f7fe fa44 	bl	8002154 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d803      	bhi.n	8003ce0 <HAL_SPI_TransmitReceive+0x2c6>
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cde:	d102      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x2cc>
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cec:	e029      	b.n	8003d42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1a2      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x224>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d19d      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f904 	bl	8003f14 <SPI_EndRxTxTransaction>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d1e:	e010      	b.n	8003d42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	e000      	b.n	8003d42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3730      	adds	r7, #48	; 0x30
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d70:	f7fe f9f0 	bl	8002154 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d80:	f7fe f9e8 	bl	8002154 <HAL_GetTick>
 8003d84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	015b      	lsls	r3, r3, #5
 8003d8c:	0d1b      	lsrs	r3, r3, #20
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	fb02 f303 	mul.w	r3, r2, r3
 8003d94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d96:	e054      	b.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d9e:	d050      	beq.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003da0:	f7fe f9d8 	bl	8002154 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d902      	bls.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d13d      	bne.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dce:	d111      	bne.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd8:	d004      	beq.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de2:	d107      	bne.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfc:	d10f      	bne.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e017      	b.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	bf0c      	ite	eq
 8003e52:	2301      	moveq	r3, #1
 8003e54:	2300      	movne	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d19b      	bne.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000000 	.word	0x20000000

08003e70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e84:	d111      	bne.n	8003eaa <SPI_EndRxTransaction+0x3a>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8e:	d004      	beq.n	8003e9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d107      	bne.n	8003eaa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb2:	d117      	bne.n	8003ee4 <SPI_EndRxTransaction+0x74>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebc:	d112      	bne.n	8003ee4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff ff49 	bl	8003d60 <SPI_WaitFlagStateUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01a      	beq.n	8003f0a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e013      	b.n	8003f0c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	2180      	movs	r1, #128	; 0x80
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff ff36 	bl	8003d60 <SPI_WaitFlagStateUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	f043 0220 	orr.w	r2, r3, #32
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e000      	b.n	8003f0c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2200      	movs	r2, #0
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff ff18 	bl	8003d60 <SPI_WaitFlagStateUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e000      	b.n	8003f48 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e041      	b.n	8003fe6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f839 	bl	8003fee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f000 f9b4 	bl	80042fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d001      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e03a      	b.n	800408e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_TIM_Base_Start_IT+0x98>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <HAL_TIM_Base_Start_IT+0x58>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004042:	d009      	beq.n	8004058 <HAL_TIM_Base_Start_IT+0x58>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a14      	ldr	r2, [pc, #80]	; (800409c <HAL_TIM_Base_Start_IT+0x9c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <HAL_TIM_Base_Start_IT+0x58>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d111      	bne.n	800407c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b06      	cmp	r3, #6
 8004068:	d010      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407a:	e007      	b.n	800408c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800

080040a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d122      	bne.n	8004100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d11b      	bne.n	8004100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0202 	mvn.w	r2, #2
 80040d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f8ed 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8e0 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f8ef 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b04      	cmp	r3, #4
 800410c:	d122      	bne.n	8004154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d11b      	bne.n	8004154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0204 	mvn.w	r2, #4
 8004124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2202      	movs	r2, #2
 800412a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8c3 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8b6 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f8c5 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b08      	cmp	r3, #8
 8004160:	d122      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b08      	cmp	r3, #8
 800416e:	d11b      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0208 	mvn.w	r2, #8
 8004178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2204      	movs	r2, #4
 800417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f899 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f88c 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f89b 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d122      	bne.n	80041fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d11b      	bne.n	80041fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0210 	mvn.w	r2, #16
 80041cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2208      	movs	r2, #8
 80041d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f86f 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f862 	bl	80042b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f871 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d10e      	bne.n	8004228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b01      	cmp	r3, #1
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0201 	mvn.w	r2, #1
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fc fa86 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8bf 	bl	80043d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f835 	bl	80042ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b20      	cmp	r3, #32
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b20      	cmp	r3, #32
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0220 	mvn.w	r2, #32
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f88a 	bl	80043c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <TIM_Base_SetConfig+0xbc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <TIM_Base_SetConfig+0xc0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00b      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d007      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <TIM_Base_SetConfig+0xbc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <TIM_Base_SetConfig+0xc0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d108      	bne.n	8004370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a07      	ldr	r2, [pc, #28]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d103      	bne.n	80043a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	615a      	str	r2, [r3, #20]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800

080043c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e03f      	b.n	8004476 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fa28 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2224      	movs	r2, #36	; 0x24
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fd9b 	bl	8004f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b08a      	sub	sp, #40	; 0x28
 8004482:	af02      	add	r7, sp, #8
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d17c      	bne.n	8004598 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_UART_Transmit+0x2c>
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e075      	b.n	800459a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x3e>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e06e      	b.n	800459a <HAL_UART_Transmit+0x11c>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2221      	movs	r2, #33	; 0x21
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d2:	f7fd fe3f 	bl	8002154 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d108      	bne.n	8004500 <HAL_UART_Transmit+0x82>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e003      	b.n	8004508 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004510:	e02a      	b.n	8004568 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2200      	movs	r2, #0
 800451a:	2180      	movs	r1, #128	; 0x80
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fb0d 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e036      	b.n	800459a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004540:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	3302      	adds	r3, #2
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e007      	b.n	800455a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	781a      	ldrb	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3301      	adds	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1cf      	bne.n	8004512 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2200      	movs	r2, #0
 800457a:	2140      	movs	r1, #64	; 0x40
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fadd 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e006      	b.n	800459a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	4613      	mov	r3, r2
 80045ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d13c      	bne.n	8004636 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e035      	b.n	8004638 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e02e      	b.n	8004638 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 faee 	bl	8004bd0 <UART_Start_Receive_DMA>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d119      	bne.n	8004632 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	2b01      	cmp	r3, #1
 8004604:	d113      	bne.n	800462e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0210 	orr.w	r2, r2, #16
 800462a:	60da      	str	r2, [r3, #12]
 800462c:	e001      	b.n	8004632 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	e000      	b.n	8004638 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004636:	2302      	movs	r3, #2
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10d      	bne.n	8004692 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_UART_IRQHandler+0x52>
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fbc0 	bl	8004e10 <UART_Receive_IT>
      return;
 8004690:	e17b      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80b1 	beq.w	80047fc <HAL_UART_IRQHandler+0x1bc>
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_UART_IRQHandler+0x70>
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80a6 	beq.w	80047fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_UART_IRQHandler+0x90>
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_UART_IRQHandler+0xb0>
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f043 0202 	orr.w	r2, r3, #2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_UART_IRQHandler+0xd0>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00f      	beq.n	800473a <HAL_UART_IRQHandler+0xfa>
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <HAL_UART_IRQHandler+0xee>
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f043 0208 	orr.w	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 811e 	beq.w	8004980 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_UART_IRQHandler+0x11e>
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fb59 	bl	8004e10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <HAL_UART_IRQHandler+0x146>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d031      	beq.n	80047ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa9b 	bl	8004cc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d023      	beq.n	80047e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d013      	beq.n	80047da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	4a76      	ldr	r2, [pc, #472]	; (8004990 <HAL_UART_IRQHandler+0x350>)
 80047b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd feca 	bl	8002558 <HAL_DMA_Abort_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	e00e      	b.n	80047f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8f5 	bl	80049ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	e00a      	b.n	80047f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8f1 	bl	80049ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	e006      	b.n	80047f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f8ed 	bl	80049ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047f6:	e0c3      	b.n	8004980 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	bf00      	nop
    return;
 80047fa:	e0c1      	b.n	8004980 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	2b01      	cmp	r3, #1
 8004802:	f040 80a1 	bne.w	8004948 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 809b 	beq.w	8004948 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8095 	beq.w	8004948 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d04e      	beq.n	80048e0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800484c:	8a3b      	ldrh	r3, [r7, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8098 	beq.w	8004984 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004858:	8a3a      	ldrh	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	f080 8092 	bcs.w	8004984 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8a3a      	ldrh	r2, [r7, #16]
 8004864:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b20      	cmp	r3, #32
 800486e:	d02b      	beq.n	80048c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800487e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0210 	bic.w	r2, r2, #16
 80048bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd fe0d 	bl	80024e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7fc f9c5 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048de:	e051      	b.n	8004984 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d047      	beq.n	8004988 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80048f8:	8a7b      	ldrh	r3, [r7, #18]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d044      	beq.n	8004988 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800490c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0210 	bic.w	r2, r2, #16
 800493a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800493c:	8a7b      	ldrh	r3, [r7, #18]
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7fc f991 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004946:	e01f      	b.n	8004988 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_UART_IRQHandler+0x324>
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f9f0 	bl	8004d42 <UART_Transmit_IT>
    return;
 8004962:	e012      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <HAL_UART_IRQHandler+0x34a>
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fa31 	bl	8004de0 <UART_EndTransmit_IT>
    return;
 800497e:	e004      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
    return;
 8004980:	bf00      	nop
 8004982:	e002      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
      return;
 8004984:	bf00      	nop
 8004986:	e000      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
      return;
 8004988:	bf00      	nop
  }
}
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	08004d1b 	.word	0x08004d1b

08004994 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d12a      	bne.n	8004a4e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a0c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0210 	bic.w	r2, r2, #16
 8004a4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d106      	bne.n	8004a64 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7fc f903 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a62:	e002      	b.n	8004a6a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff ff9e 	bl	80049a6 <HAL_UART_RxCpltCallback>
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d108      	bne.n	8004a9a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fc f8e8 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a98:	e002      	b.n	8004aa0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7ff ff8c 	bl	80049b8 <HAL_UART_RxHalfCpltCallback>
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b21      	cmp	r3, #33	; 0x21
 8004ada:	d108      	bne.n	8004aee <UART_DMAError+0x46>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ae8:	68b8      	ldr	r0, [r7, #8]
 8004aea:	f000 f8d5 	bl	8004c98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b22      	cmp	r3, #34	; 0x22
 8004b0e:	d108      	bne.n	8004b22 <UART_DMAError+0x7a>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b1c:	68b8      	ldr	r0, [r7, #8]
 8004b1e:	f000 f8d0 	bl	8004cc2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0210 	orr.w	r2, r3, #16
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f7ff ff4b 	bl	80049ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b4c:	e02c      	b.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b54:	d028      	beq.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b5c:	f7fd fafa 	bl	8002154 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d21d      	bcs.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e00f      	b.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d0c3      	beq.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2222      	movs	r2, #34	; 0x22
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <UART_Start_Receive_DMA+0xbc>)
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	4a22      	ldr	r2, [pc, #136]	; (8004c90 <UART_Start_Receive_DMA+0xc0>)
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <UART_Start_Receive_DMA+0xc4>)
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	2200      	movs	r2, #0
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	f7fd fbf8 	bl	8002424 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c60:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695a      	ldr	r2, [r3, #20]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c80:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	080049dd 	.word	0x080049dd
 8004c90:	08004a73 	.word	0x08004a73
 8004c94:	08004aa9 	.word	0x08004aa9

08004c98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004cae:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cd8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d107      	bne.n	8004d02 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0210 	bic.w	r2, r2, #16
 8004d00:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff fe48 	bl	80049ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b21      	cmp	r3, #33	; 0x21
 8004d54:	d13e      	bne.n	8004dd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d114      	bne.n	8004d8a <UART_Transmit_IT+0x48>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d110      	bne.n	8004d8a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]
 8004d88:	e008      	b.n	8004d9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	1c59      	adds	r1, r3, #1
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6211      	str	r1, [r2, #32]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4619      	mov	r1, r3
 8004daa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10f      	bne.n	8004dd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fdc7 	bl	8004994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b22      	cmp	r3, #34	; 0x22
 8004e22:	f040 8099 	bne.w	8004f58 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2e:	d117      	bne.n	8004e60 <UART_Receive_IT+0x50>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d113      	bne.n	8004e60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	629a      	str	r2, [r3, #40]	; 0x28
 8004e5e:	e026      	b.n	8004eae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e72:	d007      	beq.n	8004e84 <UART_Receive_IT+0x74>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <UART_Receive_IT+0x82>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e008      	b.n	8004ea4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d148      	bne.n	8004f54 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0220 	bic.w	r2, r2, #32
 8004ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d123      	bne.n	8004f4a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0210 	bic.w	r2, r2, #16
 8004f16:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d10a      	bne.n	8004f3c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fb fe90 	bl	8000c68 <HAL_UARTEx_RxEventCallback>
 8004f48:	e002      	b.n	8004f50 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fd2b 	bl	80049a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e002      	b.n	8004f5a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f9e:	f023 030c 	bic.w	r3, r3, #12
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2c      	ldr	r2, [pc, #176]	; (8005078 <UART_SetConfig+0x114>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d103      	bne.n	8004fd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fcc:	f7fe f9f2 	bl	80033b4 <HAL_RCC_GetPCLK2Freq>
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	e002      	b.n	8004fda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe f9da 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8004fd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009a      	lsls	r2, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	4a22      	ldr	r2, [pc, #136]	; (800507c <UART_SetConfig+0x118>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	0119      	lsls	r1, r3, #4
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009a      	lsls	r2, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005010:	4b1a      	ldr	r3, [pc, #104]	; (800507c <UART_SetConfig+0x118>)
 8005012:	fba3 0302 	umull	r0, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2064      	movs	r0, #100	; 0x64
 800501a:	fb00 f303 	mul.w	r3, r0, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	3332      	adds	r3, #50	; 0x32
 8005024:	4a15      	ldr	r2, [pc, #84]	; (800507c <UART_SetConfig+0x118>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005030:	4419      	add	r1, r3
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009a      	lsls	r2, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	fbb2 f2f3 	udiv	r2, r2, r3
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <UART_SetConfig+0x118>)
 800504a:	fba3 0302 	umull	r0, r3, r3, r2
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	2064      	movs	r0, #100	; 0x64
 8005052:	fb00 f303 	mul.w	r3, r0, r3
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	3332      	adds	r3, #50	; 0x32
 800505c:	4a07      	ldr	r2, [pc, #28]	; (800507c <UART_SetConfig+0x118>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	440a      	add	r2, r1
 800506e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005070:	bf00      	nop
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40013800 	.word	0x40013800
 800507c:	51eb851f 	.word	0x51eb851f

08005080 <__errno>:
 8005080:	4b01      	ldr	r3, [pc, #4]	; (8005088 <__errno+0x8>)
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	2000000c 	.word	0x2000000c

0800508c <__libc_init_array>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	2600      	movs	r6, #0
 8005090:	4d0c      	ldr	r5, [pc, #48]	; (80050c4 <__libc_init_array+0x38>)
 8005092:	4c0d      	ldr	r4, [pc, #52]	; (80050c8 <__libc_init_array+0x3c>)
 8005094:	1b64      	subs	r4, r4, r5
 8005096:	10a4      	asrs	r4, r4, #2
 8005098:	42a6      	cmp	r6, r4
 800509a:	d109      	bne.n	80050b0 <__libc_init_array+0x24>
 800509c:	f001 f8ac 	bl	80061f8 <_init>
 80050a0:	2600      	movs	r6, #0
 80050a2:	4d0a      	ldr	r5, [pc, #40]	; (80050cc <__libc_init_array+0x40>)
 80050a4:	4c0a      	ldr	r4, [pc, #40]	; (80050d0 <__libc_init_array+0x44>)
 80050a6:	1b64      	subs	r4, r4, r5
 80050a8:	10a4      	asrs	r4, r4, #2
 80050aa:	42a6      	cmp	r6, r4
 80050ac:	d105      	bne.n	80050ba <__libc_init_array+0x2e>
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b4:	4798      	blx	r3
 80050b6:	3601      	adds	r6, #1
 80050b8:	e7ee      	b.n	8005098 <__libc_init_array+0xc>
 80050ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80050be:	4798      	blx	r3
 80050c0:	3601      	adds	r6, #1
 80050c2:	e7f2      	b.n	80050aa <__libc_init_array+0x1e>
 80050c4:	08006554 	.word	0x08006554
 80050c8:	08006554 	.word	0x08006554
 80050cc:	08006554 	.word	0x08006554
 80050d0:	08006558 	.word	0x08006558

080050d4 <memcpy>:
 80050d4:	440a      	add	r2, r1
 80050d6:	4291      	cmp	r1, r2
 80050d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80050dc:	d100      	bne.n	80050e0 <memcpy+0xc>
 80050de:	4770      	bx	lr
 80050e0:	b510      	push	{r4, lr}
 80050e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050e6:	4291      	cmp	r1, r2
 80050e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ec:	d1f9      	bne.n	80050e2 <memcpy+0xe>
 80050ee:	bd10      	pop	{r4, pc}

080050f0 <memset>:
 80050f0:	4603      	mov	r3, r0
 80050f2:	4402      	add	r2, r0
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d100      	bne.n	80050fa <memset+0xa>
 80050f8:	4770      	bx	lr
 80050fa:	f803 1b01 	strb.w	r1, [r3], #1
 80050fe:	e7f9      	b.n	80050f4 <memset+0x4>

08005100 <_puts_r>:
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	460e      	mov	r6, r1
 8005104:	4605      	mov	r5, r0
 8005106:	b118      	cbz	r0, 8005110 <_puts_r+0x10>
 8005108:	6983      	ldr	r3, [r0, #24]
 800510a:	b90b      	cbnz	r3, 8005110 <_puts_r+0x10>
 800510c:	f000 fa78 	bl	8005600 <__sinit>
 8005110:	69ab      	ldr	r3, [r5, #24]
 8005112:	68ac      	ldr	r4, [r5, #8]
 8005114:	b913      	cbnz	r3, 800511c <_puts_r+0x1c>
 8005116:	4628      	mov	r0, r5
 8005118:	f000 fa72 	bl	8005600 <__sinit>
 800511c:	4b2c      	ldr	r3, [pc, #176]	; (80051d0 <_puts_r+0xd0>)
 800511e:	429c      	cmp	r4, r3
 8005120:	d120      	bne.n	8005164 <_puts_r+0x64>
 8005122:	686c      	ldr	r4, [r5, #4]
 8005124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005126:	07db      	lsls	r3, r3, #31
 8005128:	d405      	bmi.n	8005136 <_puts_r+0x36>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	0598      	lsls	r0, r3, #22
 800512e:	d402      	bmi.n	8005136 <_puts_r+0x36>
 8005130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005132:	f000 fb03 	bl	800573c <__retarget_lock_acquire_recursive>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	0719      	lsls	r1, r3, #28
 800513a:	d51d      	bpl.n	8005178 <_puts_r+0x78>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	b1db      	cbz	r3, 8005178 <_puts_r+0x78>
 8005140:	3e01      	subs	r6, #1
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005148:	3b01      	subs	r3, #1
 800514a:	60a3      	str	r3, [r4, #8]
 800514c:	bb39      	cbnz	r1, 800519e <_puts_r+0x9e>
 800514e:	2b00      	cmp	r3, #0
 8005150:	da38      	bge.n	80051c4 <_puts_r+0xc4>
 8005152:	4622      	mov	r2, r4
 8005154:	210a      	movs	r1, #10
 8005156:	4628      	mov	r0, r5
 8005158:	f000 f87c 	bl	8005254 <__swbuf_r>
 800515c:	3001      	adds	r0, #1
 800515e:	d011      	beq.n	8005184 <_puts_r+0x84>
 8005160:	250a      	movs	r5, #10
 8005162:	e011      	b.n	8005188 <_puts_r+0x88>
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <_puts_r+0xd4>)
 8005166:	429c      	cmp	r4, r3
 8005168:	d101      	bne.n	800516e <_puts_r+0x6e>
 800516a:	68ac      	ldr	r4, [r5, #8]
 800516c:	e7da      	b.n	8005124 <_puts_r+0x24>
 800516e:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <_puts_r+0xd8>)
 8005170:	429c      	cmp	r4, r3
 8005172:	bf08      	it	eq
 8005174:	68ec      	ldreq	r4, [r5, #12]
 8005176:	e7d5      	b.n	8005124 <_puts_r+0x24>
 8005178:	4621      	mov	r1, r4
 800517a:	4628      	mov	r0, r5
 800517c:	f000 f8bc 	bl	80052f8 <__swsetup_r>
 8005180:	2800      	cmp	r0, #0
 8005182:	d0dd      	beq.n	8005140 <_puts_r+0x40>
 8005184:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800518a:	07da      	lsls	r2, r3, #31
 800518c:	d405      	bmi.n	800519a <_puts_r+0x9a>
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	059b      	lsls	r3, r3, #22
 8005192:	d402      	bmi.n	800519a <_puts_r+0x9a>
 8005194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005196:	f000 fad2 	bl	800573e <__retarget_lock_release_recursive>
 800519a:	4628      	mov	r0, r5
 800519c:	bd70      	pop	{r4, r5, r6, pc}
 800519e:	2b00      	cmp	r3, #0
 80051a0:	da04      	bge.n	80051ac <_puts_r+0xac>
 80051a2:	69a2      	ldr	r2, [r4, #24]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	dc06      	bgt.n	80051b6 <_puts_r+0xb6>
 80051a8:	290a      	cmp	r1, #10
 80051aa:	d004      	beq.n	80051b6 <_puts_r+0xb6>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	6022      	str	r2, [r4, #0]
 80051b2:	7019      	strb	r1, [r3, #0]
 80051b4:	e7c5      	b.n	8005142 <_puts_r+0x42>
 80051b6:	4622      	mov	r2, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 f84b 	bl	8005254 <__swbuf_r>
 80051be:	3001      	adds	r0, #1
 80051c0:	d1bf      	bne.n	8005142 <_puts_r+0x42>
 80051c2:	e7df      	b.n	8005184 <_puts_r+0x84>
 80051c4:	250a      	movs	r5, #10
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	6022      	str	r2, [r4, #0]
 80051cc:	701d      	strb	r5, [r3, #0]
 80051ce:	e7db      	b.n	8005188 <_puts_r+0x88>
 80051d0:	080064e0 	.word	0x080064e0
 80051d4:	08006500 	.word	0x08006500
 80051d8:	080064c0 	.word	0x080064c0

080051dc <puts>:
 80051dc:	4b02      	ldr	r3, [pc, #8]	; (80051e8 <puts+0xc>)
 80051de:	4601      	mov	r1, r0
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	f7ff bf8d 	b.w	8005100 <_puts_r>
 80051e6:	bf00      	nop
 80051e8:	2000000c 	.word	0x2000000c

080051ec <sniprintf>:
 80051ec:	b40c      	push	{r2, r3}
 80051ee:	b530      	push	{r4, r5, lr}
 80051f0:	4b17      	ldr	r3, [pc, #92]	; (8005250 <sniprintf+0x64>)
 80051f2:	1e0c      	subs	r4, r1, #0
 80051f4:	681d      	ldr	r5, [r3, #0]
 80051f6:	b09d      	sub	sp, #116	; 0x74
 80051f8:	da08      	bge.n	800520c <sniprintf+0x20>
 80051fa:	238b      	movs	r3, #139	; 0x8b
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	b01d      	add	sp, #116	; 0x74
 8005204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005208:	b002      	add	sp, #8
 800520a:	4770      	bx	lr
 800520c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005210:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005214:	bf0c      	ite	eq
 8005216:	4623      	moveq	r3, r4
 8005218:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800521c:	9304      	str	r3, [sp, #16]
 800521e:	9307      	str	r3, [sp, #28]
 8005220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005224:	9002      	str	r0, [sp, #8]
 8005226:	9006      	str	r0, [sp, #24]
 8005228:	f8ad 3016 	strh.w	r3, [sp, #22]
 800522c:	4628      	mov	r0, r5
 800522e:	ab21      	add	r3, sp, #132	; 0x84
 8005230:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005232:	a902      	add	r1, sp, #8
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	f000 fc21 	bl	8005a7c <_svfiprintf_r>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	bfbc      	itt	lt
 800523e:	238b      	movlt	r3, #139	; 0x8b
 8005240:	602b      	strlt	r3, [r5, #0]
 8005242:	2c00      	cmp	r4, #0
 8005244:	d0dd      	beq.n	8005202 <sniprintf+0x16>
 8005246:	2200      	movs	r2, #0
 8005248:	9b02      	ldr	r3, [sp, #8]
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e7d9      	b.n	8005202 <sniprintf+0x16>
 800524e:	bf00      	nop
 8005250:	2000000c 	.word	0x2000000c

08005254 <__swbuf_r>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	460e      	mov	r6, r1
 8005258:	4614      	mov	r4, r2
 800525a:	4605      	mov	r5, r0
 800525c:	b118      	cbz	r0, 8005266 <__swbuf_r+0x12>
 800525e:	6983      	ldr	r3, [r0, #24]
 8005260:	b90b      	cbnz	r3, 8005266 <__swbuf_r+0x12>
 8005262:	f000 f9cd 	bl	8005600 <__sinit>
 8005266:	4b21      	ldr	r3, [pc, #132]	; (80052ec <__swbuf_r+0x98>)
 8005268:	429c      	cmp	r4, r3
 800526a:	d12b      	bne.n	80052c4 <__swbuf_r+0x70>
 800526c:	686c      	ldr	r4, [r5, #4]
 800526e:	69a3      	ldr	r3, [r4, #24]
 8005270:	60a3      	str	r3, [r4, #8]
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	071a      	lsls	r2, r3, #28
 8005276:	d52f      	bpl.n	80052d8 <__swbuf_r+0x84>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	b36b      	cbz	r3, 80052d8 <__swbuf_r+0x84>
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	6820      	ldr	r0, [r4, #0]
 8005280:	b2f6      	uxtb	r6, r6
 8005282:	1ac0      	subs	r0, r0, r3
 8005284:	6963      	ldr	r3, [r4, #20]
 8005286:	4637      	mov	r7, r6
 8005288:	4283      	cmp	r3, r0
 800528a:	dc04      	bgt.n	8005296 <__swbuf_r+0x42>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f000 f922 	bl	80054d8 <_fflush_r>
 8005294:	bb30      	cbnz	r0, 80052e4 <__swbuf_r+0x90>
 8005296:	68a3      	ldr	r3, [r4, #8]
 8005298:	3001      	adds	r0, #1
 800529a:	3b01      	subs	r3, #1
 800529c:	60a3      	str	r3, [r4, #8]
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	6022      	str	r2, [r4, #0]
 80052a4:	701e      	strb	r6, [r3, #0]
 80052a6:	6963      	ldr	r3, [r4, #20]
 80052a8:	4283      	cmp	r3, r0
 80052aa:	d004      	beq.n	80052b6 <__swbuf_r+0x62>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	07db      	lsls	r3, r3, #31
 80052b0:	d506      	bpl.n	80052c0 <__swbuf_r+0x6c>
 80052b2:	2e0a      	cmp	r6, #10
 80052b4:	d104      	bne.n	80052c0 <__swbuf_r+0x6c>
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 f90d 	bl	80054d8 <_fflush_r>
 80052be:	b988      	cbnz	r0, 80052e4 <__swbuf_r+0x90>
 80052c0:	4638      	mov	r0, r7
 80052c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <__swbuf_r+0x9c>)
 80052c6:	429c      	cmp	r4, r3
 80052c8:	d101      	bne.n	80052ce <__swbuf_r+0x7a>
 80052ca:	68ac      	ldr	r4, [r5, #8]
 80052cc:	e7cf      	b.n	800526e <__swbuf_r+0x1a>
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <__swbuf_r+0xa0>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	bf08      	it	eq
 80052d4:	68ec      	ldreq	r4, [r5, #12]
 80052d6:	e7ca      	b.n	800526e <__swbuf_r+0x1a>
 80052d8:	4621      	mov	r1, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f80c 	bl	80052f8 <__swsetup_r>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d0cb      	beq.n	800527c <__swbuf_r+0x28>
 80052e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80052e8:	e7ea      	b.n	80052c0 <__swbuf_r+0x6c>
 80052ea:	bf00      	nop
 80052ec:	080064e0 	.word	0x080064e0
 80052f0:	08006500 	.word	0x08006500
 80052f4:	080064c0 	.word	0x080064c0

080052f8 <__swsetup_r>:
 80052f8:	4b32      	ldr	r3, [pc, #200]	; (80053c4 <__swsetup_r+0xcc>)
 80052fa:	b570      	push	{r4, r5, r6, lr}
 80052fc:	681d      	ldr	r5, [r3, #0]
 80052fe:	4606      	mov	r6, r0
 8005300:	460c      	mov	r4, r1
 8005302:	b125      	cbz	r5, 800530e <__swsetup_r+0x16>
 8005304:	69ab      	ldr	r3, [r5, #24]
 8005306:	b913      	cbnz	r3, 800530e <__swsetup_r+0x16>
 8005308:	4628      	mov	r0, r5
 800530a:	f000 f979 	bl	8005600 <__sinit>
 800530e:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <__swsetup_r+0xd0>)
 8005310:	429c      	cmp	r4, r3
 8005312:	d10f      	bne.n	8005334 <__swsetup_r+0x3c>
 8005314:	686c      	ldr	r4, [r5, #4]
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800531c:	0719      	lsls	r1, r3, #28
 800531e:	d42c      	bmi.n	800537a <__swsetup_r+0x82>
 8005320:	06dd      	lsls	r5, r3, #27
 8005322:	d411      	bmi.n	8005348 <__swsetup_r+0x50>
 8005324:	2309      	movs	r3, #9
 8005326:	6033      	str	r3, [r6, #0]
 8005328:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800532c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	e03e      	b.n	80053b2 <__swsetup_r+0xba>
 8005334:	4b25      	ldr	r3, [pc, #148]	; (80053cc <__swsetup_r+0xd4>)
 8005336:	429c      	cmp	r4, r3
 8005338:	d101      	bne.n	800533e <__swsetup_r+0x46>
 800533a:	68ac      	ldr	r4, [r5, #8]
 800533c:	e7eb      	b.n	8005316 <__swsetup_r+0x1e>
 800533e:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <__swsetup_r+0xd8>)
 8005340:	429c      	cmp	r4, r3
 8005342:	bf08      	it	eq
 8005344:	68ec      	ldreq	r4, [r5, #12]
 8005346:	e7e6      	b.n	8005316 <__swsetup_r+0x1e>
 8005348:	0758      	lsls	r0, r3, #29
 800534a:	d512      	bpl.n	8005372 <__swsetup_r+0x7a>
 800534c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800534e:	b141      	cbz	r1, 8005362 <__swsetup_r+0x6a>
 8005350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005354:	4299      	cmp	r1, r3
 8005356:	d002      	beq.n	800535e <__swsetup_r+0x66>
 8005358:	4630      	mov	r0, r6
 800535a:	f000 fa57 	bl	800580c <_free_r>
 800535e:	2300      	movs	r3, #0
 8005360:	6363      	str	r3, [r4, #52]	; 0x34
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	2300      	movs	r3, #0
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	f043 0308 	orr.w	r3, r3, #8
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	b94b      	cbnz	r3, 8005392 <__swsetup_r+0x9a>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005388:	d003      	beq.n	8005392 <__swsetup_r+0x9a>
 800538a:	4621      	mov	r1, r4
 800538c:	4630      	mov	r0, r6
 800538e:	f000 f9fd 	bl	800578c <__smakebuf_r>
 8005392:	89a0      	ldrh	r0, [r4, #12]
 8005394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005398:	f010 0301 	ands.w	r3, r0, #1
 800539c:	d00a      	beq.n	80053b4 <__swsetup_r+0xbc>
 800539e:	2300      	movs	r3, #0
 80053a0:	60a3      	str	r3, [r4, #8]
 80053a2:	6963      	ldr	r3, [r4, #20]
 80053a4:	425b      	negs	r3, r3
 80053a6:	61a3      	str	r3, [r4, #24]
 80053a8:	6923      	ldr	r3, [r4, #16]
 80053aa:	b943      	cbnz	r3, 80053be <__swsetup_r+0xc6>
 80053ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053b0:	d1ba      	bne.n	8005328 <__swsetup_r+0x30>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	0781      	lsls	r1, r0, #30
 80053b6:	bf58      	it	pl
 80053b8:	6963      	ldrpl	r3, [r4, #20]
 80053ba:	60a3      	str	r3, [r4, #8]
 80053bc:	e7f4      	b.n	80053a8 <__swsetup_r+0xb0>
 80053be:	2000      	movs	r0, #0
 80053c0:	e7f7      	b.n	80053b2 <__swsetup_r+0xba>
 80053c2:	bf00      	nop
 80053c4:	2000000c 	.word	0x2000000c
 80053c8:	080064e0 	.word	0x080064e0
 80053cc:	08006500 	.word	0x08006500
 80053d0:	080064c0 	.word	0x080064c0

080053d4 <__sflush_r>:
 80053d4:	898a      	ldrh	r2, [r1, #12]
 80053d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d8:	4605      	mov	r5, r0
 80053da:	0710      	lsls	r0, r2, #28
 80053dc:	460c      	mov	r4, r1
 80053de:	d457      	bmi.n	8005490 <__sflush_r+0xbc>
 80053e0:	684b      	ldr	r3, [r1, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	dc04      	bgt.n	80053f0 <__sflush_r+0x1c>
 80053e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	dc01      	bgt.n	80053f0 <__sflush_r+0x1c>
 80053ec:	2000      	movs	r0, #0
 80053ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053f2:	2e00      	cmp	r6, #0
 80053f4:	d0fa      	beq.n	80053ec <__sflush_r+0x18>
 80053f6:	2300      	movs	r3, #0
 80053f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053fc:	682f      	ldr	r7, [r5, #0]
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	d032      	beq.n	8005468 <__sflush_r+0x94>
 8005402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	075a      	lsls	r2, r3, #29
 8005408:	d505      	bpl.n	8005416 <__sflush_r+0x42>
 800540a:	6863      	ldr	r3, [r4, #4]
 800540c:	1ac0      	subs	r0, r0, r3
 800540e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005410:	b10b      	cbz	r3, 8005416 <__sflush_r+0x42>
 8005412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005414:	1ac0      	subs	r0, r0, r3
 8005416:	2300      	movs	r3, #0
 8005418:	4602      	mov	r2, r0
 800541a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800541c:	4628      	mov	r0, r5
 800541e:	6a21      	ldr	r1, [r4, #32]
 8005420:	47b0      	blx	r6
 8005422:	1c43      	adds	r3, r0, #1
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	d106      	bne.n	8005436 <__sflush_r+0x62>
 8005428:	6829      	ldr	r1, [r5, #0]
 800542a:	291d      	cmp	r1, #29
 800542c:	d82c      	bhi.n	8005488 <__sflush_r+0xb4>
 800542e:	4a29      	ldr	r2, [pc, #164]	; (80054d4 <__sflush_r+0x100>)
 8005430:	40ca      	lsrs	r2, r1
 8005432:	07d6      	lsls	r6, r2, #31
 8005434:	d528      	bpl.n	8005488 <__sflush_r+0xb4>
 8005436:	2200      	movs	r2, #0
 8005438:	6062      	str	r2, [r4, #4]
 800543a:	6922      	ldr	r2, [r4, #16]
 800543c:	04d9      	lsls	r1, r3, #19
 800543e:	6022      	str	r2, [r4, #0]
 8005440:	d504      	bpl.n	800544c <__sflush_r+0x78>
 8005442:	1c42      	adds	r2, r0, #1
 8005444:	d101      	bne.n	800544a <__sflush_r+0x76>
 8005446:	682b      	ldr	r3, [r5, #0]
 8005448:	b903      	cbnz	r3, 800544c <__sflush_r+0x78>
 800544a:	6560      	str	r0, [r4, #84]	; 0x54
 800544c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800544e:	602f      	str	r7, [r5, #0]
 8005450:	2900      	cmp	r1, #0
 8005452:	d0cb      	beq.n	80053ec <__sflush_r+0x18>
 8005454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005458:	4299      	cmp	r1, r3
 800545a:	d002      	beq.n	8005462 <__sflush_r+0x8e>
 800545c:	4628      	mov	r0, r5
 800545e:	f000 f9d5 	bl	800580c <_free_r>
 8005462:	2000      	movs	r0, #0
 8005464:	6360      	str	r0, [r4, #52]	; 0x34
 8005466:	e7c2      	b.n	80053ee <__sflush_r+0x1a>
 8005468:	6a21      	ldr	r1, [r4, #32]
 800546a:	2301      	movs	r3, #1
 800546c:	4628      	mov	r0, r5
 800546e:	47b0      	blx	r6
 8005470:	1c41      	adds	r1, r0, #1
 8005472:	d1c7      	bne.n	8005404 <__sflush_r+0x30>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0c4      	beq.n	8005404 <__sflush_r+0x30>
 800547a:	2b1d      	cmp	r3, #29
 800547c:	d001      	beq.n	8005482 <__sflush_r+0xae>
 800547e:	2b16      	cmp	r3, #22
 8005480:	d101      	bne.n	8005486 <__sflush_r+0xb2>
 8005482:	602f      	str	r7, [r5, #0]
 8005484:	e7b2      	b.n	80053ec <__sflush_r+0x18>
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	e7ae      	b.n	80053ee <__sflush_r+0x1a>
 8005490:	690f      	ldr	r7, [r1, #16]
 8005492:	2f00      	cmp	r7, #0
 8005494:	d0aa      	beq.n	80053ec <__sflush_r+0x18>
 8005496:	0793      	lsls	r3, r2, #30
 8005498:	bf18      	it	ne
 800549a:	2300      	movne	r3, #0
 800549c:	680e      	ldr	r6, [r1, #0]
 800549e:	bf08      	it	eq
 80054a0:	694b      	ldreq	r3, [r1, #20]
 80054a2:	1bf6      	subs	r6, r6, r7
 80054a4:	600f      	str	r7, [r1, #0]
 80054a6:	608b      	str	r3, [r1, #8]
 80054a8:	2e00      	cmp	r6, #0
 80054aa:	dd9f      	ble.n	80053ec <__sflush_r+0x18>
 80054ac:	4633      	mov	r3, r6
 80054ae:	463a      	mov	r2, r7
 80054b0:	4628      	mov	r0, r5
 80054b2:	6a21      	ldr	r1, [r4, #32]
 80054b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80054b8:	47e0      	blx	ip
 80054ba:	2800      	cmp	r0, #0
 80054bc:	dc06      	bgt.n	80054cc <__sflush_r+0xf8>
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	e790      	b.n	80053ee <__sflush_r+0x1a>
 80054cc:	4407      	add	r7, r0
 80054ce:	1a36      	subs	r6, r6, r0
 80054d0:	e7ea      	b.n	80054a8 <__sflush_r+0xd4>
 80054d2:	bf00      	nop
 80054d4:	20400001 	.word	0x20400001

080054d8 <_fflush_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	690b      	ldr	r3, [r1, #16]
 80054dc:	4605      	mov	r5, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	b913      	cbnz	r3, 80054e8 <_fflush_r+0x10>
 80054e2:	2500      	movs	r5, #0
 80054e4:	4628      	mov	r0, r5
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	b118      	cbz	r0, 80054f2 <_fflush_r+0x1a>
 80054ea:	6983      	ldr	r3, [r0, #24]
 80054ec:	b90b      	cbnz	r3, 80054f2 <_fflush_r+0x1a>
 80054ee:	f000 f887 	bl	8005600 <__sinit>
 80054f2:	4b14      	ldr	r3, [pc, #80]	; (8005544 <_fflush_r+0x6c>)
 80054f4:	429c      	cmp	r4, r3
 80054f6:	d11b      	bne.n	8005530 <_fflush_r+0x58>
 80054f8:	686c      	ldr	r4, [r5, #4]
 80054fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0ef      	beq.n	80054e2 <_fflush_r+0xa>
 8005502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005504:	07d0      	lsls	r0, r2, #31
 8005506:	d404      	bmi.n	8005512 <_fflush_r+0x3a>
 8005508:	0599      	lsls	r1, r3, #22
 800550a:	d402      	bmi.n	8005512 <_fflush_r+0x3a>
 800550c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800550e:	f000 f915 	bl	800573c <__retarget_lock_acquire_recursive>
 8005512:	4628      	mov	r0, r5
 8005514:	4621      	mov	r1, r4
 8005516:	f7ff ff5d 	bl	80053d4 <__sflush_r>
 800551a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800551c:	4605      	mov	r5, r0
 800551e:	07da      	lsls	r2, r3, #31
 8005520:	d4e0      	bmi.n	80054e4 <_fflush_r+0xc>
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	059b      	lsls	r3, r3, #22
 8005526:	d4dd      	bmi.n	80054e4 <_fflush_r+0xc>
 8005528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800552a:	f000 f908 	bl	800573e <__retarget_lock_release_recursive>
 800552e:	e7d9      	b.n	80054e4 <_fflush_r+0xc>
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <_fflush_r+0x70>)
 8005532:	429c      	cmp	r4, r3
 8005534:	d101      	bne.n	800553a <_fflush_r+0x62>
 8005536:	68ac      	ldr	r4, [r5, #8]
 8005538:	e7df      	b.n	80054fa <_fflush_r+0x22>
 800553a:	4b04      	ldr	r3, [pc, #16]	; (800554c <_fflush_r+0x74>)
 800553c:	429c      	cmp	r4, r3
 800553e:	bf08      	it	eq
 8005540:	68ec      	ldreq	r4, [r5, #12]
 8005542:	e7da      	b.n	80054fa <_fflush_r+0x22>
 8005544:	080064e0 	.word	0x080064e0
 8005548:	08006500 	.word	0x08006500
 800554c:	080064c0 	.word	0x080064c0

08005550 <std>:
 8005550:	2300      	movs	r3, #0
 8005552:	b510      	push	{r4, lr}
 8005554:	4604      	mov	r4, r0
 8005556:	e9c0 3300 	strd	r3, r3, [r0]
 800555a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800555e:	6083      	str	r3, [r0, #8]
 8005560:	8181      	strh	r1, [r0, #12]
 8005562:	6643      	str	r3, [r0, #100]	; 0x64
 8005564:	81c2      	strh	r2, [r0, #14]
 8005566:	6183      	str	r3, [r0, #24]
 8005568:	4619      	mov	r1, r3
 800556a:	2208      	movs	r2, #8
 800556c:	305c      	adds	r0, #92	; 0x5c
 800556e:	f7ff fdbf 	bl	80050f0 <memset>
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <std+0x38>)
 8005574:	6224      	str	r4, [r4, #32]
 8005576:	6263      	str	r3, [r4, #36]	; 0x24
 8005578:	4b04      	ldr	r3, [pc, #16]	; (800558c <std+0x3c>)
 800557a:	62a3      	str	r3, [r4, #40]	; 0x28
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <std+0x40>)
 800557e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <std+0x44>)
 8005582:	6323      	str	r3, [r4, #48]	; 0x30
 8005584:	bd10      	pop	{r4, pc}
 8005586:	bf00      	nop
 8005588:	08005fc9 	.word	0x08005fc9
 800558c:	08005feb 	.word	0x08005feb
 8005590:	08006023 	.word	0x08006023
 8005594:	08006047 	.word	0x08006047

08005598 <_cleanup_r>:
 8005598:	4901      	ldr	r1, [pc, #4]	; (80055a0 <_cleanup_r+0x8>)
 800559a:	f000 b8af 	b.w	80056fc <_fwalk_reent>
 800559e:	bf00      	nop
 80055a0:	080054d9 	.word	0x080054d9

080055a4 <__sfmoreglue>:
 80055a4:	2268      	movs	r2, #104	; 0x68
 80055a6:	b570      	push	{r4, r5, r6, lr}
 80055a8:	1e4d      	subs	r5, r1, #1
 80055aa:	4355      	muls	r5, r2
 80055ac:	460e      	mov	r6, r1
 80055ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055b2:	f000 f993 	bl	80058dc <_malloc_r>
 80055b6:	4604      	mov	r4, r0
 80055b8:	b140      	cbz	r0, 80055cc <__sfmoreglue+0x28>
 80055ba:	2100      	movs	r1, #0
 80055bc:	e9c0 1600 	strd	r1, r6, [r0]
 80055c0:	300c      	adds	r0, #12
 80055c2:	60a0      	str	r0, [r4, #8]
 80055c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055c8:	f7ff fd92 	bl	80050f0 <memset>
 80055cc:	4620      	mov	r0, r4
 80055ce:	bd70      	pop	{r4, r5, r6, pc}

080055d0 <__sfp_lock_acquire>:
 80055d0:	4801      	ldr	r0, [pc, #4]	; (80055d8 <__sfp_lock_acquire+0x8>)
 80055d2:	f000 b8b3 	b.w	800573c <__retarget_lock_acquire_recursive>
 80055d6:	bf00      	nop
 80055d8:	20000241 	.word	0x20000241

080055dc <__sfp_lock_release>:
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <__sfp_lock_release+0x8>)
 80055de:	f000 b8ae 	b.w	800573e <__retarget_lock_release_recursive>
 80055e2:	bf00      	nop
 80055e4:	20000241 	.word	0x20000241

080055e8 <__sinit_lock_acquire>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__sinit_lock_acquire+0x8>)
 80055ea:	f000 b8a7 	b.w	800573c <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	20000242 	.word	0x20000242

080055f4 <__sinit_lock_release>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__sinit_lock_release+0x8>)
 80055f6:	f000 b8a2 	b.w	800573e <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	20000242 	.word	0x20000242

08005600 <__sinit>:
 8005600:	b510      	push	{r4, lr}
 8005602:	4604      	mov	r4, r0
 8005604:	f7ff fff0 	bl	80055e8 <__sinit_lock_acquire>
 8005608:	69a3      	ldr	r3, [r4, #24]
 800560a:	b11b      	cbz	r3, 8005614 <__sinit+0x14>
 800560c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005610:	f7ff bff0 	b.w	80055f4 <__sinit_lock_release>
 8005614:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005618:	6523      	str	r3, [r4, #80]	; 0x50
 800561a:	4b13      	ldr	r3, [pc, #76]	; (8005668 <__sinit+0x68>)
 800561c:	4a13      	ldr	r2, [pc, #76]	; (800566c <__sinit+0x6c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	62a2      	str	r2, [r4, #40]	; 0x28
 8005622:	42a3      	cmp	r3, r4
 8005624:	bf08      	it	eq
 8005626:	2301      	moveq	r3, #1
 8005628:	4620      	mov	r0, r4
 800562a:	bf08      	it	eq
 800562c:	61a3      	streq	r3, [r4, #24]
 800562e:	f000 f81f 	bl	8005670 <__sfp>
 8005632:	6060      	str	r0, [r4, #4]
 8005634:	4620      	mov	r0, r4
 8005636:	f000 f81b 	bl	8005670 <__sfp>
 800563a:	60a0      	str	r0, [r4, #8]
 800563c:	4620      	mov	r0, r4
 800563e:	f000 f817 	bl	8005670 <__sfp>
 8005642:	2200      	movs	r2, #0
 8005644:	2104      	movs	r1, #4
 8005646:	60e0      	str	r0, [r4, #12]
 8005648:	6860      	ldr	r0, [r4, #4]
 800564a:	f7ff ff81 	bl	8005550 <std>
 800564e:	2201      	movs	r2, #1
 8005650:	2109      	movs	r1, #9
 8005652:	68a0      	ldr	r0, [r4, #8]
 8005654:	f7ff ff7c 	bl	8005550 <std>
 8005658:	2202      	movs	r2, #2
 800565a:	2112      	movs	r1, #18
 800565c:	68e0      	ldr	r0, [r4, #12]
 800565e:	f7ff ff77 	bl	8005550 <std>
 8005662:	2301      	movs	r3, #1
 8005664:	61a3      	str	r3, [r4, #24]
 8005666:	e7d1      	b.n	800560c <__sinit+0xc>
 8005668:	080064bc 	.word	0x080064bc
 800566c:	08005599 	.word	0x08005599

08005670 <__sfp>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	4607      	mov	r7, r0
 8005674:	f7ff ffac 	bl	80055d0 <__sfp_lock_acquire>
 8005678:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <__sfp+0x84>)
 800567a:	681e      	ldr	r6, [r3, #0]
 800567c:	69b3      	ldr	r3, [r6, #24]
 800567e:	b913      	cbnz	r3, 8005686 <__sfp+0x16>
 8005680:	4630      	mov	r0, r6
 8005682:	f7ff ffbd 	bl	8005600 <__sinit>
 8005686:	3648      	adds	r6, #72	; 0x48
 8005688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800568c:	3b01      	subs	r3, #1
 800568e:	d503      	bpl.n	8005698 <__sfp+0x28>
 8005690:	6833      	ldr	r3, [r6, #0]
 8005692:	b30b      	cbz	r3, 80056d8 <__sfp+0x68>
 8005694:	6836      	ldr	r6, [r6, #0]
 8005696:	e7f7      	b.n	8005688 <__sfp+0x18>
 8005698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800569c:	b9d5      	cbnz	r5, 80056d4 <__sfp+0x64>
 800569e:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <__sfp+0x88>)
 80056a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056a4:	60e3      	str	r3, [r4, #12]
 80056a6:	6665      	str	r5, [r4, #100]	; 0x64
 80056a8:	f000 f847 	bl	800573a <__retarget_lock_init_recursive>
 80056ac:	f7ff ff96 	bl	80055dc <__sfp_lock_release>
 80056b0:	2208      	movs	r2, #8
 80056b2:	4629      	mov	r1, r5
 80056b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056bc:	6025      	str	r5, [r4, #0]
 80056be:	61a5      	str	r5, [r4, #24]
 80056c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056c4:	f7ff fd14 	bl	80050f0 <memset>
 80056c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056d0:	4620      	mov	r0, r4
 80056d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d4:	3468      	adds	r4, #104	; 0x68
 80056d6:	e7d9      	b.n	800568c <__sfp+0x1c>
 80056d8:	2104      	movs	r1, #4
 80056da:	4638      	mov	r0, r7
 80056dc:	f7ff ff62 	bl	80055a4 <__sfmoreglue>
 80056e0:	4604      	mov	r4, r0
 80056e2:	6030      	str	r0, [r6, #0]
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d1d5      	bne.n	8005694 <__sfp+0x24>
 80056e8:	f7ff ff78 	bl	80055dc <__sfp_lock_release>
 80056ec:	230c      	movs	r3, #12
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	e7ee      	b.n	80056d0 <__sfp+0x60>
 80056f2:	bf00      	nop
 80056f4:	080064bc 	.word	0x080064bc
 80056f8:	ffff0001 	.word	0xffff0001

080056fc <_fwalk_reent>:
 80056fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005700:	4606      	mov	r6, r0
 8005702:	4688      	mov	r8, r1
 8005704:	2700      	movs	r7, #0
 8005706:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800570a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800570e:	f1b9 0901 	subs.w	r9, r9, #1
 8005712:	d505      	bpl.n	8005720 <_fwalk_reent+0x24>
 8005714:	6824      	ldr	r4, [r4, #0]
 8005716:	2c00      	cmp	r4, #0
 8005718:	d1f7      	bne.n	800570a <_fwalk_reent+0xe>
 800571a:	4638      	mov	r0, r7
 800571c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005720:	89ab      	ldrh	r3, [r5, #12]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d907      	bls.n	8005736 <_fwalk_reent+0x3a>
 8005726:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800572a:	3301      	adds	r3, #1
 800572c:	d003      	beq.n	8005736 <_fwalk_reent+0x3a>
 800572e:	4629      	mov	r1, r5
 8005730:	4630      	mov	r0, r6
 8005732:	47c0      	blx	r8
 8005734:	4307      	orrs	r7, r0
 8005736:	3568      	adds	r5, #104	; 0x68
 8005738:	e7e9      	b.n	800570e <_fwalk_reent+0x12>

0800573a <__retarget_lock_init_recursive>:
 800573a:	4770      	bx	lr

0800573c <__retarget_lock_acquire_recursive>:
 800573c:	4770      	bx	lr

0800573e <__retarget_lock_release_recursive>:
 800573e:	4770      	bx	lr

08005740 <__swhatbuf_r>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	460e      	mov	r6, r1
 8005744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005748:	4614      	mov	r4, r2
 800574a:	2900      	cmp	r1, #0
 800574c:	461d      	mov	r5, r3
 800574e:	b096      	sub	sp, #88	; 0x58
 8005750:	da08      	bge.n	8005764 <__swhatbuf_r+0x24>
 8005752:	2200      	movs	r2, #0
 8005754:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005758:	602a      	str	r2, [r5, #0]
 800575a:	061a      	lsls	r2, r3, #24
 800575c:	d410      	bmi.n	8005780 <__swhatbuf_r+0x40>
 800575e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005762:	e00e      	b.n	8005782 <__swhatbuf_r+0x42>
 8005764:	466a      	mov	r2, sp
 8005766:	f000 fc95 	bl	8006094 <_fstat_r>
 800576a:	2800      	cmp	r0, #0
 800576c:	dbf1      	blt.n	8005752 <__swhatbuf_r+0x12>
 800576e:	9a01      	ldr	r2, [sp, #4]
 8005770:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005774:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005778:	425a      	negs	r2, r3
 800577a:	415a      	adcs	r2, r3
 800577c:	602a      	str	r2, [r5, #0]
 800577e:	e7ee      	b.n	800575e <__swhatbuf_r+0x1e>
 8005780:	2340      	movs	r3, #64	; 0x40
 8005782:	2000      	movs	r0, #0
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	b016      	add	sp, #88	; 0x58
 8005788:	bd70      	pop	{r4, r5, r6, pc}
	...

0800578c <__smakebuf_r>:
 800578c:	898b      	ldrh	r3, [r1, #12]
 800578e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005790:	079d      	lsls	r5, r3, #30
 8005792:	4606      	mov	r6, r0
 8005794:	460c      	mov	r4, r1
 8005796:	d507      	bpl.n	80057a8 <__smakebuf_r+0x1c>
 8005798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	6123      	str	r3, [r4, #16]
 80057a0:	2301      	movs	r3, #1
 80057a2:	6163      	str	r3, [r4, #20]
 80057a4:	b002      	add	sp, #8
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	466a      	mov	r2, sp
 80057aa:	ab01      	add	r3, sp, #4
 80057ac:	f7ff ffc8 	bl	8005740 <__swhatbuf_r>
 80057b0:	9900      	ldr	r1, [sp, #0]
 80057b2:	4605      	mov	r5, r0
 80057b4:	4630      	mov	r0, r6
 80057b6:	f000 f891 	bl	80058dc <_malloc_r>
 80057ba:	b948      	cbnz	r0, 80057d0 <__smakebuf_r+0x44>
 80057bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057c0:	059a      	lsls	r2, r3, #22
 80057c2:	d4ef      	bmi.n	80057a4 <__smakebuf_r+0x18>
 80057c4:	f023 0303 	bic.w	r3, r3, #3
 80057c8:	f043 0302 	orr.w	r3, r3, #2
 80057cc:	81a3      	strh	r3, [r4, #12]
 80057ce:	e7e3      	b.n	8005798 <__smakebuf_r+0xc>
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <__smakebuf_r+0x7c>)
 80057d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	6020      	str	r0, [r4, #0]
 80057d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057dc:	81a3      	strh	r3, [r4, #12]
 80057de:	9b00      	ldr	r3, [sp, #0]
 80057e0:	6120      	str	r0, [r4, #16]
 80057e2:	6163      	str	r3, [r4, #20]
 80057e4:	9b01      	ldr	r3, [sp, #4]
 80057e6:	b15b      	cbz	r3, 8005800 <__smakebuf_r+0x74>
 80057e8:	4630      	mov	r0, r6
 80057ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ee:	f000 fc63 	bl	80060b8 <_isatty_r>
 80057f2:	b128      	cbz	r0, 8005800 <__smakebuf_r+0x74>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	f023 0303 	bic.w	r3, r3, #3
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	81a3      	strh	r3, [r4, #12]
 8005800:	89a0      	ldrh	r0, [r4, #12]
 8005802:	4305      	orrs	r5, r0
 8005804:	81a5      	strh	r5, [r4, #12]
 8005806:	e7cd      	b.n	80057a4 <__smakebuf_r+0x18>
 8005808:	08005599 	.word	0x08005599

0800580c <_free_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4605      	mov	r5, r0
 8005810:	2900      	cmp	r1, #0
 8005812:	d040      	beq.n	8005896 <_free_r+0x8a>
 8005814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005818:	1f0c      	subs	r4, r1, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	bfb8      	it	lt
 800581e:	18e4      	addlt	r4, r4, r3
 8005820:	f000 fc94 	bl	800614c <__malloc_lock>
 8005824:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <_free_r+0x8c>)
 8005826:	6813      	ldr	r3, [r2, #0]
 8005828:	b933      	cbnz	r3, 8005838 <_free_r+0x2c>
 800582a:	6063      	str	r3, [r4, #4]
 800582c:	6014      	str	r4, [r2, #0]
 800582e:	4628      	mov	r0, r5
 8005830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005834:	f000 bc90 	b.w	8006158 <__malloc_unlock>
 8005838:	42a3      	cmp	r3, r4
 800583a:	d908      	bls.n	800584e <_free_r+0x42>
 800583c:	6820      	ldr	r0, [r4, #0]
 800583e:	1821      	adds	r1, r4, r0
 8005840:	428b      	cmp	r3, r1
 8005842:	bf01      	itttt	eq
 8005844:	6819      	ldreq	r1, [r3, #0]
 8005846:	685b      	ldreq	r3, [r3, #4]
 8005848:	1809      	addeq	r1, r1, r0
 800584a:	6021      	streq	r1, [r4, #0]
 800584c:	e7ed      	b.n	800582a <_free_r+0x1e>
 800584e:	461a      	mov	r2, r3
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b10b      	cbz	r3, 8005858 <_free_r+0x4c>
 8005854:	42a3      	cmp	r3, r4
 8005856:	d9fa      	bls.n	800584e <_free_r+0x42>
 8005858:	6811      	ldr	r1, [r2, #0]
 800585a:	1850      	adds	r0, r2, r1
 800585c:	42a0      	cmp	r0, r4
 800585e:	d10b      	bne.n	8005878 <_free_r+0x6c>
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	4401      	add	r1, r0
 8005864:	1850      	adds	r0, r2, r1
 8005866:	4283      	cmp	r3, r0
 8005868:	6011      	str	r1, [r2, #0]
 800586a:	d1e0      	bne.n	800582e <_free_r+0x22>
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4401      	add	r1, r0
 8005872:	6011      	str	r1, [r2, #0]
 8005874:	6053      	str	r3, [r2, #4]
 8005876:	e7da      	b.n	800582e <_free_r+0x22>
 8005878:	d902      	bls.n	8005880 <_free_r+0x74>
 800587a:	230c      	movs	r3, #12
 800587c:	602b      	str	r3, [r5, #0]
 800587e:	e7d6      	b.n	800582e <_free_r+0x22>
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	1821      	adds	r1, r4, r0
 8005884:	428b      	cmp	r3, r1
 8005886:	bf01      	itttt	eq
 8005888:	6819      	ldreq	r1, [r3, #0]
 800588a:	685b      	ldreq	r3, [r3, #4]
 800588c:	1809      	addeq	r1, r1, r0
 800588e:	6021      	streq	r1, [r4, #0]
 8005890:	6063      	str	r3, [r4, #4]
 8005892:	6054      	str	r4, [r2, #4]
 8005894:	e7cb      	b.n	800582e <_free_r+0x22>
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	20000244 	.word	0x20000244

0800589c <sbrk_aligned>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	4e0e      	ldr	r6, [pc, #56]	; (80058d8 <sbrk_aligned+0x3c>)
 80058a0:	460c      	mov	r4, r1
 80058a2:	6831      	ldr	r1, [r6, #0]
 80058a4:	4605      	mov	r5, r0
 80058a6:	b911      	cbnz	r1, 80058ae <sbrk_aligned+0x12>
 80058a8:	f000 fb7e 	bl	8005fa8 <_sbrk_r>
 80058ac:	6030      	str	r0, [r6, #0]
 80058ae:	4621      	mov	r1, r4
 80058b0:	4628      	mov	r0, r5
 80058b2:	f000 fb79 	bl	8005fa8 <_sbrk_r>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d00a      	beq.n	80058d0 <sbrk_aligned+0x34>
 80058ba:	1cc4      	adds	r4, r0, #3
 80058bc:	f024 0403 	bic.w	r4, r4, #3
 80058c0:	42a0      	cmp	r0, r4
 80058c2:	d007      	beq.n	80058d4 <sbrk_aligned+0x38>
 80058c4:	1a21      	subs	r1, r4, r0
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 fb6e 	bl	8005fa8 <_sbrk_r>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d101      	bne.n	80058d4 <sbrk_aligned+0x38>
 80058d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058d4:	4620      	mov	r0, r4
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	20000248 	.word	0x20000248

080058dc <_malloc_r>:
 80058dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e0:	1ccd      	adds	r5, r1, #3
 80058e2:	f025 0503 	bic.w	r5, r5, #3
 80058e6:	3508      	adds	r5, #8
 80058e8:	2d0c      	cmp	r5, #12
 80058ea:	bf38      	it	cc
 80058ec:	250c      	movcc	r5, #12
 80058ee:	2d00      	cmp	r5, #0
 80058f0:	4607      	mov	r7, r0
 80058f2:	db01      	blt.n	80058f8 <_malloc_r+0x1c>
 80058f4:	42a9      	cmp	r1, r5
 80058f6:	d905      	bls.n	8005904 <_malloc_r+0x28>
 80058f8:	230c      	movs	r3, #12
 80058fa:	2600      	movs	r6, #0
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	4630      	mov	r0, r6
 8005900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005904:	4e2e      	ldr	r6, [pc, #184]	; (80059c0 <_malloc_r+0xe4>)
 8005906:	f000 fc21 	bl	800614c <__malloc_lock>
 800590a:	6833      	ldr	r3, [r6, #0]
 800590c:	461c      	mov	r4, r3
 800590e:	bb34      	cbnz	r4, 800595e <_malloc_r+0x82>
 8005910:	4629      	mov	r1, r5
 8005912:	4638      	mov	r0, r7
 8005914:	f7ff ffc2 	bl	800589c <sbrk_aligned>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	4604      	mov	r4, r0
 800591c:	d14d      	bne.n	80059ba <_malloc_r+0xde>
 800591e:	6834      	ldr	r4, [r6, #0]
 8005920:	4626      	mov	r6, r4
 8005922:	2e00      	cmp	r6, #0
 8005924:	d140      	bne.n	80059a8 <_malloc_r+0xcc>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	4631      	mov	r1, r6
 800592a:	4638      	mov	r0, r7
 800592c:	eb04 0803 	add.w	r8, r4, r3
 8005930:	f000 fb3a 	bl	8005fa8 <_sbrk_r>
 8005934:	4580      	cmp	r8, r0
 8005936:	d13a      	bne.n	80059ae <_malloc_r+0xd2>
 8005938:	6821      	ldr	r1, [r4, #0]
 800593a:	3503      	adds	r5, #3
 800593c:	1a6d      	subs	r5, r5, r1
 800593e:	f025 0503 	bic.w	r5, r5, #3
 8005942:	3508      	adds	r5, #8
 8005944:	2d0c      	cmp	r5, #12
 8005946:	bf38      	it	cc
 8005948:	250c      	movcc	r5, #12
 800594a:	4638      	mov	r0, r7
 800594c:	4629      	mov	r1, r5
 800594e:	f7ff ffa5 	bl	800589c <sbrk_aligned>
 8005952:	3001      	adds	r0, #1
 8005954:	d02b      	beq.n	80059ae <_malloc_r+0xd2>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	442b      	add	r3, r5
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	e00e      	b.n	800597c <_malloc_r+0xa0>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	1b52      	subs	r2, r2, r5
 8005962:	d41e      	bmi.n	80059a2 <_malloc_r+0xc6>
 8005964:	2a0b      	cmp	r2, #11
 8005966:	d916      	bls.n	8005996 <_malloc_r+0xba>
 8005968:	1961      	adds	r1, r4, r5
 800596a:	42a3      	cmp	r3, r4
 800596c:	6025      	str	r5, [r4, #0]
 800596e:	bf18      	it	ne
 8005970:	6059      	strne	r1, [r3, #4]
 8005972:	6863      	ldr	r3, [r4, #4]
 8005974:	bf08      	it	eq
 8005976:	6031      	streq	r1, [r6, #0]
 8005978:	5162      	str	r2, [r4, r5]
 800597a:	604b      	str	r3, [r1, #4]
 800597c:	4638      	mov	r0, r7
 800597e:	f104 060b 	add.w	r6, r4, #11
 8005982:	f000 fbe9 	bl	8006158 <__malloc_unlock>
 8005986:	f026 0607 	bic.w	r6, r6, #7
 800598a:	1d23      	adds	r3, r4, #4
 800598c:	1af2      	subs	r2, r6, r3
 800598e:	d0b6      	beq.n	80058fe <_malloc_r+0x22>
 8005990:	1b9b      	subs	r3, r3, r6
 8005992:	50a3      	str	r3, [r4, r2]
 8005994:	e7b3      	b.n	80058fe <_malloc_r+0x22>
 8005996:	6862      	ldr	r2, [r4, #4]
 8005998:	42a3      	cmp	r3, r4
 800599a:	bf0c      	ite	eq
 800599c:	6032      	streq	r2, [r6, #0]
 800599e:	605a      	strne	r2, [r3, #4]
 80059a0:	e7ec      	b.n	800597c <_malloc_r+0xa0>
 80059a2:	4623      	mov	r3, r4
 80059a4:	6864      	ldr	r4, [r4, #4]
 80059a6:	e7b2      	b.n	800590e <_malloc_r+0x32>
 80059a8:	4634      	mov	r4, r6
 80059aa:	6876      	ldr	r6, [r6, #4]
 80059ac:	e7b9      	b.n	8005922 <_malloc_r+0x46>
 80059ae:	230c      	movs	r3, #12
 80059b0:	4638      	mov	r0, r7
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	f000 fbd0 	bl	8006158 <__malloc_unlock>
 80059b8:	e7a1      	b.n	80058fe <_malloc_r+0x22>
 80059ba:	6025      	str	r5, [r4, #0]
 80059bc:	e7de      	b.n	800597c <_malloc_r+0xa0>
 80059be:	bf00      	nop
 80059c0:	20000244 	.word	0x20000244

080059c4 <__ssputs_r>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	688e      	ldr	r6, [r1, #8]
 80059ca:	4682      	mov	sl, r0
 80059cc:	429e      	cmp	r6, r3
 80059ce:	460c      	mov	r4, r1
 80059d0:	4690      	mov	r8, r2
 80059d2:	461f      	mov	r7, r3
 80059d4:	d838      	bhi.n	8005a48 <__ssputs_r+0x84>
 80059d6:	898a      	ldrh	r2, [r1, #12]
 80059d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059dc:	d032      	beq.n	8005a44 <__ssputs_r+0x80>
 80059de:	6825      	ldr	r5, [r4, #0]
 80059e0:	6909      	ldr	r1, [r1, #16]
 80059e2:	3301      	adds	r3, #1
 80059e4:	eba5 0901 	sub.w	r9, r5, r1
 80059e8:	6965      	ldr	r5, [r4, #20]
 80059ea:	444b      	add	r3, r9
 80059ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059f4:	106d      	asrs	r5, r5, #1
 80059f6:	429d      	cmp	r5, r3
 80059f8:	bf38      	it	cc
 80059fa:	461d      	movcc	r5, r3
 80059fc:	0553      	lsls	r3, r2, #21
 80059fe:	d531      	bpl.n	8005a64 <__ssputs_r+0xa0>
 8005a00:	4629      	mov	r1, r5
 8005a02:	f7ff ff6b 	bl	80058dc <_malloc_r>
 8005a06:	4606      	mov	r6, r0
 8005a08:	b950      	cbnz	r0, 8005a20 <__ssputs_r+0x5c>
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a10:	f8ca 3000 	str.w	r3, [sl]
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a1a:	81a3      	strh	r3, [r4, #12]
 8005a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a20:	464a      	mov	r2, r9
 8005a22:	6921      	ldr	r1, [r4, #16]
 8005a24:	f7ff fb56 	bl	80050d4 <memcpy>
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	6126      	str	r6, [r4, #16]
 8005a36:	444e      	add	r6, r9
 8005a38:	6026      	str	r6, [r4, #0]
 8005a3a:	463e      	mov	r6, r7
 8005a3c:	6165      	str	r5, [r4, #20]
 8005a3e:	eba5 0509 	sub.w	r5, r5, r9
 8005a42:	60a5      	str	r5, [r4, #8]
 8005a44:	42be      	cmp	r6, r7
 8005a46:	d900      	bls.n	8005a4a <__ssputs_r+0x86>
 8005a48:	463e      	mov	r6, r7
 8005a4a:	4632      	mov	r2, r6
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	6820      	ldr	r0, [r4, #0]
 8005a50:	f000 fb62 	bl	8006118 <memmove>
 8005a54:	68a3      	ldr	r3, [r4, #8]
 8005a56:	2000      	movs	r0, #0
 8005a58:	1b9b      	subs	r3, r3, r6
 8005a5a:	60a3      	str	r3, [r4, #8]
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	4433      	add	r3, r6
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	e7db      	b.n	8005a1c <__ssputs_r+0x58>
 8005a64:	462a      	mov	r2, r5
 8005a66:	f000 fb7d 	bl	8006164 <_realloc_r>
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d1e1      	bne.n	8005a34 <__ssputs_r+0x70>
 8005a70:	4650      	mov	r0, sl
 8005a72:	6921      	ldr	r1, [r4, #16]
 8005a74:	f7ff feca 	bl	800580c <_free_r>
 8005a78:	e7c7      	b.n	8005a0a <__ssputs_r+0x46>
	...

08005a7c <_svfiprintf_r>:
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	4698      	mov	r8, r3
 8005a82:	898b      	ldrh	r3, [r1, #12]
 8005a84:	4607      	mov	r7, r0
 8005a86:	061b      	lsls	r3, r3, #24
 8005a88:	460d      	mov	r5, r1
 8005a8a:	4614      	mov	r4, r2
 8005a8c:	b09d      	sub	sp, #116	; 0x74
 8005a8e:	d50e      	bpl.n	8005aae <_svfiprintf_r+0x32>
 8005a90:	690b      	ldr	r3, [r1, #16]
 8005a92:	b963      	cbnz	r3, 8005aae <_svfiprintf_r+0x32>
 8005a94:	2140      	movs	r1, #64	; 0x40
 8005a96:	f7ff ff21 	bl	80058dc <_malloc_r>
 8005a9a:	6028      	str	r0, [r5, #0]
 8005a9c:	6128      	str	r0, [r5, #16]
 8005a9e:	b920      	cbnz	r0, 8005aaa <_svfiprintf_r+0x2e>
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aa8:	e0d1      	b.n	8005c4e <_svfiprintf_r+0x1d2>
 8005aaa:	2340      	movs	r3, #64	; 0x40
 8005aac:	616b      	str	r3, [r5, #20]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab2:	2320      	movs	r3, #32
 8005ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ab8:	2330      	movs	r3, #48	; 0x30
 8005aba:	f04f 0901 	mov.w	r9, #1
 8005abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c68 <_svfiprintf_r+0x1ec>
 8005ac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aca:	4623      	mov	r3, r4
 8005acc:	469a      	mov	sl, r3
 8005ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad2:	b10a      	cbz	r2, 8005ad8 <_svfiprintf_r+0x5c>
 8005ad4:	2a25      	cmp	r2, #37	; 0x25
 8005ad6:	d1f9      	bne.n	8005acc <_svfiprintf_r+0x50>
 8005ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8005adc:	d00b      	beq.n	8005af6 <_svfiprintf_r+0x7a>
 8005ade:	465b      	mov	r3, fp
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f7ff ff6d 	bl	80059c4 <__ssputs_r>
 8005aea:	3001      	adds	r0, #1
 8005aec:	f000 80aa 	beq.w	8005c44 <_svfiprintf_r+0x1c8>
 8005af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af2:	445a      	add	r2, fp
 8005af4:	9209      	str	r2, [sp, #36]	; 0x24
 8005af6:	f89a 3000 	ldrb.w	r3, [sl]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80a2 	beq.w	8005c44 <_svfiprintf_r+0x1c8>
 8005b00:	2300      	movs	r3, #0
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b0a:	f10a 0a01 	add.w	sl, sl, #1
 8005b0e:	9304      	str	r3, [sp, #16]
 8005b10:	9307      	str	r3, [sp, #28]
 8005b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b16:	931a      	str	r3, [sp, #104]	; 0x68
 8005b18:	4654      	mov	r4, sl
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b20:	4851      	ldr	r0, [pc, #324]	; (8005c68 <_svfiprintf_r+0x1ec>)
 8005b22:	f000 faeb 	bl	80060fc <memchr>
 8005b26:	9a04      	ldr	r2, [sp, #16]
 8005b28:	b9d8      	cbnz	r0, 8005b62 <_svfiprintf_r+0xe6>
 8005b2a:	06d0      	lsls	r0, r2, #27
 8005b2c:	bf44      	itt	mi
 8005b2e:	2320      	movmi	r3, #32
 8005b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b34:	0711      	lsls	r1, r2, #28
 8005b36:	bf44      	itt	mi
 8005b38:	232b      	movmi	r3, #43	; 0x2b
 8005b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b42:	2b2a      	cmp	r3, #42	; 0x2a
 8005b44:	d015      	beq.n	8005b72 <_svfiprintf_r+0xf6>
 8005b46:	4654      	mov	r4, sl
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f04f 0c0a 	mov.w	ip, #10
 8005b4e:	9a07      	ldr	r2, [sp, #28]
 8005b50:	4621      	mov	r1, r4
 8005b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b56:	3b30      	subs	r3, #48	; 0x30
 8005b58:	2b09      	cmp	r3, #9
 8005b5a:	d94e      	bls.n	8005bfa <_svfiprintf_r+0x17e>
 8005b5c:	b1b0      	cbz	r0, 8005b8c <_svfiprintf_r+0x110>
 8005b5e:	9207      	str	r2, [sp, #28]
 8005b60:	e014      	b.n	8005b8c <_svfiprintf_r+0x110>
 8005b62:	eba0 0308 	sub.w	r3, r0, r8
 8005b66:	fa09 f303 	lsl.w	r3, r9, r3
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	46a2      	mov	sl, r4
 8005b6e:	9304      	str	r3, [sp, #16]
 8005b70:	e7d2      	b.n	8005b18 <_svfiprintf_r+0x9c>
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	1d19      	adds	r1, r3, #4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	9103      	str	r1, [sp, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bfbb      	ittet	lt
 8005b7e:	425b      	neglt	r3, r3
 8005b80:	f042 0202 	orrlt.w	r2, r2, #2
 8005b84:	9307      	strge	r3, [sp, #28]
 8005b86:	9307      	strlt	r3, [sp, #28]
 8005b88:	bfb8      	it	lt
 8005b8a:	9204      	strlt	r2, [sp, #16]
 8005b8c:	7823      	ldrb	r3, [r4, #0]
 8005b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005b90:	d10c      	bne.n	8005bac <_svfiprintf_r+0x130>
 8005b92:	7863      	ldrb	r3, [r4, #1]
 8005b94:	2b2a      	cmp	r3, #42	; 0x2a
 8005b96:	d135      	bne.n	8005c04 <_svfiprintf_r+0x188>
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	3402      	adds	r4, #2
 8005b9c:	1d1a      	adds	r2, r3, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	9203      	str	r2, [sp, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bfb8      	it	lt
 8005ba6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005baa:	9305      	str	r3, [sp, #20]
 8005bac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005c6c <_svfiprintf_r+0x1f0>
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	4650      	mov	r0, sl
 8005bb4:	7821      	ldrb	r1, [r4, #0]
 8005bb6:	f000 faa1 	bl	80060fc <memchr>
 8005bba:	b140      	cbz	r0, 8005bce <_svfiprintf_r+0x152>
 8005bbc:	2340      	movs	r3, #64	; 0x40
 8005bbe:	eba0 000a 	sub.w	r0, r0, sl
 8005bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8005bc6:	9b04      	ldr	r3, [sp, #16]
 8005bc8:	3401      	adds	r4, #1
 8005bca:	4303      	orrs	r3, r0
 8005bcc:	9304      	str	r3, [sp, #16]
 8005bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd2:	2206      	movs	r2, #6
 8005bd4:	4826      	ldr	r0, [pc, #152]	; (8005c70 <_svfiprintf_r+0x1f4>)
 8005bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bda:	f000 fa8f 	bl	80060fc <memchr>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d038      	beq.n	8005c54 <_svfiprintf_r+0x1d8>
 8005be2:	4b24      	ldr	r3, [pc, #144]	; (8005c74 <_svfiprintf_r+0x1f8>)
 8005be4:	bb1b      	cbnz	r3, 8005c2e <_svfiprintf_r+0x1b2>
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	3307      	adds	r3, #7
 8005bea:	f023 0307 	bic.w	r3, r3, #7
 8005bee:	3308      	adds	r3, #8
 8005bf0:	9303      	str	r3, [sp, #12]
 8005bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf4:	4433      	add	r3, r6
 8005bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf8:	e767      	b.n	8005aca <_svfiprintf_r+0x4e>
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	2001      	movs	r0, #1
 8005bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c02:	e7a5      	b.n	8005b50 <_svfiprintf_r+0xd4>
 8005c04:	2300      	movs	r3, #0
 8005c06:	f04f 0c0a 	mov.w	ip, #10
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	3401      	adds	r4, #1
 8005c0e:	9305      	str	r3, [sp, #20]
 8005c10:	4620      	mov	r0, r4
 8005c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c16:	3a30      	subs	r2, #48	; 0x30
 8005c18:	2a09      	cmp	r2, #9
 8005c1a:	d903      	bls.n	8005c24 <_svfiprintf_r+0x1a8>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0c5      	beq.n	8005bac <_svfiprintf_r+0x130>
 8005c20:	9105      	str	r1, [sp, #20]
 8005c22:	e7c3      	b.n	8005bac <_svfiprintf_r+0x130>
 8005c24:	4604      	mov	r4, r0
 8005c26:	2301      	movs	r3, #1
 8005c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c2c:	e7f0      	b.n	8005c10 <_svfiprintf_r+0x194>
 8005c2e:	ab03      	add	r3, sp, #12
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	462a      	mov	r2, r5
 8005c34:	4638      	mov	r0, r7
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <_svfiprintf_r+0x1fc>)
 8005c38:	a904      	add	r1, sp, #16
 8005c3a:	f3af 8000 	nop.w
 8005c3e:	1c42      	adds	r2, r0, #1
 8005c40:	4606      	mov	r6, r0
 8005c42:	d1d6      	bne.n	8005bf2 <_svfiprintf_r+0x176>
 8005c44:	89ab      	ldrh	r3, [r5, #12]
 8005c46:	065b      	lsls	r3, r3, #25
 8005c48:	f53f af2c 	bmi.w	8005aa4 <_svfiprintf_r+0x28>
 8005c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c4e:	b01d      	add	sp, #116	; 0x74
 8005c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c54:	ab03      	add	r3, sp, #12
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	462a      	mov	r2, r5
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <_svfiprintf_r+0x1fc>)
 8005c5e:	a904      	add	r1, sp, #16
 8005c60:	f000 f87c 	bl	8005d5c <_printf_i>
 8005c64:	e7eb      	b.n	8005c3e <_svfiprintf_r+0x1c2>
 8005c66:	bf00      	nop
 8005c68:	08006520 	.word	0x08006520
 8005c6c:	08006526 	.word	0x08006526
 8005c70:	0800652a 	.word	0x0800652a
 8005c74:	00000000 	.word	0x00000000
 8005c78:	080059c5 	.word	0x080059c5

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4699      	mov	r9, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	4607      	mov	r7, r0
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	bfb8      	it	lt
 8005c8e:	4613      	movlt	r3, r2
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c96:	460c      	mov	r4, r1
 8005c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc28      	bgt.n	8005d16 <_printf_common+0x9a>
 8005cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc8:	1e13      	subs	r3, r2, #0
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42d      	bmi.n	8005d30 <_printf_common+0xb4>
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d020      	beq.n	8005d24 <_printf_common+0xa8>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	68e5      	ldr	r5, [r4, #12]
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	bf18      	it	ne
 8005cee:	2500      	movne	r5, #0
 8005cf0:	6832      	ldr	r2, [r6, #0]
 8005cf2:	f04f 0600 	mov.w	r6, #0
 8005cf6:	68a3      	ldr	r3, [r4, #8]
 8005cf8:	bf08      	it	eq
 8005cfa:	1aad      	subeq	r5, r5, r2
 8005cfc:	6922      	ldr	r2, [r4, #16]
 8005cfe:	bf08      	it	eq
 8005d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d04:	4293      	cmp	r3, r2
 8005d06:	bfc4      	itt	gt
 8005d08:	1a9b      	subgt	r3, r3, r2
 8005d0a:	18ed      	addgt	r5, r5, r3
 8005d0c:	341a      	adds	r4, #26
 8005d0e:	42b5      	cmp	r5, r6
 8005d10:	d11a      	bne.n	8005d48 <_printf_common+0xcc>
 8005d12:	2000      	movs	r0, #0
 8005d14:	e008      	b.n	8005d28 <_printf_common+0xac>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4652      	mov	r2, sl
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	47c0      	blx	r8
 8005d20:	3001      	adds	r0, #1
 8005d22:	d103      	bne.n	8005d2c <_printf_common+0xb0>
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	e7c4      	b.n	8005cba <_printf_common+0x3e>
 8005d30:	2030      	movs	r0, #48	; 0x30
 8005d32:	18e1      	adds	r1, r4, r3
 8005d34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3e:	4422      	add	r2, r4
 8005d40:	3302      	adds	r3, #2
 8005d42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d46:	e7c5      	b.n	8005cd4 <_printf_common+0x58>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	4638      	mov	r0, r7
 8005d50:	47c0      	blx	r8
 8005d52:	3001      	adds	r0, #1
 8005d54:	d0e6      	beq.n	8005d24 <_printf_common+0xa8>
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7d9      	b.n	8005d0e <_printf_common+0x92>
	...

08005d5c <_printf_i>:
 8005d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	7e0f      	ldrb	r7, [r1, #24]
 8005d62:	4691      	mov	r9, r2
 8005d64:	2f78      	cmp	r7, #120	; 0x78
 8005d66:	4680      	mov	r8, r0
 8005d68:	460c      	mov	r4, r1
 8005d6a:	469a      	mov	sl, r3
 8005d6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d72:	d807      	bhi.n	8005d84 <_printf_i+0x28>
 8005d74:	2f62      	cmp	r7, #98	; 0x62
 8005d76:	d80a      	bhi.n	8005d8e <_printf_i+0x32>
 8005d78:	2f00      	cmp	r7, #0
 8005d7a:	f000 80d9 	beq.w	8005f30 <_printf_i+0x1d4>
 8005d7e:	2f58      	cmp	r7, #88	; 0x58
 8005d80:	f000 80a4 	beq.w	8005ecc <_printf_i+0x170>
 8005d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d8c:	e03a      	b.n	8005e04 <_printf_i+0xa8>
 8005d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d92:	2b15      	cmp	r3, #21
 8005d94:	d8f6      	bhi.n	8005d84 <_printf_i+0x28>
 8005d96:	a101      	add	r1, pc, #4	; (adr r1, 8005d9c <_printf_i+0x40>)
 8005d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d9c:	08005df5 	.word	0x08005df5
 8005da0:	08005e09 	.word	0x08005e09
 8005da4:	08005d85 	.word	0x08005d85
 8005da8:	08005d85 	.word	0x08005d85
 8005dac:	08005d85 	.word	0x08005d85
 8005db0:	08005d85 	.word	0x08005d85
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005d85 	.word	0x08005d85
 8005dbc:	08005d85 	.word	0x08005d85
 8005dc0:	08005d85 	.word	0x08005d85
 8005dc4:	08005d85 	.word	0x08005d85
 8005dc8:	08005f17 	.word	0x08005f17
 8005dcc:	08005e39 	.word	0x08005e39
 8005dd0:	08005ef9 	.word	0x08005ef9
 8005dd4:	08005d85 	.word	0x08005d85
 8005dd8:	08005d85 	.word	0x08005d85
 8005ddc:	08005f39 	.word	0x08005f39
 8005de0:	08005d85 	.word	0x08005d85
 8005de4:	08005e39 	.word	0x08005e39
 8005de8:	08005d85 	.word	0x08005d85
 8005dec:	08005d85 	.word	0x08005d85
 8005df0:	08005f01 	.word	0x08005f01
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	1d1a      	adds	r2, r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	602a      	str	r2, [r5, #0]
 8005dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0a4      	b.n	8005f52 <_printf_i+0x1f6>
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	6829      	ldr	r1, [r5, #0]
 8005e0c:	0606      	lsls	r6, r0, #24
 8005e0e:	f101 0304 	add.w	r3, r1, #4
 8005e12:	d50a      	bpl.n	8005e2a <_printf_i+0xce>
 8005e14:	680e      	ldr	r6, [r1, #0]
 8005e16:	602b      	str	r3, [r5, #0]
 8005e18:	2e00      	cmp	r6, #0
 8005e1a:	da03      	bge.n	8005e24 <_printf_i+0xc8>
 8005e1c:	232d      	movs	r3, #45	; 0x2d
 8005e1e:	4276      	negs	r6, r6
 8005e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e24:	230a      	movs	r3, #10
 8005e26:	485e      	ldr	r0, [pc, #376]	; (8005fa0 <_printf_i+0x244>)
 8005e28:	e019      	b.n	8005e5e <_printf_i+0x102>
 8005e2a:	680e      	ldr	r6, [r1, #0]
 8005e2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	bf18      	it	ne
 8005e34:	b236      	sxthne	r6, r6
 8005e36:	e7ef      	b.n	8005e18 <_printf_i+0xbc>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	6820      	ldr	r0, [r4, #0]
 8005e3c:	1d19      	adds	r1, r3, #4
 8005e3e:	6029      	str	r1, [r5, #0]
 8005e40:	0601      	lsls	r1, r0, #24
 8005e42:	d501      	bpl.n	8005e48 <_printf_i+0xec>
 8005e44:	681e      	ldr	r6, [r3, #0]
 8005e46:	e002      	b.n	8005e4e <_printf_i+0xf2>
 8005e48:	0646      	lsls	r6, r0, #25
 8005e4a:	d5fb      	bpl.n	8005e44 <_printf_i+0xe8>
 8005e4c:	881e      	ldrh	r6, [r3, #0]
 8005e4e:	2f6f      	cmp	r7, #111	; 0x6f
 8005e50:	bf0c      	ite	eq
 8005e52:	2308      	moveq	r3, #8
 8005e54:	230a      	movne	r3, #10
 8005e56:	4852      	ldr	r0, [pc, #328]	; (8005fa0 <_printf_i+0x244>)
 8005e58:	2100      	movs	r1, #0
 8005e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e5e:	6865      	ldr	r5, [r4, #4]
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	bfa8      	it	ge
 8005e64:	6821      	ldrge	r1, [r4, #0]
 8005e66:	60a5      	str	r5, [r4, #8]
 8005e68:	bfa4      	itt	ge
 8005e6a:	f021 0104 	bicge.w	r1, r1, #4
 8005e6e:	6021      	strge	r1, [r4, #0]
 8005e70:	b90e      	cbnz	r6, 8005e76 <_printf_i+0x11a>
 8005e72:	2d00      	cmp	r5, #0
 8005e74:	d04d      	beq.n	8005f12 <_printf_i+0x1b6>
 8005e76:	4615      	mov	r5, r2
 8005e78:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e7c:	fb03 6711 	mls	r7, r3, r1, r6
 8005e80:	5dc7      	ldrb	r7, [r0, r7]
 8005e82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e86:	4637      	mov	r7, r6
 8005e88:	42bb      	cmp	r3, r7
 8005e8a:	460e      	mov	r6, r1
 8005e8c:	d9f4      	bls.n	8005e78 <_printf_i+0x11c>
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d10b      	bne.n	8005eaa <_printf_i+0x14e>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	07de      	lsls	r6, r3, #31
 8005e96:	d508      	bpl.n	8005eaa <_printf_i+0x14e>
 8005e98:	6923      	ldr	r3, [r4, #16]
 8005e9a:	6861      	ldr	r1, [r4, #4]
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	bfde      	ittt	le
 8005ea0:	2330      	movle	r3, #48	; 0x30
 8005ea2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005eaa:	1b52      	subs	r2, r2, r5
 8005eac:	6122      	str	r2, [r4, #16]
 8005eae:	464b      	mov	r3, r9
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f8cd a000 	str.w	sl, [sp]
 8005eb8:	aa03      	add	r2, sp, #12
 8005eba:	f7ff fedf 	bl	8005c7c <_printf_common>
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d14c      	bne.n	8005f5c <_printf_i+0x200>
 8005ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec6:	b004      	add	sp, #16
 8005ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ecc:	4834      	ldr	r0, [pc, #208]	; (8005fa0 <_printf_i+0x244>)
 8005ece:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ed2:	6829      	ldr	r1, [r5, #0]
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	f851 6b04 	ldr.w	r6, [r1], #4
 8005eda:	6029      	str	r1, [r5, #0]
 8005edc:	061d      	lsls	r5, r3, #24
 8005ede:	d514      	bpl.n	8005f0a <_printf_i+0x1ae>
 8005ee0:	07df      	lsls	r7, r3, #31
 8005ee2:	bf44      	itt	mi
 8005ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee8:	6023      	strmi	r3, [r4, #0]
 8005eea:	b91e      	cbnz	r6, 8005ef4 <_printf_i+0x198>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	f023 0320 	bic.w	r3, r3, #32
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	e7af      	b.n	8005e58 <_printf_i+0xfc>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	f043 0320 	orr.w	r3, r3, #32
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	2378      	movs	r3, #120	; 0x78
 8005f02:	4828      	ldr	r0, [pc, #160]	; (8005fa4 <_printf_i+0x248>)
 8005f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f08:	e7e3      	b.n	8005ed2 <_printf_i+0x176>
 8005f0a:	0659      	lsls	r1, r3, #25
 8005f0c:	bf48      	it	mi
 8005f0e:	b2b6      	uxthmi	r6, r6
 8005f10:	e7e6      	b.n	8005ee0 <_printf_i+0x184>
 8005f12:	4615      	mov	r5, r2
 8005f14:	e7bb      	b.n	8005e8e <_printf_i+0x132>
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	6826      	ldr	r6, [r4, #0]
 8005f1a:	1d18      	adds	r0, r3, #4
 8005f1c:	6961      	ldr	r1, [r4, #20]
 8005f1e:	6028      	str	r0, [r5, #0]
 8005f20:	0635      	lsls	r5, r6, #24
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	d501      	bpl.n	8005f2a <_printf_i+0x1ce>
 8005f26:	6019      	str	r1, [r3, #0]
 8005f28:	e002      	b.n	8005f30 <_printf_i+0x1d4>
 8005f2a:	0670      	lsls	r0, r6, #25
 8005f2c:	d5fb      	bpl.n	8005f26 <_printf_i+0x1ca>
 8005f2e:	8019      	strh	r1, [r3, #0]
 8005f30:	2300      	movs	r3, #0
 8005f32:	4615      	mov	r5, r2
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	e7ba      	b.n	8005eae <_printf_i+0x152>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	1d1a      	adds	r2, r3, #4
 8005f3e:	602a      	str	r2, [r5, #0]
 8005f40:	681d      	ldr	r5, [r3, #0]
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	4628      	mov	r0, r5
 8005f46:	f000 f8d9 	bl	80060fc <memchr>
 8005f4a:	b108      	cbz	r0, 8005f50 <_printf_i+0x1f4>
 8005f4c:	1b40      	subs	r0, r0, r5
 8005f4e:	6060      	str	r0, [r4, #4]
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	2300      	movs	r3, #0
 8005f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f5a:	e7a8      	b.n	8005eae <_printf_i+0x152>
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	4649      	mov	r1, r9
 8005f60:	4640      	mov	r0, r8
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	47d0      	blx	sl
 8005f66:	3001      	adds	r0, #1
 8005f68:	d0ab      	beq.n	8005ec2 <_printf_i+0x166>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	079b      	lsls	r3, r3, #30
 8005f6e:	d413      	bmi.n	8005f98 <_printf_i+0x23c>
 8005f70:	68e0      	ldr	r0, [r4, #12]
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	4298      	cmp	r0, r3
 8005f76:	bfb8      	it	lt
 8005f78:	4618      	movlt	r0, r3
 8005f7a:	e7a4      	b.n	8005ec6 <_printf_i+0x16a>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4632      	mov	r2, r6
 8005f80:	4649      	mov	r1, r9
 8005f82:	4640      	mov	r0, r8
 8005f84:	47d0      	blx	sl
 8005f86:	3001      	adds	r0, #1
 8005f88:	d09b      	beq.n	8005ec2 <_printf_i+0x166>
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	68e3      	ldr	r3, [r4, #12]
 8005f8e:	9903      	ldr	r1, [sp, #12]
 8005f90:	1a5b      	subs	r3, r3, r1
 8005f92:	42ab      	cmp	r3, r5
 8005f94:	dcf2      	bgt.n	8005f7c <_printf_i+0x220>
 8005f96:	e7eb      	b.n	8005f70 <_printf_i+0x214>
 8005f98:	2500      	movs	r5, #0
 8005f9a:	f104 0619 	add.w	r6, r4, #25
 8005f9e:	e7f5      	b.n	8005f8c <_printf_i+0x230>
 8005fa0:	08006531 	.word	0x08006531
 8005fa4:	08006542 	.word	0x08006542

08005fa8 <_sbrk_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	2300      	movs	r3, #0
 8005fac:	4d05      	ldr	r5, [pc, #20]	; (8005fc4 <_sbrk_r+0x1c>)
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	f7fa fde4 	bl	8000b80 <_sbrk>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_sbrk_r+0x1a>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_sbrk_r+0x1a>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	2000024c 	.word	0x2000024c

08005fc8 <__sread>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	460c      	mov	r4, r1
 8005fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd0:	f000 f8f8 	bl	80061c4 <_read_r>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	bfab      	itete	ge
 8005fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fda:	89a3      	ldrhlt	r3, [r4, #12]
 8005fdc:	181b      	addge	r3, r3, r0
 8005fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fe2:	bfac      	ite	ge
 8005fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fe6:	81a3      	strhlt	r3, [r4, #12]
 8005fe8:	bd10      	pop	{r4, pc}

08005fea <__swrite>:
 8005fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fee:	461f      	mov	r7, r3
 8005ff0:	898b      	ldrh	r3, [r1, #12]
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	05db      	lsls	r3, r3, #23
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	4616      	mov	r6, r2
 8005ffa:	d505      	bpl.n	8006008 <__swrite+0x1e>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	2200      	movs	r2, #0
 8006000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006004:	f000 f868 	bl	80060d8 <_lseek_r>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	4632      	mov	r2, r6
 800600c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006010:	81a3      	strh	r3, [r4, #12]
 8006012:	4628      	mov	r0, r5
 8006014:	463b      	mov	r3, r7
 8006016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800601a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800601e:	f000 b817 	b.w	8006050 <_write_r>

08006022 <__sseek>:
 8006022:	b510      	push	{r4, lr}
 8006024:	460c      	mov	r4, r1
 8006026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602a:	f000 f855 	bl	80060d8 <_lseek_r>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	bf15      	itete	ne
 8006034:	6560      	strne	r0, [r4, #84]	; 0x54
 8006036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800603a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800603e:	81a3      	strheq	r3, [r4, #12]
 8006040:	bf18      	it	ne
 8006042:	81a3      	strhne	r3, [r4, #12]
 8006044:	bd10      	pop	{r4, pc}

08006046 <__sclose>:
 8006046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800604a:	f000 b813 	b.w	8006074 <_close_r>
	...

08006050 <_write_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	4611      	mov	r1, r2
 8006058:	2200      	movs	r2, #0
 800605a:	4d05      	ldr	r5, [pc, #20]	; (8006070 <_write_r+0x20>)
 800605c:	602a      	str	r2, [r5, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	f7fa f8a2 	bl	80001a8 <_write>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_write_r+0x1e>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_write_r+0x1e>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	2000024c 	.word	0x2000024c

08006074 <_close_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	2300      	movs	r3, #0
 8006078:	4d05      	ldr	r5, [pc, #20]	; (8006090 <_close_r+0x1c>)
 800607a:	4604      	mov	r4, r0
 800607c:	4608      	mov	r0, r1
 800607e:	602b      	str	r3, [r5, #0]
 8006080:	f7fa fd4d 	bl	8000b1e <_close>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_close_r+0x1a>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_close_r+0x1a>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	2000024c 	.word	0x2000024c

08006094 <_fstat_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	2300      	movs	r3, #0
 8006098:	4d06      	ldr	r5, [pc, #24]	; (80060b4 <_fstat_r+0x20>)
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	4611      	mov	r1, r2
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	f7fa fd47 	bl	8000b34 <_fstat>
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	d102      	bne.n	80060b0 <_fstat_r+0x1c>
 80060aa:	682b      	ldr	r3, [r5, #0]
 80060ac:	b103      	cbz	r3, 80060b0 <_fstat_r+0x1c>
 80060ae:	6023      	str	r3, [r4, #0]
 80060b0:	bd38      	pop	{r3, r4, r5, pc}
 80060b2:	bf00      	nop
 80060b4:	2000024c 	.word	0x2000024c

080060b8 <_isatty_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	2300      	movs	r3, #0
 80060bc:	4d05      	ldr	r5, [pc, #20]	; (80060d4 <_isatty_r+0x1c>)
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fa fd45 	bl	8000b52 <_isatty>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_isatty_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_isatty_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	2000024c 	.word	0x2000024c

080060d8 <_lseek_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4604      	mov	r4, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	2200      	movs	r2, #0
 80060e2:	4d05      	ldr	r5, [pc, #20]	; (80060f8 <_lseek_r+0x20>)
 80060e4:	602a      	str	r2, [r5, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f7fa fd3d 	bl	8000b66 <_lseek>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_lseek_r+0x1e>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_lseek_r+0x1e>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	2000024c 	.word	0x2000024c

080060fc <memchr>:
 80060fc:	4603      	mov	r3, r0
 80060fe:	b510      	push	{r4, lr}
 8006100:	b2c9      	uxtb	r1, r1
 8006102:	4402      	add	r2, r0
 8006104:	4293      	cmp	r3, r2
 8006106:	4618      	mov	r0, r3
 8006108:	d101      	bne.n	800610e <memchr+0x12>
 800610a:	2000      	movs	r0, #0
 800610c:	e003      	b.n	8006116 <memchr+0x1a>
 800610e:	7804      	ldrb	r4, [r0, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	428c      	cmp	r4, r1
 8006114:	d1f6      	bne.n	8006104 <memchr+0x8>
 8006116:	bd10      	pop	{r4, pc}

08006118 <memmove>:
 8006118:	4288      	cmp	r0, r1
 800611a:	b510      	push	{r4, lr}
 800611c:	eb01 0402 	add.w	r4, r1, r2
 8006120:	d902      	bls.n	8006128 <memmove+0x10>
 8006122:	4284      	cmp	r4, r0
 8006124:	4623      	mov	r3, r4
 8006126:	d807      	bhi.n	8006138 <memmove+0x20>
 8006128:	1e43      	subs	r3, r0, #1
 800612a:	42a1      	cmp	r1, r4
 800612c:	d008      	beq.n	8006140 <memmove+0x28>
 800612e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006136:	e7f8      	b.n	800612a <memmove+0x12>
 8006138:	4601      	mov	r1, r0
 800613a:	4402      	add	r2, r0
 800613c:	428a      	cmp	r2, r1
 800613e:	d100      	bne.n	8006142 <memmove+0x2a>
 8006140:	bd10      	pop	{r4, pc}
 8006142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800614a:	e7f7      	b.n	800613c <memmove+0x24>

0800614c <__malloc_lock>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__malloc_lock+0x8>)
 800614e:	f7ff baf5 	b.w	800573c <__retarget_lock_acquire_recursive>
 8006152:	bf00      	nop
 8006154:	20000240 	.word	0x20000240

08006158 <__malloc_unlock>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__malloc_unlock+0x8>)
 800615a:	f7ff baf0 	b.w	800573e <__retarget_lock_release_recursive>
 800615e:	bf00      	nop
 8006160:	20000240 	.word	0x20000240

08006164 <_realloc_r>:
 8006164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006168:	4680      	mov	r8, r0
 800616a:	4614      	mov	r4, r2
 800616c:	460e      	mov	r6, r1
 800616e:	b921      	cbnz	r1, 800617a <_realloc_r+0x16>
 8006170:	4611      	mov	r1, r2
 8006172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006176:	f7ff bbb1 	b.w	80058dc <_malloc_r>
 800617a:	b92a      	cbnz	r2, 8006188 <_realloc_r+0x24>
 800617c:	f7ff fb46 	bl	800580c <_free_r>
 8006180:	4625      	mov	r5, r4
 8006182:	4628      	mov	r0, r5
 8006184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006188:	f000 f82e 	bl	80061e8 <_malloc_usable_size_r>
 800618c:	4284      	cmp	r4, r0
 800618e:	4607      	mov	r7, r0
 8006190:	d802      	bhi.n	8006198 <_realloc_r+0x34>
 8006192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006196:	d812      	bhi.n	80061be <_realloc_r+0x5a>
 8006198:	4621      	mov	r1, r4
 800619a:	4640      	mov	r0, r8
 800619c:	f7ff fb9e 	bl	80058dc <_malloc_r>
 80061a0:	4605      	mov	r5, r0
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d0ed      	beq.n	8006182 <_realloc_r+0x1e>
 80061a6:	42bc      	cmp	r4, r7
 80061a8:	4622      	mov	r2, r4
 80061aa:	4631      	mov	r1, r6
 80061ac:	bf28      	it	cs
 80061ae:	463a      	movcs	r2, r7
 80061b0:	f7fe ff90 	bl	80050d4 <memcpy>
 80061b4:	4631      	mov	r1, r6
 80061b6:	4640      	mov	r0, r8
 80061b8:	f7ff fb28 	bl	800580c <_free_r>
 80061bc:	e7e1      	b.n	8006182 <_realloc_r+0x1e>
 80061be:	4635      	mov	r5, r6
 80061c0:	e7df      	b.n	8006182 <_realloc_r+0x1e>
	...

080061c4 <_read_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4604      	mov	r4, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	2200      	movs	r2, #0
 80061ce:	4d05      	ldr	r5, [pc, #20]	; (80061e4 <_read_r+0x20>)
 80061d0:	602a      	str	r2, [r5, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7fa fc86 	bl	8000ae4 <_read>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_read_r+0x1e>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_read_r+0x1e>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	2000024c 	.word	0x2000024c

080061e8 <_malloc_usable_size_r>:
 80061e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ec:	1f18      	subs	r0, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bfbc      	itt	lt
 80061f2:	580b      	ldrlt	r3, [r1, r0]
 80061f4:	18c0      	addlt	r0, r0, r3
 80061f6:	4770      	bx	lr

080061f8 <_init>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	bf00      	nop
 80061fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fe:	bc08      	pop	{r3}
 8006200:	469e      	mov	lr, r3
 8006202:	4770      	bx	lr

08006204 <_fini>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr
