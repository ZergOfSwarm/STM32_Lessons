
RGB_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b64  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d1c  08004d1c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004d1c  08004d1c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d1c  08004d1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  20000010  08004d34  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c6c  08004d34  00021c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b4c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000291a  00000000  00000000  00034b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  000374a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00038568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002576  00000000  00000000  00039508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d74b  00000000  00000000  0003ba7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000906d2  00000000  00000000  000491c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d989b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e0  00000000  00000000  000d9918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c5c 	.word	0x08004c5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004c5c 	.word	0x08004c5c

08000150 <rgb_set>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// set values to the led
void rgb_set(uint8_t red, uint8_t green, uint8_t blue) {
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	460b      	mov	r3, r1
 800015c:	71bb      	strb	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]
	htim2.Instance->CCR1 = 255 - red; // ���� RGB � ����� ������� �� htim2.Instance->CCR1 = red;
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000168:	4b09      	ldr	r3, [pc, #36]	; (8000190 <rgb_set+0x40>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR2 = 255 - green; // ���� RGB � ����� ������� �� htim2.Instance->CCR1 = green;
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <rgb_set+0x40>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR3 = 255 - blue; // ���� RGB � ����� ������� �� htim2.Instance->CCR1 = blue;
 800017a:	797b      	ldrb	r3, [r7, #5]
 800017c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <rgb_set+0x40>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20001b98 	.word	0x20001b98

08000194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000198:	f000 fa9c 	bl	80006d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019c:	f000 f834 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a0:	f000 f904 	bl	80003ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80001a4:	f000 f876 	bl	8000294 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001a8:	2100      	movs	r1, #0
 80001aa:	4810      	ldr	r0, [pc, #64]	; (80001ec <main+0x58>)
 80001ac:	f001 fa30 	bl	8001610 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001b0:	2104      	movs	r1, #4
 80001b2:	480e      	ldr	r0, [pc, #56]	; (80001ec <main+0x58>)
 80001b4:	f001 fa2c 	bl	8001610 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80001b8:	2108      	movs	r1, #8
 80001ba:	480c      	ldr	r0, [pc, #48]	; (80001ec <main+0x58>)
 80001bc:	f001 fa28 	bl	8001610 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001c0:	f002 f87e 	bl	80022c0 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001c4:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <main+0x5c>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	480a      	ldr	r0, [pc, #40]	; (80001f4 <main+0x60>)
 80001ca:	f002 f8df 	bl	800238c <osThreadNew>
 80001ce:	4602      	mov	r2, r0
 80001d0:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <main+0x64>)
 80001d2:	601a      	str	r2, [r3, #0]

  /* creation of my_RGB_LED_Task */
  my_RGB_LED_TaskHandle = osThreadNew(Start_RGB_LED_Task, NULL, &my_RGB_LED_Task_attributes);
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <main+0x68>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	4809      	ldr	r0, [pc, #36]	; (8000200 <main+0x6c>)
 80001da:	f002 f8d7 	bl	800238c <osThreadNew>
 80001de:	4602      	mov	r2, r0
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <main+0x70>)
 80001e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001e4:	f002 f89e 	bl	8002324 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80001e8:	e7fe      	b.n	80001e8 <main+0x54>
 80001ea:	bf00      	nop
 80001ec:	20001b98 	.word	0x20001b98
 80001f0:	08004cbc 	.word	0x08004cbc
 80001f4:	08000409 	.word	0x08000409
 80001f8:	20001990 	.word	0x20001990
 80001fc:	08004ce0 	.word	0x08004ce0
 8000200:	08000419 	.word	0x08000419
 8000204:	20001b94 	.word	0x20001b94

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f004 fd17 	bl	8004c4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022a:	2301      	movs	r3, #1
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000232:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fcab 	bl	8000bac <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800025c:	f000 f90e 	bl	800047c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f000 ff16 	bl	80010ac <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000286:	f000 f8f9 	bl	800047c <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08e      	sub	sp, #56	; 0x38
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800029a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a8:	f107 0320 	add.w	r3, r7, #32
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]
 80002c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c4:	4b38      	ldr	r3, [pc, #224]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1107-1;
 80002cc:	4b36      	ldr	r3, [pc, #216]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002ce:	f240 4252 	movw	r2, #1106	; 0x452
 80002d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d4:	4b34      	ldr	r3, [pc, #208]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 80002da:	4b33      	ldr	r3, [pc, #204]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002dc:	22fe      	movs	r2, #254	; 0xfe
 80002de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e0:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ec:	482e      	ldr	r0, [pc, #184]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002ee:	f001 f895 	bl	800141c <HAL_TIM_Base_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80002f8:	f000 f8c0 	bl	800047c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000300:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000306:	4619      	mov	r1, r3
 8000308:	4827      	ldr	r0, [pc, #156]	; (80003a8 <MX_TIM2_Init+0x114>)
 800030a:	f001 fbe9 	bl	8001ae0 <HAL_TIM_ConfigClockSource>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000314:	f000 f8b2 	bl	800047c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000318:	4823      	ldr	r0, [pc, #140]	; (80003a8 <MX_TIM2_Init+0x114>)
 800031a:	f001 f921 	bl	8001560 <HAL_TIM_PWM_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000324:	f000 f8aa 	bl	800047c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000328:	2300      	movs	r3, #0
 800032a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032c:	2300      	movs	r3, #0
 800032e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000330:	f107 0320 	add.w	r3, r7, #32
 8000334:	4619      	mov	r1, r3
 8000336:	481c      	ldr	r0, [pc, #112]	; (80003a8 <MX_TIM2_Init+0x114>)
 8000338:	f001 ff52 	bl	80021e0 <HAL_TIMEx_MasterConfigSynchronization>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000342:	f000 f89b 	bl	800047c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000346:	2360      	movs	r3, #96	; 0x60
 8000348:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	4619      	mov	r1, r3
 800035c:	4812      	ldr	r0, [pc, #72]	; (80003a8 <MX_TIM2_Init+0x114>)
 800035e:	f001 fb01 	bl	8001964 <HAL_TIM_PWM_ConfigChannel>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000368:	f000 f888 	bl	800047c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2204      	movs	r2, #4
 8000370:	4619      	mov	r1, r3
 8000372:	480d      	ldr	r0, [pc, #52]	; (80003a8 <MX_TIM2_Init+0x114>)
 8000374:	f001 faf6 	bl	8001964 <HAL_TIM_PWM_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800037e:	f000 f87d 	bl	800047c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2208      	movs	r2, #8
 8000386:	4619      	mov	r1, r3
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <MX_TIM2_Init+0x114>)
 800038a:	f001 faeb 	bl	8001964 <HAL_TIM_PWM_ConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000394:	f000 f872 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000398:	4803      	ldr	r0, [pc, #12]	; (80003a8 <MX_TIM2_Init+0x114>)
 800039a:	f000 f8c7 	bl	800052c <HAL_TIM_MspPostInit>

}
 800039e:	bf00      	nop
 80003a0:	3738      	adds	r7, #56	; 0x38
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20001b98 	.word	0x20001b98

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_GPIO_Init+0x58>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a13      	ldr	r2, [pc, #76]	; (8000404 <MX_GPIO_Init+0x58>)
 80003b8:	f043 0320 	orr.w	r3, r3, #32
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_GPIO_Init+0x58>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0320 	and.w	r3, r3, #32
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_GPIO_Init+0x58>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <MX_GPIO_Init+0x58>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_GPIO_Init+0x58>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f003 0304 	and.w	r3, r3, #4
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_GPIO_Init+0x58>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a07      	ldr	r2, [pc, #28]	; (8000404 <MX_GPIO_Init+0x58>)
 80003e8:	f043 0308 	orr.w	r3, r3, #8
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b05      	ldr	r3, [pc, #20]	; (8000404 <MX_GPIO_Init+0x58>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0308 	and.w	r3, r3, #8
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000410:	2001      	movs	r0, #1
 8000412:	f002 f865 	bl	80024e0 <osDelay>
 8000416:	e7fb      	b.n	8000410 <StartDefaultTask+0x8>

08000418 <Start_RGB_LED_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RGB_LED_Task */
void Start_RGB_LED_Task(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RGB_LED_Task */
	/* Infinite loop */
	for (;;) {
		rgb_set(255, 0, 0);   // red only
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	20ff      	movs	r0, #255	; 0xff
 8000426:	f7ff fe93 	bl	8000150 <rgb_set>
		osDelay(3000);
 800042a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800042e:	f002 f857 	bl	80024e0 <osDelay>

		rgb_set(0, 255, 0);   // green only
 8000432:	2200      	movs	r2, #0
 8000434:	21ff      	movs	r1, #255	; 0xff
 8000436:	2000      	movs	r0, #0
 8000438:	f7ff fe8a 	bl	8000150 <rgb_set>
		osDelay(3000);
 800043c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000440:	f002 f84e 	bl	80024e0 <osDelay>

		rgb_set(0, 0, 255);   // blue only
 8000444:	22ff      	movs	r2, #255	; 0xff
 8000446:	2100      	movs	r1, #0
 8000448:	2000      	movs	r0, #0
 800044a:	f7ff fe81 	bl	8000150 <rgb_set>
		osDelay(3000);
 800044e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000452:	f002 f845 	bl	80024e0 <osDelay>
		rgb_set(255, 0, 0);   // red only
 8000456:	e7e3      	b.n	8000420 <Start_RGB_LED_Task+0x8>

08000458 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d101      	bne.n	800046e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800046a:	f000 f949 	bl	8000700 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40000800 	.word	0x40000800

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000482:	e7fe      	b.n	8000482 <Error_Handler+0x6>

08000484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <HAL_MspInit+0x68>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a17      	ldr	r2, [pc, #92]	; (80004ec <HAL_MspInit+0x68>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <HAL_MspInit+0x68>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <HAL_MspInit+0x68>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a11      	ldr	r2, [pc, #68]	; (80004ec <HAL_MspInit+0x68>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x68>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	210f      	movs	r1, #15
 80004be:	f06f 0001 	mvn.w	r0, #1
 80004c2:	f000 f9ee 	bl	80008a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <HAL_MspInit+0x6c>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <HAL_MspInit+0x6c>)
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010000 	.word	0x40010000

080004f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000504:	d10b      	bne.n	800051e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_TIM_Base_MspInit+0x34>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_TIM_Base_MspInit+0x34>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_TIM_Base_MspInit+0x34>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800054a:	d117      	bne.n	800057c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <HAL_TIM_MspPostInit+0x58>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <HAL_TIM_MspPostInit+0x58>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_TIM_MspPostInit+0x58>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000564:	2307      	movs	r3, #7
 8000566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000568:	2302      	movs	r3, #2
 800056a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2302      	movs	r3, #2
 800056e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <HAL_TIM_MspPostInit+0x5c>)
 8000578:	f000 f9be 	bl	80008f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800057c:	bf00      	nop
 800057e:	3720      	adds	r7, #32
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800

0800058c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	201e      	movs	r0, #30
 80005a2:	f000 f97e 	bl	80008a2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005a6:	201e      	movs	r0, #30
 80005a8:	f000 f997 	bl	80008da <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <HAL_InitTick+0xa0>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	4a1e      	ldr	r2, [pc, #120]	; (800062c <HAL_InitTick+0xa0>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	61d3      	str	r3, [r2, #28]
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <HAL_InitTick+0xa0>)
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005c4:	f107 0210 	add.w	r2, r7, #16
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fed6 	bl	8001380 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005d4:	f000 fec0 	bl	8001358 <HAL_RCC_GetPCLK1Freq>
 80005d8:	4603      	mov	r3, r0
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <HAL_InitTick+0xa4>)
 80005e2:	fba2 2303 	umull	r2, r3, r2, r3
 80005e6:	0c9b      	lsrs	r3, r3, #18
 80005e8:	3b01      	subs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <HAL_InitTick+0xa8>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <HAL_InitTick+0xac>)
 80005f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_InitTick+0xa8>)
 80005f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005f8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_InitTick+0xa8>)
 80005fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fe:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_InitTick+0xa8>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <HAL_InitTick+0xa8>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_InitTick+0xa8>)
 800060e:	f000 ff05 	bl	800141c <HAL_TIM_Base_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d104      	bne.n	8000622 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <HAL_InitTick+0xa8>)
 800061a:	f000 ff4f 	bl	80014bc <HAL_TIM_Base_Start_IT>
 800061e:	4603      	mov	r3, r0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3730      	adds	r7, #48	; 0x30
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	431bde83 	.word	0x431bde83
 8000634:	20001be0 	.word	0x20001be0
 8000638:	40000800 	.word	0x40000800

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <NMI_Handler+0x4>

08000642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <MemManage_Handler+0x4>

0800064e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <BusFault_Handler+0x4>

08000654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <UsageFault_Handler+0x4>

0800065a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
	...

08000668 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <TIM4_IRQHandler+0x10>)
 800066e:	f001 f871 	bl	8001754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20001be0 	.word	0x20001be0

0800067c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000688:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800068a:	e003      	b.n	8000694 <LoopCopyDataInit>

0800068c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800068e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000690:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000692:	3104      	adds	r1, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000698:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800069a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800069c:	d3f6      	bcc.n	800068c <CopyDataInit>
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006a0:	e002      	b.n	80006a8 <LoopFillZerobss>

080006a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006a4:	f842 3b04 	str.w	r3, [r2], #4

080006a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006ac:	d3f9      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ae:	f7ff ffe5 	bl	800067c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b2:	f004 fa9b 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fd6d 	bl	8000194 <main>
  bx lr
 80006ba:	4770      	bx	lr
  ldr r3, =_sidata
 80006bc:	08004d24 	.word	0x08004d24
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006c4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80006c8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80006cc:	20001c6c 	.word	0x20001c6c

080006d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_2_IRQHandler>
	...

080006d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_Init+0x28>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_Init+0x28>)
 80006de:	f043 0310 	orr.w	r3, r3, #16
 80006e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 f8d1 	bl	800088c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff ff4e 	bl	800058c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f0:	f7ff fec8 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40022000 	.word	0x40022000

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_IncTick+0x1c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_IncTick+0x20>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4413      	add	r3, r2
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <HAL_IncTick+0x20>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000008 	.word	0x20000008
 8000720:	20001c28 	.word	0x20001c28

08000724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;
 8000728:	4b02      	ldr	r3, [pc, #8]	; (8000734 <HAL_GetTick+0x10>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20001c28 	.word	0x20001c28

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db0b      	blt.n	80007c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 021f 	and.w	r2, r3, #31
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <__NVIC_EnableIRQ+0x34>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	095b      	lsrs	r3, r3, #5
 80007bc:	2001      	movs	r0, #1
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff ff4f 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b4:	f7ff ff64 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	6978      	ldr	r0, [r7, #20]
 80008c0:	f7ff ffb2 	bl	8000828 <NVIC_EncodePriority>
 80008c4:	4602      	mov	r2, r0
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff81 	bl	80007d4 <__NVIC_SetPriority>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff57 	bl	800079c <__NVIC_EnableIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b08b      	sub	sp, #44	; 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090a:	e127      	b.n	8000b5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800090c:	2201      	movs	r2, #1
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	429a      	cmp	r2, r3
 8000926:	f040 8116 	bne.w	8000b56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b12      	cmp	r3, #18
 8000930:	d034      	beq.n	800099c <HAL_GPIO_Init+0xa4>
 8000932:	2b12      	cmp	r3, #18
 8000934:	d80d      	bhi.n	8000952 <HAL_GPIO_Init+0x5a>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d02b      	beq.n	8000992 <HAL_GPIO_Init+0x9a>
 800093a:	2b02      	cmp	r3, #2
 800093c:	d804      	bhi.n	8000948 <HAL_GPIO_Init+0x50>
 800093e:	2b00      	cmp	r3, #0
 8000940:	d031      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000942:	2b01      	cmp	r3, #1
 8000944:	d01c      	beq.n	8000980 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000946:	e048      	b.n	80009da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000948:	2b03      	cmp	r3, #3
 800094a:	d043      	beq.n	80009d4 <HAL_GPIO_Init+0xdc>
 800094c:	2b11      	cmp	r3, #17
 800094e:	d01b      	beq.n	8000988 <HAL_GPIO_Init+0x90>
          break;
 8000950:	e043      	b.n	80009da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000952:	4a89      	ldr	r2, [pc, #548]	; (8000b78 <HAL_GPIO_Init+0x280>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d026      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000958:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <HAL_GPIO_Init+0x280>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d806      	bhi.n	800096c <HAL_GPIO_Init+0x74>
 800095e:	4a87      	ldr	r2, [pc, #540]	; (8000b7c <HAL_GPIO_Init+0x284>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d020      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000964:	4a86      	ldr	r2, [pc, #536]	; (8000b80 <HAL_GPIO_Init+0x288>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01d      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
          break;
 800096a:	e036      	b.n	80009da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800096c:	4a85      	ldr	r2, [pc, #532]	; (8000b84 <HAL_GPIO_Init+0x28c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d019      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000972:	4a85      	ldr	r2, [pc, #532]	; (8000b88 <HAL_GPIO_Init+0x290>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d016      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
 8000978:	4a84      	ldr	r2, [pc, #528]	; (8000b8c <HAL_GPIO_Init+0x294>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d013      	beq.n	80009a6 <HAL_GPIO_Init+0xae>
          break;
 800097e:	e02c      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e028      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	3304      	adds	r3, #4
 800098e:	623b      	str	r3, [r7, #32]
          break;
 8000990:	e023      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	3308      	adds	r3, #8
 8000998:	623b      	str	r3, [r7, #32]
          break;
 800099a:	e01e      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	330c      	adds	r3, #12
 80009a2:	623b      	str	r3, [r7, #32]
          break;
 80009a4:	e019      	b.n	80009da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ae:	2304      	movs	r3, #4
 80009b0:	623b      	str	r3, [r7, #32]
          break;
 80009b2:	e012      	b.n	80009da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d105      	bne.n	80009c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009bc:	2308      	movs	r3, #8
 80009be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	611a      	str	r2, [r3, #16]
          break;
 80009c6:	e008      	b.n	80009da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c8:	2308      	movs	r3, #8
 80009ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69fa      	ldr	r2, [r7, #28]
 80009d0:	615a      	str	r2, [r3, #20]
          break;
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	2bff      	cmp	r3, #255	; 0xff
 80009de:	d801      	bhi.n	80009e4 <HAL_GPIO_Init+0xec>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	e001      	b.n	80009e8 <HAL_GPIO_Init+0xf0>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3304      	adds	r3, #4
 80009e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	2bff      	cmp	r3, #255	; 0xff
 80009ee:	d802      	bhi.n	80009f6 <HAL_GPIO_Init+0xfe>
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	e002      	b.n	80009fc <HAL_GPIO_Init+0x104>
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	3b08      	subs	r3, #8
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	210f      	movs	r1, #15
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	6a39      	ldr	r1, [r7, #32]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	431a      	orrs	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 8096 	beq.w	8000b56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2a:	4b59      	ldr	r3, [pc, #356]	; (8000b90 <HAL_GPIO_Init+0x298>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a58      	ldr	r2, [pc, #352]	; (8000b90 <HAL_GPIO_Init+0x298>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <HAL_GPIO_Init+0x298>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a42:	4a54      	ldr	r2, [pc, #336]	; (8000b94 <HAL_GPIO_Init+0x29c>)
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3302      	adds	r3, #2
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	220f      	movs	r2, #15
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4013      	ands	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4b      	ldr	r2, [pc, #300]	; (8000b98 <HAL_GPIO_Init+0x2a0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0x19e>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a4a      	ldr	r2, [pc, #296]	; (8000b9c <HAL_GPIO_Init+0x2a4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00d      	beq.n	8000a92 <HAL_GPIO_Init+0x19a>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a49      	ldr	r2, [pc, #292]	; (8000ba0 <HAL_GPIO_Init+0x2a8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d007      	beq.n	8000a8e <HAL_GPIO_Init+0x196>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a48      	ldr	r2, [pc, #288]	; (8000ba4 <HAL_GPIO_Init+0x2ac>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_GPIO_Init+0x192>
 8000a86:	2303      	movs	r3, #3
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	e004      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e002      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x1a0>
 8000a96:	2300      	movs	r3, #0
 8000a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9a:	f002 0203 	and.w	r2, r2, #3
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	4093      	lsls	r3, r2
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa8:	493a      	ldr	r1, [pc, #232]	; (8000b94 <HAL_GPIO_Init+0x29c>)
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4938      	ldr	r1, [pc, #224]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4933      	ldr	r1, [pc, #204]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	492e      	ldr	r1, [pc, #184]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	604b      	str	r3, [r1, #4]
 8000af6:	e006      	b.n	8000b06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	4929      	ldr	r1, [pc, #164]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	4924      	ldr	r1, [pc, #144]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	608b      	str	r3, [r1, #8]
 8000b1e:	e006      	b.n	8000b2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	491f      	ldr	r1, [pc, #124]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	68da      	ldr	r2, [r3, #12]
 8000b3e:	491a      	ldr	r1, [pc, #104]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60cb      	str	r3, [r1, #12]
 8000b46:	e006      	b.n	8000b56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4915      	ldr	r1, [pc, #84]	; (8000ba8 <HAL_GPIO_Init+0x2b0>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	fa22 f303 	lsr.w	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f47f aed0 	bne.w	800090c <HAL_GPIO_Init+0x14>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	372c      	adds	r7, #44	; 0x2c
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	10210000 	.word	0x10210000
 8000b7c:	10110000 	.word	0x10110000
 8000b80:	10120000 	.word	0x10120000
 8000b84:	10310000 	.word	0x10310000
 8000b88:	10320000 	.word	0x10320000
 8000b8c:	10220000 	.word	0x10220000
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010000 	.word	0x40010000
 8000b98:	40010800 	.word	0x40010800
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	40011000 	.word	0x40011000
 8000ba4:	40011400 	.word	0x40011400
 8000ba8:	40010400 	.word	0x40010400

08000bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e26c      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8087 	beq.w	8000cda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bcc:	4b92      	ldr	r3, [pc, #584]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 030c 	and.w	r3, r3, #12
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d00c      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd8:	4b8f      	ldr	r3, [pc, #572]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	d112      	bne.n	8000c0a <HAL_RCC_OscConfig+0x5e>
 8000be4:	4b8c      	ldr	r3, [pc, #560]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d10b      	bne.n	8000c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf2:	4b89      	ldr	r3, [pc, #548]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d06c      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x12c>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d168      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e246      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c12:	d106      	bne.n	8000c22 <HAL_RCC_OscConfig+0x76>
 8000c14:	4b80      	ldr	r3, [pc, #512]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a7f      	ldr	r2, [pc, #508]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e02e      	b.n	8000c80 <HAL_RCC_OscConfig+0xd4>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0x98>
 8000c2a:	4b7b      	ldr	r3, [pc, #492]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a7a      	ldr	r2, [pc, #488]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b78      	ldr	r3, [pc, #480]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a77      	ldr	r2, [pc, #476]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e01d      	b.n	8000c80 <HAL_RCC_OscConfig+0xd4>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0xbc>
 8000c4e:	4b72      	ldr	r3, [pc, #456]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a71      	ldr	r2, [pc, #452]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a6e      	ldr	r2, [pc, #440]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e00b      	b.n	8000c80 <HAL_RCC_OscConfig+0xd4>
 8000c68:	4b6b      	ldr	r3, [pc, #428]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a6a      	ldr	r2, [pc, #424]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b68      	ldr	r3, [pc, #416]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a67      	ldr	r2, [pc, #412]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fd4c 	bl	8000724 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fd48 	bl	8000724 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1fa      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	4b5d      	ldr	r3, [pc, #372]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0xe4>
 8000cae:	e014      	b.n	8000cda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fd38 	bl	8000724 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fd34 	bl	8000724 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e1e6      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x10c>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d063      	beq.n	8000dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cf2:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d11c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x18c>
 8000cfe:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d116      	bne.n	8000d38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d005      	beq.n	8000d22 <HAL_RCC_OscConfig+0x176>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e1ba      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4939      	ldr	r1, [pc, #228]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	e03a      	b.n	8000dae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d020      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d40:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d46:	f7ff fced 	bl	8000724 <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fce9 	bl	8000724 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e19b      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4927      	ldr	r1, [pc, #156]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e015      	b.n	8000dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fccc 	bl	8000724 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fcc8 	bl	8000724 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e17a      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d03a      	beq.n	8000e30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d019      	beq.n	8000df6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_RCC_OscConfig+0x274>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fcac 	bl	8000724 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fca8 	bl	8000724 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e15a      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 faf6 	bl	80013e0 <RCC_Delay>
 8000df4:	e01c      	b.n	8000e30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_RCC_OscConfig+0x274>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fc92 	bl	8000724 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e02:	e00f      	b.n	8000e24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e04:	f7ff fc8e 	bl	8000724 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d908      	bls.n	8000e24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e140      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	42420000 	.word	0x42420000
 8000e20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e24:	4b9e      	ldr	r3, [pc, #632]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e9      	bne.n	8000e04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80a6 	beq.w	8000f8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e42:	4b97      	ldr	r3, [pc, #604]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10d      	bne.n	8000e6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b94      	ldr	r3, [pc, #592]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a93      	ldr	r2, [pc, #588]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b91      	ldr	r3, [pc, #580]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e66:	2301      	movs	r3, #1
 8000e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6a:	4b8e      	ldr	r3, [pc, #568]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d118      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e76:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a8a      	ldr	r2, [pc, #552]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e82:	f7ff fc4f 	bl	8000724 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8a:	f7ff fc4b 	bl	8000724 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b64      	cmp	r3, #100	; 0x64
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e0fd      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9c:	4b81      	ldr	r3, [pc, #516]	; (80010a4 <HAL_RCC_OscConfig+0x4f8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d106      	bne.n	8000ebe <HAL_RCC_OscConfig+0x312>
 8000eb0:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4a7a      	ldr	r2, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6213      	str	r3, [r2, #32]
 8000ebc:	e02d      	b.n	8000f1a <HAL_RCC_OscConfig+0x36e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x334>
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	4a75      	ldr	r2, [pc, #468]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	6213      	str	r3, [r2, #32]
 8000ed2:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	4a72      	ldr	r2, [pc, #456]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	f023 0304 	bic.w	r3, r3, #4
 8000edc:	6213      	str	r3, [r2, #32]
 8000ede:	e01c      	b.n	8000f1a <HAL_RCC_OscConfig+0x36e>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	d10c      	bne.n	8000f02 <HAL_RCC_OscConfig+0x356>
 8000ee8:	4b6d      	ldr	r3, [pc, #436]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4a6c      	ldr	r2, [pc, #432]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6213      	str	r3, [r2, #32]
 8000ef4:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a69      	ldr	r2, [pc, #420]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6213      	str	r3, [r2, #32]
 8000f00:	e00b      	b.n	8000f1a <HAL_RCC_OscConfig+0x36e>
 8000f02:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a66      	ldr	r2, [pc, #408]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	6213      	str	r3, [r2, #32]
 8000f0e:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a63      	ldr	r2, [pc, #396]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	f023 0304 	bic.w	r3, r3, #4
 8000f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d015      	beq.n	8000f4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fbff 	bl	8000724 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f28:	e00a      	b.n	8000f40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fbfb 	bl	8000724 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e0ab      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f40:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0ee      	beq.n	8000f2a <HAL_RCC_OscConfig+0x37e>
 8000f4c:	e014      	b.n	8000f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fbe9 	bl	8000724 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	e00a      	b.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f56:	f7ff fbe5 	bl	8000724 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e095      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6c:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1ee      	bne.n	8000f56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d105      	bne.n	8000f8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f7e:	4b48      	ldr	r3, [pc, #288]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8081 	beq.w	8001096 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f94:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d061      	beq.n	8001064 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d146      	bne.n	8001036 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_RCC_OscConfig+0x4fc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fbb9 	bl	8000724 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fbb5 	bl	8000724 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e067      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f0      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d108      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	492d      	ldr	r1, [pc, #180]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a19      	ldr	r1, [r3, #32]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	430b      	orrs	r3, r1
 8001002:	4927      	ldr	r1, [pc, #156]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_RCC_OscConfig+0x4fc>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fb89 	bl	8000724 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fb85 	bl	8000724 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e037      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x46a>
 8001034:	e02f      	b.n	8001096 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_RCC_OscConfig+0x4fc>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fb72 	bl	8000724 <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001044:	f7ff fb6e 	bl	8000724 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e020      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x498>
 8001062:	e018      	b.n	8001096 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e013      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	429a      	cmp	r2, r3
 8001082:	d106      	bne.n	8001092 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108e:	429a      	cmp	r2, r3
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40007000 	.word	0x40007000
 80010a8:	42420060 	.word	0x42420060

080010ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0d0      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c0:	4b6a      	ldr	r3, [pc, #424]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d910      	bls.n	80010f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ce:	4b67      	ldr	r3, [pc, #412]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 0207 	bic.w	r2, r3, #7
 80010d6:	4965      	ldr	r1, [pc, #404]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d001      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0b8      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001108:	4b59      	ldr	r3, [pc, #356]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001120:	4b53      	ldr	r3, [pc, #332]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a52      	ldr	r2, [pc, #328]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800112a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112c:	4b50      	ldr	r3, [pc, #320]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	494d      	ldr	r1, [pc, #308]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d040      	beq.n	80011cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d107      	bne.n	8001162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d115      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e07f      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e073      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e06b      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f023 0203 	bic.w	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4936      	ldr	r1, [pc, #216]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800119c:	f7ff fac2 	bl	8000724 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	e00a      	b.n	80011ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f7ff fabe 	bl	8000724 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e053      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 020c 	and.w	r2, r3, #12
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d1eb      	bne.n	80011a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d210      	bcs.n	80011fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0207 	bic.w	r2, r3, #7
 80011e2:	4922      	ldr	r1, [pc, #136]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e032      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4916      	ldr	r1, [pc, #88]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800123a:	f000 f821 	bl	8001280 <HAL_RCC_GetSysClockFreq>
 800123e:	4601      	mov	r1, r0
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_RCC_ClockConfig+0x1c8>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	fa21 f303 	lsr.w	r3, r1, r3
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_RCC_ClockConfig+0x1cc>)
 8001254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_RCC_ClockConfig+0x1d0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f996 	bl	800058c <HAL_InitTick>

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000
 8001270:	40021000 	.word	0x40021000
 8001274:	08004d04 	.word	0x08004d04
 8001278:	20000000 	.word	0x20000000
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001280:	b490      	push	{r4, r7}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001288:	1d3c      	adds	r4, r7, #4
 800128a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d002      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x40>
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d003      	beq.n	80012c6 <HAL_RCC_GetSysClockFreq+0x46>
 80012be:	e02d      	b.n	800131c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012c2:	623b      	str	r3, [r7, #32]
      break;
 80012c4:	e02d      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012d2:	4413      	add	r3, r2
 80012d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	0c5b      	lsrs	r3, r3, #17
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012f2:	4413      	add	r3, r2
 80012f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012fe:	fb02 f203 	mul.w	r2, r2, r3
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
 800130a:	e004      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	623b      	str	r3, [r7, #32]
      break;
 800131a:	e002      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_RCC_GetSysClockFreq+0xbc>)
 800131e:	623b      	str	r3, [r7, #32]
      break;
 8001320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001322:	6a3b      	ldr	r3, [r7, #32]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bc90      	pop	{r4, r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	08004c90 	.word	0x08004c90
 8001334:	08004ca0 	.word	0x08004ca0
 8001338:	40021000 	.word	0x40021000
 800133c:	007a1200 	.word	0x007a1200
 8001340:	003d0900 	.word	0x003d0900

08001344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001348:	4b02      	ldr	r3, [pc, #8]	; (8001354 <HAL_RCC_GetHCLKFreq+0x10>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000000 	.word	0x20000000

08001358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800135c:	f7ff fff2 	bl	8001344 <HAL_RCC_GetHCLKFreq>
 8001360:	4601      	mov	r1, r0
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	0a1b      	lsrs	r3, r3, #8
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4a03      	ldr	r2, [pc, #12]	; (800137c <HAL_RCC_GetPCLK1Freq+0x24>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	08004d14 	.word	0x08004d14

08001380 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	220f      	movs	r2, #15
 800138e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_RCC_GetClockConfig+0x58>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0203 	and.w	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_RCC_GetClockConfig+0x58>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_GetClockConfig+0x58>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_RCC_GetClockConfig+0x58>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_RCC_GetClockConfig+0x5c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0207 	and.w	r2, r3, #7
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40022000 	.word	0x40022000

080013e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <RCC_Delay+0x34>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <RCC_Delay+0x38>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0a5b      	lsrs	r3, r3, #9
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013fc:	bf00      	nop
  }
  while (Delay --);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	60fa      	str	r2, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f9      	bne.n	80013fc <RCC_Delay+0x1c>
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000000 	.word	0x20000000
 8001418:	10624dd3 	.word	0x10624dd3

0800141c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e041      	b.n	80014b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff f856 	bl	80004f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2202      	movs	r2, #2
 800144c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3304      	adds	r3, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f000 fc1c 	bl	8001c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d001      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e03a      	b.n	800154a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0201 	orr.w	r2, r2, #1
 80014ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_TIM_Base_Start_IT+0x98>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00e      	beq.n	8001514 <HAL_TIM_Base_Start_IT+0x58>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014fe:	d009      	beq.n	8001514 <HAL_TIM_Base_Start_IT+0x58>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_TIM_Base_Start_IT+0x9c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d004      	beq.n	8001514 <HAL_TIM_Base_Start_IT+0x58>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <HAL_TIM_Base_Start_IT+0xa0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d111      	bne.n	8001538 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d010      	beq.n	8001548 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0201 	orr.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001536:	e007      	b.n	8001548 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40012c00 	.word	0x40012c00
 8001558:	40000400 	.word	0x40000400
 800155c:	40000800 	.word	0x40000800

08001560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e041      	b.n	80015f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f839 	bl	80015fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f000 fb7a 	bl	8001c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_TIM_PWM_Start+0x24>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	e022      	b.n	800167a <HAL_TIM_PWM_Start+0x6a>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d109      	bne.n	800164e <HAL_TIM_PWM_Start+0x3e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b01      	cmp	r3, #1
 8001644:	bf14      	ite	ne
 8001646:	2301      	movne	r3, #1
 8001648:	2300      	moveq	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	e015      	b.n	800167a <HAL_TIM_PWM_Start+0x6a>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b08      	cmp	r3, #8
 8001652:	d109      	bne.n	8001668 <HAL_TIM_PWM_Start+0x58>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	e008      	b.n	800167a <HAL_TIM_PWM_Start+0x6a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b01      	cmp	r3, #1
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e05e      	b.n	8001740 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d104      	bne.n	8001692 <HAL_TIM_PWM_Start+0x82>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001690:	e013      	b.n	80016ba <HAL_TIM_PWM_Start+0xaa>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d104      	bne.n	80016a2 <HAL_TIM_PWM_Start+0x92>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016a0:	e00b      	b.n	80016ba <HAL_TIM_PWM_Start+0xaa>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d104      	bne.n	80016b2 <HAL_TIM_PWM_Start+0xa2>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016b0:	e003      	b.n	80016ba <HAL_TIM_PWM_Start+0xaa>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fd68 	bl	8002198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_TIM_PWM_Start+0x138>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d107      	bne.n	80016e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_TIM_PWM_Start+0x138>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d00e      	beq.n	800170a <HAL_TIM_PWM_Start+0xfa>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f4:	d009      	beq.n	800170a <HAL_TIM_PWM_Start+0xfa>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_TIM_PWM_Start+0x13c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d004      	beq.n	800170a <HAL_TIM_PWM_Start+0xfa>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <HAL_TIM_PWM_Start+0x140>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d111      	bne.n	800172e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b06      	cmp	r3, #6
 800171a:	d010      	beq.n	800173e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800172c:	e007      	b.n	800173e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40012c00 	.word	0x40012c00
 800174c:	40000400 	.word	0x40000400
 8001750:	40000800 	.word	0x40000800

08001754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d122      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b02      	cmp	r3, #2
 8001776:	d11b      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f06f 0202 	mvn.w	r2, #2
 8001780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fa62 	bl	8001c60 <HAL_TIM_IC_CaptureCallback>
 800179c:	e005      	b.n	80017aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 fa55 	bl	8001c4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fa64 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d122      	bne.n	8001804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d11b      	bne.n	8001804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0204 	mvn.w	r2, #4
 80017d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fa38 	bl	8001c60 <HAL_TIM_IC_CaptureCallback>
 80017f0:	e005      	b.n	80017fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fa2b 	bl	8001c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fa3a 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b08      	cmp	r3, #8
 8001810:	d122      	bne.n	8001858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b08      	cmp	r3, #8
 800181e:	d11b      	bne.n	8001858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0208 	mvn.w	r2, #8
 8001828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fa0e 	bl	8001c60 <HAL_TIM_IC_CaptureCallback>
 8001844:	e005      	b.n	8001852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fa01 	bl	8001c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fa10 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b10      	cmp	r3, #16
 8001864:	d122      	bne.n	80018ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b10      	cmp	r3, #16
 8001872:	d11b      	bne.n	80018ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0210 	mvn.w	r2, #16
 800187c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2208      	movs	r2, #8
 8001882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f9e4 	bl	8001c60 <HAL_TIM_IC_CaptureCallback>
 8001898:	e005      	b.n	80018a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f9d7 	bl	8001c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f9e6 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d10e      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0201 	mvn.w	r2, #1
 80018d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7fe fdc0 	bl	8000458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b80      	cmp	r3, #128	; 0x80
 80018e4:	d10e      	bne.n	8001904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	2b80      	cmp	r3, #128	; 0x80
 80018f2:	d107      	bne.n	8001904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fcd5 	bl	80022ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d10e      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	2b40      	cmp	r3, #64	; 0x40
 800191e:	d107      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f9aa 	bl	8001c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b20      	cmp	r3, #32
 800193c:	d10e      	bne.n	800195c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b20      	cmp	r3, #32
 800194a:	d107      	bne.n	800195c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0220 	mvn.w	r2, #32
 8001954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fca0 	bl	800229c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800197a:	2302      	movs	r3, #2
 800197c:	e0ac      	b.n	8001ad8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	f200 809f 	bhi.w	8001acc <HAL_TIM_PWM_ConfigChannel+0x168>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	080019c9 	.word	0x080019c9
 8001998:	08001acd 	.word	0x08001acd
 800199c:	08001acd 	.word	0x08001acd
 80019a0:	08001acd 	.word	0x08001acd
 80019a4:	08001a09 	.word	0x08001a09
 80019a8:	08001acd 	.word	0x08001acd
 80019ac:	08001acd 	.word	0x08001acd
 80019b0:	08001acd 	.word	0x08001acd
 80019b4:	08001a4b 	.word	0x08001a4b
 80019b8:	08001acd 	.word	0x08001acd
 80019bc:	08001acd 	.word	0x08001acd
 80019c0:	08001acd 	.word	0x08001acd
 80019c4:	08001a8b 	.word	0x08001a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f9c4 	bl	8001d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0208 	orr.w	r2, r2, #8
 80019e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699a      	ldr	r2, [r3, #24]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0204 	bic.w	r2, r2, #4
 80019f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6999      	ldr	r1, [r3, #24]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	619a      	str	r2, [r3, #24]
      break;
 8001a06:	e062      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fa0a 	bl	8001e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6999      	ldr	r1, [r3, #24]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	021a      	lsls	r2, r3, #8
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	619a      	str	r2, [r3, #24]
      break;
 8001a48:	e041      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fa53 	bl	8001efc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0208 	orr.w	r2, r2, #8
 8001a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0204 	bic.w	r2, r2, #4
 8001a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69d9      	ldr	r1, [r3, #28]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	61da      	str	r2, [r3, #28]
      break;
 8001a88:	e021      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fa9d 	bl	8001fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69da      	ldr	r2, [r3, #28]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69d9      	ldr	r1, [r3, #28]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	021a      	lsls	r2, r3, #8
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	61da      	str	r2, [r3, #28]
      break;
 8001aca:	e000      	b.n	8001ace <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001acc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_TIM_ConfigClockSource+0x18>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e0a6      	b.n	8001c46 <HAL_TIM_ConfigClockSource+0x166>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d067      	beq.n	8001c00 <HAL_TIM_ConfigClockSource+0x120>
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d80b      	bhi.n	8001b4c <HAL_TIM_ConfigClockSource+0x6c>
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d073      	beq.n	8001c20 <HAL_TIM_ConfigClockSource+0x140>
 8001b38:	2b10      	cmp	r3, #16
 8001b3a:	d802      	bhi.n	8001b42 <HAL_TIM_ConfigClockSource+0x62>
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d06f      	beq.n	8001c20 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001b40:	e078      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d06c      	beq.n	8001c20 <HAL_TIM_ConfigClockSource+0x140>
 8001b46:	2b30      	cmp	r3, #48	; 0x30
 8001b48:	d06a      	beq.n	8001c20 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001b4a:	e073      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b4c:	2b70      	cmp	r3, #112	; 0x70
 8001b4e:	d00d      	beq.n	8001b6c <HAL_TIM_ConfigClockSource+0x8c>
 8001b50:	2b70      	cmp	r3, #112	; 0x70
 8001b52:	d804      	bhi.n	8001b5e <HAL_TIM_ConfigClockSource+0x7e>
 8001b54:	2b50      	cmp	r3, #80	; 0x50
 8001b56:	d033      	beq.n	8001bc0 <HAL_TIM_ConfigClockSource+0xe0>
 8001b58:	2b60      	cmp	r3, #96	; 0x60
 8001b5a:	d041      	beq.n	8001be0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001b5c:	e06a      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b62:	d066      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0x152>
 8001b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b68:	d017      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001b6a:	e063      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6899      	ldr	r1, [r3, #8]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f000 faed 	bl	800215a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]
      break;
 8001b98:	e04c      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6899      	ldr	r1, [r3, #8]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f000 fad6 	bl	800215a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bbc:	609a      	str	r2, [r3, #8]
      break;
 8001bbe:	e039      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f000 fa4d 	bl	800206c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2150      	movs	r1, #80	; 0x50
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 faa4 	bl	8002126 <TIM_ITRx_SetConfig>
      break;
 8001bde:	e029      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f000 fa6b 	bl	80020c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2160      	movs	r1, #96	; 0x60
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fa94 	bl	8002126 <TIM_ITRx_SetConfig>
      break;
 8001bfe:	e019      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f000 fa2d 	bl	800206c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fa84 	bl	8002126 <TIM_ITRx_SetConfig>
      break;
 8001c1e:	e009      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f000 fa7b 	bl	8002126 <TIM_ITRx_SetConfig>
        break;
 8001c30:	e000      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
	...

08001c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <TIM_Base_SetConfig+0xb8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00b      	beq.n	8001cc8 <TIM_Base_SetConfig+0x30>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb6:	d007      	beq.n	8001cc8 <TIM_Base_SetConfig+0x30>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <TIM_Base_SetConfig+0xbc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d003      	beq.n	8001cc8 <TIM_Base_SetConfig+0x30>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <TIM_Base_SetConfig+0xc0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d108      	bne.n	8001cda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <TIM_Base_SetConfig+0xb8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00b      	beq.n	8001cfa <TIM_Base_SetConfig+0x62>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce8:	d007      	beq.n	8001cfa <TIM_Base_SetConfig+0x62>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <TIM_Base_SetConfig+0xbc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d003      	beq.n	8001cfa <TIM_Base_SetConfig+0x62>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <TIM_Base_SetConfig+0xc0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d108      	bne.n	8001d0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <TIM_Base_SetConfig+0xb8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d103      	bne.n	8001d40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	615a      	str	r2, [r3, #20]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40000800 	.word	0x40000800

08001d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	f023 0201 	bic.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f023 0303 	bic.w	r3, r3, #3
 8001d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f023 0302 	bic.w	r3, r3, #2
 8001da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <TIM_OC1_SetConfig+0xc8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d10c      	bne.n	8001dd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f023 0308 	bic.w	r3, r3, #8
 8001dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <TIM_OC1_SetConfig+0xc8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d111      	bne.n	8001dfe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	621a      	str	r2, [r3, #32]
}
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40012c00 	.word	0x40012c00

08001e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	f023 0210 	bic.w	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f023 0320 	bic.w	r3, r3, #32
 8001e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <TIM_OC2_SetConfig+0xd0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d10d      	bne.n	8001ea4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <TIM_OC2_SetConfig+0xd0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d113      	bne.n	8001ed4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	621a      	str	r2, [r3, #32]
}
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	40012c00 	.word	0x40012c00

08001efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <TIM_OC3_SetConfig+0xd0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10d      	bne.n	8001f76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <TIM_OC3_SetConfig+0xd0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d113      	bne.n	8001fa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	621a      	str	r2, [r3, #32]
}
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40012c00 	.word	0x40012c00

08001fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800201a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	031b      	lsls	r3, r3, #12
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <TIM_OC4_SetConfig+0x98>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d109      	bne.n	8002044 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	019b      	lsls	r3, r3, #6
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	621a      	str	r2, [r3, #32]
}
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40012c00 	.word	0x40012c00

0800206c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f023 0201 	bic.w	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f023 030a 	bic.w	r3, r3, #10
 80020a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	621a      	str	r2, [r3, #32]
}
 80020be:	bf00      	nop
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f023 0210 	bic.w	r2, r3, #16
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	031b      	lsls	r3, r3, #12
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002104:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	621a      	str	r2, [r3, #32]
}
 800211c:	bf00      	nop
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	f043 0307 	orr.w	r3, r3, #7
 8002148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	609a      	str	r2, [r3, #8]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800215a:	b480      	push	{r7}
 800215c:	b087      	sub	sp, #28
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002174:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	021a      	lsls	r2, r3, #8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	431a      	orrs	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4313      	orrs	r3, r2
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	609a      	str	r2, [r3, #8]
}
 800218e:	bf00      	nop
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2201      	movs	r2, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	621a      	str	r2, [r3, #32]
}
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e046      	b.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a16      	ldr	r2, [pc, #88]	; (8002290 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00e      	beq.n	800225a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d009      	beq.n	800225a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d004      	beq.n	800225a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a10      	ldr	r2, [pc, #64]	; (8002298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10c      	bne.n	8002274 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4313      	orrs	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40012c00 	.word	0x40012c00
 8002294:	40000400 	.word	0x40000400
 8002298:	40000800 	.word	0x40000800

0800229c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022c6:	f3ef 8305 	mrs	r3, IPSR
 80022ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80022cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10f      	bne.n	80022f2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d2:	f3ef 8310 	mrs	r3, PRIMASK
 80022d6:	607b      	str	r3, [r7, #4]
  return(result);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <osKernelInitialize+0x32>
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <osKernelInitialize+0x60>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d109      	bne.n	80022fa <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022e6:	f3ef 8311 	mrs	r3, BASEPRI
 80022ea:	603b      	str	r3, [r7, #0]
  return(result);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80022f2:	f06f 0305 	mvn.w	r3, #5
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e00c      	b.n	8002314 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <osKernelInitialize+0x60>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <osKernelInitialize+0x60>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e002      	b.n	8002314 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002312:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	2000002c 	.word	0x2000002c

08002324 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800232a:	f3ef 8305 	mrs	r3, IPSR
 800232e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002330:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002336:	f3ef 8310 	mrs	r3, PRIMASK
 800233a:	607b      	str	r3, [r7, #4]
  return(result);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <osKernelStart+0x32>
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <osKernelStart+0x64>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d109      	bne.n	800235e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800234a:	f3ef 8311 	mrs	r3, BASEPRI
 800234e:	603b      	str	r3, [r7, #0]
  return(result);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002356:	f06f 0305 	mvn.w	r3, #5
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e00e      	b.n	800237c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <osKernelStart+0x64>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <osKernelStart+0x64>)
 8002368:	2202      	movs	r2, #2
 800236a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800236c:	f001 f864 	bl	8003438 <vTaskStartScheduler>
      stat = osOK;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e002      	b.n	800237c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800237a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000002c 	.word	0x2000002c

0800238c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b092      	sub	sp, #72	; 0x48
 8002390:	af04      	add	r7, sp, #16
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800239c:	f3ef 8305 	mrs	r3, IPSR
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 8094 	bne.w	80024d2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023aa:	f3ef 8310 	mrs	r3, PRIMASK
 80023ae:	623b      	str	r3, [r7, #32]
  return(result);
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 808d 	bne.w	80024d2 <osThreadNew+0x146>
 80023b8:	4b48      	ldr	r3, [pc, #288]	; (80024dc <osThreadNew+0x150>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d106      	bne.n	80023ce <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023c0:	f3ef 8311 	mrs	r3, BASEPRI
 80023c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 8082 	bne.w	80024d2 <osThreadNew+0x146>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d07e      	beq.n	80024d2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80023d8:	2318      	movs	r3, #24
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80023dc:	2300      	movs	r3, #0
 80023de:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80023e0:	f107 031b 	add.w	r3, r7, #27
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d045      	beq.n	800247e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <osThreadNew+0x74>
        name = attr->name;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <osThreadNew+0x9a>
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	2b38      	cmp	r3, #56	; 0x38
 8002418:	d805      	bhi.n	8002426 <osThreadNew+0x9a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <osThreadNew+0x9e>
        return (NULL);
 8002426:	2300      	movs	r3, #0
 8002428:	e054      	b.n	80024d4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00e      	beq.n	8002460 <osThreadNew+0xd4>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b5b      	cmp	r3, #91	; 0x5b
 8002448:	d90a      	bls.n	8002460 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <osThreadNew+0xd4>
        mem = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
 800245e:	e010      	b.n	8002482 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10c      	bne.n	8002482 <osThreadNew+0xf6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d108      	bne.n	8002482 <osThreadNew+0xf6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <osThreadNew+0xf6>
          mem = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
 800247c:	e001      	b.n	8002482 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	2b01      	cmp	r3, #1
 8002486:	d110      	bne.n	80024aa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002490:	9202      	str	r2, [sp, #8]
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fe02 	bl	80030a8 <xTaskCreateStatic>
 80024a4:	4603      	mov	r3, r0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e013      	b.n	80024d2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d110      	bne.n	80024d2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fe49 	bl	800315a <xTaskCreate>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <osThreadNew+0x146>
          hTask = NULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024d2:	697b      	ldr	r3, [r7, #20]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3738      	adds	r7, #56	; 0x38
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	2000002c 	.word	0x2000002c

080024e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024e8:	f3ef 8305 	mrs	r3, IPSR
 80024ec:	613b      	str	r3, [r7, #16]
  return(result);
 80024ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10f      	bne.n	8002514 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f4:	f3ef 8310 	mrs	r3, PRIMASK
 80024f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <osDelay+0x34>
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <osDelay+0x58>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d109      	bne.n	800251c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002508:	f3ef 8311 	mrs	r3, BASEPRI
 800250c:	60bb      	str	r3, [r7, #8]
  return(result);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <osDelay+0x3c>
    stat = osErrorISR;
 8002514:	f06f 0305 	mvn.w	r3, #5
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e007      	b.n	800252c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 ff52 	bl	80033d0 <vTaskDelay>
    }
  }

  return (stat);
 800252c:	697b      	ldr	r3, [r7, #20]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000002c 	.word	0x2000002c

0800253c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a06      	ldr	r2, [pc, #24]	; (8002564 <vApplicationGetIdleTaskMemory+0x28>)
 800254c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4a05      	ldr	r2, [pc, #20]	; (8002568 <vApplicationGetIdleTaskMemory+0x2c>)
 8002552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000030 	.word	0x20000030
 8002568:	2000008c 	.word	0x2000008c

0800256c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <vApplicationGetTimerTaskMemory+0x2c>)
 800257c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <vApplicationGetTimerTaskMemory+0x30>)
 8002582:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000028c 	.word	0x2000028c
 800259c:	200002e8 	.word	0x200002e8

080025a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f103 0208 	add.w	r2, r3, #8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f103 0208 	add.w	r2, r3, #8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f103 0208 	add.w	r2, r3, #8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	601a      	str	r2, [r3, #0]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002652:	d103      	bne.n	800265c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e00c      	b.n	8002676 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3308      	adds	r3, #8
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e002      	b.n	800266a <vListInsert+0x2e>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d2f6      	bcs.n	8002664 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	601a      	str	r2, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6892      	ldr	r2, [r2, #8]
 80026c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6852      	ldr	r2, [r2, #4]
 80026cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d103      	bne.n	80026e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
	...

08002700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	e7fe      	b.n	8002726 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002728:	f001 ff96 	bl	8004658 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	441a      	add	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	3b01      	subs	r3, #1
 800275a:	68f9      	ldr	r1, [r7, #12]
 800275c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	441a      	add	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	22ff      	movs	r2, #255	; 0xff
 800276c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d114      	bne.n	80027a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01a      	beq.n	80027bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3310      	adds	r3, #16
 800278a:	4618      	mov	r0, r3
 800278c:	f001 f8d8 	bl	8003940 <xTaskRemoveFromEventList>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d012      	beq.n	80027bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <xQueueGenericReset+0xcc>)
 8002798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	e009      	b.n	80027bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3310      	adds	r3, #16
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fef7 	bl	80025a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3324      	adds	r3, #36	; 0x24
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fef2 	bl	80025a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027bc:	f001 ff7a 	bl	80046b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027c0:	2301      	movs	r3, #1
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08e      	sub	sp, #56	; 0x38
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <xQueueGenericCreateStatic+0x28>
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f6:	e7fe      	b.n	80027f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <xQueueGenericCreateStatic+0x42>
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
 8002810:	e7fe      	b.n	8002810 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <xQueueGenericCreateStatic+0x4e>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <xQueueGenericCreateStatic+0x52>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <xQueueGenericCreateStatic+0x54>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <xQueueGenericCreateStatic+0x6c>
 8002828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	623b      	str	r3, [r7, #32]
 800283a:	e7fe      	b.n	800283a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <xQueueGenericCreateStatic+0x78>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <xQueueGenericCreateStatic+0x7c>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <xQueueGenericCreateStatic+0x7e>
 800284c:	2300      	movs	r3, #0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <xQueueGenericCreateStatic+0x96>
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	e7fe      	b.n	8002864 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002866:	2350      	movs	r3, #80	; 0x50
 8002868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b50      	cmp	r3, #80	; 0x50
 800286e:	d009      	beq.n	8002884 <xQueueGenericCreateStatic+0xb4>
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	e7fe      	b.n	8002882 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002896:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	4613      	mov	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f805 	bl	80028b4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3730      	adds	r7, #48	; 0x30
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e002      	b.n	80028d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028e2:	2101      	movs	r1, #1
 80028e4:	69b8      	ldr	r0, [r7, #24]
 80028e6:	f7ff ff0b 	bl	8002700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08e      	sub	sp, #56	; 0x38
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800290a:	2300      	movs	r3, #0
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <xQueueGenericSend+0x30>
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
 800292a:	e7fe      	b.n	800292a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <xQueueGenericSend+0x3e>
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <xQueueGenericSend+0x42>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <xQueueGenericSend+0x44>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <xQueueGenericSend+0x5c>
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	e7fe      	b.n	8002956 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d103      	bne.n	8002966 <xQueueGenericSend+0x6a>
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <xQueueGenericSend+0x6e>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <xQueueGenericSend+0x70>
 800296a:	2300      	movs	r3, #0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <xQueueGenericSend+0x88>
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	e7fe      	b.n	8002982 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002984:	f001 f996 	bl	8003cb4 <xTaskGetSchedulerState>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <xQueueGenericSend+0x98>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <xQueueGenericSend+0x9c>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <xQueueGenericSend+0x9e>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <xQueueGenericSend+0xb6>
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029b2:	f001 fe51 	bl	8004658 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <xQueueGenericSend+0xcc>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d129      	bne.n	8002a1c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ce:	f000 f9ff 	bl	8002dd0 <prvCopyDataToQueue>
 80029d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d010      	beq.n	80029fe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	3324      	adds	r3, #36	; 0x24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 ffad 	bl	8003940 <xTaskRemoveFromEventList>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029ec:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <xQueueGenericSend+0x1f0>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	e00a      	b.n	8002a14 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a04:	4b39      	ldr	r3, [pc, #228]	; (8002aec <xQueueGenericSend+0x1f0>)
 8002a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a14:	f001 fe4e 	bl	80046b4 <vPortExitCritical>
				return pdPASS;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e063      	b.n	8002ae4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a22:	f001 fe47 	bl	80046b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e05c      	b.n	8002ae4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 ffe5 	bl	8003a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a3e:	f001 fe39 	bl	80046b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a42:	f000 fd5d 	bl	8003500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a46:	f001 fe07 	bl	8004658 <vPortEnterCritical>
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a56:	d103      	bne.n	8002a60 <xQueueGenericSend+0x164>
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a6c:	d103      	bne.n	8002a76 <xQueueGenericSend+0x17a>
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a76:	f001 fe1d 	bl	80046b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a7a:	1d3a      	adds	r2, r7, #4
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 ffd4 	bl	8003a30 <xTaskCheckForTimeOut>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d124      	bne.n	8002ad8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a90:	f000 fa96 	bl	8002fc0 <prvIsQueueFull>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fefe 	bl	80038a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aaa:	f000 fa21 	bl	8002ef0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002aae:	f000 fd35 	bl	800351c <xTaskResumeAll>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f47f af7c 	bne.w	80029b2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <xQueueGenericSend+0x1f0>)
 8002abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	e772      	b.n	80029b2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ace:	f000 fa0f 	bl	8002ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ad2:	f000 fd23 	bl	800351c <xTaskResumeAll>
 8002ad6:	e76c      	b.n	80029b2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ada:	f000 fa09 	bl	8002ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ade:	f000 fd1d 	bl	800351c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ae2:	2300      	movs	r3, #0
		}
	}
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3738      	adds	r7, #56	; 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08e      	sub	sp, #56	; 0x38
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <xQueueGenericSendFromISR+0x2c>
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	e7fe      	b.n	8002b1a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <xQueueGenericSendFromISR+0x3a>
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <xQueueGenericSendFromISR+0x3e>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <xQueueGenericSendFromISR+0x40>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <xQueueGenericSendFromISR+0x58>
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	e7fe      	b.n	8002b46 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d103      	bne.n	8002b56 <xQueueGenericSendFromISR+0x66>
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <xQueueGenericSendFromISR+0x6a>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <xQueueGenericSendFromISR+0x6c>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <xQueueGenericSendFromISR+0x84>
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e7fe      	b.n	8002b72 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b74:	f001 fe2a 	bl	80047cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b78:	f3ef 8211 	mrs	r2, BASEPRI
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	61ba      	str	r2, [r7, #24]
 8002b8e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b90:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <xQueueGenericSendFromISR+0xb6>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d12c      	bne.n	8002c00 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bb6:	f000 f90b 	bl	8002dd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc2:	d112      	bne.n	8002bea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	3324      	adds	r3, #36	; 0x24
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 feb5 	bl	8003940 <xTaskRemoveFromEventList>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00e      	beq.n	8002bfa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e007      	b.n	8002bfa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002bee:	3301      	adds	r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	b25a      	sxtb	r2, r3
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002bfe:	e001      	b.n	8002c04 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3738      	adds	r7, #56	; 0x38
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <xQueueReceive+0x2e>
	__asm volatile
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	e7fe      	b.n	8002c44 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d103      	bne.n	8002c54 <xQueueReceive+0x3c>
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <xQueueReceive+0x40>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <xQueueReceive+0x42>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <xQueueReceive+0x5a>
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	e7fe      	b.n	8002c70 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c72:	f001 f81f 	bl	8003cb4 <xTaskGetSchedulerState>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <xQueueReceive+0x6a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <xQueueReceive+0x6e>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <xQueueReceive+0x70>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <xQueueReceive+0x88>
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e7fe      	b.n	8002c9e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ca0:	f001 fcda 	bl	8004658 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01f      	beq.n	8002cf0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb4:	f000 f8f6 	bl	8002ea4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00f      	beq.n	8002ce8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	3310      	adds	r3, #16
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fe37 	bl	8003940 <xTaskRemoveFromEventList>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cd8:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <xQueueReceive+0x1b4>)
 8002cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ce8:	f001 fce4 	bl	80046b4 <vPortExitCritical>
				return pdPASS;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e069      	b.n	8002dc4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cf6:	f001 fcdd 	bl	80046b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e062      	b.n	8002dc4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fe7b 	bl	8003a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d12:	f001 fccf 	bl	80046b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d16:	f000 fbf3 	bl	8003500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d1a:	f001 fc9d 	bl	8004658 <vPortEnterCritical>
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d2a:	d103      	bne.n	8002d34 <xQueueReceive+0x11c>
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d40:	d103      	bne.n	8002d4a <xQueueReceive+0x132>
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d4a:	f001 fcb3 	bl	80046b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d4e:	1d3a      	adds	r2, r7, #4
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fe6a 	bl	8003a30 <xTaskCheckForTimeOut>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d123      	bne.n	8002daa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d64:	f000 f916 	bl	8002f94 <prvIsQueueEmpty>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d017      	beq.n	8002d9e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	3324      	adds	r3, #36	; 0x24
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fd94 	bl	80038a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d7e:	f000 f8b7 	bl	8002ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d82:	f000 fbcb 	bl	800351c <xTaskResumeAll>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d189      	bne.n	8002ca0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <xQueueReceive+0x1b4>)
 8002d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	e780      	b.n	8002ca0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da0:	f000 f8a6 	bl	8002ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002da4:	f000 fbba 	bl	800351c <xTaskResumeAll>
 8002da8:	e77a      	b.n	8002ca0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dac:	f000 f8a0 	bl	8002ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002db0:	f000 fbb4 	bl	800351c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db6:	f000 f8ed 	bl	8002f94 <prvIsQueueEmpty>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f43f af6f 	beq.w	8002ca0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3730      	adds	r7, #48	; 0x30
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10d      	bne.n	8002e0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d14d      	bne.n	8002e92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 ff78 	bl	8003cf0 <xTaskPriorityDisinherit>
 8002e00:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	e043      	b.n	8002e92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d119      	bne.n	8002e44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6898      	ldr	r0, [r3, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	f001 ff0a 	bl	8004c34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	441a      	add	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d32b      	bcc.n	8002e92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	e026      	b.n	8002e92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68d8      	ldr	r0, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	f001 fef0 	bl	8004c34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	425b      	negs	r3, r3
 8002e5e:	441a      	add	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	425b      	negs	r3, r3
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d105      	bne.n	8002e92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e9a:	697b      	ldr	r3, [r7, #20]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	441a      	add	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d303      	bcc.n	8002ed8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68d9      	ldr	r1, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6838      	ldr	r0, [r7, #0]
 8002ee4:	f001 fea6 	bl	8004c34 <memcpy>
	}
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ef8:	f001 fbae 	bl	8004658 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f04:	e011      	b.n	8002f2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d012      	beq.n	8002f34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3324      	adds	r3, #36	; 0x24
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd14 	bl	8003940 <xTaskRemoveFromEventList>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f1e:	f000 fde7 	bl	8003af0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	dce9      	bgt.n	8002f06 <prvUnlockQueue+0x16>
 8002f32:	e000      	b.n	8002f36 <prvUnlockQueue+0x46>
					break;
 8002f34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	22ff      	movs	r2, #255	; 0xff
 8002f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f3e:	f001 fbb9 	bl	80046b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f42:	f001 fb89 	bl	8004658 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f4e:	e011      	b.n	8002f74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3310      	adds	r3, #16
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fcef 	bl	8003940 <xTaskRemoveFromEventList>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f68:	f000 fdc2 	bl	8003af0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dce9      	bgt.n	8002f50 <prvUnlockQueue+0x60>
 8002f7c:	e000      	b.n	8002f80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	22ff      	movs	r2, #255	; 0xff
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f88:	f001 fb94 	bl	80046b4 <vPortExitCritical>
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f9c:	f001 fb5c 	bl	8004658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e001      	b.n	8002fb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fb2:	f001 fb7f 	bl	80046b4 <vPortExitCritical>

	return xReturn;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fc8:	f001 fb46 	bl	8004658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d102      	bne.n	8002fde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	e001      	b.n	8002fe2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fe2:	f001 fb67 	bl	80046b4 <vPortExitCritical>

	return xReturn;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e014      	b.n	800302a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003000:	4a0e      	ldr	r2, [pc, #56]	; (800303c <vQueueAddToRegistry+0x4c>)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800300c:	490b      	ldr	r1, [pc, #44]	; (800303c <vQueueAddToRegistry+0x4c>)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <vQueueAddToRegistry+0x4c>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003022:	e005      	b.n	8003030 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b07      	cmp	r3, #7
 800302e:	d9e7      	bls.n	8003000 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20001c2c 	.word	0x20001c2c

08003040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003050:	f001 fb02 	bl	8004658 <vPortEnterCritical>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800305a:	b25b      	sxtb	r3, r3
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003060:	d103      	bne.n	800306a <vQueueWaitForMessageRestricted+0x2a>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003070:	b25b      	sxtb	r3, r3
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003076:	d103      	bne.n	8003080 <vQueueWaitForMessageRestricted+0x40>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003080:	f001 fb18 	bl	80046b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3324      	adds	r3, #36	; 0x24
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fc29 	bl	80038ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f7ff ff28 	bl	8002ef0 <prvUnlockQueue>
	}
 80030a0:	bf00      	nop
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08e      	sub	sp, #56	; 0x38
 80030ac:	af04      	add	r7, sp, #16
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <xTaskCreateStatic+0x28>
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	623b      	str	r3, [r7, #32]
 80030ce:	e7fe      	b.n	80030ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <xTaskCreateStatic+0x42>
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e7fe      	b.n	80030e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030ea:	235c      	movs	r3, #92	; 0x5c
 80030ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b5c      	cmp	r3, #92	; 0x5c
 80030f2:	d009      	beq.n	8003108 <xTaskCreateStatic+0x60>
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e7fe      	b.n	8003106 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01e      	beq.n	800314c <xTaskCreateStatic+0xa4>
 800310e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01b      	beq.n	800314c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800311c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	2202      	movs	r2, #2
 8003122:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003126:	2300      	movs	r3, #0
 8003128:	9303      	str	r3, [sp, #12]
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	9302      	str	r3, [sp, #8]
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f850 	bl	80031e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003146:	f000 f8d3 	bl	80032f0 <prvAddNewTaskToReadyList>
 800314a:	e001      	b.n	8003150 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003150:	697b      	ldr	r3, [r7, #20]
	}
 8003152:	4618      	mov	r0, r3
 8003154:	3728      	adds	r7, #40	; 0x28
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800315a:	b580      	push	{r7, lr}
 800315c:	b08c      	sub	sp, #48	; 0x30
 800315e:	af04      	add	r7, sp, #16
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fb68 	bl	8004844 <pvPortMalloc>
 8003174:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00e      	beq.n	800319a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800317c:	205c      	movs	r0, #92	; 0x5c
 800317e:	f001 fb61 	bl	8004844 <pvPortMalloc>
 8003182:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
 8003190:	e005      	b.n	800319e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f001 fc18 	bl	80049c8 <vPortFree>
 8003198:	e001      	b.n	800319e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d017      	beq.n	80031d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9303      	str	r3, [sp, #12]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	9302      	str	r3, [sp, #8]
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f80e 	bl	80031e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031c8:	69f8      	ldr	r0, [r7, #28]
 80031ca:	f000 f891 	bl	80032f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e002      	b.n	80031da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031da:	69bb      	ldr	r3, [r7, #24]
	}
 80031dc:	4618      	mov	r0, r3
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	461a      	mov	r2, r3
 80031fc:	21a5      	movs	r1, #165	; 0xa5
 80031fe:	f001 fd24 	bl	8004c4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800320c:	3b01      	subs	r3, #1
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f023 0307 	bic.w	r3, r3, #7
 800321a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <prvInitialiseNewTask+0x56>
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e7fe      	b.n	8003238 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	e012      	b.n	8003266 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	7819      	ldrb	r1, [r3, #0]
 8003248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	3334      	adds	r3, #52	; 0x34
 8003250:	460a      	mov	r2, r1
 8003252:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	3301      	adds	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d9e9      	bls.n	8003240 <prvInitialiseNewTask+0x5c>
 800326c:	e000      	b.n	8003270 <prvInitialiseNewTask+0x8c>
		{
			break;
 800326e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	2b37      	cmp	r3, #55	; 0x37
 800327c:	d901      	bls.n	8003282 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800327e:	2337      	movs	r3, #55	; 0x37
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	2200      	movs	r2, #0
 8003292:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	3304      	adds	r3, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff f9a0 	bl	80025de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	3318      	adds	r3, #24
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff f99b 	bl	80025de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	2200      	movs	r2, #0
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	69b8      	ldr	r0, [r7, #24]
 80032d2:	f001 f8d7 	bl	8004484 <pxPortInitialiseStack>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032e8:	bf00      	nop
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032f8:	f001 f9ae 	bl	8004658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032fc:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <prvAddNewTaskToReadyList+0xc4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3301      	adds	r3, #1
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <prvAddNewTaskToReadyList+0xc4>)
 8003304:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003306:	4b2c      	ldr	r3, [pc, #176]	; (80033b8 <prvAddNewTaskToReadyList+0xc8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800330e:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <prvAddNewTaskToReadyList+0xc8>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003314:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <prvAddNewTaskToReadyList+0xc4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d110      	bne.n	800333e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800331c:	f000 fc0c 	bl	8003b38 <prvInitialiseTaskLists>
 8003320:	e00d      	b.n	800333e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003322:	4b26      	ldr	r3, [pc, #152]	; (80033bc <prvAddNewTaskToReadyList+0xcc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <prvAddNewTaskToReadyList+0xc8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	429a      	cmp	r2, r3
 8003336:	d802      	bhi.n	800333e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <prvAddNewTaskToReadyList+0xc8>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <prvAddNewTaskToReadyList+0xd0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3301      	adds	r3, #1
 8003344:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <prvAddNewTaskToReadyList+0xd0>)
 8003346:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <prvAddNewTaskToReadyList+0xd0>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <prvAddNewTaskToReadyList+0xd4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d903      	bls.n	8003364 <prvAddNewTaskToReadyList+0x74>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <prvAddNewTaskToReadyList+0xd4>)
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <prvAddNewTaskToReadyList+0xd8>)
 8003372:	441a      	add	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f7ff f93b 	bl	80025f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003380:	f001 f998 	bl	80046b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <prvAddNewTaskToReadyList+0xcc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <prvAddNewTaskToReadyList+0xc8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	429a      	cmp	r2, r3
 8003398:	d207      	bcs.n	80033aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <prvAddNewTaskToReadyList+0xdc>)
 800339c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000bbc 	.word	0x20000bbc
 80033b8:	200006e8 	.word	0x200006e8
 80033bc:	20000bc8 	.word	0x20000bc8
 80033c0:	20000bd8 	.word	0x20000bd8
 80033c4:	20000bc4 	.word	0x20000bc4
 80033c8:	200006ec 	.word	0x200006ec
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <vTaskDelay+0x60>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <vTaskDelay+0x2e>
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	e7fe      	b.n	80033fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80033fe:	f000 f87f 	bl	8003500 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003402:	2100      	movs	r1, #0
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fcdf 	bl	8003dc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800340a:	f000 f887 	bl	800351c <xTaskResumeAll>
 800340e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <vTaskDelay+0x64>)
 8003418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000be4 	.word	0x20000be4
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003446:	463a      	mov	r2, r7
 8003448:	1d39      	adds	r1, r7, #4
 800344a:	f107 0308 	add.w	r3, r7, #8
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff f874 	bl	800253c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	9202      	str	r2, [sp, #8]
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	2300      	movs	r3, #0
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2300      	movs	r3, #0
 8003464:	460a      	mov	r2, r1
 8003466:	4920      	ldr	r1, [pc, #128]	; (80034e8 <vTaskStartScheduler+0xb0>)
 8003468:	4820      	ldr	r0, [pc, #128]	; (80034ec <vTaskStartScheduler+0xb4>)
 800346a:	f7ff fe1d 	bl	80030a8 <xTaskCreateStatic>
 800346e:	4602      	mov	r2, r0
 8003470:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <vTaskStartScheduler+0xb8>)
 8003472:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <vTaskStartScheduler+0xb8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800347c:	2301      	movs	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e001      	b.n	8003486 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d102      	bne.n	8003492 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800348c:	f000 fcf0 	bl	8003e70 <xTimerCreateTimerTask>
 8003490:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d115      	bne.n	80034c4 <vTaskStartScheduler+0x8c>
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <vTaskStartScheduler+0xbc>)
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <vTaskStartScheduler+0xc0>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034b8:	4b10      	ldr	r3, [pc, #64]	; (80034fc <vTaskStartScheduler+0xc4>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034be:	f001 f85b 	bl	8004578 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034c2:	e00d      	b.n	80034e0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ca:	d109      	bne.n	80034e0 <vTaskStartScheduler+0xa8>
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e7fe      	b.n	80034de <vTaskStartScheduler+0xa6>
}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	08004ca4 	.word	0x08004ca4
 80034ec:	08003b09 	.word	0x08003b09
 80034f0:	20000be0 	.word	0x20000be0
 80034f4:	20000bdc 	.word	0x20000bdc
 80034f8:	20000bc8 	.word	0x20000bc8
 80034fc:	20000bc0 	.word	0x20000bc0

08003500 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <vTaskSuspendAll+0x18>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	4a03      	ldr	r2, [pc, #12]	; (8003518 <vTaskSuspendAll+0x18>)
 800350c:	6013      	str	r3, [r2, #0]
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000be4 	.word	0x20000be4

0800351c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <xTaskResumeAll+0x114>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <xTaskResumeAll+0x2a>
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	e7fe      	b.n	8003544 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003546:	f001 f887 	bl	8004658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <xTaskResumeAll+0x114>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3b01      	subs	r3, #1
 8003550:	4a37      	ldr	r2, [pc, #220]	; (8003630 <xTaskResumeAll+0x114>)
 8003552:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003554:	4b36      	ldr	r3, [pc, #216]	; (8003630 <xTaskResumeAll+0x114>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d162      	bne.n	8003622 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <xTaskResumeAll+0x118>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d05e      	beq.n	8003622 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003564:	e02f      	b.n	80035c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003566:	4b34      	ldr	r3, [pc, #208]	; (8003638 <xTaskResumeAll+0x11c>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3318      	adds	r3, #24
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f89a 	bl	80026ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3304      	adds	r3, #4
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff f895 	bl	80026ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <xTaskResumeAll+0x120>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d903      	bls.n	8003596 <xTaskResumeAll+0x7a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	4a2a      	ldr	r2, [pc, #168]	; (800363c <xTaskResumeAll+0x120>)
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4a27      	ldr	r2, [pc, #156]	; (8003640 <xTaskResumeAll+0x124>)
 80035a4:	441a      	add	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7ff f822 	bl	80025f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	4b23      	ldr	r3, [pc, #140]	; (8003644 <xTaskResumeAll+0x128>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035c0:	4b21      	ldr	r3, [pc, #132]	; (8003648 <xTaskResumeAll+0x12c>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <xTaskResumeAll+0x11c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1cb      	bne.n	8003566 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035d4:	f000 fb4a 	bl	8003c6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035d8:	4b1c      	ldr	r3, [pc, #112]	; (800364c <xTaskResumeAll+0x130>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035e4:	f000 f844 	bl	8003670 <xTaskIncrementTick>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <xTaskResumeAll+0x12c>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f1      	bne.n	80035e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003600:	4b12      	ldr	r3, [pc, #72]	; (800364c <xTaskResumeAll+0x130>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <xTaskResumeAll+0x12c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800360e:	2301      	movs	r3, #1
 8003610:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <xTaskResumeAll+0x134>)
 8003614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003622:	f001 f847 	bl	80046b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003626:	68bb      	ldr	r3, [r7, #8]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000be4 	.word	0x20000be4
 8003634:	20000bbc 	.word	0x20000bbc
 8003638:	20000b7c 	.word	0x20000b7c
 800363c:	20000bc4 	.word	0x20000bc4
 8003640:	200006ec 	.word	0x200006ec
 8003644:	200006e8 	.word	0x200006e8
 8003648:	20000bd0 	.word	0x20000bd0
 800364c:	20000bcc 	.word	0x20000bcc
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800365a:	4b04      	ldr	r3, [pc, #16]	; (800366c <xTaskGetTickCount+0x18>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003660:	687b      	ldr	r3, [r7, #4]
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	20000bc0 	.word	0x20000bc0

08003670 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800367a:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <xTaskIncrementTick+0x150>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f040 808d 	bne.w	800379e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003684:	4b4f      	ldr	r3, [pc, #316]	; (80037c4 <xTaskIncrementTick+0x154>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3301      	adds	r3, #1
 800368a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800368c:	4a4d      	ldr	r2, [pc, #308]	; (80037c4 <xTaskIncrementTick+0x154>)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11f      	bne.n	80036d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003698:	4b4b      	ldr	r3, [pc, #300]	; (80037c8 <xTaskIncrementTick+0x158>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <xTaskIncrementTick+0x46>
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	e7fe      	b.n	80036b4 <xTaskIncrementTick+0x44>
 80036b6:	4b44      	ldr	r3, [pc, #272]	; (80037c8 <xTaskIncrementTick+0x158>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	4b43      	ldr	r3, [pc, #268]	; (80037cc <xTaskIncrementTick+0x15c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a41      	ldr	r2, [pc, #260]	; (80037c8 <xTaskIncrementTick+0x158>)
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4a41      	ldr	r2, [pc, #260]	; (80037cc <xTaskIncrementTick+0x15c>)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <xTaskIncrementTick+0x160>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	4a3f      	ldr	r2, [pc, #252]	; (80037d0 <xTaskIncrementTick+0x160>)
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	f000 faca 	bl	8003c6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036d8:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <xTaskIncrementTick+0x164>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d34e      	bcc.n	8003780 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <xTaskIncrementTick+0x158>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <xTaskIncrementTick+0x80>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <xTaskIncrementTick+0x82>
 80036f0:	2300      	movs	r3, #0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f6:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <xTaskIncrementTick+0x164>)
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036fc:	601a      	str	r2, [r3, #0]
					break;
 80036fe:	e03f      	b.n	8003780 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003700:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <xTaskIncrementTick+0x158>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d203      	bcs.n	8003720 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003718:	4a2e      	ldr	r2, [pc, #184]	; (80037d4 <xTaskIncrementTick+0x164>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
						break;
 800371e:	e02f      	b.n	8003780 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	3304      	adds	r3, #4
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe ffc1 	bl	80026ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3318      	adds	r3, #24
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe ffb8 	bl	80026ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <xTaskIncrementTick+0x168>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d903      	bls.n	8003750 <xTaskIncrementTick+0xe0>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <xTaskIncrementTick+0x168>)
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <xTaskIncrementTick+0x16c>)
 800375e:	441a      	add	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f7fe ff45 	bl	80025f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <xTaskIncrementTick+0x170>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	429a      	cmp	r2, r3
 8003778:	d3b3      	bcc.n	80036e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800377a:	2301      	movs	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800377e:	e7b0      	b.n	80036e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003780:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <xTaskIncrementTick+0x170>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	4915      	ldr	r1, [pc, #84]	; (80037dc <xTaskIncrementTick+0x16c>)
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d907      	bls.n	80037a8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003798:	2301      	movs	r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	e004      	b.n	80037a8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <xTaskIncrementTick+0x174>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <xTaskIncrementTick+0x174>)
 80037a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <xTaskIncrementTick+0x178>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80037b0:	2301      	movs	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037b4:	697b      	ldr	r3, [r7, #20]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000be4 	.word	0x20000be4
 80037c4:	20000bc0 	.word	0x20000bc0
 80037c8:	20000b74 	.word	0x20000b74
 80037cc:	20000b78 	.word	0x20000b78
 80037d0:	20000bd4 	.word	0x20000bd4
 80037d4:	20000bdc 	.word	0x20000bdc
 80037d8:	20000bc4 	.word	0x20000bc4
 80037dc:	200006ec 	.word	0x200006ec
 80037e0:	200006e8 	.word	0x200006e8
 80037e4:	20000bcc 	.word	0x20000bcc
 80037e8:	20000bd0 	.word	0x20000bd0

080037ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037f2:	4b27      	ldr	r3, [pc, #156]	; (8003890 <vTaskSwitchContext+0xa4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <vTaskSwitchContext+0xa8>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003800:	e040      	b.n	8003884 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <vTaskSwitchContext+0xa8>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <vTaskSwitchContext+0xac>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e00f      	b.n	8003830 <vTaskSwitchContext+0x44>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <vTaskSwitchContext+0x3e>
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	e7fe      	b.n	8003828 <vTaskSwitchContext+0x3c>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3b01      	subs	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	491a      	ldr	r1, [pc, #104]	; (800389c <vTaskSwitchContext+0xb0>)
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0e5      	beq.n	8003810 <vTaskSwitchContext+0x24>
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4a13      	ldr	r2, [pc, #76]	; (800389c <vTaskSwitchContext+0xb0>)
 8003850:	4413      	add	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3308      	adds	r3, #8
 8003866:	429a      	cmp	r2, r3
 8003868:	d104      	bne.n	8003874 <vTaskSwitchContext+0x88>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <vTaskSwitchContext+0xb4>)
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4a06      	ldr	r2, [pc, #24]	; (8003898 <vTaskSwitchContext+0xac>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6013      	str	r3, [r2, #0]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000be4 	.word	0x20000be4
 8003894:	20000bd0 	.word	0x20000bd0
 8003898:	20000bc4 	.word	0x20000bc4
 800389c:	200006ec 	.word	0x200006ec
 80038a0:	200006e8 	.word	0x200006e8

080038a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <vTaskPlaceOnEventList+0x24>
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e7fe      	b.n	80038c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <vTaskPlaceOnEventList+0x44>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3318      	adds	r3, #24
 80038ce:	4619      	mov	r1, r3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fe feb3 	bl	800263c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038d6:	2101      	movs	r1, #1
 80038d8:	6838      	ldr	r0, [r7, #0]
 80038da:	f000 fa75 	bl	8003dc8 <prvAddCurrentTaskToDelayedList>
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200006e8 	.word	0x200006e8

080038ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <vTaskPlaceOnEventListRestricted+0x26>
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e7fe      	b.n	8003910 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <vTaskPlaceOnEventListRestricted+0x50>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3318      	adds	r3, #24
 8003918:	4619      	mov	r1, r3
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7fe fe6b 	bl	80025f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800392a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	68b8      	ldr	r0, [r7, #8]
 8003930:	f000 fa4a 	bl	8003dc8 <prvAddCurrentTaskToDelayedList>
	}
 8003934:	bf00      	nop
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200006e8 	.word	0x200006e8

08003940 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <xTaskRemoveFromEventList+0x2a>
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e7fe      	b.n	8003968 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3318      	adds	r3, #24
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fe9c 	bl	80026ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <xTaskRemoveFromEventList+0xac>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d11d      	bne.n	80039b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fe93 	bl	80026ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <xTaskRemoveFromEventList+0xb0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d903      	bls.n	800399a <xTaskRemoveFromEventList+0x5a>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <xTaskRemoveFromEventList+0xb0>)
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <xTaskRemoveFromEventList+0xb4>)
 80039a8:	441a      	add	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f7fe fe20 	bl	80025f6 <vListInsertEnd>
 80039b6:	e005      	b.n	80039c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	3318      	adds	r3, #24
 80039bc:	4619      	mov	r1, r3
 80039be:	480e      	ldr	r0, [pc, #56]	; (80039f8 <xTaskRemoveFromEventList+0xb8>)
 80039c0:	f7fe fe19 	bl	80025f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <xTaskRemoveFromEventList+0xbc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d905      	bls.n	80039de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039d2:	2301      	movs	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <xTaskRemoveFromEventList+0xc0>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e001      	b.n	80039e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80039e2:	697b      	ldr	r3, [r7, #20]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000be4 	.word	0x20000be4
 80039f0:	20000bc4 	.word	0x20000bc4
 80039f4:	200006ec 	.word	0x200006ec
 80039f8:	20000b7c 	.word	0x20000b7c
 80039fc:	200006e8 	.word	0x200006e8
 8003a00:	20000bd0 	.word	0x20000bd0

08003a04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <vTaskInternalSetTimeOutState+0x24>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <vTaskInternalSetTimeOutState+0x28>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	605a      	str	r2, [r3, #4]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000bd4 	.word	0x20000bd4
 8003a2c:	20000bc0 	.word	0x20000bc0

08003a30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <xTaskCheckForTimeOut+0x24>
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e7fe      	b.n	8003a52 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <xTaskCheckForTimeOut+0x3e>
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e7fe      	b.n	8003a6c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003a6e:	f000 fdf3 	bl	8004658 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <xTaskCheckForTimeOut+0xb8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8a:	d102      	bne.n	8003a92 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	e023      	b.n	8003ada <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <xTaskCheckForTimeOut+0xbc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d007      	beq.n	8003aae <xTaskCheckForTimeOut+0x7e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d302      	bcc.n	8003aae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	e015      	b.n	8003ada <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d20b      	bcs.n	8003ad0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	1ad2      	subs	r2, r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff9d 	bl	8003a04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e004      	b.n	8003ada <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ada:	f000 fdeb 	bl	80046b4 <vPortExitCritical>

	return xReturn;
 8003ade:	69fb      	ldr	r3, [r7, #28]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000bc0 	.word	0x20000bc0
 8003aec:	20000bd4 	.word	0x20000bd4

08003af0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <vTaskMissedYield+0x14>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000bd0 	.word	0x20000bd0

08003b08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b10:	f000 f852 	bl	8003bb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <prvIdleTask+0x28>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d9f9      	bls.n	8003b10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <prvIdleTask+0x2c>)
 8003b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b2c:	e7f0      	b.n	8003b10 <prvIdleTask+0x8>
 8003b2e:	bf00      	nop
 8003b30:	200006ec 	.word	0x200006ec
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	e00c      	b.n	8003b5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <prvInitialiseTaskLists+0x60>)
 8003b50:	4413      	add	r3, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fd24 	bl	80025a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b37      	cmp	r3, #55	; 0x37
 8003b62:	d9ef      	bls.n	8003b44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b64:	480d      	ldr	r0, [pc, #52]	; (8003b9c <prvInitialiseTaskLists+0x64>)
 8003b66:	f7fe fd1b 	bl	80025a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b6a:	480d      	ldr	r0, [pc, #52]	; (8003ba0 <prvInitialiseTaskLists+0x68>)
 8003b6c:	f7fe fd18 	bl	80025a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b70:	480c      	ldr	r0, [pc, #48]	; (8003ba4 <prvInitialiseTaskLists+0x6c>)
 8003b72:	f7fe fd15 	bl	80025a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b76:	480c      	ldr	r0, [pc, #48]	; (8003ba8 <prvInitialiseTaskLists+0x70>)
 8003b78:	f7fe fd12 	bl	80025a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b7c:	480b      	ldr	r0, [pc, #44]	; (8003bac <prvInitialiseTaskLists+0x74>)
 8003b7e:	f7fe fd0f 	bl	80025a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <prvInitialiseTaskLists+0x78>)
 8003b84:	4a05      	ldr	r2, [pc, #20]	; (8003b9c <prvInitialiseTaskLists+0x64>)
 8003b86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b88:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <prvInitialiseTaskLists+0x7c>)
 8003b8a:	4a05      	ldr	r2, [pc, #20]	; (8003ba0 <prvInitialiseTaskLists+0x68>)
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	200006ec 	.word	0x200006ec
 8003b9c:	20000b4c 	.word	0x20000b4c
 8003ba0:	20000b60 	.word	0x20000b60
 8003ba4:	20000b7c 	.word	0x20000b7c
 8003ba8:	20000b90 	.word	0x20000b90
 8003bac:	20000ba8 	.word	0x20000ba8
 8003bb0:	20000b74 	.word	0x20000b74
 8003bb4:	20000b78 	.word	0x20000b78

08003bb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bbe:	e019      	b.n	8003bf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bc0:	f000 fd4a 	bl	8004658 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <prvCheckTasksWaitingTermination+0x4c>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fd6b 	bl	80026ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <prvCheckTasksWaitingTermination+0x50>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <prvCheckTasksWaitingTermination+0x50>)
 8003bde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <prvCheckTasksWaitingTermination+0x54>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <prvCheckTasksWaitingTermination+0x54>)
 8003be8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bea:	f000 fd63 	bl	80046b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f80e 	bl	8003c10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <prvCheckTasksWaitingTermination+0x54>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e1      	bne.n	8003bc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000b90 	.word	0x20000b90
 8003c08:	20000bbc 	.word	0x20000bbc
 8003c0c:	20000ba4 	.word	0x20000ba4

08003c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d108      	bne.n	8003c34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fece 	bl	80049c8 <vPortFree>
				vPortFree( pxTCB );
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fecb 	bl	80049c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c32:	e017      	b.n	8003c64 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d103      	bne.n	8003c46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fec2 	bl	80049c8 <vPortFree>
	}
 8003c44:	e00e      	b.n	8003c64 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d009      	beq.n	8003c64 <prvDeleteTCB+0x54>
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e7fe      	b.n	8003c62 <prvDeleteTCB+0x52>
	}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c72:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <prvResetNextTaskUnblockTime+0x40>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <prvResetNextTaskUnblockTime+0x14>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <prvResetNextTaskUnblockTime+0x16>
 8003c80:	2300      	movs	r3, #0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <prvResetNextTaskUnblockTime+0x44>)
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c8e:	e008      	b.n	8003ca2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <prvResetNextTaskUnblockTime+0x40>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <prvResetNextTaskUnblockTime+0x44>)
 8003ca0:	6013      	str	r3, [r2, #0]
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	20000b74 	.word	0x20000b74
 8003cb0:	20000bdc 	.word	0x20000bdc

08003cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <xTaskGetSchedulerState+0x34>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	e008      	b.n	8003cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <xTaskGetSchedulerState+0x38>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	607b      	str	r3, [r7, #4]
 8003cd4:	e001      	b.n	8003cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cda:	687b      	ldr	r3, [r7, #4]
	}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000bc8 	.word	0x20000bc8
 8003cec:	20000be4 	.word	0x20000be4

08003cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d054      	beq.n	8003db0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d06:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <xTaskPriorityDisinherit+0xcc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d009      	beq.n	8003d24 <xTaskPriorityDisinherit+0x34>
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e7fe      	b.n	8003d22 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <xTaskPriorityDisinherit+0x50>
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	e7fe      	b.n	8003d3e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d02c      	beq.n	8003db0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d128      	bne.n	8003db0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	3304      	adds	r3, #4
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe fca2 	bl	80026ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <xTaskPriorityDisinherit+0xd0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d903      	bls.n	8003d90 <xTaskPriorityDisinherit+0xa0>
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a0c      	ldr	r2, [pc, #48]	; (8003dc0 <xTaskPriorityDisinherit+0xd0>)
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <xTaskPriorityDisinherit+0xd4>)
 8003d9e:	441a      	add	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f7fe fc25 	bl	80025f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003db0:	697b      	ldr	r3, [r7, #20]
	}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200006e8 	.word	0x200006e8
 8003dc0:	20000bc4 	.word	0x20000bc4
 8003dc4:	200006ec 	.word	0x200006ec

08003dc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <prvAddCurrentTaskToDelayedList+0x90>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dd8:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fc64 	bl	80026ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dea:	d10a      	bne.n	8003e02 <prvAddCurrentTaskToDelayedList+0x3a>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4819      	ldr	r0, [pc, #100]	; (8003e60 <prvAddCurrentTaskToDelayedList+0x98>)
 8003dfc:	f7fe fbfb 	bl	80025f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e00:	e026      	b.n	8003e50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4413      	add	r3, r2
 8003e08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e0a:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d209      	bcs.n	8003e2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f7fe fc08 	bl	800263c <vListInsert>
}
 8003e2c:	e010      	b.n	8003e50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f7fe fbfe 	bl	800263c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d202      	bcs.n	8003e50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e4a:	4a08      	ldr	r2, [pc, #32]	; (8003e6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6013      	str	r3, [r2, #0]
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000bc0 	.word	0x20000bc0
 8003e5c:	200006e8 	.word	0x200006e8
 8003e60:	20000ba8 	.word	0x20000ba8
 8003e64:	20000b78 	.word	0x20000b78
 8003e68:	20000b74 	.word	0x20000b74
 8003e6c:	20000bdc 	.word	0x20000bdc

08003e70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e7a:	f000 fac3 	bl	8004404 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <xTimerCreateTimerTask+0x80>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d021      	beq.n	8003eca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e8e:	1d3a      	adds	r2, r7, #4
 8003e90:	f107 0108 	add.w	r1, r7, #8
 8003e94:	f107 030c 	add.w	r3, r7, #12
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fb67 	bl	800256c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	9202      	str	r2, [sp, #8]
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2300      	movs	r3, #0
 8003eae:	460a      	mov	r2, r1
 8003eb0:	4910      	ldr	r1, [pc, #64]	; (8003ef4 <xTimerCreateTimerTask+0x84>)
 8003eb2:	4811      	ldr	r0, [pc, #68]	; (8003ef8 <xTimerCreateTimerTask+0x88>)
 8003eb4:	f7ff f8f8 	bl	80030a8 <xTaskCreateStatic>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <xTimerCreateTimerTask+0x8c>)
 8003ebc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <xTimerCreateTimerTask+0x8c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <xTimerCreateTimerTask+0x74>
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	e7fe      	b.n	8003ee2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003ee4:	697b      	ldr	r3, [r7, #20]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000c18 	.word	0x20000c18
 8003ef4:	08004cac 	.word	0x08004cac
 8003ef8:	08004019 	.word	0x08004019
 8003efc:	20000c1c 	.word	0x20000c1c

08003f00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <xTimerGenericCommand+0x2c>
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	623b      	str	r3, [r7, #32]
 8003f2a:	e7fe      	b.n	8003f2a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <xTimerGenericCommand+0x94>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02a      	beq.n	8003f8a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	dc18      	bgt.n	8003f78 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f46:	f7ff feb5 	bl	8003cb4 <xTaskGetSchedulerState>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d109      	bne.n	8003f64 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <xTimerGenericCommand+0x94>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	f107 0110 	add.w	r1, r7, #16
 8003f58:	2300      	movs	r3, #0
 8003f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f5c:	f7fe fcce 	bl	80028fc <xQueueGenericSend>
 8003f60:	6278      	str	r0, [r7, #36]	; 0x24
 8003f62:	e012      	b.n	8003f8a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <xTimerGenericCommand+0x94>)
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	f107 0110 	add.w	r1, r7, #16
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f7fe fcc4 	bl	80028fc <xQueueGenericSend>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24
 8003f76:	e008      	b.n	8003f8a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <xTimerGenericCommand+0x94>)
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	f107 0110 	add.w	r1, r7, #16
 8003f80:	2300      	movs	r3, #0
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	f7fe fdb4 	bl	8002af0 <xQueueGenericSendFromISR>
 8003f88:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3728      	adds	r7, #40	; 0x28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000c18 	.word	0x20000c18

08003f98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <prvProcessExpiredTimer+0x7c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe fb7b 	bl	80026ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d121      	bne.n	8004002 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	18d1      	adds	r1, r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	6978      	ldr	r0, [r7, #20]
 8003fcc:	f000 f8c8 	bl	8004160 <prvInsertTimerInActiveList>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	6978      	ldr	r0, [r7, #20]
 8003fe2:	f7ff ff8d 	bl	8003f00 <xTimerGenericCommand>
 8003fe6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <prvProcessExpiredTimer+0x6a>
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e7fe      	b.n	8004000 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	6978      	ldr	r0, [r7, #20]
 8004008:	4798      	blx	r3
}
 800400a:	bf00      	nop
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000c10 	.word	0x20000c10

08004018 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004020:	f107 0308 	add.w	r3, r7, #8
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f857 	bl	80040d8 <prvGetNextExpireTime>
 800402a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4619      	mov	r1, r3
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f803 	bl	800403c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004036:	f000 f8d5 	bl	80041e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800403a:	e7f1      	b.n	8004020 <prvTimerTask+0x8>

0800403c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004046:	f7ff fa5b 	bl	8003500 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800404a:	f107 0308 	add.w	r3, r7, #8
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f866 	bl	8004120 <prvSampleTimeNow>
 8004054:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d130      	bne.n	80040be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <prvProcessTimerOrBlockTask+0x3c>
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	429a      	cmp	r2, r3
 8004068:	d806      	bhi.n	8004078 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800406a:	f7ff fa57 	bl	800351c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800406e:	68f9      	ldr	r1, [r7, #12]
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff91 	bl	8003f98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004076:	e024      	b.n	80040c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <prvProcessTimerOrBlockTask+0x90>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004090:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <prvProcessTimerOrBlockTask+0x94>)
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	f7fe ffcf 	bl	8003040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040a2:	f7ff fa3b 	bl	800351c <xTaskResumeAll>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <prvProcessTimerOrBlockTask+0x98>)
 80040ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	f3bf 8f6f 	isb	sy
}
 80040bc:	e001      	b.n	80040c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80040be:	f7ff fa2d 	bl	800351c <xTaskResumeAll>
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000c14 	.word	0x20000c14
 80040d0:	20000c18 	.word	0x20000c18
 80040d4:	e000ed04 	.word	0xe000ed04

080040d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040e0:	4b0e      	ldr	r3, [pc, #56]	; (800411c <prvGetNextExpireTime+0x44>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <prvGetNextExpireTime+0x44>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e001      	b.n	800410e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000c10 	.word	0x20000c10

08004120 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004128:	f7ff fa94 	bl	8003654 <xTaskGetTickCount>
 800412c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800412e:	4b0b      	ldr	r3, [pc, #44]	; (800415c <prvSampleTimeNow+0x3c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d205      	bcs.n	8004144 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004138:	f000 f904 	bl	8004344 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e002      	b.n	800414a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800414a:	4a04      	ldr	r2, [pc, #16]	; (800415c <prvSampleTimeNow+0x3c>)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004150:	68fb      	ldr	r3, [r7, #12]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000c20 	.word	0x20000c20

08004160 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d812      	bhi.n	80041ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	1ad2      	subs	r2, r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004194:	2301      	movs	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e01b      	b.n	80041d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <prvInsertTimerInActiveList+0x7c>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f7fe fa49 	bl	800263c <vListInsert>
 80041aa:	e012      	b.n	80041d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d206      	bcs.n	80041c2 <prvInsertTimerInActiveList+0x62>
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e007      	b.n	80041d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <prvInsertTimerInActiveList+0x80>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f7fe fa35 	bl	800263c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80041d2:	697b      	ldr	r3, [r7, #20]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000c14 	.word	0x20000c14
 80041e0:	20000c10 	.word	0x20000c10

080041e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08e      	sub	sp, #56	; 0x38
 80041e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041ea:	e099      	b.n	8004320 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da17      	bge.n	8004222 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	3304      	adds	r3, #4
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <prvProcessReceivedCommands+0x2e>
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	e7fe      	b.n	8004210 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004218:	6850      	ldr	r0, [r2, #4]
 800421a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	4611      	mov	r1, r2
 8004220:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	db7a      	blt.n	800431e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	3304      	adds	r3, #4
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fa37 	bl	80026ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800423e:	463b      	mov	r3, r7
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff6d 	bl	8004120 <prvSampleTimeNow>
 8004246:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b09      	cmp	r3, #9
 800424c:	d868      	bhi.n	8004320 <prvProcessReceivedCommands+0x13c>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <prvProcessReceivedCommands+0x70>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	0800427d 	.word	0x0800427d
 8004258:	0800427d 	.word	0x0800427d
 800425c:	0800427d 	.word	0x0800427d
 8004260:	08004321 	.word	0x08004321
 8004264:	080042d7 	.word	0x080042d7
 8004268:	0800430d 	.word	0x0800430d
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800427d 	.word	0x0800427d
 8004274:	08004321 	.word	0x08004321
 8004278:	080042d7 	.word	0x080042d7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	18d1      	adds	r1, r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800428a:	f7ff ff69 	bl	8004160 <prvInsertTimerInActiveList>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d045      	beq.n	8004320 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800429a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d13d      	bne.n	8004320 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	441a      	add	r2, r3
 80042ac:	2300      	movs	r3, #0
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	2100      	movs	r1, #0
 80042b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b6:	f7ff fe23 	bl	8003f00 <xTimerGenericCommand>
 80042ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d12e      	bne.n	8004320 <prvProcessReceivedCommands+0x13c>
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	e7fe      	b.n	80042d4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <prvProcessReceivedCommands+0x114>
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e7fe      	b.n	80042f6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	18d1      	adds	r1, r2, r3
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004306:	f7ff ff2b 	bl	8004160 <prvInsertTimerInActiveList>
					break;
 800430a:	e009      	b.n	8004320 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004318:	f000 fb56 	bl	80049c8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800431c:	e000      	b.n	8004320 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800431e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <prvProcessReceivedCommands+0x15c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1d39      	adds	r1, r7, #4
 8004326:	2200      	movs	r2, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe fc75 	bl	8002c18 <xQueueReceive>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	f47f af5b 	bne.w	80041ec <prvProcessReceivedCommands+0x8>
	}
}
 8004336:	bf00      	nop
 8004338:	3730      	adds	r7, #48	; 0x30
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000c18 	.word	0x20000c18

08004344 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800434a:	e044      	b.n	80043d6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800434c:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <prvSwitchTimerLists+0xb8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <prvSwitchTimerLists+0xb8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3304      	adds	r3, #4
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe f9a1 	bl	80026ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d12d      	bne.n	80043d6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4413      	add	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	429a      	cmp	r2, r3
 800438a:	d90e      	bls.n	80043aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004398:	4b18      	ldr	r3, [pc, #96]	; (80043fc <prvSwitchTimerLists+0xb8>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f7fe f94a 	bl	800263c <vListInsert>
 80043a8:	e015      	b.n	80043d6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043aa:	2300      	movs	r3, #0
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	2300      	movs	r3, #0
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	2100      	movs	r1, #0
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff fda3 	bl	8003f00 <xTimerGenericCommand>
 80043ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <prvSwitchTimerLists+0x92>
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	e7fe      	b.n	80043d4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <prvSwitchTimerLists+0xb8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1b5      	bne.n	800434c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <prvSwitchTimerLists+0xb8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <prvSwitchTimerLists+0xbc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a04      	ldr	r2, [pc, #16]	; (80043fc <prvSwitchTimerLists+0xb8>)
 80043ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80043ee:	4a04      	ldr	r2, [pc, #16]	; (8004400 <prvSwitchTimerLists+0xbc>)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	6013      	str	r3, [r2, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000c10 	.word	0x20000c10
 8004400:	20000c14 	.word	0x20000c14

08004404 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800440a:	f000 f925 	bl	8004658 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <prvCheckForValidListAndQueue+0x60>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d120      	bne.n	8004458 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004416:	4814      	ldr	r0, [pc, #80]	; (8004468 <prvCheckForValidListAndQueue+0x64>)
 8004418:	f7fe f8c2 	bl	80025a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800441c:	4813      	ldr	r0, [pc, #76]	; (800446c <prvCheckForValidListAndQueue+0x68>)
 800441e:	f7fe f8bf 	bl	80025a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <prvCheckForValidListAndQueue+0x6c>)
 8004424:	4a10      	ldr	r2, [pc, #64]	; (8004468 <prvCheckForValidListAndQueue+0x64>)
 8004426:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004428:	4b12      	ldr	r3, [pc, #72]	; (8004474 <prvCheckForValidListAndQueue+0x70>)
 800442a:	4a10      	ldr	r2, [pc, #64]	; (800446c <prvCheckForValidListAndQueue+0x68>)
 800442c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800442e:	2300      	movs	r3, #0
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <prvCheckForValidListAndQueue+0x74>)
 8004434:	4a11      	ldr	r2, [pc, #68]	; (800447c <prvCheckForValidListAndQueue+0x78>)
 8004436:	2110      	movs	r1, #16
 8004438:	200a      	movs	r0, #10
 800443a:	f7fe f9c9 	bl	80027d0 <xQueueGenericCreateStatic>
 800443e:	4602      	mov	r2, r0
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <prvCheckForValidListAndQueue+0x60>)
 8004442:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004444:	4b07      	ldr	r3, [pc, #28]	; (8004464 <prvCheckForValidListAndQueue+0x60>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <prvCheckForValidListAndQueue+0x60>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	490b      	ldr	r1, [pc, #44]	; (8004480 <prvCheckForValidListAndQueue+0x7c>)
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fdcc 	bl	8002ff0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004458:	f000 f92c 	bl	80046b4 <vPortExitCritical>
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000c18 	.word	0x20000c18
 8004468:	20000be8 	.word	0x20000be8
 800446c:	20000bfc 	.word	0x20000bfc
 8004470:	20000c10 	.word	0x20000c10
 8004474:	20000c14 	.word	0x20000c14
 8004478:	20000cc4 	.word	0x20000cc4
 800447c:	20000c24 	.word	0x20000c24
 8004480:	08004cb4 	.word	0x08004cb4

08004484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3b04      	subs	r3, #4
 8004494:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800449c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3b04      	subs	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b04      	subs	r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044b4:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <pxPortInitialiseStack+0x54>)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3b14      	subs	r3, #20
 80044be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b20      	subs	r3, #32
 80044ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044cc:	68fb      	ldr	r3, [r7, #12]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	080044dd 	.word	0x080044dd

080044dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044e6:	4b10      	ldr	r3, [pc, #64]	; (8004528 <prvTaskExitError+0x4c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ee:	d009      	beq.n	8004504 <prvTaskExitError+0x28>
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e7fe      	b.n	8004502 <prvTaskExitError+0x26>
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004516:	bf00      	nop
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0fc      	beq.n	8004518 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	2000000c 	.word	0x2000000c
 800452c:	00000000 	.word	0x00000000

08004530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <pxCurrentTCBConst2>)
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	6808      	ldr	r0, [r1, #0]
 8004536:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800453a:	f380 8809 	msr	PSP, r0
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f380 8811 	msr	BASEPRI, r0
 800454a:	f04e 0e0d 	orr.w	lr, lr, #13
 800454e:	4770      	bx	lr

08004550 <pxCurrentTCBConst2>:
 8004550:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop

08004558 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004558:	4806      	ldr	r0, [pc, #24]	; (8004574 <prvPortStartFirstTask+0x1c>)
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	6800      	ldr	r0, [r0, #0]
 800455e:	f380 8808 	msr	MSP, r0
 8004562:	b662      	cpsie	i
 8004564:	b661      	cpsie	f
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	df00      	svc	0
 8004570:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004572:	bf00      	nop
 8004574:	e000ed08 	.word	0xe000ed08

08004578 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800457e:	4b31      	ldr	r3, [pc, #196]	; (8004644 <xPortStartScheduler+0xcc>)
 8004580:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	22ff      	movs	r2, #255	; 0xff
 800458e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b29      	ldr	r3, [pc, #164]	; (8004648 <xPortStartScheduler+0xd0>)
 80045a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <xPortStartScheduler+0xd4>)
 80045a8:	2207      	movs	r2, #7
 80045aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ac:	e009      	b.n	80045c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045ae:	4b27      	ldr	r3, [pc, #156]	; (800464c <xPortStartScheduler+0xd4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	4a25      	ldr	r2, [pc, #148]	; (800464c <xPortStartScheduler+0xd4>)
 80045b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b80      	cmp	r3, #128	; 0x80
 80045cc:	d0ef      	beq.n	80045ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <xPortStartScheduler+0xd4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1c3 0307 	rsb	r3, r3, #7
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d009      	beq.n	80045ee <xPortStartScheduler+0x76>
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	e7fe      	b.n	80045ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <xPortStartScheduler+0xd4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	4a15      	ldr	r2, [pc, #84]	; (800464c <xPortStartScheduler+0xd4>)
 80045f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <xPortStartScheduler+0xd4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004600:	4a12      	ldr	r2, [pc, #72]	; (800464c <xPortStartScheduler+0xd4>)
 8004602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <xPortStartScheduler+0xd8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <xPortStartScheduler+0xd8>)
 8004612:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <xPortStartScheduler+0xd8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a0c      	ldr	r2, [pc, #48]	; (8004650 <xPortStartScheduler+0xd8>)
 800461e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004624:	f000 f8b0 	bl	8004788 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <xPortStartScheduler+0xdc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800462e:	f7ff ff93 	bl	8004558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004632:	f7ff f8db 	bl	80037ec <vTaskSwitchContext>
	prvTaskExitError();
 8004636:	f7ff ff51 	bl	80044dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	e000e400 	.word	0xe000e400
 8004648:	20000d14 	.word	0x20000d14
 800464c:	20000d18 	.word	0x20000d18
 8004650:	e000ed20 	.word	0xe000ed20
 8004654:	2000000c 	.word	0x2000000c

08004658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <vPortEnterCritical+0x54>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	4a0d      	ldr	r2, [pc, #52]	; (80046ac <vPortEnterCritical+0x54>)
 8004678:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <vPortEnterCritical+0x54>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d10e      	bne.n	80046a0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <vPortEnterCritical+0x58>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <vPortEnterCritical+0x48>
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	e7fe      	b.n	800469e <vPortEnterCritical+0x46>
	}
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <vPortExitCritical+0x48>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <vPortExitCritical+0x22>
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e7fe      	b.n	80046d4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <vPortExitCritical+0x48>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3b01      	subs	r3, #1
 80046dc:	4a07      	ldr	r2, [pc, #28]	; (80046fc <vPortExitCritical+0x48>)
 80046de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <vPortExitCritical+0x48>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <vPortExitCritical+0x3e>
 80046e8:	2300      	movs	r3, #0
 80046ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	2000000c 	.word	0x2000000c

08004700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004700:	f3ef 8009 	mrs	r0, PSP
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <pxCurrentTCBConst>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004710:	6010      	str	r0, [r2, #0]
 8004712:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004716:	f04f 0050 	mov.w	r0, #80	; 0x50
 800471a:	f380 8811 	msr	BASEPRI, r0
 800471e:	f7ff f865 	bl	80037ec <vTaskSwitchContext>
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8811 	msr	BASEPRI, r0
 800472a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800472e:	6819      	ldr	r1, [r3, #0]
 8004730:	6808      	ldr	r0, [r1, #0]
 8004732:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004736:	f380 8809 	msr	PSP, r0
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	4770      	bx	lr

08004740 <pxCurrentTCBConst>:
 8004740:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004760:	f7fe ff86 	bl	8003670 <xTaskIncrementTick>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <SysTick_Handler+0x3c>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <vPortSetupTimerInterrupt+0x30>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004792:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <vPortSetupTimerInterrupt+0x34>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <vPortSetupTimerInterrupt+0x38>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <vPortSetupTimerInterrupt+0x3c>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <vPortSetupTimerInterrupt+0x40>)
 80047a6:	3b01      	subs	r3, #1
 80047a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047aa:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <vPortSetupTimerInterrupt+0x30>)
 80047ac:	2207      	movs	r2, #7
 80047ae:	601a      	str	r2, [r3, #0]
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr
 80047b8:	e000e010 	.word	0xe000e010
 80047bc:	e000e018 	.word	0xe000e018
 80047c0:	20000000 	.word	0x20000000
 80047c4:	10624dd3 	.word	0x10624dd3
 80047c8:	e000e014 	.word	0xe000e014

080047cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80047d2:	f3ef 8305 	mrs	r3, IPSR
 80047d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b0f      	cmp	r3, #15
 80047dc:	d913      	bls.n	8004806 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <vPortValidateInterruptPriority+0x68>)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <vPortValidateInterruptPriority+0x6c>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	7afa      	ldrb	r2, [r7, #11]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d209      	bcs.n	8004806 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	e7fe      	b.n	8004804 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <vPortValidateInterruptPriority+0x70>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800480e:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <vPortValidateInterruptPriority+0x74>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d909      	bls.n	800482a <vPortValidateInterruptPriority+0x5e>
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	e7fe      	b.n	8004828 <vPortValidateInterruptPriority+0x5c>
	}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	e000e3f0 	.word	0xe000e3f0
 8004838:	20000d14 	.word	0x20000d14
 800483c:	e000ed0c 	.word	0xe000ed0c
 8004840:	20000d18 	.word	0x20000d18

08004844 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004850:	f7fe fe56 	bl	8003500 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004854:	4b57      	ldr	r3, [pc, #348]	; (80049b4 <pvPortMalloc+0x170>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800485c:	f000 f90c 	bl	8004a78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004860:	4b55      	ldr	r3, [pc, #340]	; (80049b8 <pvPortMalloc+0x174>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	f040 808c 	bne.w	8004986 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01c      	beq.n	80048ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004874:	2208      	movs	r2, #8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4413      	add	r3, r2
 800487a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	2b00      	cmp	r3, #0
 8004884:	d013      	beq.n	80048ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f023 0307 	bic.w	r3, r3, #7
 800488c:	3308      	adds	r3, #8
 800488e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <pvPortMalloc+0x6a>
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e7fe      	b.n	80048ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d068      	beq.n	8004986 <pvPortMalloc+0x142>
 80048b4:	4b41      	ldr	r3, [pc, #260]	; (80049bc <pvPortMalloc+0x178>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d863      	bhi.n	8004986 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048be:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <pvPortMalloc+0x17c>)
 80048c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048c2:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <pvPortMalloc+0x17c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048c8:	e004      	b.n	80048d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d903      	bls.n	80048e6 <pvPortMalloc+0xa2>
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f1      	bne.n	80048ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048e6:	4b33      	ldr	r3, [pc, #204]	; (80049b4 <pvPortMalloc+0x170>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d04a      	beq.n	8004986 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2208      	movs	r2, #8
 80048f6:	4413      	add	r3, r2
 80048f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	1ad2      	subs	r2, r2, r3
 800490a:	2308      	movs	r3, #8
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	429a      	cmp	r2, r3
 8004910:	d91e      	bls.n	8004950 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4413      	add	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <pvPortMalloc+0xf4>
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	e7fe      	b.n	8004936 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800494a:	69b8      	ldr	r0, [r7, #24]
 800494c:	f000 f8f6 	bl	8004b3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004950:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <pvPortMalloc+0x178>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	4a18      	ldr	r2, [pc, #96]	; (80049bc <pvPortMalloc+0x178>)
 800495c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800495e:	4b17      	ldr	r3, [pc, #92]	; (80049bc <pvPortMalloc+0x178>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <pvPortMalloc+0x180>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d203      	bcs.n	8004972 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800496a:	4b14      	ldr	r3, [pc, #80]	; (80049bc <pvPortMalloc+0x178>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <pvPortMalloc+0x180>)
 8004970:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <pvPortMalloc+0x174>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	431a      	orrs	r2, r3
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004986:	f7fe fdc9 	bl	800351c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	2b00      	cmp	r3, #0
 8004992:	d009      	beq.n	80049a8 <pvPortMalloc+0x164>
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e7fe      	b.n	80049a6 <pvPortMalloc+0x162>
	return pvReturn;
 80049a8:	69fb      	ldr	r3, [r7, #28]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3728      	adds	r7, #40	; 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20001924 	.word	0x20001924
 80049b8:	20001930 	.word	0x20001930
 80049bc:	20001928 	.word	0x20001928
 80049c0:	2000191c 	.word	0x2000191c
 80049c4:	2000192c 	.word	0x2000192c

080049c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d046      	beq.n	8004a68 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049da:	2308      	movs	r3, #8
 80049dc:	425b      	negs	r3, r3
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4413      	add	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <vPortFree+0xa8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <vPortFree+0x42>
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e7fe      	b.n	8004a08 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <vPortFree+0x5e>
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	e7fe      	b.n	8004a24 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <vPortFree+0xa8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d019      	beq.n	8004a68 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d115      	bne.n	8004a68 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <vPortFree+0xa8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a4c:	f7fe fd58 	bl	8003500 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <vPortFree+0xac>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4413      	add	r3, r2
 8004a5a:	4a06      	ldr	r2, [pc, #24]	; (8004a74 <vPortFree+0xac>)
 8004a5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a5e:	6938      	ldr	r0, [r7, #16]
 8004a60:	f000 f86c 	bl	8004b3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a64:	f7fe fd5a 	bl	800351c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a68:	bf00      	nop
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20001930 	.word	0x20001930
 8004a74:	20001928 	.word	0x20001928

08004a78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <prvHeapInit+0xac>)
 8004a86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00c      	beq.n	8004aac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3307      	adds	r3, #7
 8004a96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0307 	bic.w	r3, r3, #7
 8004a9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <prvHeapInit+0xac>)
 8004aa8:	4413      	add	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <prvHeapInit+0xb0>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <prvHeapInit+0xb0>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0307 	bic.w	r3, r3, #7
 8004ad2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a15      	ldr	r2, [pc, #84]	; (8004b2c <prvHeapInit+0xb4>)
 8004ad8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ada:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <prvHeapInit+0xb4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <prvHeapInit+0xb4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	1ad2      	subs	r2, r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <prvHeapInit+0xb4>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <prvHeapInit+0xb8>)
 8004b06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <prvHeapInit+0xbc>)
 8004b0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <prvHeapInit+0xc0>)
 8004b12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b16:	601a      	str	r2, [r3, #0]
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000d1c 	.word	0x20000d1c
 8004b28:	2000191c 	.word	0x2000191c
 8004b2c:	20001924 	.word	0x20001924
 8004b30:	2000192c 	.word	0x2000192c
 8004b34:	20001928 	.word	0x20001928
 8004b38:	20001930 	.word	0x20001930

08004b3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b44:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <prvInsertBlockIntoFreeList+0xa8>)
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e002      	b.n	8004b50 <prvInsertBlockIntoFreeList+0x14>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d8f7      	bhi.n	8004b4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	4413      	add	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d108      	bne.n	8004b7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	441a      	add	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d118      	bne.n	8004bc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <prvInsertBlockIntoFreeList+0xac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d00d      	beq.n	8004bba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	441a      	add	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e008      	b.n	8004bcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <prvInsertBlockIntoFreeList+0xac>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e003      	b.n	8004bcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d002      	beq.n	8004bda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	2000191c 	.word	0x2000191c
 8004be8:	20001924 	.word	0x20001924

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	2500      	movs	r5, #0
 8004bf0:	4e0c      	ldr	r6, [pc, #48]	; (8004c24 <__libc_init_array+0x38>)
 8004bf2:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf4:	1ba4      	subs	r4, r4, r6
 8004bf6:	10a4      	asrs	r4, r4, #2
 8004bf8:	42a5      	cmp	r5, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	f000 f82e 	bl	8004c5c <_init>
 8004c00:	2500      	movs	r5, #0
 8004c02:	4e0a      	ldr	r6, [pc, #40]	; (8004c2c <__libc_init_array+0x40>)
 8004c04:	4c0a      	ldr	r4, [pc, #40]	; (8004c30 <__libc_init_array+0x44>)
 8004c06:	1ba4      	subs	r4, r4, r6
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	42a5      	cmp	r5, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c14:	4798      	blx	r3
 8004c16:	3501      	adds	r5, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c1e:	4798      	blx	r3
 8004c20:	3501      	adds	r5, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004d1c 	.word	0x08004d1c
 8004c28:	08004d1c 	.word	0x08004d1c
 8004c2c:	08004d1c 	.word	0x08004d1c
 8004c30:	08004d20 	.word	0x08004d20

08004c34 <memcpy>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	1e43      	subs	r3, r0, #1
 8004c38:	440a      	add	r2, r1
 8004c3a:	4291      	cmp	r1, r2
 8004c3c:	d100      	bne.n	8004c40 <memcpy+0xc>
 8004c3e:	bd10      	pop	{r4, pc}
 8004c40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c48:	e7f7      	b.n	8004c3a <memcpy+0x6>

08004c4a <memset>:
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4402      	add	r2, r0
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d100      	bne.n	8004c54 <memset+0xa>
 8004c52:	4770      	bx	lr
 8004c54:	f803 1b01 	strb.w	r1, [r3], #1
 8004c58:	e7f9      	b.n	8004c4e <memset+0x4>
	...

08004c5c <_init>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr

08004c68 <_fini>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr
