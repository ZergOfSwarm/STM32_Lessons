
RGB_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004d04  08004d04  00014d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dac  08004dac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004dac  08004dac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dac  08004dac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  20000010  08004dc4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c6c  08004dc4  00021c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b4c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000291a  00000000  00000000  00034b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  000374a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00038568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002576  00000000  00000000  00039508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d773  00000000  00000000  0003ba7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000906d2  00000000  00000000  000491f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d98c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e0  00000000  00000000  000d9940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004cec 	.word	0x08004cec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004cec 	.word	0x08004cec

08000150 <rgb_set>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// set values to the led
void rgb_set(uint8_t red, uint8_t green, uint8_t blue) {
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	460b      	mov	r3, r1
 800015c:	71bb      	strb	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]
	htim2.Instance->CCR1 = 255 - red;   // Если RGB с общим катодом то htim2.Instance->CCR1 = red;
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000168:	4b09      	ldr	r3, [pc, #36]	; (8000190 <rgb_set+0x40>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR2 = 255 - green; // Если RGB с общим катодом то htim2.Instance->CCR1 = green;
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <rgb_set+0x40>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR3 = 255 - blue;  // Если RGB с общим катодом то htim2.Instance->CCR1 = blue;
 800017a:	797b      	ldrb	r3, [r7, #5]
 800017c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <rgb_set+0x40>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20001b98 	.word	0x20001b98

08000194 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000198:	f000 fac0 	bl	800071c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800019c:	f000 f834 	bl	8000208 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001a0:	f000 f904 	bl	80003ac <MX_GPIO_Init>
	MX_TIM2_Init();
 80001a4:	f000 f876 	bl	8000294 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001a8:	2100      	movs	r1, #0
 80001aa:	4810      	ldr	r0, [pc, #64]	; (80001ec <main+0x58>)
 80001ac:	f001 fa76 	bl	800169c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001b0:	2104      	movs	r1, #4
 80001b2:	480e      	ldr	r0, [pc, #56]	; (80001ec <main+0x58>)
 80001b4:	f001 fa72 	bl	800169c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80001b8:	2108      	movs	r1, #8
 80001ba:	480c      	ldr	r0, [pc, #48]	; (80001ec <main+0x58>)
 80001bc:	f001 fa6e 	bl	800169c <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80001c0:	f002 f8c4 	bl	800234c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80001c4:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <main+0x5c>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	480a      	ldr	r0, [pc, #40]	; (80001f4 <main+0x60>)
 80001ca:	f002 f925 	bl	8002418 <osThreadNew>
 80001ce:	4602      	mov	r2, r0
 80001d0:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <main+0x64>)
 80001d2:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of my_RGB_LED_Task */
	my_RGB_LED_TaskHandle = osThreadNew(Start_RGB_LED_Task, NULL,
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <main+0x68>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	4809      	ldr	r0, [pc, #36]	; (8000200 <main+0x6c>)
 80001da:	f002 f91d 	bl	8002418 <osThreadNew>
 80001de:	4602      	mov	r2, r0
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <main+0x70>)
 80001e2:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80001e4:	f002 f8e4 	bl	80023b0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80001e8:	e7fe      	b.n	80001e8 <main+0x54>
 80001ea:	bf00      	nop
 80001ec:	20001b98 	.word	0x20001b98
 80001f0:	08004d4c 	.word	0x08004d4c
 80001f4:	08000409 	.word	0x08000409
 80001f8:	20001990 	.word	0x20001990
 80001fc:	08004d70 	.word	0x08004d70
 8000200:	08000419 	.word	0x08000419
 8000204:	20001b94 	.word	0x20001b94

08000208 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f004 fd5f 	bl	8004cda <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022a:	2301      	movs	r3, #1
 800022c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000232:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fcf1 	bl	8000c38 <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x58>
		Error_Handler();
 800025c:	f000 f932 	bl	80004c4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f000 ff5c 	bl	8001138 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x82>
		Error_Handler();
 8000286:	f000 f91d 	bl	80004c4 <Error_Handler>
	}
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b08e      	sub	sp, #56	; 0x38
 8000298:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800029a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80002a8:	f107 0320 	add.w	r3, r7, #32
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]
 80002c2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80002c4:	4b38      	ldr	r3, [pc, #224]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1107 - 1;
 80002cc:	4b36      	ldr	r3, [pc, #216]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002ce:	f240 4252 	movw	r2, #1106	; 0x452
 80002d2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d4:	4b34      	ldr	r3, [pc, #208]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 255 - 1;
 80002da:	4b33      	ldr	r3, [pc, #204]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002dc:	22fe      	movs	r2, #254	; 0xfe
 80002de:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e0:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80002ec:	482e      	ldr	r0, [pc, #184]	; (80003a8 <MX_TIM2_Init+0x114>)
 80002ee:	f001 f8db 	bl	80014a8 <HAL_TIM_Base_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_TIM2_Init+0x68>
		Error_Handler();
 80002f8:	f000 f8e4 	bl	80004c4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000300:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000306:	4619      	mov	r1, r3
 8000308:	4827      	ldr	r0, [pc, #156]	; (80003a8 <MX_TIM2_Init+0x114>)
 800030a:	f001 fc2f 	bl	8001b6c <HAL_TIM_ConfigClockSource>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_TIM2_Init+0x84>
		Error_Handler();
 8000314:	f000 f8d6 	bl	80004c4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000318:	4823      	ldr	r0, [pc, #140]	; (80003a8 <MX_TIM2_Init+0x114>)
 800031a:	f001 f967 	bl	80015ec <HAL_TIM_PWM_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM2_Init+0x94>
		Error_Handler();
 8000324:	f000 f8ce 	bl	80004c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000328:	2300      	movs	r3, #0
 800032a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032c:	2300      	movs	r3, #0
 800032e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000330:	f107 0320 	add.w	r3, r7, #32
 8000334:	4619      	mov	r1, r3
 8000336:	481c      	ldr	r0, [pc, #112]	; (80003a8 <MX_TIM2_Init+0x114>)
 8000338:	f001 ff98 	bl	800226c <HAL_TIMEx_MasterConfigSynchronization>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000342:	f000 f8bf 	bl	80004c4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000346:	2360      	movs	r3, #96	; 0x60
 8000348:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	4619      	mov	r1, r3
 800035c:	4812      	ldr	r0, [pc, #72]	; (80003a8 <MX_TIM2_Init+0x114>)
 800035e:	f001 fb47 	bl	80019f0 <HAL_TIM_PWM_ConfigChannel>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000368:	f000 f8ac 	bl	80004c4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2204      	movs	r2, #4
 8000370:	4619      	mov	r1, r3
 8000372:	480d      	ldr	r0, [pc, #52]	; (80003a8 <MX_TIM2_Init+0x114>)
 8000374:	f001 fb3c 	bl	80019f0 <HAL_TIM_PWM_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 800037e:	f000 f8a1 	bl	80004c4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2208      	movs	r2, #8
 8000386:	4619      	mov	r1, r3
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <MX_TIM2_Init+0x114>)
 800038a:	f001 fb31 	bl	80019f0 <HAL_TIM_PWM_ConfigChannel>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8000394:	f000 f896 	bl	80004c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000398:	4803      	ldr	r0, [pc, #12]	; (80003a8 <MX_TIM2_Init+0x114>)
 800039a:	f000 f8eb 	bl	8000574 <HAL_TIM_MspPostInit>

}
 800039e:	bf00      	nop
 80003a0:	3738      	adds	r7, #56	; 0x38
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20001b98 	.word	0x20001b98

080003ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_GPIO_Init+0x58>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a13      	ldr	r2, [pc, #76]	; (8000404 <MX_GPIO_Init+0x58>)
 80003b8:	f043 0320 	orr.w	r3, r3, #32
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_GPIO_Init+0x58>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0320 	and.w	r3, r3, #32
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_GPIO_Init+0x58>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <MX_GPIO_Init+0x58>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_GPIO_Init+0x58>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f003 0304 	and.w	r3, r3, #4
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_GPIO_Init+0x58>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a07      	ldr	r2, [pc, #28]	; (8000404 <MX_GPIO_Init+0x58>)
 80003e8:	f043 0308 	orr.w	r3, r3, #8
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b05      	ldr	r3, [pc, #20]	; (8000404 <MX_GPIO_Init+0x58>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0308 	and.w	r3, r3, #8
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000410:	2001      	movs	r0, #1
 8000412:	f002 f8ab 	bl	800256c <osDelay>
 8000416:	e7fb      	b.n	8000410 <StartDefaultTask+0x8>

08000418 <Start_RGB_LED_Task>:
 * @brief Function implementing the my_RGB_LED_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RGB_LED_Task */
void Start_RGB_LED_Task(void *argument) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_RGB_LED_Task */
	/* Infinite loop */
	for (;;) {
		rgb_set(255, 0, 0);   // red only
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	20ff      	movs	r0, #255	; 0xff
 8000426:	f7ff fe93 	bl	8000150 <rgb_set>
		HAL_Delay(1000);
 800042a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042e:	f000 f9a7 	bl	8000780 <HAL_Delay>

		rgb_set(0, 255, 0);   // green only
 8000432:	2200      	movs	r2, #0
 8000434:	21ff      	movs	r1, #255	; 0xff
 8000436:	2000      	movs	r0, #0
 8000438:	f7ff fe8a 	bl	8000150 <rgb_set>
		HAL_Delay(1000);
 800043c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000440:	f000 f99e 	bl	8000780 <HAL_Delay>

		rgb_set(0, 0, 255);  // blue only
 8000444:	22ff      	movs	r2, #255	; 0xff
 8000446:	2100      	movs	r1, #0
 8000448:	2000      	movs	r0, #0
 800044a:	f7ff fe81 	bl	8000150 <rgb_set>
		HAL_Delay(1000);
 800044e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000452:	f000 f995 	bl	8000780 <HAL_Delay>

		rgb_set(255, 255, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	21ff      	movs	r1, #255	; 0xff
 800045a:	20ff      	movs	r0, #255	; 0xff
 800045c:	f7ff fe78 	bl	8000150 <rgb_set>
		HAL_Delay(1000);
 8000460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000464:	f000 f98c 	bl	8000780 <HAL_Delay>

		rgb_set(0, 255, 255);
 8000468:	22ff      	movs	r2, #255	; 0xff
 800046a:	21ff      	movs	r1, #255	; 0xff
 800046c:	2000      	movs	r0, #0
 800046e:	f7ff fe6f 	bl	8000150 <rgb_set>
		HAL_Delay(1000);
 8000472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000476:	f000 f983 	bl	8000780 <HAL_Delay>

		rgb_set(255, 0, 255);
 800047a:	22ff      	movs	r2, #255	; 0xff
 800047c:	2100      	movs	r1, #0
 800047e:	20ff      	movs	r0, #255	; 0xff
 8000480:	f7ff fe66 	bl	8000150 <rgb_set>
		HAL_Delay(1000);
 8000484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000488:	f000 f97a 	bl	8000780 <HAL_Delay>

		rgb_set(192, 192, 192);
 800048c:	22c0      	movs	r2, #192	; 0xc0
 800048e:	21c0      	movs	r1, #192	; 0xc0
 8000490:	20c0      	movs	r0, #192	; 0xc0
 8000492:	f7ff fe5d 	bl	8000150 <rgb_set>
		HAL_Delay(1000);
 8000496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049a:	f000 f971 	bl	8000780 <HAL_Delay>
		rgb_set(255, 0, 0);   // red only
 800049e:	e7bf      	b.n	8000420 <Start_RGB_LED_Task+0x8>

080004a0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d101      	bne.n	80004b6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80004b2:	f000 f949 	bl	8000748 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40000800 	.word	0x40000800

080004c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004ca:	e7fe      	b.n	80004ca <Error_Handler+0x6>

080004cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <HAL_MspInit+0x68>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a17      	ldr	r2, [pc, #92]	; (8000534 <HAL_MspInit+0x68>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <HAL_MspInit+0x68>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_MspInit+0x68>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a11      	ldr	r2, [pc, #68]	; (8000534 <HAL_MspInit+0x68>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x68>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	210f      	movs	r1, #15
 8000506:	f06f 0001 	mvn.w	r0, #1
 800050a:	f000 fa10 	bl	800092e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_MspInit+0x6c>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_MspInit+0x6c>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	40010000 	.word	0x40010000

0800053c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800054c:	d10b      	bne.n	8000566 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <HAL_TIM_Base_MspInit+0x34>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_TIM_Base_MspInit+0x34>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_TIM_Base_MspInit+0x34>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000592:	d117      	bne.n	80005c4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <HAL_TIM_MspPostInit+0x58>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <HAL_TIM_MspPostInit+0x58>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_TIM_MspPostInit+0x58>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80005ac:	2307      	movs	r3, #7
 80005ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b0:	2302      	movs	r3, #2
 80005b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <HAL_TIM_MspPostInit+0x5c>)
 80005c0:	f000 f9e0 	bl	8000984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010800 	.word	0x40010800

080005d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	201e      	movs	r0, #30
 80005ea:	f000 f9a0 	bl	800092e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005ee:	201e      	movs	r0, #30
 80005f0:	f000 f9b9 	bl	8000966 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <HAL_InitTick+0xa0>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <HAL_InitTick+0xa0>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	61d3      	str	r3, [r2, #28]
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <HAL_InitTick+0xa0>)
 8000602:	69db      	ldr	r3, [r3, #28]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800060c:	f107 0210 	add.w	r2, r7, #16
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fef8 	bl	800140c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800061c:	f000 fee2 	bl	80013e4 <HAL_RCC_GetPCLK1Freq>
 8000620:	4603      	mov	r3, r0
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <HAL_InitTick+0xa4>)
 800062a:	fba2 2303 	umull	r2, r3, r2, r3
 800062e:	0c9b      	lsrs	r3, r3, #18
 8000630:	3b01      	subs	r3, #1
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <HAL_InitTick+0xa8>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <HAL_InitTick+0xac>)
 8000638:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <HAL_InitTick+0xa8>)
 800063c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000640:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_InitTick+0xa8>)
 8000644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000646:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_InitTick+0xa8>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <HAL_InitTick+0xa8>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000654:	4809      	ldr	r0, [pc, #36]	; (800067c <HAL_InitTick+0xa8>)
 8000656:	f000 ff27 	bl	80014a8 <HAL_TIM_Base_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d104      	bne.n	800066a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000660:	4806      	ldr	r0, [pc, #24]	; (800067c <HAL_InitTick+0xa8>)
 8000662:	f000 ff71 	bl	8001548 <HAL_TIM_Base_Start_IT>
 8000666:	4603      	mov	r3, r0
 8000668:	e000      	b.n	800066c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3730      	adds	r7, #48	; 0x30
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	431bde83 	.word	0x431bde83
 800067c:	20001be0 	.word	0x20001be0
 8000680:	40000800 	.word	0x40000800

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
	...

080006b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <TIM4_IRQHandler+0x10>)
 80006b6:	f001 f893 	bl	80017e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20001be0 	.word	0x20001be0

080006c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006d2:	e003      	b.n	80006dc <LoopCopyDataInit>

080006d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006da:	3104      	adds	r1, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006e4:	d3f6      	bcc.n	80006d4 <CopyDataInit>
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006e8:	e002      	b.n	80006f0 <LoopFillZerobss>

080006ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006ec:	f842 3b04 	str.w	r3, [r2], #4

080006f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006f4:	d3f9      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f6:	f7ff ffe5 	bl	80006c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fa:	f004 fabf 	bl	8004c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fd49 	bl	8000194 <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r3, =_sidata
 8000704:	08004db4 	.word	0x08004db4
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800070c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000710:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000714:	20001c6c 	.word	0x20001c6c

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f8f3 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff ff4e 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fec8 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x20>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	4a03      	ldr	r2, [pc, #12]	; (8000768 <HAL_IncTick+0x20>)
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000008 	.word	0x20000008
 8000768:	20001c28 	.word	0x20001c28

0800076c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20001c28 	.word	0x20001c28

08000780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000788:	f7ff fff0 	bl	800076c <HAL_GetTick>
 800078c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000798:	d005      	beq.n	80007a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_Delay+0x40>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a6:	bf00      	nop
 80007a8:	f7ff ffe0 	bl	800076c <HAL_GetTick>
 80007ac:	4602      	mov	r2, r0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d8f7      	bhi.n	80007a8 <HAL_Delay+0x28>
  {
  }
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4906      	ldr	r1, [pc, #24]	; (800085c <__NVIC_EnableIRQ+0x34>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	; (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	; (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	; 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff4f 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff64 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ffb2 	bl	80008b4 <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff81 	bl	8000860 <__NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff57 	bl	8000828 <__NVIC_EnableIRQ>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000984:	b480      	push	{r7}
 8000986:	b08b      	sub	sp, #44	; 0x2c
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000996:	e127      	b.n	8000be8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000998:	2201      	movs	r2, #1
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	4013      	ands	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	f040 8116 	bne.w	8000be2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b12      	cmp	r3, #18
 80009bc:	d034      	beq.n	8000a28 <HAL_GPIO_Init+0xa4>
 80009be:	2b12      	cmp	r3, #18
 80009c0:	d80d      	bhi.n	80009de <HAL_GPIO_Init+0x5a>
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d02b      	beq.n	8000a1e <HAL_GPIO_Init+0x9a>
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d804      	bhi.n	80009d4 <HAL_GPIO_Init+0x50>
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d031      	beq.n	8000a32 <HAL_GPIO_Init+0xae>
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d01c      	beq.n	8000a0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009d2:	e048      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d043      	beq.n	8000a60 <HAL_GPIO_Init+0xdc>
 80009d8:	2b11      	cmp	r3, #17
 80009da:	d01b      	beq.n	8000a14 <HAL_GPIO_Init+0x90>
          break;
 80009dc:	e043      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009de:	4a89      	ldr	r2, [pc, #548]	; (8000c04 <HAL_GPIO_Init+0x280>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d026      	beq.n	8000a32 <HAL_GPIO_Init+0xae>
 80009e4:	4a87      	ldr	r2, [pc, #540]	; (8000c04 <HAL_GPIO_Init+0x280>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d806      	bhi.n	80009f8 <HAL_GPIO_Init+0x74>
 80009ea:	4a87      	ldr	r2, [pc, #540]	; (8000c08 <HAL_GPIO_Init+0x284>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d020      	beq.n	8000a32 <HAL_GPIO_Init+0xae>
 80009f0:	4a86      	ldr	r2, [pc, #536]	; (8000c0c <HAL_GPIO_Init+0x288>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d01d      	beq.n	8000a32 <HAL_GPIO_Init+0xae>
          break;
 80009f6:	e036      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009f8:	4a85      	ldr	r2, [pc, #532]	; (8000c10 <HAL_GPIO_Init+0x28c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d019      	beq.n	8000a32 <HAL_GPIO_Init+0xae>
 80009fe:	4a85      	ldr	r2, [pc, #532]	; (8000c14 <HAL_GPIO_Init+0x290>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d016      	beq.n	8000a32 <HAL_GPIO_Init+0xae>
 8000a04:	4a84      	ldr	r2, [pc, #528]	; (8000c18 <HAL_GPIO_Init+0x294>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0xae>
          break;
 8000a0a:	e02c      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	623b      	str	r3, [r7, #32]
          break;
 8000a12:	e028      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e023      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	3308      	adds	r3, #8
 8000a24:	623b      	str	r3, [r7, #32]
          break;
 8000a26:	e01e      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	330c      	adds	r3, #12
 8000a2e:	623b      	str	r3, [r7, #32]
          break;
 8000a30:	e019      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	623b      	str	r3, [r7, #32]
          break;
 8000a3e:	e012      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d105      	bne.n	8000a54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	611a      	str	r2, [r3, #16]
          break;
 8000a52:	e008      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a54:	2308      	movs	r3, #8
 8000a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	615a      	str	r2, [r3, #20]
          break;
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
          break;
 8000a64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	2bff      	cmp	r3, #255	; 0xff
 8000a6a:	d801      	bhi.n	8000a70 <HAL_GPIO_Init+0xec>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	e001      	b.n	8000a74 <HAL_GPIO_Init+0xf0>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3304      	adds	r3, #4
 8000a74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	2bff      	cmp	r3, #255	; 0xff
 8000a7a:	d802      	bhi.n	8000a82 <HAL_GPIO_Init+0xfe>
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	e002      	b.n	8000a88 <HAL_GPIO_Init+0x104>
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	3b08      	subs	r3, #8
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	210f      	movs	r1, #15
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	401a      	ands	r2, r3
 8000a9a:	6a39      	ldr	r1, [r7, #32]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 8096 	beq.w	8000be2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab6:	4b59      	ldr	r3, [pc, #356]	; (8000c1c <HAL_GPIO_Init+0x298>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a58      	ldr	r2, [pc, #352]	; (8000c1c <HAL_GPIO_Init+0x298>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b56      	ldr	r3, [pc, #344]	; (8000c1c <HAL_GPIO_Init+0x298>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ace:	4a54      	ldr	r2, [pc, #336]	; (8000c20 <HAL_GPIO_Init+0x29c>)
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ada:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	4013      	ands	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a4b      	ldr	r2, [pc, #300]	; (8000c24 <HAL_GPIO_Init+0x2a0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d013      	beq.n	8000b22 <HAL_GPIO_Init+0x19e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4a      	ldr	r2, [pc, #296]	; (8000c28 <HAL_GPIO_Init+0x2a4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d00d      	beq.n	8000b1e <HAL_GPIO_Init+0x19a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a49      	ldr	r2, [pc, #292]	; (8000c2c <HAL_GPIO_Init+0x2a8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d007      	beq.n	8000b1a <HAL_GPIO_Init+0x196>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a48      	ldr	r2, [pc, #288]	; (8000c30 <HAL_GPIO_Init+0x2ac>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_GPIO_Init+0x192>
 8000b12:	2303      	movs	r3, #3
 8000b14:	e006      	b.n	8000b24 <HAL_GPIO_Init+0x1a0>
 8000b16:	2304      	movs	r3, #4
 8000b18:	e004      	b.n	8000b24 <HAL_GPIO_Init+0x1a0>
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	e002      	b.n	8000b24 <HAL_GPIO_Init+0x1a0>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <HAL_GPIO_Init+0x1a0>
 8000b22:	2300      	movs	r3, #0
 8000b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b26:	f002 0203 	and.w	r2, r2, #3
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	4093      	lsls	r3, r2
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b34:	493a      	ldr	r1, [pc, #232]	; (8000c20 <HAL_GPIO_Init+0x29c>)
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b4e:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4938      	ldr	r1, [pc, #224]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	600b      	str	r3, [r1, #0]
 8000b5a:	e006      	b.n	8000b6a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	4933      	ldr	r1, [pc, #204]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d006      	beq.n	8000b84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	492e      	ldr	r1, [pc, #184]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	604b      	str	r3, [r1, #4]
 8000b82:	e006      	b.n	8000b92 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	4929      	ldr	r1, [pc, #164]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000b8e:	4013      	ands	r3, r2
 8000b90:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d006      	beq.n	8000bac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	4924      	ldr	r1, [pc, #144]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	608b      	str	r3, [r1, #8]
 8000baa:	e006      	b.n	8000bba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	491f      	ldr	r1, [pc, #124]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	491a      	ldr	r1, [pc, #104]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60cb      	str	r3, [r1, #12]
 8000bd2:	e006      	b.n	8000be2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	4915      	ldr	r1, [pc, #84]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	3301      	adds	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f47f aed0 	bne.w	8000998 <HAL_GPIO_Init+0x14>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	372c      	adds	r7, #44	; 0x2c
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	10210000 	.word	0x10210000
 8000c08:	10110000 	.word	0x10110000
 8000c0c:	10120000 	.word	0x10120000
 8000c10:	10310000 	.word	0x10310000
 8000c14:	10320000 	.word	0x10320000
 8000c18:	10220000 	.word	0x10220000
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000
 8000c24:	40010800 	.word	0x40010800
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	40011000 	.word	0x40011000
 8000c30:	40011400 	.word	0x40011400
 8000c34:	40010400 	.word	0x40010400

08000c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e26c      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8087 	beq.w	8000d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c58:	4b92      	ldr	r3, [pc, #584]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d00c      	beq.n	8000c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c64:	4b8f      	ldr	r3, [pc, #572]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d112      	bne.n	8000c96 <HAL_RCC_OscConfig+0x5e>
 8000c70:	4b8c      	ldr	r3, [pc, #560]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7c:	d10b      	bne.n	8000c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7e:	4b89      	ldr	r3, [pc, #548]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d06c      	beq.n	8000d64 <HAL_RCC_OscConfig+0x12c>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d168      	bne.n	8000d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e246      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c9e:	d106      	bne.n	8000cae <HAL_RCC_OscConfig+0x76>
 8000ca0:	4b80      	ldr	r3, [pc, #512]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a7f      	ldr	r2, [pc, #508]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e02e      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x98>
 8000cb6:	4b7b      	ldr	r3, [pc, #492]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a7a      	ldr	r2, [pc, #488]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b78      	ldr	r3, [pc, #480]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a77      	ldr	r2, [pc, #476]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e01d      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0xbc>
 8000cda:	4b72      	ldr	r3, [pc, #456]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a71      	ldr	r2, [pc, #452]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b6f      	ldr	r3, [pc, #444]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a6e      	ldr	r2, [pc, #440]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e00b      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cf4:	4b6b      	ldr	r3, [pc, #428]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a6a      	ldr	r2, [pc, #424]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b68      	ldr	r3, [pc, #416]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a67      	ldr	r2, [pc, #412]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d013      	beq.n	8000d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fd2a 	bl	800076c <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d1c:	f7ff fd26 	bl	800076c <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	; 0x64
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e1fa      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f0      	beq.n	8000d1c <HAL_RCC_OscConfig+0xe4>
 8000d3a:	e014      	b.n	8000d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fd16 	bl	800076c <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fd12 	bl	800076c <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	; 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e1e6      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	4b53      	ldr	r3, [pc, #332]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0x10c>
 8000d62:	e000      	b.n	8000d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d063      	beq.n	8000e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d7e:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d11c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x18c>
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d116      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d005      	beq.n	8000dae <HAL_RCC_OscConfig+0x176>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d001      	beq.n	8000dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e1ba      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4939      	ldr	r1, [pc, #228]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	e03a      	b.n	8000e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d020      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dcc:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fccb 	bl	800076c <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fcc7 	bl	800076c <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e19b      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f0      	beq.n	8000dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4927      	ldr	r1, [pc, #156]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
 8000e0c:	e015      	b.n	8000e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fcaa 	bl	800076c <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fca6 	bl	800076c <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e17a      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d03a      	beq.n	8000ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d019      	beq.n	8000e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_RCC_OscConfig+0x274>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e54:	f7ff fc8a 	bl	800076c <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fc86 	bl	800076c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e15a      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f0      	beq.n	8000e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 faf6 	bl	800146c <RCC_Delay>
 8000e80:	e01c      	b.n	8000ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_RCC_OscConfig+0x274>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e88:	f7ff fc70 	bl	800076c <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8e:	e00f      	b.n	8000eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e90:	f7ff fc6c 	bl	800076c <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d908      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e140      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	42420000 	.word	0x42420000
 8000eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb0:	4b9e      	ldr	r3, [pc, #632]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e9      	bne.n	8000e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80a6 	beq.w	8001016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ece:	4b97      	ldr	r3, [pc, #604]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b94      	ldr	r3, [pc, #592]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a93      	ldr	r2, [pc, #588]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b91      	ldr	r3, [pc, #580]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef6:	4b8e      	ldr	r3, [pc, #568]	; (8001130 <HAL_RCC_OscConfig+0x4f8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d118      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f02:	4b8b      	ldr	r3, [pc, #556]	; (8001130 <HAL_RCC_OscConfig+0x4f8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a8a      	ldr	r2, [pc, #552]	; (8001130 <HAL_RCC_OscConfig+0x4f8>)
 8000f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fc2d 	bl	800076c <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f16:	f7ff fc29 	bl	800076c <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e0fd      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f28:	4b81      	ldr	r3, [pc, #516]	; (8001130 <HAL_RCC_OscConfig+0x4f8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d106      	bne.n	8000f4a <HAL_RCC_OscConfig+0x312>
 8000f3c:	4b7b      	ldr	r3, [pc, #492]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4a7a      	ldr	r2, [pc, #488]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6213      	str	r3, [r2, #32]
 8000f48:	e02d      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x334>
 8000f52:	4b76      	ldr	r3, [pc, #472]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a75      	ldr	r2, [pc, #468]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	4b73      	ldr	r3, [pc, #460]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a72      	ldr	r2, [pc, #456]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	f023 0304 	bic.w	r3, r3, #4
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	e01c      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x356>
 8000f74:	4b6d      	ldr	r3, [pc, #436]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a6c      	ldr	r2, [pc, #432]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6213      	str	r3, [r2, #32]
 8000f80:	4b6a      	ldr	r3, [pc, #424]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a69      	ldr	r2, [pc, #420]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6213      	str	r3, [r2, #32]
 8000f8c:	e00b      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f8e:	4b67      	ldr	r3, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a66      	ldr	r2, [pc, #408]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	4b64      	ldr	r3, [pc, #400]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a63      	ldr	r2, [pc, #396]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d015      	beq.n	8000fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fbdd 	bl	800076c <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fbd9 	bl	800076c <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e0ab      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	4b57      	ldr	r3, [pc, #348]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0ee      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x37e>
 8000fd8:	e014      	b.n	8001004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fbc7 	bl	800076c <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fbc3 	bl	800076c <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e095      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff8:	4b4c      	ldr	r3, [pc, #304]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1ee      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d105      	bne.n	8001016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100a:	4b48      	ldr	r3, [pc, #288]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a47      	ldr	r2, [pc, #284]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8081 	beq.w	8001122 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001020:	4b42      	ldr	r3, [pc, #264]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d061      	beq.n	80010f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d146      	bne.n	80010c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001034:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <HAL_RCC_OscConfig+0x4fc>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fb97 	bl	800076c <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fb93 	bl	800076c <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e067      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001054:	4b35      	ldr	r3, [pc, #212]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001068:	d108      	bne.n	800107c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	492d      	ldr	r1, [pc, #180]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a19      	ldr	r1, [r3, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	430b      	orrs	r3, r1
 800108e:	4927      	ldr	r1, [pc, #156]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <HAL_RCC_OscConfig+0x4fc>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fb67 	bl	800076c <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a2:	f7ff fb63 	bl	800076c <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e037      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x46a>
 80010c0:	e02f      	b.n	8001122 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_RCC_OscConfig+0x4fc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fb50 	bl	800076c <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d0:	f7ff fb4c 	bl	800076c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e020      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x498>
 80010ee:	e018      	b.n	8001122 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e013      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	429a      	cmp	r2, r3
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	429a      	cmp	r2, r3
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	40007000 	.word	0x40007000
 8001134:	42420060 	.word	0x42420060

08001138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0d0      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b6a      	ldr	r3, [pc, #424]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d910      	bls.n	800117c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 0207 	bic.w	r2, r3, #7
 8001162:	4965      	ldr	r1, [pc, #404]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b63      	ldr	r3, [pc, #396]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0b8      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001194:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a58      	ldr	r2, [pc, #352]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800119e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ac:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b8:	4b50      	ldr	r3, [pc, #320]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	494d      	ldr	r1, [pc, #308]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d040      	beq.n	8001258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d115      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e07f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e073      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e06b      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b39      	ldr	r3, [pc, #228]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4936      	ldr	r1, [pc, #216]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff faa0 	bl	800076c <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	e00a      	b.n	8001246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff fa9c 	bl	800076c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e053      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 020c 	and.w	r2, r3, #12
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d1eb      	bne.n	8001230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d210      	bcs.n	8001288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 0207 	bic.w	r2, r3, #7
 800126e:	4922      	ldr	r1, [pc, #136]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e032      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4916      	ldr	r1, [pc, #88]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	490e      	ldr	r1, [pc, #56]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c6:	f000 f821 	bl	800130c <HAL_RCC_GetSysClockFreq>
 80012ca:	4601      	mov	r1, r0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_RCC_ClockConfig+0x1c8>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	fa21 f303 	lsr.w	r3, r1, r3
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x1cc>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_ClockConfig+0x1d0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f974 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40021000 	.word	0x40021000
 8001300:	08004d94 	.word	0x08004d94
 8001304:	20000000 	.word	0x20000000
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800130c:	b490      	push	{r4, r7}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001314:	1d3c      	adds	r4, r7, #4
 8001316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b04      	cmp	r3, #4
 8001344:	d002      	beq.n	800134c <HAL_RCC_GetSysClockFreq+0x40>
 8001346:	2b08      	cmp	r3, #8
 8001348:	d003      	beq.n	8001352 <HAL_RCC_GetSysClockFreq+0x46>
 800134a:	e02d      	b.n	80013a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800134e:	623b      	str	r3, [r7, #32]
      break;
 8001350:	e02d      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800135e:	4413      	add	r3, r2
 8001360:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001364:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	0c5b      	lsrs	r3, r3, #17
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800137e:	4413      	add	r3, r2
 8001380:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001384:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800138a:	fb02 f203 	mul.w	r2, r2, r3
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	fbb2 f3f3 	udiv	r3, r2, r3
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
 8001396:	e004      	b.n	80013a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	623b      	str	r3, [r7, #32]
      break;
 80013a6:	e002      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013aa:	623b      	str	r3, [r7, #32]
      break;
 80013ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ae:	6a3b      	ldr	r3, [r7, #32]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc90      	pop	{r4, r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	08004d20 	.word	0x08004d20
 80013c0:	08004d30 	.word	0x08004d30
 80013c4:	40021000 	.word	0x40021000
 80013c8:	007a1200 	.word	0x007a1200
 80013cc:	003d0900 	.word	0x003d0900

080013d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d4:	4b02      	ldr	r3, [pc, #8]	; (80013e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000000 	.word	0x20000000

080013e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013e8:	f7ff fff2 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 80013ec:	4601      	mov	r1, r0
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	4a03      	ldr	r2, [pc, #12]	; (8001408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001400:	4618      	mov	r0, r3
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	08004da4 	.word	0x08004da4

0800140c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	220f      	movs	r2, #15
 800141a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_RCC_GetClockConfig+0x58>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_RCC_GetClockConfig+0x58>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_RCC_GetClockConfig+0x58>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_RCC_GetClockConfig+0x58>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	08db      	lsrs	r3, r3, #3
 8001446:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_RCC_GetClockConfig+0x5c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0207 	and.w	r2, r3, #7
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000
 8001468:	40022000 	.word	0x40022000

0800146c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <RCC_Delay+0x34>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <RCC_Delay+0x38>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0a5b      	lsrs	r3, r3, #9
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001488:	bf00      	nop
  }
  while (Delay --);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	60fa      	str	r2, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f9      	bne.n	8001488 <RCC_Delay+0x1c>
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000
 80014a4:	10624dd3 	.word	0x10624dd3

080014a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e041      	b.n	800153e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff f834 	bl	800053c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3304      	adds	r3, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f000 fc1c 	bl	8001d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d001      	beq.n	8001560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e03a      	b.n	80015d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_TIM_Base_Start_IT+0x98>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00e      	beq.n	80015a0 <HAL_TIM_Base_Start_IT+0x58>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800158a:	d009      	beq.n	80015a0 <HAL_TIM_Base_Start_IT+0x58>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d004      	beq.n	80015a0 <HAL_TIM_Base_Start_IT+0x58>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d111      	bne.n	80015c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d010      	beq.n	80015d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015c2:	e007      	b.n	80015d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40012c00 	.word	0x40012c00
 80015e4:	40000400 	.word	0x40000400
 80015e8:	40000800 	.word	0x40000800

080015ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e041      	b.n	8001682 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f839 	bl	800168a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3304      	adds	r3, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f000 fb7a 	bl	8001d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_TIM_PWM_Start+0x24>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	e022      	b.n	8001706 <HAL_TIM_PWM_Start+0x6a>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d109      	bne.n	80016da <HAL_TIM_PWM_Start+0x3e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	e015      	b.n	8001706 <HAL_TIM_PWM_Start+0x6a>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d109      	bne.n	80016f4 <HAL_TIM_PWM_Start+0x58>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	e008      	b.n	8001706 <HAL_TIM_PWM_Start+0x6a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	bf14      	ite	ne
 8001700:	2301      	movne	r3, #1
 8001702:	2300      	moveq	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e05e      	b.n	80017cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d104      	bne.n	800171e <HAL_TIM_PWM_Start+0x82>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800171c:	e013      	b.n	8001746 <HAL_TIM_PWM_Start+0xaa>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d104      	bne.n	800172e <HAL_TIM_PWM_Start+0x92>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800172c:	e00b      	b.n	8001746 <HAL_TIM_PWM_Start+0xaa>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d104      	bne.n	800173e <HAL_TIM_PWM_Start+0xa2>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800173c:	e003      	b.n	8001746 <HAL_TIM_PWM_Start+0xaa>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2202      	movs	r2, #2
 8001742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2201      	movs	r2, #1
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fd68 	bl	8002224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_TIM_PWM_Start+0x138>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d107      	bne.n	800176e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800176c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_TIM_PWM_Start+0x138>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00e      	beq.n	8001796 <HAL_TIM_PWM_Start+0xfa>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001780:	d009      	beq.n	8001796 <HAL_TIM_PWM_Start+0xfa>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <HAL_TIM_PWM_Start+0x13c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d004      	beq.n	8001796 <HAL_TIM_PWM_Start+0xfa>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <HAL_TIM_PWM_Start+0x140>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d111      	bne.n	80017ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2b06      	cmp	r3, #6
 80017a6:	d010      	beq.n	80017ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b8:	e007      	b.n	80017ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40012c00 	.word	0x40012c00
 80017d8:	40000400 	.word	0x40000400
 80017dc:	40000800 	.word	0x40000800

080017e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d122      	bne.n	800183c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b02      	cmp	r3, #2
 8001802:	d11b      	bne.n	800183c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0202 	mvn.w	r2, #2
 800180c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fa62 	bl	8001cec <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fa55 	bl	8001cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fa64 	bl	8001cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b04      	cmp	r3, #4
 8001848:	d122      	bne.n	8001890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b04      	cmp	r3, #4
 8001856:	d11b      	bne.n	8001890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0204 	mvn.w	r2, #4
 8001860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2202      	movs	r2, #2
 8001866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fa38 	bl	8001cec <HAL_TIM_IC_CaptureCallback>
 800187c:	e005      	b.n	800188a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fa2b 	bl	8001cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa3a 	bl	8001cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b08      	cmp	r3, #8
 800189c:	d122      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d11b      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0208 	mvn.w	r2, #8
 80018b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2204      	movs	r2, #4
 80018ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fa0e 	bl	8001cec <HAL_TIM_IC_CaptureCallback>
 80018d0:	e005      	b.n	80018de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fa01 	bl	8001cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fa10 	bl	8001cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d122      	bne.n	8001938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d11b      	bne.n	8001938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0210 	mvn.w	r2, #16
 8001908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2208      	movs	r2, #8
 800190e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f9e4 	bl	8001cec <HAL_TIM_IC_CaptureCallback>
 8001924:	e005      	b.n	8001932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f9d7 	bl	8001cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f9e6 	bl	8001cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10e      	bne.n	8001964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b01      	cmp	r3, #1
 8001952:	d107      	bne.n	8001964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0201 	mvn.w	r2, #1
 800195c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7fe fd9e 	bl	80004a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196e:	2b80      	cmp	r3, #128	; 0x80
 8001970:	d10e      	bne.n	8001990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197c:	2b80      	cmp	r3, #128	; 0x80
 800197e:	d107      	bne.n	8001990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fcd5 	bl	800233a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199a:	2b40      	cmp	r3, #64	; 0x40
 800199c:	d10e      	bne.n	80019bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a8:	2b40      	cmp	r3, #64	; 0x40
 80019aa:	d107      	bne.n	80019bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f9aa 	bl	8001d10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d10e      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d107      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0220 	mvn.w	r2, #32
 80019e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fca0 	bl	8002328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e0ac      	b.n	8001b64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	f200 809f 	bhi.w	8001b58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001a1a:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001a55 	.word	0x08001a55
 8001a24:	08001b59 	.word	0x08001b59
 8001a28:	08001b59 	.word	0x08001b59
 8001a2c:	08001b59 	.word	0x08001b59
 8001a30:	08001a95 	.word	0x08001a95
 8001a34:	08001b59 	.word	0x08001b59
 8001a38:	08001b59 	.word	0x08001b59
 8001a3c:	08001b59 	.word	0x08001b59
 8001a40:	08001ad7 	.word	0x08001ad7
 8001a44:	08001b59 	.word	0x08001b59
 8001a48:	08001b59 	.word	0x08001b59
 8001a4c:	08001b59 	.word	0x08001b59
 8001a50:	08001b17 	.word	0x08001b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f9c4 	bl	8001de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0208 	orr.w	r2, r2, #8
 8001a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0204 	bic.w	r2, r2, #4
 8001a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6999      	ldr	r1, [r3, #24]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	619a      	str	r2, [r3, #24]
      break;
 8001a92:	e062      	b.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fa0a 	bl	8001eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6999      	ldr	r1, [r3, #24]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	021a      	lsls	r2, r3, #8
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	619a      	str	r2, [r3, #24]
      break;
 8001ad4:	e041      	b.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fa53 	bl	8001f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0208 	orr.w	r2, r2, #8
 8001af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0204 	bic.w	r2, r2, #4
 8001b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69d9      	ldr	r1, [r3, #28]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	61da      	str	r2, [r3, #28]
      break;
 8001b14:	e021      	b.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fa9d 	bl	800205c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69d9      	ldr	r1, [r3, #28]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	021a      	lsls	r2, r3, #8
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	61da      	str	r2, [r3, #28]
      break;
 8001b56:	e000      	b.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_TIM_ConfigClockSource+0x18>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0a6      	b.n	8001cd2 <HAL_TIM_ConfigClockSource+0x166>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001baa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b40      	cmp	r3, #64	; 0x40
 8001bba:	d067      	beq.n	8001c8c <HAL_TIM_ConfigClockSource+0x120>
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d80b      	bhi.n	8001bd8 <HAL_TIM_ConfigClockSource+0x6c>
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d073      	beq.n	8001cac <HAL_TIM_ConfigClockSource+0x140>
 8001bc4:	2b10      	cmp	r3, #16
 8001bc6:	d802      	bhi.n	8001bce <HAL_TIM_ConfigClockSource+0x62>
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d06f      	beq.n	8001cac <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001bcc:	e078      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d06c      	beq.n	8001cac <HAL_TIM_ConfigClockSource+0x140>
 8001bd2:	2b30      	cmp	r3, #48	; 0x30
 8001bd4:	d06a      	beq.n	8001cac <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001bd6:	e073      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001bd8:	2b70      	cmp	r3, #112	; 0x70
 8001bda:	d00d      	beq.n	8001bf8 <HAL_TIM_ConfigClockSource+0x8c>
 8001bdc:	2b70      	cmp	r3, #112	; 0x70
 8001bde:	d804      	bhi.n	8001bea <HAL_TIM_ConfigClockSource+0x7e>
 8001be0:	2b50      	cmp	r3, #80	; 0x50
 8001be2:	d033      	beq.n	8001c4c <HAL_TIM_ConfigClockSource+0xe0>
 8001be4:	2b60      	cmp	r3, #96	; 0x60
 8001be6:	d041      	beq.n	8001c6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001be8:	e06a      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bee:	d066      	beq.n	8001cbe <HAL_TIM_ConfigClockSource+0x152>
 8001bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf4:	d017      	beq.n	8001c26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001bf6:	e063      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f000 faed 	bl	80021e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]
      break;
 8001c24:	e04c      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6899      	ldr	r1, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f000 fad6 	bl	80021e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c48:	609a      	str	r2, [r3, #8]
      break;
 8001c4a:	e039      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f000 fa4d 	bl	80020f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2150      	movs	r1, #80	; 0x50
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 faa4 	bl	80021b2 <TIM_ITRx_SetConfig>
      break;
 8001c6a:	e029      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f000 fa6b 	bl	8002154 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2160      	movs	r1, #96	; 0x60
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fa94 	bl	80021b2 <TIM_ITRx_SetConfig>
      break;
 8001c8a:	e019      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f000 fa2d 	bl	80020f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2140      	movs	r1, #64	; 0x40
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fa84 	bl	80021b2 <TIM_ITRx_SetConfig>
      break;
 8001caa:	e009      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f000 fa7b 	bl	80021b2 <TIM_ITRx_SetConfig>
        break;
 8001cbc:	e000      	b.n	8001cc0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
	...

08001d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <TIM_Base_SetConfig+0xb8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00b      	beq.n	8001d54 <TIM_Base_SetConfig+0x30>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d42:	d007      	beq.n	8001d54 <TIM_Base_SetConfig+0x30>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a26      	ldr	r2, [pc, #152]	; (8001de0 <TIM_Base_SetConfig+0xbc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d003      	beq.n	8001d54 <TIM_Base_SetConfig+0x30>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <TIM_Base_SetConfig+0xc0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d108      	bne.n	8001d66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <TIM_Base_SetConfig+0xb8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00b      	beq.n	8001d86 <TIM_Base_SetConfig+0x62>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d74:	d007      	beq.n	8001d86 <TIM_Base_SetConfig+0x62>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <TIM_Base_SetConfig+0xbc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <TIM_Base_SetConfig+0x62>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <TIM_Base_SetConfig+0xc0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <TIM_Base_SetConfig+0xb8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d103      	bne.n	8001dcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	615a      	str	r2, [r3, #20]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40000800 	.word	0x40000800

08001de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	f023 0201 	bic.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f023 0302 	bic.w	r3, r3, #2
 8001e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <TIM_OC1_SetConfig+0xc8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d10c      	bne.n	8001e5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f023 0308 	bic.w	r3, r3, #8
 8001e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <TIM_OC1_SetConfig+0xc8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d111      	bne.n	8001e8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	621a      	str	r2, [r3, #32]
}
 8001ea4:	bf00      	nop
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40012c00 	.word	0x40012c00

08001eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f023 0210 	bic.w	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f023 0320 	bic.w	r3, r3, #32
 8001efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <TIM_OC2_SetConfig+0xd0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d10d      	bne.n	8001f30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <TIM_OC2_SetConfig+0xd0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d113      	bne.n	8001f60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	621a      	str	r2, [r3, #32]
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	40012c00 	.word	0x40012c00

08001f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0303 	bic.w	r3, r3, #3
 8001fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <TIM_OC3_SetConfig+0xd0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10d      	bne.n	8002002 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <TIM_OC3_SetConfig+0xd0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d113      	bne.n	8002032 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	621a      	str	r2, [r3, #32]
}
 800204c:	bf00      	nop
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40012c00 	.word	0x40012c00

0800205c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800208a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	031b      	lsls	r3, r3, #12
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <TIM_OC4_SetConfig+0x98>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d109      	bne.n	80020d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	019b      	lsls	r3, r3, #6
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	621a      	str	r2, [r3, #32]
}
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40012c00 	.word	0x40012c00

080020f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	f023 0201 	bic.w	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f023 030a 	bic.w	r3, r3, #10
 8002134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	621a      	str	r2, [r3, #32]
}
 800214a:	bf00      	nop
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f023 0210 	bic.w	r2, r3, #16
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800217e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	031b      	lsls	r3, r3, #12
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002190:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	621a      	str	r2, [r3, #32]
}
 80021a8:	bf00      	nop
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f043 0307 	orr.w	r3, r3, #7
 80021d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b087      	sub	sp, #28
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002200:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	021a      	lsls	r2, r3, #8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	431a      	orrs	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4313      	orrs	r3, r2
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	609a      	str	r2, [r3, #8]
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	621a      	str	r2, [r3, #32]
}
 8002262:	bf00      	nop
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002280:	2302      	movs	r3, #2
 8002282:	e046      	b.n	8002312 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00e      	beq.n	80022e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d009      	beq.n	80022e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d004      	beq.n	80022e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a10      	ldr	r2, [pc, #64]	; (8002324 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d10c      	bne.n	8002300 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800

08002328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002352:	f3ef 8305 	mrs	r3, IPSR
 8002356:	60bb      	str	r3, [r7, #8]
  return(result);
 8002358:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235e:	f3ef 8310 	mrs	r3, PRIMASK
 8002362:	607b      	str	r3, [r7, #4]
  return(result);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <osKernelInitialize+0x32>
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <osKernelInitialize+0x60>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d109      	bne.n	8002386 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002372:	f3ef 8311 	mrs	r3, BASEPRI
 8002376:	603b      	str	r3, [r7, #0]
  return(result);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800237e:	f06f 0305 	mvn.w	r3, #5
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e00c      	b.n	80023a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <osKernelInitialize+0x60>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <osKernelInitialize+0x60>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e002      	b.n	80023a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023a0:	68fb      	ldr	r3, [r7, #12]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	2000002c 	.word	0x2000002c

080023b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023b6:	f3ef 8305 	mrs	r3, IPSR
 80023ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80023bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c2:	f3ef 8310 	mrs	r3, PRIMASK
 80023c6:	607b      	str	r3, [r7, #4]
  return(result);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <osKernelStart+0x32>
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <osKernelStart+0x64>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d109      	bne.n	80023ea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023d6:	f3ef 8311 	mrs	r3, BASEPRI
 80023da:	603b      	str	r3, [r7, #0]
  return(result);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80023e2:	f06f 0305 	mvn.w	r3, #5
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e00e      	b.n	8002408 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <osKernelStart+0x64>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <osKernelStart+0x64>)
 80023f4:	2202      	movs	r2, #2
 80023f6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80023f8:	f001 f864 	bl	80034c4 <vTaskStartScheduler>
      stat = osOK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e002      	b.n	8002408 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002406:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002408:	68fb      	ldr	r3, [r7, #12]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000002c 	.word	0x2000002c

08002418 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b092      	sub	sp, #72	; 0x48
 800241c:	af04      	add	r7, sp, #16
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002428:	f3ef 8305 	mrs	r3, IPSR
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 8094 	bne.w	800255e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002436:	f3ef 8310 	mrs	r3, PRIMASK
 800243a:	623b      	str	r3, [r7, #32]
  return(result);
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 808d 	bne.w	800255e <osThreadNew+0x146>
 8002444:	4b48      	ldr	r3, [pc, #288]	; (8002568 <osThreadNew+0x150>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d106      	bne.n	800245a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800244c:	f3ef 8311 	mrs	r3, BASEPRI
 8002450:	61fb      	str	r3, [r7, #28]
  return(result);
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8082 	bne.w	800255e <osThreadNew+0x146>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d07e      	beq.n	800255e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002464:	2318      	movs	r3, #24
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002468:	2300      	movs	r3, #0
 800246a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800246c:	f107 031b 	add.w	r3, r7, #27
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d045      	beq.n	800250a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <osThreadNew+0x74>
        name = attr->name;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <osThreadNew+0x9a>
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	2b38      	cmp	r3, #56	; 0x38
 80024a4:	d805      	bhi.n	80024b2 <osThreadNew+0x9a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <osThreadNew+0x9e>
        return (NULL);
 80024b2:	2300      	movs	r3, #0
 80024b4:	e054      	b.n	8002560 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00e      	beq.n	80024ec <osThreadNew+0xd4>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b5b      	cmp	r3, #91	; 0x5b
 80024d4:	d90a      	bls.n	80024ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <osThreadNew+0xd4>
        mem = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ea:	e010      	b.n	800250e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10c      	bne.n	800250e <osThreadNew+0xf6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d108      	bne.n	800250e <osThreadNew+0xf6>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d104      	bne.n	800250e <osThreadNew+0xf6>
          mem = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
 8002508:	e001      	b.n	800250e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	2b01      	cmp	r3, #1
 8002512:	d110      	bne.n	8002536 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800251c:	9202      	str	r2, [sp, #8]
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fe02 	bl	8003134 <xTaskCreateStatic>
 8002530:	4603      	mov	r3, r0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e013      	b.n	800255e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	d110      	bne.n	800255e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	b29a      	uxth	r2, r3
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fe49 	bl	80031e6 <xTaskCreate>
 8002554:	4603      	mov	r3, r0
 8002556:	2b01      	cmp	r3, #1
 8002558:	d001      	beq.n	800255e <osThreadNew+0x146>
          hTask = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800255e:	697b      	ldr	r3, [r7, #20]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3738      	adds	r7, #56	; 0x38
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	2000002c 	.word	0x2000002c

0800256c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002574:	f3ef 8305 	mrs	r3, IPSR
 8002578:	613b      	str	r3, [r7, #16]
  return(result);
 800257a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10f      	bne.n	80025a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002580:	f3ef 8310 	mrs	r3, PRIMASK
 8002584:	60fb      	str	r3, [r7, #12]
  return(result);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <osDelay+0x34>
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <osDelay+0x58>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d109      	bne.n	80025a8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002594:	f3ef 8311 	mrs	r3, BASEPRI
 8002598:	60bb      	str	r3, [r7, #8]
  return(result);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <osDelay+0x3c>
    stat = osErrorISR;
 80025a0:	f06f 0305 	mvn.w	r3, #5
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	e007      	b.n	80025b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 ff52 	bl	800345c <vTaskDelay>
    }
  }

  return (stat);
 80025b8:	697b      	ldr	r3, [r7, #20]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000002c 	.word	0x2000002c

080025c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <vApplicationGetIdleTaskMemory+0x28>)
 80025d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80025de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	601a      	str	r2, [r3, #0]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	20000030 	.word	0x20000030
 80025f4:	2000008c 	.word	0x2000008c

080025f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <vApplicationGetTimerTaskMemory+0x2c>)
 8002608:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4a06      	ldr	r2, [pc, #24]	; (8002628 <vApplicationGetTimerTaskMemory+0x30>)
 800260e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	2000028c 	.word	0x2000028c
 8002628:	200002e8 	.word	0x200002e8

0800262c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f103 0208 	add.w	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002644:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f103 0208 	add.w	r2, r3, #8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f103 0208 	add.w	r2, r3, #8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026de:	d103      	bne.n	80026e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e00c      	b.n	8002702 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3308      	adds	r3, #8
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e002      	b.n	80026f6 <vListInsert+0x2e>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d2f6      	bcs.n	80026f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	601a      	str	r2, [r3, #0]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6892      	ldr	r2, [r2, #8]
 800274e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6852      	ldr	r2, [r2, #4]
 8002758:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	429a      	cmp	r2, r3
 8002762:	d103      	bne.n	800276c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	1e5a      	subs	r2, r3, #1
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
	...

0800278c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	e7fe      	b.n	80027b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80027b4:	f001 ff98 	bl	80046e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	68f9      	ldr	r1, [r7, #12]
 80027c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	441a      	add	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	3b01      	subs	r3, #1
 80027e6:	68f9      	ldr	r1, [r7, #12]
 80027e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	441a      	add	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	22ff      	movs	r2, #255	; 0xff
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d114      	bne.n	8002834 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01a      	beq.n	8002848 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3310      	adds	r3, #16
 8002816:	4618      	mov	r0, r3
 8002818:	f001 f8d8 	bl	80039cc <xTaskRemoveFromEventList>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d012      	beq.n	8002848 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <xQueueGenericReset+0xcc>)
 8002824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	e009      	b.n	8002848 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3310      	adds	r3, #16
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fef7 	bl	800262c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3324      	adds	r3, #36	; 0x24
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fef2 	bl	800262c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002848:	f001 ff7c 	bl	8004744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800284c:	2301      	movs	r3, #1
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000ed04 	.word	0xe000ed04

0800285c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08e      	sub	sp, #56	; 0x38
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <xQueueGenericCreateStatic+0x28>
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
 8002882:	e7fe      	b.n	8002882 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <xQueueGenericCreateStatic+0x42>
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	e7fe      	b.n	800289c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <xQueueGenericCreateStatic+0x4e>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <xQueueGenericCreateStatic+0x52>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <xQueueGenericCreateStatic+0x54>
 80028ae:	2300      	movs	r3, #0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <xQueueGenericCreateStatic+0x6c>
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	623b      	str	r3, [r7, #32]
 80028c6:	e7fe      	b.n	80028c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <xQueueGenericCreateStatic+0x78>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <xQueueGenericCreateStatic+0x7c>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <xQueueGenericCreateStatic+0x7e>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <xQueueGenericCreateStatic+0x96>
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	e7fe      	b.n	80028f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028f2:	2350      	movs	r3, #80	; 0x50
 80028f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b50      	cmp	r3, #80	; 0x50
 80028fa:	d009      	beq.n	8002910 <xQueueGenericCreateStatic+0xb4>
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e7fe      	b.n	800290e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002922:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f805 	bl	8002940 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002938:	4618      	mov	r0, r3
 800293a:	3730      	adds	r7, #48	; 0x30
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e002      	b.n	8002962 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800296e:	2101      	movs	r1, #1
 8002970:	69b8      	ldr	r0, [r7, #24]
 8002972:	f7ff ff0b 	bl	800278c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	; 0x38
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002996:	2300      	movs	r3, #0
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <xQueueGenericSend+0x30>
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b6:	e7fe      	b.n	80029b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <xQueueGenericSend+0x3e>
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <xQueueGenericSend+0x42>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <xQueueGenericSend+0x44>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <xQueueGenericSend+0x5c>
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
 80029e2:	e7fe      	b.n	80029e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d103      	bne.n	80029f2 <xQueueGenericSend+0x6a>
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <xQueueGenericSend+0x6e>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <xQueueGenericSend+0x70>
 80029f6:	2300      	movs	r3, #0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <xQueueGenericSend+0x88>
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	e7fe      	b.n	8002a0e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a10:	f001 f996 	bl	8003d40 <xTaskGetSchedulerState>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <xQueueGenericSend+0x98>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <xQueueGenericSend+0x9c>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <xQueueGenericSend+0x9e>
 8002a24:	2300      	movs	r3, #0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <xQueueGenericSend+0xb6>
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	e7fe      	b.n	8002a3c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a3e:	f001 fe53 	bl	80046e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <xQueueGenericSend+0xcc>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d129      	bne.n	8002aa8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a5a:	f000 f9ff 	bl	8002e5c <prvCopyDataToQueue>
 8002a5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d010      	beq.n	8002a8a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	3324      	adds	r3, #36	; 0x24
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 ffad 	bl	80039cc <xTaskRemoveFromEventList>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <xQueueGenericSend+0x1f0>)
 8002a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	e00a      	b.n	8002aa0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a90:	4b39      	ldr	r3, [pc, #228]	; (8002b78 <xQueueGenericSend+0x1f0>)
 8002a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002aa0:	f001 fe50 	bl	8004744 <vPortExitCritical>
				return pdPASS;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e063      	b.n	8002b70 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aae:	f001 fe49 	bl	8004744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e05c      	b.n	8002b70 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 ffe5 	bl	8003a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aca:	f001 fe3b 	bl	8004744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ace:	f000 fd5d 	bl	800358c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ad2:	f001 fe09 	bl	80046e8 <vPortEnterCritical>
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae2:	d103      	bne.n	8002aec <xQueueGenericSend+0x164>
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af8:	d103      	bne.n	8002b02 <xQueueGenericSend+0x17a>
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b02:	f001 fe1f 	bl	8004744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b06:	1d3a      	adds	r2, r7, #4
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 ffd4 	bl	8003abc <xTaskCheckForTimeOut>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d124      	bne.n	8002b64 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b1c:	f000 fa96 	bl	800304c <prvIsQueueFull>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d018      	beq.n	8002b58 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	3310      	adds	r3, #16
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fefe 	bl	8003930 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b36:	f000 fa21 	bl	8002f7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b3a:	f000 fd35 	bl	80035a8 <xTaskResumeAll>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f47f af7c 	bne.w	8002a3e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <xQueueGenericSend+0x1f0>)
 8002b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	e772      	b.n	8002a3e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b5a:	f000 fa0f 	bl	8002f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b5e:	f000 fd23 	bl	80035a8 <xTaskResumeAll>
 8002b62:	e76c      	b.n	8002a3e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b66:	f000 fa09 	bl	8002f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b6a:	f000 fd1d 	bl	80035a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b6e:	2300      	movs	r3, #0
		}
	}
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3738      	adds	r7, #56	; 0x38
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08e      	sub	sp, #56	; 0x38
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <xQueueGenericSendFromISR+0x2c>
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	e7fe      	b.n	8002ba6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <xQueueGenericSendFromISR+0x3a>
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <xQueueGenericSendFromISR+0x3e>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <xQueueGenericSendFromISR+0x40>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <xQueueGenericSendFromISR+0x58>
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	e7fe      	b.n	8002bd2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d103      	bne.n	8002be2 <xQueueGenericSendFromISR+0x66>
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <xQueueGenericSendFromISR+0x6a>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <xQueueGenericSendFromISR+0x6c>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d109      	bne.n	8002c00 <xQueueGenericSendFromISR+0x84>
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e7fe      	b.n	8002bfe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c00:	f001 fe2c 	bl	800485c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c04:	f3ef 8211 	mrs	r2, BASEPRI
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	61ba      	str	r2, [r7, #24]
 8002c1a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d302      	bcc.n	8002c32 <xQueueGenericSendFromISR+0xb6>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d12c      	bne.n	8002c8c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c42:	f000 f90b 	bl	8002e5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c46:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c4e:	d112      	bne.n	8002c76 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d016      	beq.n	8002c86 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	3324      	adds	r3, #36	; 0x24
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 feb5 	bl	80039cc <xTaskRemoveFromEventList>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00e      	beq.n	8002c86 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e007      	b.n	8002c86 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	b25a      	sxtb	r2, r3
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c86:	2301      	movs	r3, #1
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c8a:	e001      	b.n	8002c90 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3738      	adds	r7, #56	; 0x38
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <xQueueReceive+0x2e>
	__asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	e7fe      	b.n	8002cd0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <xQueueReceive+0x3c>
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <xQueueReceive+0x40>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <xQueueReceive+0x42>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <xQueueReceive+0x5a>
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	e7fe      	b.n	8002cfc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cfe:	f001 f81f 	bl	8003d40 <xTaskGetSchedulerState>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <xQueueReceive+0x6a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <xQueueReceive+0x6e>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueReceive+0x70>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <xQueueReceive+0x88>
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e7fe      	b.n	8002d2a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d2c:	f001 fcdc 	bl	80046e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01f      	beq.n	8002d7c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d40:	f000 f8f6 	bl	8002f30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	1e5a      	subs	r2, r3, #1
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00f      	beq.n	8002d74 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	3310      	adds	r3, #16
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fe37 	bl	80039cc <xTaskRemoveFromEventList>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d64:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <xQueueReceive+0x1b4>)
 8002d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d74:	f001 fce6 	bl	8004744 <vPortExitCritical>
				return pdPASS;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e069      	b.n	8002e50 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d103      	bne.n	8002d8a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d82:	f001 fcdf 	bl	8004744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e062      	b.n	8002e50 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d90:	f107 0310 	add.w	r3, r7, #16
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fe7b 	bl	8003a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d9e:	f001 fcd1 	bl	8004744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002da2:	f000 fbf3 	bl	800358c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da6:	f001 fc9f 	bl	80046e8 <vPortEnterCritical>
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db6:	d103      	bne.n	8002dc0 <xQueueReceive+0x11c>
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc6:	b25b      	sxtb	r3, r3
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dcc:	d103      	bne.n	8002dd6 <xQueueReceive+0x132>
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd6:	f001 fcb5 	bl	8004744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dda:	1d3a      	adds	r2, r7, #4
 8002ddc:	f107 0310 	add.w	r3, r7, #16
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fe6a 	bl	8003abc <xTaskCheckForTimeOut>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d123      	bne.n	8002e36 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df0:	f000 f916 	bl	8003020 <prvIsQueueEmpty>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d017      	beq.n	8002e2a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	3324      	adds	r3, #36	; 0x24
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fd94 	bl	8003930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e0a:	f000 f8b7 	bl	8002f7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e0e:	f000 fbcb 	bl	80035a8 <xTaskResumeAll>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d189      	bne.n	8002d2c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <xQueueReceive+0x1b4>)
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	e780      	b.n	8002d2c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e2c:	f000 f8a6 	bl	8002f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e30:	f000 fbba 	bl	80035a8 <xTaskResumeAll>
 8002e34:	e77a      	b.n	8002d2c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e38:	f000 f8a0 	bl	8002f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e3c:	f000 fbb4 	bl	80035a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e42:	f000 f8ed 	bl	8003020 <prvIsQueueEmpty>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f43f af6f 	beq.w	8002d2c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3730      	adds	r7, #48	; 0x30
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	e000ed04 	.word	0xe000ed04

08002e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d14d      	bne.n	8002f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 ff78 	bl	8003d7c <xTaskPriorityDisinherit>
 8002e8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	e043      	b.n	8002f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d119      	bne.n	8002ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6898      	ldr	r0, [r3, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	f001 ff0c 	bl	8004cc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	441a      	add	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d32b      	bcc.n	8002f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	e026      	b.n	8002f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68d8      	ldr	r0, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	f001 fef2 	bl	8004cc4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	425b      	negs	r3, r3
 8002eea:	441a      	add	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d207      	bcs.n	8002f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	425b      	negs	r3, r3
 8002f06:	441a      	add	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d105      	bne.n	8002f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f26:	697b      	ldr	r3, [r7, #20]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d018      	beq.n	8002f74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	441a      	add	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d303      	bcc.n	8002f64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68d9      	ldr	r1, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6838      	ldr	r0, [r7, #0]
 8002f70:	f001 fea8 	bl	8004cc4 <memcpy>
	}
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f84:	f001 fbb0 	bl	80046e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f90:	e011      	b.n	8002fb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d012      	beq.n	8002fc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3324      	adds	r3, #36	; 0x24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fd14 	bl	80039cc <xTaskRemoveFromEventList>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002faa:	f000 fde7 	bl	8003b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	dce9      	bgt.n	8002f92 <prvUnlockQueue+0x16>
 8002fbe:	e000      	b.n	8002fc2 <prvUnlockQueue+0x46>
					break;
 8002fc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	22ff      	movs	r2, #255	; 0xff
 8002fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fca:	f001 fbbb 	bl	8004744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fce:	f001 fb8b 	bl	80046e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fda:	e011      	b.n	8003000 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d012      	beq.n	800300a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fcef 	bl	80039cc <xTaskRemoveFromEventList>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ff4:	f000 fdc2 	bl	8003b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ff8:	7bbb      	ldrb	r3, [r7, #14]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003004:	2b00      	cmp	r3, #0
 8003006:	dce9      	bgt.n	8002fdc <prvUnlockQueue+0x60>
 8003008:	e000      	b.n	800300c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800300a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	22ff      	movs	r2, #255	; 0xff
 8003010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003014:	f001 fb96 	bl	8004744 <vPortExitCritical>
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003028:	f001 fb5e 	bl	80046e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003034:	2301      	movs	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e001      	b.n	800303e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800303e:	f001 fb81 	bl	8004744 <vPortExitCritical>

	return xReturn;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003054:	f001 fb48 	bl	80046e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	429a      	cmp	r2, r3
 8003062:	d102      	bne.n	800306a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003064:	2301      	movs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	e001      	b.n	800306e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800306e:	f001 fb69 	bl	8004744 <vPortExitCritical>

	return xReturn;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e014      	b.n	80030b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <vQueueAddToRegistry+0x4c>)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003098:	490b      	ldr	r1, [pc, #44]	; (80030c8 <vQueueAddToRegistry+0x4c>)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <vQueueAddToRegistry+0x4c>)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030ae:	e005      	b.n	80030bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3301      	adds	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b07      	cmp	r3, #7
 80030ba:	d9e7      	bls.n	800308c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20001c2c 	.word	0x20001c2c

080030cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030dc:	f001 fb04 	bl	80046e8 <vPortEnterCritical>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ec:	d103      	bne.n	80030f6 <vQueueWaitForMessageRestricted+0x2a>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fc:	b25b      	sxtb	r3, r3
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003102:	d103      	bne.n	800310c <vQueueWaitForMessageRestricted+0x40>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800310c:	f001 fb1a 	bl	8004744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3324      	adds	r3, #36	; 0x24
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fc29 	bl	8003978 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003126:	6978      	ldr	r0, [r7, #20]
 8003128:	f7ff ff28 	bl	8002f7c <prvUnlockQueue>
	}
 800312c:	bf00      	nop
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08e      	sub	sp, #56	; 0x38
 8003138:	af04      	add	r7, sp, #16
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <xTaskCreateStatic+0x28>
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	e7fe      	b.n	800315a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <xTaskCreateStatic+0x42>
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	e7fe      	b.n	8003174 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003176:	235c      	movs	r3, #92	; 0x5c
 8003178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b5c      	cmp	r3, #92	; 0x5c
 800317e:	d009      	beq.n	8003194 <xTaskCreateStatic+0x60>
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e7fe      	b.n	8003192 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003196:	2b00      	cmp	r3, #0
 8003198:	d01e      	beq.n	80031d8 <xTaskCreateStatic+0xa4>
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01b      	beq.n	80031d8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031b2:	2300      	movs	r3, #0
 80031b4:	9303      	str	r3, [sp, #12]
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	9302      	str	r3, [sp, #8]
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f850 	bl	8003270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031d2:	f000 f8d3 	bl	800337c <prvAddNewTaskToReadyList>
 80031d6:	e001      	b.n	80031dc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031dc:	697b      	ldr	r3, [r7, #20]
	}
 80031de:	4618      	mov	r0, r3
 80031e0:	3728      	adds	r7, #40	; 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b08c      	sub	sp, #48	; 0x30
 80031ea:	af04      	add	r7, sp, #16
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 fb6a 	bl	80048d4 <pvPortMalloc>
 8003200:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003208:	205c      	movs	r0, #92	; 0x5c
 800320a:	f001 fb63 	bl	80048d4 <pvPortMalloc>
 800320e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
 800321c:	e005      	b.n	800322a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f001 fc1a 	bl	8004a58 <vPortFree>
 8003224:	e001      	b.n	800322a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d017      	beq.n	8003260 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	2300      	movs	r3, #0
 800323c:	9303      	str	r3, [sp, #12]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	9302      	str	r3, [sp, #8]
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f80e 	bl	8003270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003254:	69f8      	ldr	r0, [r7, #28]
 8003256:	f000 f891 	bl	800337c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800325a:	2301      	movs	r3, #1
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	e002      	b.n	8003266 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003266:	69bb      	ldr	r3, [r7, #24]
	}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	461a      	mov	r2, r3
 8003288:	21a5      	movs	r1, #165	; 0xa5
 800328a:	f001 fd26 	bl	8004cda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003298:	3b01      	subs	r3, #1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f023 0307 	bic.w	r3, r3, #7
 80032a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <prvInitialiseNewTask+0x56>
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e7fe      	b.n	80032c4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e012      	b.n	80032f2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	7819      	ldrb	r1, [r3, #0]
 80032d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	3334      	adds	r3, #52	; 0x34
 80032dc:	460a      	mov	r2, r1
 80032de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	4413      	add	r3, r2
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	3301      	adds	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d9e9      	bls.n	80032cc <prvInitialiseNewTask+0x5c>
 80032f8:	e000      	b.n	80032fc <prvInitialiseNewTask+0x8c>
		{
			break;
 80032fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	2b37      	cmp	r3, #55	; 0x37
 8003308:	d901      	bls.n	800330e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800330a:	2337      	movs	r3, #55	; 0x37
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003318:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	2200      	movs	r2, #0
 800331e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	3304      	adds	r3, #4
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff f9a0 	bl	800266a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	3318      	adds	r3, #24
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff f99b 	bl	800266a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003338:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003348:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2200      	movs	r2, #0
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	69b8      	ldr	r0, [r7, #24]
 800335e:	f001 f8d7 	bl	8004510 <pxPortInitialiseStack>
 8003362:	4602      	mov	r2, r0
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003372:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003374:	bf00      	nop
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003384:	f001 f9b0 	bl	80046e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003388:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <prvAddNewTaskToReadyList+0xc4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <prvAddNewTaskToReadyList+0xc4>)
 8003390:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <prvAddNewTaskToReadyList+0xc8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800339a:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <prvAddNewTaskToReadyList+0xc8>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033a0:	4b27      	ldr	r3, [pc, #156]	; (8003440 <prvAddNewTaskToReadyList+0xc4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d110      	bne.n	80033ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033a8:	f000 fc0c 	bl	8003bc4 <prvInitialiseTaskLists>
 80033ac:	e00d      	b.n	80033ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033ae:	4b26      	ldr	r3, [pc, #152]	; (8003448 <prvAddNewTaskToReadyList+0xcc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033b6:	4b23      	ldr	r3, [pc, #140]	; (8003444 <prvAddNewTaskToReadyList+0xc8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d802      	bhi.n	80033ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033c4:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <prvAddNewTaskToReadyList+0xc8>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <prvAddNewTaskToReadyList+0xd0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	4a1e      	ldr	r2, [pc, #120]	; (800344c <prvAddNewTaskToReadyList+0xd0>)
 80033d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <prvAddNewTaskToReadyList+0xd0>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <prvAddNewTaskToReadyList+0xd4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d903      	bls.n	80033f0 <prvAddNewTaskToReadyList+0x74>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4a18      	ldr	r2, [pc, #96]	; (8003450 <prvAddNewTaskToReadyList+0xd4>)
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4a15      	ldr	r2, [pc, #84]	; (8003454 <prvAddNewTaskToReadyList+0xd8>)
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f7ff f93b 	bl	8002682 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800340c:	f001 f99a 	bl	8004744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <prvAddNewTaskToReadyList+0xcc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00e      	beq.n	8003436 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <prvAddNewTaskToReadyList+0xc8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	429a      	cmp	r2, r3
 8003424:	d207      	bcs.n	8003436 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <prvAddNewTaskToReadyList+0xdc>)
 8003428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000bbc 	.word	0x20000bbc
 8003444:	200006e8 	.word	0x200006e8
 8003448:	20000bc8 	.word	0x20000bc8
 800344c:	20000bd8 	.word	0x20000bd8
 8003450:	20000bc4 	.word	0x20000bc4
 8003454:	200006ec 	.word	0x200006ec
 8003458:	e000ed04 	.word	0xe000ed04

0800345c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <vTaskDelay+0x60>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <vTaskDelay+0x2e>
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	e7fe      	b.n	8003488 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800348a:	f000 f87f 	bl	800358c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800348e:	2100      	movs	r1, #0
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fcdf 	bl	8003e54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003496:	f000 f887 	bl	80035a8 <xTaskResumeAll>
 800349a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <vTaskDelay+0x64>)
 80034a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000be4 	.word	0x20000be4
 80034c0:	e000ed04 	.word	0xe000ed04

080034c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034d2:	463a      	mov	r2, r7
 80034d4:	1d39      	adds	r1, r7, #4
 80034d6:	f107 0308 	add.w	r3, r7, #8
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff f874 	bl	80025c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	9202      	str	r2, [sp, #8]
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2300      	movs	r3, #0
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	460a      	mov	r2, r1
 80034f2:	4920      	ldr	r1, [pc, #128]	; (8003574 <vTaskStartScheduler+0xb0>)
 80034f4:	4820      	ldr	r0, [pc, #128]	; (8003578 <vTaskStartScheduler+0xb4>)
 80034f6:	f7ff fe1d 	bl	8003134 <xTaskCreateStatic>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b1f      	ldr	r3, [pc, #124]	; (800357c <vTaskStartScheduler+0xb8>)
 80034fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003500:	4b1e      	ldr	r3, [pc, #120]	; (800357c <vTaskStartScheduler+0xb8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003508:	2301      	movs	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e001      	b.n	8003512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003518:	f000 fcf0 	bl	8003efc <xTimerCreateTimerTask>
 800351c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d115      	bne.n	8003550 <vTaskStartScheduler+0x8c>
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <vTaskStartScheduler+0xbc>)
 8003538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800353c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <vTaskStartScheduler+0xc0>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <vTaskStartScheduler+0xc4>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800354a:	f001 f85d 	bl	8004608 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800354e:	e00d      	b.n	800356c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003556:	d109      	bne.n	800356c <vTaskStartScheduler+0xa8>
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e7fe      	b.n	800356a <vTaskStartScheduler+0xa6>
}
 800356c:	bf00      	nop
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	08004d34 	.word	0x08004d34
 8003578:	08003b95 	.word	0x08003b95
 800357c:	20000be0 	.word	0x20000be0
 8003580:	20000bdc 	.word	0x20000bdc
 8003584:	20000bc8 	.word	0x20000bc8
 8003588:	20000bc0 	.word	0x20000bc0

0800358c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <vTaskSuspendAll+0x18>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	4a03      	ldr	r2, [pc, #12]	; (80035a4 <vTaskSuspendAll+0x18>)
 8003598:	6013      	str	r3, [r2, #0]
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000be4 	.word	0x20000be4

080035a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <xTaskResumeAll+0x114>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <xTaskResumeAll+0x2a>
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	e7fe      	b.n	80035d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035d2:	f001 f889 	bl	80046e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035d6:	4b39      	ldr	r3, [pc, #228]	; (80036bc <xTaskResumeAll+0x114>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3b01      	subs	r3, #1
 80035dc:	4a37      	ldr	r2, [pc, #220]	; (80036bc <xTaskResumeAll+0x114>)
 80035de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e0:	4b36      	ldr	r3, [pc, #216]	; (80036bc <xTaskResumeAll+0x114>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d162      	bne.n	80036ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <xTaskResumeAll+0x118>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d05e      	beq.n	80036ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035f0:	e02f      	b.n	8003652 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035f2:	4b34      	ldr	r3, [pc, #208]	; (80036c4 <xTaskResumeAll+0x11c>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3318      	adds	r3, #24
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f89a 	bl	8002738 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3304      	adds	r3, #4
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f895 	bl	8002738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003612:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <xTaskResumeAll+0x120>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d903      	bls.n	8003622 <xTaskResumeAll+0x7a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <xTaskResumeAll+0x120>)
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4a27      	ldr	r2, [pc, #156]	; (80036cc <xTaskResumeAll+0x124>)
 8003630:	441a      	add	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3304      	adds	r3, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f7ff f822 	bl	8002682 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003642:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <xTaskResumeAll+0x128>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	429a      	cmp	r2, r3
 800364a:	d302      	bcc.n	8003652 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <xTaskResumeAll+0x12c>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <xTaskResumeAll+0x11c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1cb      	bne.n	80035f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003660:	f000 fb4a 	bl	8003cf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <xTaskResumeAll+0x130>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d010      	beq.n	8003692 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003670:	f000 f844 	bl	80036fc <xTaskIncrementTick>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <xTaskResumeAll+0x12c>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f1      	bne.n	8003670 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <xTaskResumeAll+0x130>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <xTaskResumeAll+0x12c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800369a:	2301      	movs	r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <xTaskResumeAll+0x134>)
 80036a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036ae:	f001 f849 	bl	8004744 <vPortExitCritical>

	return xAlreadyYielded;
 80036b2:	68bb      	ldr	r3, [r7, #8]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20000be4 	.word	0x20000be4
 80036c0:	20000bbc 	.word	0x20000bbc
 80036c4:	20000b7c 	.word	0x20000b7c
 80036c8:	20000bc4 	.word	0x20000bc4
 80036cc:	200006ec 	.word	0x200006ec
 80036d0:	200006e8 	.word	0x200006e8
 80036d4:	20000bd0 	.word	0x20000bd0
 80036d8:	20000bcc 	.word	0x20000bcc
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <xTaskGetTickCount+0x18>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036ec:	687b      	ldr	r3, [r7, #4]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	20000bc0 	.word	0x20000bc0

080036fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003706:	4b51      	ldr	r3, [pc, #324]	; (800384c <xTaskIncrementTick+0x150>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 808d 	bne.w	800382a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003710:	4b4f      	ldr	r3, [pc, #316]	; (8003850 <xTaskIncrementTick+0x154>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003718:	4a4d      	ldr	r2, [pc, #308]	; (8003850 <xTaskIncrementTick+0x154>)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11f      	bne.n	8003764 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003724:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <xTaskIncrementTick+0x158>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <xTaskIncrementTick+0x46>
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	e7fe      	b.n	8003740 <xTaskIncrementTick+0x44>
 8003742:	4b44      	ldr	r3, [pc, #272]	; (8003854 <xTaskIncrementTick+0x158>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	4b43      	ldr	r3, [pc, #268]	; (8003858 <xTaskIncrementTick+0x15c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a41      	ldr	r2, [pc, #260]	; (8003854 <xTaskIncrementTick+0x158>)
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4a41      	ldr	r2, [pc, #260]	; (8003858 <xTaskIncrementTick+0x15c>)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <xTaskIncrementTick+0x160>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3301      	adds	r3, #1
 800375c:	4a3f      	ldr	r2, [pc, #252]	; (800385c <xTaskIncrementTick+0x160>)
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	f000 faca 	bl	8003cf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003764:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <xTaskIncrementTick+0x164>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	429a      	cmp	r2, r3
 800376c:	d34e      	bcc.n	800380c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800376e:	4b39      	ldr	r3, [pc, #228]	; (8003854 <xTaskIncrementTick+0x158>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <xTaskIncrementTick+0x80>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <xTaskIncrementTick+0x82>
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <xTaskIncrementTick+0x164>)
 8003784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003788:	601a      	str	r2, [r3, #0]
					break;
 800378a:	e03f      	b.n	800380c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800378c:	4b31      	ldr	r3, [pc, #196]	; (8003854 <xTaskIncrementTick+0x158>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d203      	bcs.n	80037ac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037a4:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <xTaskIncrementTick+0x164>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6013      	str	r3, [r2, #0]
						break;
 80037aa:	e02f      	b.n	800380c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe ffc1 	bl	8002738 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3318      	adds	r3, #24
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ffb8 	bl	8002738 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <xTaskIncrementTick+0x168>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d903      	bls.n	80037dc <xTaskIncrementTick+0xe0>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <xTaskIncrementTick+0x168>)
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <xTaskIncrementTick+0x16c>)
 80037ea:	441a      	add	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7fe ff45 	bl	8002682 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <xTaskIncrementTick+0x170>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	429a      	cmp	r2, r3
 8003804:	d3b3      	bcc.n	800376e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003806:	2301      	movs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800380a:	e7b0      	b.n	800376e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <xTaskIncrementTick+0x170>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003812:	4915      	ldr	r1, [pc, #84]	; (8003868 <xTaskIncrementTick+0x16c>)
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d907      	bls.n	8003834 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e004      	b.n	8003834 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <xTaskIncrementTick+0x174>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <xTaskIncrementTick+0x174>)
 8003832:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003834:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <xTaskIncrementTick+0x178>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003840:	697b      	ldr	r3, [r7, #20]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000be4 	.word	0x20000be4
 8003850:	20000bc0 	.word	0x20000bc0
 8003854:	20000b74 	.word	0x20000b74
 8003858:	20000b78 	.word	0x20000b78
 800385c:	20000bd4 	.word	0x20000bd4
 8003860:	20000bdc 	.word	0x20000bdc
 8003864:	20000bc4 	.word	0x20000bc4
 8003868:	200006ec 	.word	0x200006ec
 800386c:	200006e8 	.word	0x200006e8
 8003870:	20000bcc 	.word	0x20000bcc
 8003874:	20000bd0 	.word	0x20000bd0

08003878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800387e:	4b27      	ldr	r3, [pc, #156]	; (800391c <vTaskSwitchContext+0xa4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <vTaskSwitchContext+0xa8>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800388c:	e040      	b.n	8003910 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <vTaskSwitchContext+0xa8>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <vTaskSwitchContext+0xac>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	e00f      	b.n	80038bc <vTaskSwitchContext+0x44>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <vTaskSwitchContext+0x3e>
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	e7fe      	b.n	80038b4 <vTaskSwitchContext+0x3c>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	491a      	ldr	r1, [pc, #104]	; (8003928 <vTaskSwitchContext+0xb0>)
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0e5      	beq.n	800389c <vTaskSwitchContext+0x24>
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4a13      	ldr	r2, [pc, #76]	; (8003928 <vTaskSwitchContext+0xb0>)
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3308      	adds	r3, #8
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d104      	bne.n	8003900 <vTaskSwitchContext+0x88>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	605a      	str	r2, [r3, #4]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <vTaskSwitchContext+0xb4>)
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4a06      	ldr	r2, [pc, #24]	; (8003924 <vTaskSwitchContext+0xac>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000be4 	.word	0x20000be4
 8003920:	20000bd0 	.word	0x20000bd0
 8003924:	20000bc4 	.word	0x20000bc4
 8003928:	200006ec 	.word	0x200006ec
 800392c:	200006e8 	.word	0x200006e8

08003930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <vTaskPlaceOnEventList+0x24>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e7fe      	b.n	8003952 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <vTaskPlaceOnEventList+0x44>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3318      	adds	r3, #24
 800395a:	4619      	mov	r1, r3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fe feb3 	bl	80026c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003962:	2101      	movs	r1, #1
 8003964:	6838      	ldr	r0, [r7, #0]
 8003966:	f000 fa75 	bl	8003e54 <prvAddCurrentTaskToDelayedList>
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	200006e8 	.word	0x200006e8

08003978 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <vTaskPlaceOnEventListRestricted+0x26>
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e7fe      	b.n	800399c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <vTaskPlaceOnEventListRestricted+0x50>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3318      	adds	r3, #24
 80039a4:	4619      	mov	r1, r3
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f7fe fe6b 	bl	8002682 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	68b8      	ldr	r0, [r7, #8]
 80039bc:	f000 fa4a 	bl	8003e54 <prvAddCurrentTaskToDelayedList>
	}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200006e8 	.word	0x200006e8

080039cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <xTaskRemoveFromEventList+0x2a>
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	e7fe      	b.n	80039f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	3318      	adds	r3, #24
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fe9c 	bl	8002738 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <xTaskRemoveFromEventList+0xac>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11d      	bne.n	8003a44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fe93 	bl	8002738 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <xTaskRemoveFromEventList+0xb0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d903      	bls.n	8003a26 <xTaskRemoveFromEventList+0x5a>
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <xTaskRemoveFromEventList+0xb0>)
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <xTaskRemoveFromEventList+0xb4>)
 8003a34:	441a      	add	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f7fe fe20 	bl	8002682 <vListInsertEnd>
 8003a42:	e005      	b.n	8003a50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3318      	adds	r3, #24
 8003a48:	4619      	mov	r1, r3
 8003a4a:	480e      	ldr	r0, [pc, #56]	; (8003a84 <xTaskRemoveFromEventList+0xb8>)
 8003a4c:	f7fe fe19 	bl	8002682 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <xTaskRemoveFromEventList+0xbc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d905      	bls.n	8003a6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <xTaskRemoveFromEventList+0xc0>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e001      	b.n	8003a6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a6e:	697b      	ldr	r3, [r7, #20]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000be4 	.word	0x20000be4
 8003a7c:	20000bc4 	.word	0x20000bc4
 8003a80:	200006ec 	.word	0x200006ec
 8003a84:	20000b7c 	.word	0x20000b7c
 8003a88:	200006e8 	.word	0x200006e8
 8003a8c:	20000bd0 	.word	0x20000bd0

08003a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <vTaskInternalSetTimeOutState+0x24>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <vTaskInternalSetTimeOutState+0x28>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000bd4 	.word	0x20000bd4
 8003ab8:	20000bc0 	.word	0x20000bc0

08003abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <xTaskCheckForTimeOut+0x24>
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	e7fe      	b.n	8003ade <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <xTaskCheckForTimeOut+0x3e>
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e7fe      	b.n	8003af8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003afa:	f000 fdf5 	bl	80046e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <xTaskCheckForTimeOut+0xb8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b16:	d102      	bne.n	8003b1e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e023      	b.n	8003b66 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <xTaskCheckForTimeOut+0xbc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d007      	beq.n	8003b3a <xTaskCheckForTimeOut+0x7e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	e015      	b.n	8003b66 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d20b      	bcs.n	8003b5c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	1ad2      	subs	r2, r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff9d 	bl	8003a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e004      	b.n	8003b66 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b66:	f000 fded 	bl	8004744 <vPortExitCritical>

	return xReturn;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000bc0 	.word	0x20000bc0
 8003b78:	20000bd4 	.word	0x20000bd4

08003b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <vTaskMissedYield+0x14>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000bd0 	.word	0x20000bd0

08003b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b9c:	f000 f852 	bl	8003c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ba0:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <prvIdleTask+0x28>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d9f9      	bls.n	8003b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <prvIdleTask+0x2c>)
 8003baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bb8:	e7f0      	b.n	8003b9c <prvIdleTask+0x8>
 8003bba:	bf00      	nop
 8003bbc:	200006ec 	.word	0x200006ec
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	e00c      	b.n	8003bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <prvInitialiseTaskLists+0x60>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fd24 	bl	800262c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3301      	adds	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b37      	cmp	r3, #55	; 0x37
 8003bee:	d9ef      	bls.n	8003bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bf0:	480d      	ldr	r0, [pc, #52]	; (8003c28 <prvInitialiseTaskLists+0x64>)
 8003bf2:	f7fe fd1b 	bl	800262c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bf6:	480d      	ldr	r0, [pc, #52]	; (8003c2c <prvInitialiseTaskLists+0x68>)
 8003bf8:	f7fe fd18 	bl	800262c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bfc:	480c      	ldr	r0, [pc, #48]	; (8003c30 <prvInitialiseTaskLists+0x6c>)
 8003bfe:	f7fe fd15 	bl	800262c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c02:	480c      	ldr	r0, [pc, #48]	; (8003c34 <prvInitialiseTaskLists+0x70>)
 8003c04:	f7fe fd12 	bl	800262c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c08:	480b      	ldr	r0, [pc, #44]	; (8003c38 <prvInitialiseTaskLists+0x74>)
 8003c0a:	f7fe fd0f 	bl	800262c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <prvInitialiseTaskLists+0x78>)
 8003c10:	4a05      	ldr	r2, [pc, #20]	; (8003c28 <prvInitialiseTaskLists+0x64>)
 8003c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <prvInitialiseTaskLists+0x7c>)
 8003c16:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <prvInitialiseTaskLists+0x68>)
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200006ec 	.word	0x200006ec
 8003c28:	20000b4c 	.word	0x20000b4c
 8003c2c:	20000b60 	.word	0x20000b60
 8003c30:	20000b7c 	.word	0x20000b7c
 8003c34:	20000b90 	.word	0x20000b90
 8003c38:	20000ba8 	.word	0x20000ba8
 8003c3c:	20000b74 	.word	0x20000b74
 8003c40:	20000b78 	.word	0x20000b78

08003c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c4a:	e019      	b.n	8003c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c4c:	f000 fd4c 	bl	80046e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <prvCheckTasksWaitingTermination+0x4c>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe fd6b 	bl	8002738 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c62:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <prvCheckTasksWaitingTermination+0x50>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <prvCheckTasksWaitingTermination+0x50>)
 8003c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <prvCheckTasksWaitingTermination+0x54>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <prvCheckTasksWaitingTermination+0x54>)
 8003c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c76:	f000 fd65 	bl	8004744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f80e 	bl	8003c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <prvCheckTasksWaitingTermination+0x54>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e1      	bne.n	8003c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000b90 	.word	0x20000b90
 8003c94:	20000bbc 	.word	0x20000bbc
 8003c98:	20000ba4 	.word	0x20000ba4

08003c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d108      	bne.n	8003cc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fed0 	bl	8004a58 <vPortFree>
				vPortFree( pxTCB );
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fecd 	bl	8004a58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cbe:	e017      	b.n	8003cf0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d103      	bne.n	8003cd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fec4 	bl	8004a58 <vPortFree>
	}
 8003cd0:	e00e      	b.n	8003cf0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d009      	beq.n	8003cf0 <prvDeleteTCB+0x54>
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e7fe      	b.n	8003cee <prvDeleteTCB+0x52>
	}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <prvResetNextTaskUnblockTime+0x40>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <prvResetNextTaskUnblockTime+0x14>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <prvResetNextTaskUnblockTime+0x16>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d004      	beq.n	8003d1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <prvResetNextTaskUnblockTime+0x44>)
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d1a:	e008      	b.n	8003d2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <prvResetNextTaskUnblockTime+0x40>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <prvResetNextTaskUnblockTime+0x44>)
 8003d2c:	6013      	str	r3, [r2, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	20000b74 	.word	0x20000b74
 8003d3c:	20000bdc 	.word	0x20000bdc

08003d40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <xTaskGetSchedulerState+0x34>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	e008      	b.n	8003d66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <xTaskGetSchedulerState+0x38>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	e001      	b.n	8003d66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d66:	687b      	ldr	r3, [r7, #4]
	}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000bc8 	.word	0x20000bc8
 8003d78:	20000be4 	.word	0x20000be4

08003d7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d054      	beq.n	8003e3c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d92:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <xTaskPriorityDisinherit+0xcc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d009      	beq.n	8003db0 <xTaskPriorityDisinherit+0x34>
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	e7fe      	b.n	8003dae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <xTaskPriorityDisinherit+0x50>
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	e7fe      	b.n	8003dca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	1e5a      	subs	r2, r3, #1
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d02c      	beq.n	8003e3c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d128      	bne.n	8003e3c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fca2 	bl	8002738 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <xTaskPriorityDisinherit+0xd0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d903      	bls.n	8003e1c <xTaskPriorityDisinherit+0xa0>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <xTaskPriorityDisinherit+0xd0>)
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <xTaskPriorityDisinherit+0xd4>)
 8003e2a:	441a      	add	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f7fe fc25 	bl	8002682 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e3c:	697b      	ldr	r3, [r7, #20]
	}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	200006e8 	.word	0x200006e8
 8003e4c:	20000bc4 	.word	0x20000bc4
 8003e50:	200006ec 	.word	0x200006ec

08003e54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e64:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fe fc64 	bl	8002738 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e76:	d10a      	bne.n	8003e8e <prvAddCurrentTaskToDelayedList+0x3a>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4819      	ldr	r0, [pc, #100]	; (8003eec <prvAddCurrentTaskToDelayedList+0x98>)
 8003e88:	f7fe fbfb 	bl	8002682 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e8c:	e026      	b.n	8003edc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e96:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d209      	bcs.n	8003eba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fe fc08 	bl	80026c8 <vListInsert>
}
 8003eb8:	e010      	b.n	8003edc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7fe fbfe 	bl	80026c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d202      	bcs.n	8003edc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ed6:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6013      	str	r3, [r2, #0]
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000bc0 	.word	0x20000bc0
 8003ee8:	200006e8 	.word	0x200006e8
 8003eec:	20000ba8 	.word	0x20000ba8
 8003ef0:	20000b78 	.word	0x20000b78
 8003ef4:	20000b74 	.word	0x20000b74
 8003ef8:	20000bdc 	.word	0x20000bdc

08003efc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f06:	f000 fac3 	bl	8004490 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <xTimerCreateTimerTask+0x80>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d021      	beq.n	8003f56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f1a:	1d3a      	adds	r2, r7, #4
 8003f1c:	f107 0108 	add.w	r1, r7, #8
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fb67 	bl	80025f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	9202      	str	r2, [sp, #8]
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	2302      	movs	r3, #2
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	4910      	ldr	r1, [pc, #64]	; (8003f80 <xTimerCreateTimerTask+0x84>)
 8003f3e:	4811      	ldr	r0, [pc, #68]	; (8003f84 <xTimerCreateTimerTask+0x88>)
 8003f40:	f7ff f8f8 	bl	8003134 <xTaskCreateStatic>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <xTimerCreateTimerTask+0x8c>)
 8003f48:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f4a:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <xTimerCreateTimerTask+0x8c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f52:	2301      	movs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <xTimerCreateTimerTask+0x74>
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	e7fe      	b.n	8003f6e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003f70:	697b      	ldr	r3, [r7, #20]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000c18 	.word	0x20000c18
 8003f80:	08004d3c 	.word	0x08004d3c
 8003f84:	080040a5 	.word	0x080040a5
 8003f88:	20000c1c 	.word	0x20000c1c

08003f8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <xTimerGenericCommand+0x2c>
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	623b      	str	r3, [r7, #32]
 8003fb6:	e7fe      	b.n	8003fb6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <xTimerGenericCommand+0x94>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d02a      	beq.n	8004016 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b05      	cmp	r3, #5
 8003fd0:	dc18      	bgt.n	8004004 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fd2:	f7ff feb5 	bl	8003d40 <xTaskGetSchedulerState>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d109      	bne.n	8003ff0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <xTimerGenericCommand+0x94>)
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	f107 0110 	add.w	r1, r7, #16
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe8:	f7fe fcce 	bl	8002988 <xQueueGenericSend>
 8003fec:	6278      	str	r0, [r7, #36]	; 0x24
 8003fee:	e012      	b.n	8004016 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <xTimerGenericCommand+0x94>)
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	f107 0110 	add.w	r1, r7, #16
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f7fe fcc4 	bl	8002988 <xQueueGenericSend>
 8004000:	6278      	str	r0, [r7, #36]	; 0x24
 8004002:	e008      	b.n	8004016 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <xTimerGenericCommand+0x94>)
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	f107 0110 	add.w	r1, r7, #16
 800400c:	2300      	movs	r3, #0
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	f7fe fdb4 	bl	8002b7c <xQueueGenericSendFromISR>
 8004014:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000c18 	.word	0x20000c18

08004024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800402e:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <prvProcessExpiredTimer+0x7c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3304      	adds	r3, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fb7b 	bl	8002738 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d121      	bne.n	800408e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	18d1      	adds	r1, r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	6978      	ldr	r0, [r7, #20]
 8004058:	f000 f8c8 	bl	80041ec <prvInsertTimerInActiveList>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d015      	beq.n	800408e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004062:	2300      	movs	r3, #0
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2300      	movs	r3, #0
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	2100      	movs	r1, #0
 800406c:	6978      	ldr	r0, [r7, #20]
 800406e:	f7ff ff8d 	bl	8003f8c <xTimerGenericCommand>
 8004072:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <prvProcessExpiredTimer+0x6a>
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e7fe      	b.n	800408c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	6978      	ldr	r0, [r7, #20]
 8004094:	4798      	blx	r3
}
 8004096:	bf00      	nop
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000c10 	.word	0x20000c10

080040a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040ac:	f107 0308 	add.w	r3, r7, #8
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 f857 	bl	8004164 <prvGetNextExpireTime>
 80040b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4619      	mov	r1, r3
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f803 	bl	80040c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040c2:	f000 f8d5 	bl	8004270 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040c6:	e7f1      	b.n	80040ac <prvTimerTask+0x8>

080040c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040d2:	f7ff fa5b 	bl	800358c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f866 	bl	80041ac <prvSampleTimeNow>
 80040e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d130      	bne.n	800414a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <prvProcessTimerOrBlockTask+0x3c>
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d806      	bhi.n	8004104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040f6:	f7ff fa57 	bl	80035a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff ff91 	bl	8004024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004102:	e024      	b.n	800414e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <prvProcessTimerOrBlockTask+0x90>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <prvProcessTimerOrBlockTask+0x94>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	f7fe ffcf 	bl	80030cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800412e:	f7ff fa3b 	bl	80035a8 <xTaskResumeAll>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <prvProcessTimerOrBlockTask+0x98>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
}
 8004148:	e001      	b.n	800414e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800414a:	f7ff fa2d 	bl	80035a8 <xTaskResumeAll>
}
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000c14 	.word	0x20000c14
 800415c:	20000c18 	.word	0x20000c18
 8004160:	e000ed04 	.word	0xe000ed04

08004164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <prvGetNextExpireTime+0x44>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <prvGetNextExpireTime+0x44>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e001      	b.n	800419a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000c10 	.word	0x20000c10

080041ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041b4:	f7ff fa94 	bl	80036e0 <xTaskGetTickCount>
 80041b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <prvSampleTimeNow+0x3c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d205      	bcs.n	80041d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041c4:	f000 f904 	bl	80043d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e002      	b.n	80041d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041d6:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <prvSampleTimeNow+0x3c>)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041dc:	68fb      	ldr	r3, [r7, #12]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000c20 	.word	0x20000c20

080041ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d812      	bhi.n	8004238 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	1ad2      	subs	r2, r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	429a      	cmp	r2, r3
 800421e:	d302      	bcc.n	8004226 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004220:	2301      	movs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	e01b      	b.n	800425e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <prvInsertTimerInActiveList+0x7c>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3304      	adds	r3, #4
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f7fe fa49 	bl	80026c8 <vListInsert>
 8004236:	e012      	b.n	800425e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d206      	bcs.n	800424e <prvInsertTimerInActiveList+0x62>
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e007      	b.n	800425e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <prvInsertTimerInActiveList+0x80>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3304      	adds	r3, #4
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f7fe fa35 	bl	80026c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800425e:	697b      	ldr	r3, [r7, #20]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000c14 	.word	0x20000c14
 800426c:	20000c10 	.word	0x20000c10

08004270 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08e      	sub	sp, #56	; 0x38
 8004274:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004276:	e099      	b.n	80043ac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	da17      	bge.n	80042ae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	3304      	adds	r3, #4
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <prvProcessReceivedCommands+0x2e>
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	e7fe      	b.n	800429c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a4:	6850      	ldr	r0, [r2, #4]
 80042a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a8:	6892      	ldr	r2, [r2, #8]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	db7a      	blt.n	80043aa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	3304      	adds	r3, #4
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe fa37 	bl	8002738 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042ca:	463b      	mov	r3, r7
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff6d 	bl	80041ac <prvSampleTimeNow>
 80042d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b09      	cmp	r3, #9
 80042d8:	d868      	bhi.n	80043ac <prvProcessReceivedCommands+0x13c>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <prvProcessReceivedCommands+0x70>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004309 	.word	0x08004309
 80042ec:	080043ad 	.word	0x080043ad
 80042f0:	08004363 	.word	0x08004363
 80042f4:	08004399 	.word	0x08004399
 80042f8:	08004309 	.word	0x08004309
 80042fc:	08004309 	.word	0x08004309
 8004300:	080043ad 	.word	0x080043ad
 8004304:	08004363 	.word	0x08004363
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	18d1      	adds	r1, r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004316:	f7ff ff69 	bl	80041ec <prvInsertTimerInActiveList>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d045      	beq.n	80043ac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004326:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d13d      	bne.n	80043ac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	441a      	add	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2300      	movs	r3, #0
 800433e:	2100      	movs	r1, #0
 8004340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004342:	f7ff fe23 	bl	8003f8c <xTimerGenericCommand>
 8004346:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d12e      	bne.n	80043ac <prvProcessReceivedCommands+0x13c>
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	e7fe      	b.n	8004360 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <prvProcessReceivedCommands+0x114>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e7fe      	b.n	8004382 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	18d1      	adds	r1, r2, r3
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004392:	f7ff ff2b 	bl	80041ec <prvInsertTimerInActiveList>
					break;
 8004396:	e009      	b.n	80043ac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80043a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043a4:	f000 fb58 	bl	8004a58 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043a8:	e000      	b.n	80043ac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <prvProcessReceivedCommands+0x15c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	1d39      	adds	r1, r7, #4
 80043b2:	2200      	movs	r2, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe fc75 	bl	8002ca4 <xQueueReceive>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f47f af5b 	bne.w	8004278 <prvProcessReceivedCommands+0x8>
	}
}
 80043c2:	bf00      	nop
 80043c4:	3730      	adds	r7, #48	; 0x30
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000c18 	.word	0x20000c18

080043d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043d6:	e044      	b.n	8004462 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043d8:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <prvSwitchTimerLists+0xb8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043e2:	4b29      	ldr	r3, [pc, #164]	; (8004488 <prvSwitchTimerLists+0xb8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe f9a1 	bl	8002738 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d12d      	bne.n	8004462 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	429a      	cmp	r2, r3
 8004416:	d90e      	bls.n	8004436 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <prvSwitchTimerLists+0xb8>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3304      	adds	r3, #4
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f7fe f94a 	bl	80026c8 <vListInsert>
 8004434:	e015      	b.n	8004462 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004436:	2300      	movs	r3, #0
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2300      	movs	r3, #0
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	2100      	movs	r1, #0
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff fda3 	bl	8003f8c <xTimerGenericCommand>
 8004446:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <prvSwitchTimerLists+0x92>
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	e7fe      	b.n	8004460 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <prvSwitchTimerLists+0xb8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1b5      	bne.n	80043d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <prvSwitchTimerLists+0xb8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <prvSwitchTimerLists+0xbc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a04      	ldr	r2, [pc, #16]	; (8004488 <prvSwitchTimerLists+0xb8>)
 8004478:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800447a:	4a04      	ldr	r2, [pc, #16]	; (800448c <prvSwitchTimerLists+0xbc>)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	6013      	str	r3, [r2, #0]
}
 8004480:	bf00      	nop
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000c10 	.word	0x20000c10
 800448c:	20000c14 	.word	0x20000c14

08004490 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004496:	f000 f927 	bl	80046e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <prvCheckForValidListAndQueue+0x60>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d120      	bne.n	80044e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044a2:	4814      	ldr	r0, [pc, #80]	; (80044f4 <prvCheckForValidListAndQueue+0x64>)
 80044a4:	f7fe f8c2 	bl	800262c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044a8:	4813      	ldr	r0, [pc, #76]	; (80044f8 <prvCheckForValidListAndQueue+0x68>)
 80044aa:	f7fe f8bf 	bl	800262c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <prvCheckForValidListAndQueue+0x6c>)
 80044b0:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <prvCheckForValidListAndQueue+0x64>)
 80044b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <prvCheckForValidListAndQueue+0x70>)
 80044b6:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <prvCheckForValidListAndQueue+0x68>)
 80044b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044ba:	2300      	movs	r3, #0
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <prvCheckForValidListAndQueue+0x74>)
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <prvCheckForValidListAndQueue+0x78>)
 80044c2:	2110      	movs	r1, #16
 80044c4:	200a      	movs	r0, #10
 80044c6:	f7fe f9c9 	bl	800285c <xQueueGenericCreateStatic>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <prvCheckForValidListAndQueue+0x60>)
 80044ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <prvCheckForValidListAndQueue+0x60>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <prvCheckForValidListAndQueue+0x60>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	490b      	ldr	r1, [pc, #44]	; (800450c <prvCheckForValidListAndQueue+0x7c>)
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fdcc 	bl	800307c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044e4:	f000 f92e 	bl	8004744 <vPortExitCritical>
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000c18 	.word	0x20000c18
 80044f4:	20000be8 	.word	0x20000be8
 80044f8:	20000bfc 	.word	0x20000bfc
 80044fc:	20000c10 	.word	0x20000c10
 8004500:	20000c14 	.word	0x20000c14
 8004504:	20000cc4 	.word	0x20000cc4
 8004508:	20000c24 	.word	0x20000c24
 800450c:	08004d44 	.word	0x08004d44

08004510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3b04      	subs	r3, #4
 8004520:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3b04      	subs	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 0201 	bic.w	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3b04      	subs	r3, #4
 800453e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004540:	4a08      	ldr	r2, [pc, #32]	; (8004564 <pxPortInitialiseStack+0x54>)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3b14      	subs	r3, #20
 800454a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3b20      	subs	r3, #32
 8004556:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	08004569 	.word	0x08004569

08004568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800456e:	2300      	movs	r3, #0
 8004570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <prvTaskExitError+0x4c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457a:	d009      	beq.n	8004590 <prvTaskExitError+0x28>
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e7fe      	b.n	800458e <prvTaskExitError+0x26>
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045a2:	bf00      	nop
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0fc      	beq.n	80045a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	2000000c 	.word	0x2000000c
	...

080045c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <pxCurrentTCBConst2>)
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	6808      	ldr	r0, [r1, #0]
 80045c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045ca:	f380 8809 	msr	PSP, r0
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8811 	msr	BASEPRI, r0
 80045da:	f04e 0e0d 	orr.w	lr, lr, #13
 80045de:	4770      	bx	lr

080045e0 <pxCurrentTCBConst2>:
 80045e0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80045e8:	4806      	ldr	r0, [pc, #24]	; (8004604 <prvPortStartFirstTask+0x1c>)
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	6800      	ldr	r0, [r0, #0]
 80045ee:	f380 8808 	msr	MSP, r0
 80045f2:	b662      	cpsie	i
 80045f4:	b661      	cpsie	f
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	df00      	svc	0
 8004600:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004602:	bf00      	nop
 8004604:	e000ed08 	.word	0xe000ed08

08004608 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800460e:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <xPortStartScheduler+0xcc>)
 8004610:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	22ff      	movs	r2, #255	; 0xff
 800461e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <xPortStartScheduler+0xd0>)
 8004634:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004636:	4b29      	ldr	r3, [pc, #164]	; (80046dc <xPortStartScheduler+0xd4>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463c:	e009      	b.n	8004652 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800463e:	4b27      	ldr	r3, [pc, #156]	; (80046dc <xPortStartScheduler+0xd4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	4a25      	ldr	r2, [pc, #148]	; (80046dc <xPortStartScheduler+0xd4>)
 8004646:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d0ef      	beq.n	800463e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800465e:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <xPortStartScheduler+0xd4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1c3 0307 	rsb	r3, r3, #7
 8004666:	2b04      	cmp	r3, #4
 8004668:	d009      	beq.n	800467e <xPortStartScheduler+0x76>
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	e7fe      	b.n	800467c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <xPortStartScheduler+0xd4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <xPortStartScheduler+0xd4>)
 8004686:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004688:	4b14      	ldr	r3, [pc, #80]	; (80046dc <xPortStartScheduler+0xd4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004690:	4a12      	ldr	r2, [pc, #72]	; (80046dc <xPortStartScheduler+0xd4>)
 8004692:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <xPortStartScheduler+0xd8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0f      	ldr	r2, [pc, #60]	; (80046e0 <xPortStartScheduler+0xd8>)
 80046a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <xPortStartScheduler+0xd8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0c      	ldr	r2, [pc, #48]	; (80046e0 <xPortStartScheduler+0xd8>)
 80046ae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046b4:	f000 f8b0 	bl	8004818 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <xPortStartScheduler+0xdc>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046be:	f7ff ff93 	bl	80045e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046c2:	f7ff f8d9 	bl	8003878 <vTaskSwitchContext>
	prvTaskExitError();
 80046c6:	f7ff ff4f 	bl	8004568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	e000e400 	.word	0xe000e400
 80046d8:	20000d14 	.word	0x20000d14
 80046dc:	20000d18 	.word	0x20000d18
 80046e0:	e000ed20 	.word	0xe000ed20
 80046e4:	2000000c 	.word	0x2000000c

080046e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <vPortEnterCritical+0x54>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	4a0d      	ldr	r2, [pc, #52]	; (800473c <vPortEnterCritical+0x54>)
 8004708:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <vPortEnterCritical+0x54>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d10e      	bne.n	8004730 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <vPortEnterCritical+0x58>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <vPortEnterCritical+0x48>
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	e7fe      	b.n	800472e <vPortEnterCritical+0x46>
	}
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000000c 	.word	0x2000000c
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <vPortExitCritical+0x48>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <vPortExitCritical+0x22>
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	e7fe      	b.n	8004764 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <vPortExitCritical+0x48>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3b01      	subs	r3, #1
 800476c:	4a07      	ldr	r2, [pc, #28]	; (800478c <vPortExitCritical+0x48>)
 800476e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <vPortExitCritical+0x48>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <vPortExitCritical+0x3e>
 8004778:	2300      	movs	r3, #0
 800477a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr
 800478c:	2000000c 	.word	0x2000000c

08004790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004790:	f3ef 8009 	mrs	r0, PSP
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <pxCurrentTCBConst>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047a0:	6010      	str	r0, [r2, #0]
 80047a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80047a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047aa:	f380 8811 	msr	BASEPRI, r0
 80047ae:	f7ff f863 	bl	8003878 <vTaskSwitchContext>
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f380 8811 	msr	BASEPRI, r0
 80047ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80047be:	6819      	ldr	r1, [r3, #0]
 80047c0:	6808      	ldr	r0, [r1, #0]
 80047c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047c6:	f380 8809 	msr	PSP, r0
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	4770      	bx	lr

080047d0 <pxCurrentTCBConst>:
 80047d0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop

080047d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047f0:	f7fe ff84 	bl	80036fc <xTaskIncrementTick>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <SysTick_Handler+0x3c>)
 80047fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	2300      	movs	r3, #0
 8004804:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <vPortSetupTimerInterrupt+0x30>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004822:	4b0a      	ldr	r3, [pc, #40]	; (800484c <vPortSetupTimerInterrupt+0x34>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <vPortSetupTimerInterrupt+0x38>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <vPortSetupTimerInterrupt+0x3c>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	099b      	lsrs	r3, r3, #6
 8004834:	4a08      	ldr	r2, [pc, #32]	; (8004858 <vPortSetupTimerInterrupt+0x40>)
 8004836:	3b01      	subs	r3, #1
 8004838:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800483a:	4b03      	ldr	r3, [pc, #12]	; (8004848 <vPortSetupTimerInterrupt+0x30>)
 800483c:	2207      	movs	r2, #7
 800483e:	601a      	str	r2, [r3, #0]
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr
 8004848:	e000e010 	.word	0xe000e010
 800484c:	e000e018 	.word	0xe000e018
 8004850:	20000000 	.word	0x20000000
 8004854:	10624dd3 	.word	0x10624dd3
 8004858:	e000e014 	.word	0xe000e014

0800485c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004862:	f3ef 8305 	mrs	r3, IPSR
 8004866:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b0f      	cmp	r3, #15
 800486c:	d913      	bls.n	8004896 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800486e:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <vPortValidateInterruptPriority+0x68>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <vPortValidateInterruptPriority+0x6c>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	7afa      	ldrb	r2, [r7, #11]
 800487e:	429a      	cmp	r2, r3
 8004880:	d209      	bcs.n	8004896 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	e7fe      	b.n	8004894 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <vPortValidateInterruptPriority+0x70>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <vPortValidateInterruptPriority+0x74>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d909      	bls.n	80048ba <vPortValidateInterruptPriority+0x5e>
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	e7fe      	b.n	80048b8 <vPortValidateInterruptPriority+0x5c>
	}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	e000e3f0 	.word	0xe000e3f0
 80048c8:	20000d14 	.word	0x20000d14
 80048cc:	e000ed0c 	.word	0xe000ed0c
 80048d0:	20000d18 	.word	0x20000d18

080048d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048e0:	f7fe fe54 	bl	800358c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048e4:	4b57      	ldr	r3, [pc, #348]	; (8004a44 <pvPortMalloc+0x170>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048ec:	f000 f90c 	bl	8004b08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048f0:	4b55      	ldr	r3, [pc, #340]	; (8004a48 <pvPortMalloc+0x174>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f040 808c 	bne.w	8004a16 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01c      	beq.n	800493e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004904:	2208      	movs	r2, #8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	2b00      	cmp	r3, #0
 8004914:	d013      	beq.n	800493e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f023 0307 	bic.w	r3, r3, #7
 800491c:	3308      	adds	r3, #8
 800491e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <pvPortMalloc+0x6a>
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	e7fe      	b.n	800493c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d068      	beq.n	8004a16 <pvPortMalloc+0x142>
 8004944:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <pvPortMalloc+0x178>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d863      	bhi.n	8004a16 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800494e:	4b40      	ldr	r3, [pc, #256]	; (8004a50 <pvPortMalloc+0x17c>)
 8004950:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004952:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <pvPortMalloc+0x17c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004958:	e004      	b.n	8004964 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	429a      	cmp	r2, r3
 800496c:	d903      	bls.n	8004976 <pvPortMalloc+0xa2>
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f1      	bne.n	800495a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004976:	4b33      	ldr	r3, [pc, #204]	; (8004a44 <pvPortMalloc+0x170>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497c:	429a      	cmp	r2, r3
 800497e:	d04a      	beq.n	8004a16 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2208      	movs	r2, #8
 8004986:	4413      	add	r3, r2
 8004988:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	1ad2      	subs	r2, r2, r3
 800499a:	2308      	movs	r3, #8
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	429a      	cmp	r2, r3
 80049a0:	d91e      	bls.n	80049e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <pvPortMalloc+0xf4>
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	e7fe      	b.n	80049c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049da:	69b8      	ldr	r0, [r7, #24]
 80049dc:	f000 f8f6 	bl	8004bcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049e0:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <pvPortMalloc+0x178>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <pvPortMalloc+0x178>)
 80049ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ee:	4b17      	ldr	r3, [pc, #92]	; (8004a4c <pvPortMalloc+0x178>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <pvPortMalloc+0x180>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d203      	bcs.n	8004a02 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049fa:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <pvPortMalloc+0x178>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <pvPortMalloc+0x180>)
 8004a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <pvPortMalloc+0x174>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a16:	f7fe fdc7 	bl	80035a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <pvPortMalloc+0x164>
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e7fe      	b.n	8004a36 <pvPortMalloc+0x162>
	return pvReturn;
 8004a38:	69fb      	ldr	r3, [r7, #28]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3728      	adds	r7, #40	; 0x28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20001924 	.word	0x20001924
 8004a48:	20001930 	.word	0x20001930
 8004a4c:	20001928 	.word	0x20001928
 8004a50:	2000191c 	.word	0x2000191c
 8004a54:	2000192c 	.word	0x2000192c

08004a58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d046      	beq.n	8004af8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4413      	add	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <vPortFree+0xa8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4013      	ands	r3, r2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <vPortFree+0x42>
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e7fe      	b.n	8004a98 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <vPortFree+0x5e>
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	e7fe      	b.n	8004ab4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <vPortFree+0xa8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d019      	beq.n	8004af8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d115      	bne.n	8004af8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <vPortFree+0xa8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004adc:	f7fe fd56 	bl	800358c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <vPortFree+0xac>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4413      	add	r3, r2
 8004aea:	4a06      	ldr	r2, [pc, #24]	; (8004b04 <vPortFree+0xac>)
 8004aec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aee:	6938      	ldr	r0, [r7, #16]
 8004af0:	f000 f86c 	bl	8004bcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004af4:	f7fe fd58 	bl	80035a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004af8:	bf00      	nop
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20001930 	.word	0x20001930
 8004b04:	20001928 	.word	0x20001928

08004b08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b14:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <prvHeapInit+0xac>)
 8004b16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00c      	beq.n	8004b3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3307      	adds	r3, #7
 8004b26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0307 	bic.w	r3, r3, #7
 8004b2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	4a1f      	ldr	r2, [pc, #124]	; (8004bb4 <prvHeapInit+0xac>)
 8004b38:	4413      	add	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b40:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <prvHeapInit+0xb0>)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b46:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <prvHeapInit+0xb0>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b54:	2208      	movs	r2, #8
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0307 	bic.w	r3, r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <prvHeapInit+0xb4>)
 8004b68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b6a:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <prvHeapInit+0xb4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b72:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <prvHeapInit+0xb4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	1ad2      	subs	r2, r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <prvHeapInit+0xb4>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <prvHeapInit+0xb8>)
 8004b96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <prvHeapInit+0xbc>)
 8004b9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <prvHeapInit+0xc0>)
 8004ba2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ba6:	601a      	str	r2, [r3, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000d1c 	.word	0x20000d1c
 8004bb8:	2000191c 	.word	0x2000191c
 8004bbc:	20001924 	.word	0x20001924
 8004bc0:	2000192c 	.word	0x2000192c
 8004bc4:	20001928 	.word	0x20001928
 8004bc8:	20001930 	.word	0x20001930

08004bcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bd4:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <prvInsertBlockIntoFreeList+0xa8>)
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e002      	b.n	8004be0 <prvInsertBlockIntoFreeList+0x14>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d8f7      	bhi.n	8004bda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d108      	bne.n	8004c0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	441a      	add	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d118      	bne.n	8004c54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <prvInsertBlockIntoFreeList+0xac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d00d      	beq.n	8004c4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e008      	b.n	8004c5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <prvInsertBlockIntoFreeList+0xac>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e003      	b.n	8004c5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d002      	beq.n	8004c6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	2000191c 	.word	0x2000191c
 8004c78:	20001924 	.word	0x20001924

08004c7c <__libc_init_array>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	2500      	movs	r5, #0
 8004c80:	4e0c      	ldr	r6, [pc, #48]	; (8004cb4 <__libc_init_array+0x38>)
 8004c82:	4c0d      	ldr	r4, [pc, #52]	; (8004cb8 <__libc_init_array+0x3c>)
 8004c84:	1ba4      	subs	r4, r4, r6
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	42a5      	cmp	r5, r4
 8004c8a:	d109      	bne.n	8004ca0 <__libc_init_array+0x24>
 8004c8c:	f000 f82e 	bl	8004cec <_init>
 8004c90:	2500      	movs	r5, #0
 8004c92:	4e0a      	ldr	r6, [pc, #40]	; (8004cbc <__libc_init_array+0x40>)
 8004c94:	4c0a      	ldr	r4, [pc, #40]	; (8004cc0 <__libc_init_array+0x44>)
 8004c96:	1ba4      	subs	r4, r4, r6
 8004c98:	10a4      	asrs	r4, r4, #2
 8004c9a:	42a5      	cmp	r5, r4
 8004c9c:	d105      	bne.n	8004caa <__libc_init_array+0x2e>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca4:	4798      	blx	r3
 8004ca6:	3501      	adds	r5, #1
 8004ca8:	e7ee      	b.n	8004c88 <__libc_init_array+0xc>
 8004caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cae:	4798      	blx	r3
 8004cb0:	3501      	adds	r5, #1
 8004cb2:	e7f2      	b.n	8004c9a <__libc_init_array+0x1e>
 8004cb4:	08004dac 	.word	0x08004dac
 8004cb8:	08004dac 	.word	0x08004dac
 8004cbc:	08004dac 	.word	0x08004dac
 8004cc0:	08004db0 	.word	0x08004db0

08004cc4 <memcpy>:
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	1e43      	subs	r3, r0, #1
 8004cc8:	440a      	add	r2, r1
 8004cca:	4291      	cmp	r1, r2
 8004ccc:	d100      	bne.n	8004cd0 <memcpy+0xc>
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd8:	e7f7      	b.n	8004cca <memcpy+0x6>

08004cda <memset>:
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4402      	add	r2, r0
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d100      	bne.n	8004ce4 <memset+0xa>
 8004ce2:	4770      	bx	lr
 8004ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce8:	e7f9      	b.n	8004cde <memset+0x4>
	...

08004cec <_init>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	bf00      	nop
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr

08004cf8 <_fini>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	bf00      	nop
 8004cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfe:	bc08      	pop	{r3}
 8004d00:	469e      	mov	lr, r3
 8004d02:	4770      	bx	lr
