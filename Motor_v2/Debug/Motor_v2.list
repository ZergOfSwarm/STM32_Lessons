
Motor_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a474  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800a588  0800a588  0001a588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa64  0800aa64  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa64  0800aa64  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa64  0800aa64  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa64  0800aa64  0001aa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa68  0800aa68  0001aa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800aa6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc8  200001e8  0800ac54  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db0  0800ac54  00021db0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b778  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392b  00000000  00000000  0003b989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0003f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  000407d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004685  00000000  00000000  00041bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dc5  00000000  00000000  00046235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a7b5  00000000  00000000  0005bffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f67af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069fc  00000000  00000000  000f6804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a56c 	.word	0x0800a56c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800a56c 	.word	0x0800a56c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001038:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800103c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001048:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800104c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001050:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001058:	e000      	b.n	800105c <ITM_SendChar+0x2c>
    {
      __NOP();
 800105a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800105c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f9      	beq.n	800105a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001066:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <_write>:
void StartDefaultTask(void *argument);
void Start_PID_Task(void *argument);
void Startmy_Tachometer_Task(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	b29a      	uxth	r2, r3
 800108c:	2332      	movs	r3, #50	; 0x32
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <_write+0x48>)
 8001092:	f003 fe75 	bl	8004d80 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e009      	b.n	80010b0 <_write+0x34>
		ITM_SendChar(*ptr++);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffc3 	bl	8001030 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf1      	blt.n	800109c <_write+0x20>
	}
	return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20001c0c 	.word	0x20001c0c

080010c8 <median>:
/* Measure Frequency */
float freq = 0;
float frequency = 0;

float median(float newVal) // “Медианный фильтр”
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    static float buf[3];
    static int count = 0;
    buf[count] = newVal;
 80010d0:	4b30      	ldr	r3, [pc, #192]	; (8001194 <median+0xcc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4930      	ldr	r1, [pc, #192]	; (8001198 <median+0xd0>)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if (++count > 2)
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <median+0xcc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a2c      	ldr	r2, [pc, #176]	; (8001194 <median+0xcc>)
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <median+0xcc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	dd02      	ble.n	80010f4 <median+0x2c>
        count = 0;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <median+0xcc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

    float a = buf[0];
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <median+0xd0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	613b      	str	r3, [r7, #16]
    float b = buf[1];
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <median+0xd0>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	60fb      	str	r3, [r7, #12]
    float c = buf[2];
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <median+0xd0>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	60bb      	str	r3, [r7, #8]

    float middle;
    if ((a <= b) && (a <= c))
 8001106:	68f9      	ldr	r1, [r7, #12]
 8001108:	6938      	ldr	r0, [r7, #16]
 800110a:	f7ff ff73 	bl	8000ff4 <__aeabi_fcmple>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d012      	beq.n	800113a <median+0x72>
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6938      	ldr	r0, [r7, #16]
 8001118:	f7ff ff6c 	bl	8000ff4 <__aeabi_fcmple>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00b      	beq.n	800113a <median+0x72>
    {
        middle = (b <= c) ? b : c;
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff65 	bl	8000ff4 <__aeabi_fcmple>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <median+0x6c>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e000      	b.n	8001136 <median+0x6e>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e024      	b.n	8001184 <median+0xbc>
    }
    else
    {
        if ((b <= a) && (b <= c))
 800113a:	6939      	ldr	r1, [r7, #16]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff ff59 	bl	8000ff4 <__aeabi_fcmple>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d012      	beq.n	800116e <median+0xa6>
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff ff52 	bl	8000ff4 <__aeabi_fcmple>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <median+0xa6>
        {
            middle = (a <= c) ? a : c;
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6938      	ldr	r0, [r7, #16]
 800115a:	f7ff ff4b 	bl	8000ff4 <__aeabi_fcmple>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <median+0xa0>
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	e000      	b.n	800116a <median+0xa2>
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e00a      	b.n	8001184 <median+0xbc>
        }
        else
        {
            middle = (a <= b) ? a : b;
 800116e:	68f9      	ldr	r1, [r7, #12]
 8001170:	6938      	ldr	r0, [r7, #16]
 8001172:	f7ff ff3f 	bl	8000ff4 <__aeabi_fcmple>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <median+0xb8>
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	e000      	b.n	8001182 <median+0xba>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	617b      	str	r3, [r7, #20]
        }
    }
    frequency = middle; // Получаем значение частоты.
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <median+0xd4>)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	6013      	str	r3, [r2, #0]
    //printf("frequency = %f\r\n", middle);
    return middle;
 800118a:	697b      	ldr	r3, [r7, #20]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000220 	.word	0x20000220
 8001198:	20000224 	.word	0x20000224
 800119c:	20000218 	.word	0x20000218

080011a0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7f1b      	ldrb	r3, [r3, #28]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d14d      	bne.n	800124c <HAL_TIM_IC_CaptureCallback+0xac>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10a      	bne.n	80011ce <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80011b8:	2100      	movs	r1, #0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f003 f8c0 	bl	8004340 <HAL_TIM_ReadCapturedValue>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011c4:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 80011cc:	e03e      	b.n	800124c <HAL_TIM_IC_CaptureCallback+0xac>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80011ce:	2100      	movs	r1, #0
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f003 f8b5 	bl	8004340 <HAL_TIM_ReadCapturedValue>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80011da:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d907      	bls.n	80011f8 <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e00d      	b.n	8001214 <HAL_TIM_IC_CaptureCallback+0x74>
			else if (IC_Val1 > IC_Val2)
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d907      	bls.n	8001214 <HAL_TIM_IC_CaptureCallback+0x74>
				Difference = (0xffffffff - IC_Val1) + IC_Val2; // для 32bit 0xffffffff
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	3b01      	subs	r3, #1
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001212:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001216:	60fb      	str	r3, [r7, #12]
			freq = refClock/Difference; // Получаем значение частоты c мусором.
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fce9 	bl	8000bf4 <__aeabi_ui2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4619      	mov	r1, r3
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f7ff fdf0 	bl	8000e0c <__aeabi_fdiv>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001232:	601a      	str	r2, [r3, #0]
			median(freq); // Подставляем получанную частоту в “Медианный фильтр”
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff45 	bl	80010c8 <median>
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8001246:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000210 	.word	0x20000210
 8001258:	20000204 	.word	0x20000204
 800125c:	20000208 	.word	0x20000208
 8001260:	2000020c 	.word	0x2000020c
 8001264:	49742400 	.word	0x49742400
 8001268:	20000214 	.word	0x20000214

0800126c <HAL_GPIO_EXTI_Callback>:
int16_t in_max = 4095;       // max value of potentiometer
int8_t in_min = 0;           // min value of potentiometer
unsigned int out_max = 9001; // max value of new diapason
int8_t out_min = 0;          // min value of new diapason

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line4 (A4 Pin)
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	2b10      	cmp	r3, #16
 800127a:	d103      	bne.n	8001284 <HAL_GPIO_EXTI_Callback+0x18>
	{
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800127c:	2100      	movs	r1, #0
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <HAL_GPIO_EXTI_Callback+0x20>)
 8001280:	f002 fb40 	bl	8003904 <HAL_TIM_PWM_Start>
	}
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20001c80 	.word	0x20001c80

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001294:	f000 fd9e 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001298:	f000 f840 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129c:	f000 fa14 	bl	80016c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80012a0:	f000 f8d6 	bl	8001450 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012a4:	f000 f976 	bl	8001594 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80012a8:	f000 f9e4 	bl	8001674 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80012ac:	f000 f892 	bl	80013d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 80012b0:	2100      	movs	r1, #0
 80012b2:	4810      	ldr	r0, [pc, #64]	; (80012f4 <main+0x64>)
 80012b4:	f002 fc20 	bl	8003af8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012b8:	f003 fecc 	bl	8005054 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <main+0x68>)
 80012be:	2100      	movs	r1, #0
 80012c0:	480e      	ldr	r0, [pc, #56]	; (80012fc <main+0x6c>)
 80012c2:	f003 ff2d 	bl	8005120 <osThreadNew>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <main+0x70>)
 80012ca:	6013      	str	r3, [r2, #0]

  /* creation of my_PID_Task */
  my_PID_TaskHandle = osThreadNew(Start_PID_Task, NULL, &my_PID_Task_attributes);
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <main+0x74>)
 80012ce:	2100      	movs	r1, #0
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <main+0x78>)
 80012d2:	f003 ff25 	bl	8005120 <osThreadNew>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <main+0x7c>)
 80012da:	6013      	str	r3, [r2, #0]

  /* creation of my_Tachometer_T */
  my_Tachometer_THandle = osThreadNew(Startmy_Tachometer_Task, NULL, &my_Tachometer_T_attributes);
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <main+0x80>)
 80012de:	2100      	movs	r1, #0
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <main+0x84>)
 80012e2:	f003 ff1d 	bl	8005120 <osThreadNew>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <main+0x88>)
 80012ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012ec:	f003 fee4 	bl	80050b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <main+0x60>
 80012f2:	bf00      	nop
 80012f4:	20001ccc 	.word	0x20001ccc
 80012f8:	0800a5fc 	.word	0x0800a5fc
 80012fc:	08001761 	.word	0x08001761
 8001300:	20001c04 	.word	0x20001c04
 8001304:	0800a620 	.word	0x0800a620
 8001308:	08001771 	.word	0x08001771
 800130c:	20001cc8 	.word	0x20001cc8
 8001310:	0800a644 	.word	0x0800a644
 8001314:	08001835 	.word	0x08001835
 8001318:	20001c08 	.word	0x20001c08

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	; 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	2228      	movs	r2, #40	; 0x28
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f006 fcc7 	bl	8007cbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800134c:	2301      	movs	r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800135a:	2301      	movs	r3, #1
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001368:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800136c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fc08 	bl	8002b88 <HAL_RCC_OscConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800137e:	f000 fa7f 	bl	8001880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
 8001384:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001392:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2102      	movs	r1, #2
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fe72 	bl	8003088 <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013aa:	f000 fa69 	bl	8001880 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ae:	2302      	movs	r3, #2
 80013b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 f82e 	bl	800341c <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013c6:	f000 fa5b 	bl	8001880 <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	; 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_ADC1_Init+0x74>)
 80013e6:	4a19      	ldr	r2, [pc, #100]	; (800144c <MX_ADC1_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_ADC1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_ADC1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_ADC1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_ADC1_Init+0x74>)
 80013fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001402:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_ADC1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_ADC1_Init+0x74>)
 800140c:	2201      	movs	r2, #1
 800140e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_ADC1_Init+0x74>)
 8001412:	f000 fd11 	bl	8001e38 <HAL_ADC_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800141c:	f000 fa30 	bl	8001880 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001420:	2301      	movs	r3, #1
 8001422:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001424:	2301      	movs	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_ADC1_Init+0x74>)
 8001432:	f000 ff99 	bl	8002368 <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800143c:	f000 fa20 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20001c50 	.word	0x20001c50
 800144c:	40012400 	.word	0x40012400

08001450 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b096      	sub	sp, #88	; 0x58
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2220      	movs	r2, #32
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f006 fc18 	bl	8007cbe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <MX_TIM1_Init+0x13c>)
 8001490:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <MX_TIM1_Init+0x140>)
 8001492:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001494:	4b3d      	ldr	r3, [pc, #244]	; (800158c <MX_TIM1_Init+0x13c>)
 8001496:	2247      	movs	r2, #71	; 0x47
 8001498:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b3c      	ldr	r3, [pc, #240]	; (800158c <MX_TIM1_Init+0x13c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9000;
 80014a0:	4b3a      	ldr	r3, [pc, #232]	; (800158c <MX_TIM1_Init+0x13c>)
 80014a2:	f242 3228 	movw	r2, #9000	; 0x2328
 80014a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b38      	ldr	r3, [pc, #224]	; (800158c <MX_TIM1_Init+0x13c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <MX_TIM1_Init+0x13c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <MX_TIM1_Init+0x13c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ba:	4834      	ldr	r0, [pc, #208]	; (800158c <MX_TIM1_Init+0x13c>)
 80014bc:	f002 f928 	bl	8003710 <HAL_TIM_Base_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014c6:	f000 f9db 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d4:	4619      	mov	r1, r3
 80014d6:	482d      	ldr	r0, [pc, #180]	; (800158c <MX_TIM1_Init+0x13c>)
 80014d8:	f002 fe6e 	bl	80041b8 <HAL_TIM_ConfigClockSource>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014e2:	f000 f9cd 	bl	8001880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014e6:	4829      	ldr	r0, [pc, #164]	; (800158c <MX_TIM1_Init+0x13c>)
 80014e8:	f002 f9b4 	bl	8003854 <HAL_TIM_PWM_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014f2:	f000 f9c5 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001502:	4619      	mov	r1, r3
 8001504:	4821      	ldr	r0, [pc, #132]	; (800158c <MX_TIM1_Init+0x13c>)
 8001506:	f003 fb2d 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001510:	f000 f9b6 	bl	8001880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001514:	2370      	movs	r3, #112	; 0x70
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 5000;
 8001518:	f241 3388 	movw	r3, #5000	; 0x1388
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	4814      	ldr	r0, [pc, #80]	; (800158c <MX_TIM1_Init+0x13c>)
 800153c:	f002 fd7e 	bl	800403c <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001546:	f000 f99b 	bl	8001880 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM1_Init+0x13c>)
 800156e:	f003 fb57 	bl	8004c20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001578:	f000 f982 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM1_Init+0x13c>)
 800157e:	f000 fa51 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 8001582:	bf00      	nop
 8001584:	3758      	adds	r7, #88	; 0x58
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20001c80 	.word	0x20001c80
 8001590:	40012c00 	.word	0x40012c00

08001594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0318 	add.w	r3, r7, #24
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015b2:	463b      	mov	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015be:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <MX_TIM2_Init+0xdc>)
 80015c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <MX_TIM2_Init+0xdc>)
 80015c8:	2247      	movs	r2, #71	; 0x47
 80015ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <MX_TIM2_Init+0xdc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <MX_TIM2_Init+0xdc>)
 80015d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <MX_TIM2_Init+0xdc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <MX_TIM2_Init+0xdc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e6:	4822      	ldr	r0, [pc, #136]	; (8001670 <MX_TIM2_Init+0xdc>)
 80015e8:	f002 f892 	bl	8003710 <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80015f2:	f000 f945 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	4619      	mov	r1, r3
 8001602:	481b      	ldr	r0, [pc, #108]	; (8001670 <MX_TIM2_Init+0xdc>)
 8001604:	f002 fdd8 	bl	80041b8 <HAL_TIM_ConfigClockSource>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800160e:	f000 f937 	bl	8001880 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001612:	4817      	ldr	r0, [pc, #92]	; (8001670 <MX_TIM2_Init+0xdc>)
 8001614:	f002 fa18 	bl	8003a48 <HAL_TIM_IC_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800161e:	f000 f92f 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	4619      	mov	r1, r3
 8001630:	480f      	ldr	r0, [pc, #60]	; (8001670 <MX_TIM2_Init+0xdc>)
 8001632:	f003 fa97 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800163c:	f000 f920 	bl	8001880 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001640:	2300      	movs	r3, #0
 8001642:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001644:	2301      	movs	r3, #1
 8001646:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_TIM2_Init+0xdc>)
 8001658:	f002 fc5c 	bl	8003f14 <HAL_TIM_IC_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001662:	f000 f90d 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20001ccc 	.word	0x20001ccc

08001674 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_USART3_UART_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART3_UART_Init+0x4c>)
 80016ac:	f003 fb1b 	bl	8004ce6 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016b6:	f000 f8e3 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20001c0c 	.word	0x20001c0c
 80016c4:	40004800 	.word	0x40004800

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_GPIO_Init+0x8c>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <MX_GPIO_Init+0x8c>)
 80016e2:	f043 0320 	orr.w	r3, r3, #32
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_GPIO_Init+0x8c>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_GPIO_Init+0x8c>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a16      	ldr	r2, [pc, #88]	; (8001754 <MX_GPIO_Init+0x8c>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_GPIO_Init+0x8c>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_GPIO_Init+0x8c>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a10      	ldr	r2, [pc, #64]	; (8001754 <MX_GPIO_Init+0x8c>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_GPIO_Init+0x8c>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Zero_Pin */
  GPIO_InitStruct.Pin = Zero_Pin;
 8001724:	2310      	movs	r3, #16
 8001726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_GPIO_Init+0x90>)
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Zero_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4809      	ldr	r0, [pc, #36]	; (800175c <MX_GPIO_Init+0x94>)
 8001738:	f001 f88a 	bl	8002850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2105      	movs	r1, #5
 8001740:	200a      	movs	r0, #10
 8001742:	f001 f85a 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001746:	200a      	movs	r0, #10
 8001748:	f001 f873 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	10210000 	.word	0x10210000
 800175c:	40010800 	.word	0x40010800

08001760 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f003 fd83 	bl	8005274 <osDelay>
 800176e:	e7fb      	b.n	8001768 <StartDefaultTask+0x8>

08001770 <Start_PID_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_PID_Task */
void Start_PID_Task(void *argument)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	uint16_t raw;
  /* Infinite loop */
  for(;;)
  {
	  // Get ADC value
	 	    HAL_ADC_Start(&hadc1);
 8001778:	4827      	ldr	r0, [pc, #156]	; (8001818 <Start_PID_Task+0xa8>)
 800177a:	f000 fc35 	bl	8001fe8 <HAL_ADC_Start>
	 	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800177e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001782:	4825      	ldr	r0, [pc, #148]	; (8001818 <Start_PID_Task+0xa8>)
 8001784:	f000 fcde 	bl	8002144 <HAL_ADC_PollForConversion>
	 	    raw = HAL_ADC_GetValue(&hadc1);
 8001788:	4823      	ldr	r0, [pc, #140]	; (8001818 <Start_PID_Task+0xa8>)
 800178a:	f000 fde1 	bl	8002350 <HAL_ADC_GetValue>
 800178e:	4603      	mov	r3, r0
 8001790:	81fb      	strh	r3, [r7, #14]

	 	    value = (raw - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; // Function map
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <Start_PID_Task+0xac>)
 8001796:	f992 2000 	ldrsb.w	r2, [r2]
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	4619      	mov	r1, r3
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <Start_PID_Task+0xb0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a20      	ldr	r2, [pc, #128]	; (8001824 <Start_PID_Task+0xb4>)
 80017a4:	f992 2000 	ldrsb.w	r2, [r2]
 80017a8:	1a9b      	subs	r3, r3, r2
 80017aa:	fb03 f301 	mul.w	r3, r3, r1
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <Start_PID_Task+0xb8>)
 80017b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4a19      	ldr	r2, [pc, #100]	; (800181c <Start_PID_Task+0xac>)
 80017b8:	f992 2000 	ldrsb.w	r2, [r2]
 80017bc:	1a8a      	subs	r2, r1, r2
 80017be:	fbb3 f3f2 	udiv	r3, r3, r2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <Start_PID_Task+0xb4>)
 80017c6:	f993 3000 	ldrsb.w	r3, [r3]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <Start_PID_Task+0xbc>)
 80017d4:	801a      	strh	r2, [r3, #0]

	 	    if (value >= 8840)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <Start_PID_Task+0xbc>)
 80017d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017dc:	f242 2287 	movw	r2, #8839	; 0x2287
 80017e0:	4293      	cmp	r3, r2
 80017e2:	dd04      	ble.n	80017ee <Start_PID_Task+0x7e>
	 	    {
	 	    value = 9001; // До этого значения никогда не дойдет
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <Start_PID_Task+0xbc>)
 80017e6:	f242 3229 	movw	r2, #9001	; 0x2329
 80017ea:	801a      	strh	r2, [r3, #0]
 80017ec:	e00d      	b.n	800180a <Start_PID_Task+0x9a>
	 	   //printf("Value is: %d\r\n",value);
	 	    }
	 	    else if (value <= 15)
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <Start_PID_Task+0xbc>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	dc03      	bgt.n	8001800 <Start_PID_Task+0x90>
	 	    {
	 	    value = 0;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <Start_PID_Task+0xbc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	e004      	b.n	800180a <Start_PID_Task+0x9a>
	 	   //printf("Value is: %d\r\n",value);
	 	    }
	 	    else {
	 	    	value=value;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <Start_PID_Task+0xbc>)
 8001802:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <Start_PID_Task+0xbc>)
 8001808:	801a      	strh	r2, [r3, #0]
	 	       //printf("Value is: %d\r\n",value);
	 	    }

	 		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value);
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <Start_PID_Task+0xbc>)
 800180c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <Start_PID_Task+0xc0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	635a      	str	r2, [r3, #52]	; 0x34
	 	    HAL_ADC_Start(&hadc1);
 8001816:	e7af      	b.n	8001778 <Start_PID_Task+0x8>
 8001818:	20001c50 	.word	0x20001c50
 800181c:	2000021e 	.word	0x2000021e
 8001820:	20000004 	.word	0x20000004
 8001824:	2000021f 	.word	0x2000021f
 8001828:	20000000 	.word	0x20000000
 800182c:	2000021c 	.word	0x2000021c
 8001830:	20001c80 	.word	0x20001c80

08001834 <Startmy_Tachometer_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startmy_Tachometer_Task */
void Startmy_Tachometer_Task(void *argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startmy_Tachometer_Task */
  /* Infinite loop */
  for(;;)
  {
	  printf("frequency = %f\r\n",frequency);
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <Startmy_Tachometer_Task+0x20>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fdf1 	bl	8000428 <__aeabi_f2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <Startmy_Tachometer_Task+0x24>)
 800184c:	f006 fefa 	bl	8008644 <iprintf>
 8001850:	e7f4      	b.n	800183c <Startmy_Tachometer_Task+0x8>
 8001852:	bf00      	nop
 8001854:	20000218 	.word	0x20000218
 8001858:	0800a5b0 	.word	0x0800a5b0

0800185c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800186e:	f000 fac7 	bl	8001e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40000800 	.word	0x40000800

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	e7fe      	b.n	8001888 <Error_Handler+0x8>
	...

0800188c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_MspInit+0x68>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_MspInit+0x68>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6193      	str	r3, [r2, #24]
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_MspInit+0x68>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_MspInit+0x68>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_MspInit+0x68>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_MspInit+0x68>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	210f      	movs	r1, #15
 80018c6:	f06f 0001 	mvn.w	r0, #1
 80018ca:	f000 ff96 	bl	80027fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_MspInit+0x6c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_MspInit+0x6c>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000

080018fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_ADC_MspInit+0x6c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d121      	bne.n	8001960 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_ADC_MspInit+0x70>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_ADC_MspInit+0x70>)
 8001922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_ADC_MspInit+0x70>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_ADC_MspInit+0x70>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <HAL_ADC_MspInit+0x70>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_ADC_MspInit+0x70>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800194c:	2302      	movs	r3, #2
 800194e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001950:	2303      	movs	r3, #3
 8001952:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4619      	mov	r1, r3
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_ADC_MspInit+0x74>)
 800195c:	f000 ff78 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40012400 	.word	0x40012400
 800196c:	40021000 	.word	0x40021000
 8001970:	40010800 	.word	0x40010800

08001974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <HAL_TIM_Base_MspInit+0xa4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d10c      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_TIM_Base_MspInit+0xa8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <HAL_TIM_Base_MspInit+0xa8>)
 800199a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <HAL_TIM_Base_MspInit+0xa8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ac:	e030      	b.n	8001a10 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b6:	d12b      	bne.n	8001a10 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_TIM_Base_MspInit+0xa8>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_TIM_Base_MspInit+0xa8>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	61d3      	str	r3, [r2, #28]
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_TIM_Base_MspInit+0xa8>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_TIM_Base_MspInit+0xa8>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_TIM_Base_MspInit+0xa8>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_TIM_Base_MspInit+0xa8>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019e8:	2301      	movs	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4619      	mov	r1, r3
 80019fa:	4809      	ldr	r0, [pc, #36]	; (8001a20 <HAL_TIM_Base_MspInit+0xac>)
 80019fc:	f000 ff28 	bl	8002850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2105      	movs	r1, #5
 8001a04:	201c      	movs	r0, #28
 8001a06:	f000 fef8 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0a:	201c      	movs	r0, #28
 8001a0c:	f000 ff11 	bl	8002832 <HAL_NVIC_EnableIRQ>
}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40012c00 	.word	0x40012c00
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010800 	.word	0x40010800

08001a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_TIM_MspPostInit+0x5c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d118      	bne.n	8001a76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_TIM_MspPostInit+0x60>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_TIM_MspPostInit+0x60>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_TIM_MspPostInit+0x60>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <HAL_TIM_MspPostInit+0x64>)
 8001a72:	f000 feed 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a76:	bf00      	nop
 8001a78:	3720      	adds	r7, #32
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40012c00 	.word	0x40012c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010800 	.word	0x40010800

08001a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_UART_MspInit+0x8c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d131      	bne.n	8001b10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_UART_MspInit+0x90>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <HAL_UART_MspInit+0x90>)
 8001ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab6:	61d3      	str	r3, [r2, #28]
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_UART_MspInit+0x90>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_UART_MspInit+0x90>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_UART_MspInit+0x90>)
 8001aca:	f043 0308 	orr.w	r3, r3, #8
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_UART_MspInit+0x90>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	4619      	mov	r1, r3
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <HAL_UART_MspInit+0x94>)
 8001af2:	f000 fead 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_UART_MspInit+0x94>)
 8001b0c:	f000 fea0 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40004800 	.word	0x40004800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010c00 	.word	0x40010c00

08001b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	; 0x30
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	201e      	movs	r0, #30
 8001b3a:	f000 fe5e 	bl	80027fa <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b3e:	201e      	movs	r0, #30
 8001b40:	f000 fe77 	bl	8002832 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_InitTick+0xa0>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <HAL_InitTick+0xa0>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	61d3      	str	r3, [r2, #28]
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_InitTick+0xa0>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b5c:	f107 0210 	add.w	r2, r7, #16
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 fc0a 	bl	8003380 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b6c:	f001 fbe0 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8001b70:	4603      	mov	r3, r0
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <HAL_InitTick+0xa4>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9b      	lsrs	r3, r3, #18
 8001b80:	3b01      	subs	r3, #1
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_InitTick+0xa8>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <HAL_InitTick+0xac>)
 8001b88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_InitTick+0xa8>)
 8001b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b90:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001b92:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <HAL_InitTick+0xa8>)
 8001b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b96:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_InitTick+0xa8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_InitTick+0xa8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001ba4:	4809      	ldr	r0, [pc, #36]	; (8001bcc <HAL_InitTick+0xa8>)
 8001ba6:	f001 fdb3 	bl	8003710 <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d104      	bne.n	8001bba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <HAL_InitTick+0xa8>)
 8001bb2:	f001 fdfd 	bl	80037b0 <HAL_TIM_Base_Start_IT>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3730      	adds	r7, #48	; 0x30
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	431bde83 	.word	0x431bde83
 8001bcc:	20001d14 	.word	0x20001d14
 8001bd0:	40000800 	.word	0x40000800

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler+0x4>

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler+0x4>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Zero_Pin);
 8001c02:	2010      	movs	r0, #16
 8001c04:	f000 ffa8 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM2_IRQHandler+0x10>)
 8001c12:	f002 f877 	bl	8003d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20001ccc 	.word	0x20001ccc

08001c20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM4_IRQHandler+0x10>)
 8001c26:	f002 f86d 	bl	8003d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20001d14 	.word	0x20001d14

08001c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
	return 1;
 8001c38:	2301      	movs	r3, #1
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <_kill>:

int _kill(int pid, int sig)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c4c:	f005 ff06 	bl	8007a5c <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2216      	movs	r2, #22
 8001c54:	601a      	str	r2, [r3, #0]
	return -1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_exit>:

void _exit (int status)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffe7 	bl	8001c42 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c74:	e7fe      	b.n	8001c74 <_exit+0x12>

08001c76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e00a      	b.n	8001c9e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c88:	f3af 8000 	nop.w
 8001c8c:	4601      	mov	r1, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	60ba      	str	r2, [r7, #8]
 8001c94:	b2ca      	uxtb	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbf0      	blt.n	8001c88 <_read+0x12>
	}

return len;
 8001ca6:	687b      	ldr	r3, [r7, #4]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	return -1;
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <_isatty>:

int _isatty(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	return 1;
 8001cec:	2301      	movs	r3, #1
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f005 fe8c 	bl	8007a5c <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20005000 	.word	0x20005000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	20000230 	.word	0x20000230
 8001d78:	20001db0 	.word	0x20001db0

08001d7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d8a:	490d      	ldr	r1, [pc, #52]	; (8001dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da0:	4c0a      	ldr	r4, [pc, #40]	; (8001dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dae:	f7ff ffe5 	bl	8001d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db2:	f005 ff4f 	bl	8007c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001db6:	f7ff fa6b 	bl	8001290 <main>
  bx lr
 8001dba:	4770      	bx	lr
  ldr r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001dc4:	0800aa6c 	.word	0x0800aa6c
  ldr r2, =_sbss
 8001dc8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001dcc:	20001db0 	.word	0x20001db0

08001dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC1_2_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_Init+0x28>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a07      	ldr	r2, [pc, #28]	; (8001dfc <HAL_Init+0x28>)
 8001dde:	f043 0310 	orr.w	r3, r3, #16
 8001de2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f000 fcfd 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dea:	200f      	movs	r0, #15
 8001dec:	f7ff fe9a 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df0:	f7ff fd4c 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40022000 	.word	0x40022000

08001e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_IncTick+0x1c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_IncTick+0x20>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <HAL_IncTick+0x20>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	20000010 	.word	0x20000010
 8001e20:	20001d5c 	.word	0x20001d5c

08001e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b02      	ldr	r3, [pc, #8]	; (8001e34 <HAL_GetTick+0x10>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20001d5c 	.word	0x20001d5c

08001e38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0be      	b.n	8001fd8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fd40 	bl	80018fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fbc5 	bl	800260c <ADC_ConversionStop_Disable>
 8001e82:	4603      	mov	r3, r0
 8001e84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8099 	bne.w	8001fc6 <HAL_ADC_Init+0x18e>
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 8095 	bne.w	8001fc6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ea4:	f023 0302 	bic.w	r3, r3, #2
 8001ea8:	f043 0202 	orr.w	r2, r3, #2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7b1b      	ldrb	r3, [r3, #12]
 8001ebe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ec0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed0:	d003      	beq.n	8001eda <HAL_ADC_Init+0xa2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_ADC_Init+0xa8>
 8001eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ede:	e000      	b.n	8001ee2 <HAL_ADC_Init+0xaa>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7d1b      	ldrb	r3, [r3, #20]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d119      	bne.n	8001f24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7b1b      	ldrb	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	035a      	lsls	r2, r3, #13
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e00b      	b.n	8001f24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_ADC_Init+0x1a8>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f54:	d003      	beq.n	8001f5e <HAL_ADC_Init+0x126>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d104      	bne.n	8001f68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	051b      	lsls	r3, r3, #20
 8001f66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_ADC_Init+0x1ac>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fa2:	e018      	b.n	8001fd6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	f023 0312 	bic.w	r3, r3, #18
 8001fac:	f043 0210 	orr.w	r2, r3, #16
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fc4:	e007      	b.n	8001fd6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	f043 0210 	orr.w	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	ffe1f7fd 	.word	0xffe1f7fd
 8001fe4:	ff1f0efe 	.word	0xff1f0efe

08001fe8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_Start+0x1a>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e098      	b.n	8002134 <HAL_ADC_Start+0x14c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 faa4 	bl	8002558 <ADC_Enable>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8087 	bne.w	800212a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a41      	ldr	r2, [pc, #260]	; (800213c <HAL_ADC_Start+0x154>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d105      	bne.n	8002046 <HAL_ADC_Start+0x5e>
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_ADC_Start+0x158>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d115      	bne.n	8002072 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d026      	beq.n	80020ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002068:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002070:	e01d      	b.n	80020ae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <HAL_ADC_Start+0x158>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_ADC_Start+0xaa>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2b      	ldr	r2, [pc, #172]	; (800213c <HAL_ADC_Start+0x154>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10d      	bne.n	80020ae <HAL_ADC_Start+0xc6>
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_ADC_Start+0x158>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	f023 0206 	bic.w	r2, r3, #6
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80020c6:	e002      	b.n	80020ce <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f06f 0202 	mvn.w	r2, #2
 80020de:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020ee:	d113      	bne.n	8002118 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020f4:	4a11      	ldr	r2, [pc, #68]	; (800213c <HAL_ADC_Start+0x154>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d105      	bne.n	8002106 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_ADC_Start+0x158>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d108      	bne.n	8002118 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	e00c      	b.n	8002132 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e003      	b.n	8002132 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40012800 	.word	0x40012800
 8002140:	40012400 	.word	0x40012400

08002144 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800215a:	f7ff fe63 	bl	8001e24 <HAL_GetTick>
 800215e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f043 0220 	orr.w	r2, r3, #32
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0d3      	b.n	800232e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d131      	bne.n	80021f8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d12a      	bne.n	80021f8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021a2:	e021      	b.n	80021e8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021aa:	d01d      	beq.n	80021e8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_ADC_PollForConversion+0x7e>
 80021b2:	f7ff fe37 	bl	8001e24 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d212      	bcs.n	80021e8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f043 0204 	orr.w	r2, r3, #4
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0a2      	b.n	800232e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0d6      	beq.n	80021a4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021f6:	e070      	b.n	80022da <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021f8:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <HAL_ADC_PollForConversion+0x1f4>)
 80021fa:	681c      	ldr	r4, [r3, #0]
 80021fc:	2002      	movs	r0, #2
 80021fe:	f001 f9c3 	bl	8003588 <HAL_RCCEx_GetPeriphCLKFreq>
 8002202:	4603      	mov	r3, r0
 8002204:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6919      	ldr	r1, [r3, #16]
 800220e:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_ADC_PollForConversion+0x1f8>)
 8002210:	400b      	ands	r3, r1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_ADC_PollForConversion+0x104>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68d9      	ldr	r1, [r3, #12]
 800221c:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_ADC_PollForConversion+0x1fc>)
 800221e:	400b      	ands	r3, r1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <HAL_ADC_PollForConversion+0x104>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	4b46      	ldr	r3, [pc, #280]	; (8002344 <HAL_ADC_PollForConversion+0x200>)
 800222c:	400b      	ands	r3, r1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_ADC_PollForConversion+0x100>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68d9      	ldr	r1, [r3, #12]
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_ADC_PollForConversion+0x204>)
 800223a:	400b      	ands	r3, r1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_ADC_PollForConversion+0x100>
 8002240:	2314      	movs	r3, #20
 8002242:	e020      	b.n	8002286 <HAL_ADC_PollForConversion+0x142>
 8002244:	2329      	movs	r3, #41	; 0x29
 8002246:	e01e      	b.n	8002286 <HAL_ADC_PollForConversion+0x142>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_ADC_PollForConversion+0x200>)
 8002250:	400b      	ands	r3, r1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_ADC_PollForConversion+0x120>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68d9      	ldr	r1, [r3, #12]
 800225c:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_ADC_PollForConversion+0x204>)
 800225e:	400b      	ands	r3, r1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <HAL_ADC_PollForConversion+0x13c>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6919      	ldr	r1, [r3, #16]
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_ADC_PollForConversion+0x208>)
 800226c:	400b      	ands	r3, r1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <HAL_ADC_PollForConversion+0x140>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68d9      	ldr	r1, [r3, #12]
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <HAL_ADC_PollForConversion+0x208>)
 800227a:	400b      	ands	r3, r1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_PollForConversion+0x140>
 8002280:	2354      	movs	r3, #84	; 0x54
 8002282:	e000      	b.n	8002286 <HAL_ADC_PollForConversion+0x142>
 8002284:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800228c:	e021      	b.n	80022d2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002294:	d01a      	beq.n	80022cc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_ADC_PollForConversion+0x168>
 800229c:	f7ff fdc2 	bl	8001e24 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d20f      	bcs.n	80022cc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d90b      	bls.n	80022cc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f043 0204 	orr.w	r2, r3, #4
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e030      	b.n	800232e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d8d9      	bhi.n	800228e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f06f 0212 	mvn.w	r2, #18
 80022e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022fe:	d115      	bne.n	800232c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd90      	pop	{r4, r7, pc}
 8002336:	bf00      	nop
 8002338:	20000008 	.word	0x20000008
 800233c:	24924924 	.word	0x24924924
 8002340:	00924924 	.word	0x00924924
 8002344:	12492492 	.word	0x12492492
 8002348:	00492492 	.word	0x00492492
 800234c:	00249249 	.word	0x00249249

08002350 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x20>
 8002384:	2302      	movs	r3, #2
 8002386:	e0dc      	b.n	8002542 <HAL_ADC_ConfigChannel+0x1da>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b06      	cmp	r3, #6
 8002396:	d81c      	bhi.n	80023d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3b05      	subs	r3, #5
 80023aa:	221f      	movs	r2, #31
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4019      	ands	r1, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	3b05      	subs	r3, #5
 80023c4:	fa00 f203 	lsl.w	r2, r0, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	635a      	str	r2, [r3, #52]	; 0x34
 80023d0:	e03c      	b.n	800244c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d81c      	bhi.n	8002414 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	3b23      	subs	r3, #35	; 0x23
 80023ec:	221f      	movs	r2, #31
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	4019      	ands	r1, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	3b23      	subs	r3, #35	; 0x23
 8002406:	fa00 f203 	lsl.w	r2, r0, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
 8002412:	e01b      	b.n	800244c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b41      	subs	r3, #65	; 0x41
 8002426:	221f      	movs	r2, #31
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	4019      	ands	r1, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3b41      	subs	r3, #65	; 0x41
 8002440:	fa00 f203 	lsl.w	r2, r0, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b09      	cmp	r3, #9
 8002452:	d91c      	bls.n	800248e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68d9      	ldr	r1, [r3, #12]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	3b1e      	subs	r3, #30
 8002466:	2207      	movs	r2, #7
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	4019      	ands	r1, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6898      	ldr	r0, [r3, #8]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	3b1e      	subs	r3, #30
 8002480:	fa00 f203 	lsl.w	r2, r0, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	e019      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6919      	ldr	r1, [r3, #16]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	2207      	movs	r2, #7
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	4019      	ands	r1, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6898      	ldr	r0, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d003      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ce:	2b11      	cmp	r3, #17
 80024d0:	d132      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_ADC_ConfigChannel+0x1e4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d125      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d126      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024f8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d11a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_ADC_ConfigChannel+0x1e8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <HAL_ADC_ConfigChannel+0x1ec>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	0c9a      	lsrs	r2, r3, #18
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002518:	e002      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <HAL_ADC_ConfigChannel+0x1b2>
 8002526:	e007      	b.n	8002538 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40012400 	.word	0x40012400
 8002550:	20000008 	.word	0x20000008
 8002554:	431bde83 	.word	0x431bde83

08002558 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d040      	beq.n	80025f8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <ADC_Enable+0xac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1f      	ldr	r2, [pc, #124]	; (8002608 <ADC_Enable+0xb0>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0c9b      	lsrs	r3, r3, #18
 8002592:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002594:	e002      	b.n	800259c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3b01      	subs	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025a2:	f7ff fc3f 	bl	8001e24 <HAL_GetTick>
 80025a6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025a8:	e01f      	b.n	80025ea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025aa:	f7ff fc3b 	bl	8001e24 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d918      	bls.n	80025ea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d011      	beq.n	80025ea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	f043 0210 	orr.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e007      	b.n	80025fa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d1d8      	bne.n	80025aa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008
 8002608:	431bde83 	.word	0x431bde83

0800260c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d12e      	bne.n	8002684 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002636:	f7ff fbf5 	bl	8001e24 <HAL_GetTick>
 800263a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800263c:	e01b      	b.n	8002676 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800263e:	f7ff fbf1 	bl	8001e24 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d914      	bls.n	8002676 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d10d      	bne.n	8002676 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d0dc      	beq.n	800263e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <__NVIC_SetPriorityGrouping>:
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4906      	ldr	r1, [pc, #24]	; (8002728 <__NVIC_EnableIRQ+0x34>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100

0800272c <__NVIC_SetPriority>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	2b00      	cmp	r3, #0
 800273e:	db0a      	blt.n	8002756 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	490c      	ldr	r1, [pc, #48]	; (8002778 <__NVIC_SetPriority+0x4c>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	440b      	add	r3, r1
 8002750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002754:	e00a      	b.n	800276c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4908      	ldr	r1, [pc, #32]	; (800277c <__NVIC_SetPriority+0x50>)
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3b04      	subs	r3, #4
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	440b      	add	r3, r1
 800276a:	761a      	strb	r2, [r3, #24]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <NVIC_EncodePriority>:
{
 8002780:	b480      	push	{r7}
 8002782:	b089      	sub	sp, #36	; 0x24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f1c3 0307 	rsb	r3, r3, #7
 800279a:	2b04      	cmp	r3, #4
 800279c:	bf28      	it	cs
 800279e:	2304      	movcs	r3, #4
 80027a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d902      	bls.n	80027b0 <NVIC_EncodePriority+0x30>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3b03      	subs	r3, #3
 80027ae:	e000      	b.n	80027b2 <NVIC_EncodePriority+0x32>
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	4313      	orrs	r3, r2
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff4f 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff64 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ffb2 	bl	8002780 <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff81 	bl	800272c <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff57 	bl	80026f4 <__NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b08b      	sub	sp, #44	; 0x2c
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	e169      	b.n	8002b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002864:	2201      	movs	r2, #1
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 8158 	bne.w	8002b32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a9a      	ldr	r2, [pc, #616]	; (8002af0 <HAL_GPIO_Init+0x2a0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d05e      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 800288c:	4a98      	ldr	r2, [pc, #608]	; (8002af0 <HAL_GPIO_Init+0x2a0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d875      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 8002892:	4a98      	ldr	r2, [pc, #608]	; (8002af4 <HAL_GPIO_Init+0x2a4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d058      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 8002898:	4a96      	ldr	r2, [pc, #600]	; (8002af4 <HAL_GPIO_Init+0x2a4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d86f      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 800289e:	4a96      	ldr	r2, [pc, #600]	; (8002af8 <HAL_GPIO_Init+0x2a8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d052      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 80028a4:	4a94      	ldr	r2, [pc, #592]	; (8002af8 <HAL_GPIO_Init+0x2a8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d869      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028aa:	4a94      	ldr	r2, [pc, #592]	; (8002afc <HAL_GPIO_Init+0x2ac>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d04c      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 80028b0:	4a92      	ldr	r2, [pc, #584]	; (8002afc <HAL_GPIO_Init+0x2ac>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d863      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028b6:	4a92      	ldr	r2, [pc, #584]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d046      	beq.n	800294a <HAL_GPIO_Init+0xfa>
 80028bc:	4a90      	ldr	r2, [pc, #576]	; (8002b00 <HAL_GPIO_Init+0x2b0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d85d      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028c2:	2b12      	cmp	r3, #18
 80028c4:	d82a      	bhi.n	800291c <HAL_GPIO_Init+0xcc>
 80028c6:	2b12      	cmp	r3, #18
 80028c8:	d859      	bhi.n	800297e <HAL_GPIO_Init+0x12e>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <HAL_GPIO_Init+0x80>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	0800294b 	.word	0x0800294b
 80028d4:	08002925 	.word	0x08002925
 80028d8:	08002937 	.word	0x08002937
 80028dc:	08002979 	.word	0x08002979
 80028e0:	0800297f 	.word	0x0800297f
 80028e4:	0800297f 	.word	0x0800297f
 80028e8:	0800297f 	.word	0x0800297f
 80028ec:	0800297f 	.word	0x0800297f
 80028f0:	0800297f 	.word	0x0800297f
 80028f4:	0800297f 	.word	0x0800297f
 80028f8:	0800297f 	.word	0x0800297f
 80028fc:	0800297f 	.word	0x0800297f
 8002900:	0800297f 	.word	0x0800297f
 8002904:	0800297f 	.word	0x0800297f
 8002908:	0800297f 	.word	0x0800297f
 800290c:	0800297f 	.word	0x0800297f
 8002910:	0800297f 	.word	0x0800297f
 8002914:	0800292d 	.word	0x0800292d
 8002918:	08002941 	.word	0x08002941
 800291c:	4a79      	ldr	r2, [pc, #484]	; (8002b04 <HAL_GPIO_Init+0x2b4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002922:	e02c      	b.n	800297e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	623b      	str	r3, [r7, #32]
          break;
 800292a:	e029      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	3304      	adds	r3, #4
 8002932:	623b      	str	r3, [r7, #32]
          break;
 8002934:	e024      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	3308      	adds	r3, #8
 800293c:	623b      	str	r3, [r7, #32]
          break;
 800293e:	e01f      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	330c      	adds	r3, #12
 8002946:	623b      	str	r3, [r7, #32]
          break;
 8002948:	e01a      	b.n	8002980 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002952:	2304      	movs	r3, #4
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e013      	b.n	8002980 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002960:	2308      	movs	r3, #8
 8002962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	611a      	str	r2, [r3, #16]
          break;
 800296a:	e009      	b.n	8002980 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800296c:	2308      	movs	r3, #8
 800296e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	615a      	str	r2, [r3, #20]
          break;
 8002976:	e003      	b.n	8002980 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002978:	2300      	movs	r3, #0
 800297a:	623b      	str	r3, [r7, #32]
          break;
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x130>
          break;
 800297e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d801      	bhi.n	800298a <HAL_GPIO_Init+0x13a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	e001      	b.n	800298e <HAL_GPIO_Init+0x13e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3304      	adds	r3, #4
 800298e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2bff      	cmp	r3, #255	; 0xff
 8002994:	d802      	bhi.n	800299c <HAL_GPIO_Init+0x14c>
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	e002      	b.n	80029a2 <HAL_GPIO_Init+0x152>
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	3b08      	subs	r3, #8
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	210f      	movs	r1, #15
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	6a39      	ldr	r1, [r7, #32]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	431a      	orrs	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80b1 	beq.w	8002b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029d0:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a4c      	ldr	r2, [pc, #304]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <HAL_GPIO_Init+0x2b8>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029e8:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <HAL_GPIO_Init+0x2bc>)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a40      	ldr	r2, [pc, #256]	; (8002b10 <HAL_GPIO_Init+0x2c0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_GPIO_Init+0x1ec>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3f      	ldr	r2, [pc, #252]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00d      	beq.n	8002a38 <HAL_GPIO_Init+0x1e8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <HAL_GPIO_Init+0x2c8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <HAL_GPIO_Init+0x1e4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a3d      	ldr	r2, [pc, #244]	; (8002b1c <HAL_GPIO_Init+0x2cc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_GPIO_Init+0x1e0>
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e006      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a30:	2304      	movs	r3, #4
 8002a32:	e004      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e002      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_GPIO_Init+0x1ee>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	f002 0203 	and.w	r2, r2, #3
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	4093      	lsls	r3, r2
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a4e:	492f      	ldr	r1, [pc, #188]	; (8002b0c <HAL_GPIO_Init+0x2bc>)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e006      	b.n	8002a84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4928      	ldr	r1, [pc, #160]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4922      	ldr	r1, [pc, #136]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	4918      	ldr	r1, [pc, #96]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4914      	ldr	r1, [pc, #80]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d021      	beq.n	8002b24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	490e      	ldr	r1, [pc, #56]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60cb      	str	r3, [r1, #12]
 8002aec:	e021      	b.n	8002b32 <HAL_GPIO_Init+0x2e2>
 8002aee:	bf00      	nop
 8002af0:	10320000 	.word	0x10320000
 8002af4:	10310000 	.word	0x10310000
 8002af8:	10220000 	.word	0x10220000
 8002afc:	10210000 	.word	0x10210000
 8002b00:	10120000 	.word	0x10120000
 8002b04:	10110000 	.word	0x10110000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	40010800 	.word	0x40010800
 8002b14:	40010c00 	.word	0x40010c00
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	40011400 	.word	0x40011400
 8002b20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	4909      	ldr	r1, [pc, #36]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	3301      	adds	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f47f ae8e 	bne.w	8002864 <HAL_GPIO_Init+0x14>
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	372c      	adds	r7, #44	; 0x2c
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fb78 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40010400 	.word	0x40010400

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e26c      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8087 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba8:	4b92      	ldr	r3, [pc, #584]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d00c      	beq.n	8002bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb4:	4b8f      	ldr	r3, [pc, #572]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d112      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5e>
 8002bc0:	4b8c      	ldr	r3, [pc, #560]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d10b      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bce:	4b89      	ldr	r3, [pc, #548]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d06c      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x12c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d168      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e246      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x76>
 8002bf0:	4b80      	ldr	r3, [pc, #512]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a7f      	ldr	r2, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	e02e      	b.n	8002c5c <HAL_RCC_OscConfig+0xd4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x98>
 8002c06:	4b7b      	ldr	r3, [pc, #492]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7a      	ldr	r2, [pc, #488]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b78      	ldr	r3, [pc, #480]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a77      	ldr	r2, [pc, #476]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e01d      	b.n	8002c5c <HAL_RCC_OscConfig+0xd4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0xbc>
 8002c2a:	4b72      	ldr	r3, [pc, #456]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a71      	ldr	r2, [pc, #452]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6e      	ldr	r2, [pc, #440]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0xd4>
 8002c44:	4b6b      	ldr	r3, [pc, #428]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a6a      	ldr	r2, [pc, #424]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a67      	ldr	r2, [pc, #412]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff f8de 	bl	8001e24 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7ff f8da 	bl	8001e24 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1fa      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe4>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7ff f8ca 	bl	8001e24 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7ff f8c6 	bl	8001e24 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1e6      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	4b53      	ldr	r3, [pc, #332]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x10c>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc2:	4b4c      	ldr	r3, [pc, #304]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cce:	4b49      	ldr	r3, [pc, #292]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d11c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x18c>
 8002cda:	4b46      	ldr	r3, [pc, #280]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_OscConfig+0x176>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e1ba      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4939      	ldr	r1, [pc, #228]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	e03a      	b.n	8002d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7ff f87f 	bl	8001e24 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7ff f87b 	bl	8001e24 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e19b      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4927      	ldr	r1, [pc, #156]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x270>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7ff f85e 	bl	8001e24 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7ff f85a 	bl	8001e24 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e17a      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03a      	beq.n	8002e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d019      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_RCC_OscConfig+0x274>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da4:	f7ff f83e 	bl	8001e24 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dac:	f7ff f83a 	bl	8001e24 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e15a      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f000 fb08 	bl	80033e0 <RCC_Delay>
 8002dd0:	e01c      	b.n	8002e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_RCC_OscConfig+0x274>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd8:	f7ff f824 	bl	8001e24 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dde:	e00f      	b.n	8002e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de0:	f7ff f820 	bl	8001e24 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d908      	bls.n	8002e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e140      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	42420000 	.word	0x42420000
 8002dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4b9e      	ldr	r3, [pc, #632]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e9      	bne.n	8002de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a6 	beq.w	8002f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b97      	ldr	r3, [pc, #604]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4a93      	ldr	r2, [pc, #588]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	61d3      	str	r3, [r2, #28]
 8002e36:	4b91      	ldr	r3, [pc, #580]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b8e      	ldr	r3, [pc, #568]	; (8003080 <HAL_RCC_OscConfig+0x4f8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b8b      	ldr	r3, [pc, #556]	; (8003080 <HAL_RCC_OscConfig+0x4f8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a8a      	ldr	r2, [pc, #552]	; (8003080 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe ffe1 	bl	8001e24 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe ffdd 	bl	8001e24 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	; 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e0fd      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b81      	ldr	r3, [pc, #516]	; (8003080 <HAL_RCC_OscConfig+0x4f8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x312>
 8002e8c:	4b7b      	ldr	r3, [pc, #492]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a7a      	ldr	r2, [pc, #488]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6213      	str	r3, [r2, #32]
 8002e98:	e02d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x36e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x334>
 8002ea2:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4a75      	ldr	r2, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	6213      	str	r3, [r2, #32]
 8002eae:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a72      	ldr	r2, [pc, #456]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	6213      	str	r3, [r2, #32]
 8002eba:	e01c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x36e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x356>
 8002ec4:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a6c      	ldr	r2, [pc, #432]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a69      	ldr	r2, [pc, #420]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x36e>
 8002ede:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a66      	ldr	r2, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	4b64      	ldr	r3, [pc, #400]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a63      	ldr	r2, [pc, #396]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7fe ff91 	bl	8001e24 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe ff8d 	bl	8001e24 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0ab      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	4b57      	ldr	r3, [pc, #348]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ee      	beq.n	8002f06 <HAL_RCC_OscConfig+0x37e>
 8002f28:	e014      	b.n	8002f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe ff7b 	bl	8001e24 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe ff77 	bl	8001e24 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e095      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f48:	4b4c      	ldr	r3, [pc, #304]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ee      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d105      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5a:	4b48      	ldr	r3, [pc, #288]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4a47      	ldr	r2, [pc, #284]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8081 	beq.w	8003072 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f70:	4b42      	ldr	r3, [pc, #264]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d061      	beq.n	8003040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d146      	bne.n	8003012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <HAL_RCC_OscConfig+0x4fc>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fe ff4b 	bl	8001e24 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fe ff47 	bl	8001e24 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e067      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fba:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	492d      	ldr	r1, [pc, #180]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a19      	ldr	r1, [r3, #32]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	4927      	ldr	r1, [pc, #156]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_RCC_OscConfig+0x4fc>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fe ff1b 	bl	8001e24 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fe ff17 	bl	8001e24 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e037      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x46a>
 8003010:	e02f      	b.n	8003072 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_RCC_OscConfig+0x4fc>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe ff04 	bl	8001e24 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe ff00 	bl	8001e24 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e020      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x498>
 800303e:	e018      	b.n	8003072 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e013      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_OscConfig+0x4f4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	40007000 	.word	0x40007000
 8003084:	42420060 	.word	0x42420060

08003088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0d0      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b67      	ldr	r3, [pc, #412]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4965      	ldr	r1, [pc, #404]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003106:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d040      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d115      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e073      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06b      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4936      	ldr	r1, [pc, #216]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003178:	f7fe fe54 	bl	8001e24 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	e00a      	b.n	8003196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003180:	f7fe fe50 	bl	8001e24 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e053      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	4b2d      	ldr	r3, [pc, #180]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 020c 	and.w	r2, r3, #12
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d1eb      	bne.n	8003180 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d210      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 0207 	bic.w	r2, r3, #7
 80031be:	4922      	ldr	r1, [pc, #136]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f821 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490a      	ldr	r1, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1cc>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1d0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fc74 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40022000 	.word	0x40022000
 800324c:	40021000 	.word	0x40021000
 8003250:	0800a668 	.word	0x0800a668
 8003254:	20000008 	.word	0x20000008
 8003258:	2000000c 	.word	0x2000000c

0800325c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	b490      	push	{r4, r7}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003264:	1d3c      	adds	r4, r7, #4
 8003266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800326c:	f240 2301 	movw	r3, #513	; 0x201
 8003270:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	2300      	movs	r3, #0
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b04      	cmp	r3, #4
 8003294:	d002      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x40>
 8003296:	2b08      	cmp	r3, #8
 8003298:	d003      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x46>
 800329a:	e02d      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb8>)
 800329e:	623b      	str	r3, [r7, #32]
      break;
 80032a0:	e02d      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	0c9b      	lsrs	r3, r3, #18
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ae:	4413      	add	r3, r2
 80032b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c5b      	lsrs	r3, r3, #17
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ce:	4413      	add	r3, r2
 80032d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032da:	fb02 f203 	mul.w	r2, r2, r3
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	e004      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ec:	fb02 f303 	mul.w	r3, r2, r3
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	623b      	str	r3, [r7, #32]
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fa:	623b      	str	r3, [r7, #32]
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3728      	adds	r7, #40	; 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bc90      	pop	{r4, r7}
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	0800a5c4 	.word	0x0800a5c4
 8003310:	40021000 	.word	0x40021000
 8003314:	007a1200 	.word	0x007a1200
 8003318:	003d0900 	.word	0x003d0900

0800331c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <HAL_RCC_GetHCLKFreq+0x10>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr
 800332c:	20000008 	.word	0x20000008

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff2 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	0800a678 	.word	0x0800a678

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffde 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	0adb      	lsrs	r3, r3, #11
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	0800a678 	.word	0x0800a678

08003380 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	220f      	movs	r2, #15
 800338e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <HAL_RCC_GetClockConfig+0x58>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0203 	and.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCC_GetClockConfig+0x58>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_GetClockConfig+0x58>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <HAL_RCC_GetClockConfig+0x58>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCC_GetClockConfig+0x5c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0207 	and.w	r2, r3, #7
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40022000 	.word	0x40022000

080033e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <RCC_Delay+0x34>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <RCC_Delay+0x38>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	0a5b      	lsrs	r3, r3, #9
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033fc:	bf00      	nop
  }
  while (Delay --);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	60fa      	str	r2, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f9      	bne.n	80033fc <RCC_Delay+0x1c>
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	20000008 	.word	0x20000008
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d07d      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343c:	4b4f      	ldr	r3, [pc, #316]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b4c      	ldr	r3, [pc, #304]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	4a4b      	ldr	r2, [pc, #300]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	61d3      	str	r3, [r2, #28]
 8003454:	4b49      	ldr	r3, [pc, #292]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003460:	2301      	movs	r3, #1
 8003462:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	4b46      	ldr	r3, [pc, #280]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d118      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003470:	4b43      	ldr	r3, [pc, #268]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a42      	ldr	r2, [pc, #264]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347c:	f7fe fcd2 	bl	8001e24 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	e008      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fe fcce 	bl	8001e24 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e06d      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02e      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d027      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c0:	4b2e      	ldr	r3, [pc, #184]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ca:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d0:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d014      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe fc9d 	bl	8001e24 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe fc99 	bl	8001e24 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e036      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ee      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4917      	ldr	r1, [pc, #92]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	4313      	orrs	r3, r2
 8003520:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4a13      	ldr	r2, [pc, #76]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003532:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	490b      	ldr	r1, [pc, #44]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4904      	ldr	r1, [pc, #16]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	40007000 	.word	0x40007000
 8003584:	42420440 	.word	0x42420440

08003588 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b08d      	sub	sp, #52	; 0x34
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003590:	4b5a      	ldr	r3, [pc, #360]	; (80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003592:	f107 040c 	add.w	r4, r7, #12
 8003596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800359c:	f240 2301 	movw	r3, #513	; 0x201
 80035a0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	2300      	movs	r3, #0
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	2300      	movs	r3, #0
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b10      	cmp	r3, #16
 80035c0:	f200 8091 	bhi.w	80036e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d04c      	beq.n	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d07c      	beq.n	80036ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80035d0:	e089      	b.n	80036e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80035d2:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80035d8:	4b49      	ldr	r3, [pc, #292]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8082 	beq.w	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	0c9b      	lsrs	r3, r3, #18
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035f2:	4413      	add	r3, r2
 80035f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035f8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d018      	beq.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003604:	4b3e      	ldr	r3, [pc, #248]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	0c5b      	lsrs	r3, r3, #17
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003612:	4413      	add	r3, r2
 8003614:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003624:	4a37      	ldr	r2, [pc, #220]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	fbb2 f2f3 	udiv	r2, r2, r3
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003634:	e004      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	4a33      	ldr	r2, [pc, #204]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003640:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364c:	d102      	bne.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003652:	e04a      	b.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4a2c      	ldr	r2, [pc, #176]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003662:	e042      	b.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003664:	4b26      	ldr	r3, [pc, #152]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003674:	d108      	bne.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
 8003686:	e01f      	b.n	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003692:	d109      	bne.n	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003694:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80036a0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a6:	e00f      	b.n	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b2:	d11c      	bne.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80036c0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036c6:	e012      	b.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80036c8:	e011      	b.n	80036ee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036ca:	f7ff fe45 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 80036ce:	4602      	mov	r2, r0
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0b9b      	lsrs	r3, r3, #14
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036e4:	e004      	b.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80036ee:	bf00      	nop
    }
  }
  return (frequency);
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3734      	adds	r7, #52	; 0x34
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd90      	pop	{r4, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	0800a5d4 	.word	0x0800a5d4
 8003700:	40021000 	.word	0x40021000
 8003704:	007a1200 	.word	0x007a1200
 8003708:	003d0900 	.word	0x003d0900
 800370c:	aaaaaaab 	.word	0xaaaaaaab

08003710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e041      	b.n	80037a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fe f91c 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	4619      	mov	r1, r3
 800374e:	4610      	mov	r0, r2
 8003750:	f000 fe56 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d001      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e03a      	b.n	800383e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_TIM_Base_Start_IT+0x98>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x58>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f2:	d009      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x58>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_TIM_Base_Start_IT+0x9c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x58>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <HAL_TIM_Base_Start_IT+0xa0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d111      	bne.n	800382c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b06      	cmp	r3, #6
 8003818:	d010      	beq.n	800383c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382a:	e007      	b.n	800383c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800

08003854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e041      	b.n	80038ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f839 	bl	80038f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fdb4 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_TIM_PWM_Start+0x24>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e022      	b.n	800396e <HAL_TIM_PWM_Start+0x6a>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d109      	bne.n	8003942 <HAL_TIM_PWM_Start+0x3e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e015      	b.n	800396e <HAL_TIM_PWM_Start+0x6a>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d109      	bne.n	800395c <HAL_TIM_PWM_Start+0x58>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e008      	b.n	800396e <HAL_TIM_PWM_Start+0x6a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e05e      	b.n	8003a34 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <HAL_TIM_PWM_Start+0x82>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003984:	e013      	b.n	80039ae <HAL_TIM_PWM_Start+0xaa>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0x92>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003994:	e00b      	b.n	80039ae <HAL_TIM_PWM_Start+0xaa>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_PWM_Start+0xa2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a4:	e003      	b.n	80039ae <HAL_TIM_PWM_Start+0xaa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2201      	movs	r2, #1
 80039b4:	6839      	ldr	r1, [r7, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f001 f8af 	bl	8004b1a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1e      	ldr	r2, [pc, #120]	; (8003a3c <HAL_TIM_PWM_Start+0x138>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d107      	bne.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_TIM_PWM_Start+0x138>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00e      	beq.n	80039fe <HAL_TIM_PWM_Start+0xfa>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d009      	beq.n	80039fe <HAL_TIM_PWM_Start+0xfa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a14      	ldr	r2, [pc, #80]	; (8003a40 <HAL_TIM_PWM_Start+0x13c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIM_PWM_Start+0xfa>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <HAL_TIM_PWM_Start+0x140>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d111      	bne.n	8003a22 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b06      	cmp	r3, #6
 8003a0e:	d010      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a20:	e007      	b.n	8003a32 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800

08003a48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e041      	b.n	8003ade <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f839 	bl	8003ae6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f000 fcba 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_TIM_IC_Start_IT+0x1a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e013      	b.n	8003b3a <HAL_TIM_IC_Start_IT+0x42>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_IC_Start_IT+0x2a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e00b      	b.n	8003b3a <HAL_TIM_IC_Start_IT+0x42>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_IC_Start_IT+0x3a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e003      	b.n	8003b3a <HAL_TIM_IC_Start_IT+0x42>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <HAL_TIM_IC_Start_IT+0x54>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e013      	b.n	8003b74 <HAL_TIM_IC_Start_IT+0x7c>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d104      	bne.n	8003b5c <HAL_TIM_IC_Start_IT+0x64>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e00b      	b.n	8003b74 <HAL_TIM_IC_Start_IT+0x7c>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d104      	bne.n	8003b6c <HAL_TIM_IC_Start_IT+0x74>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e003      	b.n	8003b74 <HAL_TIM_IC_Start_IT+0x7c>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d102      	bne.n	8003b82 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b7c:	7bbb      	ldrb	r3, [r7, #14]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d001      	beq.n	8003b86 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0b3      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_IC_Start_IT+0x9e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b94:	e013      	b.n	8003bbe <HAL_TIM_IC_Start_IT+0xc6>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_IC_Start_IT+0xae>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba4:	e00b      	b.n	8003bbe <HAL_TIM_IC_Start_IT+0xc6>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_IC_Start_IT+0xbe>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb4:	e003      	b.n	8003bbe <HAL_TIM_IC_Start_IT+0xc6>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_IC_Start_IT+0xd6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bcc:	e013      	b.n	8003bf6 <HAL_TIM_IC_Start_IT+0xfe>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_IC_Start_IT+0xe6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bdc:	e00b      	b.n	8003bf6 <HAL_TIM_IC_Start_IT+0xfe>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_IC_Start_IT+0xf6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bec:	e003      	b.n	8003bf6 <HAL_TIM_IC_Start_IT+0xfe>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	d841      	bhi.n	8003c80 <HAL_TIM_IC_Start_IT+0x188>
 8003bfc:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_IC_Start_IT+0x10c>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003c81 	.word	0x08003c81
 8003c0c:	08003c81 	.word	0x08003c81
 8003c10:	08003c81 	.word	0x08003c81
 8003c14:	08003c4b 	.word	0x08003c4b
 8003c18:	08003c81 	.word	0x08003c81
 8003c1c:	08003c81 	.word	0x08003c81
 8003c20:	08003c81 	.word	0x08003c81
 8003c24:	08003c5d 	.word	0x08003c5d
 8003c28:	08003c81 	.word	0x08003c81
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003c81 	.word	0x08003c81
 8003c34:	08003c6f 	.word	0x08003c6f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0202 	orr.w	r2, r2, #2
 8003c46:	60da      	str	r2, [r3, #12]
      break;
 8003c48:	e01b      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0204 	orr.w	r2, r2, #4
 8003c58:	60da      	str	r2, [r3, #12]
      break;
 8003c5a:	e012      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0208 	orr.w	r2, r2, #8
 8003c6a:	60da      	str	r2, [r3, #12]
      break;
 8003c6c:	e009      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0210 	orr.w	r2, r2, #16
 8003c7c:	60da      	str	r2, [r3, #12]
      break;
 8003c7e:	e000      	b.n	8003c82 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003c80:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2201      	movs	r2, #1
 8003c88:	6839      	ldr	r1, [r7, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 ff45 	bl	8004b1a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <HAL_TIM_IC_Start_IT+0x200>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <HAL_TIM_IC_Start_IT+0x1c0>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca2:	d009      	beq.n	8003cb8 <HAL_TIM_IC_Start_IT+0x1c0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <HAL_TIM_IC_Start_IT+0x204>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_TIM_IC_Start_IT+0x1c0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <HAL_TIM_IC_Start_IT+0x208>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d111      	bne.n	8003cdc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d010      	beq.n	8003cec <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0201 	orr.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cda:	e007      	b.n	8003cec <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800

08003d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d122      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0202 	mvn.w	r2, #2
 8003d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd fa2a 	bl	80011a0 <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fb3a 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fb40 	bl	80043da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d122      	bne.n	8003db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d11b      	bne.n	8003db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0204 	mvn.w	r2, #4
 8003d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd fa00 	bl	80011a0 <HAL_TIM_IC_CaptureCallback>
 8003da0:	e005      	b.n	8003dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fb10 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fb16 	bl	80043da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d122      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d11b      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0208 	mvn.w	r2, #8
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd f9d6 	bl	80011a0 <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fae6 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 faec 	bl	80043da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d122      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d11b      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0210 	mvn.w	r2, #16
 8003e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2208      	movs	r2, #8
 8003e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd f9ac 	bl	80011a0 <HAL_TIM_IC_CaptureCallback>
 8003e48:	e005      	b.n	8003e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fabc 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fac2 	bl	80043da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0201 	mvn.w	r2, #1
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd fcea 	bl	800185c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b80      	cmp	r3, #128	; 0x80
 8003e94:	d10e      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 ff10 	bl	8004cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d107      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa86 	bl	80043ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	d10e      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d107      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0220 	mvn.w	r2, #32
 8003f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fedb 	bl	8004cc2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_IC_ConfigChannel+0x1a>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e082      	b.n	8004034 <HAL_TIM_IC_ConfigChannel+0x120>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f000 fc42 	bl	80047d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 020c 	bic.w	r2, r2, #12
 8003f5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6999      	ldr	r1, [r3, #24]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	619a      	str	r2, [r3, #24]
 8003f72:	e05a      	b.n	800402a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d11c      	bne.n	8003fb4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f000 fcab 	bl	80048e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6999      	ldr	r1, [r3, #24]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	021a      	lsls	r2, r3, #8
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	619a      	str	r2, [r3, #24]
 8003fb2:	e03a      	b.n	800402a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d11b      	bne.n	8003ff2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6819      	ldr	r1, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f000 fcf6 	bl	80049ba <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 020c 	bic.w	r2, r2, #12
 8003fdc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69d9      	ldr	r1, [r3, #28]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	61da      	str	r2, [r3, #28]
 8003ff0:	e01b      	b.n	800402a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f000 fd15 	bl	8004a30 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004014:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69d9      	ldr	r1, [r3, #28]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	021a      	lsls	r2, r3, #8
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004052:	2302      	movs	r3, #2
 8004054:	e0ac      	b.n	80041b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b0c      	cmp	r3, #12
 8004062:	f200 809f 	bhi.w	80041a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	080040a1 	.word	0x080040a1
 8004070:	080041a5 	.word	0x080041a5
 8004074:	080041a5 	.word	0x080041a5
 8004078:	080041a5 	.word	0x080041a5
 800407c:	080040e1 	.word	0x080040e1
 8004080:	080041a5 	.word	0x080041a5
 8004084:	080041a5 	.word	0x080041a5
 8004088:	080041a5 	.word	0x080041a5
 800408c:	08004123 	.word	0x08004123
 8004090:	080041a5 	.word	0x080041a5
 8004094:	080041a5 	.word	0x080041a5
 8004098:	080041a5 	.word	0x080041a5
 800409c:	08004163 	.word	0x08004163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fa0c 	bl	80044c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	619a      	str	r2, [r3, #24]
      break;
 80040de:	e062      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fa52 	bl	8004590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	619a      	str	r2, [r3, #24]
      break;
 8004120:	e041      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fa9b 	bl	8004664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0208 	orr.w	r2, r2, #8
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0204 	bic.w	r2, r2, #4
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      break;
 8004160:	e021      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fae5 	bl	8004738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69d9      	ldr	r1, [r3, #28]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	61da      	str	r2, [r3, #28]
      break;
 80041a2:	e000      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80041a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIM_ConfigClockSource+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e0b3      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x180>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004208:	d03e      	beq.n	8004288 <HAL_TIM_ConfigClockSource+0xd0>
 800420a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420e:	f200 8087 	bhi.w	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004216:	f000 8085 	beq.w	8004324 <HAL_TIM_ConfigClockSource+0x16c>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	d87f      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004220:	2b70      	cmp	r3, #112	; 0x70
 8004222:	d01a      	beq.n	800425a <HAL_TIM_ConfigClockSource+0xa2>
 8004224:	2b70      	cmp	r3, #112	; 0x70
 8004226:	d87b      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004228:	2b60      	cmp	r3, #96	; 0x60
 800422a:	d050      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x116>
 800422c:	2b60      	cmp	r3, #96	; 0x60
 800422e:	d877      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004230:	2b50      	cmp	r3, #80	; 0x50
 8004232:	d03c      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0xf6>
 8004234:	2b50      	cmp	r3, #80	; 0x50
 8004236:	d873      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d058      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x136>
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d86f      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004240:	2b30      	cmp	r3, #48	; 0x30
 8004242:	d064      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x156>
 8004244:	2b30      	cmp	r3, #48	; 0x30
 8004246:	d86b      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004248:	2b20      	cmp	r3, #32
 800424a:	d060      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x156>
 800424c:	2b20      	cmp	r3, #32
 800424e:	d867      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05c      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x156>
 8004254:	2b10      	cmp	r3, #16
 8004256:	d05a      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004258:	e062      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6899      	ldr	r1, [r3, #8]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f000 fc37 	bl	8004adc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800427c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	609a      	str	r2, [r3, #8]
      break;
 8004286:	e04e      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6899      	ldr	r1, [r3, #8]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f000 fc20 	bl	8004adc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042aa:	609a      	str	r2, [r3, #8]
      break;
 80042ac:	e03b      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f000 fae4 	bl	8004888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2150      	movs	r1, #80	; 0x50
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fbee 	bl	8004aa8 <TIM_ITRx_SetConfig>
      break;
 80042cc:	e02b      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	461a      	mov	r2, r3
 80042dc:	f000 fb3e 	bl	800495c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2160      	movs	r1, #96	; 0x60
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fbde 	bl	8004aa8 <TIM_ITRx_SetConfig>
      break;
 80042ec:	e01b      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 fac4 	bl	8004888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2140      	movs	r1, #64	; 0x40
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fbce 	bl	8004aa8 <TIM_ITRx_SetConfig>
      break;
 800430c:	e00b      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	4610      	mov	r0, r2
 800431a:	f000 fbc5 	bl	8004aa8 <TIM_ITRx_SetConfig>
        break;
 800431e:	e002      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004320:	bf00      	nop
 8004322:	e000      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004324:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d831      	bhi.n	80043b8 <HAL_TIM_ReadCapturedValue+0x78>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004391 	.word	0x08004391
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043b9 	.word	0x080043b9
 8004368:	080043b9 	.word	0x080043b9
 800436c:	0800439b 	.word	0x0800439b
 8004370:	080043b9 	.word	0x080043b9
 8004374:	080043b9 	.word	0x080043b9
 8004378:	080043b9 	.word	0x080043b9
 800437c:	080043a5 	.word	0x080043a5
 8004380:	080043b9 	.word	0x080043b9
 8004384:	080043b9 	.word	0x080043b9
 8004388:	080043b9 	.word	0x080043b9
 800438c:	080043af 	.word	0x080043af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	60fb      	str	r3, [r7, #12]

      break;
 8004398:	e00f      	b.n	80043ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	60fb      	str	r3, [r7, #12]

      break;
 80043a2:	e00a      	b.n	80043ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	60fb      	str	r3, [r7, #12]

      break;
 80043ac:	e005      	b.n	80043ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	60fb      	str	r3, [r7, #12]

      break;
 80043b6:	e000      	b.n	80043ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80043b8:	bf00      	nop
  }

  return tmpreg;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop

080043c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
	...

08004400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a29      	ldr	r2, [pc, #164]	; (80044b8 <TIM_Base_SetConfig+0xb8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00b      	beq.n	8004430 <TIM_Base_SetConfig+0x30>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441e:	d007      	beq.n	8004430 <TIM_Base_SetConfig+0x30>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a26      	ldr	r2, [pc, #152]	; (80044bc <TIM_Base_SetConfig+0xbc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_Base_SetConfig+0x30>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <TIM_Base_SetConfig+0xc0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d108      	bne.n	8004442 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <TIM_Base_SetConfig+0xb8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00b      	beq.n	8004462 <TIM_Base_SetConfig+0x62>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004450:	d007      	beq.n	8004462 <TIM_Base_SetConfig+0x62>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a19      	ldr	r2, [pc, #100]	; (80044bc <TIM_Base_SetConfig+0xbc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d003      	beq.n	8004462 <TIM_Base_SetConfig+0x62>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <TIM_Base_SetConfig+0xc0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d108      	bne.n	8004474 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <TIM_Base_SetConfig+0xb8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d103      	bne.n	80044a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	615a      	str	r2, [r3, #20]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800

080044c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f023 0302 	bic.w	r3, r3, #2
 800450c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a1c      	ldr	r2, [pc, #112]	; (800458c <TIM_OC1_SetConfig+0xc8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10c      	bne.n	800453a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0308 	bic.w	r3, r3, #8
 8004526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f023 0304 	bic.w	r3, r3, #4
 8004538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a13      	ldr	r2, [pc, #76]	; (800458c <TIM_OC1_SetConfig+0xc8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d111      	bne.n	8004566 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	621a      	str	r2, [r3, #32]
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00

08004590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0210 	bic.w	r2, r3, #16
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0320 	bic.w	r3, r3, #32
 80045da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <TIM_OC2_SetConfig+0xd0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10d      	bne.n	800460c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a14      	ldr	r2, [pc, #80]	; (8004660 <TIM_OC2_SetConfig+0xd0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d113      	bne.n	800463c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800461a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	40012c00 	.word	0x40012c00

08004664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <TIM_OC3_SetConfig+0xd0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10d      	bne.n	80046de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <TIM_OC3_SetConfig+0xd0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d113      	bne.n	800470e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	621a      	str	r2, [r3, #32]
}
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40012c00 	.word	0x40012c00

08004738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	031b      	lsls	r3, r3, #12
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a0f      	ldr	r2, [pc, #60]	; (80047d0 <TIM_OC4_SetConfig+0x98>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d109      	bne.n	80047ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	019b      	lsls	r3, r3, #6
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	40012c00 	.word	0x40012c00

080047d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f023 0201 	bic.w	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	; (800487c <TIM_TI1_SetConfig+0xa8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00b      	beq.n	800481a <TIM_TI1_SetConfig+0x46>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d007      	beq.n	800481a <TIM_TI1_SetConfig+0x46>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <TIM_TI1_SetConfig+0xac>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d003      	beq.n	800481a <TIM_TI1_SetConfig+0x46>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <TIM_TI1_SetConfig+0xb0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <TIM_TI1_SetConfig+0x4a>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <TIM_TI1_SetConfig+0x4c>
 800481e:	2300      	movs	r3, #0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e003      	b.n	800483e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	b2db      	uxtb	r3, r3
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f023 030a 	bic.w	r3, r3, #10
 8004858:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f003 030a 	and.w	r3, r3, #10
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800

08004888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 030a 	bic.w	r3, r3, #10
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0210 	bic.w	r2, r3, #16
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004922:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	031b      	lsls	r3, r3, #12
 8004928:	b29b      	uxth	r3, r3
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004936:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f023 0210 	bic.w	r2, r3, #16
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004986:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	031b      	lsls	r3, r3, #12
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004998:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b087      	sub	sp, #28
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	607a      	str	r2, [r7, #4]
 80049c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	031b      	lsls	r3, r3, #12
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	031b      	lsls	r3, r3, #12
 8004a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f043 0307 	orr.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	609a      	str	r2, [r3, #8]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	021a      	lsls	r2, r3, #8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a1a      	ldr	r2, [r3, #32]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	401a      	ands	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	431a      	orrs	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e046      	b.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d009      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a10      	ldr	r2, [pc, #64]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800

08004c20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e03d      	b.n	8004cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e03f      	b.n	8004d78 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fc febd 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2224      	movs	r2, #36	; 0x24
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d28:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f904 	bl	8004f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695a      	ldr	r2, [r3, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d4e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d5e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d17c      	bne.n	8004e9a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Transmit+0x2c>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e075      	b.n	8004e9c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Transmit+0x3e>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e06e      	b.n	8004e9c <HAL_UART_Transmit+0x11c>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2221      	movs	r2, #33	; 0x21
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd4:	f7fd f826 	bl	8001e24 <HAL_GetTick>
 8004dd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	88fa      	ldrh	r2, [r7, #6]
 8004de4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d108      	bne.n	8004e02 <HAL_UART_Transmit+0x82>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	e003      	b.n	8004e0a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e12:	e02a      	b.n	8004e6a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2180      	movs	r1, #128	; 0x80
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f840 	bl	8004ea4 <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e036      	b.n	8004e9c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e42:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	3302      	adds	r3, #2
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e007      	b.n	8004e5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	781a      	ldrb	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1cf      	bne.n	8004e14 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2140      	movs	r1, #64	; 0x40
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f810 	bl	8004ea4 <UART_WaitOnFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e006      	b.n	8004e9c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e000      	b.n	8004e9c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
  }
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb4:	e02c      	b.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ebc:	d028      	beq.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec4:	f7fc ffae 	bl	8001e24 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d21d      	bcs.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ee2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e00f      	b.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d0c3      	beq.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f72:	f023 030c 	bic.w	r3, r3, #12
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2c      	ldr	r2, [pc, #176]	; (800504c <UART_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d103      	bne.n	8004fa8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fa0:	f7fe f9da 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	e002      	b.n	8004fae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fe f9c2 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004fac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009a      	lsls	r2, r3, #2
 8004fb8:	441a      	add	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <UART_SetConfig+0x118>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	0119      	lsls	r1, r3, #4
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009a      	lsls	r2, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <UART_SetConfig+0x118>)
 8004fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2064      	movs	r0, #100	; 0x64
 8004fee:	fb00 f303 	mul.w	r3, r0, r3
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	3332      	adds	r3, #50	; 0x32
 8004ff8:	4a15      	ldr	r2, [pc, #84]	; (8005050 <UART_SetConfig+0x118>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005004:	4419      	add	r1, r3
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	009a      	lsls	r2, r3, #2
 8005010:	441a      	add	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	fbb2 f2f3 	udiv	r2, r2, r3
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <UART_SetConfig+0x118>)
 800501e:	fba3 0302 	umull	r0, r3, r3, r2
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2064      	movs	r0, #100	; 0x64
 8005026:	fb00 f303 	mul.w	r3, r0, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	3332      	adds	r3, #50	; 0x32
 8005030:	4a07      	ldr	r2, [pc, #28]	; (8005050 <UART_SetConfig+0x118>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	f003 020f 	and.w	r2, r3, #15
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	440a      	add	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40013800 	.word	0x40013800
 8005050:	51eb851f 	.word	0x51eb851f

08005054 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800505a:	f3ef 8305 	mrs	r3, IPSR
 800505e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005060:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005066:	f3ef 8310 	mrs	r3, PRIMASK
 800506a:	607b      	str	r3, [r7, #4]
  return(result);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <osKernelInitialize+0x32>
 8005072:	4b10      	ldr	r3, [pc, #64]	; (80050b4 <osKernelInitialize+0x60>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d109      	bne.n	800508e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800507a:	f3ef 8311 	mrs	r3, BASEPRI
 800507e:	603b      	str	r3, [r7, #0]
  return(result);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005086:	f06f 0305 	mvn.w	r3, #5
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e00c      	b.n	80050a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <osKernelInitialize+0x60>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d105      	bne.n	80050a2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <osKernelInitialize+0x60>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e002      	b.n	80050a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80050a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr
 80050b4:	20000234 	.word	0x20000234

080050b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050be:	f3ef 8305 	mrs	r3, IPSR
 80050c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80050c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10f      	bne.n	80050ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ca:	f3ef 8310 	mrs	r3, PRIMASK
 80050ce:	607b      	str	r3, [r7, #4]
  return(result);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <osKernelStart+0x32>
 80050d6:	4b11      	ldr	r3, [pc, #68]	; (800511c <osKernelStart+0x64>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d109      	bne.n	80050f2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050de:	f3ef 8311 	mrs	r3, BASEPRI
 80050e2:	603b      	str	r3, [r7, #0]
  return(result);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80050ea:	f06f 0305 	mvn.w	r3, #5
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	e00e      	b.n	8005110 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <osKernelStart+0x64>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d107      	bne.n	800510a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80050fa:	4b08      	ldr	r3, [pc, #32]	; (800511c <osKernelStart+0x64>)
 80050fc:	2202      	movs	r2, #2
 80050fe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005100:	f001 f890 	bl	8006224 <vTaskStartScheduler>
      stat = osOK;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e002      	b.n	8005110 <osKernelStart+0x58>
    } else {
      stat = osError;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800510e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005110:	68fb      	ldr	r3, [r7, #12]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000234 	.word	0x20000234

08005120 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b092      	sub	sp, #72	; 0x48
 8005124:	af04      	add	r7, sp, #16
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005130:	f3ef 8305 	mrs	r3, IPSR
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 8094 	bne.w	8005266 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513e:	f3ef 8310 	mrs	r3, PRIMASK
 8005142:	623b      	str	r3, [r7, #32]
  return(result);
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f040 808d 	bne.w	8005266 <osThreadNew+0x146>
 800514c:	4b48      	ldr	r3, [pc, #288]	; (8005270 <osThreadNew+0x150>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d106      	bne.n	8005162 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005154:	f3ef 8311 	mrs	r3, BASEPRI
 8005158:	61fb      	str	r3, [r7, #28]
  return(result);
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 8082 	bne.w	8005266 <osThreadNew+0x146>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d07e      	beq.n	8005266 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800516c:	2318      	movs	r3, #24
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005170:	2300      	movs	r3, #0
 8005172:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005174:	f107 031b 	add.w	r3, r7, #27
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800517e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d045      	beq.n	8005212 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <osThreadNew+0x74>
        name = attr->name;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <osThreadNew+0x9a>
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	2b38      	cmp	r3, #56	; 0x38
 80051ac:	d805      	bhi.n	80051ba <osThreadNew+0x9a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <osThreadNew+0x9e>
        return (NULL);
 80051ba:	2300      	movs	r3, #0
 80051bc:	e054      	b.n	8005268 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	089b      	lsrs	r3, r3, #2
 80051cc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <osThreadNew+0xd4>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2bbb      	cmp	r3, #187	; 0xbb
 80051dc:	d90a      	bls.n	80051f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <osThreadNew+0xd4>
        mem = 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f2:	e010      	b.n	8005216 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10c      	bne.n	8005216 <osThreadNew+0xf6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <osThreadNew+0xf6>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <osThreadNew+0xf6>
          mem = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005210:	e001      	b.n	8005216 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	2b01      	cmp	r3, #1
 800521a:	d110      	bne.n	800523e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005224:	9202      	str	r2, [sp, #8]
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005230:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fe12 	bl	8005e5c <xTaskCreateStatic>
 8005238:	4603      	mov	r3, r0
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e013      	b.n	8005266 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	d110      	bne.n	8005266 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	b29a      	uxth	r2, r3
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fe5c 	bl	8005f14 <xTaskCreate>
 800525c:	4603      	mov	r3, r0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d001      	beq.n	8005266 <osThreadNew+0x146>
          hTask = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005266:	697b      	ldr	r3, [r7, #20]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3738      	adds	r7, #56	; 0x38
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000234 	.word	0x20000234

08005274 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800527c:	f3ef 8305 	mrs	r3, IPSR
 8005280:	613b      	str	r3, [r7, #16]
  return(result);
 8005282:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10f      	bne.n	80052a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005288:	f3ef 8310 	mrs	r3, PRIMASK
 800528c:	60fb      	str	r3, [r7, #12]
  return(result);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <osDelay+0x34>
 8005294:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <osDelay+0x58>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d109      	bne.n	80052b0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800529c:	f3ef 8311 	mrs	r3, BASEPRI
 80052a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <osDelay+0x3c>
    stat = osErrorISR;
 80052a8:	f06f 0305 	mvn.w	r3, #5
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	e007      	b.n	80052c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 ff7e 	bl	80061bc <vTaskDelay>
    }
  }

  return (stat);
 80052c0:	697b      	ldr	r3, [r7, #20]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000234 	.word	0x20000234

080052d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a06      	ldr	r2, [pc, #24]	; (80052f8 <vApplicationGetIdleTaskMemory+0x28>)
 80052e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4a05      	ldr	r2, [pc, #20]	; (80052fc <vApplicationGetIdleTaskMemory+0x2c>)
 80052e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2280      	movs	r2, #128	; 0x80
 80052ec:	601a      	str	r2, [r3, #0]
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr
 80052f8:	20000238 	.word	0x20000238
 80052fc:	200002f4 	.word	0x200002f4

08005300 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a07      	ldr	r2, [pc, #28]	; (800532c <vApplicationGetTimerTaskMemory+0x2c>)
 8005310:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a06      	ldr	r2, [pc, #24]	; (8005330 <vApplicationGetTimerTaskMemory+0x30>)
 8005316:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800531e:	601a      	str	r2, [r3, #0]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	200004f4 	.word	0x200004f4
 8005330:	200005b0 	.word	0x200005b0

08005334 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f103 0208 	add.w	r2, r3, #8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800534c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f103 0208 	add.w	r2, r3, #8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f103 0208 	add.w	r2, r3, #8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr

0800538a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	601a      	str	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr

080053d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e6:	d103      	bne.n	80053f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e00c      	b.n	800540a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3308      	adds	r3, #8
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e002      	b.n	80053fe <vListInsert+0x2e>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	429a      	cmp	r2, r3
 8005408:	d2f6      	bcs.n	80053f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	601a      	str	r2, [r3, #0]
}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr

08005440 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6892      	ldr	r2, [r2, #8]
 8005456:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6852      	ldr	r2, [r2, #4]
 8005460:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d103      	bne.n	8005474 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	1e5a      	subs	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr
	...

08005494 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054be:	f001 fff5 	bl	80074ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	441a      	add	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	3b01      	subs	r3, #1
 80054f0:	68f9      	ldr	r1, [r7, #12]
 80054f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	441a      	add	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	22ff      	movs	r2, #255	; 0xff
 8005502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d114      	bne.n	800553e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01a      	beq.n	8005552 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3310      	adds	r3, #16
 8005520:	4618      	mov	r0, r3
 8005522:	f001 f91b 	bl	800675c <xTaskRemoveFromEventList>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d012      	beq.n	8005552 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <xQueueGenericReset+0xcc>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	e009      	b.n	8005552 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3310      	adds	r3, #16
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff fef6 	bl	8005334 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3324      	adds	r3, #36	; 0x24
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fef1 	bl	8005334 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005552:	f001 ffdb 	bl	800750c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005556:	2301      	movs	r3, #1
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	e000ed04 	.word	0xe000ed04

08005564 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08e      	sub	sp, #56	; 0x38
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <xQueueGenericCreateStatic+0x52>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <xQueueGenericCreateStatic+0x56>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueGenericCreateStatic+0x58>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	623b      	str	r3, [r7, #32]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <xQueueGenericCreateStatic+0x7e>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <xQueueGenericCreateStatic+0x82>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueGenericCreateStatic+0x84>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	61fb      	str	r3, [r7, #28]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005602:	2350      	movs	r3, #80	; 0x50
 8005604:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b50      	cmp	r3, #80	; 0x50
 800560a:	d00a      	beq.n	8005622 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	61bb      	str	r3, [r7, #24]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00d      	beq.n	8005648 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005634:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f805 	bl	8005652 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800564a:	4618      	mov	r0, r3
 800564c:	3730      	adds	r7, #48	; 0x30
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e002      	b.n	8005674 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005680:	2101      	movs	r1, #1
 8005682:	69b8      	ldr	r0, [r7, #24]
 8005684:	f7ff ff06 	bl	8005494 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08e      	sub	sp, #56	; 0x38
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056a6:	2300      	movs	r3, #0
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <xQueueGenericSend+0x32>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <xQueueGenericSend+0x40>
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <xQueueGenericSend+0x44>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <xQueueGenericSend+0x46>
 80056dc:	2300      	movs	r3, #0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10a      	bne.n	80056f8 <xQueueGenericSend+0x60>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d103      	bne.n	8005706 <xQueueGenericSend+0x6e>
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <xQueueGenericSend+0x72>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <xQueueGenericSend+0x74>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <xQueueGenericSend+0x8e>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	623b      	str	r3, [r7, #32]
}
 8005722:	bf00      	nop
 8005724:	e7fe      	b.n	8005724 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005726:	f001 f9df 	bl	8006ae8 <xTaskGetSchedulerState>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <xQueueGenericSend+0x9e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <xQueueGenericSend+0xa2>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <xQueueGenericSend+0xa4>
 800573a:	2300      	movs	r3, #0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xQueueGenericSend+0xbe>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	61fb      	str	r3, [r7, #28]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005756:	f001 fea9 	bl	80074ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	429a      	cmp	r2, r3
 8005764:	d302      	bcc.n	800576c <xQueueGenericSend+0xd4>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d129      	bne.n	80057c0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005772:	f000 fa07 	bl	8005b84 <prvCopyDataToQueue>
 8005776:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d010      	beq.n	80057a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	3324      	adds	r3, #36	; 0x24
 8005784:	4618      	mov	r0, r3
 8005786:	f000 ffe9 	bl	800675c <xTaskRemoveFromEventList>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005790:	4b3f      	ldr	r3, [pc, #252]	; (8005890 <xQueueGenericSend+0x1f8>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	e00a      	b.n	80057b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057a8:	4b39      	ldr	r3, [pc, #228]	; (8005890 <xQueueGenericSend+0x1f8>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057b8:	f001 fea8 	bl	800750c <vPortExitCritical>
				return pdPASS;
 80057bc:	2301      	movs	r3, #1
 80057be:	e063      	b.n	8005888 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057c6:	f001 fea1 	bl	800750c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e05c      	b.n	8005888 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d106      	bne.n	80057e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 f823 	bl	8006824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057e2:	f001 fe93 	bl	800750c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e6:	f000 fd8d 	bl	8006304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ea:	f001 fe5f 	bl	80074ac <vPortEnterCritical>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057f4:	b25b      	sxtb	r3, r3
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fa:	d103      	bne.n	8005804 <xQueueGenericSend+0x16c>
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800580a:	b25b      	sxtb	r3, r3
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005810:	d103      	bne.n	800581a <xQueueGenericSend+0x182>
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800581a:	f001 fe77 	bl	800750c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800581e:	1d3a      	adds	r2, r7, #4
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f001 f812 	bl	8006850 <xTaskCheckForTimeOut>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d124      	bne.n	800587c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005834:	f000 fa9e 	bl	8005d74 <prvIsQueueFull>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d018      	beq.n	8005870 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	3310      	adds	r3, #16
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f000 ff38 	bl	80066bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800584c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800584e:	f000 fa29 	bl	8005ca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005852:	f000 fd65 	bl	8006320 <xTaskResumeAll>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	f47f af7c 	bne.w	8005756 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800585e:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <xQueueGenericSend+0x1f8>)
 8005860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	e772      	b.n	8005756 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005872:	f000 fa17 	bl	8005ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005876:	f000 fd53 	bl	8006320 <xTaskResumeAll>
 800587a:	e76c      	b.n	8005756 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800587c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587e:	f000 fa11 	bl	8005ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005882:	f000 fd4d 	bl	8006320 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005886:	2300      	movs	r3, #0
		}
	}
}
 8005888:	4618      	mov	r0, r3
 800588a:	3738      	adds	r7, #56	; 0x38
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08e      	sub	sp, #56	; 0x38
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d103      	bne.n	80058d0 <xQueueGenericSendFromISR+0x3c>
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <xQueueGenericSendFromISR+0x40>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <xQueueGenericSendFromISR+0x42>
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	623b      	str	r3, [r7, #32]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d103      	bne.n	80058fe <xQueueGenericSendFromISR+0x6a>
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <xQueueGenericSendFromISR+0x6e>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <xQueueGenericSendFromISR+0x70>
 8005902:	2300      	movs	r3, #0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	61fb      	str	r3, [r7, #28]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800591e:	f001 fe87 	bl	8007630 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005922:	f3ef 8211 	mrs	r2, BASEPRI
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	61ba      	str	r2, [r7, #24]
 8005938:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800593a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	429a      	cmp	r2, r3
 8005948:	d302      	bcc.n	8005950 <xQueueGenericSendFromISR+0xbc>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d12c      	bne.n	80059aa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005960:	f000 f910 	bl	8005b84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005964:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800596c:	d112      	bne.n	8005994 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	3324      	adds	r3, #36	; 0x24
 800597a:	4618      	mov	r0, r3
 800597c:	f000 feee 	bl	800675c <xTaskRemoveFromEventList>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00e      	beq.n	80059a4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e007      	b.n	80059a4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005994:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005998:	3301      	adds	r3, #1
 800599a:	b2db      	uxtb	r3, r3
 800599c:	b25a      	sxtb	r2, r3
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059a4:	2301      	movs	r3, #1
 80059a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80059a8:	e001      	b.n	80059ae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	637b      	str	r3, [r7, #52]	; 0x34
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3738      	adds	r7, #56	; 0x38
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08c      	sub	sp, #48	; 0x30
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <xQueueReceive+0x30>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	623b      	str	r3, [r7, #32]
}
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d103      	bne.n	8005a02 <xQueueReceive+0x3e>
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <xQueueReceive+0x42>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <xQueueReceive+0x44>
 8005a06:	2300      	movs	r3, #0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <xQueueReceive+0x5e>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	61fb      	str	r3, [r7, #28]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a22:	f001 f861 	bl	8006ae8 <xTaskGetSchedulerState>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d102      	bne.n	8005a32 <xQueueReceive+0x6e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <xQueueReceive+0x72>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <xQueueReceive+0x74>
 8005a36:	2300      	movs	r3, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <xQueueReceive+0x8e>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	61bb      	str	r3, [r7, #24]
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a52:	f001 fd2b 	bl	80074ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01f      	beq.n	8005aa2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a66:	f000 f8f7 	bl	8005c58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	1e5a      	subs	r2, r3, #1
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00f      	beq.n	8005a9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	3310      	adds	r3, #16
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fe6c 	bl	800675c <xTaskRemoveFromEventList>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a8a:	4b3d      	ldr	r3, [pc, #244]	; (8005b80 <xQueueReceive+0x1bc>)
 8005a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a9a:	f001 fd37 	bl	800750c <vPortExitCritical>
				return pdPASS;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e069      	b.n	8005b76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005aa8:	f001 fd30 	bl	800750c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e062      	b.n	8005b76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ab6:	f107 0310 	add.w	r3, r7, #16
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 feb2 	bl	8006824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ac4:	f001 fd22 	bl	800750c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ac8:	f000 fc1c 	bl	8006304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005acc:	f001 fcee 	bl	80074ac <vPortEnterCritical>
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ad6:	b25b      	sxtb	r3, r3
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005adc:	d103      	bne.n	8005ae6 <xQueueReceive+0x122>
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af2:	d103      	bne.n	8005afc <xQueueReceive+0x138>
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005afc:	f001 fd06 	bl	800750c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b00:	1d3a      	adds	r2, r7, #4
 8005b02:	f107 0310 	add.w	r3, r7, #16
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fea1 	bl	8006850 <xTaskCheckForTimeOut>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d123      	bne.n	8005b5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b16:	f000 f917 	bl	8005d48 <prvIsQueueEmpty>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d017      	beq.n	8005b50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	3324      	adds	r3, #36	; 0x24
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fdc7 	bl	80066bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b30:	f000 f8b8 	bl	8005ca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b34:	f000 fbf4 	bl	8006320 <xTaskResumeAll>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d189      	bne.n	8005a52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <xQueueReceive+0x1bc>)
 8005b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	e780      	b.n	8005a52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b52:	f000 f8a7 	bl	8005ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b56:	f000 fbe3 	bl	8006320 <xTaskResumeAll>
 8005b5a:	e77a      	b.n	8005a52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b5e:	f000 f8a1 	bl	8005ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b62:	f000 fbdd 	bl	8006320 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b68:	f000 f8ee 	bl	8005d48 <prvIsQueueEmpty>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f43f af6f 	beq.w	8005a52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3730      	adds	r7, #48	; 0x30
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10d      	bne.n	8005bbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d14d      	bne.n	8005c46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 ffb8 	bl	8006b24 <xTaskPriorityDisinherit>
 8005bb4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	605a      	str	r2, [r3, #4]
 8005bbc:	e043      	b.n	8005c46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d119      	bne.n	8005bf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6898      	ldr	r0, [r3, #8]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	461a      	mov	r2, r3
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	f002 f867 	bl	8007ca2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	441a      	add	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d32b      	bcc.n	8005c46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	609a      	str	r2, [r3, #8]
 8005bf6:	e026      	b.n	8005c46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68d8      	ldr	r0, [r3, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	461a      	mov	r2, r3
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	f002 f84d 	bl	8007ca2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	425b      	negs	r3, r3
 8005c12:	441a      	add	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d207      	bcs.n	8005c34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	441a      	add	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d105      	bne.n	8005c46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c4e:	697b      	ldr	r3, [r7, #20]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d018      	beq.n	8005c9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	441a      	add	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d303      	bcc.n	8005c8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68d9      	ldr	r1, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	461a      	mov	r2, r3
 8005c96:	6838      	ldr	r0, [r7, #0]
 8005c98:	f002 f803 	bl	8007ca2 <memcpy>
	}
}
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cac:	f001 fbfe 	bl	80074ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cb8:	e011      	b.n	8005cde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d012      	beq.n	8005ce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3324      	adds	r3, #36	; 0x24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fd48 	bl	800675c <xTaskRemoveFromEventList>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cd2:	f000 fe1f 	bl	8006914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dce9      	bgt.n	8005cba <prvUnlockQueue+0x16>
 8005ce6:	e000      	b.n	8005cea <prvUnlockQueue+0x46>
					break;
 8005ce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	22ff      	movs	r2, #255	; 0xff
 8005cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cf2:	f001 fc0b 	bl	800750c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cf6:	f001 fbd9 	bl	80074ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d02:	e011      	b.n	8005d28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d012      	beq.n	8005d32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3310      	adds	r3, #16
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fd23 	bl	800675c <xTaskRemoveFromEventList>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d1c:	f000 fdfa 	bl	8006914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dce9      	bgt.n	8005d04 <prvUnlockQueue+0x60>
 8005d30:	e000      	b.n	8005d34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	22ff      	movs	r2, #255	; 0xff
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d3c:	f001 fbe6 	bl	800750c <vPortExitCritical>
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d50:	f001 fbac 	bl	80074ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	e001      	b.n	8005d66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d66:	f001 fbd1 	bl	800750c <vPortExitCritical>

	return xReturn;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d7c:	f001 fb96 	bl	80074ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d102      	bne.n	8005d92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e001      	b.n	8005d96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d96:	f001 fbb9 	bl	800750c <vPortExitCritical>

	return xReturn;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e014      	b.n	8005dde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005db4:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <vQueueAddToRegistry+0x4c>)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dc0:	490b      	ldr	r1, [pc, #44]	; (8005df0 <vQueueAddToRegistry+0x4c>)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dca:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <vQueueAddToRegistry+0x4c>)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dd6:	e006      	b.n	8005de6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b07      	cmp	r3, #7
 8005de2:	d9e7      	bls.n	8005db4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr
 8005df0:	20001d60 	.word	0x20001d60

08005df4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e04:	f001 fb52 	bl	80074ac <vPortEnterCritical>
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e0e:	b25b      	sxtb	r3, r3
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e14:	d103      	bne.n	8005e1e <vQueueWaitForMessageRestricted+0x2a>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e24:	b25b      	sxtb	r3, r3
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e2a:	d103      	bne.n	8005e34 <vQueueWaitForMessageRestricted+0x40>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e34:	f001 fb6a 	bl	800750c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	3324      	adds	r3, #36	; 0x24
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fc5b 	bl	8006704 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e4e:	6978      	ldr	r0, [r7, #20]
 8005e50:	f7ff ff28 	bl	8005ca4 <prvUnlockQueue>
	}
 8005e54:	bf00      	nop
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08e      	sub	sp, #56	; 0x38
 8005e60:	af04      	add	r7, sp, #16
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	623b      	str	r3, [r7, #32]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	61fb      	str	r3, [r7, #28]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ea2:	23bc      	movs	r3, #188	; 0xbc
 8005ea4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2bbc      	cmp	r3, #188	; 0xbc
 8005eaa:	d00a      	beq.n	8005ec2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	61bb      	str	r3, [r7, #24]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01e      	beq.n	8005f06 <xTaskCreateStatic+0xaa>
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01b      	beq.n	8005f06 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9303      	str	r3, [sp, #12]
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	9302      	str	r3, [sp, #8]
 8005ee8:	f107 0314 	add.w	r3, r7, #20
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f851 	bl	8005fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f00:	f000 f8ec 	bl	80060dc <prvAddNewTaskToReadyList>
 8005f04:	e001      	b.n	8005f0a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f0a:	697b      	ldr	r3, [r7, #20]
	}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3728      	adds	r7, #40	; 0x28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08c      	sub	sp, #48	; 0x30
 8005f18:	af04      	add	r7, sp, #16
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 fbbf 	bl	80076ac <pvPortMalloc>
 8005f2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00e      	beq.n	8005f54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f36:	20bc      	movs	r0, #188	; 0xbc
 8005f38:	f001 fbb8 	bl	80076ac <pvPortMalloc>
 8005f3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30
 8005f4a:	e005      	b.n	8005f58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f4c:	6978      	ldr	r0, [r7, #20]
 8005f4e:	f001 fc71 	bl	8007834 <vPortFree>
 8005f52:	e001      	b.n	8005f58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d017      	beq.n	8005f8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f66:	88fa      	ldrh	r2, [r7, #6]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9303      	str	r3, [sp, #12]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	9302      	str	r3, [sp, #8]
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f80f 	bl	8005fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f82:	69f8      	ldr	r0, [r7, #28]
 8005f84:	f000 f8aa 	bl	80060dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	61bb      	str	r3, [r7, #24]
 8005f8c:	e002      	b.n	8005f94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f94:	69bb      	ldr	r3, [r7, #24]
	}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	21a5      	movs	r1, #165	; 0xa5
 8005fba:	f001 fe80 	bl	8007cbe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f023 0307 	bic.w	r3, r3, #7
 8005fd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	617b      	str	r3, [r7, #20]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	e012      	b.n	8006024 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	7819      	ldrb	r1, [r3, #0]
 8006006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	3334      	adds	r3, #52	; 0x34
 800600e:	460a      	mov	r2, r1
 8006010:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d006      	beq.n	800602c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3301      	adds	r3, #1
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d9e9      	bls.n	8005ffe <prvInitialiseNewTask+0x5e>
 800602a:	e000      	b.n	800602e <prvInitialiseNewTask+0x8e>
		{
			break;
 800602c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	2b37      	cmp	r3, #55	; 0x37
 800603a:	d901      	bls.n	8006040 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800603c:	2337      	movs	r3, #55	; 0x37
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006044:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	2200      	movs	r2, #0
 8006050:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	3304      	adds	r3, #4
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff f98b 	bl	8005372 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	3318      	adds	r3, #24
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff f986 	bl	8005372 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2200      	movs	r2, #0
 8006080:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	2200      	movs	r2, #0
 8006088:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	3354      	adds	r3, #84	; 0x54
 8006090:	2260      	movs	r2, #96	; 0x60
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f001 fe12 	bl	8007cbe <memset>
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	4a0c      	ldr	r2, [pc, #48]	; (80060d0 <prvInitialiseNewTask+0x130>)
 800609e:	659a      	str	r2, [r3, #88]	; 0x58
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	4a0c      	ldr	r2, [pc, #48]	; (80060d4 <prvInitialiseNewTask+0x134>)
 80060a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	4a0b      	ldr	r2, [pc, #44]	; (80060d8 <prvInitialiseNewTask+0x138>)
 80060aa:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	68f9      	ldr	r1, [r7, #12]
 80060b0:	69b8      	ldr	r0, [r7, #24]
 80060b2:	f001 f90b 	bl	80072cc <pxPortInitialiseStack>
 80060b6:	4602      	mov	r2, r0
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060c8:	bf00      	nop
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	0800a6a0 	.word	0x0800a6a0
 80060d4:	0800a6c0 	.word	0x0800a6c0
 80060d8:	0800a680 	.word	0x0800a680

080060dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060e4:	f001 f9e2 	bl	80074ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060e8:	4b2d      	ldr	r3, [pc, #180]	; (80061a0 <prvAddNewTaskToReadyList+0xc4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	4a2c      	ldr	r2, [pc, #176]	; (80061a0 <prvAddNewTaskToReadyList+0xc4>)
 80060f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060f2:	4b2c      	ldr	r3, [pc, #176]	; (80061a4 <prvAddNewTaskToReadyList+0xc8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060fa:	4a2a      	ldr	r2, [pc, #168]	; (80061a4 <prvAddNewTaskToReadyList+0xc8>)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <prvAddNewTaskToReadyList+0xc4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d110      	bne.n	800612a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006108:	f000 fc28 	bl	800695c <prvInitialiseTaskLists>
 800610c:	e00d      	b.n	800612a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800610e:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <prvAddNewTaskToReadyList+0xcc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d109      	bne.n	800612a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006116:	4b23      	ldr	r3, [pc, #140]	; (80061a4 <prvAddNewTaskToReadyList+0xc8>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	429a      	cmp	r2, r3
 8006122:	d802      	bhi.n	800612a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006124:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <prvAddNewTaskToReadyList+0xc8>)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800612a:	4b20      	ldr	r3, [pc, #128]	; (80061ac <prvAddNewTaskToReadyList+0xd0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3301      	adds	r3, #1
 8006130:	4a1e      	ldr	r2, [pc, #120]	; (80061ac <prvAddNewTaskToReadyList+0xd0>)
 8006132:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006134:	4b1d      	ldr	r3, [pc, #116]	; (80061ac <prvAddNewTaskToReadyList+0xd0>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006140:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <prvAddNewTaskToReadyList+0xd4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d903      	bls.n	8006150 <prvAddNewTaskToReadyList+0x74>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <prvAddNewTaskToReadyList+0xd4>)
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <prvAddNewTaskToReadyList+0xd8>)
 800615e:	441a      	add	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f7ff f90f 	bl	800538a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800616c:	f001 f9ce 	bl	800750c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <prvAddNewTaskToReadyList+0xcc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00e      	beq.n	8006196 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006178:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <prvAddNewTaskToReadyList+0xc8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	429a      	cmp	r2, r3
 8006184:	d207      	bcs.n	8006196 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <prvAddNewTaskToReadyList+0xdc>)
 8006188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006196:	bf00      	nop
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000e84 	.word	0x20000e84
 80061a4:	200009b0 	.word	0x200009b0
 80061a8:	20000e90 	.word	0x20000e90
 80061ac:	20000ea0 	.word	0x20000ea0
 80061b0:	20000e8c 	.word	0x20000e8c
 80061b4:	200009b4 	.word	0x200009b4
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d017      	beq.n	80061fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061ce:	4b13      	ldr	r3, [pc, #76]	; (800621c <vTaskDelay+0x60>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <vTaskDelay+0x30>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60bb      	str	r3, [r7, #8]
}
 80061e8:	bf00      	nop
 80061ea:	e7fe      	b.n	80061ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061ec:	f000 f88a 	bl	8006304 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061f0:	2100      	movs	r1, #0
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fd04 	bl	8006c00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061f8:	f000 f892 	bl	8006320 <xTaskResumeAll>
 80061fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d107      	bne.n	8006214 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006204:	4b06      	ldr	r3, [pc, #24]	; (8006220 <vTaskDelay+0x64>)
 8006206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006214:	bf00      	nop
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000eac 	.word	0x20000eac
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006232:	463a      	mov	r2, r7
 8006234:	1d39      	adds	r1, r7, #4
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff f848 	bl	80052d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	9202      	str	r2, [sp, #8]
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	2300      	movs	r3, #0
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	2300      	movs	r3, #0
 8006250:	460a      	mov	r2, r1
 8006252:	4924      	ldr	r1, [pc, #144]	; (80062e4 <vTaskStartScheduler+0xc0>)
 8006254:	4824      	ldr	r0, [pc, #144]	; (80062e8 <vTaskStartScheduler+0xc4>)
 8006256:	f7ff fe01 	bl	8005e5c <xTaskCreateStatic>
 800625a:	4603      	mov	r3, r0
 800625c:	4a23      	ldr	r2, [pc, #140]	; (80062ec <vTaskStartScheduler+0xc8>)
 800625e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006260:	4b22      	ldr	r3, [pc, #136]	; (80062ec <vTaskStartScheduler+0xc8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006268:	2301      	movs	r3, #1
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e001      	b.n	8006272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d102      	bne.n	800627e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006278:	f000 fd16 	bl	8006ca8 <xTimerCreateTimerTask>
 800627c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d11b      	bne.n	80062bc <vTaskStartScheduler+0x98>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	613b      	str	r3, [r7, #16]
}
 8006296:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006298:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <vTaskStartScheduler+0xcc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3354      	adds	r3, #84	; 0x54
 800629e:	4a15      	ldr	r2, [pc, #84]	; (80062f4 <vTaskStartScheduler+0xd0>)
 80062a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062a2:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <vTaskStartScheduler+0xd4>)
 80062a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062aa:	4b14      	ldr	r3, [pc, #80]	; (80062fc <vTaskStartScheduler+0xd8>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062b0:	4b13      	ldr	r3, [pc, #76]	; (8006300 <vTaskStartScheduler+0xdc>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062b6:	f001 f887 	bl	80073c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062ba:	e00e      	b.n	80062da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c2:	d10a      	bne.n	80062da <vTaskStartScheduler+0xb6>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	60fb      	str	r3, [r7, #12]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <vTaskStartScheduler+0xb4>
}
 80062da:	bf00      	nop
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	0800a5e4 	.word	0x0800a5e4
 80062e8:	0800692d 	.word	0x0800692d
 80062ec:	20000ea8 	.word	0x20000ea8
 80062f0:	200009b0 	.word	0x200009b0
 80062f4:	20000018 	.word	0x20000018
 80062f8:	20000ea4 	.word	0x20000ea4
 80062fc:	20000e90 	.word	0x20000e90
 8006300:	20000e88 	.word	0x20000e88

08006304 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006308:	4b04      	ldr	r3, [pc, #16]	; (800631c <vTaskSuspendAll+0x18>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	4a03      	ldr	r2, [pc, #12]	; (800631c <vTaskSuspendAll+0x18>)
 8006310:	6013      	str	r3, [r2, #0]
}
 8006312:	bf00      	nop
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000eac 	.word	0x20000eac

08006320 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800632e:	4b42      	ldr	r3, [pc, #264]	; (8006438 <xTaskResumeAll+0x118>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <xTaskResumeAll+0x2c>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	603b      	str	r3, [r7, #0]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800634c:	f001 f8ae 	bl	80074ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006350:	4b39      	ldr	r3, [pc, #228]	; (8006438 <xTaskResumeAll+0x118>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3b01      	subs	r3, #1
 8006356:	4a38      	ldr	r2, [pc, #224]	; (8006438 <xTaskResumeAll+0x118>)
 8006358:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800635a:	4b37      	ldr	r3, [pc, #220]	; (8006438 <xTaskResumeAll+0x118>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d162      	bne.n	8006428 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006362:	4b36      	ldr	r3, [pc, #216]	; (800643c <xTaskResumeAll+0x11c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d05e      	beq.n	8006428 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800636a:	e02f      	b.n	80063cc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800636c:	4b34      	ldr	r3, [pc, #208]	; (8006440 <xTaskResumeAll+0x120>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3318      	adds	r3, #24
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff f861 	bl	8005440 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3304      	adds	r3, #4
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff f85c 	bl	8005440 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	4b2d      	ldr	r3, [pc, #180]	; (8006444 <xTaskResumeAll+0x124>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d903      	bls.n	800639c <xTaskResumeAll+0x7c>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	4a2a      	ldr	r2, [pc, #168]	; (8006444 <xTaskResumeAll+0x124>)
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4a27      	ldr	r2, [pc, #156]	; (8006448 <xTaskResumeAll+0x128>)
 80063aa:	441a      	add	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f7fe ffe9 	bl	800538a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063bc:	4b23      	ldr	r3, [pc, #140]	; (800644c <xTaskResumeAll+0x12c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80063c6:	4b22      	ldr	r3, [pc, #136]	; (8006450 <xTaskResumeAll+0x130>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063cc:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <xTaskResumeAll+0x120>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1cb      	bne.n	800636c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063da:	f000 fb61 	bl	8006aa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063de:	4b1d      	ldr	r3, [pc, #116]	; (8006454 <xTaskResumeAll+0x134>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d010      	beq.n	800640c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063ea:	f000 f845 	bl	8006478 <xTaskIncrementTick>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063f4:	4b16      	ldr	r3, [pc, #88]	; (8006450 <xTaskResumeAll+0x130>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f1      	bne.n	80063ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006406:	4b13      	ldr	r3, [pc, #76]	; (8006454 <xTaskResumeAll+0x134>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800640c:	4b10      	ldr	r3, [pc, #64]	; (8006450 <xTaskResumeAll+0x130>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006414:	2301      	movs	r3, #1
 8006416:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <xTaskResumeAll+0x138>)
 800641a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006428:	f001 f870 	bl	800750c <vPortExitCritical>

	return xAlreadyYielded;
 800642c:	68bb      	ldr	r3, [r7, #8]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000eac 	.word	0x20000eac
 800643c:	20000e84 	.word	0x20000e84
 8006440:	20000e44 	.word	0x20000e44
 8006444:	20000e8c 	.word	0x20000e8c
 8006448:	200009b4 	.word	0x200009b4
 800644c:	200009b0 	.word	0x200009b0
 8006450:	20000e98 	.word	0x20000e98
 8006454:	20000e94 	.word	0x20000e94
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <xTaskGetTickCount+0x18>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006468:	687b      	ldr	r3, [r7, #4]
}
 800646a:	4618      	mov	r0, r3
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr
 8006474:	20000e88 	.word	0x20000e88

08006478 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006482:	4b51      	ldr	r3, [pc, #324]	; (80065c8 <xTaskIncrementTick+0x150>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 808e 	bne.w	80065a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800648c:	4b4f      	ldr	r3, [pc, #316]	; (80065cc <xTaskIncrementTick+0x154>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3301      	adds	r3, #1
 8006492:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006494:	4a4d      	ldr	r2, [pc, #308]	; (80065cc <xTaskIncrementTick+0x154>)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d120      	bne.n	80064e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064a0:	4b4b      	ldr	r3, [pc, #300]	; (80065d0 <xTaskIncrementTick+0x158>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	603b      	str	r3, [r7, #0]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <xTaskIncrementTick+0x46>
 80064c0:	4b43      	ldr	r3, [pc, #268]	; (80065d0 <xTaskIncrementTick+0x158>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	4b43      	ldr	r3, [pc, #268]	; (80065d4 <xTaskIncrementTick+0x15c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a41      	ldr	r2, [pc, #260]	; (80065d0 <xTaskIncrementTick+0x158>)
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4a41      	ldr	r2, [pc, #260]	; (80065d4 <xTaskIncrementTick+0x15c>)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	4b40      	ldr	r3, [pc, #256]	; (80065d8 <xTaskIncrementTick+0x160>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3301      	adds	r3, #1
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xTaskIncrementTick+0x160>)
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	f000 fadf 	bl	8006aa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064e2:	4b3e      	ldr	r3, [pc, #248]	; (80065dc <xTaskIncrementTick+0x164>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d34e      	bcc.n	800658a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ec:	4b38      	ldr	r3, [pc, #224]	; (80065d0 <xTaskIncrementTick+0x158>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <xTaskIncrementTick+0x82>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <xTaskIncrementTick+0x84>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006500:	4b36      	ldr	r3, [pc, #216]	; (80065dc <xTaskIncrementTick+0x164>)
 8006502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006506:	601a      	str	r2, [r3, #0]
					break;
 8006508:	e03f      	b.n	800658a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800650a:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <xTaskIncrementTick+0x158>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	429a      	cmp	r2, r3
 8006520:	d203      	bcs.n	800652a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006522:	4a2e      	ldr	r2, [pc, #184]	; (80065dc <xTaskIncrementTick+0x164>)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6013      	str	r3, [r2, #0]
						break;
 8006528:	e02f      	b.n	800658a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	3304      	adds	r3, #4
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe ff86 	bl	8005440 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	3318      	adds	r3, #24
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe ff7d 	bl	8005440 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654a:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <xTaskIncrementTick+0x168>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d903      	bls.n	800655a <xTaskIncrementTick+0xe2>
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	4a22      	ldr	r2, [pc, #136]	; (80065e0 <xTaskIncrementTick+0x168>)
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4a1f      	ldr	r2, [pc, #124]	; (80065e4 <xTaskIncrementTick+0x16c>)
 8006568:	441a      	add	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	3304      	adds	r3, #4
 800656e:	4619      	mov	r1, r3
 8006570:	4610      	mov	r0, r2
 8006572:	f7fe ff0a 	bl	800538a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657a:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <xTaskIncrementTick+0x170>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	429a      	cmp	r2, r3
 8006582:	d3b3      	bcc.n	80064ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006584:	2301      	movs	r3, #1
 8006586:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006588:	e7b0      	b.n	80064ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800658a:	4b17      	ldr	r3, [pc, #92]	; (80065e8 <xTaskIncrementTick+0x170>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006590:	4914      	ldr	r1, [pc, #80]	; (80065e4 <xTaskIncrementTick+0x16c>)
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d907      	bls.n	80065b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80065a2:	2301      	movs	r3, #1
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e004      	b.n	80065b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80065a8:	4b10      	ldr	r3, [pc, #64]	; (80065ec <xTaskIncrementTick+0x174>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	4a0f      	ldr	r2, [pc, #60]	; (80065ec <xTaskIncrementTick+0x174>)
 80065b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80065b2:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <xTaskIncrementTick+0x178>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80065ba:	2301      	movs	r3, #1
 80065bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065be:	697b      	ldr	r3, [r7, #20]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000eac 	.word	0x20000eac
 80065cc:	20000e88 	.word	0x20000e88
 80065d0:	20000e3c 	.word	0x20000e3c
 80065d4:	20000e40 	.word	0x20000e40
 80065d8:	20000e9c 	.word	0x20000e9c
 80065dc:	20000ea4 	.word	0x20000ea4
 80065e0:	20000e8c 	.word	0x20000e8c
 80065e4:	200009b4 	.word	0x200009b4
 80065e8:	200009b0 	.word	0x200009b0
 80065ec:	20000e94 	.word	0x20000e94
 80065f0:	20000e98 	.word	0x20000e98

080065f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065fa:	4b2a      	ldr	r3, [pc, #168]	; (80066a4 <vTaskSwitchContext+0xb0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006602:	4b29      	ldr	r3, [pc, #164]	; (80066a8 <vTaskSwitchContext+0xb4>)
 8006604:	2201      	movs	r2, #1
 8006606:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006608:	e046      	b.n	8006698 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800660a:	4b27      	ldr	r3, [pc, #156]	; (80066a8 <vTaskSwitchContext+0xb4>)
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006610:	4b26      	ldr	r3, [pc, #152]	; (80066ac <vTaskSwitchContext+0xb8>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	e010      	b.n	800663a <vTaskSwitchContext+0x46>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <vTaskSwitchContext+0x40>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	607b      	str	r3, [r7, #4]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <vTaskSwitchContext+0x3e>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3b01      	subs	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	491d      	ldr	r1, [pc, #116]	; (80066b0 <vTaskSwitchContext+0xbc>)
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0e4      	beq.n	8006618 <vTaskSwitchContext+0x24>
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <vTaskSwitchContext+0xbc>)
 800665a:	4413      	add	r3, r2
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	3308      	adds	r3, #8
 8006670:	429a      	cmp	r2, r3
 8006672:	d104      	bne.n	800667e <vTaskSwitchContext+0x8a>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	605a      	str	r2, [r3, #4]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4a0b      	ldr	r2, [pc, #44]	; (80066b4 <vTaskSwitchContext+0xc0>)
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	4a08      	ldr	r2, [pc, #32]	; (80066ac <vTaskSwitchContext+0xb8>)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <vTaskSwitchContext+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3354      	adds	r3, #84	; 0x54
 8006694:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <vTaskSwitchContext+0xc4>)
 8006696:	6013      	str	r3, [r2, #0]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20000eac 	.word	0x20000eac
 80066a8:	20000e98 	.word	0x20000e98
 80066ac:	20000e8c 	.word	0x20000e8c
 80066b0:	200009b4 	.word	0x200009b4
 80066b4:	200009b0 	.word	0x200009b0
 80066b8:	20000018 	.word	0x20000018

080066bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60fb      	str	r3, [r7, #12]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066e2:	4b07      	ldr	r3, [pc, #28]	; (8006700 <vTaskPlaceOnEventList+0x44>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3318      	adds	r3, #24
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fe fe70 	bl	80053d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066f0:	2101      	movs	r1, #1
 80066f2:	6838      	ldr	r0, [r7, #0]
 80066f4:	f000 fa84 	bl	8006c00 <prvAddCurrentTaskToDelayedList>
}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	200009b0 	.word	0x200009b0

08006704 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	617b      	str	r3, [r7, #20]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vTaskPlaceOnEventListRestricted+0x54>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3318      	adds	r3, #24
 8006732:	4619      	mov	r1, r3
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7fe fe28 	bl	800538a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006744:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	68b8      	ldr	r0, [r7, #8]
 800674a:	f000 fa59 	bl	8006c00 <prvAddCurrentTaskToDelayedList>
	}
 800674e:	bf00      	nop
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	200009b0 	.word	0x200009b0

0800675c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60fb      	str	r3, [r7, #12]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	3318      	adds	r3, #24
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fe57 	bl	8005440 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006792:	4b1e      	ldr	r3, [pc, #120]	; (800680c <xTaskRemoveFromEventList+0xb0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d11d      	bne.n	80067d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	3304      	adds	r3, #4
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe fe4e 	bl	8005440 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4b19      	ldr	r3, [pc, #100]	; (8006810 <xTaskRemoveFromEventList+0xb4>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d903      	bls.n	80067b8 <xTaskRemoveFromEventList+0x5c>
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	4a16      	ldr	r2, [pc, #88]	; (8006810 <xTaskRemoveFromEventList+0xb4>)
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4a13      	ldr	r2, [pc, #76]	; (8006814 <xTaskRemoveFromEventList+0xb8>)
 80067c6:	441a      	add	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7fe fddb 	bl	800538a <vListInsertEnd>
 80067d4:	e005      	b.n	80067e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	3318      	adds	r3, #24
 80067da:	4619      	mov	r1, r3
 80067dc:	480e      	ldr	r0, [pc, #56]	; (8006818 <xTaskRemoveFromEventList+0xbc>)
 80067de:	f7fe fdd4 	bl	800538a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e6:	4b0d      	ldr	r3, [pc, #52]	; (800681c <xTaskRemoveFromEventList+0xc0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d905      	bls.n	80067fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067f0:	2301      	movs	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <xTaskRemoveFromEventList+0xc4>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e001      	b.n	8006800 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006800:	697b      	ldr	r3, [r7, #20]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000eac 	.word	0x20000eac
 8006810:	20000e8c 	.word	0x20000e8c
 8006814:	200009b4 	.word	0x200009b4
 8006818:	20000e44 	.word	0x20000e44
 800681c:	200009b0 	.word	0x200009b0
 8006820:	20000e98 	.word	0x20000e98

08006824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <vTaskInternalSetTimeOutState+0x24>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <vTaskInternalSetTimeOutState+0x28>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	605a      	str	r2, [r3, #4]
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20000e9c 	.word	0x20000e9c
 800684c:	20000e88 	.word	0x20000e88

08006850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	60fb      	str	r3, [r7, #12]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006892:	f000 fe0b 	bl	80074ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006896:	4b1d      	ldr	r3, [pc, #116]	; (800690c <xTaskCheckForTimeOut+0xbc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ae:	d102      	bne.n	80068b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	e023      	b.n	80068fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b15      	ldr	r3, [pc, #84]	; (8006910 <xTaskCheckForTimeOut+0xc0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d007      	beq.n	80068d2 <xTaskCheckForTimeOut+0x82>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d302      	bcc.n	80068d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	e015      	b.n	80068fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d20b      	bcs.n	80068f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff ff9b 	bl	8006824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e004      	b.n	80068fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068fa:	2301      	movs	r3, #1
 80068fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068fe:	f000 fe05 	bl	800750c <vPortExitCritical>

	return xReturn;
 8006902:	69fb      	ldr	r3, [r7, #28]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000e88 	.word	0x20000e88
 8006910:	20000e9c 	.word	0x20000e9c

08006914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006918:	4b03      	ldr	r3, [pc, #12]	; (8006928 <vTaskMissedYield+0x14>)
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]
}
 800691e:	bf00      	nop
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000e98 	.word	0x20000e98

0800692c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006934:	f000 f852 	bl	80069dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <prvIdleTask+0x28>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d9f9      	bls.n	8006934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <prvIdleTask+0x2c>)
 8006942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006950:	e7f0      	b.n	8006934 <prvIdleTask+0x8>
 8006952:	bf00      	nop
 8006954:	200009b4 	.word	0x200009b4
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
 8006966:	e00c      	b.n	8006982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4a12      	ldr	r2, [pc, #72]	; (80069bc <prvInitialiseTaskLists+0x60>)
 8006974:	4413      	add	r3, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fcdc 	bl	8005334 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3301      	adds	r3, #1
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b37      	cmp	r3, #55	; 0x37
 8006986:	d9ef      	bls.n	8006968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006988:	480d      	ldr	r0, [pc, #52]	; (80069c0 <prvInitialiseTaskLists+0x64>)
 800698a:	f7fe fcd3 	bl	8005334 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800698e:	480d      	ldr	r0, [pc, #52]	; (80069c4 <prvInitialiseTaskLists+0x68>)
 8006990:	f7fe fcd0 	bl	8005334 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006994:	480c      	ldr	r0, [pc, #48]	; (80069c8 <prvInitialiseTaskLists+0x6c>)
 8006996:	f7fe fccd 	bl	8005334 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800699a:	480c      	ldr	r0, [pc, #48]	; (80069cc <prvInitialiseTaskLists+0x70>)
 800699c:	f7fe fcca 	bl	8005334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069a0:	480b      	ldr	r0, [pc, #44]	; (80069d0 <prvInitialiseTaskLists+0x74>)
 80069a2:	f7fe fcc7 	bl	8005334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <prvInitialiseTaskLists+0x78>)
 80069a8:	4a05      	ldr	r2, [pc, #20]	; (80069c0 <prvInitialiseTaskLists+0x64>)
 80069aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069ac:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <prvInitialiseTaskLists+0x7c>)
 80069ae:	4a05      	ldr	r2, [pc, #20]	; (80069c4 <prvInitialiseTaskLists+0x68>)
 80069b0:	601a      	str	r2, [r3, #0]
}
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	200009b4 	.word	0x200009b4
 80069c0:	20000e14 	.word	0x20000e14
 80069c4:	20000e28 	.word	0x20000e28
 80069c8:	20000e44 	.word	0x20000e44
 80069cc:	20000e58 	.word	0x20000e58
 80069d0:	20000e70 	.word	0x20000e70
 80069d4:	20000e3c 	.word	0x20000e3c
 80069d8:	20000e40 	.word	0x20000e40

080069dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069e2:	e019      	b.n	8006a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069e4:	f000 fd62 	bl	80074ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80069e8:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <prvCheckTasksWaitingTermination+0x50>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fd23 	bl	8005440 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069fa:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <prvCheckTasksWaitingTermination+0x54>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	4a0b      	ldr	r2, [pc, #44]	; (8006a30 <prvCheckTasksWaitingTermination+0x54>)
 8006a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <prvCheckTasksWaitingTermination+0x58>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <prvCheckTasksWaitingTermination+0x58>)
 8006a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a0e:	f000 fd7d 	bl	800750c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f810 	bl	8006a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <prvCheckTasksWaitingTermination+0x58>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e1      	bne.n	80069e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000e58 	.word	0x20000e58
 8006a30:	20000e84 	.word	0x20000e84
 8006a34:	20000e6c 	.word	0x20000e6c

08006a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3354      	adds	r3, #84	; 0x54
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fe23 	bl	8008690 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d108      	bne.n	8006a66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 feeb 	bl	8007834 <vPortFree>
				vPortFree( pxTCB );
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fee8 	bl	8007834 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a64:	e018      	b.n	8006a98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d103      	bne.n	8006a78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fedf 	bl	8007834 <vPortFree>
	}
 8006a76:	e00f      	b.n	8006a98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d00a      	beq.n	8006a98 <prvDeleteTCB+0x60>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <prvDeleteTCB+0x5e>
	}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa6:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <prvResetNextTaskUnblockTime+0x40>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <prvResetNextTaskUnblockTime+0x14>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <prvResetNextTaskUnblockTime+0x16>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aba:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <prvResetNextTaskUnblockTime+0x44>)
 8006abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ac0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ac2:	e008      	b.n	8006ad6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ac4:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <prvResetNextTaskUnblockTime+0x40>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	4a04      	ldr	r2, [pc, #16]	; (8006ae4 <prvResetNextTaskUnblockTime+0x44>)
 8006ad4:	6013      	str	r3, [r2, #0]
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr
 8006ae0:	20000e3c 	.word	0x20000e3c
 8006ae4:	20000ea4 	.word	0x20000ea4

08006ae8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006aee:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <xTaskGetSchedulerState+0x34>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d102      	bne.n	8006afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006af6:	2301      	movs	r3, #1
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	e008      	b.n	8006b0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <xTaskGetSchedulerState+0x38>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b04:	2302      	movs	r3, #2
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	e001      	b.n	8006b0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b0e:	687b      	ldr	r3, [r7, #4]
	}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	20000e90 	.word	0x20000e90
 8006b20:	20000eac 	.word	0x20000eac

08006b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d056      	beq.n	8006be8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b3a:	4b2e      	ldr	r3, [pc, #184]	; (8006bf4 <xTaskPriorityDisinherit+0xd0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d00a      	beq.n	8006b5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60fb      	str	r3, [r7, #12]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	60bb      	str	r3, [r7, #8]
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7c:	1e5a      	subs	r2, r3, #1
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d02c      	beq.n	8006be8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d128      	bne.n	8006be8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fc50 	bl	8005440 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	4b0f      	ldr	r3, [pc, #60]	; (8006bf8 <xTaskPriorityDisinherit+0xd4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d903      	bls.n	8006bc8 <xTaskPriorityDisinherit+0xa4>
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	4a0c      	ldr	r2, [pc, #48]	; (8006bf8 <xTaskPriorityDisinherit+0xd4>)
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <xTaskPriorityDisinherit+0xd8>)
 8006bd6:	441a      	add	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7fe fbd3 	bl	800538a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006be8:	697b      	ldr	r3, [r7, #20]
	}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	200009b0 	.word	0x200009b0
 8006bf8:	20000e8c 	.word	0x20000e8c
 8006bfc:	200009b4 	.word	0x200009b4

08006c00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c0a:	4b21      	ldr	r3, [pc, #132]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c10:	4b20      	ldr	r3, [pc, #128]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fc12 	bl	8005440 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c22:	d10a      	bne.n	8006c3a <prvAddCurrentTaskToDelayedList+0x3a>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c2a:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	4819      	ldr	r0, [pc, #100]	; (8006c98 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c34:	f7fe fba9 	bl	800538a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c38:	e026      	b.n	8006c88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4413      	add	r3, r2
 8006c40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c42:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d209      	bcs.n	8006c66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f7fe fbb6 	bl	80053d0 <vListInsert>
}
 8006c64:	e010      	b.n	8006c88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c66:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f7fe fbac 	bl	80053d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d202      	bcs.n	8006c88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c82:	4a08      	ldr	r2, [pc, #32]	; (8006ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6013      	str	r3, [r2, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000e88 	.word	0x20000e88
 8006c94:	200009b0 	.word	0x200009b0
 8006c98:	20000e70 	.word	0x20000e70
 8006c9c:	20000e40 	.word	0x20000e40
 8006ca0:	20000e3c 	.word	0x20000e3c
 8006ca4:	20000ea4 	.word	0x20000ea4

08006ca8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08a      	sub	sp, #40	; 0x28
 8006cac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cb2:	f000 facb 	bl	800724c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cb6:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <xTimerCreateTimerTask+0x80>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d021      	beq.n	8006d02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cc6:	1d3a      	adds	r2, r7, #4
 8006cc8:	f107 0108 	add.w	r1, r7, #8
 8006ccc:	f107 030c 	add.w	r3, r7, #12
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fe fb15 	bl	8005300 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	9202      	str	r2, [sp, #8]
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	4910      	ldr	r1, [pc, #64]	; (8006d2c <xTimerCreateTimerTask+0x84>)
 8006cea:	4811      	ldr	r0, [pc, #68]	; (8006d30 <xTimerCreateTimerTask+0x88>)
 8006cec:	f7ff f8b6 	bl	8005e5c <xTaskCreateStatic>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	4a10      	ldr	r2, [pc, #64]	; (8006d34 <xTimerCreateTimerTask+0x8c>)
 8006cf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <xTimerCreateTimerTask+0x8c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	613b      	str	r3, [r7, #16]
}
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d1e:	697b      	ldr	r3, [r7, #20]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20000ee0 	.word	0x20000ee0
 8006d2c:	0800a5ec 	.word	0x0800a5ec
 8006d30:	08006e55 	.word	0x08006e55
 8006d34:	20000ee4 	.word	0x20000ee4

08006d38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	; 0x28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	623b      	str	r3, [r7, #32]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d66:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <xTimerGenericCommand+0x98>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d02a      	beq.n	8006dc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	dc18      	bgt.n	8006db2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d80:	f7ff feb2 	bl	8006ae8 <xTaskGetSchedulerState>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d109      	bne.n	8006d9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d8a:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <xTimerGenericCommand+0x98>)
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	f107 0110 	add.w	r1, r7, #16
 8006d92:	2300      	movs	r3, #0
 8006d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d96:	f7fe fc7f 	bl	8005698 <xQueueGenericSend>
 8006d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d9c:	e012      	b.n	8006dc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <xTimerGenericCommand+0x98>)
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	f107 0110 	add.w	r1, r7, #16
 8006da6:	2300      	movs	r3, #0
 8006da8:	2200      	movs	r2, #0
 8006daa:	f7fe fc75 	bl	8005698 <xQueueGenericSend>
 8006dae:	6278      	str	r0, [r7, #36]	; 0x24
 8006db0:	e008      	b.n	8006dc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006db2:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <xTimerGenericCommand+0x98>)
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f107 0110 	add.w	r1, r7, #16
 8006dba:	2300      	movs	r3, #0
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	f7fe fd69 	bl	8005894 <xQueueGenericSendFromISR>
 8006dc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3728      	adds	r7, #40	; 0x28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000ee0 	.word	0x20000ee0

08006dd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dde:	4b1c      	ldr	r3, [pc, #112]	; (8006e50 <prvProcessExpiredTimer+0x7c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe fb27 	bl	8005440 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d122      	bne.n	8006e40 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	18d1      	adds	r1, r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	6978      	ldr	r0, [r7, #20]
 8006e08:	f000 f8c8 	bl	8006f9c <prvInsertTimerInActiveList>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d016      	beq.n	8006e40 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e12:	2300      	movs	r3, #0
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	2300      	movs	r3, #0
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	6978      	ldr	r0, [r7, #20]
 8006e1e:	f7ff ff8b 	bl	8006d38 <xTimerGenericCommand>
 8006e22:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	60fb      	str	r3, [r7, #12]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	6978      	ldr	r0, [r7, #20]
 8006e46:	4798      	blx	r3
}
 8006e48:	bf00      	nop
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000ed8 	.word	0x20000ed8

08006e54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e5c:	f107 0308 	add.w	r3, r7, #8
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f857 	bl	8006f14 <prvGetNextExpireTime>
 8006e66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 f803 	bl	8006e78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e72:	f000 f8d5 	bl	8007020 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e76:	e7f1      	b.n	8006e5c <prvTimerTask+0x8>

08006e78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e82:	f7ff fa3f 	bl	8006304 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f866 	bl	8006f5c <prvSampleTimeNow>
 8006e90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d130      	bne.n	8006efa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <prvProcessTimerOrBlockTask+0x3c>
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d806      	bhi.n	8006eb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ea6:	f7ff fa3b 	bl	8006320 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ff91 	bl	8006dd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006eb2:	e024      	b.n	8006efe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d008      	beq.n	8006ecc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <prvProcessTimerOrBlockTask+0x90>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2301      	moveq	r3, #1
 8006ec6:	2300      	movne	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <prvProcessTimerOrBlockTask+0x94>)
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f7fe ff8b 	bl	8005df4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ede:	f7ff fa1f 	bl	8006320 <xTaskResumeAll>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <prvProcessTimerOrBlockTask+0x98>)
 8006eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	f3bf 8f6f 	isb	sy
}
 8006ef8:	e001      	b.n	8006efe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006efa:	f7ff fa11 	bl	8006320 <xTaskResumeAll>
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000edc 	.word	0x20000edc
 8006f0c:	20000ee0 	.word	0x20000ee0
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <prvGetNextExpireTime+0x44>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bf0c      	ite	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	2300      	movne	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f3a:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <prvGetNextExpireTime+0x44>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e001      	b.n	8006f4a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000ed8 	.word	0x20000ed8

08006f5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f64:	f7ff fa7a 	bl	800645c <xTaskGetTickCount>
 8006f68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <prvSampleTimeNow+0x3c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d205      	bcs.n	8006f80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f74:	f000 f908 	bl	8007188 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e002      	b.n	8006f86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f86:	4a04      	ldr	r2, [pc, #16]	; (8006f98 <prvSampleTimeNow+0x3c>)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000ee8 	.word	0x20000ee8

08006f9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d812      	bhi.n	8006fe8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	1ad2      	subs	r2, r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d302      	bcc.n	8006fd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e01b      	b.n	800700e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <prvInsertTimerInActiveList+0x7c>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f7fe f9f5 	bl	80053d0 <vListInsert>
 8006fe6:	e012      	b.n	800700e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d206      	bcs.n	8006ffe <prvInsertTimerInActiveList+0x62>
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d302      	bcc.n	8006ffe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e007      	b.n	800700e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ffe:	4b07      	ldr	r3, [pc, #28]	; (800701c <prvInsertTimerInActiveList+0x80>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3304      	adds	r3, #4
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f7fe f9e1 	bl	80053d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800700e:	697b      	ldr	r3, [r7, #20]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000edc 	.word	0x20000edc
 800701c:	20000ed8 	.word	0x20000ed8

08007020 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08e      	sub	sp, #56	; 0x38
 8007024:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007026:	e09d      	b.n	8007164 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	da18      	bge.n	8007060 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800702e:	1d3b      	adds	r3, r7, #4
 8007030:	3304      	adds	r3, #4
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	61fb      	str	r3, [r7, #28]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007056:	6850      	ldr	r0, [r2, #4]
 8007058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705a:	6892      	ldr	r2, [r2, #8]
 800705c:	4611      	mov	r1, r2
 800705e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	db7d      	blt.n	8007162 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	3304      	adds	r3, #4
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe f9e2 	bl	8005440 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800707c:	463b      	mov	r3, r7
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff ff6c 	bl	8006f5c <prvSampleTimeNow>
 8007084:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b09      	cmp	r3, #9
 800708a:	d86b      	bhi.n	8007164 <prvProcessReceivedCommands+0x144>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <prvProcessReceivedCommands+0x74>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070bd 	.word	0x080070bd
 8007098:	080070bd 	.word	0x080070bd
 800709c:	080070bd 	.word	0x080070bd
 80070a0:	08007165 	.word	0x08007165
 80070a4:	08007119 	.word	0x08007119
 80070a8:	08007151 	.word	0x08007151
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070bd 	.word	0x080070bd
 80070b4:	08007165 	.word	0x08007165
 80070b8:	08007119 	.word	0x08007119
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	18d1      	adds	r1, r2, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ca:	f7ff ff67 	bl	8006f9c <prvInsertTimerInActiveList>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d047      	beq.n	8007164 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d13f      	bne.n	8007164 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	441a      	add	r2, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	2300      	movs	r3, #0
 80070f2:	2100      	movs	r1, #0
 80070f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f6:	f7ff fe1f 	bl	8006d38 <xTimerGenericCommand>
 80070fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d130      	bne.n	8007164 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	61bb      	str	r3, [r7, #24]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	617b      	str	r3, [r7, #20]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	699a      	ldr	r2, [r3, #24]
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	18d1      	adds	r1, r2, r3
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800714a:	f7ff ff27 	bl	8006f9c <prvInsertTimerInActiveList>
					break;
 800714e:	e009      	b.n	8007164 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800715a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800715c:	f000 fb6a 	bl	8007834 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007160:	e000      	b.n	8007164 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007162:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007164:	4b07      	ldr	r3, [pc, #28]	; (8007184 <prvProcessReceivedCommands+0x164>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	1d39      	adds	r1, r7, #4
 800716a:	2200      	movs	r2, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe fc29 	bl	80059c4 <xQueueReceive>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	f47f af57 	bne.w	8007028 <prvProcessReceivedCommands+0x8>
	}
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	3730      	adds	r7, #48	; 0x30
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20000ee0 	.word	0x20000ee0

08007188 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800718e:	e045      	b.n	800721c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007190:	4b2c      	ldr	r3, [pc, #176]	; (8007244 <prvSwitchTimerLists+0xbc>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800719a:	4b2a      	ldr	r3, [pc, #168]	; (8007244 <prvSwitchTimerLists+0xbc>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fe f949 	bl	8005440 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d12e      	bne.n	800721c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4413      	add	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d90e      	bls.n	80071ee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071dc:	4b19      	ldr	r3, [pc, #100]	; (8007244 <prvSwitchTimerLists+0xbc>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f7fe f8f2 	bl	80053d0 <vListInsert>
 80071ec:	e016      	b.n	800721c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071ee:	2300      	movs	r3, #0
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	2100      	movs	r1, #0
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7ff fd9d 	bl	8006d38 <xTimerGenericCommand>
 80071fe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <prvSwitchTimerLists+0x94>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	603b      	str	r3, [r7, #0]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800721c:	4b09      	ldr	r3, [pc, #36]	; (8007244 <prvSwitchTimerLists+0xbc>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1b4      	bne.n	8007190 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007226:	4b07      	ldr	r3, [pc, #28]	; (8007244 <prvSwitchTimerLists+0xbc>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <prvSwitchTimerLists+0xc0>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a04      	ldr	r2, [pc, #16]	; (8007244 <prvSwitchTimerLists+0xbc>)
 8007232:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007234:	4a04      	ldr	r2, [pc, #16]	; (8007248 <prvSwitchTimerLists+0xc0>)
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	6013      	str	r3, [r2, #0]
}
 800723a:	bf00      	nop
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20000ed8 	.word	0x20000ed8
 8007248:	20000edc 	.word	0x20000edc

0800724c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007252:	f000 f92b 	bl	80074ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <prvCheckForValidListAndQueue+0x60>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d120      	bne.n	80072a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800725e:	4814      	ldr	r0, [pc, #80]	; (80072b0 <prvCheckForValidListAndQueue+0x64>)
 8007260:	f7fe f868 	bl	8005334 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007264:	4813      	ldr	r0, [pc, #76]	; (80072b4 <prvCheckForValidListAndQueue+0x68>)
 8007266:	f7fe f865 	bl	8005334 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <prvCheckForValidListAndQueue+0x6c>)
 800726c:	4a10      	ldr	r2, [pc, #64]	; (80072b0 <prvCheckForValidListAndQueue+0x64>)
 800726e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007270:	4b12      	ldr	r3, [pc, #72]	; (80072bc <prvCheckForValidListAndQueue+0x70>)
 8007272:	4a10      	ldr	r2, [pc, #64]	; (80072b4 <prvCheckForValidListAndQueue+0x68>)
 8007274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007276:	2300      	movs	r3, #0
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <prvCheckForValidListAndQueue+0x74>)
 800727c:	4a11      	ldr	r2, [pc, #68]	; (80072c4 <prvCheckForValidListAndQueue+0x78>)
 800727e:	2110      	movs	r1, #16
 8007280:	200a      	movs	r0, #10
 8007282:	f7fe f96f 	bl	8005564 <xQueueGenericCreateStatic>
 8007286:	4603      	mov	r3, r0
 8007288:	4a08      	ldr	r2, [pc, #32]	; (80072ac <prvCheckForValidListAndQueue+0x60>)
 800728a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800728c:	4b07      	ldr	r3, [pc, #28]	; (80072ac <prvCheckForValidListAndQueue+0x60>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007294:	4b05      	ldr	r3, [pc, #20]	; (80072ac <prvCheckForValidListAndQueue+0x60>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	490b      	ldr	r1, [pc, #44]	; (80072c8 <prvCheckForValidListAndQueue+0x7c>)
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe fd82 	bl	8005da4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072a0:	f000 f934 	bl	800750c <vPortExitCritical>
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000ee0 	.word	0x20000ee0
 80072b0:	20000eb0 	.word	0x20000eb0
 80072b4:	20000ec4 	.word	0x20000ec4
 80072b8:	20000ed8 	.word	0x20000ed8
 80072bc:	20000edc 	.word	0x20000edc
 80072c0:	20000f8c 	.word	0x20000f8c
 80072c4:	20000eec 	.word	0x20000eec
 80072c8:	0800a5f4 	.word	0x0800a5f4

080072cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3b04      	subs	r3, #4
 80072dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3b04      	subs	r3, #4
 80072ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f023 0201 	bic.w	r2, r3, #1
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3b04      	subs	r3, #4
 80072fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072fc:	4a08      	ldr	r2, [pc, #32]	; (8007320 <pxPortInitialiseStack+0x54>)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3b14      	subs	r3, #20
 8007306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3b20      	subs	r3, #32
 8007312:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007314:	68fb      	ldr	r3, [r7, #12]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	bc80      	pop	{r7}
 800731e:	4770      	bx	lr
 8007320:	08007325 	.word	0x08007325

08007324 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800732a:	2300      	movs	r3, #0
 800732c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800732e:	4b12      	ldr	r3, [pc, #72]	; (8007378 <prvTaskExitError+0x54>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007336:	d00a      	beq.n	800734e <prvTaskExitError+0x2a>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	60fb      	str	r3, [r7, #12]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <prvTaskExitError+0x28>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60bb      	str	r3, [r7, #8]
}
 8007360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007362:	bf00      	nop
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0fc      	beq.n	8007364 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800736a:	bf00      	nop
 800736c:	bf00      	nop
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	20000014 	.word	0x20000014
 800737c:	00000000 	.word	0x00000000

08007380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <pxCurrentTCBConst2>)
 8007382:	6819      	ldr	r1, [r3, #0]
 8007384:	6808      	ldr	r0, [r1, #0]
 8007386:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800738a:	f380 8809 	msr	PSP, r0
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8811 	msr	BASEPRI, r0
 800739a:	f04e 0e0d 	orr.w	lr, lr, #13
 800739e:	4770      	bx	lr

080073a0 <pxCurrentTCBConst2>:
 80073a0:	200009b0 	.word	0x200009b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop

080073a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80073a8:	4806      	ldr	r0, [pc, #24]	; (80073c4 <prvPortStartFirstTask+0x1c>)
 80073aa:	6800      	ldr	r0, [r0, #0]
 80073ac:	6800      	ldr	r0, [r0, #0]
 80073ae:	f380 8808 	msr	MSP, r0
 80073b2:	b662      	cpsie	i
 80073b4:	b661      	cpsie	f
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	df00      	svc	0
 80073c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073c2:	bf00      	nop
 80073c4:	e000ed08 	.word	0xe000ed08

080073c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073ce:	4b32      	ldr	r3, [pc, #200]	; (8007498 <xPortStartScheduler+0xd0>)
 80073d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	22ff      	movs	r2, #255	; 0xff
 80073de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	4b2a      	ldr	r3, [pc, #168]	; (800749c <xPortStartScheduler+0xd4>)
 80073f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073f6:	4b2a      	ldr	r3, [pc, #168]	; (80074a0 <xPortStartScheduler+0xd8>)
 80073f8:	2207      	movs	r2, #7
 80073fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073fc:	e009      	b.n	8007412 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80073fe:	4b28      	ldr	r3, [pc, #160]	; (80074a0 <xPortStartScheduler+0xd8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3b01      	subs	r3, #1
 8007404:	4a26      	ldr	r2, [pc, #152]	; (80074a0 <xPortStartScheduler+0xd8>)
 8007406:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	b2db      	uxtb	r3, r3
 8007410:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741a:	2b80      	cmp	r3, #128	; 0x80
 800741c:	d0ef      	beq.n	80073fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800741e:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <xPortStartScheduler+0xd8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1c3 0307 	rsb	r3, r3, #7
 8007426:	2b04      	cmp	r3, #4
 8007428:	d00a      	beq.n	8007440 <xPortStartScheduler+0x78>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	60bb      	str	r3, [r7, #8]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007440:	4b17      	ldr	r3, [pc, #92]	; (80074a0 <xPortStartScheduler+0xd8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <xPortStartScheduler+0xd8>)
 8007448:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800744a:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <xPortStartScheduler+0xd8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007452:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <xPortStartScheduler+0xd8>)
 8007454:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800745e:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <xPortStartScheduler+0xdc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a10      	ldr	r2, [pc, #64]	; (80074a4 <xPortStartScheduler+0xdc>)
 8007464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007468:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800746a:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <xPortStartScheduler+0xdc>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a0d      	ldr	r2, [pc, #52]	; (80074a4 <xPortStartScheduler+0xdc>)
 8007470:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007474:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007476:	f000 f8b9 	bl	80075ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800747a:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <xPortStartScheduler+0xe0>)
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007480:	f7ff ff92 	bl	80073a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007484:	f7ff f8b6 	bl	80065f4 <vTaskSwitchContext>
	prvTaskExitError();
 8007488:	f7ff ff4c 	bl	8007324 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	e000e400 	.word	0xe000e400
 800749c:	20000fdc 	.word	0x20000fdc
 80074a0:	20000fe0 	.word	0x20000fe0
 80074a4:	e000ed20 	.word	0xe000ed20
 80074a8:	20000014 	.word	0x20000014

080074ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	607b      	str	r3, [r7, #4]
}
 80074c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <vPortEnterCritical+0x58>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3301      	adds	r3, #1
 80074cc:	4a0d      	ldr	r2, [pc, #52]	; (8007504 <vPortEnterCritical+0x58>)
 80074ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074d0:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <vPortEnterCritical+0x58>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d10f      	bne.n	80074f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074d8:	4b0b      	ldr	r3, [pc, #44]	; (8007508 <vPortEnterCritical+0x5c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	603b      	str	r3, [r7, #0]
}
 80074f4:	bf00      	nop
 80074f6:	e7fe      	b.n	80074f6 <vPortEnterCritical+0x4a>
	}
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000014 	.word	0x20000014
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007512:	4b11      	ldr	r3, [pc, #68]	; (8007558 <vPortExitCritical+0x4c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10a      	bne.n	8007530 <vPortExitCritical+0x24>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	607b      	str	r3, [r7, #4]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007530:	4b09      	ldr	r3, [pc, #36]	; (8007558 <vPortExitCritical+0x4c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3b01      	subs	r3, #1
 8007536:	4a08      	ldr	r2, [pc, #32]	; (8007558 <vPortExitCritical+0x4c>)
 8007538:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <vPortExitCritical+0x4c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d105      	bne.n	800754e <vPortExitCritical+0x42>
 8007542:	2300      	movs	r3, #0
 8007544:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f383 8811 	msr	BASEPRI, r3
}
 800754c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr
 8007558:	20000014 	.word	0x20000014
 800755c:	00000000 	.word	0x00000000

08007560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007560:	f3ef 8009 	mrs	r0, PSP
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <pxCurrentTCBConst>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007570:	6010      	str	r0, [r2, #0]
 8007572:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007576:	f04f 0050 	mov.w	r0, #80	; 0x50
 800757a:	f380 8811 	msr	BASEPRI, r0
 800757e:	f7ff f839 	bl	80065f4 <vTaskSwitchContext>
 8007582:	f04f 0000 	mov.w	r0, #0
 8007586:	f380 8811 	msr	BASEPRI, r0
 800758a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800758e:	6819      	ldr	r1, [r3, #0]
 8007590:	6808      	ldr	r0, [r1, #0]
 8007592:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007596:	f380 8809 	msr	PSP, r0
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	4770      	bx	lr

080075a0 <pxCurrentTCBConst>:
 80075a0:	200009b0 	.word	0x200009b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop

080075a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075c2:	f7fe ff59 	bl	8006478 <xTaskIncrementTick>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <SysTick_Handler+0x40>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	2300      	movs	r3, #0
 80075d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f383 8811 	msr	BASEPRI, r3
}
 80075de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <vPortSetupTimerInterrupt+0x30>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075f6:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <vPortSetupTimerInterrupt+0x34>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075fc:	4b09      	ldr	r3, [pc, #36]	; (8007624 <vPortSetupTimerInterrupt+0x38>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a09      	ldr	r2, [pc, #36]	; (8007628 <vPortSetupTimerInterrupt+0x3c>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	099b      	lsrs	r3, r3, #6
 8007608:	4a08      	ldr	r2, [pc, #32]	; (800762c <vPortSetupTimerInterrupt+0x40>)
 800760a:	3b01      	subs	r3, #1
 800760c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <vPortSetupTimerInterrupt+0x30>)
 8007610:	2207      	movs	r2, #7
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr
 800761c:	e000e010 	.word	0xe000e010
 8007620:	e000e018 	.word	0xe000e018
 8007624:	20000008 	.word	0x20000008
 8007628:	10624dd3 	.word	0x10624dd3
 800762c:	e000e014 	.word	0xe000e014

08007630 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007636:	f3ef 8305 	mrs	r3, IPSR
 800763a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b0f      	cmp	r3, #15
 8007640:	d914      	bls.n	800766c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007642:	4a16      	ldr	r2, [pc, #88]	; (800769c <vPortValidateInterruptPriority+0x6c>)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800764c:	4b14      	ldr	r3, [pc, #80]	; (80076a0 <vPortValidateInterruptPriority+0x70>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	7afa      	ldrb	r2, [r7, #11]
 8007652:	429a      	cmp	r2, r3
 8007654:	d20a      	bcs.n	800766c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	607b      	str	r3, [r7, #4]
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800766c:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <vPortValidateInterruptPriority+0x74>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007674:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <vPortValidateInterruptPriority+0x78>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d90a      	bls.n	8007692 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	603b      	str	r3, [r7, #0]
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <vPortValidateInterruptPriority+0x60>
	}
 8007692:	bf00      	nop
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr
 800769c:	e000e3f0 	.word	0xe000e3f0
 80076a0:	20000fdc 	.word	0x20000fdc
 80076a4:	e000ed0c 	.word	0xe000ed0c
 80076a8:	20000fe0 	.word	0x20000fe0

080076ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	; 0x28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076b8:	f7fe fe24 	bl	8006304 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076bc:	4b58      	ldr	r3, [pc, #352]	; (8007820 <pvPortMalloc+0x174>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076c4:	f000 f910 	bl	80078e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076c8:	4b56      	ldr	r3, [pc, #344]	; (8007824 <pvPortMalloc+0x178>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4013      	ands	r3, r2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f040 808e 	bne.w	80077f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01d      	beq.n	8007718 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076dc:	2208      	movs	r2, #8
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4413      	add	r3, r2
 80076e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d014      	beq.n	8007718 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f023 0307 	bic.w	r3, r3, #7
 80076f4:	3308      	adds	r3, #8
 80076f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <pvPortMalloc+0x6c>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	617b      	str	r3, [r7, #20]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d069      	beq.n	80077f2 <pvPortMalloc+0x146>
 800771e:	4b42      	ldr	r3, [pc, #264]	; (8007828 <pvPortMalloc+0x17c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	429a      	cmp	r2, r3
 8007726:	d864      	bhi.n	80077f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007728:	4b40      	ldr	r3, [pc, #256]	; (800782c <pvPortMalloc+0x180>)
 800772a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800772c:	4b3f      	ldr	r3, [pc, #252]	; (800782c <pvPortMalloc+0x180>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007732:	e004      	b.n	800773e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d903      	bls.n	8007750 <pvPortMalloc+0xa4>
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f1      	bne.n	8007734 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007750:	4b33      	ldr	r3, [pc, #204]	; (8007820 <pvPortMalloc+0x174>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007756:	429a      	cmp	r2, r3
 8007758:	d04b      	beq.n	80077f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2208      	movs	r2, #8
 8007760:	4413      	add	r3, r2
 8007762:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	1ad2      	subs	r2, r2, r3
 8007774:	2308      	movs	r3, #8
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	429a      	cmp	r2, r3
 800777a:	d91f      	bls.n	80077bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800777c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4413      	add	r3, r2
 8007782:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <pvPortMalloc+0xf8>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	613b      	str	r3, [r7, #16]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	1ad2      	subs	r2, r2, r3
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077b6:	69b8      	ldr	r0, [r7, #24]
 80077b8:	f000 f8f8 	bl	80079ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077bc:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <pvPortMalloc+0x17c>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	4a18      	ldr	r2, [pc, #96]	; (8007828 <pvPortMalloc+0x17c>)
 80077c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077ca:	4b17      	ldr	r3, [pc, #92]	; (8007828 <pvPortMalloc+0x17c>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	4b18      	ldr	r3, [pc, #96]	; (8007830 <pvPortMalloc+0x184>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d203      	bcs.n	80077de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <pvPortMalloc+0x17c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a15      	ldr	r2, [pc, #84]	; (8007830 <pvPortMalloc+0x184>)
 80077dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	4b10      	ldr	r3, [pc, #64]	; (8007824 <pvPortMalloc+0x178>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	431a      	orrs	r2, r3
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077f2:	f7fe fd95 	bl	8006320 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <pvPortMalloc+0x16a>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60fb      	str	r3, [r7, #12]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <pvPortMalloc+0x168>
	return pvReturn;
 8007816:	69fb      	ldr	r3, [r7, #28]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3728      	adds	r7, #40	; 0x28
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20001bec 	.word	0x20001bec
 8007824:	20001bf8 	.word	0x20001bf8
 8007828:	20001bf0 	.word	0x20001bf0
 800782c:	20001be4 	.word	0x20001be4
 8007830:	20001bf4 	.word	0x20001bf4

08007834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d048      	beq.n	80078d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007846:	2308      	movs	r3, #8
 8007848:	425b      	negs	r3, r3
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	4413      	add	r3, r2
 800784e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	4b21      	ldr	r3, [pc, #132]	; (80078e0 <vPortFree+0xac>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4013      	ands	r3, r2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <vPortFree+0x44>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	60fb      	str	r3, [r7, #12]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <vPortFree+0x62>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	60bb      	str	r3, [r7, #8]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	4b11      	ldr	r3, [pc, #68]	; (80078e0 <vPortFree+0xac>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4013      	ands	r3, r2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d019      	beq.n	80078d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d115      	bne.n	80078d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <vPortFree+0xac>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	43db      	mvns	r3, r3
 80078b6:	401a      	ands	r2, r3
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078bc:	f7fe fd22 	bl	8006304 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <vPortFree+0xb0>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4413      	add	r3, r2
 80078ca:	4a06      	ldr	r2, [pc, #24]	; (80078e4 <vPortFree+0xb0>)
 80078cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078ce:	6938      	ldr	r0, [r7, #16]
 80078d0:	f000 f86c 	bl	80079ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80078d4:	f7fe fd24 	bl	8006320 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078d8:	bf00      	nop
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20001bf8 	.word	0x20001bf8
 80078e4:	20001bf0 	.word	0x20001bf0

080078e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80078f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078f4:	4b27      	ldr	r3, [pc, #156]	; (8007994 <prvHeapInit+0xac>)
 80078f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00c      	beq.n	800791c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3307      	adds	r3, #7
 8007906:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	4a1f      	ldr	r2, [pc, #124]	; (8007994 <prvHeapInit+0xac>)
 8007918:	4413      	add	r3, r2
 800791a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007920:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <prvHeapInit+0xb0>)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007926:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <prvHeapInit+0xb0>)
 8007928:	2200      	movs	r2, #0
 800792a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	4413      	add	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007934:	2208      	movs	r2, #8
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	1a9b      	subs	r3, r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0307 	bic.w	r3, r3, #7
 8007942:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4a15      	ldr	r2, [pc, #84]	; (800799c <prvHeapInit+0xb4>)
 8007948:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800794a:	4b14      	ldr	r3, [pc, #80]	; (800799c <prvHeapInit+0xb4>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2200      	movs	r2, #0
 8007950:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007952:	4b12      	ldr	r3, [pc, #72]	; (800799c <prvHeapInit+0xb4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	1ad2      	subs	r2, r2, r3
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <prvHeapInit+0xb4>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4a0a      	ldr	r2, [pc, #40]	; (80079a0 <prvHeapInit+0xb8>)
 8007976:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4a09      	ldr	r2, [pc, #36]	; (80079a4 <prvHeapInit+0xbc>)
 800797e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007980:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <prvHeapInit+0xc0>)
 8007982:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007986:	601a      	str	r2, [r3, #0]
}
 8007988:	bf00      	nop
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20000fe4 	.word	0x20000fe4
 8007998:	20001be4 	.word	0x20001be4
 800799c:	20001bec 	.word	0x20001bec
 80079a0:	20001bf4 	.word	0x20001bf4
 80079a4:	20001bf0 	.word	0x20001bf0
 80079a8:	20001bf8 	.word	0x20001bf8

080079ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079b4:	4b27      	ldr	r3, [pc, #156]	; (8007a54 <prvInsertBlockIntoFreeList+0xa8>)
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	e002      	b.n	80079c0 <prvInsertBlockIntoFreeList+0x14>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d8f7      	bhi.n	80079ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	4413      	add	r3, r2
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d108      	bne.n	80079ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	441a      	add	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	441a      	add	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d118      	bne.n	8007a34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <prvInsertBlockIntoFreeList+0xac>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d00d      	beq.n	8007a2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	441a      	add	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	e008      	b.n	8007a3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <prvInsertBlockIntoFreeList+0xac>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	e003      	b.n	8007a3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d002      	beq.n	8007a4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a4a:	bf00      	nop
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bc80      	pop	{r7}
 8007a52:	4770      	bx	lr
 8007a54:	20001be4 	.word	0x20001be4
 8007a58:	20001bec 	.word	0x20001bec

08007a5c <__errno>:
 8007a5c:	4b01      	ldr	r3, [pc, #4]	; (8007a64 <__errno+0x8>)
 8007a5e:	6818      	ldr	r0, [r3, #0]
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20000018 	.word	0x20000018

08007a68 <std>:
 8007a68:	2300      	movs	r3, #0
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a76:	6083      	str	r3, [r0, #8]
 8007a78:	8181      	strh	r1, [r0, #12]
 8007a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a7c:	81c2      	strh	r2, [r0, #14]
 8007a7e:	6183      	str	r3, [r0, #24]
 8007a80:	4619      	mov	r1, r3
 8007a82:	2208      	movs	r2, #8
 8007a84:	305c      	adds	r0, #92	; 0x5c
 8007a86:	f000 f91a 	bl	8007cbe <memset>
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <std+0x38>)
 8007a8c:	6224      	str	r4, [r4, #32]
 8007a8e:	6263      	str	r3, [r4, #36]	; 0x24
 8007a90:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <std+0x3c>)
 8007a92:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a94:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <std+0x40>)
 8007a96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a98:	4b04      	ldr	r3, [pc, #16]	; (8007aac <std+0x44>)
 8007a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08008769 	.word	0x08008769
 8007aa4:	0800878b 	.word	0x0800878b
 8007aa8:	080087c3 	.word	0x080087c3
 8007aac:	080087e7 	.word	0x080087e7

08007ab0 <_cleanup_r>:
 8007ab0:	4901      	ldr	r1, [pc, #4]	; (8007ab8 <_cleanup_r+0x8>)
 8007ab2:	f000 b8af 	b.w	8007c14 <_fwalk_reent>
 8007ab6:	bf00      	nop
 8007ab8:	08009639 	.word	0x08009639

08007abc <__sfmoreglue>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	2568      	movs	r5, #104	; 0x68
 8007ac0:	1e4a      	subs	r2, r1, #1
 8007ac2:	4355      	muls	r5, r2
 8007ac4:	460e      	mov	r6, r1
 8007ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007aca:	f000 f901 	bl	8007cd0 <_malloc_r>
 8007ace:	4604      	mov	r4, r0
 8007ad0:	b140      	cbz	r0, 8007ae4 <__sfmoreglue+0x28>
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ad8:	300c      	adds	r0, #12
 8007ada:	60a0      	str	r0, [r4, #8]
 8007adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ae0:	f000 f8ed 	bl	8007cbe <memset>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}

08007ae8 <__sfp_lock_acquire>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__sfp_lock_acquire+0x8>)
 8007aea:	f000 b8d8 	b.w	8007c9e <__retarget_lock_acquire_recursive>
 8007aee:	bf00      	nop
 8007af0:	20001da8 	.word	0x20001da8

08007af4 <__sfp_lock_release>:
 8007af4:	4801      	ldr	r0, [pc, #4]	; (8007afc <__sfp_lock_release+0x8>)
 8007af6:	f000 b8d3 	b.w	8007ca0 <__retarget_lock_release_recursive>
 8007afa:	bf00      	nop
 8007afc:	20001da8 	.word	0x20001da8

08007b00 <__sinit_lock_acquire>:
 8007b00:	4801      	ldr	r0, [pc, #4]	; (8007b08 <__sinit_lock_acquire+0x8>)
 8007b02:	f000 b8cc 	b.w	8007c9e <__retarget_lock_acquire_recursive>
 8007b06:	bf00      	nop
 8007b08:	20001da3 	.word	0x20001da3

08007b0c <__sinit_lock_release>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	; (8007b14 <__sinit_lock_release+0x8>)
 8007b0e:	f000 b8c7 	b.w	8007ca0 <__retarget_lock_release_recursive>
 8007b12:	bf00      	nop
 8007b14:	20001da3 	.word	0x20001da3

08007b18 <__sinit>:
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	f7ff fff0 	bl	8007b00 <__sinit_lock_acquire>
 8007b20:	69a3      	ldr	r3, [r4, #24]
 8007b22:	b11b      	cbz	r3, 8007b2c <__sinit+0x14>
 8007b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b28:	f7ff bff0 	b.w	8007b0c <__sinit_lock_release>
 8007b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b30:	6523      	str	r3, [r4, #80]	; 0x50
 8007b32:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <__sinit+0x68>)
 8007b34:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <__sinit+0x6c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	bf08      	it	eq
 8007b3e:	2301      	moveq	r3, #1
 8007b40:	4620      	mov	r0, r4
 8007b42:	bf08      	it	eq
 8007b44:	61a3      	streq	r3, [r4, #24]
 8007b46:	f000 f81f 	bl	8007b88 <__sfp>
 8007b4a:	6060      	str	r0, [r4, #4]
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 f81b 	bl	8007b88 <__sfp>
 8007b52:	60a0      	str	r0, [r4, #8]
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 f817 	bl	8007b88 <__sfp>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2104      	movs	r1, #4
 8007b5e:	60e0      	str	r0, [r4, #12]
 8007b60:	6860      	ldr	r0, [r4, #4]
 8007b62:	f7ff ff81 	bl	8007a68 <std>
 8007b66:	2201      	movs	r2, #1
 8007b68:	2109      	movs	r1, #9
 8007b6a:	68a0      	ldr	r0, [r4, #8]
 8007b6c:	f7ff ff7c 	bl	8007a68 <std>
 8007b70:	2202      	movs	r2, #2
 8007b72:	2112      	movs	r1, #18
 8007b74:	68e0      	ldr	r0, [r4, #12]
 8007b76:	f7ff ff77 	bl	8007a68 <std>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	61a3      	str	r3, [r4, #24]
 8007b7e:	e7d1      	b.n	8007b24 <__sinit+0xc>
 8007b80:	0800a6e0 	.word	0x0800a6e0
 8007b84:	08007ab1 	.word	0x08007ab1

08007b88 <__sfp>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	4607      	mov	r7, r0
 8007b8c:	f7ff ffac 	bl	8007ae8 <__sfp_lock_acquire>
 8007b90:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <__sfp+0x84>)
 8007b92:	681e      	ldr	r6, [r3, #0]
 8007b94:	69b3      	ldr	r3, [r6, #24]
 8007b96:	b913      	cbnz	r3, 8007b9e <__sfp+0x16>
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff ffbd 	bl	8007b18 <__sinit>
 8007b9e:	3648      	adds	r6, #72	; 0x48
 8007ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	d503      	bpl.n	8007bb0 <__sfp+0x28>
 8007ba8:	6833      	ldr	r3, [r6, #0]
 8007baa:	b30b      	cbz	r3, 8007bf0 <__sfp+0x68>
 8007bac:	6836      	ldr	r6, [r6, #0]
 8007bae:	e7f7      	b.n	8007ba0 <__sfp+0x18>
 8007bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bb4:	b9d5      	cbnz	r5, 8007bec <__sfp+0x64>
 8007bb6:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <__sfp+0x88>)
 8007bb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bbc:	60e3      	str	r3, [r4, #12]
 8007bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8007bc0:	f000 f86c 	bl	8007c9c <__retarget_lock_init_recursive>
 8007bc4:	f7ff ff96 	bl	8007af4 <__sfp_lock_release>
 8007bc8:	2208      	movs	r2, #8
 8007bca:	4629      	mov	r1, r5
 8007bcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bd4:	6025      	str	r5, [r4, #0]
 8007bd6:	61a5      	str	r5, [r4, #24]
 8007bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bdc:	f000 f86f 	bl	8007cbe <memset>
 8007be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007be8:	4620      	mov	r0, r4
 8007bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bec:	3468      	adds	r4, #104	; 0x68
 8007bee:	e7d9      	b.n	8007ba4 <__sfp+0x1c>
 8007bf0:	2104      	movs	r1, #4
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f7ff ff62 	bl	8007abc <__sfmoreglue>
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	6030      	str	r0, [r6, #0]
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d1d5      	bne.n	8007bac <__sfp+0x24>
 8007c00:	f7ff ff78 	bl	8007af4 <__sfp_lock_release>
 8007c04:	230c      	movs	r3, #12
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	e7ee      	b.n	8007be8 <__sfp+0x60>
 8007c0a:	bf00      	nop
 8007c0c:	0800a6e0 	.word	0x0800a6e0
 8007c10:	ffff0001 	.word	0xffff0001

08007c14 <_fwalk_reent>:
 8007c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c18:	4606      	mov	r6, r0
 8007c1a:	4688      	mov	r8, r1
 8007c1c:	2700      	movs	r7, #0
 8007c1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c26:	f1b9 0901 	subs.w	r9, r9, #1
 8007c2a:	d505      	bpl.n	8007c38 <_fwalk_reent+0x24>
 8007c2c:	6824      	ldr	r4, [r4, #0]
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d1f7      	bne.n	8007c22 <_fwalk_reent+0xe>
 8007c32:	4638      	mov	r0, r7
 8007c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c38:	89ab      	ldrh	r3, [r5, #12]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d907      	bls.n	8007c4e <_fwalk_reent+0x3a>
 8007c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c42:	3301      	adds	r3, #1
 8007c44:	d003      	beq.n	8007c4e <_fwalk_reent+0x3a>
 8007c46:	4629      	mov	r1, r5
 8007c48:	4630      	mov	r0, r6
 8007c4a:	47c0      	blx	r8
 8007c4c:	4307      	orrs	r7, r0
 8007c4e:	3568      	adds	r5, #104	; 0x68
 8007c50:	e7e9      	b.n	8007c26 <_fwalk_reent+0x12>
	...

08007c54 <__libc_init_array>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	2600      	movs	r6, #0
 8007c58:	4d0c      	ldr	r5, [pc, #48]	; (8007c8c <__libc_init_array+0x38>)
 8007c5a:	4c0d      	ldr	r4, [pc, #52]	; (8007c90 <__libc_init_array+0x3c>)
 8007c5c:	1b64      	subs	r4, r4, r5
 8007c5e:	10a4      	asrs	r4, r4, #2
 8007c60:	42a6      	cmp	r6, r4
 8007c62:	d109      	bne.n	8007c78 <__libc_init_array+0x24>
 8007c64:	f002 fc82 	bl	800a56c <_init>
 8007c68:	2600      	movs	r6, #0
 8007c6a:	4d0a      	ldr	r5, [pc, #40]	; (8007c94 <__libc_init_array+0x40>)
 8007c6c:	4c0a      	ldr	r4, [pc, #40]	; (8007c98 <__libc_init_array+0x44>)
 8007c6e:	1b64      	subs	r4, r4, r5
 8007c70:	10a4      	asrs	r4, r4, #2
 8007c72:	42a6      	cmp	r6, r4
 8007c74:	d105      	bne.n	8007c82 <__libc_init_array+0x2e>
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7c:	4798      	blx	r3
 8007c7e:	3601      	adds	r6, #1
 8007c80:	e7ee      	b.n	8007c60 <__libc_init_array+0xc>
 8007c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c86:	4798      	blx	r3
 8007c88:	3601      	adds	r6, #1
 8007c8a:	e7f2      	b.n	8007c72 <__libc_init_array+0x1e>
 8007c8c:	0800aa64 	.word	0x0800aa64
 8007c90:	0800aa64 	.word	0x0800aa64
 8007c94:	0800aa64 	.word	0x0800aa64
 8007c98:	0800aa68 	.word	0x0800aa68

08007c9c <__retarget_lock_init_recursive>:
 8007c9c:	4770      	bx	lr

08007c9e <__retarget_lock_acquire_recursive>:
 8007c9e:	4770      	bx	lr

08007ca0 <__retarget_lock_release_recursive>:
 8007ca0:	4770      	bx	lr

08007ca2 <memcpy>:
 8007ca2:	440a      	add	r2, r1
 8007ca4:	4291      	cmp	r1, r2
 8007ca6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007caa:	d100      	bne.n	8007cae <memcpy+0xc>
 8007cac:	4770      	bx	lr
 8007cae:	b510      	push	{r4, lr}
 8007cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cb4:	4291      	cmp	r1, r2
 8007cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cba:	d1f9      	bne.n	8007cb0 <memcpy+0xe>
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <memset>:
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4402      	add	r2, r0
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d100      	bne.n	8007cc8 <memset+0xa>
 8007cc6:	4770      	bx	lr
 8007cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8007ccc:	e7f9      	b.n	8007cc2 <memset+0x4>
	...

08007cd0 <_malloc_r>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	1ccd      	adds	r5, r1, #3
 8007cd4:	f025 0503 	bic.w	r5, r5, #3
 8007cd8:	3508      	adds	r5, #8
 8007cda:	2d0c      	cmp	r5, #12
 8007cdc:	bf38      	it	cc
 8007cde:	250c      	movcc	r5, #12
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	db01      	blt.n	8007cea <_malloc_r+0x1a>
 8007ce6:	42a9      	cmp	r1, r5
 8007ce8:	d903      	bls.n	8007cf2 <_malloc_r+0x22>
 8007cea:	230c      	movs	r3, #12
 8007cec:	6033      	str	r3, [r6, #0]
 8007cee:	2000      	movs	r0, #0
 8007cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf2:	f001 fd09 	bl	8009708 <__malloc_lock>
 8007cf6:	4921      	ldr	r1, [pc, #132]	; (8007d7c <_malloc_r+0xac>)
 8007cf8:	680a      	ldr	r2, [r1, #0]
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	b99c      	cbnz	r4, 8007d26 <_malloc_r+0x56>
 8007cfe:	4f20      	ldr	r7, [pc, #128]	; (8007d80 <_malloc_r+0xb0>)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	b923      	cbnz	r3, 8007d0e <_malloc_r+0x3e>
 8007d04:	4621      	mov	r1, r4
 8007d06:	4630      	mov	r0, r6
 8007d08:	f000 fd1e 	bl	8008748 <_sbrk_r>
 8007d0c:	6038      	str	r0, [r7, #0]
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4630      	mov	r0, r6
 8007d12:	f000 fd19 	bl	8008748 <_sbrk_r>
 8007d16:	1c43      	adds	r3, r0, #1
 8007d18:	d123      	bne.n	8007d62 <_malloc_r+0x92>
 8007d1a:	230c      	movs	r3, #12
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	6033      	str	r3, [r6, #0]
 8007d20:	f001 fcf8 	bl	8009714 <__malloc_unlock>
 8007d24:	e7e3      	b.n	8007cee <_malloc_r+0x1e>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	1b5b      	subs	r3, r3, r5
 8007d2a:	d417      	bmi.n	8007d5c <_malloc_r+0x8c>
 8007d2c:	2b0b      	cmp	r3, #11
 8007d2e:	d903      	bls.n	8007d38 <_malloc_r+0x68>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	441c      	add	r4, r3
 8007d34:	6025      	str	r5, [r4, #0]
 8007d36:	e004      	b.n	8007d42 <_malloc_r+0x72>
 8007d38:	6863      	ldr	r3, [r4, #4]
 8007d3a:	42a2      	cmp	r2, r4
 8007d3c:	bf0c      	ite	eq
 8007d3e:	600b      	streq	r3, [r1, #0]
 8007d40:	6053      	strne	r3, [r2, #4]
 8007d42:	4630      	mov	r0, r6
 8007d44:	f001 fce6 	bl	8009714 <__malloc_unlock>
 8007d48:	f104 000b 	add.w	r0, r4, #11
 8007d4c:	1d23      	adds	r3, r4, #4
 8007d4e:	f020 0007 	bic.w	r0, r0, #7
 8007d52:	1ac2      	subs	r2, r0, r3
 8007d54:	d0cc      	beq.n	8007cf0 <_malloc_r+0x20>
 8007d56:	1a1b      	subs	r3, r3, r0
 8007d58:	50a3      	str	r3, [r4, r2]
 8007d5a:	e7c9      	b.n	8007cf0 <_malloc_r+0x20>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	6864      	ldr	r4, [r4, #4]
 8007d60:	e7cc      	b.n	8007cfc <_malloc_r+0x2c>
 8007d62:	1cc4      	adds	r4, r0, #3
 8007d64:	f024 0403 	bic.w	r4, r4, #3
 8007d68:	42a0      	cmp	r0, r4
 8007d6a:	d0e3      	beq.n	8007d34 <_malloc_r+0x64>
 8007d6c:	1a21      	subs	r1, r4, r0
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f000 fcea 	bl	8008748 <_sbrk_r>
 8007d74:	3001      	adds	r0, #1
 8007d76:	d1dd      	bne.n	8007d34 <_malloc_r+0x64>
 8007d78:	e7cf      	b.n	8007d1a <_malloc_r+0x4a>
 8007d7a:	bf00      	nop
 8007d7c:	20001bfc 	.word	0x20001bfc
 8007d80:	20001c00 	.word	0x20001c00

08007d84 <__cvt>:
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d8a:	461f      	mov	r7, r3
 8007d8c:	bfbb      	ittet	lt
 8007d8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007d92:	461f      	movlt	r7, r3
 8007d94:	2300      	movge	r3, #0
 8007d96:	232d      	movlt	r3, #45	; 0x2d
 8007d98:	b088      	sub	sp, #32
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007da0:	7013      	strb	r3, [r2, #0]
 8007da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007da4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007da8:	f023 0820 	bic.w	r8, r3, #32
 8007dac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007db0:	d005      	beq.n	8007dbe <__cvt+0x3a>
 8007db2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007db6:	d100      	bne.n	8007dba <__cvt+0x36>
 8007db8:	3501      	adds	r5, #1
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e000      	b.n	8007dc0 <__cvt+0x3c>
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	aa07      	add	r2, sp, #28
 8007dc2:	9204      	str	r2, [sp, #16]
 8007dc4:	aa06      	add	r2, sp, #24
 8007dc6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007dca:	e9cd 3500 	strd	r3, r5, [sp]
 8007dce:	4622      	mov	r2, r4
 8007dd0:	463b      	mov	r3, r7
 8007dd2:	f000 fdbd 	bl	8008950 <_dtoa_r>
 8007dd6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dda:	4606      	mov	r6, r0
 8007ddc:	d102      	bne.n	8007de4 <__cvt+0x60>
 8007dde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007de0:	07db      	lsls	r3, r3, #31
 8007de2:	d522      	bpl.n	8007e2a <__cvt+0xa6>
 8007de4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007de8:	eb06 0905 	add.w	r9, r6, r5
 8007dec:	d110      	bne.n	8007e10 <__cvt+0x8c>
 8007dee:	7833      	ldrb	r3, [r6, #0]
 8007df0:	2b30      	cmp	r3, #48	; 0x30
 8007df2:	d10a      	bne.n	8007e0a <__cvt+0x86>
 8007df4:	2200      	movs	r2, #0
 8007df6:	2300      	movs	r3, #0
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	f7f8 fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8007e00:	b918      	cbnz	r0, 8007e0a <__cvt+0x86>
 8007e02:	f1c5 0501 	rsb	r5, r5, #1
 8007e06:	f8ca 5000 	str.w	r5, [sl]
 8007e0a:	f8da 3000 	ldr.w	r3, [sl]
 8007e0e:	4499      	add	r9, r3
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	4620      	mov	r0, r4
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fdc6 	bl	80009a8 <__aeabi_dcmpeq>
 8007e1c:	b108      	cbz	r0, 8007e22 <__cvt+0x9e>
 8007e1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e22:	2230      	movs	r2, #48	; 0x30
 8007e24:	9b07      	ldr	r3, [sp, #28]
 8007e26:	454b      	cmp	r3, r9
 8007e28:	d307      	bcc.n	8007e3a <__cvt+0xb6>
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	9b07      	ldr	r3, [sp, #28]
 8007e2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e30:	1b9b      	subs	r3, r3, r6
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	b008      	add	sp, #32
 8007e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3a:	1c59      	adds	r1, r3, #1
 8007e3c:	9107      	str	r1, [sp, #28]
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	e7f0      	b.n	8007e24 <__cvt+0xa0>

08007e42 <__exponent>:
 8007e42:	4603      	mov	r3, r0
 8007e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e46:	2900      	cmp	r1, #0
 8007e48:	f803 2b02 	strb.w	r2, [r3], #2
 8007e4c:	bfb6      	itet	lt
 8007e4e:	222d      	movlt	r2, #45	; 0x2d
 8007e50:	222b      	movge	r2, #43	; 0x2b
 8007e52:	4249      	neglt	r1, r1
 8007e54:	2909      	cmp	r1, #9
 8007e56:	7042      	strb	r2, [r0, #1]
 8007e58:	dd2b      	ble.n	8007eb2 <__exponent+0x70>
 8007e5a:	f10d 0407 	add.w	r4, sp, #7
 8007e5e:	46a4      	mov	ip, r4
 8007e60:	270a      	movs	r7, #10
 8007e62:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e66:	460a      	mov	r2, r1
 8007e68:	46a6      	mov	lr, r4
 8007e6a:	fb07 1516 	mls	r5, r7, r6, r1
 8007e6e:	2a63      	cmp	r2, #99	; 0x63
 8007e70:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007e74:	4631      	mov	r1, r6
 8007e76:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007e7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e7e:	dcf0      	bgt.n	8007e62 <__exponent+0x20>
 8007e80:	3130      	adds	r1, #48	; 0x30
 8007e82:	f1ae 0502 	sub.w	r5, lr, #2
 8007e86:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	1c44      	adds	r4, r0, #1
 8007e8e:	4561      	cmp	r1, ip
 8007e90:	d30a      	bcc.n	8007ea8 <__exponent+0x66>
 8007e92:	f10d 0209 	add.w	r2, sp, #9
 8007e96:	eba2 020e 	sub.w	r2, r2, lr
 8007e9a:	4565      	cmp	r5, ip
 8007e9c:	bf88      	it	hi
 8007e9e:	2200      	movhi	r2, #0
 8007ea0:	4413      	add	r3, r2
 8007ea2:	1a18      	subs	r0, r3, r0
 8007ea4:	b003      	add	sp, #12
 8007ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eac:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007eb0:	e7ed      	b.n	8007e8e <__exponent+0x4c>
 8007eb2:	2330      	movs	r3, #48	; 0x30
 8007eb4:	3130      	adds	r1, #48	; 0x30
 8007eb6:	7083      	strb	r3, [r0, #2]
 8007eb8:	70c1      	strb	r1, [r0, #3]
 8007eba:	1d03      	adds	r3, r0, #4
 8007ebc:	e7f1      	b.n	8007ea2 <__exponent+0x60>
	...

08007ec0 <_printf_float>:
 8007ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	b091      	sub	sp, #68	; 0x44
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007ecc:	4616      	mov	r6, r2
 8007ece:	461f      	mov	r7, r3
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	f001 fbed 	bl	80096b0 <_localeconv_r>
 8007ed6:	6803      	ldr	r3, [r0, #0]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	9309      	str	r3, [sp, #36]	; 0x24
 8007edc:	f7f8 f938 	bl	8000150 <strlen>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	930e      	str	r3, [sp, #56]	; 0x38
 8007ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee8:	900a      	str	r0, [sp, #40]	; 0x28
 8007eea:	3307      	adds	r3, #7
 8007eec:	f023 0307 	bic.w	r3, r3, #7
 8007ef0:	f103 0208 	add.w	r2, r3, #8
 8007ef4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007ef8:	f8d4 b000 	ldr.w	fp, [r4]
 8007efc:	f8c8 2000 	str.w	r2, [r8]
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f08:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007f0c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007f10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f16:	4640      	mov	r0, r8
 8007f18:	4b9c      	ldr	r3, [pc, #624]	; (800818c <_printf_float+0x2cc>)
 8007f1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f1c:	f7f8 fd76 	bl	8000a0c <__aeabi_dcmpun>
 8007f20:	bb70      	cbnz	r0, 8007f80 <_printf_float+0xc0>
 8007f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f26:	4640      	mov	r0, r8
 8007f28:	4b98      	ldr	r3, [pc, #608]	; (800818c <_printf_float+0x2cc>)
 8007f2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f2c:	f7f8 fd50 	bl	80009d0 <__aeabi_dcmple>
 8007f30:	bb30      	cbnz	r0, 8007f80 <_printf_float+0xc0>
 8007f32:	2200      	movs	r2, #0
 8007f34:	2300      	movs	r3, #0
 8007f36:	4640      	mov	r0, r8
 8007f38:	4651      	mov	r1, sl
 8007f3a:	f7f8 fd3f 	bl	80009bc <__aeabi_dcmplt>
 8007f3e:	b110      	cbz	r0, 8007f46 <_printf_float+0x86>
 8007f40:	232d      	movs	r3, #45	; 0x2d
 8007f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f46:	4b92      	ldr	r3, [pc, #584]	; (8008190 <_printf_float+0x2d0>)
 8007f48:	4892      	ldr	r0, [pc, #584]	; (8008194 <_printf_float+0x2d4>)
 8007f4a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007f4e:	bf94      	ite	ls
 8007f50:	4698      	movls	r8, r3
 8007f52:	4680      	movhi	r8, r0
 8007f54:	2303      	movs	r3, #3
 8007f56:	f04f 0a00 	mov.w	sl, #0
 8007f5a:	6123      	str	r3, [r4, #16]
 8007f5c:	f02b 0304 	bic.w	r3, fp, #4
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	4633      	mov	r3, r6
 8007f64:	4621      	mov	r1, r4
 8007f66:	4628      	mov	r0, r5
 8007f68:	9700      	str	r7, [sp, #0]
 8007f6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8007f6c:	f000 f9d4 	bl	8008318 <_printf_common>
 8007f70:	3001      	adds	r0, #1
 8007f72:	f040 8090 	bne.w	8008096 <_printf_float+0x1d6>
 8007f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f7a:	b011      	add	sp, #68	; 0x44
 8007f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	4642      	mov	r2, r8
 8007f82:	4653      	mov	r3, sl
 8007f84:	4640      	mov	r0, r8
 8007f86:	4651      	mov	r1, sl
 8007f88:	f7f8 fd40 	bl	8000a0c <__aeabi_dcmpun>
 8007f8c:	b148      	cbz	r0, 8007fa2 <_printf_float+0xe2>
 8007f8e:	f1ba 0f00 	cmp.w	sl, #0
 8007f92:	bfb8      	it	lt
 8007f94:	232d      	movlt	r3, #45	; 0x2d
 8007f96:	4880      	ldr	r0, [pc, #512]	; (8008198 <_printf_float+0x2d8>)
 8007f98:	bfb8      	it	lt
 8007f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f9e:	4b7f      	ldr	r3, [pc, #508]	; (800819c <_printf_float+0x2dc>)
 8007fa0:	e7d3      	b.n	8007f4a <_printf_float+0x8a>
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	d142      	bne.n	8008032 <_printf_float+0x172>
 8007fac:	2306      	movs	r3, #6
 8007fae:	6063      	str	r3, [r4, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	9206      	str	r2, [sp, #24]
 8007fb4:	aa0e      	add	r2, sp, #56	; 0x38
 8007fb6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007fba:	aa0d      	add	r2, sp, #52	; 0x34
 8007fbc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007fc0:	9203      	str	r2, [sp, #12]
 8007fc2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007fc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	6863      	ldr	r3, [r4, #4]
 8007fce:	4642      	mov	r2, r8
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	4653      	mov	r3, sl
 8007fd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8007fd8:	f7ff fed4 	bl	8007d84 <__cvt>
 8007fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fde:	4680      	mov	r8, r0
 8007fe0:	2947      	cmp	r1, #71	; 0x47
 8007fe2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fe4:	d108      	bne.n	8007ff8 <_printf_float+0x138>
 8007fe6:	1cc8      	adds	r0, r1, #3
 8007fe8:	db02      	blt.n	8007ff0 <_printf_float+0x130>
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	4299      	cmp	r1, r3
 8007fee:	dd40      	ble.n	8008072 <_printf_float+0x1b2>
 8007ff0:	f1a9 0902 	sub.w	r9, r9, #2
 8007ff4:	fa5f f989 	uxtb.w	r9, r9
 8007ff8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ffc:	d81f      	bhi.n	800803e <_printf_float+0x17e>
 8007ffe:	464a      	mov	r2, r9
 8008000:	3901      	subs	r1, #1
 8008002:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008006:	910d      	str	r1, [sp, #52]	; 0x34
 8008008:	f7ff ff1b 	bl	8007e42 <__exponent>
 800800c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800800e:	4682      	mov	sl, r0
 8008010:	1813      	adds	r3, r2, r0
 8008012:	2a01      	cmp	r2, #1
 8008014:	6123      	str	r3, [r4, #16]
 8008016:	dc02      	bgt.n	800801e <_printf_float+0x15e>
 8008018:	6822      	ldr	r2, [r4, #0]
 800801a:	07d2      	lsls	r2, r2, #31
 800801c:	d501      	bpl.n	8008022 <_printf_float+0x162>
 800801e:	3301      	adds	r3, #1
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008026:	2b00      	cmp	r3, #0
 8008028:	d09b      	beq.n	8007f62 <_printf_float+0xa2>
 800802a:	232d      	movs	r3, #45	; 0x2d
 800802c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008030:	e797      	b.n	8007f62 <_printf_float+0xa2>
 8008032:	2947      	cmp	r1, #71	; 0x47
 8008034:	d1bc      	bne.n	8007fb0 <_printf_float+0xf0>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1ba      	bne.n	8007fb0 <_printf_float+0xf0>
 800803a:	2301      	movs	r3, #1
 800803c:	e7b7      	b.n	8007fae <_printf_float+0xee>
 800803e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008042:	d118      	bne.n	8008076 <_printf_float+0x1b6>
 8008044:	2900      	cmp	r1, #0
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	dd0b      	ble.n	8008062 <_printf_float+0x1a2>
 800804a:	6121      	str	r1, [r4, #16]
 800804c:	b913      	cbnz	r3, 8008054 <_printf_float+0x194>
 800804e:	6822      	ldr	r2, [r4, #0]
 8008050:	07d0      	lsls	r0, r2, #31
 8008052:	d502      	bpl.n	800805a <_printf_float+0x19a>
 8008054:	3301      	adds	r3, #1
 8008056:	440b      	add	r3, r1
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	f04f 0a00 	mov.w	sl, #0
 800805e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008060:	e7df      	b.n	8008022 <_printf_float+0x162>
 8008062:	b913      	cbnz	r3, 800806a <_printf_float+0x1aa>
 8008064:	6822      	ldr	r2, [r4, #0]
 8008066:	07d2      	lsls	r2, r2, #31
 8008068:	d501      	bpl.n	800806e <_printf_float+0x1ae>
 800806a:	3302      	adds	r3, #2
 800806c:	e7f4      	b.n	8008058 <_printf_float+0x198>
 800806e:	2301      	movs	r3, #1
 8008070:	e7f2      	b.n	8008058 <_printf_float+0x198>
 8008072:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008078:	4299      	cmp	r1, r3
 800807a:	db05      	blt.n	8008088 <_printf_float+0x1c8>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	6121      	str	r1, [r4, #16]
 8008080:	07d8      	lsls	r0, r3, #31
 8008082:	d5ea      	bpl.n	800805a <_printf_float+0x19a>
 8008084:	1c4b      	adds	r3, r1, #1
 8008086:	e7e7      	b.n	8008058 <_printf_float+0x198>
 8008088:	2900      	cmp	r1, #0
 800808a:	bfcc      	ite	gt
 800808c:	2201      	movgt	r2, #1
 800808e:	f1c1 0202 	rsble	r2, r1, #2
 8008092:	4413      	add	r3, r2
 8008094:	e7e0      	b.n	8008058 <_printf_float+0x198>
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	055a      	lsls	r2, r3, #21
 800809a:	d407      	bmi.n	80080ac <_printf_float+0x1ec>
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	4642      	mov	r2, r8
 80080a0:	4631      	mov	r1, r6
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b8      	blx	r7
 80080a6:	3001      	adds	r0, #1
 80080a8:	d12b      	bne.n	8008102 <_printf_float+0x242>
 80080aa:	e764      	b.n	8007f76 <_printf_float+0xb6>
 80080ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80080b0:	f240 80dd 	bls.w	800826e <_printf_float+0x3ae>
 80080b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080b8:	2200      	movs	r2, #0
 80080ba:	2300      	movs	r3, #0
 80080bc:	f7f8 fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d033      	beq.n	800812c <_printf_float+0x26c>
 80080c4:	2301      	movs	r3, #1
 80080c6:	4631      	mov	r1, r6
 80080c8:	4628      	mov	r0, r5
 80080ca:	4a35      	ldr	r2, [pc, #212]	; (80081a0 <_printf_float+0x2e0>)
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	f43f af51 	beq.w	8007f76 <_printf_float+0xb6>
 80080d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80080d8:	429a      	cmp	r2, r3
 80080da:	db02      	blt.n	80080e2 <_printf_float+0x222>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	07d8      	lsls	r0, r3, #31
 80080e0:	d50f      	bpl.n	8008102 <_printf_float+0x242>
 80080e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	f43f af42 	beq.w	8007f76 <_printf_float+0xb6>
 80080f2:	f04f 0800 	mov.w	r8, #0
 80080f6:	f104 091a 	add.w	r9, r4, #26
 80080fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080fc:	3b01      	subs	r3, #1
 80080fe:	4543      	cmp	r3, r8
 8008100:	dc09      	bgt.n	8008116 <_printf_float+0x256>
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	079b      	lsls	r3, r3, #30
 8008106:	f100 8102 	bmi.w	800830e <_printf_float+0x44e>
 800810a:	68e0      	ldr	r0, [r4, #12]
 800810c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800810e:	4298      	cmp	r0, r3
 8008110:	bfb8      	it	lt
 8008112:	4618      	movlt	r0, r3
 8008114:	e731      	b.n	8007f7a <_printf_float+0xba>
 8008116:	2301      	movs	r3, #1
 8008118:	464a      	mov	r2, r9
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f af28 	beq.w	8007f76 <_printf_float+0xb6>
 8008126:	f108 0801 	add.w	r8, r8, #1
 800812a:	e7e6      	b.n	80080fa <_printf_float+0x23a>
 800812c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800812e:	2b00      	cmp	r3, #0
 8008130:	dc38      	bgt.n	80081a4 <_printf_float+0x2e4>
 8008132:	2301      	movs	r3, #1
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	4a19      	ldr	r2, [pc, #100]	; (80081a0 <_printf_float+0x2e0>)
 800813a:	47b8      	blx	r7
 800813c:	3001      	adds	r0, #1
 800813e:	f43f af1a 	beq.w	8007f76 <_printf_float+0xb6>
 8008142:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008146:	4313      	orrs	r3, r2
 8008148:	d102      	bne.n	8008150 <_printf_float+0x290>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	07d9      	lsls	r1, r3, #31
 800814e:	d5d8      	bpl.n	8008102 <_printf_float+0x242>
 8008150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008154:	4631      	mov	r1, r6
 8008156:	4628      	mov	r0, r5
 8008158:	47b8      	blx	r7
 800815a:	3001      	adds	r0, #1
 800815c:	f43f af0b 	beq.w	8007f76 <_printf_float+0xb6>
 8008160:	f04f 0900 	mov.w	r9, #0
 8008164:	f104 0a1a 	add.w	sl, r4, #26
 8008168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800816a:	425b      	negs	r3, r3
 800816c:	454b      	cmp	r3, r9
 800816e:	dc01      	bgt.n	8008174 <_printf_float+0x2b4>
 8008170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008172:	e794      	b.n	800809e <_printf_float+0x1de>
 8008174:	2301      	movs	r3, #1
 8008176:	4652      	mov	r2, sl
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f aef9 	beq.w	8007f76 <_printf_float+0xb6>
 8008184:	f109 0901 	add.w	r9, r9, #1
 8008188:	e7ee      	b.n	8008168 <_printf_float+0x2a8>
 800818a:	bf00      	nop
 800818c:	7fefffff 	.word	0x7fefffff
 8008190:	0800a6e4 	.word	0x0800a6e4
 8008194:	0800a6e8 	.word	0x0800a6e8
 8008198:	0800a6f0 	.word	0x0800a6f0
 800819c:	0800a6ec 	.word	0x0800a6ec
 80081a0:	0800a6f4 	.word	0x0800a6f4
 80081a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081a8:	429a      	cmp	r2, r3
 80081aa:	bfa8      	it	ge
 80081ac:	461a      	movge	r2, r3
 80081ae:	2a00      	cmp	r2, #0
 80081b0:	4691      	mov	r9, r2
 80081b2:	dc37      	bgt.n	8008224 <_printf_float+0x364>
 80081b4:	f04f 0b00 	mov.w	fp, #0
 80081b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081bc:	f104 021a 	add.w	r2, r4, #26
 80081c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80081c4:	ebaa 0309 	sub.w	r3, sl, r9
 80081c8:	455b      	cmp	r3, fp
 80081ca:	dc33      	bgt.n	8008234 <_printf_float+0x374>
 80081cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80081d0:	429a      	cmp	r2, r3
 80081d2:	db3b      	blt.n	800824c <_printf_float+0x38c>
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	07da      	lsls	r2, r3, #31
 80081d8:	d438      	bmi.n	800824c <_printf_float+0x38c>
 80081da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081de:	eba2 030a 	sub.w	r3, r2, sl
 80081e2:	eba2 0901 	sub.w	r9, r2, r1
 80081e6:	4599      	cmp	r9, r3
 80081e8:	bfa8      	it	ge
 80081ea:	4699      	movge	r9, r3
 80081ec:	f1b9 0f00 	cmp.w	r9, #0
 80081f0:	dc34      	bgt.n	800825c <_printf_float+0x39c>
 80081f2:	f04f 0800 	mov.w	r8, #0
 80081f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081fa:	f104 0a1a 	add.w	sl, r4, #26
 80081fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	eba3 0309 	sub.w	r3, r3, r9
 8008208:	4543      	cmp	r3, r8
 800820a:	f77f af7a 	ble.w	8008102 <_printf_float+0x242>
 800820e:	2301      	movs	r3, #1
 8008210:	4652      	mov	r2, sl
 8008212:	4631      	mov	r1, r6
 8008214:	4628      	mov	r0, r5
 8008216:	47b8      	blx	r7
 8008218:	3001      	adds	r0, #1
 800821a:	f43f aeac 	beq.w	8007f76 <_printf_float+0xb6>
 800821e:	f108 0801 	add.w	r8, r8, #1
 8008222:	e7ec      	b.n	80081fe <_printf_float+0x33e>
 8008224:	4613      	mov	r3, r2
 8008226:	4631      	mov	r1, r6
 8008228:	4642      	mov	r2, r8
 800822a:	4628      	mov	r0, r5
 800822c:	47b8      	blx	r7
 800822e:	3001      	adds	r0, #1
 8008230:	d1c0      	bne.n	80081b4 <_printf_float+0x2f4>
 8008232:	e6a0      	b.n	8007f76 <_printf_float+0xb6>
 8008234:	2301      	movs	r3, #1
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	920b      	str	r2, [sp, #44]	; 0x2c
 800823c:	47b8      	blx	r7
 800823e:	3001      	adds	r0, #1
 8008240:	f43f ae99 	beq.w	8007f76 <_printf_float+0xb6>
 8008244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008246:	f10b 0b01 	add.w	fp, fp, #1
 800824a:	e7b9      	b.n	80081c0 <_printf_float+0x300>
 800824c:	4631      	mov	r1, r6
 800824e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	d1bf      	bne.n	80081da <_printf_float+0x31a>
 800825a:	e68c      	b.n	8007f76 <_printf_float+0xb6>
 800825c:	464b      	mov	r3, r9
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	eb08 020a 	add.w	r2, r8, sl
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	d1c2      	bne.n	80081f2 <_printf_float+0x332>
 800826c:	e683      	b.n	8007f76 <_printf_float+0xb6>
 800826e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008270:	2a01      	cmp	r2, #1
 8008272:	dc01      	bgt.n	8008278 <_printf_float+0x3b8>
 8008274:	07db      	lsls	r3, r3, #31
 8008276:	d537      	bpl.n	80082e8 <_printf_float+0x428>
 8008278:	2301      	movs	r3, #1
 800827a:	4642      	mov	r2, r8
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	f43f ae77 	beq.w	8007f76 <_printf_float+0xb6>
 8008288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800828c:	4631      	mov	r1, r6
 800828e:	4628      	mov	r0, r5
 8008290:	47b8      	blx	r7
 8008292:	3001      	adds	r0, #1
 8008294:	f43f ae6f 	beq.w	8007f76 <_printf_float+0xb6>
 8008298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	f7f8 fb82 	bl	80009a8 <__aeabi_dcmpeq>
 80082a4:	b9d8      	cbnz	r0, 80082de <_printf_float+0x41e>
 80082a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a8:	f108 0201 	add.w	r2, r8, #1
 80082ac:	3b01      	subs	r3, #1
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	d10e      	bne.n	80082d6 <_printf_float+0x416>
 80082b8:	e65d      	b.n	8007f76 <_printf_float+0xb6>
 80082ba:	2301      	movs	r3, #1
 80082bc:	464a      	mov	r2, r9
 80082be:	4631      	mov	r1, r6
 80082c0:	4628      	mov	r0, r5
 80082c2:	47b8      	blx	r7
 80082c4:	3001      	adds	r0, #1
 80082c6:	f43f ae56 	beq.w	8007f76 <_printf_float+0xb6>
 80082ca:	f108 0801 	add.w	r8, r8, #1
 80082ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082d0:	3b01      	subs	r3, #1
 80082d2:	4543      	cmp	r3, r8
 80082d4:	dcf1      	bgt.n	80082ba <_printf_float+0x3fa>
 80082d6:	4653      	mov	r3, sl
 80082d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082dc:	e6e0      	b.n	80080a0 <_printf_float+0x1e0>
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	f104 091a 	add.w	r9, r4, #26
 80082e6:	e7f2      	b.n	80082ce <_printf_float+0x40e>
 80082e8:	2301      	movs	r3, #1
 80082ea:	4642      	mov	r2, r8
 80082ec:	e7df      	b.n	80082ae <_printf_float+0x3ee>
 80082ee:	2301      	movs	r3, #1
 80082f0:	464a      	mov	r2, r9
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	f43f ae3c 	beq.w	8007f76 <_printf_float+0xb6>
 80082fe:	f108 0801 	add.w	r8, r8, #1
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008306:	1a5b      	subs	r3, r3, r1
 8008308:	4543      	cmp	r3, r8
 800830a:	dcf0      	bgt.n	80082ee <_printf_float+0x42e>
 800830c:	e6fd      	b.n	800810a <_printf_float+0x24a>
 800830e:	f04f 0800 	mov.w	r8, #0
 8008312:	f104 0919 	add.w	r9, r4, #25
 8008316:	e7f4      	b.n	8008302 <_printf_float+0x442>

08008318 <_printf_common>:
 8008318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800831c:	4616      	mov	r6, r2
 800831e:	4699      	mov	r9, r3
 8008320:	688a      	ldr	r2, [r1, #8]
 8008322:	690b      	ldr	r3, [r1, #16]
 8008324:	4607      	mov	r7, r0
 8008326:	4293      	cmp	r3, r2
 8008328:	bfb8      	it	lt
 800832a:	4613      	movlt	r3, r2
 800832c:	6033      	str	r3, [r6, #0]
 800832e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008332:	460c      	mov	r4, r1
 8008334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008338:	b10a      	cbz	r2, 800833e <_printf_common+0x26>
 800833a:	3301      	adds	r3, #1
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	0699      	lsls	r1, r3, #26
 8008342:	bf42      	ittt	mi
 8008344:	6833      	ldrmi	r3, [r6, #0]
 8008346:	3302      	addmi	r3, #2
 8008348:	6033      	strmi	r3, [r6, #0]
 800834a:	6825      	ldr	r5, [r4, #0]
 800834c:	f015 0506 	ands.w	r5, r5, #6
 8008350:	d106      	bne.n	8008360 <_printf_common+0x48>
 8008352:	f104 0a19 	add.w	sl, r4, #25
 8008356:	68e3      	ldr	r3, [r4, #12]
 8008358:	6832      	ldr	r2, [r6, #0]
 800835a:	1a9b      	subs	r3, r3, r2
 800835c:	42ab      	cmp	r3, r5
 800835e:	dc28      	bgt.n	80083b2 <_printf_common+0x9a>
 8008360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008364:	1e13      	subs	r3, r2, #0
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	bf18      	it	ne
 800836a:	2301      	movne	r3, #1
 800836c:	0692      	lsls	r2, r2, #26
 800836e:	d42d      	bmi.n	80083cc <_printf_common+0xb4>
 8008370:	4649      	mov	r1, r9
 8008372:	4638      	mov	r0, r7
 8008374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d020      	beq.n	80083c0 <_printf_common+0xa8>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	68e5      	ldr	r5, [r4, #12]
 8008382:	f003 0306 	and.w	r3, r3, #6
 8008386:	2b04      	cmp	r3, #4
 8008388:	bf18      	it	ne
 800838a:	2500      	movne	r5, #0
 800838c:	6832      	ldr	r2, [r6, #0]
 800838e:	f04f 0600 	mov.w	r6, #0
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	bf08      	it	eq
 8008396:	1aad      	subeq	r5, r5, r2
 8008398:	6922      	ldr	r2, [r4, #16]
 800839a:	bf08      	it	eq
 800839c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083a0:	4293      	cmp	r3, r2
 80083a2:	bfc4      	itt	gt
 80083a4:	1a9b      	subgt	r3, r3, r2
 80083a6:	18ed      	addgt	r5, r5, r3
 80083a8:	341a      	adds	r4, #26
 80083aa:	42b5      	cmp	r5, r6
 80083ac:	d11a      	bne.n	80083e4 <_printf_common+0xcc>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e008      	b.n	80083c4 <_printf_common+0xac>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4652      	mov	r2, sl
 80083b6:	4649      	mov	r1, r9
 80083b8:	4638      	mov	r0, r7
 80083ba:	47c0      	blx	r8
 80083bc:	3001      	adds	r0, #1
 80083be:	d103      	bne.n	80083c8 <_printf_common+0xb0>
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	3501      	adds	r5, #1
 80083ca:	e7c4      	b.n	8008356 <_printf_common+0x3e>
 80083cc:	2030      	movs	r0, #48	; 0x30
 80083ce:	18e1      	adds	r1, r4, r3
 80083d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083da:	4422      	add	r2, r4
 80083dc:	3302      	adds	r3, #2
 80083de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083e2:	e7c5      	b.n	8008370 <_printf_common+0x58>
 80083e4:	2301      	movs	r3, #1
 80083e6:	4622      	mov	r2, r4
 80083e8:	4649      	mov	r1, r9
 80083ea:	4638      	mov	r0, r7
 80083ec:	47c0      	blx	r8
 80083ee:	3001      	adds	r0, #1
 80083f0:	d0e6      	beq.n	80083c0 <_printf_common+0xa8>
 80083f2:	3601      	adds	r6, #1
 80083f4:	e7d9      	b.n	80083aa <_printf_common+0x92>
	...

080083f8 <_printf_i>:
 80083f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	460c      	mov	r4, r1
 80083fe:	7e27      	ldrb	r7, [r4, #24]
 8008400:	4691      	mov	r9, r2
 8008402:	2f78      	cmp	r7, #120	; 0x78
 8008404:	4680      	mov	r8, r0
 8008406:	469a      	mov	sl, r3
 8008408:	990c      	ldr	r1, [sp, #48]	; 0x30
 800840a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800840e:	d807      	bhi.n	8008420 <_printf_i+0x28>
 8008410:	2f62      	cmp	r7, #98	; 0x62
 8008412:	d80a      	bhi.n	800842a <_printf_i+0x32>
 8008414:	2f00      	cmp	r7, #0
 8008416:	f000 80d9 	beq.w	80085cc <_printf_i+0x1d4>
 800841a:	2f58      	cmp	r7, #88	; 0x58
 800841c:	f000 80a4 	beq.w	8008568 <_printf_i+0x170>
 8008420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008428:	e03a      	b.n	80084a0 <_printf_i+0xa8>
 800842a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800842e:	2b15      	cmp	r3, #21
 8008430:	d8f6      	bhi.n	8008420 <_printf_i+0x28>
 8008432:	a001      	add	r0, pc, #4	; (adr r0, 8008438 <_printf_i+0x40>)
 8008434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008438:	08008491 	.word	0x08008491
 800843c:	080084a5 	.word	0x080084a5
 8008440:	08008421 	.word	0x08008421
 8008444:	08008421 	.word	0x08008421
 8008448:	08008421 	.word	0x08008421
 800844c:	08008421 	.word	0x08008421
 8008450:	080084a5 	.word	0x080084a5
 8008454:	08008421 	.word	0x08008421
 8008458:	08008421 	.word	0x08008421
 800845c:	08008421 	.word	0x08008421
 8008460:	08008421 	.word	0x08008421
 8008464:	080085b3 	.word	0x080085b3
 8008468:	080084d5 	.word	0x080084d5
 800846c:	08008595 	.word	0x08008595
 8008470:	08008421 	.word	0x08008421
 8008474:	08008421 	.word	0x08008421
 8008478:	080085d5 	.word	0x080085d5
 800847c:	08008421 	.word	0x08008421
 8008480:	080084d5 	.word	0x080084d5
 8008484:	08008421 	.word	0x08008421
 8008488:	08008421 	.word	0x08008421
 800848c:	0800859d 	.word	0x0800859d
 8008490:	680b      	ldr	r3, [r1, #0]
 8008492:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008496:	1d1a      	adds	r2, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	600a      	str	r2, [r1, #0]
 800849c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0a4      	b.n	80085ee <_printf_i+0x1f6>
 80084a4:	6825      	ldr	r5, [r4, #0]
 80084a6:	6808      	ldr	r0, [r1, #0]
 80084a8:	062e      	lsls	r6, r5, #24
 80084aa:	f100 0304 	add.w	r3, r0, #4
 80084ae:	d50a      	bpl.n	80084c6 <_printf_i+0xce>
 80084b0:	6805      	ldr	r5, [r0, #0]
 80084b2:	600b      	str	r3, [r1, #0]
 80084b4:	2d00      	cmp	r5, #0
 80084b6:	da03      	bge.n	80084c0 <_printf_i+0xc8>
 80084b8:	232d      	movs	r3, #45	; 0x2d
 80084ba:	426d      	negs	r5, r5
 80084bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c0:	230a      	movs	r3, #10
 80084c2:	485e      	ldr	r0, [pc, #376]	; (800863c <_printf_i+0x244>)
 80084c4:	e019      	b.n	80084fa <_printf_i+0x102>
 80084c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084ca:	6805      	ldr	r5, [r0, #0]
 80084cc:	600b      	str	r3, [r1, #0]
 80084ce:	bf18      	it	ne
 80084d0:	b22d      	sxthne	r5, r5
 80084d2:	e7ef      	b.n	80084b4 <_printf_i+0xbc>
 80084d4:	680b      	ldr	r3, [r1, #0]
 80084d6:	6825      	ldr	r5, [r4, #0]
 80084d8:	1d18      	adds	r0, r3, #4
 80084da:	6008      	str	r0, [r1, #0]
 80084dc:	0628      	lsls	r0, r5, #24
 80084de:	d501      	bpl.n	80084e4 <_printf_i+0xec>
 80084e0:	681d      	ldr	r5, [r3, #0]
 80084e2:	e002      	b.n	80084ea <_printf_i+0xf2>
 80084e4:	0669      	lsls	r1, r5, #25
 80084e6:	d5fb      	bpl.n	80084e0 <_printf_i+0xe8>
 80084e8:	881d      	ldrh	r5, [r3, #0]
 80084ea:	2f6f      	cmp	r7, #111	; 0x6f
 80084ec:	bf0c      	ite	eq
 80084ee:	2308      	moveq	r3, #8
 80084f0:	230a      	movne	r3, #10
 80084f2:	4852      	ldr	r0, [pc, #328]	; (800863c <_printf_i+0x244>)
 80084f4:	2100      	movs	r1, #0
 80084f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084fa:	6866      	ldr	r6, [r4, #4]
 80084fc:	2e00      	cmp	r6, #0
 80084fe:	bfa8      	it	ge
 8008500:	6821      	ldrge	r1, [r4, #0]
 8008502:	60a6      	str	r6, [r4, #8]
 8008504:	bfa4      	itt	ge
 8008506:	f021 0104 	bicge.w	r1, r1, #4
 800850a:	6021      	strge	r1, [r4, #0]
 800850c:	b90d      	cbnz	r5, 8008512 <_printf_i+0x11a>
 800850e:	2e00      	cmp	r6, #0
 8008510:	d04d      	beq.n	80085ae <_printf_i+0x1b6>
 8008512:	4616      	mov	r6, r2
 8008514:	fbb5 f1f3 	udiv	r1, r5, r3
 8008518:	fb03 5711 	mls	r7, r3, r1, r5
 800851c:	5dc7      	ldrb	r7, [r0, r7]
 800851e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008522:	462f      	mov	r7, r5
 8008524:	42bb      	cmp	r3, r7
 8008526:	460d      	mov	r5, r1
 8008528:	d9f4      	bls.n	8008514 <_printf_i+0x11c>
 800852a:	2b08      	cmp	r3, #8
 800852c:	d10b      	bne.n	8008546 <_printf_i+0x14e>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	07df      	lsls	r7, r3, #31
 8008532:	d508      	bpl.n	8008546 <_printf_i+0x14e>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	6861      	ldr	r1, [r4, #4]
 8008538:	4299      	cmp	r1, r3
 800853a:	bfde      	ittt	le
 800853c:	2330      	movle	r3, #48	; 0x30
 800853e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008542:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008546:	1b92      	subs	r2, r2, r6
 8008548:	6122      	str	r2, [r4, #16]
 800854a:	464b      	mov	r3, r9
 800854c:	4621      	mov	r1, r4
 800854e:	4640      	mov	r0, r8
 8008550:	f8cd a000 	str.w	sl, [sp]
 8008554:	aa03      	add	r2, sp, #12
 8008556:	f7ff fedf 	bl	8008318 <_printf_common>
 800855a:	3001      	adds	r0, #1
 800855c:	d14c      	bne.n	80085f8 <_printf_i+0x200>
 800855e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008562:	b004      	add	sp, #16
 8008564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008568:	4834      	ldr	r0, [pc, #208]	; (800863c <_printf_i+0x244>)
 800856a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800856e:	680e      	ldr	r6, [r1, #0]
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	f856 5b04 	ldr.w	r5, [r6], #4
 8008576:	061f      	lsls	r7, r3, #24
 8008578:	600e      	str	r6, [r1, #0]
 800857a:	d514      	bpl.n	80085a6 <_printf_i+0x1ae>
 800857c:	07d9      	lsls	r1, r3, #31
 800857e:	bf44      	itt	mi
 8008580:	f043 0320 	orrmi.w	r3, r3, #32
 8008584:	6023      	strmi	r3, [r4, #0]
 8008586:	b91d      	cbnz	r5, 8008590 <_printf_i+0x198>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	f023 0320 	bic.w	r3, r3, #32
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	2310      	movs	r3, #16
 8008592:	e7af      	b.n	80084f4 <_printf_i+0xfc>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	f043 0320 	orr.w	r3, r3, #32
 800859a:	6023      	str	r3, [r4, #0]
 800859c:	2378      	movs	r3, #120	; 0x78
 800859e:	4828      	ldr	r0, [pc, #160]	; (8008640 <_printf_i+0x248>)
 80085a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085a4:	e7e3      	b.n	800856e <_printf_i+0x176>
 80085a6:	065e      	lsls	r6, r3, #25
 80085a8:	bf48      	it	mi
 80085aa:	b2ad      	uxthmi	r5, r5
 80085ac:	e7e6      	b.n	800857c <_printf_i+0x184>
 80085ae:	4616      	mov	r6, r2
 80085b0:	e7bb      	b.n	800852a <_printf_i+0x132>
 80085b2:	680b      	ldr	r3, [r1, #0]
 80085b4:	6826      	ldr	r6, [r4, #0]
 80085b6:	1d1d      	adds	r5, r3, #4
 80085b8:	6960      	ldr	r0, [r4, #20]
 80085ba:	600d      	str	r5, [r1, #0]
 80085bc:	0635      	lsls	r5, r6, #24
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	d501      	bpl.n	80085c6 <_printf_i+0x1ce>
 80085c2:	6018      	str	r0, [r3, #0]
 80085c4:	e002      	b.n	80085cc <_printf_i+0x1d4>
 80085c6:	0671      	lsls	r1, r6, #25
 80085c8:	d5fb      	bpl.n	80085c2 <_printf_i+0x1ca>
 80085ca:	8018      	strh	r0, [r3, #0]
 80085cc:	2300      	movs	r3, #0
 80085ce:	4616      	mov	r6, r2
 80085d0:	6123      	str	r3, [r4, #16]
 80085d2:	e7ba      	b.n	800854a <_printf_i+0x152>
 80085d4:	680b      	ldr	r3, [r1, #0]
 80085d6:	1d1a      	adds	r2, r3, #4
 80085d8:	600a      	str	r2, [r1, #0]
 80085da:	681e      	ldr	r6, [r3, #0]
 80085dc:	2100      	movs	r1, #0
 80085de:	4630      	mov	r0, r6
 80085e0:	6862      	ldr	r2, [r4, #4]
 80085e2:	f001 f883 	bl	80096ec <memchr>
 80085e6:	b108      	cbz	r0, 80085ec <_printf_i+0x1f4>
 80085e8:	1b80      	subs	r0, r0, r6
 80085ea:	6060      	str	r0, [r4, #4]
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	2300      	movs	r3, #0
 80085f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f6:	e7a8      	b.n	800854a <_printf_i+0x152>
 80085f8:	4632      	mov	r2, r6
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	47d0      	blx	sl
 8008602:	3001      	adds	r0, #1
 8008604:	d0ab      	beq.n	800855e <_printf_i+0x166>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	079b      	lsls	r3, r3, #30
 800860a:	d413      	bmi.n	8008634 <_printf_i+0x23c>
 800860c:	68e0      	ldr	r0, [r4, #12]
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	4298      	cmp	r0, r3
 8008612:	bfb8      	it	lt
 8008614:	4618      	movlt	r0, r3
 8008616:	e7a4      	b.n	8008562 <_printf_i+0x16a>
 8008618:	2301      	movs	r3, #1
 800861a:	4632      	mov	r2, r6
 800861c:	4649      	mov	r1, r9
 800861e:	4640      	mov	r0, r8
 8008620:	47d0      	blx	sl
 8008622:	3001      	adds	r0, #1
 8008624:	d09b      	beq.n	800855e <_printf_i+0x166>
 8008626:	3501      	adds	r5, #1
 8008628:	68e3      	ldr	r3, [r4, #12]
 800862a:	9903      	ldr	r1, [sp, #12]
 800862c:	1a5b      	subs	r3, r3, r1
 800862e:	42ab      	cmp	r3, r5
 8008630:	dcf2      	bgt.n	8008618 <_printf_i+0x220>
 8008632:	e7eb      	b.n	800860c <_printf_i+0x214>
 8008634:	2500      	movs	r5, #0
 8008636:	f104 0619 	add.w	r6, r4, #25
 800863a:	e7f5      	b.n	8008628 <_printf_i+0x230>
 800863c:	0800a6f6 	.word	0x0800a6f6
 8008640:	0800a707 	.word	0x0800a707

08008644 <iprintf>:
 8008644:	b40f      	push	{r0, r1, r2, r3}
 8008646:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <iprintf+0x2c>)
 8008648:	b513      	push	{r0, r1, r4, lr}
 800864a:	681c      	ldr	r4, [r3, #0]
 800864c:	b124      	cbz	r4, 8008658 <iprintf+0x14>
 800864e:	69a3      	ldr	r3, [r4, #24]
 8008650:	b913      	cbnz	r3, 8008658 <iprintf+0x14>
 8008652:	4620      	mov	r0, r4
 8008654:	f7ff fa60 	bl	8007b18 <__sinit>
 8008658:	ab05      	add	r3, sp, #20
 800865a:	4620      	mov	r0, r4
 800865c:	9a04      	ldr	r2, [sp, #16]
 800865e:	68a1      	ldr	r1, [r4, #8]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	f001 fc61 	bl	8009f28 <_vfiprintf_r>
 8008666:	b002      	add	sp, #8
 8008668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800866c:	b004      	add	sp, #16
 800866e:	4770      	bx	lr
 8008670:	20000018 	.word	0x20000018

08008674 <cleanup_glue>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	460c      	mov	r4, r1
 8008678:	6809      	ldr	r1, [r1, #0]
 800867a:	4605      	mov	r5, r0
 800867c:	b109      	cbz	r1, 8008682 <cleanup_glue+0xe>
 800867e:	f7ff fff9 	bl	8008674 <cleanup_glue>
 8008682:	4621      	mov	r1, r4
 8008684:	4628      	mov	r0, r5
 8008686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800868a:	f001 bbd9 	b.w	8009e40 <_free_r>
	...

08008690 <_reclaim_reent>:
 8008690:	4b2c      	ldr	r3, [pc, #176]	; (8008744 <_reclaim_reent+0xb4>)
 8008692:	b570      	push	{r4, r5, r6, lr}
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4604      	mov	r4, r0
 8008698:	4283      	cmp	r3, r0
 800869a:	d051      	beq.n	8008740 <_reclaim_reent+0xb0>
 800869c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800869e:	b143      	cbz	r3, 80086b2 <_reclaim_reent+0x22>
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d14a      	bne.n	800873c <_reclaim_reent+0xac>
 80086a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086a8:	6819      	ldr	r1, [r3, #0]
 80086aa:	b111      	cbz	r1, 80086b2 <_reclaim_reent+0x22>
 80086ac:	4620      	mov	r0, r4
 80086ae:	f001 fbc7 	bl	8009e40 <_free_r>
 80086b2:	6961      	ldr	r1, [r4, #20]
 80086b4:	b111      	cbz	r1, 80086bc <_reclaim_reent+0x2c>
 80086b6:	4620      	mov	r0, r4
 80086b8:	f001 fbc2 	bl	8009e40 <_free_r>
 80086bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80086be:	b111      	cbz	r1, 80086c6 <_reclaim_reent+0x36>
 80086c0:	4620      	mov	r0, r4
 80086c2:	f001 fbbd 	bl	8009e40 <_free_r>
 80086c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80086c8:	b111      	cbz	r1, 80086d0 <_reclaim_reent+0x40>
 80086ca:	4620      	mov	r0, r4
 80086cc:	f001 fbb8 	bl	8009e40 <_free_r>
 80086d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80086d2:	b111      	cbz	r1, 80086da <_reclaim_reent+0x4a>
 80086d4:	4620      	mov	r0, r4
 80086d6:	f001 fbb3 	bl	8009e40 <_free_r>
 80086da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80086dc:	b111      	cbz	r1, 80086e4 <_reclaim_reent+0x54>
 80086de:	4620      	mov	r0, r4
 80086e0:	f001 fbae 	bl	8009e40 <_free_r>
 80086e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80086e6:	b111      	cbz	r1, 80086ee <_reclaim_reent+0x5e>
 80086e8:	4620      	mov	r0, r4
 80086ea:	f001 fba9 	bl	8009e40 <_free_r>
 80086ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80086f0:	b111      	cbz	r1, 80086f8 <_reclaim_reent+0x68>
 80086f2:	4620      	mov	r0, r4
 80086f4:	f001 fba4 	bl	8009e40 <_free_r>
 80086f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086fa:	b111      	cbz	r1, 8008702 <_reclaim_reent+0x72>
 80086fc:	4620      	mov	r0, r4
 80086fe:	f001 fb9f 	bl	8009e40 <_free_r>
 8008702:	69a3      	ldr	r3, [r4, #24]
 8008704:	b1e3      	cbz	r3, 8008740 <_reclaim_reent+0xb0>
 8008706:	4620      	mov	r0, r4
 8008708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800870a:	4798      	blx	r3
 800870c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800870e:	b1b9      	cbz	r1, 8008740 <_reclaim_reent+0xb0>
 8008710:	4620      	mov	r0, r4
 8008712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008716:	f7ff bfad 	b.w	8008674 <cleanup_glue>
 800871a:	5949      	ldr	r1, [r1, r5]
 800871c:	b941      	cbnz	r1, 8008730 <_reclaim_reent+0xa0>
 800871e:	3504      	adds	r5, #4
 8008720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008722:	2d80      	cmp	r5, #128	; 0x80
 8008724:	68d9      	ldr	r1, [r3, #12]
 8008726:	d1f8      	bne.n	800871a <_reclaim_reent+0x8a>
 8008728:	4620      	mov	r0, r4
 800872a:	f001 fb89 	bl	8009e40 <_free_r>
 800872e:	e7ba      	b.n	80086a6 <_reclaim_reent+0x16>
 8008730:	680e      	ldr	r6, [r1, #0]
 8008732:	4620      	mov	r0, r4
 8008734:	f001 fb84 	bl	8009e40 <_free_r>
 8008738:	4631      	mov	r1, r6
 800873a:	e7ef      	b.n	800871c <_reclaim_reent+0x8c>
 800873c:	2500      	movs	r5, #0
 800873e:	e7ef      	b.n	8008720 <_reclaim_reent+0x90>
 8008740:	bd70      	pop	{r4, r5, r6, pc}
 8008742:	bf00      	nop
 8008744:	20000018 	.word	0x20000018

08008748 <_sbrk_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	2300      	movs	r3, #0
 800874c:	4d05      	ldr	r5, [pc, #20]	; (8008764 <_sbrk_r+0x1c>)
 800874e:	4604      	mov	r4, r0
 8008750:	4608      	mov	r0, r1
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	f7f9 fadc 	bl	8001d10 <_sbrk>
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	d102      	bne.n	8008762 <_sbrk_r+0x1a>
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	b103      	cbz	r3, 8008762 <_sbrk_r+0x1a>
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	20001dac 	.word	0x20001dac

08008768 <__sread>:
 8008768:	b510      	push	{r4, lr}
 800876a:	460c      	mov	r4, r1
 800876c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008770:	f001 fd0a 	bl	800a188 <_read_r>
 8008774:	2800      	cmp	r0, #0
 8008776:	bfab      	itete	ge
 8008778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800877a:	89a3      	ldrhlt	r3, [r4, #12]
 800877c:	181b      	addge	r3, r3, r0
 800877e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008782:	bfac      	ite	ge
 8008784:	6563      	strge	r3, [r4, #84]	; 0x54
 8008786:	81a3      	strhlt	r3, [r4, #12]
 8008788:	bd10      	pop	{r4, pc}

0800878a <__swrite>:
 800878a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878e:	461f      	mov	r7, r3
 8008790:	898b      	ldrh	r3, [r1, #12]
 8008792:	4605      	mov	r5, r0
 8008794:	05db      	lsls	r3, r3, #23
 8008796:	460c      	mov	r4, r1
 8008798:	4616      	mov	r6, r2
 800879a:	d505      	bpl.n	80087a8 <__swrite+0x1e>
 800879c:	2302      	movs	r3, #2
 800879e:	2200      	movs	r2, #0
 80087a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a4:	f000 ff88 	bl	80096b8 <_lseek_r>
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	4632      	mov	r2, r6
 80087ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	4628      	mov	r0, r5
 80087b4:	463b      	mov	r3, r7
 80087b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087be:	f000 b817 	b.w	80087f0 <_write_r>

080087c2 <__sseek>:
 80087c2:	b510      	push	{r4, lr}
 80087c4:	460c      	mov	r4, r1
 80087c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ca:	f000 ff75 	bl	80096b8 <_lseek_r>
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	bf15      	itete	ne
 80087d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80087d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087de:	81a3      	strheq	r3, [r4, #12]
 80087e0:	bf18      	it	ne
 80087e2:	81a3      	strhne	r3, [r4, #12]
 80087e4:	bd10      	pop	{r4, pc}

080087e6 <__sclose>:
 80087e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ea:	f000 b813 	b.w	8008814 <_close_r>
	...

080087f0 <_write_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	2200      	movs	r2, #0
 80087fa:	4d05      	ldr	r5, [pc, #20]	; (8008810 <_write_r+0x20>)
 80087fc:	602a      	str	r2, [r5, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	f7f8 fc3c 	bl	800107c <_write>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d102      	bne.n	800880e <_write_r+0x1e>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	b103      	cbz	r3, 800880e <_write_r+0x1e>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	20001dac 	.word	0x20001dac

08008814 <_close_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	2300      	movs	r3, #0
 8008818:	4d05      	ldr	r5, [pc, #20]	; (8008830 <_close_r+0x1c>)
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	f7f9 fa46 	bl	8001cb0 <_close>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_close_r+0x1a>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_close_r+0x1a>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	20001dac 	.word	0x20001dac

08008834 <quorem>:
 8008834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008838:	6903      	ldr	r3, [r0, #16]
 800883a:	690c      	ldr	r4, [r1, #16]
 800883c:	4607      	mov	r7, r0
 800883e:	42a3      	cmp	r3, r4
 8008840:	f2c0 8083 	blt.w	800894a <quorem+0x116>
 8008844:	3c01      	subs	r4, #1
 8008846:	f100 0514 	add.w	r5, r0, #20
 800884a:	f101 0814 	add.w	r8, r1, #20
 800884e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008858:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800885c:	3301      	adds	r3, #1
 800885e:	429a      	cmp	r2, r3
 8008860:	fbb2 f6f3 	udiv	r6, r2, r3
 8008864:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008868:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800886c:	d332      	bcc.n	80088d4 <quorem+0xa0>
 800886e:	f04f 0e00 	mov.w	lr, #0
 8008872:	4640      	mov	r0, r8
 8008874:	46ac      	mov	ip, r5
 8008876:	46f2      	mov	sl, lr
 8008878:	f850 2b04 	ldr.w	r2, [r0], #4
 800887c:	b293      	uxth	r3, r2
 800887e:	fb06 e303 	mla	r3, r6, r3, lr
 8008882:	0c12      	lsrs	r2, r2, #16
 8008884:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008888:	fb06 e202 	mla	r2, r6, r2, lr
 800888c:	b29b      	uxth	r3, r3
 800888e:	ebaa 0303 	sub.w	r3, sl, r3
 8008892:	f8dc a000 	ldr.w	sl, [ip]
 8008896:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800889a:	fa1f fa8a 	uxth.w	sl, sl
 800889e:	4453      	add	r3, sl
 80088a0:	fa1f fa82 	uxth.w	sl, r2
 80088a4:	f8dc 2000 	ldr.w	r2, [ip]
 80088a8:	4581      	cmp	r9, r0
 80088aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80088ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088bc:	f84c 3b04 	str.w	r3, [ip], #4
 80088c0:	d2da      	bcs.n	8008878 <quorem+0x44>
 80088c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80088c6:	b92b      	cbnz	r3, 80088d4 <quorem+0xa0>
 80088c8:	9b01      	ldr	r3, [sp, #4]
 80088ca:	3b04      	subs	r3, #4
 80088cc:	429d      	cmp	r5, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	d32f      	bcc.n	8008932 <quorem+0xfe>
 80088d2:	613c      	str	r4, [r7, #16]
 80088d4:	4638      	mov	r0, r7
 80088d6:	f001 f99d 	bl	8009c14 <__mcmp>
 80088da:	2800      	cmp	r0, #0
 80088dc:	db25      	blt.n	800892a <quorem+0xf6>
 80088de:	4628      	mov	r0, r5
 80088e0:	f04f 0c00 	mov.w	ip, #0
 80088e4:	3601      	adds	r6, #1
 80088e6:	f858 1b04 	ldr.w	r1, [r8], #4
 80088ea:	f8d0 e000 	ldr.w	lr, [r0]
 80088ee:	b28b      	uxth	r3, r1
 80088f0:	ebac 0303 	sub.w	r3, ip, r3
 80088f4:	fa1f f28e 	uxth.w	r2, lr
 80088f8:	4413      	add	r3, r2
 80088fa:	0c0a      	lsrs	r2, r1, #16
 80088fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008904:	b29b      	uxth	r3, r3
 8008906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800890a:	45c1      	cmp	r9, r8
 800890c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008910:	f840 3b04 	str.w	r3, [r0], #4
 8008914:	d2e7      	bcs.n	80088e6 <quorem+0xb2>
 8008916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800891a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800891e:	b922      	cbnz	r2, 800892a <quorem+0xf6>
 8008920:	3b04      	subs	r3, #4
 8008922:	429d      	cmp	r5, r3
 8008924:	461a      	mov	r2, r3
 8008926:	d30a      	bcc.n	800893e <quorem+0x10a>
 8008928:	613c      	str	r4, [r7, #16]
 800892a:	4630      	mov	r0, r6
 800892c:	b003      	add	sp, #12
 800892e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008932:	6812      	ldr	r2, [r2, #0]
 8008934:	3b04      	subs	r3, #4
 8008936:	2a00      	cmp	r2, #0
 8008938:	d1cb      	bne.n	80088d2 <quorem+0x9e>
 800893a:	3c01      	subs	r4, #1
 800893c:	e7c6      	b.n	80088cc <quorem+0x98>
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	3b04      	subs	r3, #4
 8008942:	2a00      	cmp	r2, #0
 8008944:	d1f0      	bne.n	8008928 <quorem+0xf4>
 8008946:	3c01      	subs	r4, #1
 8008948:	e7eb      	b.n	8008922 <quorem+0xee>
 800894a:	2000      	movs	r0, #0
 800894c:	e7ee      	b.n	800892c <quorem+0xf8>
	...

08008950 <_dtoa_r>:
 8008950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008954:	4616      	mov	r6, r2
 8008956:	461f      	mov	r7, r3
 8008958:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800895a:	b099      	sub	sp, #100	; 0x64
 800895c:	4605      	mov	r5, r0
 800895e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008962:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008966:	b974      	cbnz	r4, 8008986 <_dtoa_r+0x36>
 8008968:	2010      	movs	r0, #16
 800896a:	f000 feb7 	bl	80096dc <malloc>
 800896e:	4602      	mov	r2, r0
 8008970:	6268      	str	r0, [r5, #36]	; 0x24
 8008972:	b920      	cbnz	r0, 800897e <_dtoa_r+0x2e>
 8008974:	21ea      	movs	r1, #234	; 0xea
 8008976:	4bae      	ldr	r3, [pc, #696]	; (8008c30 <_dtoa_r+0x2e0>)
 8008978:	48ae      	ldr	r0, [pc, #696]	; (8008c34 <_dtoa_r+0x2e4>)
 800897a:	f001 fcd7 	bl	800a32c <__assert_func>
 800897e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008982:	6004      	str	r4, [r0, #0]
 8008984:	60c4      	str	r4, [r0, #12]
 8008986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008988:	6819      	ldr	r1, [r3, #0]
 800898a:	b151      	cbz	r1, 80089a2 <_dtoa_r+0x52>
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	2301      	movs	r3, #1
 8008990:	4093      	lsls	r3, r2
 8008992:	604a      	str	r2, [r1, #4]
 8008994:	608b      	str	r3, [r1, #8]
 8008996:	4628      	mov	r0, r5
 8008998:	f000 ff02 	bl	80097a0 <_Bfree>
 800899c:	2200      	movs	r2, #0
 800899e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	1e3b      	subs	r3, r7, #0
 80089a4:	bfaf      	iteee	ge
 80089a6:	2300      	movge	r3, #0
 80089a8:	2201      	movlt	r2, #1
 80089aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089ae:	9305      	strlt	r3, [sp, #20]
 80089b0:	bfa8      	it	ge
 80089b2:	f8c8 3000 	strge.w	r3, [r8]
 80089b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80089ba:	4b9f      	ldr	r3, [pc, #636]	; (8008c38 <_dtoa_r+0x2e8>)
 80089bc:	bfb8      	it	lt
 80089be:	f8c8 2000 	strlt.w	r2, [r8]
 80089c2:	ea33 0309 	bics.w	r3, r3, r9
 80089c6:	d119      	bne.n	80089fc <_dtoa_r+0xac>
 80089c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80089cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089d4:	4333      	orrs	r3, r6
 80089d6:	f000 8580 	beq.w	80094da <_dtoa_r+0xb8a>
 80089da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089dc:	b953      	cbnz	r3, 80089f4 <_dtoa_r+0xa4>
 80089de:	4b97      	ldr	r3, [pc, #604]	; (8008c3c <_dtoa_r+0x2ec>)
 80089e0:	e022      	b.n	8008a28 <_dtoa_r+0xd8>
 80089e2:	4b97      	ldr	r3, [pc, #604]	; (8008c40 <_dtoa_r+0x2f0>)
 80089e4:	9308      	str	r3, [sp, #32]
 80089e6:	3308      	adds	r3, #8
 80089e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	9808      	ldr	r0, [sp, #32]
 80089ee:	b019      	add	sp, #100	; 0x64
 80089f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f4:	4b91      	ldr	r3, [pc, #580]	; (8008c3c <_dtoa_r+0x2ec>)
 80089f6:	9308      	str	r3, [sp, #32]
 80089f8:	3303      	adds	r3, #3
 80089fa:	e7f5      	b.n	80089e8 <_dtoa_r+0x98>
 80089fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008a00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008a04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f7f7 ffcc 	bl	80009a8 <__aeabi_dcmpeq>
 8008a10:	4680      	mov	r8, r0
 8008a12:	b158      	cbz	r0, 8008a2c <_dtoa_r+0xdc>
 8008a14:	2301      	movs	r3, #1
 8008a16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8559 	beq.w	80094d4 <_dtoa_r+0xb84>
 8008a22:	4888      	ldr	r0, [pc, #544]	; (8008c44 <_dtoa_r+0x2f4>)
 8008a24:	6018      	str	r0, [r3, #0]
 8008a26:	1e43      	subs	r3, r0, #1
 8008a28:	9308      	str	r3, [sp, #32]
 8008a2a:	e7df      	b.n	80089ec <_dtoa_r+0x9c>
 8008a2c:	ab16      	add	r3, sp, #88	; 0x58
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	ab17      	add	r3, sp, #92	; 0x5c
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	4628      	mov	r0, r5
 8008a36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a3a:	f001 f997 	bl	8009d6c <__d2b>
 8008a3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008a42:	4682      	mov	sl, r0
 8008a44:	2c00      	cmp	r4, #0
 8008a46:	d07e      	beq.n	8008b46 <_dtoa_r+0x1f6>
 8008a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008a5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008a5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008a62:	2200      	movs	r2, #0
 8008a64:	4b78      	ldr	r3, [pc, #480]	; (8008c48 <_dtoa_r+0x2f8>)
 8008a66:	f7f7 fb7f 	bl	8000168 <__aeabi_dsub>
 8008a6a:	a36b      	add	r3, pc, #428	; (adr r3, 8008c18 <_dtoa_r+0x2c8>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fd32 	bl	80004d8 <__aeabi_dmul>
 8008a74:	a36a      	add	r3, pc, #424	; (adr r3, 8008c20 <_dtoa_r+0x2d0>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fb77 	bl	800016c <__adddf3>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	4620      	mov	r0, r4
 8008a82:	460f      	mov	r7, r1
 8008a84:	f7f7 fcbe 	bl	8000404 <__aeabi_i2d>
 8008a88:	a367      	add	r3, pc, #412	; (adr r3, 8008c28 <_dtoa_r+0x2d8>)
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fd23 	bl	80004d8 <__aeabi_dmul>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f7 fb67 	bl	800016c <__adddf3>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460f      	mov	r7, r1
 8008aa2:	f7f7 ffc9 	bl	8000a38 <__aeabi_d2iz>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	4681      	mov	r9, r0
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4630      	mov	r0, r6
 8008aae:	4639      	mov	r1, r7
 8008ab0:	f7f7 ff84 	bl	80009bc <__aeabi_dcmplt>
 8008ab4:	b148      	cbz	r0, 8008aca <_dtoa_r+0x17a>
 8008ab6:	4648      	mov	r0, r9
 8008ab8:	f7f7 fca4 	bl	8000404 <__aeabi_i2d>
 8008abc:	4632      	mov	r2, r6
 8008abe:	463b      	mov	r3, r7
 8008ac0:	f7f7 ff72 	bl	80009a8 <__aeabi_dcmpeq>
 8008ac4:	b908      	cbnz	r0, 8008aca <_dtoa_r+0x17a>
 8008ac6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008aca:	f1b9 0f16 	cmp.w	r9, #22
 8008ace:	d857      	bhi.n	8008b80 <_dtoa_r+0x230>
 8008ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ad4:	4b5d      	ldr	r3, [pc, #372]	; (8008c4c <_dtoa_r+0x2fc>)
 8008ad6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f7f7 ff6d 	bl	80009bc <__aeabi_dcmplt>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d04e      	beq.n	8008b84 <_dtoa_r+0x234>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008af0:	1b1c      	subs	r4, r3, r4
 8008af2:	1e63      	subs	r3, r4, #1
 8008af4:	9309      	str	r3, [sp, #36]	; 0x24
 8008af6:	bf49      	itett	mi
 8008af8:	f1c4 0301 	rsbmi	r3, r4, #1
 8008afc:	2300      	movpl	r3, #0
 8008afe:	9306      	strmi	r3, [sp, #24]
 8008b00:	2300      	movmi	r3, #0
 8008b02:	bf54      	ite	pl
 8008b04:	9306      	strpl	r3, [sp, #24]
 8008b06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008b08:	f1b9 0f00 	cmp.w	r9, #0
 8008b0c:	db3c      	blt.n	8008b88 <_dtoa_r+0x238>
 8008b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b10:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008b14:	444b      	add	r3, r9
 8008b16:	9309      	str	r3, [sp, #36]	; 0x24
 8008b18:	2300      	movs	r3, #0
 8008b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d86c      	bhi.n	8008bfc <_dtoa_r+0x2ac>
 8008b22:	2b05      	cmp	r3, #5
 8008b24:	bfc4      	itt	gt
 8008b26:	3b04      	subgt	r3, #4
 8008b28:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008b2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b2c:	bfc8      	it	gt
 8008b2e:	2400      	movgt	r4, #0
 8008b30:	f1a3 0302 	sub.w	r3, r3, #2
 8008b34:	bfd8      	it	le
 8008b36:	2401      	movle	r4, #1
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	f200 808b 	bhi.w	8008c54 <_dtoa_r+0x304>
 8008b3e:	e8df f003 	tbb	[pc, r3]
 8008b42:	4f2d      	.short	0x4f2d
 8008b44:	5b4d      	.short	0x5b4d
 8008b46:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008b4a:	441c      	add	r4, r3
 8008b4c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	bfc3      	ittte	gt
 8008b54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b58:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008b5c:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b60:	f1c3 0320 	rsble	r3, r3, #32
 8008b64:	bfc6      	itte	gt
 8008b66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b6a:	4318      	orrgt	r0, r3
 8008b6c:	fa06 f003 	lslle.w	r0, r6, r3
 8008b70:	f7f7 fc38 	bl	80003e4 <__aeabi_ui2d>
 8008b74:	2301      	movs	r3, #1
 8008b76:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008b7a:	3c01      	subs	r4, #1
 8008b7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b7e:	e770      	b.n	8008a62 <_dtoa_r+0x112>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e7b3      	b.n	8008aec <_dtoa_r+0x19c>
 8008b84:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b86:	e7b2      	b.n	8008aee <_dtoa_r+0x19e>
 8008b88:	9b06      	ldr	r3, [sp, #24]
 8008b8a:	eba3 0309 	sub.w	r3, r3, r9
 8008b8e:	9306      	str	r3, [sp, #24]
 8008b90:	f1c9 0300 	rsb	r3, r9, #0
 8008b94:	930a      	str	r3, [sp, #40]	; 0x28
 8008b96:	2300      	movs	r3, #0
 8008b98:	930e      	str	r3, [sp, #56]	; 0x38
 8008b9a:	e7bf      	b.n	8008b1c <_dtoa_r+0x1cc>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dc59      	bgt.n	8008c5a <_dtoa_r+0x30a>
 8008ba6:	f04f 0b01 	mov.w	fp, #1
 8008baa:	465b      	mov	r3, fp
 8008bac:	f8cd b008 	str.w	fp, [sp, #8]
 8008bb0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008bb8:	6042      	str	r2, [r0, #4]
 8008bba:	2204      	movs	r2, #4
 8008bbc:	f102 0614 	add.w	r6, r2, #20
 8008bc0:	429e      	cmp	r6, r3
 8008bc2:	6841      	ldr	r1, [r0, #4]
 8008bc4:	d94f      	bls.n	8008c66 <_dtoa_r+0x316>
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 fdaa 	bl	8009720 <_Balloc>
 8008bcc:	9008      	str	r0, [sp, #32]
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d14d      	bne.n	8008c6e <_dtoa_r+0x31e>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008bd8:	4b1d      	ldr	r3, [pc, #116]	; (8008c50 <_dtoa_r+0x300>)
 8008bda:	e6cd      	b.n	8008978 <_dtoa_r+0x28>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e7de      	b.n	8008b9e <_dtoa_r+0x24e>
 8008be0:	2300      	movs	r3, #0
 8008be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008be4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008be6:	eb09 0b03 	add.w	fp, r9, r3
 8008bea:	f10b 0301 	add.w	r3, fp, #1
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	9302      	str	r3, [sp, #8]
 8008bf2:	bfb8      	it	lt
 8008bf4:	2301      	movlt	r3, #1
 8008bf6:	e7dd      	b.n	8008bb4 <_dtoa_r+0x264>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e7f2      	b.n	8008be2 <_dtoa_r+0x292>
 8008bfc:	2401      	movs	r4, #1
 8008bfe:	2300      	movs	r3, #0
 8008c00:	940b      	str	r4, [sp, #44]	; 0x2c
 8008c02:	9322      	str	r3, [sp, #136]	; 0x88
 8008c04:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2312      	movs	r3, #18
 8008c0c:	f8cd b008 	str.w	fp, [sp, #8]
 8008c10:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c12:	e7cf      	b.n	8008bb4 <_dtoa_r+0x264>
 8008c14:	f3af 8000 	nop.w
 8008c18:	636f4361 	.word	0x636f4361
 8008c1c:	3fd287a7 	.word	0x3fd287a7
 8008c20:	8b60c8b3 	.word	0x8b60c8b3
 8008c24:	3fc68a28 	.word	0x3fc68a28
 8008c28:	509f79fb 	.word	0x509f79fb
 8008c2c:	3fd34413 	.word	0x3fd34413
 8008c30:	0800a725 	.word	0x0800a725
 8008c34:	0800a73c 	.word	0x0800a73c
 8008c38:	7ff00000 	.word	0x7ff00000
 8008c3c:	0800a721 	.word	0x0800a721
 8008c40:	0800a718 	.word	0x0800a718
 8008c44:	0800a6f5 	.word	0x0800a6f5
 8008c48:	3ff80000 	.word	0x3ff80000
 8008c4c:	0800a838 	.word	0x0800a838
 8008c50:	0800a79b 	.word	0x0800a79b
 8008c54:	2301      	movs	r3, #1
 8008c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c58:	e7d4      	b.n	8008c04 <_dtoa_r+0x2b4>
 8008c5a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008c5e:	465b      	mov	r3, fp
 8008c60:	f8cd b008 	str.w	fp, [sp, #8]
 8008c64:	e7a6      	b.n	8008bb4 <_dtoa_r+0x264>
 8008c66:	3101      	adds	r1, #1
 8008c68:	6041      	str	r1, [r0, #4]
 8008c6a:	0052      	lsls	r2, r2, #1
 8008c6c:	e7a6      	b.n	8008bbc <_dtoa_r+0x26c>
 8008c6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c70:	9a08      	ldr	r2, [sp, #32]
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	9b02      	ldr	r3, [sp, #8]
 8008c76:	2b0e      	cmp	r3, #14
 8008c78:	f200 80a8 	bhi.w	8008dcc <_dtoa_r+0x47c>
 8008c7c:	2c00      	cmp	r4, #0
 8008c7e:	f000 80a5 	beq.w	8008dcc <_dtoa_r+0x47c>
 8008c82:	f1b9 0f00 	cmp.w	r9, #0
 8008c86:	dd34      	ble.n	8008cf2 <_dtoa_r+0x3a2>
 8008c88:	4a9a      	ldr	r2, [pc, #616]	; (8008ef4 <_dtoa_r+0x5a4>)
 8008c8a:	f009 030f 	and.w	r3, r9, #15
 8008c8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c92:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008c96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008c9e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008ca2:	d016      	beq.n	8008cd2 <_dtoa_r+0x382>
 8008ca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ca8:	4b93      	ldr	r3, [pc, #588]	; (8008ef8 <_dtoa_r+0x5a8>)
 8008caa:	2703      	movs	r7, #3
 8008cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cb0:	f7f7 fd3c 	bl	800072c <__aeabi_ddiv>
 8008cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cb8:	f004 040f 	and.w	r4, r4, #15
 8008cbc:	4e8e      	ldr	r6, [pc, #568]	; (8008ef8 <_dtoa_r+0x5a8>)
 8008cbe:	b954      	cbnz	r4, 8008cd6 <_dtoa_r+0x386>
 8008cc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cc8:	f7f7 fd30 	bl	800072c <__aeabi_ddiv>
 8008ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cd0:	e029      	b.n	8008d26 <_dtoa_r+0x3d6>
 8008cd2:	2702      	movs	r7, #2
 8008cd4:	e7f2      	b.n	8008cbc <_dtoa_r+0x36c>
 8008cd6:	07e1      	lsls	r1, r4, #31
 8008cd8:	d508      	bpl.n	8008cec <_dtoa_r+0x39c>
 8008cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ce2:	f7f7 fbf9 	bl	80004d8 <__aeabi_dmul>
 8008ce6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cea:	3701      	adds	r7, #1
 8008cec:	1064      	asrs	r4, r4, #1
 8008cee:	3608      	adds	r6, #8
 8008cf0:	e7e5      	b.n	8008cbe <_dtoa_r+0x36e>
 8008cf2:	f000 80a5 	beq.w	8008e40 <_dtoa_r+0x4f0>
 8008cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cfa:	f1c9 0400 	rsb	r4, r9, #0
 8008cfe:	4b7d      	ldr	r3, [pc, #500]	; (8008ef4 <_dtoa_r+0x5a4>)
 8008d00:	f004 020f 	and.w	r2, r4, #15
 8008d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f7f7 fbe4 	bl	80004d8 <__aeabi_dmul>
 8008d10:	2702      	movs	r7, #2
 8008d12:	2300      	movs	r3, #0
 8008d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d18:	4e77      	ldr	r6, [pc, #476]	; (8008ef8 <_dtoa_r+0x5a8>)
 8008d1a:	1124      	asrs	r4, r4, #4
 8008d1c:	2c00      	cmp	r4, #0
 8008d1e:	f040 8084 	bne.w	8008e2a <_dtoa_r+0x4da>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1d2      	bne.n	8008ccc <_dtoa_r+0x37c>
 8008d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 808b 	beq.w	8008e44 <_dtoa_r+0x4f4>
 8008d2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008d36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4b6f      	ldr	r3, [pc, #444]	; (8008efc <_dtoa_r+0x5ac>)
 8008d3e:	f7f7 fe3d 	bl	80009bc <__aeabi_dcmplt>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d07e      	beq.n	8008e44 <_dtoa_r+0x4f4>
 8008d46:	9b02      	ldr	r3, [sp, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d07b      	beq.n	8008e44 <_dtoa_r+0x4f4>
 8008d4c:	f1bb 0f00 	cmp.w	fp, #0
 8008d50:	dd38      	ble.n	8008dc4 <_dtoa_r+0x474>
 8008d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d56:	2200      	movs	r2, #0
 8008d58:	4b69      	ldr	r3, [pc, #420]	; (8008f00 <_dtoa_r+0x5b0>)
 8008d5a:	f7f7 fbbd 	bl	80004d8 <__aeabi_dmul>
 8008d5e:	465c      	mov	r4, fp
 8008d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d64:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8008d68:	3701      	adds	r7, #1
 8008d6a:	4638      	mov	r0, r7
 8008d6c:	f7f7 fb4a 	bl	8000404 <__aeabi_i2d>
 8008d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d74:	f7f7 fbb0 	bl	80004d8 <__aeabi_dmul>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4b62      	ldr	r3, [pc, #392]	; (8008f04 <_dtoa_r+0x5b4>)
 8008d7c:	f7f7 f9f6 	bl	800016c <__adddf3>
 8008d80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008d84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d88:	9611      	str	r6, [sp, #68]	; 0x44
 8008d8a:	2c00      	cmp	r4, #0
 8008d8c:	d15d      	bne.n	8008e4a <_dtoa_r+0x4fa>
 8008d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d92:	2200      	movs	r2, #0
 8008d94:	4b5c      	ldr	r3, [pc, #368]	; (8008f08 <_dtoa_r+0x5b8>)
 8008d96:	f7f7 f9e7 	bl	8000168 <__aeabi_dsub>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008da2:	4633      	mov	r3, r6
 8008da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008da6:	f7f7 fe27 	bl	80009f8 <__aeabi_dcmpgt>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	f040 829e 	bne.w	80092ec <_dtoa_r+0x99c>
 8008db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008db6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008dba:	f7f7 fdff 	bl	80009bc <__aeabi_dcmplt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f040 8292 	bne.w	80092e8 <_dtoa_r+0x998>
 8008dc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008dc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008dcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f2c0 8153 	blt.w	800907a <_dtoa_r+0x72a>
 8008dd4:	f1b9 0f0e 	cmp.w	r9, #14
 8008dd8:	f300 814f 	bgt.w	800907a <_dtoa_r+0x72a>
 8008ddc:	4b45      	ldr	r3, [pc, #276]	; (8008ef4 <_dtoa_r+0x5a4>)
 8008dde:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008de2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008de6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f280 80db 	bge.w	8008fa8 <_dtoa_r+0x658>
 8008df2:	9b02      	ldr	r3, [sp, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f300 80d7 	bgt.w	8008fa8 <_dtoa_r+0x658>
 8008dfa:	f040 8274 	bne.w	80092e6 <_dtoa_r+0x996>
 8008dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e02:	2200      	movs	r2, #0
 8008e04:	4b40      	ldr	r3, [pc, #256]	; (8008f08 <_dtoa_r+0x5b8>)
 8008e06:	f7f7 fb67 	bl	80004d8 <__aeabi_dmul>
 8008e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e0e:	f7f7 fde9 	bl	80009e4 <__aeabi_dcmpge>
 8008e12:	9c02      	ldr	r4, [sp, #8]
 8008e14:	4626      	mov	r6, r4
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f040 824a 	bne.w	80092b0 <_dtoa_r+0x960>
 8008e1c:	2331      	movs	r3, #49	; 0x31
 8008e1e:	9f08      	ldr	r7, [sp, #32]
 8008e20:	f109 0901 	add.w	r9, r9, #1
 8008e24:	f807 3b01 	strb.w	r3, [r7], #1
 8008e28:	e246      	b.n	80092b8 <_dtoa_r+0x968>
 8008e2a:	07e2      	lsls	r2, r4, #31
 8008e2c:	d505      	bpl.n	8008e3a <_dtoa_r+0x4ea>
 8008e2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e32:	f7f7 fb51 	bl	80004d8 <__aeabi_dmul>
 8008e36:	2301      	movs	r3, #1
 8008e38:	3701      	adds	r7, #1
 8008e3a:	1064      	asrs	r4, r4, #1
 8008e3c:	3608      	adds	r6, #8
 8008e3e:	e76d      	b.n	8008d1c <_dtoa_r+0x3cc>
 8008e40:	2702      	movs	r7, #2
 8008e42:	e770      	b.n	8008d26 <_dtoa_r+0x3d6>
 8008e44:	46c8      	mov	r8, r9
 8008e46:	9c02      	ldr	r4, [sp, #8]
 8008e48:	e78f      	b.n	8008d6a <_dtoa_r+0x41a>
 8008e4a:	9908      	ldr	r1, [sp, #32]
 8008e4c:	4b29      	ldr	r3, [pc, #164]	; (8008ef4 <_dtoa_r+0x5a4>)
 8008e4e:	4421      	add	r1, r4
 8008e50:	9112      	str	r1, [sp, #72]	; 0x48
 8008e52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e60:	2900      	cmp	r1, #0
 8008e62:	d055      	beq.n	8008f10 <_dtoa_r+0x5c0>
 8008e64:	2000      	movs	r0, #0
 8008e66:	4929      	ldr	r1, [pc, #164]	; (8008f0c <_dtoa_r+0x5bc>)
 8008e68:	f7f7 fc60 	bl	800072c <__aeabi_ddiv>
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	4632      	mov	r2, r6
 8008e70:	f7f7 f97a 	bl	8000168 <__aeabi_dsub>
 8008e74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e78:	9f08      	ldr	r7, [sp, #32]
 8008e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e7e:	f7f7 fddb 	bl	8000a38 <__aeabi_d2iz>
 8008e82:	4604      	mov	r4, r0
 8008e84:	f7f7 fabe 	bl	8000404 <__aeabi_i2d>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e90:	f7f7 f96a 	bl	8000168 <__aeabi_dsub>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	3430      	adds	r4, #48	; 0x30
 8008e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ea2:	f807 4b01 	strb.w	r4, [r7], #1
 8008ea6:	f7f7 fd89 	bl	80009bc <__aeabi_dcmplt>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d174      	bne.n	8008f98 <_dtoa_r+0x648>
 8008eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	4911      	ldr	r1, [pc, #68]	; (8008efc <_dtoa_r+0x5ac>)
 8008eb6:	f7f7 f957 	bl	8000168 <__aeabi_dsub>
 8008eba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ebe:	f7f7 fd7d 	bl	80009bc <__aeabi_dcmplt>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f040 80b6 	bne.w	8009034 <_dtoa_r+0x6e4>
 8008ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eca:	429f      	cmp	r7, r3
 8008ecc:	f43f af7a 	beq.w	8008dc4 <_dtoa_r+0x474>
 8008ed0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <_dtoa_r+0x5b0>)
 8008ed8:	f7f7 fafe 	bl	80004d8 <__aeabi_dmul>
 8008edc:	2200      	movs	r2, #0
 8008ede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ee6:	4b06      	ldr	r3, [pc, #24]	; (8008f00 <_dtoa_r+0x5b0>)
 8008ee8:	f7f7 faf6 	bl	80004d8 <__aeabi_dmul>
 8008eec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ef0:	e7c3      	b.n	8008e7a <_dtoa_r+0x52a>
 8008ef2:	bf00      	nop
 8008ef4:	0800a838 	.word	0x0800a838
 8008ef8:	0800a810 	.word	0x0800a810
 8008efc:	3ff00000 	.word	0x3ff00000
 8008f00:	40240000 	.word	0x40240000
 8008f04:	401c0000 	.word	0x401c0000
 8008f08:	40140000 	.word	0x40140000
 8008f0c:	3fe00000 	.word	0x3fe00000
 8008f10:	4630      	mov	r0, r6
 8008f12:	4639      	mov	r1, r7
 8008f14:	f7f7 fae0 	bl	80004d8 <__aeabi_dmul>
 8008f18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f1e:	9c08      	ldr	r4, [sp, #32]
 8008f20:	9314      	str	r3, [sp, #80]	; 0x50
 8008f22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f26:	f7f7 fd87 	bl	8000a38 <__aeabi_d2iz>
 8008f2a:	9015      	str	r0, [sp, #84]	; 0x54
 8008f2c:	f7f7 fa6a 	bl	8000404 <__aeabi_i2d>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f38:	f7f7 f916 	bl	8000168 <__aeabi_dsub>
 8008f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f3e:	4606      	mov	r6, r0
 8008f40:	3330      	adds	r3, #48	; 0x30
 8008f42:	f804 3b01 	strb.w	r3, [r4], #1
 8008f46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f48:	460f      	mov	r7, r1
 8008f4a:	429c      	cmp	r4, r3
 8008f4c:	f04f 0200 	mov.w	r2, #0
 8008f50:	d124      	bne.n	8008f9c <_dtoa_r+0x64c>
 8008f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f56:	4bb3      	ldr	r3, [pc, #716]	; (8009224 <_dtoa_r+0x8d4>)
 8008f58:	f7f7 f908 	bl	800016c <__adddf3>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4630      	mov	r0, r6
 8008f62:	4639      	mov	r1, r7
 8008f64:	f7f7 fd48 	bl	80009f8 <__aeabi_dcmpgt>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d162      	bne.n	8009032 <_dtoa_r+0x6e2>
 8008f6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f70:	2000      	movs	r0, #0
 8008f72:	49ac      	ldr	r1, [pc, #688]	; (8009224 <_dtoa_r+0x8d4>)
 8008f74:	f7f7 f8f8 	bl	8000168 <__aeabi_dsub>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4639      	mov	r1, r7
 8008f80:	f7f7 fd1c 	bl	80009bc <__aeabi_dcmplt>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	f43f af1d 	beq.w	8008dc4 <_dtoa_r+0x474>
 8008f8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008f8c:	1e7b      	subs	r3, r7, #1
 8008f8e:	9314      	str	r3, [sp, #80]	; 0x50
 8008f90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008f94:	2b30      	cmp	r3, #48	; 0x30
 8008f96:	d0f8      	beq.n	8008f8a <_dtoa_r+0x63a>
 8008f98:	46c1      	mov	r9, r8
 8008f9a:	e03a      	b.n	8009012 <_dtoa_r+0x6c2>
 8008f9c:	4ba2      	ldr	r3, [pc, #648]	; (8009228 <_dtoa_r+0x8d8>)
 8008f9e:	f7f7 fa9b 	bl	80004d8 <__aeabi_dmul>
 8008fa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fa6:	e7bc      	b.n	8008f22 <_dtoa_r+0x5d2>
 8008fa8:	9f08      	ldr	r7, [sp, #32]
 8008faa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fb2:	f7f7 fbbb 	bl	800072c <__aeabi_ddiv>
 8008fb6:	f7f7 fd3f 	bl	8000a38 <__aeabi_d2iz>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	f7f7 fa22 	bl	8000404 <__aeabi_i2d>
 8008fc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fc4:	f7f7 fa88 	bl	80004d8 <__aeabi_dmul>
 8008fc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4602      	mov	r2, r0
 8008fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fd4:	f7f7 f8c8 	bl	8000168 <__aeabi_dsub>
 8008fd8:	f807 6b01 	strb.w	r6, [r7], #1
 8008fdc:	9e08      	ldr	r6, [sp, #32]
 8008fde:	9b02      	ldr	r3, [sp, #8]
 8008fe0:	1bbe      	subs	r6, r7, r6
 8008fe2:	42b3      	cmp	r3, r6
 8008fe4:	d13a      	bne.n	800905c <_dtoa_r+0x70c>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	f7f7 f8bf 	bl	800016c <__adddf3>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ffa:	f7f7 fcfd 	bl	80009f8 <__aeabi_dcmpgt>
 8008ffe:	bb58      	cbnz	r0, 8009058 <_dtoa_r+0x708>
 8009000:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009008:	f7f7 fcce 	bl	80009a8 <__aeabi_dcmpeq>
 800900c:	b108      	cbz	r0, 8009012 <_dtoa_r+0x6c2>
 800900e:	07e1      	lsls	r1, r4, #31
 8009010:	d422      	bmi.n	8009058 <_dtoa_r+0x708>
 8009012:	4628      	mov	r0, r5
 8009014:	4651      	mov	r1, sl
 8009016:	f000 fbc3 	bl	80097a0 <_Bfree>
 800901a:	2300      	movs	r3, #0
 800901c:	703b      	strb	r3, [r7, #0]
 800901e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009020:	f109 0001 	add.w	r0, r9, #1
 8009024:	6018      	str	r0, [r3, #0]
 8009026:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009028:	2b00      	cmp	r3, #0
 800902a:	f43f acdf 	beq.w	80089ec <_dtoa_r+0x9c>
 800902e:	601f      	str	r7, [r3, #0]
 8009030:	e4dc      	b.n	80089ec <_dtoa_r+0x9c>
 8009032:	4627      	mov	r7, r4
 8009034:	463b      	mov	r3, r7
 8009036:	461f      	mov	r7, r3
 8009038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800903c:	2a39      	cmp	r2, #57	; 0x39
 800903e:	d107      	bne.n	8009050 <_dtoa_r+0x700>
 8009040:	9a08      	ldr	r2, [sp, #32]
 8009042:	429a      	cmp	r2, r3
 8009044:	d1f7      	bne.n	8009036 <_dtoa_r+0x6e6>
 8009046:	2230      	movs	r2, #48	; 0x30
 8009048:	9908      	ldr	r1, [sp, #32]
 800904a:	f108 0801 	add.w	r8, r8, #1
 800904e:	700a      	strb	r2, [r1, #0]
 8009050:	781a      	ldrb	r2, [r3, #0]
 8009052:	3201      	adds	r2, #1
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	e79f      	b.n	8008f98 <_dtoa_r+0x648>
 8009058:	46c8      	mov	r8, r9
 800905a:	e7eb      	b.n	8009034 <_dtoa_r+0x6e4>
 800905c:	2200      	movs	r2, #0
 800905e:	4b72      	ldr	r3, [pc, #456]	; (8009228 <_dtoa_r+0x8d8>)
 8009060:	f7f7 fa3a 	bl	80004d8 <__aeabi_dmul>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800906c:	2200      	movs	r2, #0
 800906e:	2300      	movs	r3, #0
 8009070:	f7f7 fc9a 	bl	80009a8 <__aeabi_dcmpeq>
 8009074:	2800      	cmp	r0, #0
 8009076:	d098      	beq.n	8008faa <_dtoa_r+0x65a>
 8009078:	e7cb      	b.n	8009012 <_dtoa_r+0x6c2>
 800907a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800907c:	2a00      	cmp	r2, #0
 800907e:	f000 80cd 	beq.w	800921c <_dtoa_r+0x8cc>
 8009082:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009084:	2a01      	cmp	r2, #1
 8009086:	f300 80af 	bgt.w	80091e8 <_dtoa_r+0x898>
 800908a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800908c:	2a00      	cmp	r2, #0
 800908e:	f000 80a7 	beq.w	80091e0 <_dtoa_r+0x890>
 8009092:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009096:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009098:	9f06      	ldr	r7, [sp, #24]
 800909a:	9a06      	ldr	r2, [sp, #24]
 800909c:	2101      	movs	r1, #1
 800909e:	441a      	add	r2, r3
 80090a0:	9206      	str	r2, [sp, #24]
 80090a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a4:	4628      	mov	r0, r5
 80090a6:	441a      	add	r2, r3
 80090a8:	9209      	str	r2, [sp, #36]	; 0x24
 80090aa:	f000 fc33 	bl	8009914 <__i2b>
 80090ae:	4606      	mov	r6, r0
 80090b0:	2f00      	cmp	r7, #0
 80090b2:	dd0c      	ble.n	80090ce <_dtoa_r+0x77e>
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	dd09      	ble.n	80090ce <_dtoa_r+0x77e>
 80090ba:	42bb      	cmp	r3, r7
 80090bc:	bfa8      	it	ge
 80090be:	463b      	movge	r3, r7
 80090c0:	9a06      	ldr	r2, [sp, #24]
 80090c2:	1aff      	subs	r7, r7, r3
 80090c4:	1ad2      	subs	r2, r2, r3
 80090c6:	9206      	str	r2, [sp, #24]
 80090c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	9309      	str	r3, [sp, #36]	; 0x24
 80090ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d0:	b1f3      	cbz	r3, 8009110 <_dtoa_r+0x7c0>
 80090d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 80a9 	beq.w	800922c <_dtoa_r+0x8dc>
 80090da:	2c00      	cmp	r4, #0
 80090dc:	dd10      	ble.n	8009100 <_dtoa_r+0x7b0>
 80090de:	4631      	mov	r1, r6
 80090e0:	4622      	mov	r2, r4
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 fcd0 	bl	8009a88 <__pow5mult>
 80090e8:	4652      	mov	r2, sl
 80090ea:	4601      	mov	r1, r0
 80090ec:	4606      	mov	r6, r0
 80090ee:	4628      	mov	r0, r5
 80090f0:	f000 fc26 	bl	8009940 <__multiply>
 80090f4:	4680      	mov	r8, r0
 80090f6:	4651      	mov	r1, sl
 80090f8:	4628      	mov	r0, r5
 80090fa:	f000 fb51 	bl	80097a0 <_Bfree>
 80090fe:	46c2      	mov	sl, r8
 8009100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009102:	1b1a      	subs	r2, r3, r4
 8009104:	d004      	beq.n	8009110 <_dtoa_r+0x7c0>
 8009106:	4651      	mov	r1, sl
 8009108:	4628      	mov	r0, r5
 800910a:	f000 fcbd 	bl	8009a88 <__pow5mult>
 800910e:	4682      	mov	sl, r0
 8009110:	2101      	movs	r1, #1
 8009112:	4628      	mov	r0, r5
 8009114:	f000 fbfe 	bl	8009914 <__i2b>
 8009118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800911a:	4604      	mov	r4, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	f340 8087 	ble.w	8009230 <_dtoa_r+0x8e0>
 8009122:	461a      	mov	r2, r3
 8009124:	4601      	mov	r1, r0
 8009126:	4628      	mov	r0, r5
 8009128:	f000 fcae 	bl	8009a88 <__pow5mult>
 800912c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800912e:	4604      	mov	r4, r0
 8009130:	2b01      	cmp	r3, #1
 8009132:	f340 8080 	ble.w	8009236 <_dtoa_r+0x8e6>
 8009136:	f04f 0800 	mov.w	r8, #0
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009140:	6918      	ldr	r0, [r3, #16]
 8009142:	f000 fb99 	bl	8009878 <__hi0bits>
 8009146:	f1c0 0020 	rsb	r0, r0, #32
 800914a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914c:	4418      	add	r0, r3
 800914e:	f010 001f 	ands.w	r0, r0, #31
 8009152:	f000 8092 	beq.w	800927a <_dtoa_r+0x92a>
 8009156:	f1c0 0320 	rsb	r3, r0, #32
 800915a:	2b04      	cmp	r3, #4
 800915c:	f340 808a 	ble.w	8009274 <_dtoa_r+0x924>
 8009160:	f1c0 001c 	rsb	r0, r0, #28
 8009164:	9b06      	ldr	r3, [sp, #24]
 8009166:	4407      	add	r7, r0
 8009168:	4403      	add	r3, r0
 800916a:	9306      	str	r3, [sp, #24]
 800916c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916e:	4403      	add	r3, r0
 8009170:	9309      	str	r3, [sp, #36]	; 0x24
 8009172:	9b06      	ldr	r3, [sp, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	dd05      	ble.n	8009184 <_dtoa_r+0x834>
 8009178:	4651      	mov	r1, sl
 800917a:	461a      	mov	r2, r3
 800917c:	4628      	mov	r0, r5
 800917e:	f000 fcdd 	bl	8009b3c <__lshift>
 8009182:	4682      	mov	sl, r0
 8009184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	dd05      	ble.n	8009196 <_dtoa_r+0x846>
 800918a:	4621      	mov	r1, r4
 800918c:	461a      	mov	r2, r3
 800918e:	4628      	mov	r0, r5
 8009190:	f000 fcd4 	bl	8009b3c <__lshift>
 8009194:	4604      	mov	r4, r0
 8009196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d070      	beq.n	800927e <_dtoa_r+0x92e>
 800919c:	4621      	mov	r1, r4
 800919e:	4650      	mov	r0, sl
 80091a0:	f000 fd38 	bl	8009c14 <__mcmp>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	da6a      	bge.n	800927e <_dtoa_r+0x92e>
 80091a8:	2300      	movs	r3, #0
 80091aa:	4651      	mov	r1, sl
 80091ac:	220a      	movs	r2, #10
 80091ae:	4628      	mov	r0, r5
 80091b0:	f000 fb18 	bl	80097e4 <__multadd>
 80091b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b6:	4682      	mov	sl, r0
 80091b8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 8193 	beq.w	80094e8 <_dtoa_r+0xb98>
 80091c2:	4631      	mov	r1, r6
 80091c4:	2300      	movs	r3, #0
 80091c6:	220a      	movs	r2, #10
 80091c8:	4628      	mov	r0, r5
 80091ca:	f000 fb0b 	bl	80097e4 <__multadd>
 80091ce:	f1bb 0f00 	cmp.w	fp, #0
 80091d2:	4606      	mov	r6, r0
 80091d4:	f300 8093 	bgt.w	80092fe <_dtoa_r+0x9ae>
 80091d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091da:	2b02      	cmp	r3, #2
 80091dc:	dc57      	bgt.n	800928e <_dtoa_r+0x93e>
 80091de:	e08e      	b.n	80092fe <_dtoa_r+0x9ae>
 80091e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80091e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091e6:	e756      	b.n	8009096 <_dtoa_r+0x746>
 80091e8:	9b02      	ldr	r3, [sp, #8]
 80091ea:	1e5c      	subs	r4, r3, #1
 80091ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ee:	42a3      	cmp	r3, r4
 80091f0:	bfb7      	itett	lt
 80091f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80091f4:	1b1c      	subge	r4, r3, r4
 80091f6:	1ae2      	sublt	r2, r4, r3
 80091f8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80091fa:	bfbe      	ittt	lt
 80091fc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80091fe:	189b      	addlt	r3, r3, r2
 8009200:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009202:	9b02      	ldr	r3, [sp, #8]
 8009204:	bfb8      	it	lt
 8009206:	2400      	movlt	r4, #0
 8009208:	2b00      	cmp	r3, #0
 800920a:	bfbb      	ittet	lt
 800920c:	9b06      	ldrlt	r3, [sp, #24]
 800920e:	9a02      	ldrlt	r2, [sp, #8]
 8009210:	9f06      	ldrge	r7, [sp, #24]
 8009212:	1a9f      	sublt	r7, r3, r2
 8009214:	bfac      	ite	ge
 8009216:	9b02      	ldrge	r3, [sp, #8]
 8009218:	2300      	movlt	r3, #0
 800921a:	e73e      	b.n	800909a <_dtoa_r+0x74a>
 800921c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800921e:	9f06      	ldr	r7, [sp, #24]
 8009220:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009222:	e745      	b.n	80090b0 <_dtoa_r+0x760>
 8009224:	3fe00000 	.word	0x3fe00000
 8009228:	40240000 	.word	0x40240000
 800922c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800922e:	e76a      	b.n	8009106 <_dtoa_r+0x7b6>
 8009230:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009232:	2b01      	cmp	r3, #1
 8009234:	dc19      	bgt.n	800926a <_dtoa_r+0x91a>
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	b9bb      	cbnz	r3, 800926a <_dtoa_r+0x91a>
 800923a:	9b05      	ldr	r3, [sp, #20]
 800923c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009240:	b99b      	cbnz	r3, 800926a <_dtoa_r+0x91a>
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009248:	0d1b      	lsrs	r3, r3, #20
 800924a:	051b      	lsls	r3, r3, #20
 800924c:	b183      	cbz	r3, 8009270 <_dtoa_r+0x920>
 800924e:	f04f 0801 	mov.w	r8, #1
 8009252:	9b06      	ldr	r3, [sp, #24]
 8009254:	3301      	adds	r3, #1
 8009256:	9306      	str	r3, [sp, #24]
 8009258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925a:	3301      	adds	r3, #1
 800925c:	9309      	str	r3, [sp, #36]	; 0x24
 800925e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009260:	2b00      	cmp	r3, #0
 8009262:	f47f af6a 	bne.w	800913a <_dtoa_r+0x7ea>
 8009266:	2001      	movs	r0, #1
 8009268:	e76f      	b.n	800914a <_dtoa_r+0x7fa>
 800926a:	f04f 0800 	mov.w	r8, #0
 800926e:	e7f6      	b.n	800925e <_dtoa_r+0x90e>
 8009270:	4698      	mov	r8, r3
 8009272:	e7f4      	b.n	800925e <_dtoa_r+0x90e>
 8009274:	f43f af7d 	beq.w	8009172 <_dtoa_r+0x822>
 8009278:	4618      	mov	r0, r3
 800927a:	301c      	adds	r0, #28
 800927c:	e772      	b.n	8009164 <_dtoa_r+0x814>
 800927e:	9b02      	ldr	r3, [sp, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	dc36      	bgt.n	80092f2 <_dtoa_r+0x9a2>
 8009284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009286:	2b02      	cmp	r3, #2
 8009288:	dd33      	ble.n	80092f2 <_dtoa_r+0x9a2>
 800928a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800928e:	f1bb 0f00 	cmp.w	fp, #0
 8009292:	d10d      	bne.n	80092b0 <_dtoa_r+0x960>
 8009294:	4621      	mov	r1, r4
 8009296:	465b      	mov	r3, fp
 8009298:	2205      	movs	r2, #5
 800929a:	4628      	mov	r0, r5
 800929c:	f000 faa2 	bl	80097e4 <__multadd>
 80092a0:	4601      	mov	r1, r0
 80092a2:	4604      	mov	r4, r0
 80092a4:	4650      	mov	r0, sl
 80092a6:	f000 fcb5 	bl	8009c14 <__mcmp>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	f73f adb6 	bgt.w	8008e1c <_dtoa_r+0x4cc>
 80092b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092b2:	9f08      	ldr	r7, [sp, #32]
 80092b4:	ea6f 0903 	mvn.w	r9, r3
 80092b8:	f04f 0800 	mov.w	r8, #0
 80092bc:	4621      	mov	r1, r4
 80092be:	4628      	mov	r0, r5
 80092c0:	f000 fa6e 	bl	80097a0 <_Bfree>
 80092c4:	2e00      	cmp	r6, #0
 80092c6:	f43f aea4 	beq.w	8009012 <_dtoa_r+0x6c2>
 80092ca:	f1b8 0f00 	cmp.w	r8, #0
 80092ce:	d005      	beq.n	80092dc <_dtoa_r+0x98c>
 80092d0:	45b0      	cmp	r8, r6
 80092d2:	d003      	beq.n	80092dc <_dtoa_r+0x98c>
 80092d4:	4641      	mov	r1, r8
 80092d6:	4628      	mov	r0, r5
 80092d8:	f000 fa62 	bl	80097a0 <_Bfree>
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 fa5e 	bl	80097a0 <_Bfree>
 80092e4:	e695      	b.n	8009012 <_dtoa_r+0x6c2>
 80092e6:	2400      	movs	r4, #0
 80092e8:	4626      	mov	r6, r4
 80092ea:	e7e1      	b.n	80092b0 <_dtoa_r+0x960>
 80092ec:	46c1      	mov	r9, r8
 80092ee:	4626      	mov	r6, r4
 80092f0:	e594      	b.n	8008e1c <_dtoa_r+0x4cc>
 80092f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 80fc 	beq.w	80094f6 <_dtoa_r+0xba6>
 80092fe:	2f00      	cmp	r7, #0
 8009300:	dd05      	ble.n	800930e <_dtoa_r+0x9be>
 8009302:	4631      	mov	r1, r6
 8009304:	463a      	mov	r2, r7
 8009306:	4628      	mov	r0, r5
 8009308:	f000 fc18 	bl	8009b3c <__lshift>
 800930c:	4606      	mov	r6, r0
 800930e:	f1b8 0f00 	cmp.w	r8, #0
 8009312:	d05c      	beq.n	80093ce <_dtoa_r+0xa7e>
 8009314:	4628      	mov	r0, r5
 8009316:	6871      	ldr	r1, [r6, #4]
 8009318:	f000 fa02 	bl	8009720 <_Balloc>
 800931c:	4607      	mov	r7, r0
 800931e:	b928      	cbnz	r0, 800932c <_dtoa_r+0x9dc>
 8009320:	4602      	mov	r2, r0
 8009322:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009326:	4b7e      	ldr	r3, [pc, #504]	; (8009520 <_dtoa_r+0xbd0>)
 8009328:	f7ff bb26 	b.w	8008978 <_dtoa_r+0x28>
 800932c:	6932      	ldr	r2, [r6, #16]
 800932e:	f106 010c 	add.w	r1, r6, #12
 8009332:	3202      	adds	r2, #2
 8009334:	0092      	lsls	r2, r2, #2
 8009336:	300c      	adds	r0, #12
 8009338:	f7fe fcb3 	bl	8007ca2 <memcpy>
 800933c:	2201      	movs	r2, #1
 800933e:	4639      	mov	r1, r7
 8009340:	4628      	mov	r0, r5
 8009342:	f000 fbfb 	bl	8009b3c <__lshift>
 8009346:	46b0      	mov	r8, r6
 8009348:	4606      	mov	r6, r0
 800934a:	9b08      	ldr	r3, [sp, #32]
 800934c:	3301      	adds	r3, #1
 800934e:	9302      	str	r3, [sp, #8]
 8009350:	9b08      	ldr	r3, [sp, #32]
 8009352:	445b      	add	r3, fp
 8009354:	930a      	str	r3, [sp, #40]	; 0x28
 8009356:	9b04      	ldr	r3, [sp, #16]
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	9309      	str	r3, [sp, #36]	; 0x24
 800935e:	9b02      	ldr	r3, [sp, #8]
 8009360:	4621      	mov	r1, r4
 8009362:	4650      	mov	r0, sl
 8009364:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009368:	f7ff fa64 	bl	8008834 <quorem>
 800936c:	4603      	mov	r3, r0
 800936e:	4641      	mov	r1, r8
 8009370:	3330      	adds	r3, #48	; 0x30
 8009372:	9004      	str	r0, [sp, #16]
 8009374:	4650      	mov	r0, sl
 8009376:	930b      	str	r3, [sp, #44]	; 0x2c
 8009378:	f000 fc4c 	bl	8009c14 <__mcmp>
 800937c:	4632      	mov	r2, r6
 800937e:	9006      	str	r0, [sp, #24]
 8009380:	4621      	mov	r1, r4
 8009382:	4628      	mov	r0, r5
 8009384:	f000 fc62 	bl	8009c4c <__mdiff>
 8009388:	68c2      	ldr	r2, [r0, #12]
 800938a:	4607      	mov	r7, r0
 800938c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800938e:	bb02      	cbnz	r2, 80093d2 <_dtoa_r+0xa82>
 8009390:	4601      	mov	r1, r0
 8009392:	4650      	mov	r0, sl
 8009394:	f000 fc3e 	bl	8009c14 <__mcmp>
 8009398:	4602      	mov	r2, r0
 800939a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800939c:	4639      	mov	r1, r7
 800939e:	4628      	mov	r0, r5
 80093a0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80093a4:	f000 f9fc 	bl	80097a0 <_Bfree>
 80093a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093ac:	9f02      	ldr	r7, [sp, #8]
 80093ae:	ea43 0102 	orr.w	r1, r3, r2
 80093b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b4:	430b      	orrs	r3, r1
 80093b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b8:	d10d      	bne.n	80093d6 <_dtoa_r+0xa86>
 80093ba:	2b39      	cmp	r3, #57	; 0x39
 80093bc:	d027      	beq.n	800940e <_dtoa_r+0xabe>
 80093be:	9a06      	ldr	r2, [sp, #24]
 80093c0:	2a00      	cmp	r2, #0
 80093c2:	dd01      	ble.n	80093c8 <_dtoa_r+0xa78>
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	3331      	adds	r3, #49	; 0x31
 80093c8:	f88b 3000 	strb.w	r3, [fp]
 80093cc:	e776      	b.n	80092bc <_dtoa_r+0x96c>
 80093ce:	4630      	mov	r0, r6
 80093d0:	e7b9      	b.n	8009346 <_dtoa_r+0x9f6>
 80093d2:	2201      	movs	r2, #1
 80093d4:	e7e2      	b.n	800939c <_dtoa_r+0xa4c>
 80093d6:	9906      	ldr	r1, [sp, #24]
 80093d8:	2900      	cmp	r1, #0
 80093da:	db04      	blt.n	80093e6 <_dtoa_r+0xa96>
 80093dc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80093de:	4301      	orrs	r1, r0
 80093e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e2:	4301      	orrs	r1, r0
 80093e4:	d120      	bne.n	8009428 <_dtoa_r+0xad8>
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	ddee      	ble.n	80093c8 <_dtoa_r+0xa78>
 80093ea:	4651      	mov	r1, sl
 80093ec:	2201      	movs	r2, #1
 80093ee:	4628      	mov	r0, r5
 80093f0:	9302      	str	r3, [sp, #8]
 80093f2:	f000 fba3 	bl	8009b3c <__lshift>
 80093f6:	4621      	mov	r1, r4
 80093f8:	4682      	mov	sl, r0
 80093fa:	f000 fc0b 	bl	8009c14 <__mcmp>
 80093fe:	2800      	cmp	r0, #0
 8009400:	9b02      	ldr	r3, [sp, #8]
 8009402:	dc02      	bgt.n	800940a <_dtoa_r+0xaba>
 8009404:	d1e0      	bne.n	80093c8 <_dtoa_r+0xa78>
 8009406:	07da      	lsls	r2, r3, #31
 8009408:	d5de      	bpl.n	80093c8 <_dtoa_r+0xa78>
 800940a:	2b39      	cmp	r3, #57	; 0x39
 800940c:	d1da      	bne.n	80093c4 <_dtoa_r+0xa74>
 800940e:	2339      	movs	r3, #57	; 0x39
 8009410:	f88b 3000 	strb.w	r3, [fp]
 8009414:	463b      	mov	r3, r7
 8009416:	461f      	mov	r7, r3
 8009418:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800941c:	3b01      	subs	r3, #1
 800941e:	2a39      	cmp	r2, #57	; 0x39
 8009420:	d050      	beq.n	80094c4 <_dtoa_r+0xb74>
 8009422:	3201      	adds	r2, #1
 8009424:	701a      	strb	r2, [r3, #0]
 8009426:	e749      	b.n	80092bc <_dtoa_r+0x96c>
 8009428:	2a00      	cmp	r2, #0
 800942a:	dd03      	ble.n	8009434 <_dtoa_r+0xae4>
 800942c:	2b39      	cmp	r3, #57	; 0x39
 800942e:	d0ee      	beq.n	800940e <_dtoa_r+0xabe>
 8009430:	3301      	adds	r3, #1
 8009432:	e7c9      	b.n	80093c8 <_dtoa_r+0xa78>
 8009434:	9a02      	ldr	r2, [sp, #8]
 8009436:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009438:	f802 3c01 	strb.w	r3, [r2, #-1]
 800943c:	428a      	cmp	r2, r1
 800943e:	d02a      	beq.n	8009496 <_dtoa_r+0xb46>
 8009440:	4651      	mov	r1, sl
 8009442:	2300      	movs	r3, #0
 8009444:	220a      	movs	r2, #10
 8009446:	4628      	mov	r0, r5
 8009448:	f000 f9cc 	bl	80097e4 <__multadd>
 800944c:	45b0      	cmp	r8, r6
 800944e:	4682      	mov	sl, r0
 8009450:	f04f 0300 	mov.w	r3, #0
 8009454:	f04f 020a 	mov.w	r2, #10
 8009458:	4641      	mov	r1, r8
 800945a:	4628      	mov	r0, r5
 800945c:	d107      	bne.n	800946e <_dtoa_r+0xb1e>
 800945e:	f000 f9c1 	bl	80097e4 <__multadd>
 8009462:	4680      	mov	r8, r0
 8009464:	4606      	mov	r6, r0
 8009466:	9b02      	ldr	r3, [sp, #8]
 8009468:	3301      	adds	r3, #1
 800946a:	9302      	str	r3, [sp, #8]
 800946c:	e777      	b.n	800935e <_dtoa_r+0xa0e>
 800946e:	f000 f9b9 	bl	80097e4 <__multadd>
 8009472:	4631      	mov	r1, r6
 8009474:	4680      	mov	r8, r0
 8009476:	2300      	movs	r3, #0
 8009478:	220a      	movs	r2, #10
 800947a:	4628      	mov	r0, r5
 800947c:	f000 f9b2 	bl	80097e4 <__multadd>
 8009480:	4606      	mov	r6, r0
 8009482:	e7f0      	b.n	8009466 <_dtoa_r+0xb16>
 8009484:	f1bb 0f00 	cmp.w	fp, #0
 8009488:	bfcc      	ite	gt
 800948a:	465f      	movgt	r7, fp
 800948c:	2701      	movle	r7, #1
 800948e:	f04f 0800 	mov.w	r8, #0
 8009492:	9a08      	ldr	r2, [sp, #32]
 8009494:	4417      	add	r7, r2
 8009496:	4651      	mov	r1, sl
 8009498:	2201      	movs	r2, #1
 800949a:	4628      	mov	r0, r5
 800949c:	9302      	str	r3, [sp, #8]
 800949e:	f000 fb4d 	bl	8009b3c <__lshift>
 80094a2:	4621      	mov	r1, r4
 80094a4:	4682      	mov	sl, r0
 80094a6:	f000 fbb5 	bl	8009c14 <__mcmp>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	dcb2      	bgt.n	8009414 <_dtoa_r+0xac4>
 80094ae:	d102      	bne.n	80094b6 <_dtoa_r+0xb66>
 80094b0:	9b02      	ldr	r3, [sp, #8]
 80094b2:	07db      	lsls	r3, r3, #31
 80094b4:	d4ae      	bmi.n	8009414 <_dtoa_r+0xac4>
 80094b6:	463b      	mov	r3, r7
 80094b8:	461f      	mov	r7, r3
 80094ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094be:	2a30      	cmp	r2, #48	; 0x30
 80094c0:	d0fa      	beq.n	80094b8 <_dtoa_r+0xb68>
 80094c2:	e6fb      	b.n	80092bc <_dtoa_r+0x96c>
 80094c4:	9a08      	ldr	r2, [sp, #32]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d1a5      	bne.n	8009416 <_dtoa_r+0xac6>
 80094ca:	2331      	movs	r3, #49	; 0x31
 80094cc:	f109 0901 	add.w	r9, r9, #1
 80094d0:	7013      	strb	r3, [r2, #0]
 80094d2:	e6f3      	b.n	80092bc <_dtoa_r+0x96c>
 80094d4:	4b13      	ldr	r3, [pc, #76]	; (8009524 <_dtoa_r+0xbd4>)
 80094d6:	f7ff baa7 	b.w	8008a28 <_dtoa_r+0xd8>
 80094da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f47f aa80 	bne.w	80089e2 <_dtoa_r+0x92>
 80094e2:	4b11      	ldr	r3, [pc, #68]	; (8009528 <_dtoa_r+0xbd8>)
 80094e4:	f7ff baa0 	b.w	8008a28 <_dtoa_r+0xd8>
 80094e8:	f1bb 0f00 	cmp.w	fp, #0
 80094ec:	dc03      	bgt.n	80094f6 <_dtoa_r+0xba6>
 80094ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	f73f aecc 	bgt.w	800928e <_dtoa_r+0x93e>
 80094f6:	9f08      	ldr	r7, [sp, #32]
 80094f8:	4621      	mov	r1, r4
 80094fa:	4650      	mov	r0, sl
 80094fc:	f7ff f99a 	bl	8008834 <quorem>
 8009500:	9a08      	ldr	r2, [sp, #32]
 8009502:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009506:	f807 3b01 	strb.w	r3, [r7], #1
 800950a:	1aba      	subs	r2, r7, r2
 800950c:	4593      	cmp	fp, r2
 800950e:	ddb9      	ble.n	8009484 <_dtoa_r+0xb34>
 8009510:	4651      	mov	r1, sl
 8009512:	2300      	movs	r3, #0
 8009514:	220a      	movs	r2, #10
 8009516:	4628      	mov	r0, r5
 8009518:	f000 f964 	bl	80097e4 <__multadd>
 800951c:	4682      	mov	sl, r0
 800951e:	e7eb      	b.n	80094f8 <_dtoa_r+0xba8>
 8009520:	0800a79b 	.word	0x0800a79b
 8009524:	0800a6f4 	.word	0x0800a6f4
 8009528:	0800a718 	.word	0x0800a718

0800952c <__sflush_r>:
 800952c:	898a      	ldrh	r2, [r1, #12]
 800952e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009532:	4605      	mov	r5, r0
 8009534:	0710      	lsls	r0, r2, #28
 8009536:	460c      	mov	r4, r1
 8009538:	d458      	bmi.n	80095ec <__sflush_r+0xc0>
 800953a:	684b      	ldr	r3, [r1, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	dc05      	bgt.n	800954c <__sflush_r+0x20>
 8009540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	dc02      	bgt.n	800954c <__sflush_r+0x20>
 8009546:	2000      	movs	r0, #0
 8009548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800954c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800954e:	2e00      	cmp	r6, #0
 8009550:	d0f9      	beq.n	8009546 <__sflush_r+0x1a>
 8009552:	2300      	movs	r3, #0
 8009554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009558:	682f      	ldr	r7, [r5, #0]
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	d032      	beq.n	80095c4 <__sflush_r+0x98>
 800955e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	075a      	lsls	r2, r3, #29
 8009564:	d505      	bpl.n	8009572 <__sflush_r+0x46>
 8009566:	6863      	ldr	r3, [r4, #4]
 8009568:	1ac0      	subs	r0, r0, r3
 800956a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800956c:	b10b      	cbz	r3, 8009572 <__sflush_r+0x46>
 800956e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009570:	1ac0      	subs	r0, r0, r3
 8009572:	2300      	movs	r3, #0
 8009574:	4602      	mov	r2, r0
 8009576:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009578:	4628      	mov	r0, r5
 800957a:	6a21      	ldr	r1, [r4, #32]
 800957c:	47b0      	blx	r6
 800957e:	1c43      	adds	r3, r0, #1
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	d106      	bne.n	8009592 <__sflush_r+0x66>
 8009584:	6829      	ldr	r1, [r5, #0]
 8009586:	291d      	cmp	r1, #29
 8009588:	d82c      	bhi.n	80095e4 <__sflush_r+0xb8>
 800958a:	4a2a      	ldr	r2, [pc, #168]	; (8009634 <__sflush_r+0x108>)
 800958c:	40ca      	lsrs	r2, r1
 800958e:	07d6      	lsls	r6, r2, #31
 8009590:	d528      	bpl.n	80095e4 <__sflush_r+0xb8>
 8009592:	2200      	movs	r2, #0
 8009594:	6062      	str	r2, [r4, #4]
 8009596:	6922      	ldr	r2, [r4, #16]
 8009598:	04d9      	lsls	r1, r3, #19
 800959a:	6022      	str	r2, [r4, #0]
 800959c:	d504      	bpl.n	80095a8 <__sflush_r+0x7c>
 800959e:	1c42      	adds	r2, r0, #1
 80095a0:	d101      	bne.n	80095a6 <__sflush_r+0x7a>
 80095a2:	682b      	ldr	r3, [r5, #0]
 80095a4:	b903      	cbnz	r3, 80095a8 <__sflush_r+0x7c>
 80095a6:	6560      	str	r0, [r4, #84]	; 0x54
 80095a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095aa:	602f      	str	r7, [r5, #0]
 80095ac:	2900      	cmp	r1, #0
 80095ae:	d0ca      	beq.n	8009546 <__sflush_r+0x1a>
 80095b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095b4:	4299      	cmp	r1, r3
 80095b6:	d002      	beq.n	80095be <__sflush_r+0x92>
 80095b8:	4628      	mov	r0, r5
 80095ba:	f000 fc41 	bl	8009e40 <_free_r>
 80095be:	2000      	movs	r0, #0
 80095c0:	6360      	str	r0, [r4, #52]	; 0x34
 80095c2:	e7c1      	b.n	8009548 <__sflush_r+0x1c>
 80095c4:	6a21      	ldr	r1, [r4, #32]
 80095c6:	2301      	movs	r3, #1
 80095c8:	4628      	mov	r0, r5
 80095ca:	47b0      	blx	r6
 80095cc:	1c41      	adds	r1, r0, #1
 80095ce:	d1c7      	bne.n	8009560 <__sflush_r+0x34>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0c4      	beq.n	8009560 <__sflush_r+0x34>
 80095d6:	2b1d      	cmp	r3, #29
 80095d8:	d001      	beq.n	80095de <__sflush_r+0xb2>
 80095da:	2b16      	cmp	r3, #22
 80095dc:	d101      	bne.n	80095e2 <__sflush_r+0xb6>
 80095de:	602f      	str	r7, [r5, #0]
 80095e0:	e7b1      	b.n	8009546 <__sflush_r+0x1a>
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	e7ad      	b.n	8009548 <__sflush_r+0x1c>
 80095ec:	690f      	ldr	r7, [r1, #16]
 80095ee:	2f00      	cmp	r7, #0
 80095f0:	d0a9      	beq.n	8009546 <__sflush_r+0x1a>
 80095f2:	0793      	lsls	r3, r2, #30
 80095f4:	bf18      	it	ne
 80095f6:	2300      	movne	r3, #0
 80095f8:	680e      	ldr	r6, [r1, #0]
 80095fa:	bf08      	it	eq
 80095fc:	694b      	ldreq	r3, [r1, #20]
 80095fe:	eba6 0807 	sub.w	r8, r6, r7
 8009602:	600f      	str	r7, [r1, #0]
 8009604:	608b      	str	r3, [r1, #8]
 8009606:	f1b8 0f00 	cmp.w	r8, #0
 800960a:	dd9c      	ble.n	8009546 <__sflush_r+0x1a>
 800960c:	4643      	mov	r3, r8
 800960e:	463a      	mov	r2, r7
 8009610:	4628      	mov	r0, r5
 8009612:	6a21      	ldr	r1, [r4, #32]
 8009614:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009616:	47b0      	blx	r6
 8009618:	2800      	cmp	r0, #0
 800961a:	dc06      	bgt.n	800962a <__sflush_r+0xfe>
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	e78e      	b.n	8009548 <__sflush_r+0x1c>
 800962a:	4407      	add	r7, r0
 800962c:	eba8 0800 	sub.w	r8, r8, r0
 8009630:	e7e9      	b.n	8009606 <__sflush_r+0xda>
 8009632:	bf00      	nop
 8009634:	20400001 	.word	0x20400001

08009638 <_fflush_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	690b      	ldr	r3, [r1, #16]
 800963c:	4605      	mov	r5, r0
 800963e:	460c      	mov	r4, r1
 8009640:	b913      	cbnz	r3, 8009648 <_fflush_r+0x10>
 8009642:	2500      	movs	r5, #0
 8009644:	4628      	mov	r0, r5
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	b118      	cbz	r0, 8009652 <_fflush_r+0x1a>
 800964a:	6983      	ldr	r3, [r0, #24]
 800964c:	b90b      	cbnz	r3, 8009652 <_fflush_r+0x1a>
 800964e:	f7fe fa63 	bl	8007b18 <__sinit>
 8009652:	4b14      	ldr	r3, [pc, #80]	; (80096a4 <_fflush_r+0x6c>)
 8009654:	429c      	cmp	r4, r3
 8009656:	d11b      	bne.n	8009690 <_fflush_r+0x58>
 8009658:	686c      	ldr	r4, [r5, #4]
 800965a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d0ef      	beq.n	8009642 <_fflush_r+0xa>
 8009662:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009664:	07d0      	lsls	r0, r2, #31
 8009666:	d404      	bmi.n	8009672 <_fflush_r+0x3a>
 8009668:	0599      	lsls	r1, r3, #22
 800966a:	d402      	bmi.n	8009672 <_fflush_r+0x3a>
 800966c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800966e:	f7fe fb16 	bl	8007c9e <__retarget_lock_acquire_recursive>
 8009672:	4628      	mov	r0, r5
 8009674:	4621      	mov	r1, r4
 8009676:	f7ff ff59 	bl	800952c <__sflush_r>
 800967a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800967c:	4605      	mov	r5, r0
 800967e:	07da      	lsls	r2, r3, #31
 8009680:	d4e0      	bmi.n	8009644 <_fflush_r+0xc>
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	059b      	lsls	r3, r3, #22
 8009686:	d4dd      	bmi.n	8009644 <_fflush_r+0xc>
 8009688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800968a:	f7fe fb09 	bl	8007ca0 <__retarget_lock_release_recursive>
 800968e:	e7d9      	b.n	8009644 <_fflush_r+0xc>
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <_fflush_r+0x70>)
 8009692:	429c      	cmp	r4, r3
 8009694:	d101      	bne.n	800969a <_fflush_r+0x62>
 8009696:	68ac      	ldr	r4, [r5, #8]
 8009698:	e7df      	b.n	800965a <_fflush_r+0x22>
 800969a:	4b04      	ldr	r3, [pc, #16]	; (80096ac <_fflush_r+0x74>)
 800969c:	429c      	cmp	r4, r3
 800969e:	bf08      	it	eq
 80096a0:	68ec      	ldreq	r4, [r5, #12]
 80096a2:	e7da      	b.n	800965a <_fflush_r+0x22>
 80096a4:	0800a6a0 	.word	0x0800a6a0
 80096a8:	0800a6c0 	.word	0x0800a6c0
 80096ac:	0800a680 	.word	0x0800a680

080096b0 <_localeconv_r>:
 80096b0:	4800      	ldr	r0, [pc, #0]	; (80096b4 <_localeconv_r+0x4>)
 80096b2:	4770      	bx	lr
 80096b4:	2000016c 	.word	0x2000016c

080096b8 <_lseek_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	4611      	mov	r1, r2
 80096c0:	2200      	movs	r2, #0
 80096c2:	4d05      	ldr	r5, [pc, #20]	; (80096d8 <_lseek_r+0x20>)
 80096c4:	602a      	str	r2, [r5, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	f7f8 fb16 	bl	8001cf8 <_lseek>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d102      	bne.n	80096d6 <_lseek_r+0x1e>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	b103      	cbz	r3, 80096d6 <_lseek_r+0x1e>
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	20001dac 	.word	0x20001dac

080096dc <malloc>:
 80096dc:	4b02      	ldr	r3, [pc, #8]	; (80096e8 <malloc+0xc>)
 80096de:	4601      	mov	r1, r0
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	f7fe baf5 	b.w	8007cd0 <_malloc_r>
 80096e6:	bf00      	nop
 80096e8:	20000018 	.word	0x20000018

080096ec <memchr>:
 80096ec:	4603      	mov	r3, r0
 80096ee:	b510      	push	{r4, lr}
 80096f0:	b2c9      	uxtb	r1, r1
 80096f2:	4402      	add	r2, r0
 80096f4:	4293      	cmp	r3, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	d101      	bne.n	80096fe <memchr+0x12>
 80096fa:	2000      	movs	r0, #0
 80096fc:	e003      	b.n	8009706 <memchr+0x1a>
 80096fe:	7804      	ldrb	r4, [r0, #0]
 8009700:	3301      	adds	r3, #1
 8009702:	428c      	cmp	r4, r1
 8009704:	d1f6      	bne.n	80096f4 <memchr+0x8>
 8009706:	bd10      	pop	{r4, pc}

08009708 <__malloc_lock>:
 8009708:	4801      	ldr	r0, [pc, #4]	; (8009710 <__malloc_lock+0x8>)
 800970a:	f7fe bac8 	b.w	8007c9e <__retarget_lock_acquire_recursive>
 800970e:	bf00      	nop
 8009710:	20001da4 	.word	0x20001da4

08009714 <__malloc_unlock>:
 8009714:	4801      	ldr	r0, [pc, #4]	; (800971c <__malloc_unlock+0x8>)
 8009716:	f7fe bac3 	b.w	8007ca0 <__retarget_lock_release_recursive>
 800971a:	bf00      	nop
 800971c:	20001da4 	.word	0x20001da4

08009720 <_Balloc>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009724:	4604      	mov	r4, r0
 8009726:	460d      	mov	r5, r1
 8009728:	b976      	cbnz	r6, 8009748 <_Balloc+0x28>
 800972a:	2010      	movs	r0, #16
 800972c:	f7ff ffd6 	bl	80096dc <malloc>
 8009730:	4602      	mov	r2, r0
 8009732:	6260      	str	r0, [r4, #36]	; 0x24
 8009734:	b920      	cbnz	r0, 8009740 <_Balloc+0x20>
 8009736:	2166      	movs	r1, #102	; 0x66
 8009738:	4b17      	ldr	r3, [pc, #92]	; (8009798 <_Balloc+0x78>)
 800973a:	4818      	ldr	r0, [pc, #96]	; (800979c <_Balloc+0x7c>)
 800973c:	f000 fdf6 	bl	800a32c <__assert_func>
 8009740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009744:	6006      	str	r6, [r0, #0]
 8009746:	60c6      	str	r6, [r0, #12]
 8009748:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800974a:	68f3      	ldr	r3, [r6, #12]
 800974c:	b183      	cbz	r3, 8009770 <_Balloc+0x50>
 800974e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009756:	b9b8      	cbnz	r0, 8009788 <_Balloc+0x68>
 8009758:	2101      	movs	r1, #1
 800975a:	fa01 f605 	lsl.w	r6, r1, r5
 800975e:	1d72      	adds	r2, r6, #5
 8009760:	4620      	mov	r0, r4
 8009762:	0092      	lsls	r2, r2, #2
 8009764:	f000 fb5e 	bl	8009e24 <_calloc_r>
 8009768:	b160      	cbz	r0, 8009784 <_Balloc+0x64>
 800976a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800976e:	e00e      	b.n	800978e <_Balloc+0x6e>
 8009770:	2221      	movs	r2, #33	; 0x21
 8009772:	2104      	movs	r1, #4
 8009774:	4620      	mov	r0, r4
 8009776:	f000 fb55 	bl	8009e24 <_calloc_r>
 800977a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800977c:	60f0      	str	r0, [r6, #12]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e4      	bne.n	800974e <_Balloc+0x2e>
 8009784:	2000      	movs	r0, #0
 8009786:	bd70      	pop	{r4, r5, r6, pc}
 8009788:	6802      	ldr	r2, [r0, #0]
 800978a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800978e:	2300      	movs	r3, #0
 8009790:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009794:	e7f7      	b.n	8009786 <_Balloc+0x66>
 8009796:	bf00      	nop
 8009798:	0800a725 	.word	0x0800a725
 800979c:	0800a7ac 	.word	0x0800a7ac

080097a0 <_Bfree>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097a4:	4605      	mov	r5, r0
 80097a6:	460c      	mov	r4, r1
 80097a8:	b976      	cbnz	r6, 80097c8 <_Bfree+0x28>
 80097aa:	2010      	movs	r0, #16
 80097ac:	f7ff ff96 	bl	80096dc <malloc>
 80097b0:	4602      	mov	r2, r0
 80097b2:	6268      	str	r0, [r5, #36]	; 0x24
 80097b4:	b920      	cbnz	r0, 80097c0 <_Bfree+0x20>
 80097b6:	218a      	movs	r1, #138	; 0x8a
 80097b8:	4b08      	ldr	r3, [pc, #32]	; (80097dc <_Bfree+0x3c>)
 80097ba:	4809      	ldr	r0, [pc, #36]	; (80097e0 <_Bfree+0x40>)
 80097bc:	f000 fdb6 	bl	800a32c <__assert_func>
 80097c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097c4:	6006      	str	r6, [r0, #0]
 80097c6:	60c6      	str	r6, [r0, #12]
 80097c8:	b13c      	cbz	r4, 80097da <_Bfree+0x3a>
 80097ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097cc:	6862      	ldr	r2, [r4, #4]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097d4:	6021      	str	r1, [r4, #0]
 80097d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	0800a725 	.word	0x0800a725
 80097e0:	0800a7ac 	.word	0x0800a7ac

080097e4 <__multadd>:
 80097e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e8:	4698      	mov	r8, r3
 80097ea:	460c      	mov	r4, r1
 80097ec:	2300      	movs	r3, #0
 80097ee:	690e      	ldr	r6, [r1, #16]
 80097f0:	4607      	mov	r7, r0
 80097f2:	f101 0014 	add.w	r0, r1, #20
 80097f6:	6805      	ldr	r5, [r0, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	b2a9      	uxth	r1, r5
 80097fc:	fb02 8101 	mla	r1, r2, r1, r8
 8009800:	0c2d      	lsrs	r5, r5, #16
 8009802:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009806:	fb02 c505 	mla	r5, r2, r5, ip
 800980a:	b289      	uxth	r1, r1
 800980c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009810:	429e      	cmp	r6, r3
 8009812:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009816:	f840 1b04 	str.w	r1, [r0], #4
 800981a:	dcec      	bgt.n	80097f6 <__multadd+0x12>
 800981c:	f1b8 0f00 	cmp.w	r8, #0
 8009820:	d022      	beq.n	8009868 <__multadd+0x84>
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	42b3      	cmp	r3, r6
 8009826:	dc19      	bgt.n	800985c <__multadd+0x78>
 8009828:	6861      	ldr	r1, [r4, #4]
 800982a:	4638      	mov	r0, r7
 800982c:	3101      	adds	r1, #1
 800982e:	f7ff ff77 	bl	8009720 <_Balloc>
 8009832:	4605      	mov	r5, r0
 8009834:	b928      	cbnz	r0, 8009842 <__multadd+0x5e>
 8009836:	4602      	mov	r2, r0
 8009838:	21b5      	movs	r1, #181	; 0xb5
 800983a:	4b0d      	ldr	r3, [pc, #52]	; (8009870 <__multadd+0x8c>)
 800983c:	480d      	ldr	r0, [pc, #52]	; (8009874 <__multadd+0x90>)
 800983e:	f000 fd75 	bl	800a32c <__assert_func>
 8009842:	6922      	ldr	r2, [r4, #16]
 8009844:	f104 010c 	add.w	r1, r4, #12
 8009848:	3202      	adds	r2, #2
 800984a:	0092      	lsls	r2, r2, #2
 800984c:	300c      	adds	r0, #12
 800984e:	f7fe fa28 	bl	8007ca2 <memcpy>
 8009852:	4621      	mov	r1, r4
 8009854:	4638      	mov	r0, r7
 8009856:	f7ff ffa3 	bl	80097a0 <_Bfree>
 800985a:	462c      	mov	r4, r5
 800985c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009860:	3601      	adds	r6, #1
 8009862:	f8c3 8014 	str.w	r8, [r3, #20]
 8009866:	6126      	str	r6, [r4, #16]
 8009868:	4620      	mov	r0, r4
 800986a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986e:	bf00      	nop
 8009870:	0800a79b 	.word	0x0800a79b
 8009874:	0800a7ac 	.word	0x0800a7ac

08009878 <__hi0bits>:
 8009878:	0c02      	lsrs	r2, r0, #16
 800987a:	0412      	lsls	r2, r2, #16
 800987c:	4603      	mov	r3, r0
 800987e:	b9ca      	cbnz	r2, 80098b4 <__hi0bits+0x3c>
 8009880:	0403      	lsls	r3, r0, #16
 8009882:	2010      	movs	r0, #16
 8009884:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009888:	bf04      	itt	eq
 800988a:	021b      	lsleq	r3, r3, #8
 800988c:	3008      	addeq	r0, #8
 800988e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009892:	bf04      	itt	eq
 8009894:	011b      	lsleq	r3, r3, #4
 8009896:	3004      	addeq	r0, #4
 8009898:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800989c:	bf04      	itt	eq
 800989e:	009b      	lsleq	r3, r3, #2
 80098a0:	3002      	addeq	r0, #2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	db05      	blt.n	80098b2 <__hi0bits+0x3a>
 80098a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80098aa:	f100 0001 	add.w	r0, r0, #1
 80098ae:	bf08      	it	eq
 80098b0:	2020      	moveq	r0, #32
 80098b2:	4770      	bx	lr
 80098b4:	2000      	movs	r0, #0
 80098b6:	e7e5      	b.n	8009884 <__hi0bits+0xc>

080098b8 <__lo0bits>:
 80098b8:	6803      	ldr	r3, [r0, #0]
 80098ba:	4602      	mov	r2, r0
 80098bc:	f013 0007 	ands.w	r0, r3, #7
 80098c0:	d00b      	beq.n	80098da <__lo0bits+0x22>
 80098c2:	07d9      	lsls	r1, r3, #31
 80098c4:	d422      	bmi.n	800990c <__lo0bits+0x54>
 80098c6:	0798      	lsls	r0, r3, #30
 80098c8:	bf49      	itett	mi
 80098ca:	085b      	lsrmi	r3, r3, #1
 80098cc:	089b      	lsrpl	r3, r3, #2
 80098ce:	2001      	movmi	r0, #1
 80098d0:	6013      	strmi	r3, [r2, #0]
 80098d2:	bf5c      	itt	pl
 80098d4:	2002      	movpl	r0, #2
 80098d6:	6013      	strpl	r3, [r2, #0]
 80098d8:	4770      	bx	lr
 80098da:	b299      	uxth	r1, r3
 80098dc:	b909      	cbnz	r1, 80098e2 <__lo0bits+0x2a>
 80098de:	2010      	movs	r0, #16
 80098e0:	0c1b      	lsrs	r3, r3, #16
 80098e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098e6:	bf04      	itt	eq
 80098e8:	0a1b      	lsreq	r3, r3, #8
 80098ea:	3008      	addeq	r0, #8
 80098ec:	0719      	lsls	r1, r3, #28
 80098ee:	bf04      	itt	eq
 80098f0:	091b      	lsreq	r3, r3, #4
 80098f2:	3004      	addeq	r0, #4
 80098f4:	0799      	lsls	r1, r3, #30
 80098f6:	bf04      	itt	eq
 80098f8:	089b      	lsreq	r3, r3, #2
 80098fa:	3002      	addeq	r0, #2
 80098fc:	07d9      	lsls	r1, r3, #31
 80098fe:	d403      	bmi.n	8009908 <__lo0bits+0x50>
 8009900:	085b      	lsrs	r3, r3, #1
 8009902:	f100 0001 	add.w	r0, r0, #1
 8009906:	d003      	beq.n	8009910 <__lo0bits+0x58>
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	4770      	bx	lr
 800990c:	2000      	movs	r0, #0
 800990e:	4770      	bx	lr
 8009910:	2020      	movs	r0, #32
 8009912:	4770      	bx	lr

08009914 <__i2b>:
 8009914:	b510      	push	{r4, lr}
 8009916:	460c      	mov	r4, r1
 8009918:	2101      	movs	r1, #1
 800991a:	f7ff ff01 	bl	8009720 <_Balloc>
 800991e:	4602      	mov	r2, r0
 8009920:	b928      	cbnz	r0, 800992e <__i2b+0x1a>
 8009922:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009926:	4b04      	ldr	r3, [pc, #16]	; (8009938 <__i2b+0x24>)
 8009928:	4804      	ldr	r0, [pc, #16]	; (800993c <__i2b+0x28>)
 800992a:	f000 fcff 	bl	800a32c <__assert_func>
 800992e:	2301      	movs	r3, #1
 8009930:	6144      	str	r4, [r0, #20]
 8009932:	6103      	str	r3, [r0, #16]
 8009934:	bd10      	pop	{r4, pc}
 8009936:	bf00      	nop
 8009938:	0800a79b 	.word	0x0800a79b
 800993c:	0800a7ac 	.word	0x0800a7ac

08009940 <__multiply>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	4614      	mov	r4, r2
 8009946:	690a      	ldr	r2, [r1, #16]
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	460d      	mov	r5, r1
 800994c:	429a      	cmp	r2, r3
 800994e:	bfbe      	ittt	lt
 8009950:	460b      	movlt	r3, r1
 8009952:	4625      	movlt	r5, r4
 8009954:	461c      	movlt	r4, r3
 8009956:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800995a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800995e:	68ab      	ldr	r3, [r5, #8]
 8009960:	6869      	ldr	r1, [r5, #4]
 8009962:	eb0a 0709 	add.w	r7, sl, r9
 8009966:	42bb      	cmp	r3, r7
 8009968:	b085      	sub	sp, #20
 800996a:	bfb8      	it	lt
 800996c:	3101      	addlt	r1, #1
 800996e:	f7ff fed7 	bl	8009720 <_Balloc>
 8009972:	b930      	cbnz	r0, 8009982 <__multiply+0x42>
 8009974:	4602      	mov	r2, r0
 8009976:	f240 115d 	movw	r1, #349	; 0x15d
 800997a:	4b41      	ldr	r3, [pc, #260]	; (8009a80 <__multiply+0x140>)
 800997c:	4841      	ldr	r0, [pc, #260]	; (8009a84 <__multiply+0x144>)
 800997e:	f000 fcd5 	bl	800a32c <__assert_func>
 8009982:	f100 0614 	add.w	r6, r0, #20
 8009986:	4633      	mov	r3, r6
 8009988:	2200      	movs	r2, #0
 800998a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800998e:	4543      	cmp	r3, r8
 8009990:	d31e      	bcc.n	80099d0 <__multiply+0x90>
 8009992:	f105 0c14 	add.w	ip, r5, #20
 8009996:	f104 0314 	add.w	r3, r4, #20
 800999a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800999e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80099a2:	9202      	str	r2, [sp, #8]
 80099a4:	ebac 0205 	sub.w	r2, ip, r5
 80099a8:	3a15      	subs	r2, #21
 80099aa:	f022 0203 	bic.w	r2, r2, #3
 80099ae:	3204      	adds	r2, #4
 80099b0:	f105 0115 	add.w	r1, r5, #21
 80099b4:	458c      	cmp	ip, r1
 80099b6:	bf38      	it	cc
 80099b8:	2204      	movcc	r2, #4
 80099ba:	9201      	str	r2, [sp, #4]
 80099bc:	9a02      	ldr	r2, [sp, #8]
 80099be:	9303      	str	r3, [sp, #12]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d808      	bhi.n	80099d6 <__multiply+0x96>
 80099c4:	2f00      	cmp	r7, #0
 80099c6:	dc55      	bgt.n	8009a74 <__multiply+0x134>
 80099c8:	6107      	str	r7, [r0, #16]
 80099ca:	b005      	add	sp, #20
 80099cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d0:	f843 2b04 	str.w	r2, [r3], #4
 80099d4:	e7db      	b.n	800998e <__multiply+0x4e>
 80099d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80099da:	f1ba 0f00 	cmp.w	sl, #0
 80099de:	d020      	beq.n	8009a22 <__multiply+0xe2>
 80099e0:	46b1      	mov	r9, r6
 80099e2:	2200      	movs	r2, #0
 80099e4:	f105 0e14 	add.w	lr, r5, #20
 80099e8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80099ec:	f8d9 b000 	ldr.w	fp, [r9]
 80099f0:	b2a1      	uxth	r1, r4
 80099f2:	fa1f fb8b 	uxth.w	fp, fp
 80099f6:	fb0a b101 	mla	r1, sl, r1, fp
 80099fa:	4411      	add	r1, r2
 80099fc:	f8d9 2000 	ldr.w	r2, [r9]
 8009a00:	0c24      	lsrs	r4, r4, #16
 8009a02:	0c12      	lsrs	r2, r2, #16
 8009a04:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a08:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a0c:	b289      	uxth	r1, r1
 8009a0e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a12:	45f4      	cmp	ip, lr
 8009a14:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a18:	f849 1b04 	str.w	r1, [r9], #4
 8009a1c:	d8e4      	bhi.n	80099e8 <__multiply+0xa8>
 8009a1e:	9901      	ldr	r1, [sp, #4]
 8009a20:	5072      	str	r2, [r6, r1]
 8009a22:	9a03      	ldr	r2, [sp, #12]
 8009a24:	3304      	adds	r3, #4
 8009a26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a2a:	f1b9 0f00 	cmp.w	r9, #0
 8009a2e:	d01f      	beq.n	8009a70 <__multiply+0x130>
 8009a30:	46b6      	mov	lr, r6
 8009a32:	f04f 0a00 	mov.w	sl, #0
 8009a36:	6834      	ldr	r4, [r6, #0]
 8009a38:	f105 0114 	add.w	r1, r5, #20
 8009a3c:	880a      	ldrh	r2, [r1, #0]
 8009a3e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a42:	b2a4      	uxth	r4, r4
 8009a44:	fb09 b202 	mla	r2, r9, r2, fp
 8009a48:	4492      	add	sl, r2
 8009a4a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a4e:	f84e 4b04 	str.w	r4, [lr], #4
 8009a52:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a56:	f8be 2000 	ldrh.w	r2, [lr]
 8009a5a:	0c24      	lsrs	r4, r4, #16
 8009a5c:	fb09 2404 	mla	r4, r9, r4, r2
 8009a60:	458c      	cmp	ip, r1
 8009a62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009a66:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a6a:	d8e7      	bhi.n	8009a3c <__multiply+0xfc>
 8009a6c:	9a01      	ldr	r2, [sp, #4]
 8009a6e:	50b4      	str	r4, [r6, r2]
 8009a70:	3604      	adds	r6, #4
 8009a72:	e7a3      	b.n	80099bc <__multiply+0x7c>
 8009a74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1a5      	bne.n	80099c8 <__multiply+0x88>
 8009a7c:	3f01      	subs	r7, #1
 8009a7e:	e7a1      	b.n	80099c4 <__multiply+0x84>
 8009a80:	0800a79b 	.word	0x0800a79b
 8009a84:	0800a7ac 	.word	0x0800a7ac

08009a88 <__pow5mult>:
 8009a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a8c:	4615      	mov	r5, r2
 8009a8e:	f012 0203 	ands.w	r2, r2, #3
 8009a92:	4606      	mov	r6, r0
 8009a94:	460f      	mov	r7, r1
 8009a96:	d007      	beq.n	8009aa8 <__pow5mult+0x20>
 8009a98:	4c25      	ldr	r4, [pc, #148]	; (8009b30 <__pow5mult+0xa8>)
 8009a9a:	3a01      	subs	r2, #1
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aa2:	f7ff fe9f 	bl	80097e4 <__multadd>
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	10ad      	asrs	r5, r5, #2
 8009aaa:	d03d      	beq.n	8009b28 <__pow5mult+0xa0>
 8009aac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009aae:	b97c      	cbnz	r4, 8009ad0 <__pow5mult+0x48>
 8009ab0:	2010      	movs	r0, #16
 8009ab2:	f7ff fe13 	bl	80096dc <malloc>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	6270      	str	r0, [r6, #36]	; 0x24
 8009aba:	b928      	cbnz	r0, 8009ac8 <__pow5mult+0x40>
 8009abc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ac0:	4b1c      	ldr	r3, [pc, #112]	; (8009b34 <__pow5mult+0xac>)
 8009ac2:	481d      	ldr	r0, [pc, #116]	; (8009b38 <__pow5mult+0xb0>)
 8009ac4:	f000 fc32 	bl	800a32c <__assert_func>
 8009ac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009acc:	6004      	str	r4, [r0, #0]
 8009ace:	60c4      	str	r4, [r0, #12]
 8009ad0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ad8:	b94c      	cbnz	r4, 8009aee <__pow5mult+0x66>
 8009ada:	f240 2171 	movw	r1, #625	; 0x271
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ff18 	bl	8009914 <__i2b>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	f04f 0900 	mov.w	r9, #0
 8009af2:	07eb      	lsls	r3, r5, #31
 8009af4:	d50a      	bpl.n	8009b0c <__pow5mult+0x84>
 8009af6:	4639      	mov	r1, r7
 8009af8:	4622      	mov	r2, r4
 8009afa:	4630      	mov	r0, r6
 8009afc:	f7ff ff20 	bl	8009940 <__multiply>
 8009b00:	4680      	mov	r8, r0
 8009b02:	4639      	mov	r1, r7
 8009b04:	4630      	mov	r0, r6
 8009b06:	f7ff fe4b 	bl	80097a0 <_Bfree>
 8009b0a:	4647      	mov	r7, r8
 8009b0c:	106d      	asrs	r5, r5, #1
 8009b0e:	d00b      	beq.n	8009b28 <__pow5mult+0xa0>
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	b938      	cbnz	r0, 8009b24 <__pow5mult+0x9c>
 8009b14:	4622      	mov	r2, r4
 8009b16:	4621      	mov	r1, r4
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7ff ff11 	bl	8009940 <__multiply>
 8009b1e:	6020      	str	r0, [r4, #0]
 8009b20:	f8c0 9000 	str.w	r9, [r0]
 8009b24:	4604      	mov	r4, r0
 8009b26:	e7e4      	b.n	8009af2 <__pow5mult+0x6a>
 8009b28:	4638      	mov	r0, r7
 8009b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b2e:	bf00      	nop
 8009b30:	0800a900 	.word	0x0800a900
 8009b34:	0800a725 	.word	0x0800a725
 8009b38:	0800a7ac 	.word	0x0800a7ac

08009b3c <__lshift>:
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	460c      	mov	r4, r1
 8009b42:	4607      	mov	r7, r0
 8009b44:	4691      	mov	r9, r2
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	6849      	ldr	r1, [r1, #4]
 8009b4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b54:	f108 0601 	add.w	r6, r8, #1
 8009b58:	42b3      	cmp	r3, r6
 8009b5a:	db0b      	blt.n	8009b74 <__lshift+0x38>
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	f7ff fddf 	bl	8009720 <_Balloc>
 8009b62:	4605      	mov	r5, r0
 8009b64:	b948      	cbnz	r0, 8009b7a <__lshift+0x3e>
 8009b66:	4602      	mov	r2, r0
 8009b68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b6c:	4b27      	ldr	r3, [pc, #156]	; (8009c0c <__lshift+0xd0>)
 8009b6e:	4828      	ldr	r0, [pc, #160]	; (8009c10 <__lshift+0xd4>)
 8009b70:	f000 fbdc 	bl	800a32c <__assert_func>
 8009b74:	3101      	adds	r1, #1
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	e7ee      	b.n	8009b58 <__lshift+0x1c>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f100 0114 	add.w	r1, r0, #20
 8009b80:	f100 0210 	add.w	r2, r0, #16
 8009b84:	4618      	mov	r0, r3
 8009b86:	4553      	cmp	r3, sl
 8009b88:	db33      	blt.n	8009bf2 <__lshift+0xb6>
 8009b8a:	6920      	ldr	r0, [r4, #16]
 8009b8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b90:	f104 0314 	add.w	r3, r4, #20
 8009b94:	f019 091f 	ands.w	r9, r9, #31
 8009b98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ba0:	d02b      	beq.n	8009bfa <__lshift+0xbe>
 8009ba2:	468a      	mov	sl, r1
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f1c9 0e20 	rsb	lr, r9, #32
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	fa00 f009 	lsl.w	r0, r0, r9
 8009bb0:	4302      	orrs	r2, r0
 8009bb2:	f84a 2b04 	str.w	r2, [sl], #4
 8009bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bba:	459c      	cmp	ip, r3
 8009bbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009bc0:	d8f3      	bhi.n	8009baa <__lshift+0x6e>
 8009bc2:	ebac 0304 	sub.w	r3, ip, r4
 8009bc6:	3b15      	subs	r3, #21
 8009bc8:	f023 0303 	bic.w	r3, r3, #3
 8009bcc:	3304      	adds	r3, #4
 8009bce:	f104 0015 	add.w	r0, r4, #21
 8009bd2:	4584      	cmp	ip, r0
 8009bd4:	bf38      	it	cc
 8009bd6:	2304      	movcc	r3, #4
 8009bd8:	50ca      	str	r2, [r1, r3]
 8009bda:	b10a      	cbz	r2, 8009be0 <__lshift+0xa4>
 8009bdc:	f108 0602 	add.w	r6, r8, #2
 8009be0:	3e01      	subs	r6, #1
 8009be2:	4638      	mov	r0, r7
 8009be4:	4621      	mov	r1, r4
 8009be6:	612e      	str	r6, [r5, #16]
 8009be8:	f7ff fdda 	bl	80097a0 <_Bfree>
 8009bec:	4628      	mov	r0, r5
 8009bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	e7c5      	b.n	8009b86 <__lshift+0x4a>
 8009bfa:	3904      	subs	r1, #4
 8009bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c00:	459c      	cmp	ip, r3
 8009c02:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c06:	d8f9      	bhi.n	8009bfc <__lshift+0xc0>
 8009c08:	e7ea      	b.n	8009be0 <__lshift+0xa4>
 8009c0a:	bf00      	nop
 8009c0c:	0800a79b 	.word	0x0800a79b
 8009c10:	0800a7ac 	.word	0x0800a7ac

08009c14 <__mcmp>:
 8009c14:	4603      	mov	r3, r0
 8009c16:	690a      	ldr	r2, [r1, #16]
 8009c18:	6900      	ldr	r0, [r0, #16]
 8009c1a:	b530      	push	{r4, r5, lr}
 8009c1c:	1a80      	subs	r0, r0, r2
 8009c1e:	d10d      	bne.n	8009c3c <__mcmp+0x28>
 8009c20:	3314      	adds	r3, #20
 8009c22:	3114      	adds	r1, #20
 8009c24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c34:	4295      	cmp	r5, r2
 8009c36:	d002      	beq.n	8009c3e <__mcmp+0x2a>
 8009c38:	d304      	bcc.n	8009c44 <__mcmp+0x30>
 8009c3a:	2001      	movs	r0, #1
 8009c3c:	bd30      	pop	{r4, r5, pc}
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	d3f4      	bcc.n	8009c2c <__mcmp+0x18>
 8009c42:	e7fb      	b.n	8009c3c <__mcmp+0x28>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c48:	e7f8      	b.n	8009c3c <__mcmp+0x28>
	...

08009c4c <__mdiff>:
 8009c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	460c      	mov	r4, r1
 8009c52:	4606      	mov	r6, r0
 8009c54:	4611      	mov	r1, r2
 8009c56:	4620      	mov	r0, r4
 8009c58:	4692      	mov	sl, r2
 8009c5a:	f7ff ffdb 	bl	8009c14 <__mcmp>
 8009c5e:	1e05      	subs	r5, r0, #0
 8009c60:	d111      	bne.n	8009c86 <__mdiff+0x3a>
 8009c62:	4629      	mov	r1, r5
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff fd5b 	bl	8009720 <_Balloc>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	b928      	cbnz	r0, 8009c7a <__mdiff+0x2e>
 8009c6e:	f240 2132 	movw	r1, #562	; 0x232
 8009c72:	4b3c      	ldr	r3, [pc, #240]	; (8009d64 <__mdiff+0x118>)
 8009c74:	483c      	ldr	r0, [pc, #240]	; (8009d68 <__mdiff+0x11c>)
 8009c76:	f000 fb59 	bl	800a32c <__assert_func>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c80:	4610      	mov	r0, r2
 8009c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	bfa4      	itt	ge
 8009c88:	4653      	movge	r3, sl
 8009c8a:	46a2      	movge	sl, r4
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009c92:	bfa6      	itte	ge
 8009c94:	461c      	movge	r4, r3
 8009c96:	2500      	movge	r5, #0
 8009c98:	2501      	movlt	r5, #1
 8009c9a:	f7ff fd41 	bl	8009720 <_Balloc>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	b918      	cbnz	r0, 8009caa <__mdiff+0x5e>
 8009ca2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ca6:	4b2f      	ldr	r3, [pc, #188]	; (8009d64 <__mdiff+0x118>)
 8009ca8:	e7e4      	b.n	8009c74 <__mdiff+0x28>
 8009caa:	f100 0814 	add.w	r8, r0, #20
 8009cae:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009cb2:	60c5      	str	r5, [r0, #12]
 8009cb4:	f04f 0c00 	mov.w	ip, #0
 8009cb8:	f10a 0514 	add.w	r5, sl, #20
 8009cbc:	f10a 0010 	add.w	r0, sl, #16
 8009cc0:	46c2      	mov	sl, r8
 8009cc2:	6926      	ldr	r6, [r4, #16]
 8009cc4:	f104 0914 	add.w	r9, r4, #20
 8009cc8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009ccc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cd0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009cd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cd8:	fa1f f18b 	uxth.w	r1, fp
 8009cdc:	4461      	add	r1, ip
 8009cde:	fa1f fc83 	uxth.w	ip, r3
 8009ce2:	0c1b      	lsrs	r3, r3, #16
 8009ce4:	eba1 010c 	sub.w	r1, r1, ip
 8009ce8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009cf0:	b289      	uxth	r1, r1
 8009cf2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009cf6:	454e      	cmp	r6, r9
 8009cf8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009cfc:	f84a 3b04 	str.w	r3, [sl], #4
 8009d00:	d8e6      	bhi.n	8009cd0 <__mdiff+0x84>
 8009d02:	1b33      	subs	r3, r6, r4
 8009d04:	3b15      	subs	r3, #21
 8009d06:	f023 0303 	bic.w	r3, r3, #3
 8009d0a:	3415      	adds	r4, #21
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	42a6      	cmp	r6, r4
 8009d10:	bf38      	it	cc
 8009d12:	2304      	movcc	r3, #4
 8009d14:	441d      	add	r5, r3
 8009d16:	4443      	add	r3, r8
 8009d18:	461e      	mov	r6, r3
 8009d1a:	462c      	mov	r4, r5
 8009d1c:	4574      	cmp	r4, lr
 8009d1e:	d30e      	bcc.n	8009d3e <__mdiff+0xf2>
 8009d20:	f10e 0103 	add.w	r1, lr, #3
 8009d24:	1b49      	subs	r1, r1, r5
 8009d26:	f021 0103 	bic.w	r1, r1, #3
 8009d2a:	3d03      	subs	r5, #3
 8009d2c:	45ae      	cmp	lr, r5
 8009d2e:	bf38      	it	cc
 8009d30:	2100      	movcc	r1, #0
 8009d32:	4419      	add	r1, r3
 8009d34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009d38:	b18b      	cbz	r3, 8009d5e <__mdiff+0x112>
 8009d3a:	6117      	str	r7, [r2, #16]
 8009d3c:	e7a0      	b.n	8009c80 <__mdiff+0x34>
 8009d3e:	f854 8b04 	ldr.w	r8, [r4], #4
 8009d42:	fa1f f188 	uxth.w	r1, r8
 8009d46:	4461      	add	r1, ip
 8009d48:	1408      	asrs	r0, r1, #16
 8009d4a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009d4e:	b289      	uxth	r1, r1
 8009d50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d58:	f846 1b04 	str.w	r1, [r6], #4
 8009d5c:	e7de      	b.n	8009d1c <__mdiff+0xd0>
 8009d5e:	3f01      	subs	r7, #1
 8009d60:	e7e8      	b.n	8009d34 <__mdiff+0xe8>
 8009d62:	bf00      	nop
 8009d64:	0800a79b 	.word	0x0800a79b
 8009d68:	0800a7ac 	.word	0x0800a7ac

08009d6c <__d2b>:
 8009d6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d70:	2101      	movs	r1, #1
 8009d72:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009d76:	4690      	mov	r8, r2
 8009d78:	461d      	mov	r5, r3
 8009d7a:	f7ff fcd1 	bl	8009720 <_Balloc>
 8009d7e:	4604      	mov	r4, r0
 8009d80:	b930      	cbnz	r0, 8009d90 <__d2b+0x24>
 8009d82:	4602      	mov	r2, r0
 8009d84:	f240 310a 	movw	r1, #778	; 0x30a
 8009d88:	4b24      	ldr	r3, [pc, #144]	; (8009e1c <__d2b+0xb0>)
 8009d8a:	4825      	ldr	r0, [pc, #148]	; (8009e20 <__d2b+0xb4>)
 8009d8c:	f000 face 	bl	800a32c <__assert_func>
 8009d90:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009d94:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009d98:	bb2d      	cbnz	r5, 8009de6 <__d2b+0x7a>
 8009d9a:	9301      	str	r3, [sp, #4]
 8009d9c:	f1b8 0300 	subs.w	r3, r8, #0
 8009da0:	d026      	beq.n	8009df0 <__d2b+0x84>
 8009da2:	4668      	mov	r0, sp
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	f7ff fd87 	bl	80098b8 <__lo0bits>
 8009daa:	9900      	ldr	r1, [sp, #0]
 8009dac:	b1f0      	cbz	r0, 8009dec <__d2b+0x80>
 8009dae:	9a01      	ldr	r2, [sp, #4]
 8009db0:	f1c0 0320 	rsb	r3, r0, #32
 8009db4:	fa02 f303 	lsl.w	r3, r2, r3
 8009db8:	430b      	orrs	r3, r1
 8009dba:	40c2      	lsrs	r2, r0
 8009dbc:	6163      	str	r3, [r4, #20]
 8009dbe:	9201      	str	r2, [sp, #4]
 8009dc0:	9b01      	ldr	r3, [sp, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bf14      	ite	ne
 8009dc6:	2102      	movne	r1, #2
 8009dc8:	2101      	moveq	r1, #1
 8009dca:	61a3      	str	r3, [r4, #24]
 8009dcc:	6121      	str	r1, [r4, #16]
 8009dce:	b1c5      	cbz	r5, 8009e02 <__d2b+0x96>
 8009dd0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dd4:	4405      	add	r5, r0
 8009dd6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dda:	603d      	str	r5, [r7, #0]
 8009ddc:	6030      	str	r0, [r6, #0]
 8009dde:	4620      	mov	r0, r4
 8009de0:	b002      	add	sp, #8
 8009de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dea:	e7d6      	b.n	8009d9a <__d2b+0x2e>
 8009dec:	6161      	str	r1, [r4, #20]
 8009dee:	e7e7      	b.n	8009dc0 <__d2b+0x54>
 8009df0:	a801      	add	r0, sp, #4
 8009df2:	f7ff fd61 	bl	80098b8 <__lo0bits>
 8009df6:	2101      	movs	r1, #1
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	6121      	str	r1, [r4, #16]
 8009dfc:	6163      	str	r3, [r4, #20]
 8009dfe:	3020      	adds	r0, #32
 8009e00:	e7e5      	b.n	8009dce <__d2b+0x62>
 8009e02:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009e06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e0a:	6038      	str	r0, [r7, #0]
 8009e0c:	6918      	ldr	r0, [r3, #16]
 8009e0e:	f7ff fd33 	bl	8009878 <__hi0bits>
 8009e12:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009e16:	6031      	str	r1, [r6, #0]
 8009e18:	e7e1      	b.n	8009dde <__d2b+0x72>
 8009e1a:	bf00      	nop
 8009e1c:	0800a79b 	.word	0x0800a79b
 8009e20:	0800a7ac 	.word	0x0800a7ac

08009e24 <_calloc_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	fb02 f501 	mul.w	r5, r2, r1
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7fd ff50 	bl	8007cd0 <_malloc_r>
 8009e30:	4604      	mov	r4, r0
 8009e32:	b118      	cbz	r0, 8009e3c <_calloc_r+0x18>
 8009e34:	462a      	mov	r2, r5
 8009e36:	2100      	movs	r1, #0
 8009e38:	f7fd ff41 	bl	8007cbe <memset>
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}

08009e40 <_free_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4605      	mov	r5, r0
 8009e44:	2900      	cmp	r1, #0
 8009e46:	d043      	beq.n	8009ed0 <_free_r+0x90>
 8009e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e4c:	1f0c      	subs	r4, r1, #4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	bfb8      	it	lt
 8009e52:	18e4      	addlt	r4, r4, r3
 8009e54:	f7ff fc58 	bl	8009708 <__malloc_lock>
 8009e58:	4a1e      	ldr	r2, [pc, #120]	; (8009ed4 <_free_r+0x94>)
 8009e5a:	6813      	ldr	r3, [r2, #0]
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	b933      	cbnz	r3, 8009e6e <_free_r+0x2e>
 8009e60:	6063      	str	r3, [r4, #4]
 8009e62:	6014      	str	r4, [r2, #0]
 8009e64:	4628      	mov	r0, r5
 8009e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e6a:	f7ff bc53 	b.w	8009714 <__malloc_unlock>
 8009e6e:	42a3      	cmp	r3, r4
 8009e70:	d90a      	bls.n	8009e88 <_free_r+0x48>
 8009e72:	6821      	ldr	r1, [r4, #0]
 8009e74:	1862      	adds	r2, r4, r1
 8009e76:	4293      	cmp	r3, r2
 8009e78:	bf01      	itttt	eq
 8009e7a:	681a      	ldreq	r2, [r3, #0]
 8009e7c:	685b      	ldreq	r3, [r3, #4]
 8009e7e:	1852      	addeq	r2, r2, r1
 8009e80:	6022      	streq	r2, [r4, #0]
 8009e82:	6063      	str	r3, [r4, #4]
 8009e84:	6004      	str	r4, [r0, #0]
 8009e86:	e7ed      	b.n	8009e64 <_free_r+0x24>
 8009e88:	461a      	mov	r2, r3
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	b10b      	cbz	r3, 8009e92 <_free_r+0x52>
 8009e8e:	42a3      	cmp	r3, r4
 8009e90:	d9fa      	bls.n	8009e88 <_free_r+0x48>
 8009e92:	6811      	ldr	r1, [r2, #0]
 8009e94:	1850      	adds	r0, r2, r1
 8009e96:	42a0      	cmp	r0, r4
 8009e98:	d10b      	bne.n	8009eb2 <_free_r+0x72>
 8009e9a:	6820      	ldr	r0, [r4, #0]
 8009e9c:	4401      	add	r1, r0
 8009e9e:	1850      	adds	r0, r2, r1
 8009ea0:	4283      	cmp	r3, r0
 8009ea2:	6011      	str	r1, [r2, #0]
 8009ea4:	d1de      	bne.n	8009e64 <_free_r+0x24>
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	4401      	add	r1, r0
 8009eac:	6011      	str	r1, [r2, #0]
 8009eae:	6053      	str	r3, [r2, #4]
 8009eb0:	e7d8      	b.n	8009e64 <_free_r+0x24>
 8009eb2:	d902      	bls.n	8009eba <_free_r+0x7a>
 8009eb4:	230c      	movs	r3, #12
 8009eb6:	602b      	str	r3, [r5, #0]
 8009eb8:	e7d4      	b.n	8009e64 <_free_r+0x24>
 8009eba:	6820      	ldr	r0, [r4, #0]
 8009ebc:	1821      	adds	r1, r4, r0
 8009ebe:	428b      	cmp	r3, r1
 8009ec0:	bf01      	itttt	eq
 8009ec2:	6819      	ldreq	r1, [r3, #0]
 8009ec4:	685b      	ldreq	r3, [r3, #4]
 8009ec6:	1809      	addeq	r1, r1, r0
 8009ec8:	6021      	streq	r1, [r4, #0]
 8009eca:	6063      	str	r3, [r4, #4]
 8009ecc:	6054      	str	r4, [r2, #4]
 8009ece:	e7c9      	b.n	8009e64 <_free_r+0x24>
 8009ed0:	bd38      	pop	{r3, r4, r5, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20001bfc 	.word	0x20001bfc

08009ed8 <__sfputc_r>:
 8009ed8:	6893      	ldr	r3, [r2, #8]
 8009eda:	b410      	push	{r4}
 8009edc:	3b01      	subs	r3, #1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	6093      	str	r3, [r2, #8]
 8009ee2:	da07      	bge.n	8009ef4 <__sfputc_r+0x1c>
 8009ee4:	6994      	ldr	r4, [r2, #24]
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	db01      	blt.n	8009eee <__sfputc_r+0x16>
 8009eea:	290a      	cmp	r1, #10
 8009eec:	d102      	bne.n	8009ef4 <__sfputc_r+0x1c>
 8009eee:	bc10      	pop	{r4}
 8009ef0:	f000 b95c 	b.w	800a1ac <__swbuf_r>
 8009ef4:	6813      	ldr	r3, [r2, #0]
 8009ef6:	1c58      	adds	r0, r3, #1
 8009ef8:	6010      	str	r0, [r2, #0]
 8009efa:	7019      	strb	r1, [r3, #0]
 8009efc:	4608      	mov	r0, r1
 8009efe:	bc10      	pop	{r4}
 8009f00:	4770      	bx	lr

08009f02 <__sfputs_r>:
 8009f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f04:	4606      	mov	r6, r0
 8009f06:	460f      	mov	r7, r1
 8009f08:	4614      	mov	r4, r2
 8009f0a:	18d5      	adds	r5, r2, r3
 8009f0c:	42ac      	cmp	r4, r5
 8009f0e:	d101      	bne.n	8009f14 <__sfputs_r+0x12>
 8009f10:	2000      	movs	r0, #0
 8009f12:	e007      	b.n	8009f24 <__sfputs_r+0x22>
 8009f14:	463a      	mov	r2, r7
 8009f16:	4630      	mov	r0, r6
 8009f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1c:	f7ff ffdc 	bl	8009ed8 <__sfputc_r>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d1f3      	bne.n	8009f0c <__sfputs_r+0xa>
 8009f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f28 <_vfiprintf_r>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	4614      	mov	r4, r2
 8009f30:	4698      	mov	r8, r3
 8009f32:	4606      	mov	r6, r0
 8009f34:	b09d      	sub	sp, #116	; 0x74
 8009f36:	b118      	cbz	r0, 8009f40 <_vfiprintf_r+0x18>
 8009f38:	6983      	ldr	r3, [r0, #24]
 8009f3a:	b90b      	cbnz	r3, 8009f40 <_vfiprintf_r+0x18>
 8009f3c:	f7fd fdec 	bl	8007b18 <__sinit>
 8009f40:	4b89      	ldr	r3, [pc, #548]	; (800a168 <_vfiprintf_r+0x240>)
 8009f42:	429d      	cmp	r5, r3
 8009f44:	d11b      	bne.n	8009f7e <_vfiprintf_r+0x56>
 8009f46:	6875      	ldr	r5, [r6, #4]
 8009f48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f4a:	07d9      	lsls	r1, r3, #31
 8009f4c:	d405      	bmi.n	8009f5a <_vfiprintf_r+0x32>
 8009f4e:	89ab      	ldrh	r3, [r5, #12]
 8009f50:	059a      	lsls	r2, r3, #22
 8009f52:	d402      	bmi.n	8009f5a <_vfiprintf_r+0x32>
 8009f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f56:	f7fd fea2 	bl	8007c9e <__retarget_lock_acquire_recursive>
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	071b      	lsls	r3, r3, #28
 8009f5e:	d501      	bpl.n	8009f64 <_vfiprintf_r+0x3c>
 8009f60:	692b      	ldr	r3, [r5, #16]
 8009f62:	b9eb      	cbnz	r3, 8009fa0 <_vfiprintf_r+0x78>
 8009f64:	4629      	mov	r1, r5
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 f972 	bl	800a250 <__swsetup_r>
 8009f6c:	b1c0      	cbz	r0, 8009fa0 <_vfiprintf_r+0x78>
 8009f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f70:	07dc      	lsls	r4, r3, #31
 8009f72:	d50e      	bpl.n	8009f92 <_vfiprintf_r+0x6a>
 8009f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f78:	b01d      	add	sp, #116	; 0x74
 8009f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7e:	4b7b      	ldr	r3, [pc, #492]	; (800a16c <_vfiprintf_r+0x244>)
 8009f80:	429d      	cmp	r5, r3
 8009f82:	d101      	bne.n	8009f88 <_vfiprintf_r+0x60>
 8009f84:	68b5      	ldr	r5, [r6, #8]
 8009f86:	e7df      	b.n	8009f48 <_vfiprintf_r+0x20>
 8009f88:	4b79      	ldr	r3, [pc, #484]	; (800a170 <_vfiprintf_r+0x248>)
 8009f8a:	429d      	cmp	r5, r3
 8009f8c:	bf08      	it	eq
 8009f8e:	68f5      	ldreq	r5, [r6, #12]
 8009f90:	e7da      	b.n	8009f48 <_vfiprintf_r+0x20>
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	0598      	lsls	r0, r3, #22
 8009f96:	d4ed      	bmi.n	8009f74 <_vfiprintf_r+0x4c>
 8009f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f9a:	f7fd fe81 	bl	8007ca0 <__retarget_lock_release_recursive>
 8009f9e:	e7e9      	b.n	8009f74 <_vfiprintf_r+0x4c>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009faa:	2330      	movs	r3, #48	; 0x30
 8009fac:	f04f 0901 	mov.w	r9, #1
 8009fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fb4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a174 <_vfiprintf_r+0x24c>
 8009fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fbc:	4623      	mov	r3, r4
 8009fbe:	469a      	mov	sl, r3
 8009fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc4:	b10a      	cbz	r2, 8009fca <_vfiprintf_r+0xa2>
 8009fc6:	2a25      	cmp	r2, #37	; 0x25
 8009fc8:	d1f9      	bne.n	8009fbe <_vfiprintf_r+0x96>
 8009fca:	ebba 0b04 	subs.w	fp, sl, r4
 8009fce:	d00b      	beq.n	8009fe8 <_vfiprintf_r+0xc0>
 8009fd0:	465b      	mov	r3, fp
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7ff ff93 	bl	8009f02 <__sfputs_r>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f000 80aa 	beq.w	800a136 <_vfiprintf_r+0x20e>
 8009fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe4:	445a      	add	r2, fp
 8009fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 80a2 	beq.w	800a136 <_vfiprintf_r+0x20e>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ff8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ffc:	f10a 0a01 	add.w	sl, sl, #1
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	9307      	str	r3, [sp, #28]
 800a004:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a008:	931a      	str	r3, [sp, #104]	; 0x68
 800a00a:	4654      	mov	r4, sl
 800a00c:	2205      	movs	r2, #5
 800a00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a012:	4858      	ldr	r0, [pc, #352]	; (800a174 <_vfiprintf_r+0x24c>)
 800a014:	f7ff fb6a 	bl	80096ec <memchr>
 800a018:	9a04      	ldr	r2, [sp, #16]
 800a01a:	b9d8      	cbnz	r0, 800a054 <_vfiprintf_r+0x12c>
 800a01c:	06d1      	lsls	r1, r2, #27
 800a01e:	bf44      	itt	mi
 800a020:	2320      	movmi	r3, #32
 800a022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a026:	0713      	lsls	r3, r2, #28
 800a028:	bf44      	itt	mi
 800a02a:	232b      	movmi	r3, #43	; 0x2b
 800a02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a030:	f89a 3000 	ldrb.w	r3, [sl]
 800a034:	2b2a      	cmp	r3, #42	; 0x2a
 800a036:	d015      	beq.n	800a064 <_vfiprintf_r+0x13c>
 800a038:	4654      	mov	r4, sl
 800a03a:	2000      	movs	r0, #0
 800a03c:	f04f 0c0a 	mov.w	ip, #10
 800a040:	9a07      	ldr	r2, [sp, #28]
 800a042:	4621      	mov	r1, r4
 800a044:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a048:	3b30      	subs	r3, #48	; 0x30
 800a04a:	2b09      	cmp	r3, #9
 800a04c:	d94e      	bls.n	800a0ec <_vfiprintf_r+0x1c4>
 800a04e:	b1b0      	cbz	r0, 800a07e <_vfiprintf_r+0x156>
 800a050:	9207      	str	r2, [sp, #28]
 800a052:	e014      	b.n	800a07e <_vfiprintf_r+0x156>
 800a054:	eba0 0308 	sub.w	r3, r0, r8
 800a058:	fa09 f303 	lsl.w	r3, r9, r3
 800a05c:	4313      	orrs	r3, r2
 800a05e:	46a2      	mov	sl, r4
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	e7d2      	b.n	800a00a <_vfiprintf_r+0xe2>
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	1d19      	adds	r1, r3, #4
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	9103      	str	r1, [sp, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	bfbb      	ittet	lt
 800a070:	425b      	neglt	r3, r3
 800a072:	f042 0202 	orrlt.w	r2, r2, #2
 800a076:	9307      	strge	r3, [sp, #28]
 800a078:	9307      	strlt	r3, [sp, #28]
 800a07a:	bfb8      	it	lt
 800a07c:	9204      	strlt	r2, [sp, #16]
 800a07e:	7823      	ldrb	r3, [r4, #0]
 800a080:	2b2e      	cmp	r3, #46	; 0x2e
 800a082:	d10c      	bne.n	800a09e <_vfiprintf_r+0x176>
 800a084:	7863      	ldrb	r3, [r4, #1]
 800a086:	2b2a      	cmp	r3, #42	; 0x2a
 800a088:	d135      	bne.n	800a0f6 <_vfiprintf_r+0x1ce>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	3402      	adds	r4, #2
 800a08e:	1d1a      	adds	r2, r3, #4
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	9203      	str	r2, [sp, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	bfb8      	it	lt
 800a098:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a09c:	9305      	str	r3, [sp, #20]
 800a09e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a184 <_vfiprintf_r+0x25c>
 800a0a2:	2203      	movs	r2, #3
 800a0a4:	4650      	mov	r0, sl
 800a0a6:	7821      	ldrb	r1, [r4, #0]
 800a0a8:	f7ff fb20 	bl	80096ec <memchr>
 800a0ac:	b140      	cbz	r0, 800a0c0 <_vfiprintf_r+0x198>
 800a0ae:	2340      	movs	r3, #64	; 0x40
 800a0b0:	eba0 000a 	sub.w	r0, r0, sl
 800a0b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a0b8:	9b04      	ldr	r3, [sp, #16]
 800a0ba:	3401      	adds	r4, #1
 800a0bc:	4303      	orrs	r3, r0
 800a0be:	9304      	str	r3, [sp, #16]
 800a0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c4:	2206      	movs	r2, #6
 800a0c6:	482c      	ldr	r0, [pc, #176]	; (800a178 <_vfiprintf_r+0x250>)
 800a0c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0cc:	f7ff fb0e 	bl	80096ec <memchr>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d03f      	beq.n	800a154 <_vfiprintf_r+0x22c>
 800a0d4:	4b29      	ldr	r3, [pc, #164]	; (800a17c <_vfiprintf_r+0x254>)
 800a0d6:	bb1b      	cbnz	r3, 800a120 <_vfiprintf_r+0x1f8>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	3307      	adds	r3, #7
 800a0dc:	f023 0307 	bic.w	r3, r3, #7
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	9303      	str	r3, [sp, #12]
 800a0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e6:	443b      	add	r3, r7
 800a0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ea:	e767      	b.n	8009fbc <_vfiprintf_r+0x94>
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0f4:	e7a5      	b.n	800a042 <_vfiprintf_r+0x11a>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	f04f 0c0a 	mov.w	ip, #10
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	3401      	adds	r4, #1
 800a100:	9305      	str	r3, [sp, #20]
 800a102:	4620      	mov	r0, r4
 800a104:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a108:	3a30      	subs	r2, #48	; 0x30
 800a10a:	2a09      	cmp	r2, #9
 800a10c:	d903      	bls.n	800a116 <_vfiprintf_r+0x1ee>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0c5      	beq.n	800a09e <_vfiprintf_r+0x176>
 800a112:	9105      	str	r1, [sp, #20]
 800a114:	e7c3      	b.n	800a09e <_vfiprintf_r+0x176>
 800a116:	4604      	mov	r4, r0
 800a118:	2301      	movs	r3, #1
 800a11a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a11e:	e7f0      	b.n	800a102 <_vfiprintf_r+0x1da>
 800a120:	ab03      	add	r3, sp, #12
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	462a      	mov	r2, r5
 800a126:	4630      	mov	r0, r6
 800a128:	4b15      	ldr	r3, [pc, #84]	; (800a180 <_vfiprintf_r+0x258>)
 800a12a:	a904      	add	r1, sp, #16
 800a12c:	f7fd fec8 	bl	8007ec0 <_printf_float>
 800a130:	4607      	mov	r7, r0
 800a132:	1c78      	adds	r0, r7, #1
 800a134:	d1d6      	bne.n	800a0e4 <_vfiprintf_r+0x1bc>
 800a136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a138:	07d9      	lsls	r1, r3, #31
 800a13a:	d405      	bmi.n	800a148 <_vfiprintf_r+0x220>
 800a13c:	89ab      	ldrh	r3, [r5, #12]
 800a13e:	059a      	lsls	r2, r3, #22
 800a140:	d402      	bmi.n	800a148 <_vfiprintf_r+0x220>
 800a142:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a144:	f7fd fdac 	bl	8007ca0 <__retarget_lock_release_recursive>
 800a148:	89ab      	ldrh	r3, [r5, #12]
 800a14a:	065b      	lsls	r3, r3, #25
 800a14c:	f53f af12 	bmi.w	8009f74 <_vfiprintf_r+0x4c>
 800a150:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a152:	e711      	b.n	8009f78 <_vfiprintf_r+0x50>
 800a154:	ab03      	add	r3, sp, #12
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	462a      	mov	r2, r5
 800a15a:	4630      	mov	r0, r6
 800a15c:	4b08      	ldr	r3, [pc, #32]	; (800a180 <_vfiprintf_r+0x258>)
 800a15e:	a904      	add	r1, sp, #16
 800a160:	f7fe f94a 	bl	80083f8 <_printf_i>
 800a164:	e7e4      	b.n	800a130 <_vfiprintf_r+0x208>
 800a166:	bf00      	nop
 800a168:	0800a6a0 	.word	0x0800a6a0
 800a16c:	0800a6c0 	.word	0x0800a6c0
 800a170:	0800a680 	.word	0x0800a680
 800a174:	0800a90c 	.word	0x0800a90c
 800a178:	0800a916 	.word	0x0800a916
 800a17c:	08007ec1 	.word	0x08007ec1
 800a180:	08009f03 	.word	0x08009f03
 800a184:	0800a912 	.word	0x0800a912

0800a188 <_read_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	2200      	movs	r2, #0
 800a192:	4d05      	ldr	r5, [pc, #20]	; (800a1a8 <_read_r+0x20>)
 800a194:	602a      	str	r2, [r5, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	f7f7 fd6d 	bl	8001c76 <_read>
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d102      	bne.n	800a1a6 <_read_r+0x1e>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	b103      	cbz	r3, 800a1a6 <_read_r+0x1e>
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	20001dac 	.word	0x20001dac

0800a1ac <__swbuf_r>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	460e      	mov	r6, r1
 800a1b0:	4614      	mov	r4, r2
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	b118      	cbz	r0, 800a1be <__swbuf_r+0x12>
 800a1b6:	6983      	ldr	r3, [r0, #24]
 800a1b8:	b90b      	cbnz	r3, 800a1be <__swbuf_r+0x12>
 800a1ba:	f7fd fcad 	bl	8007b18 <__sinit>
 800a1be:	4b21      	ldr	r3, [pc, #132]	; (800a244 <__swbuf_r+0x98>)
 800a1c0:	429c      	cmp	r4, r3
 800a1c2:	d12b      	bne.n	800a21c <__swbuf_r+0x70>
 800a1c4:	686c      	ldr	r4, [r5, #4]
 800a1c6:	69a3      	ldr	r3, [r4, #24]
 800a1c8:	60a3      	str	r3, [r4, #8]
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	071a      	lsls	r2, r3, #28
 800a1ce:	d52f      	bpl.n	800a230 <__swbuf_r+0x84>
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	b36b      	cbz	r3, 800a230 <__swbuf_r+0x84>
 800a1d4:	6923      	ldr	r3, [r4, #16]
 800a1d6:	6820      	ldr	r0, [r4, #0]
 800a1d8:	b2f6      	uxtb	r6, r6
 800a1da:	1ac0      	subs	r0, r0, r3
 800a1dc:	6963      	ldr	r3, [r4, #20]
 800a1de:	4637      	mov	r7, r6
 800a1e0:	4283      	cmp	r3, r0
 800a1e2:	dc04      	bgt.n	800a1ee <__swbuf_r+0x42>
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f7ff fa26 	bl	8009638 <_fflush_r>
 800a1ec:	bb30      	cbnz	r0, 800a23c <__swbuf_r+0x90>
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	6022      	str	r2, [r4, #0]
 800a1fc:	701e      	strb	r6, [r3, #0]
 800a1fe:	6963      	ldr	r3, [r4, #20]
 800a200:	4283      	cmp	r3, r0
 800a202:	d004      	beq.n	800a20e <__swbuf_r+0x62>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	07db      	lsls	r3, r3, #31
 800a208:	d506      	bpl.n	800a218 <__swbuf_r+0x6c>
 800a20a:	2e0a      	cmp	r6, #10
 800a20c:	d104      	bne.n	800a218 <__swbuf_r+0x6c>
 800a20e:	4621      	mov	r1, r4
 800a210:	4628      	mov	r0, r5
 800a212:	f7ff fa11 	bl	8009638 <_fflush_r>
 800a216:	b988      	cbnz	r0, 800a23c <__swbuf_r+0x90>
 800a218:	4638      	mov	r0, r7
 800a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <__swbuf_r+0x9c>)
 800a21e:	429c      	cmp	r4, r3
 800a220:	d101      	bne.n	800a226 <__swbuf_r+0x7a>
 800a222:	68ac      	ldr	r4, [r5, #8]
 800a224:	e7cf      	b.n	800a1c6 <__swbuf_r+0x1a>
 800a226:	4b09      	ldr	r3, [pc, #36]	; (800a24c <__swbuf_r+0xa0>)
 800a228:	429c      	cmp	r4, r3
 800a22a:	bf08      	it	eq
 800a22c:	68ec      	ldreq	r4, [r5, #12]
 800a22e:	e7ca      	b.n	800a1c6 <__swbuf_r+0x1a>
 800a230:	4621      	mov	r1, r4
 800a232:	4628      	mov	r0, r5
 800a234:	f000 f80c 	bl	800a250 <__swsetup_r>
 800a238:	2800      	cmp	r0, #0
 800a23a:	d0cb      	beq.n	800a1d4 <__swbuf_r+0x28>
 800a23c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a240:	e7ea      	b.n	800a218 <__swbuf_r+0x6c>
 800a242:	bf00      	nop
 800a244:	0800a6a0 	.word	0x0800a6a0
 800a248:	0800a6c0 	.word	0x0800a6c0
 800a24c:	0800a680 	.word	0x0800a680

0800a250 <__swsetup_r>:
 800a250:	4b32      	ldr	r3, [pc, #200]	; (800a31c <__swsetup_r+0xcc>)
 800a252:	b570      	push	{r4, r5, r6, lr}
 800a254:	681d      	ldr	r5, [r3, #0]
 800a256:	4606      	mov	r6, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	b125      	cbz	r5, 800a266 <__swsetup_r+0x16>
 800a25c:	69ab      	ldr	r3, [r5, #24]
 800a25e:	b913      	cbnz	r3, 800a266 <__swsetup_r+0x16>
 800a260:	4628      	mov	r0, r5
 800a262:	f7fd fc59 	bl	8007b18 <__sinit>
 800a266:	4b2e      	ldr	r3, [pc, #184]	; (800a320 <__swsetup_r+0xd0>)
 800a268:	429c      	cmp	r4, r3
 800a26a:	d10f      	bne.n	800a28c <__swsetup_r+0x3c>
 800a26c:	686c      	ldr	r4, [r5, #4]
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a274:	0719      	lsls	r1, r3, #28
 800a276:	d42c      	bmi.n	800a2d2 <__swsetup_r+0x82>
 800a278:	06dd      	lsls	r5, r3, #27
 800a27a:	d411      	bmi.n	800a2a0 <__swsetup_r+0x50>
 800a27c:	2309      	movs	r3, #9
 800a27e:	6033      	str	r3, [r6, #0]
 800a280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a288:	81a3      	strh	r3, [r4, #12]
 800a28a:	e03e      	b.n	800a30a <__swsetup_r+0xba>
 800a28c:	4b25      	ldr	r3, [pc, #148]	; (800a324 <__swsetup_r+0xd4>)
 800a28e:	429c      	cmp	r4, r3
 800a290:	d101      	bne.n	800a296 <__swsetup_r+0x46>
 800a292:	68ac      	ldr	r4, [r5, #8]
 800a294:	e7eb      	b.n	800a26e <__swsetup_r+0x1e>
 800a296:	4b24      	ldr	r3, [pc, #144]	; (800a328 <__swsetup_r+0xd8>)
 800a298:	429c      	cmp	r4, r3
 800a29a:	bf08      	it	eq
 800a29c:	68ec      	ldreq	r4, [r5, #12]
 800a29e:	e7e6      	b.n	800a26e <__swsetup_r+0x1e>
 800a2a0:	0758      	lsls	r0, r3, #29
 800a2a2:	d512      	bpl.n	800a2ca <__swsetup_r+0x7a>
 800a2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2a6:	b141      	cbz	r1, 800a2ba <__swsetup_r+0x6a>
 800a2a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ac:	4299      	cmp	r1, r3
 800a2ae:	d002      	beq.n	800a2b6 <__swsetup_r+0x66>
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f7ff fdc5 	bl	8009e40 <_free_r>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2c0:	81a3      	strh	r3, [r4, #12]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6063      	str	r3, [r4, #4]
 800a2c6:	6923      	ldr	r3, [r4, #16]
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f043 0308 	orr.w	r3, r3, #8
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	6923      	ldr	r3, [r4, #16]
 800a2d4:	b94b      	cbnz	r3, 800a2ea <__swsetup_r+0x9a>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2e0:	d003      	beq.n	800a2ea <__swsetup_r+0x9a>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f000 f875 	bl	800a3d4 <__smakebuf_r>
 800a2ea:	89a0      	ldrh	r0, [r4, #12]
 800a2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2f0:	f010 0301 	ands.w	r3, r0, #1
 800a2f4:	d00a      	beq.n	800a30c <__swsetup_r+0xbc>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60a3      	str	r3, [r4, #8]
 800a2fa:	6963      	ldr	r3, [r4, #20]
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	61a3      	str	r3, [r4, #24]
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	b943      	cbnz	r3, 800a316 <__swsetup_r+0xc6>
 800a304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a308:	d1ba      	bne.n	800a280 <__swsetup_r+0x30>
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	0781      	lsls	r1, r0, #30
 800a30e:	bf58      	it	pl
 800a310:	6963      	ldrpl	r3, [r4, #20]
 800a312:	60a3      	str	r3, [r4, #8]
 800a314:	e7f4      	b.n	800a300 <__swsetup_r+0xb0>
 800a316:	2000      	movs	r0, #0
 800a318:	e7f7      	b.n	800a30a <__swsetup_r+0xba>
 800a31a:	bf00      	nop
 800a31c:	20000018 	.word	0x20000018
 800a320:	0800a6a0 	.word	0x0800a6a0
 800a324:	0800a6c0 	.word	0x0800a6c0
 800a328:	0800a680 	.word	0x0800a680

0800a32c <__assert_func>:
 800a32c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a32e:	4614      	mov	r4, r2
 800a330:	461a      	mov	r2, r3
 800a332:	4b09      	ldr	r3, [pc, #36]	; (800a358 <__assert_func+0x2c>)
 800a334:	4605      	mov	r5, r0
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68d8      	ldr	r0, [r3, #12]
 800a33a:	b14c      	cbz	r4, 800a350 <__assert_func+0x24>
 800a33c:	4b07      	ldr	r3, [pc, #28]	; (800a35c <__assert_func+0x30>)
 800a33e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a342:	9100      	str	r1, [sp, #0]
 800a344:	462b      	mov	r3, r5
 800a346:	4906      	ldr	r1, [pc, #24]	; (800a360 <__assert_func+0x34>)
 800a348:	f000 f80e 	bl	800a368 <fiprintf>
 800a34c:	f000 f8a1 	bl	800a492 <abort>
 800a350:	4b04      	ldr	r3, [pc, #16]	; (800a364 <__assert_func+0x38>)
 800a352:	461c      	mov	r4, r3
 800a354:	e7f3      	b.n	800a33e <__assert_func+0x12>
 800a356:	bf00      	nop
 800a358:	20000018 	.word	0x20000018
 800a35c:	0800a91d 	.word	0x0800a91d
 800a360:	0800a92a 	.word	0x0800a92a
 800a364:	0800a958 	.word	0x0800a958

0800a368 <fiprintf>:
 800a368:	b40e      	push	{r1, r2, r3}
 800a36a:	b503      	push	{r0, r1, lr}
 800a36c:	4601      	mov	r1, r0
 800a36e:	ab03      	add	r3, sp, #12
 800a370:	4805      	ldr	r0, [pc, #20]	; (800a388 <fiprintf+0x20>)
 800a372:	f853 2b04 	ldr.w	r2, [r3], #4
 800a376:	6800      	ldr	r0, [r0, #0]
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	f7ff fdd5 	bl	8009f28 <_vfiprintf_r>
 800a37e:	b002      	add	sp, #8
 800a380:	f85d eb04 	ldr.w	lr, [sp], #4
 800a384:	b003      	add	sp, #12
 800a386:	4770      	bx	lr
 800a388:	20000018 	.word	0x20000018

0800a38c <__swhatbuf_r>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	460e      	mov	r6, r1
 800a390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a394:	4614      	mov	r4, r2
 800a396:	2900      	cmp	r1, #0
 800a398:	461d      	mov	r5, r3
 800a39a:	b096      	sub	sp, #88	; 0x58
 800a39c:	da07      	bge.n	800a3ae <__swhatbuf_r+0x22>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	89b3      	ldrh	r3, [r6, #12]
 800a3a4:	061a      	lsls	r2, r3, #24
 800a3a6:	d410      	bmi.n	800a3ca <__swhatbuf_r+0x3e>
 800a3a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ac:	e00e      	b.n	800a3cc <__swhatbuf_r+0x40>
 800a3ae:	466a      	mov	r2, sp
 800a3b0:	f000 f876 	bl	800a4a0 <_fstat_r>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	dbf2      	blt.n	800a39e <__swhatbuf_r+0x12>
 800a3b8:	9a01      	ldr	r2, [sp, #4]
 800a3ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3c2:	425a      	negs	r2, r3
 800a3c4:	415a      	adcs	r2, r3
 800a3c6:	602a      	str	r2, [r5, #0]
 800a3c8:	e7ee      	b.n	800a3a8 <__swhatbuf_r+0x1c>
 800a3ca:	2340      	movs	r3, #64	; 0x40
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	b016      	add	sp, #88	; 0x58
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}

0800a3d4 <__smakebuf_r>:
 800a3d4:	898b      	ldrh	r3, [r1, #12]
 800a3d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3d8:	079d      	lsls	r5, r3, #30
 800a3da:	4606      	mov	r6, r0
 800a3dc:	460c      	mov	r4, r1
 800a3de:	d507      	bpl.n	800a3f0 <__smakebuf_r+0x1c>
 800a3e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	6123      	str	r3, [r4, #16]
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	6163      	str	r3, [r4, #20]
 800a3ec:	b002      	add	sp, #8
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	466a      	mov	r2, sp
 800a3f2:	ab01      	add	r3, sp, #4
 800a3f4:	f7ff ffca 	bl	800a38c <__swhatbuf_r>
 800a3f8:	9900      	ldr	r1, [sp, #0]
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7fd fc67 	bl	8007cd0 <_malloc_r>
 800a402:	b948      	cbnz	r0, 800a418 <__smakebuf_r+0x44>
 800a404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a408:	059a      	lsls	r2, r3, #22
 800a40a:	d4ef      	bmi.n	800a3ec <__smakebuf_r+0x18>
 800a40c:	f023 0303 	bic.w	r3, r3, #3
 800a410:	f043 0302 	orr.w	r3, r3, #2
 800a414:	81a3      	strh	r3, [r4, #12]
 800a416:	e7e3      	b.n	800a3e0 <__smakebuf_r+0xc>
 800a418:	4b0d      	ldr	r3, [pc, #52]	; (800a450 <__smakebuf_r+0x7c>)
 800a41a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	6020      	str	r0, [r4, #0]
 800a420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a424:	81a3      	strh	r3, [r4, #12]
 800a426:	9b00      	ldr	r3, [sp, #0]
 800a428:	6120      	str	r0, [r4, #16]
 800a42a:	6163      	str	r3, [r4, #20]
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	b15b      	cbz	r3, 800a448 <__smakebuf_r+0x74>
 800a430:	4630      	mov	r0, r6
 800a432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a436:	f000 f845 	bl	800a4c4 <_isatty_r>
 800a43a:	b128      	cbz	r0, 800a448 <__smakebuf_r+0x74>
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	f023 0303 	bic.w	r3, r3, #3
 800a442:	f043 0301 	orr.w	r3, r3, #1
 800a446:	81a3      	strh	r3, [r4, #12]
 800a448:	89a0      	ldrh	r0, [r4, #12]
 800a44a:	4305      	orrs	r5, r0
 800a44c:	81a5      	strh	r5, [r4, #12]
 800a44e:	e7cd      	b.n	800a3ec <__smakebuf_r+0x18>
 800a450:	08007ab1 	.word	0x08007ab1

0800a454 <__ascii_mbtowc>:
 800a454:	b082      	sub	sp, #8
 800a456:	b901      	cbnz	r1, 800a45a <__ascii_mbtowc+0x6>
 800a458:	a901      	add	r1, sp, #4
 800a45a:	b142      	cbz	r2, 800a46e <__ascii_mbtowc+0x1a>
 800a45c:	b14b      	cbz	r3, 800a472 <__ascii_mbtowc+0x1e>
 800a45e:	7813      	ldrb	r3, [r2, #0]
 800a460:	600b      	str	r3, [r1, #0]
 800a462:	7812      	ldrb	r2, [r2, #0]
 800a464:	1e10      	subs	r0, r2, #0
 800a466:	bf18      	it	ne
 800a468:	2001      	movne	r0, #1
 800a46a:	b002      	add	sp, #8
 800a46c:	4770      	bx	lr
 800a46e:	4610      	mov	r0, r2
 800a470:	e7fb      	b.n	800a46a <__ascii_mbtowc+0x16>
 800a472:	f06f 0001 	mvn.w	r0, #1
 800a476:	e7f8      	b.n	800a46a <__ascii_mbtowc+0x16>

0800a478 <__ascii_wctomb>:
 800a478:	4603      	mov	r3, r0
 800a47a:	4608      	mov	r0, r1
 800a47c:	b141      	cbz	r1, 800a490 <__ascii_wctomb+0x18>
 800a47e:	2aff      	cmp	r2, #255	; 0xff
 800a480:	d904      	bls.n	800a48c <__ascii_wctomb+0x14>
 800a482:	228a      	movs	r2, #138	; 0x8a
 800a484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	4770      	bx	lr
 800a48c:	2001      	movs	r0, #1
 800a48e:	700a      	strb	r2, [r1, #0]
 800a490:	4770      	bx	lr

0800a492 <abort>:
 800a492:	2006      	movs	r0, #6
 800a494:	b508      	push	{r3, lr}
 800a496:	f000 f84d 	bl	800a534 <raise>
 800a49a:	2001      	movs	r0, #1
 800a49c:	f7f7 fbe1 	bl	8001c62 <_exit>

0800a4a0 <_fstat_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	4d06      	ldr	r5, [pc, #24]	; (800a4c0 <_fstat_r+0x20>)
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	f7f7 fc0a 	bl	8001cc6 <_fstat>
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	d102      	bne.n	800a4bc <_fstat_r+0x1c>
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	b103      	cbz	r3, 800a4bc <_fstat_r+0x1c>
 800a4ba:	6023      	str	r3, [r4, #0]
 800a4bc:	bd38      	pop	{r3, r4, r5, pc}
 800a4be:	bf00      	nop
 800a4c0:	20001dac 	.word	0x20001dac

0800a4c4 <_isatty_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	4d05      	ldr	r5, [pc, #20]	; (800a4e0 <_isatty_r+0x1c>)
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	f7f7 fc08 	bl	8001ce4 <_isatty>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_isatty_r+0x1a>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_isatty_r+0x1a>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20001dac 	.word	0x20001dac

0800a4e4 <_raise_r>:
 800a4e4:	291f      	cmp	r1, #31
 800a4e6:	b538      	push	{r3, r4, r5, lr}
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	460d      	mov	r5, r1
 800a4ec:	d904      	bls.n	800a4f8 <_raise_r+0x14>
 800a4ee:	2316      	movs	r3, #22
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4fa:	b112      	cbz	r2, 800a502 <_raise_r+0x1e>
 800a4fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a500:	b94b      	cbnz	r3, 800a516 <_raise_r+0x32>
 800a502:	4620      	mov	r0, r4
 800a504:	f000 f830 	bl	800a568 <_getpid_r>
 800a508:	462a      	mov	r2, r5
 800a50a:	4601      	mov	r1, r0
 800a50c:	4620      	mov	r0, r4
 800a50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a512:	f000 b817 	b.w	800a544 <_kill_r>
 800a516:	2b01      	cmp	r3, #1
 800a518:	d00a      	beq.n	800a530 <_raise_r+0x4c>
 800a51a:	1c59      	adds	r1, r3, #1
 800a51c:	d103      	bne.n	800a526 <_raise_r+0x42>
 800a51e:	2316      	movs	r3, #22
 800a520:	6003      	str	r3, [r0, #0]
 800a522:	2001      	movs	r0, #1
 800a524:	e7e7      	b.n	800a4f6 <_raise_r+0x12>
 800a526:	2400      	movs	r4, #0
 800a528:	4628      	mov	r0, r5
 800a52a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a52e:	4798      	blx	r3
 800a530:	2000      	movs	r0, #0
 800a532:	e7e0      	b.n	800a4f6 <_raise_r+0x12>

0800a534 <raise>:
 800a534:	4b02      	ldr	r3, [pc, #8]	; (800a540 <raise+0xc>)
 800a536:	4601      	mov	r1, r0
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	f7ff bfd3 	b.w	800a4e4 <_raise_r>
 800a53e:	bf00      	nop
 800a540:	20000018 	.word	0x20000018

0800a544 <_kill_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	2300      	movs	r3, #0
 800a548:	4d06      	ldr	r5, [pc, #24]	; (800a564 <_kill_r+0x20>)
 800a54a:	4604      	mov	r4, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	4611      	mov	r1, r2
 800a550:	602b      	str	r3, [r5, #0]
 800a552:	f7f7 fb76 	bl	8001c42 <_kill>
 800a556:	1c43      	adds	r3, r0, #1
 800a558:	d102      	bne.n	800a560 <_kill_r+0x1c>
 800a55a:	682b      	ldr	r3, [r5, #0]
 800a55c:	b103      	cbz	r3, 800a560 <_kill_r+0x1c>
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	bd38      	pop	{r3, r4, r5, pc}
 800a562:	bf00      	nop
 800a564:	20001dac 	.word	0x20001dac

0800a568 <_getpid_r>:
 800a568:	f7f7 bb64 	b.w	8001c34 <_getpid>

0800a56c <_init>:
 800a56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56e:	bf00      	nop
 800a570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a572:	bc08      	pop	{r3}
 800a574:	469e      	mov	lr, r3
 800a576:	4770      	bx	lr

0800a578 <_fini>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	bf00      	nop
 800a57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57e:	bc08      	pop	{r3}
 800a580:	469e      	mov	lr, r3
 800a582:	4770      	bx	lr
