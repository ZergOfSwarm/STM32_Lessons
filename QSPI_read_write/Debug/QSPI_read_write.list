
QSPI_read_write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004dc4  08004dc4  00014dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08004dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000094  2400007c  08004e48  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000110  08004e48  00020110  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c881  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001dae  00000000  00000000  0002c92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000978  00000000  00000000  0002e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000880  00000000  00000000  0002f058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003632c  00000000  00000000  0002f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000beff  00000000  00000000  00065c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015441d  00000000  00000000  00071b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c5f20  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002884  00000000  00000000  001c5f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004d38 	.word	0x08004d38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	08004d38 	.word	0x08004d38

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003a6:	4b31      	ldr	r3, [pc, #196]	; (800046c <MX_GPIO_Init+0xdc>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	4a2f      	ldr	r2, [pc, #188]	; (800046c <MX_GPIO_Init+0xdc>)
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003b6:	4b2d      	ldr	r3, [pc, #180]	; (800046c <MX_GPIO_Init+0xdc>)
 80003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003c4:	4b29      	ldr	r3, [pc, #164]	; (800046c <MX_GPIO_Init+0xdc>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <MX_GPIO_Init+0xdc>)
 80003cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <MX_GPIO_Init+0xdc>)
 80003d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b22      	ldr	r3, [pc, #136]	; (800046c <MX_GPIO_Init+0xdc>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	4a20      	ldr	r2, [pc, #128]	; (800046c <MX_GPIO_Init+0xdc>)
 80003ea:	f043 0302 	orr.w	r3, r3, #2
 80003ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_GPIO_Init+0xdc>)
 80003f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f8:	f003 0302 	and.w	r3, r3, #2
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_GPIO_Init+0xdc>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	4a19      	ldr	r2, [pc, #100]	; (800046c <MX_GPIO_Init+0xdc>)
 8000408:	f043 0308 	orr.w	r3, r3, #8
 800040c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <MX_GPIO_Init+0xdc>)
 8000412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000416:	f003 0308 	and.w	r3, r3, #8
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_GPIO_Init+0xdc>)
 8000420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000424:	4a11      	ldr	r2, [pc, #68]	; (800046c <MX_GPIO_Init+0xdc>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_GPIO_Init+0xdc>)
 8000430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2108      	movs	r1, #8
 8000440:	480b      	ldr	r0, [pc, #44]	; (8000470 <MX_GPIO_Init+0xe0>)
 8000442:	f001 fb1f 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000446:	2308      	movs	r3, #8
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2300      	movs	r3, #0
 8000454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	4619      	mov	r1, r3
 800045c:	4804      	ldr	r0, [pc, #16]	; (8000470 <MX_GPIO_Init+0xe0>)
 800045e:	f001 f961 	bl	8001724 <HAL_GPIO_Init>

}
 8000462:	bf00      	nop
 8000464:	3728      	adds	r7, #40	; 0x28
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	58024400 	.word	0x58024400
 8000470:	58021000 	.word	0x58021000

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08e      	sub	sp, #56	; 0x38
 8000478:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800047a:	4b51      	ldr	r3, [pc, #324]	; (80005c0 <main+0x14c>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000492:	4b4b      	ldr	r3, [pc, #300]	; (80005c0 <main+0x14c>)
 8000494:	2200      	movs	r2, #0
 8000496:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800049a:	f3bf 8f4f 	dsb	sy
}
 800049e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
}
 80004a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004a6:	4b46      	ldr	r3, [pc, #280]	; (80005c0 <main+0x14c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a45      	ldr	r2, [pc, #276]	; (80005c0 <main+0x14c>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004b2:	f3bf 8f4f 	dsb	sy
}
 80004b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy
}
 80004bc:	e000      	b.n	80004c0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004c0:	4b3f      	ldr	r3, [pc, #252]	; (80005c0 <main+0x14c>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d138      	bne.n	800053e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004cc:	4b3c      	ldr	r3, [pc, #240]	; (80005c0 <main+0x14c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004da:	4b39      	ldr	r3, [pc, #228]	; (80005c0 <main+0x14c>)
 80004dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004e0:	637b      	str	r3, [r7, #52]	; 0x34

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004e4:	0b5b      	lsrs	r3, r3, #13
 80004e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004ea:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004f8:	015a      	lsls	r2, r3, #5
 80004fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000502:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000504:	492e      	ldr	r1, [pc, #184]	; (80005c0 <main+0x14c>)
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800050c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1ef      	bne.n	80004f6 <main+0x82>
    } while(sets-- != 0U);
 8000516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	633a      	str	r2, [r7, #48]	; 0x30
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1e5      	bne.n	80004ec <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <main+0x14c>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a25      	ldr	r2, [pc, #148]	; (80005c0 <main+0x14c>)
 800052c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000530:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000532:	f3bf 8f4f 	dsb	sy
}
 8000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
}
 800053c:	e000      	b.n	8000540 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800053e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 ff4a 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f84c 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f7ff ff22 	bl	8000390 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800054c:	f000 f8fc 	bl	8000748 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  w25qxx_Init();
 8000550:	f000 faf0 	bl	8000b34 <w25qxx_Init>
  w25qxx_GetID();
 8000554:	f000 fb02 	bl	8000b5c <w25qxx_GetID>
  //W25qxx_EraseChip(); // approx 13 second to execute
  W25qxx_Write((uint8_t*)TEXT_Buffer, 0, SIZE);
 8000558:	221b      	movs	r2, #27
 800055a:	2100      	movs	r1, #0
 800055c:	4819      	ldr	r0, [pc, #100]	; (80005c4 <main+0x150>)
 800055e:	f000 fceb 	bl	8000f38 <W25qxx_Write>
  W25qxx_Write((uint8_t*)TEXT_Buffer2, SIZE, SIZE2);
 8000562:	220f      	movs	r2, #15
 8000564:	211b      	movs	r1, #27
 8000566:	4818      	ldr	r0, [pc, #96]	; (80005c8 <main+0x154>)
 8000568:	f000 fce6 	bl	8000f38 <W25qxx_Write>

  sprintf(buf, "%u", number); // Конвектируем число в строку.
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <main+0x158>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4917      	ldr	r1, [pc, #92]	; (80005d0 <main+0x15c>)
 8000574:	4817      	ldr	r0, [pc, #92]	; (80005d4 <main+0x160>)
 8000576:	f003 ff71 	bl	800445c <siprintf>
  W25qxx_Write((uint8_t*)buf, 0, strlen(buf)); // Сохраняем во Flash память
 800057a:	4816      	ldr	r0, [pc, #88]	; (80005d4 <main+0x160>)
 800057c:	f7ff feb0 	bl	80002e0 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29b      	uxth	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <main+0x160>)
 800058a:	f000 fcd5 	bl	8000f38 <W25qxx_Write>

  W25qxx_Read(datatemp, 0, SIZE+SIZE2+strlen(buf));
 800058e:	4811      	ldr	r0, [pc, #68]	; (80005d4 <main+0x160>)
 8000590:	f7ff fea6 	bl	80002e0 <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800059a:	463b      	mov	r3, r7
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fc3a 	bl	8000e18 <W25qxx_Read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count ++;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <main+0x164>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <main+0x164>)
 80005ae:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80005b0:	2108      	movs	r1, #8
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x168>)
 80005b4:	f001 fa7f 	bl	8001ab6 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80005b8:	20fa      	movs	r0, #250	; 0xfa
 80005ba:	f000 ff9f 	bl	80014fc <HAL_Delay>
	  count ++;
 80005be:	e7f1      	b.n	80005a4 <main+0x130>
 80005c0:	e000ed00 	.word	0xe000ed00
 80005c4:	08004d54 	.word	0x08004d54
 80005c8:	08004d70 	.word	0x08004d70
 80005cc:	24000000 	.word	0x24000000
 80005d0:	08004d50 	.word	0x08004d50
 80005d4:	2400009c 	.word	0x2400009c
 80005d8:	24000098 	.word	0x24000098
 80005dc:	58021000 	.word	0x58021000

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09e      	sub	sp, #120	; 0x78
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005ea:	224c      	movs	r2, #76	; 0x4c
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 ff2c 	bl	800444c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2220      	movs	r2, #32
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 ff25 	bl	800444c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000602:	2002      	movs	r0, #2
 8000604:	f001 fa72 	bl	8001aec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b48      	ldr	r3, [pc, #288]	; (8000730 <SystemClock_Config+0x150>)
 800060e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000610:	4a47      	ldr	r2, [pc, #284]	; (8000730 <SystemClock_Config+0x150>)
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000618:	4b45      	ldr	r3, [pc, #276]	; (8000730 <SystemClock_Config+0x150>)
 800061a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	4b44      	ldr	r3, [pc, #272]	; (8000734 <SystemClock_Config+0x154>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a43      	ldr	r2, [pc, #268]	; (8000734 <SystemClock_Config+0x154>)
 8000628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b41      	ldr	r3, [pc, #260]	; (8000734 <SystemClock_Config+0x154>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800063a:	bf00      	nop
 800063c:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <SystemClock_Config+0x154>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000648:	d1f8      	bne.n	800063c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <SystemClock_Config+0x158>)
 800064c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000650:	4a39      	ldr	r2, [pc, #228]	; (8000738 <SystemClock_Config+0x158>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800065a:	4b37      	ldr	r3, [pc, #220]	; (8000738 <SystemClock_Config+0x158>)
 800065c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000660:	f003 0302 	and.w	r3, r3, #2
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b31      	ldr	r3, [pc, #196]	; (8000734 <SystemClock_Config+0x154>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a30      	ldr	r2, [pc, #192]	; (8000734 <SystemClock_Config+0x154>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <SystemClock_Config+0x154>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <SystemClock_Config+0x150>)
 8000684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <SystemClock_Config+0x150>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0x150>)
 8000690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069a:	bf00      	nop
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0x154>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a8:	d1f8      	bne.n	800069c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b8:	2302      	movs	r3, #2
 80006ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006bc:	2305      	movs	r3, #5
 80006be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006c0:	23c0      	movs	r3, #192	; 0xc0
 80006c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006d0:	2308      	movs	r3, #8
 80006d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fe81 	bl	80023e8 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80006ec:	f000 f826 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	233f      	movs	r3, #63	; 0x3f
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006fc:	2308      	movs	r3, #8
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000700:	2340      	movs	r3, #64	; 0x40
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000704:	2340      	movs	r3, #64	; 0x40
 8000706:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800070e:	2340      	movs	r3, #64	; 0x40
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2104      	movs	r1, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fa93 	bl	8002c44 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000724:	f000 f80a 	bl	800073c <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3778      	adds	r7, #120	; 0x78
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	58000400 	.word	0x58000400
 8000734:	58024800 	.word	0x58024800
 8000738:	58024400 	.word	0x58024400

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_QUADSPI_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_QUADSPI_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4-1;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_QUADSPI_Init+0x50>)
 8000754:	2203      	movs	r2, #3
 8000756:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_QUADSPI_Init+0x50>)
 800075a:	2204      	movs	r2, #4
 800075c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_QUADSPI_Init+0x50>)
 8000760:	2210      	movs	r2, #16
 8000762:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_QUADSPI_Init+0x50>)
 8000766:	2216      	movs	r2, #22
 8000768:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_QUADSPI_Init+0x50>)
 800076c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000770:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_QUADSPI_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_QUADSPI_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_QUADSPI_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_QUADSPI_Init+0x50>)
 8000786:	f001 f9eb 	bl	8001b60 <HAL_QSPI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000790:	f7ff ffd4 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	240000a4 	.word	0x240000a4
 800079c:	52005000 	.word	0x52005000

080007a0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ba      	sub	sp, #232	; 0xe8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	22bc      	movs	r2, #188	; 0xbc
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 fe43 	bl	800444c <memset>
  if(qspiHandle->Instance==QUADSPI)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a54      	ldr	r2, [pc, #336]	; (800091c <HAL_QSPI_MspInit+0x17c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	f040 80a0 	bne.w	8000912 <HAL_QSPI_MspInit+0x172>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80007d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80007d8:	2300      	movs	r3, #0
 80007da:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 fd5f 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80007ec:	f7ff ffa6 	bl	800073c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80007f0:	4b4b      	ldr	r3, [pc, #300]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 80007f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80007f6:	4a4a      	ldr	r2, [pc, #296]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000800:	4b47      	ldr	r3, [pc, #284]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 8000802:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	4b44      	ldr	r3, [pc, #272]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a42      	ldr	r2, [pc, #264]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b40      	ldr	r3, [pc, #256]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b3c      	ldr	r3, [pc, #240]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000832:	4a3b      	ldr	r2, [pc, #236]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083c:	4b38      	ldr	r3, [pc, #224]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b35      	ldr	r3, [pc, #212]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000850:	4a33      	ldr	r2, [pc, #204]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <HAL_QSPI_MspInit+0x180>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000868:	2304      	movs	r3, #4
 800086a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000880:	2309      	movs	r3, #9
 8000882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000886:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800088a:	4619      	mov	r1, r3
 800088c:	4825      	ldr	r0, [pc, #148]	; (8000924 <HAL_QSPI_MspInit+0x184>)
 800088e:	f000 ff49 	bl	8001724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000892:	2304      	movs	r3, #4
 8000894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80008aa:	2309      	movs	r3, #9
 80008ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008b4:	4619      	mov	r1, r3
 80008b6:	481c      	ldr	r0, [pc, #112]	; (8000928 <HAL_QSPI_MspInit+0x188>)
 80008b8:	f000 ff34 	bl	8001724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80008bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80008d6:	2309      	movs	r3, #9
 80008d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <HAL_QSPI_MspInit+0x18c>)
 80008e4:	f000 ff1e 	bl	8001724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008e8:	2340      	movs	r3, #64	; 0x40
 80008ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000900:	230a      	movs	r3, #10
 8000902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800090a:	4619      	mov	r1, r3
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <HAL_QSPI_MspInit+0x188>)
 800090e:	f000 ff09 	bl	8001724 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000912:	bf00      	nop
 8000914:	37e8      	adds	r7, #232	; 0xe8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	52005000 	.word	0x52005000
 8000920:	58024400 	.word	0x58024400
 8000924:	58021000 	.word	0x58021000
 8000928:	58020400 	.word	0x58020400
 800092c:	58020c00 	.word	0x58020c00

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_MspInit+0x30>)
 8000938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x30>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x30>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	58024400 	.word	0x58024400

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 fd84 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c0:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <_sbrk+0x5c>)
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <_sbrk+0x60>)
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_sbrk+0x64>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <_sbrk+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d207      	bcs.n	80009f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e8:	f003 fd06 	bl	80043f8 <__errno>
 80009ec:	4603      	mov	r3, r0
 80009ee:	220c      	movs	r2, #12
 80009f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f6:	e009      	b.n	8000a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <_sbrk+0x64>)
 8000a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	24080000 	.word	0x24080000
 8000a18:	00000400 	.word	0x00000400
 8000a1c:	240000f0 	.word	0x240000f0
 8000a20:	24000110 	.word	0x24000110

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a28:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <SystemInit+0xe4>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a36      	ldr	r2, [pc, #216]	; (8000b08 <SystemInit+0xe4>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a38:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <SystemInit+0xe8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 030f 	and.w	r3, r3, #15
 8000a40:	2b06      	cmp	r3, #6
 8000a42:	d807      	bhi.n	8000a54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <SystemInit+0xe8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f023 030f 	bic.w	r3, r3, #15
 8000a4c:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <SystemInit+0xe8>)
 8000a4e:	f043 0307 	orr.w	r3, r3, #7
 8000a52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a54:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <SystemInit+0xec>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a2d      	ldr	r2, [pc, #180]	; (8000b10 <SystemInit+0xec>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a60:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <SystemInit+0xec>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a66:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <SystemInit+0xec>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4929      	ldr	r1, [pc, #164]	; (8000b10 <SystemInit+0xec>)
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <SystemInit+0xf0>)
 8000a6e:	4013      	ands	r3, r2
 8000a70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <SystemInit+0xe8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d007      	beq.n	8000a8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <SystemInit+0xe8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f023 030f 	bic.w	r3, r3, #15
 8000a86:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <SystemInit+0xe8>)
 8000a88:	f043 0307 	orr.w	r3, r3, #7
 8000a8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <SystemInit+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <SystemInit+0xec>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <SystemInit+0xec>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <SystemInit+0xec>)
 8000aa2:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <SystemInit+0xf4>)
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <SystemInit+0xec>)
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <SystemInit+0xf8>)
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <SystemInit+0xec>)
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <SystemInit+0xfc>)
 8000ab0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <SystemInit+0xec>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <SystemInit+0xec>)
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <SystemInit+0xfc>)
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <SystemInit+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <SystemInit+0xec>)
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <SystemInit+0xfc>)
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <SystemInit+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <SystemInit+0xec>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <SystemInit+0xec>)
 8000ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ada:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <SystemInit+0xec>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <SystemInit+0x100>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <SystemInit+0x104>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000aee:	d202      	bcs.n	8000af6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <SystemInit+0x108>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <SystemInit+0x10c>)
 8000af8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000afc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	52002000 	.word	0x52002000
 8000b10:	58024400 	.word	0x58024400
 8000b14:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b18:	02020200 	.word	0x02020200
 8000b1c:	01ff0000 	.word	0x01ff0000
 8000b20:	01010280 	.word	0x01010280
 8000b24:	5c001000 	.word	0x5c001000
 8000b28:	ffff0000 	.word	0xffff0000
 8000b2c:	51008108 	.word	0x51008108
 8000b30:	52004000 	.word	0x52004000

08000b34 <w25qxx_Init>:
w25qxx_StatusTypeDef w25qxx_Mode = w25qxx_SPIMode;
uint8_t w25qxx_StatusReg[3];
uint16_t w25qxx_ID;

void w25qxx_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
//	HAL_Delay(5);
//	MX_QUADSPI_Init();
	QSPI_ResetDevice(&hqspi);
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <w25qxx_Init+0x20>)
 8000b3a:	f000 fb39 	bl	80011b0 <QSPI_ResetDevice>
//	HAL_Delay(0); // 1ms wait device stable
	w25qxx_ID = w25qxx_GetID();
 8000b3e:	f000 f80d 	bl	8000b5c <w25qxx_GetID>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <w25qxx_Init+0x24>)
 8000b48:	801a      	strh	r2, [r3, #0]
	w25qxx_ReadAllStatusReg();
 8000b4a:	f000 f897 	bl	8000c7c <w25qxx_ReadAllStatusReg>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	240000a4 	.word	0x240000a4
 8000b58:	240000f8 	.word	0x240000f8

08000b5c <w25qxx_GetID>:

uint16_t w25qxx_GetID(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af06      	add	r7, sp, #24
	uint8_t ID[6];
	uint16_t deviceID;
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <w25qxx_GetID+0x94>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d114      	bne.n	8000b94 <w25qxx_GetID+0x38>
		QSPI_Send_CMD(&hqspi,W25X_QUAD_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,6,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	9304      	str	r3, [sp, #16]
 8000b6e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000b72:	9303      	str	r3, [sp, #12]
 8000b74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b78:	9302      	str	r3, [sp, #8]
 8000b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	2306      	movs	r3, #6
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2194      	movs	r1, #148	; 0x94
 8000b8c:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <w25qxx_GetID+0x98>)
 8000b8e:	f000 fb68 	bl	8001262 <QSPI_Send_CMD>
 8000b92:	e013      	b.n	8000bbc <w25qxx_GetID+0x60>
	else
		QSPI_Send_CMD(&hqspi,W25X_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8000b94:	2306      	movs	r3, #6
 8000b96:	9304      	str	r3, [sp, #16]
 8000b98:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000b9c:	9303      	str	r3, [sp, #12]
 8000b9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ba2:	9302      	str	r3, [sp, #8]
 8000ba4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	2300      	movs	r3, #0
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2190      	movs	r1, #144	; 0x90
 8000bb6:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <w25qxx_GetID+0x98>)
 8000bb8:	f000 fb53 	bl	8001262 <QSPI_Send_CMD>

	/* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, ID, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <w25qxx_GetID+0x98>)
 8000bc6:	f001 f92f 	bl	8001e28 <HAL_QSPI_Receive>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <w25qxx_GetID+0x78>
  {
    return w25qxx_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e008      	b.n	8000be6 <w25qxx_GetID+0x8a>
  }
	deviceID = (ID[0] << 8) | ID[1];
 8000bd4:	783b      	ldrb	r3, [r7, #0]
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	787b      	ldrb	r3, [r7, #1]
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	80fb      	strh	r3, [r7, #6]

	return deviceID;
 8000be4:	88fb      	ldrh	r3, [r7, #6]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2400000c 	.word	0x2400000c
 8000bf4:	240000a4 	.word	0x240000a4

08000bf8 <w25qxx_ReadSR>:

uint8_t w25qxx_ReadSR(uint8_t SR)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af06      	add	r7, sp, #24
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <w25qxx_ReadSR+0x7c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b05      	cmp	r3, #5
 8000c0c:	d112      	bne.n	8000c34 <w25qxx_ReadSR+0x3c>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 8000c0e:	79f9      	ldrb	r1, [r7, #7]
 8000c10:	2301      	movs	r3, #1
 8000c12:	9304      	str	r3, [sp, #16]
 8000c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c18:	9303      	str	r3, [sp, #12]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	2300      	movs	r3, #0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4812      	ldr	r0, [pc, #72]	; (8000c78 <w25qxx_ReadSR+0x80>)
 8000c2e:	f000 fb18 	bl	8001262 <QSPI_Send_CMD>
 8000c32:	e011      	b.n	8000c58 <w25qxx_ReadSR+0x60>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 8000c34:	79f9      	ldrb	r1, [r7, #7]
 8000c36:	2301      	movs	r3, #1
 8000c38:	9304      	str	r3, [sp, #16]
 8000c3a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000c3e:	9303      	str	r3, [sp, #12]
 8000c40:	2300      	movs	r3, #0
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2200      	movs	r2, #0
 8000c52:	4809      	ldr	r0, [pc, #36]	; (8000c78 <w25qxx_ReadSR+0x80>)
 8000c54:	f000 fb05 	bl	8001262 <QSPI_Send_CMD>
	
	if (HAL_QSPI_Receive(&hqspi,&byte,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c58:	f107 030f 	add.w	r3, r7, #15
 8000c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <w25qxx_ReadSR+0x80>)
 8000c64:	f001 f8e0 	bl	8001e28 <HAL_QSPI_Receive>
	{
		
	}
  return byte;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2400000c 	.word	0x2400000c
 8000c78:	240000a4 	.word	0x240000a4

08000c7c <w25qxx_ReadAllStatusReg>:

  return HAL_QSPI_Transmit(&hqspi,&data,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
}

uint8_t w25qxx_ReadAllStatusReg(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	
	w25qxx_StatusReg[0] = w25qxx_ReadSR(W25X_ReadStatusReg1);
 8000c80:	2005      	movs	r0, #5
 8000c82:	f7ff ffb9 	bl	8000bf8 <w25qxx_ReadSR>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <w25qxx_ReadAllStatusReg+0x34>)
 8000c8c:	701a      	strb	r2, [r3, #0]
	w25qxx_StatusReg[1] = w25qxx_ReadSR(W25X_ReadStatusReg2);
 8000c8e:	2035      	movs	r0, #53	; 0x35
 8000c90:	f7ff ffb2 	bl	8000bf8 <w25qxx_ReadSR>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <w25qxx_ReadAllStatusReg+0x34>)
 8000c9a:	705a      	strb	r2, [r3, #1]
	w25qxx_StatusReg[2] = w25qxx_ReadSR(W25X_ReadStatusReg3);
 8000c9c:	2015      	movs	r0, #21
 8000c9e:	f7ff ffab 	bl	8000bf8 <w25qxx_ReadSR>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <w25qxx_ReadAllStatusReg+0x34>)
 8000ca8:	709a      	strb	r2, [r3, #2]
	return w25qxx_OK;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240000f4 	.word	0x240000f4

08000cb4 <W25QXX_Wait_Busy>:

void W25QXX_Wait_Busy(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	while((w25qxx_ReadSR(W25X_ReadStatusReg1) & 0x01) == 0x01);
 8000cb8:	bf00      	nop
 8000cba:	2005      	movs	r0, #5
 8000cbc:	f7ff ff9c 	bl	8000bf8 <w25qxx_ReadSR>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d0f7      	beq.n	8000cba <W25QXX_Wait_Busy+0x6>
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <W25qxx_WriteEnable>:
  }
  return w25qxx_OK;
}

uint8_t W25qxx_WriteEnable(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	return QSPI_WriteEnable(&hqspi);
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <W25qxx_WriteEnable+0x14>)
 8000cd6:	f000 faf9 	bl	80012cc <QSPI_WriteEnable>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	b2db      	uxtb	r3, r3
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	240000a4 	.word	0x240000a4

08000ce8 <W25qxx_EraseSector>:
  * @brief  Erase 4KB Sector of the OSPI memory.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseSector(uint32_t SectorAddress)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af06      	add	r7, sp, #24
 8000cee:	6078      	str	r0, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8000cf0:	f7ff ffee 	bl	8000cd0 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 8000cf4:	f7ff ffde 	bl	8000cb4 <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <W25qxx_EraseSector+0x84>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b05      	cmp	r3, #5
 8000cfe:	d115      	bne.n	8000d2c <W25qxx_EraseSector+0x44>
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_NONE,0);
 8000d00:	2300      	movs	r3, #0
 8000d02:	9304      	str	r3, [sp, #16]
 8000d04:	2300      	movs	r3, #0
 8000d06:	9303      	str	r3, [sp, #12]
 8000d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	2300      	movs	r3, #0
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	2120      	movs	r1, #32
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <W25qxx_EraseSector+0x88>)
 8000d22:	f000 fa9e 	bl	8001262 <QSPI_Send_CMD>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e014      	b.n	8000d56 <W25qxx_EraseSector+0x6e>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_NONE,0);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9304      	str	r3, [sp, #16]
 8000d30:	2300      	movs	r3, #0
 8000d32:	9303      	str	r3, [sp, #12]
 8000d34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	4808      	ldr	r0, [pc, #32]	; (8000d70 <W25qxx_EraseSector+0x88>)
 8000d4e:	f000 fa88 	bl	8001262 <QSPI_Send_CMD>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
	

	if(result == w25qxx_OK)
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <W25qxx_EraseSector+0x78>
		W25QXX_Wait_Busy();
 8000d5c:	f7ff ffaa 	bl	8000cb4 <W25QXX_Wait_Busy>

	return result;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2400000c 	.word	0x2400000c
 8000d70:	240000a4 	.word	0x240000a4

08000d74 <W25qxx_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ W25qxx page size
  * @retval QSPI memory status
  */
uint8_t W25qxx_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af06      	add	r7, sp, #24
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8000d80:	f7ff ffa6 	bl	8000cd0 <W25qxx_WriteEnable>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <W25qxx_PageProgram+0x9c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b05      	cmp	r3, #5
 8000d8a:	d116      	bne.n	8000dba <W25qxx_PageProgram+0x46>
		result = QSPI_Send_CMD(&hqspi,W25X_QUAD_INPUT_PAGE_PROG_CMD,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_4_LINES,Size);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	9304      	str	r3, [sp, #16]
 8000d90:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000d94:	9303      	str	r3, [sp, #12]
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	2300      	movs	r3, #0
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	2132      	movs	r1, #50	; 0x32
 8000dae:	4819      	ldr	r0, [pc, #100]	; (8000e14 <W25qxx_PageProgram+0xa0>)
 8000db0:	f000 fa57 	bl	8001262 <QSPI_Send_CMD>
 8000db4:	4603      	mov	r3, r0
 8000db6:	75fb      	strb	r3, [r7, #23]
 8000db8:	e015      	b.n	8000de6 <W25qxx_PageProgram+0x72>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_PageProgram,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_4_LINES,Size);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	9304      	str	r3, [sp, #16]
 8000dbe:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000dc2:	9303      	str	r3, [sp, #12]
 8000dc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd8:	68ba      	ldr	r2, [r7, #8]
 8000dda:	2102      	movs	r1, #2
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <W25qxx_PageProgram+0xa0>)
 8000dde:	f000 fa40 	bl	8001262 <QSPI_Send_CMD>
 8000de2:	4603      	mov	r3, r0
 8000de4:	75fb      	strb	r3, [r7, #23]
	
	if(result == w25qxx_OK)
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d107      	bne.n	8000dfc <W25qxx_PageProgram+0x88>
		result = HAL_QSPI_Transmit(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <W25qxx_PageProgram+0xa0>)
 8000df4:	f000 ff86 	bl	8001d04 <HAL_QSPI_Transmit>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	75fb      	strb	r3, [r7, #23]
	
	/* �ȴ�д����� */
	if(result == w25qxx_OK)
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <W25qxx_PageProgram+0x92>
		W25QXX_Wait_Busy();
 8000e02:	f7ff ff57 	bl	8000cb4 <W25QXX_Wait_Busy>
	
  return result;
 8000e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2400000c 	.word	0x2400000c
 8000e14:	240000a4 	.word	0x240000a4

08000e18 <W25qxx_Read>:


uint8_t W25qxx_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	; 0x50
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
	
	QSPI_CommandTypeDef      s_command;

	/* Configure the command for the read instruction */
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 8000e24:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <W25qxx_Read+0xa4>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d107      	bne.n	8000e3c <W25qxx_Read+0x24>
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8000e2c:	23eb      	movs	r3, #235	; 0xeb
 8000e2e:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000e30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	  s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD;
 8000e36:	2306      	movs	r3, #6
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e3a:	e006      	b.n	8000e4a <W25qxx_Read+0x32>
	}
	else 
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8000e3c:	23eb      	movs	r3, #235	; 0xeb
 8000e3e:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
		s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD-2;
 8000e46:	2304      	movs	r3, #4
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  }
	
	s_command.Address           = ReadAddr;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	61bb      	str	r3, [r7, #24]
	s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e58:	623b      	str	r3, [r7, #32]

	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000e5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.AlternateBytes    = 0xFF;
 8000e60:	23ff      	movs	r3, #255	; 0xff
 8000e62:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.DataMode          = QSPI_DATA_4_LINES;	
 8000e68:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.NbData            = Size;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	63fb      	str	r3, [r7, #60]	; 0x3c
		
	s_command.DdrMode         = QSPI_DDR_MODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	643b      	str	r3, [r7, #64]	; 0x40

	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e76:	2300      	movs	r3, #0
 8000e78:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	64bb      	str	r3, [r7, #72]	; 0x48
	
	result = HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e86:	4619      	mov	r1, r3
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <W25qxx_Read+0xa8>)
 8000e8a:	f000 fedd 	bl	8001c48 <HAL_QSPI_Command>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	if(result == w25qxx_OK)
 8000e94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d108      	bne.n	8000eae <W25qxx_Read+0x96>
		result = HAL_QSPI_Receive(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea0:	68f9      	ldr	r1, [r7, #12]
 8000ea2:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <W25qxx_Read+0xa8>)
 8000ea4:	f000 ffc0 	bl	8001e28 <HAL_QSPI_Receive>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	return result;
 8000eae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3750      	adds	r7, #80	; 0x50
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2400000c 	.word	0x2400000c
 8000ec0:	240000a4 	.word	0x240000a4

08000ec4 <W25qxx_WriteNoCheck>:


void W25qxx_WriteNoCheck(uint8_t *pBuffer,uint32_t WriteAddr,uint32_t NumByteToWrite)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	uint16_t pageremain;	   
	pageremain = 256 - WriteAddr % 256;
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000edc:	82fb      	strh	r3, [r7, #22]
	if (NumByteToWrite <= pageremain)
 8000ede:	8afb      	ldrh	r3, [r7, #22]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d801      	bhi.n	8000eea <W25qxx_WriteNoCheck+0x26>
	{
		pageremain = NumByteToWrite;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	82fb      	strh	r3, [r7, #22]
	}
	while(1)
	{
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 8000eea:	8afb      	ldrh	r3, [r7, #22]
 8000eec:	461a      	mov	r2, r3
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff ff3f 	bl	8000d74 <W25qxx_PageProgram>
		if (NumByteToWrite == pageremain)
 8000ef6:	8afb      	ldrh	r3, [r7, #22]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d016      	beq.n	8000f2c <W25qxx_WriteNoCheck+0x68>
		{
			break;
		}
	 	else //NumByteToWrite>pageremain
		{
			pBuffer += pageremain;
 8000efe:	8afb      	ldrh	r3, [r7, #22]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
			WriteAddr += pageremain;
 8000f06:	8afb      	ldrh	r3, [r7, #22]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]

			NumByteToWrite -= pageremain;
 8000f0e:	8afb      	ldrh	r3, [r7, #22]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	607b      	str	r3, [r7, #4]
			if (NumByteToWrite > 256)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f1c:	d903      	bls.n	8000f26 <W25qxx_WriteNoCheck+0x62>
				pageremain = 256;
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	82fb      	strh	r3, [r7, #22]
 8000f24:	e7e1      	b.n	8000eea <W25qxx_WriteNoCheck+0x26>
			else
				pageremain = NumByteToWrite;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	82fb      	strh	r3, [r7, #22]
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 8000f2a:	e7de      	b.n	8000eea <W25qxx_WriteNoCheck+0x26>
			break;
 8000f2c:	bf00      	nop
		}
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <W25qxx_Write>:


void W25qxx_Write(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	f843 0c14 	str.w	r0, [r3, #-20]
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	f843 1c18 	str.w	r1, [r3, #-24]
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	f823 2c1a 	strh.w	r2, [r3, #-26]
	uint16_t secoff;
	uint16_t secremain;
 	uint16_t i;
	uint8_t W25QXX_BUF[4096];

 	secpos = WriteAddr / 4096;
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000f60:	0b1b      	lsrs	r3, r3, #12
 8000f62:	f241 021c 	movw	r2, #4124	; 0x101c
 8000f66:	443a      	add	r2, r7
 8000f68:	6013      	str	r3, [r2, #0]
	secoff = WriteAddr % 4096;
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f78:	f241 021a 	movw	r2, #4122	; 0x101a
 8000f7c:	443a      	add	r2, r7
 8000f7e:	8013      	strh	r3, [r2, #0]
	secremain = 4096 - secoff;
 8000f80:	f241 031a 	movw	r3, #4122	; 0x101a
 8000f84:	443b      	add	r3, r7
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000f8c:	f241 0218 	movw	r2, #4120	; 0x1018
 8000f90:	443a      	add	r2, r7
 8000f92:	8013      	strh	r3, [r2, #0]

 	if (NumByteToWrite <= secremain) secremain = NumByteToWrite;
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 8000f9c:	f241 0318 	movw	r3, #4120	; 0x1018
 8000fa0:	443b      	add	r3, r7
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d807      	bhi.n	8000fb8 <W25qxx_Write+0x80>
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8000fb0:	f241 0218 	movw	r2, #4120	; 0x1018
 8000fb4:	443a      	add	r2, r7
 8000fb6:	8013      	strh	r3, [r2, #0]
	while(1)
	{
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096);
 8000fb8:	f241 031c 	movw	r3, #4124	; 0x101c
 8000fbc:	443b      	add	r3, r7
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	0319      	lsls	r1, r3, #12
 8000fc2:	4b7a      	ldr	r3, [pc, #488]	; (80011ac <W25qxx_Write+0x274>)
 8000fc4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000fc8:	443b      	add	r3, r7
 8000fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff22 	bl	8000e18 <W25qxx_Read>
		for (i = 0;i < secremain; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f241 0216 	movw	r2, #4118	; 0x1016
 8000fda:	443a      	add	r2, r7
 8000fdc:	8013      	strh	r3, [r2, #0]
 8000fde:	e018      	b.n	8001012 <W25qxx_Write+0xda>
		{
			if (W25QXX_BUF[secoff+i] != 0XFF) break;
 8000fe0:	f241 031a 	movw	r3, #4122	; 0x101a
 8000fe4:	443b      	add	r3, r7
 8000fe6:	881a      	ldrh	r2, [r3, #0]
 8000fe8:	f241 0316 	movw	r3, #4118	; 0x1016
 8000fec:	443b      	add	r3, r7
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f107 0220 	add.w	r2, r7, #32
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000ffc:	2bff      	cmp	r3, #255	; 0xff
 8000ffe:	d113      	bne.n	8001028 <W25qxx_Write+0xf0>
		for (i = 0;i < secremain; i++)
 8001000:	f241 0316 	movw	r3, #4118	; 0x1016
 8001004:	443b      	add	r3, r7
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	f241 0216 	movw	r2, #4118	; 0x1016
 800100e:	443a      	add	r2, r7
 8001010:	8013      	strh	r3, [r2, #0]
 8001012:	f241 0316 	movw	r3, #4118	; 0x1016
 8001016:	443b      	add	r3, r7
 8001018:	881a      	ldrh	r2, [r3, #0]
 800101a:	f241 0318 	movw	r3, #4120	; 0x1018
 800101e:	443b      	add	r3, r7
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d3dc      	bcc.n	8000fe0 <W25qxx_Write+0xa8>
 8001026:	e000      	b.n	800102a <W25qxx_Write+0xf2>
			if (W25QXX_BUF[secoff+i] != 0XFF) break;
 8001028:	bf00      	nop
		}
		if (i < secremain)
 800102a:	f241 0316 	movw	r3, #4118	; 0x1016
 800102e:	443b      	add	r3, r7
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	f241 0318 	movw	r3, #4120	; 0x1018
 8001036:	443b      	add	r3, r7
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d245      	bcs.n	80010ca <W25qxx_Write+0x192>
		{
			W25qxx_EraseSector(secpos);
 800103e:	f241 031c 	movw	r3, #4124	; 0x101c
 8001042:	443b      	add	r3, r7
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	f7ff fe4f 	bl	8000ce8 <W25qxx_EraseSector>
			for (i = 0; i < secremain; i++)
 800104a:	2300      	movs	r3, #0
 800104c:	f241 0216 	movw	r2, #4118	; 0x1016
 8001050:	443a      	add	r2, r7
 8001052:	8013      	strh	r3, [r2, #0]
 8001054:	e020      	b.n	8001098 <W25qxx_Write+0x160>
			{
				W25QXX_BUF[i + secoff] = pBuffer[i];
 8001056:	f241 0316 	movw	r3, #4118	; 0x1016
 800105a:	443b      	add	r3, r7
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	f107 0220 	add.w	r2, r7, #32
 8001062:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8001066:	441a      	add	r2, r3
 8001068:	f241 0316 	movw	r3, #4118	; 0x1016
 800106c:	443b      	add	r3, r7
 800106e:	8819      	ldrh	r1, [r3, #0]
 8001070:	f241 031a 	movw	r3, #4122	; 0x101a
 8001074:	443b      	add	r3, r7
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	440b      	add	r3, r1
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	f107 0120 	add.w	r1, r7, #32
 8001080:	440b      	add	r3, r1
 8001082:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for (i = 0; i < secremain; i++)
 8001086:	f241 0316 	movw	r3, #4118	; 0x1016
 800108a:	443b      	add	r3, r7
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	f241 0216 	movw	r2, #4118	; 0x1016
 8001094:	443a      	add	r2, r7
 8001096:	8013      	strh	r3, [r2, #0]
 8001098:	f241 0316 	movw	r3, #4118	; 0x1016
 800109c:	443b      	add	r3, r7
 800109e:	881a      	ldrh	r2, [r3, #0]
 80010a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80010a4:	443b      	add	r3, r7
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d3d4      	bcc.n	8001056 <W25qxx_Write+0x11e>
			}
			W25qxx_WriteNoCheck(W25QXX_BUF, secpos * 4096, 4096);
 80010ac:	f241 031c 	movw	r3, #4124	; 0x101c
 80010b0:	443b      	add	r3, r7
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0319      	lsls	r1, r3, #12
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <W25qxx_Write+0x274>)
 80010b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80010bc:	443b      	add	r3, r7
 80010be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fefe 	bl	8000ec4 <W25qxx_WriteNoCheck>
 80010c8:	e010      	b.n	80010ec <W25qxx_Write+0x1b4>
		}
		else
		{
			W25qxx_WriteNoCheck(pBuffer, WriteAddr, secremain);
 80010ca:	f241 0318 	movw	r3, #4120	; 0x1018
 80010ce:	443b      	add	r3, r7
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	f107 0220 	add.w	r2, r7, #32
 80010d6:	4611      	mov	r1, r2
 80010d8:	f107 0220 	add.w	r2, r7, #32
 80010dc:	4610      	mov	r0, r2
 80010de:	461a      	mov	r2, r3
 80010e0:	f851 1c18 	ldr.w	r1, [r1, #-24]
 80010e4:	f850 0c14 	ldr.w	r0, [r0, #-20]
 80010e8:	f7ff feec 	bl	8000ec4 <W25qxx_WriteNoCheck>
		}
		if (NumByteToWrite == secremain)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 80010f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80010f8:	443b      	add	r3, r7
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d04e      	beq.n	800119e <W25qxx_Write+0x266>
		{
			break;
		}
		else
		{
			secpos++;
 8001100:	f241 031c 	movw	r3, #4124	; 0x101c
 8001104:	443b      	add	r3, r7
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	f241 021c 	movw	r2, #4124	; 0x101c
 800110e:	443a      	add	r2, r7
 8001110:	6013      	str	r3, [r2, #0]
			secoff = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	f241 021a 	movw	r2, #4122	; 0x101a
 8001118:	443a      	add	r2, r7
 800111a:	8013      	strh	r3, [r2, #0]

			pBuffer += secremain;
 800111c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001120:	443b      	add	r3, r7
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f107 0220 	add.w	r2, r7, #32
 8001128:	4611      	mov	r1, r2
 800112a:	f107 0220 	add.w	r2, r7, #32
 800112e:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8001132:	4413      	add	r3, r2
 8001134:	f841 3c14 	str.w	r3, [r1, #-20]
			WriteAddr += secremain;
 8001138:	f241 0318 	movw	r3, #4120	; 0x1018
 800113c:	443b      	add	r3, r7
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	f107 0220 	add.w	r2, r7, #32
 8001144:	4611      	mov	r1, r2
 8001146:	f107 0220 	add.w	r2, r7, #32
 800114a:	f852 2c18 	ldr.w	r2, [r2, #-24]
 800114e:	4413      	add	r3, r2
 8001150:	f841 3c18 	str.w	r3, [r1, #-24]
			NumByteToWrite -= secremain;
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4619      	mov	r1, r3
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	f833 2c1a 	ldrh.w	r2, [r3, #-26]
 8001162:	f241 0318 	movw	r3, #4120	; 0x1018
 8001166:	443b      	add	r3, r7
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f821 3c1a 	strh.w	r3, [r1, #-26]
			if (NumByteToWrite > 4096)
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8001178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800117c:	d906      	bls.n	800118c <W25qxx_Write+0x254>
				secremain = 4096;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	f241 0218 	movw	r2, #4120	; 0x1018
 8001186:	443a      	add	r2, r7
 8001188:	8013      	strh	r3, [r2, #0]
 800118a:	e715      	b.n	8000fb8 <W25qxx_Write+0x80>
			else
				secremain = NumByteToWrite;
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	f833 3c1a 	ldrh.w	r3, [r3, #-26]
 8001194:	f241 0218 	movw	r2, #4120	; 0x1018
 8001198:	443a      	add	r2, r7
 800119a:	8013      	strh	r3, [r2, #0]
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096);
 800119c:	e70c      	b.n	8000fb8 <W25qxx_Write+0x80>
			break;
 800119e:	bf00      	nop
		}
	}
}
 80011a0:	bf00      	nop
 80011a2:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	ffffeff4 	.word	0xffffeff4

080011b0 <QSPI_ResetDevice>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetDevice(QSPI_HandleTypeDef *hqspi)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b090      	sub	sp, #64	; 0x40
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011bc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 80011be:	2366      	movs	r3, #102	; 0x66
 80011c0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80011da:	2300      	movs	r3, #0
 80011dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fd2d 	bl	8001c48 <HAL_QSPI_Command>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <QSPI_ResetDevice+0x48>
  {
    return w25qxx_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e030      	b.n	800125a <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset device command */
  s_command.Instruction = W25X_ResetDevice;
 80011f8:	2399      	movs	r3, #153	; 0x99
 80011fa:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fd1e 	bl	8001c48 <HAL_QSPI_Command>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <QSPI_ResetDevice+0x66>
  {
    return w25qxx_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e021      	b.n	800125a <QSPI_ResetDevice+0xaa>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001216:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 800121c:	2366      	movs	r3, #102	; 0x66
 800121e:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	4619      	mov	r1, r3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fd0c 	bl	8001c48 <HAL_QSPI_Command>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <QSPI_ResetDevice+0x8a>
  {
    return w25qxx_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset memory command*/
  s_command.Instruction = W25X_ResetDevice;
 800123a:	2399      	movs	r3, #153	; 0x99
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	4619      	mov	r1, r3
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fcfd 	bl	8001c48 <HAL_QSPI_Command>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <QSPI_ResetDevice+0xa8>
  {
    return w25qxx_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <QSPI_ResetDevice+0xaa>
  }

  return w25qxx_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3740      	adds	r7, #64	; 0x40
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <QSPI_Send_CMD>:


static uint8_t QSPI_Send_CMD(QSPI_HandleTypeDef *hqspi,uint32_t instruction, uint32_t address,uint32_t addressSize,uint32_t dummyCycles, 
                    uint32_t instructionMode,uint32_t addressMode, uint32_t dataMode, uint32_t dataSize)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b092      	sub	sp, #72	; 0x48
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction        = instruction;   
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	613b      	str	r3, [r7, #16]
	  Cmdhandler.InstructionMode    = instructionMode;  
 8001274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
	
    Cmdhandler.Address            = address;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	617b      	str	r3, [r7, #20]
    Cmdhandler.AddressSize        = addressSize;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	61fb      	str	r3, [r7, #28]
	  Cmdhandler.AddressMode        = addressMode;
 8001280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
	  
	  Cmdhandler.AlternateBytes     = 0x00;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
	  Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;                              
 800128c:	2300      	movs	r3, #0
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DummyCycles        = dummyCycles;                   
 8001290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
       					      				
    Cmdhandler.DataMode           = dataMode;
 8001294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.NbData             = dataSize; 
 8001298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
	
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;           	
 800129c:	2300      	movs	r3, #0
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80012a0:	2300      	movs	r3, #0
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 80012a4:	2300      	movs	r3, #0
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_QSPI_Command(hqspi, &Cmdhandler, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4619      	mov	r1, r3
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 fcc8 	bl	8001c48 <HAL_QSPI_Command>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <QSPI_Send_CMD+0x60>
      return w25qxx_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <QSPI_Send_CMD+0x62>

    return w25qxx_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3748      	adds	r7, #72	; 0x48
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b096      	sub	sp, #88	; 0x58
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
	if(w25qxx_Mode == w25qxx_QPIMode)
 80012d4:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <QSPI_WriteEnable+0xb4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d103      	bne.n	80012e4 <QSPI_WriteEnable+0x18>
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80012dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80012e2:	e002      	b.n	80012ea <QSPI_WriteEnable+0x1e>
	else 
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80012e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = W25X_WriteEnable;
 80012ea:	2306      	movs	r3, #6
 80012ec:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001302:	2300      	movs	r3, #0
 8001304:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001306:	2300      	movs	r3, #0
 8001308:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800130a:	f107 0320 	add.w	r3, r7, #32
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fc97 	bl	8001c48 <HAL_QSPI_Command>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <QSPI_WriteEnable+0x58>
  {
    return w25qxx_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e028      	b.n	8001376 <QSPI_WriteEnable+0xaa>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25X_SR_WREN;
 8001324:	2302      	movs	r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = W25X_SR_WREN;
 8001328:	2302      	movs	r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001334:	2310      	movs	r3, #16
 8001336:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = W25X_ReadStatusReg1;
 800133e:	2305      	movs	r3, #5
 8001340:	623b      	str	r3, [r7, #32]
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <QSPI_WriteEnable+0xb4>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d103      	bne.n	8001352 <QSPI_WriteEnable+0x86>
		s_command.DataMode     = QSPI_DATA_4_LINES;
 800134a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
 8001350:	e002      	b.n	8001358 <QSPI_WriteEnable+0x8c>
  else 
		s_command.DataMode     = QSPI_DATA_1_LINE;
 8001352:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
	
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001358:	f107 0208 	add.w	r2, r7, #8
 800135c:	f107 0120 	add.w	r1, r7, #32
 8001360:	f241 3388 	movw	r3, #5000	; 0x1388
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fdfc 	bl	8001f62 <HAL_QSPI_AutoPolling>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <QSPI_WriteEnable+0xa8>
  {
    return w25qxx_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <QSPI_WriteEnable+0xaa>
  }

  return w25qxx_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3758      	adds	r7, #88	; 0x58
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2400000c 	.word	0x2400000c

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001388:	f7ff fb4c 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	; (80013c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	; (80013d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b2:	f003 f827 	bl	8004404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b6:	f7ff f85d 	bl	8000474 <main>
  bx  lr
 80013ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013c4:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80013c8:	08004dcc 	.word	0x08004dcc
  ldr r2, =_sbss
 80013cc:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80013d0:	24000110 	.word	0x24000110

080013d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC3_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 f96e 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013e4:	f001 fde4 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_Init+0x68>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	4913      	ldr	r1, [pc, #76]	; (8001444 <HAL_Init+0x6c>)
 80013f6:	5ccb      	ldrb	r3, [r1, r3]
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001400:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_Init+0x68>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_Init+0x6c>)
 800140c:	5cd3      	ldrb	r3, [r2, r3]
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_Init+0x70>)
 800141a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <HAL_Init+0x74>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001422:	200f      	movs	r0, #15
 8001424:	f000 f814 	bl	8001450 <HAL_InitTick>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e002      	b.n	8001438 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001432:	f7ff fa7d 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	58024400 	.word	0x58024400
 8001444:	08004d80 	.word	0x08004d80
 8001448:	24000008 	.word	0x24000008
 800144c:	24000004 	.word	0x24000004

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_InitTick+0x60>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e021      	b.n	80014a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_InitTick+0x64>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_InitTick+0x60>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f945 	bl	800170a <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001498:	f000 f91d 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x68>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	24000014 	.word	0x24000014
 80014b4:	24000004 	.word	0x24000004
 80014b8:	24000010 	.word	0x24000010

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	24000014 	.word	0x24000014
 80014e0:	240000fc 	.word	0x240000fc

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	240000fc 	.word	0x240000fc

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	24000014 	.word	0x24000014

08001544 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetREVID+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0c1b      	lsrs	r3, r3, #16
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	5c001000 	.word	0x5c001000

0800155c <__NVIC_SetPriorityGrouping>:
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <__NVIC_SetPriorityGrouping+0x40>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	4313      	orrs	r3, r2
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x40>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	05fa0000 	.word	0x05fa0000

080015a4 <__NVIC_GetPriorityGrouping>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_SetPriority>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff47 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff5e 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff90 	bl	8001614 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5f 	bl	80015c0 <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffb2 	bl	800167c <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001732:	4b89      	ldr	r3, [pc, #548]	; (8001958 <HAL_GPIO_Init+0x234>)
 8001734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001736:	e194      	b.n	8001a62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8186 	beq.w	8001a5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b01      	cmp	r3, #1
 800175a:	d005      	beq.n	8001768 <HAL_GPIO_Init+0x44>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d130      	bne.n	80017ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800179e:	2201      	movs	r2, #1
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f003 0201 	and.w	r2, r3, #1
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d017      	beq.n	8001806 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d123      	bne.n	800185a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	69b9      	ldr	r1, [r7, #24]
 8001856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0203 	and.w	r2, r3, #3
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80e0 	beq.w	8001a5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_GPIO_Init+0x238>)
 800189e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018a2:	4a2e      	ldr	r2, [pc, #184]	; (800195c <HAL_GPIO_Init+0x238>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_GPIO_Init+0x238>)
 80018ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ba:	4a29      	ldr	r2, [pc, #164]	; (8001960 <HAL_GPIO_Init+0x23c>)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a20      	ldr	r2, [pc, #128]	; (8001964 <HAL_GPIO_Init+0x240>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d052      	beq.n	800198c <HAL_GPIO_Init+0x268>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <HAL_GPIO_Init+0x244>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d031      	beq.n	8001952 <HAL_GPIO_Init+0x22e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a1e      	ldr	r2, [pc, #120]	; (800196c <HAL_GPIO_Init+0x248>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d02b      	beq.n	800194e <HAL_GPIO_Init+0x22a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_GPIO_Init+0x24c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d025      	beq.n	800194a <HAL_GPIO_Init+0x226>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <HAL_GPIO_Init+0x250>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01f      	beq.n	8001946 <HAL_GPIO_Init+0x222>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_GPIO_Init+0x254>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d019      	beq.n	8001942 <HAL_GPIO_Init+0x21e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a1a      	ldr	r2, [pc, #104]	; (800197c <HAL_GPIO_Init+0x258>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0x21a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a19      	ldr	r2, [pc, #100]	; (8001980 <HAL_GPIO_Init+0x25c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00d      	beq.n	800193a <HAL_GPIO_Init+0x216>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a18      	ldr	r2, [pc, #96]	; (8001984 <HAL_GPIO_Init+0x260>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x212>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a17      	ldr	r2, [pc, #92]	; (8001988 <HAL_GPIO_Init+0x264>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_GPIO_Init+0x20e>
 800192e:	2309      	movs	r3, #9
 8001930:	e02d      	b.n	800198e <HAL_GPIO_Init+0x26a>
 8001932:	230a      	movs	r3, #10
 8001934:	e02b      	b.n	800198e <HAL_GPIO_Init+0x26a>
 8001936:	2308      	movs	r3, #8
 8001938:	e029      	b.n	800198e <HAL_GPIO_Init+0x26a>
 800193a:	2307      	movs	r3, #7
 800193c:	e027      	b.n	800198e <HAL_GPIO_Init+0x26a>
 800193e:	2306      	movs	r3, #6
 8001940:	e025      	b.n	800198e <HAL_GPIO_Init+0x26a>
 8001942:	2305      	movs	r3, #5
 8001944:	e023      	b.n	800198e <HAL_GPIO_Init+0x26a>
 8001946:	2304      	movs	r3, #4
 8001948:	e021      	b.n	800198e <HAL_GPIO_Init+0x26a>
 800194a:	2303      	movs	r3, #3
 800194c:	e01f      	b.n	800198e <HAL_GPIO_Init+0x26a>
 800194e:	2302      	movs	r3, #2
 8001950:	e01d      	b.n	800198e <HAL_GPIO_Init+0x26a>
 8001952:	2301      	movs	r3, #1
 8001954:	e01b      	b.n	800198e <HAL_GPIO_Init+0x26a>
 8001956:	bf00      	nop
 8001958:	58000080 	.word	0x58000080
 800195c:	58024400 	.word	0x58024400
 8001960:	58000400 	.word	0x58000400
 8001964:	58020000 	.word	0x58020000
 8001968:	58020400 	.word	0x58020400
 800196c:	58020800 	.word	0x58020800
 8001970:	58020c00 	.word	0x58020c00
 8001974:	58021000 	.word	0x58021000
 8001978:	58021400 	.word	0x58021400
 800197c:	58021800 	.word	0x58021800
 8001980:	58021c00 	.word	0x58021c00
 8001984:	58022000 	.word	0x58022000
 8001988:	58022400 	.word	0x58022400
 800198c:	2300      	movs	r3, #0
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800199e:	4938      	ldr	r1, [pc, #224]	; (8001a80 <HAL_GPIO_Init+0x35c>)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f ae63 	bne.w	8001738 <HAL_GPIO_Init+0x14>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	3724      	adds	r7, #36	; 0x24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	58000400 	.word	0x58000400

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001aa0:	e003      	b.n	8001aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	619a      	str	r2, [r3, #24]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac8:	887a      	ldrh	r2, [r7, #2]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4013      	ands	r3, r2
 8001ace:	041a      	lsls	r2, r3, #16
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	400b      	ands	r3, r1
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_PWREx_ConfigSupply+0x70>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d00a      	beq.n	8001b16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_PWREx_ConfigSupply+0x70>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e01f      	b.n	8001b52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e01d      	b.n	8001b52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_PWREx_ConfigSupply+0x70>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f023 0207 	bic.w	r2, r3, #7
 8001b1e:	490f      	ldr	r1, [pc, #60]	; (8001b5c <HAL_PWREx_ConfigSupply+0x70>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b26:	f7ff fcdd 	bl	80014e4 <HAL_GetTick>
 8001b2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b2c:	e009      	b.n	8001b42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b2e:	f7ff fcd9 	bl	80014e4 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b3c:	d901      	bls.n	8001b42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e007      	b.n	8001b52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_PWREx_ConfigSupply+0x70>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b4e:	d1ee      	bne.n	8001b2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	58024800 	.word	0x58024800

08001b60 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff fcbc 	bl	80014e4 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e05f      	b.n	8001c38 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7fe fe0b 	bl	80007a0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001b8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fa5e 	bl	8002050 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	021a      	lsls	r2, r3, #8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2120      	movs	r1, #32
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fa56 	bl	800206c <QSPI_WaitFlagStateUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d135      	bne.n	8001c36 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_QSPI_Init+0xe0>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6852      	ldr	r2, [r2, #4]
 8001bd8:	0611      	lsls	r1, r2, #24
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68d2      	ldr	r2, [r2, #12]
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	69d2      	ldr	r2, [r2, #28]
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6a12      	ldr	r2, [r2, #32]
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_QSPI_Init+0xe4>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6912      	ldr	r2, [r2, #16]
 8001c02:	0411      	lsls	r1, r2, #16
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6952      	ldr	r2, [r2, #20]
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6992      	ldr	r2, [r2, #24]
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001c36:	7afb      	ldrb	r3, [r7, #11]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	00ffff2f 	.word	0x00ffff2f
 8001c44:	ffe0f8fe 	.word	0xffe0f8fe

08001c48 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff fc46 	bl	80014e4 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_QSPI_Command+0x22>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e048      	b.n	8001cfc <HAL_QSPI_Command+0xb4>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d137      	bne.n	8001cee <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2200      	movs	r2, #0
 8001c94:	2120      	movs	r1, #32
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f9e8 	bl	800206c <QSPI_WaitFlagStateUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d125      	bne.n	8001cf2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 fa15 	bl	80020da <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d115      	bne.n	8001ce4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f9d2 	bl	800206c <QSPI_WaitFlagStateUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ce2:	e006      	b.n	8001cf2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cec:	e001      	b.n	8001cf2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff fbe6 	bl	80014e4 <HAL_GetTick>
 8001d18:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3320      	adds	r3, #32
 8001d20:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_QSPI_Transmit+0x2e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e076      	b.n	8001e20 <HAL_QSPI_Transmit+0x11c>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d165      	bne.n	8001e12 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d056      	beq.n	8001e00 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2212      	movs	r2, #18
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001d86:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001d88:	e01b      	b.n	8001dc2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2201      	movs	r2, #1
 8001d92:	2104      	movs	r1, #4
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f969 	bl	800206c <QSPI_WaitFlagStateUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d113      	bne.n	8001dcc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1df      	bne.n	8001d8a <HAL_QSPI_Transmit+0x86>
 8001dca:	e000      	b.n	8001dce <HAL_QSPI_Transmit+0xca>
          break;
 8001dcc:	bf00      	nop
      }

      if (status == HAL_OK)
 8001dce:	7ffb      	ldrb	r3, [r7, #31]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d110      	bne.n	8001df6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2102      	movs	r1, #2
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f944 	bl	800206c <QSPI_WaitFlagStateUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001de8:	7ffb      	ldrb	r3, [r7, #31]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2202      	movs	r2, #2
 8001df4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001dfe:	e00a      	b.n	8001e16 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f043 0208 	orr.w	r2, r3, #8
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	77fb      	strb	r3, [r7, #31]
 8001e10:	e001      	b.n	8001e16 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
 8001e14:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001e1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff fb54 	bl	80014e4 <HAL_GetTick>
 8001e3c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_QSPI_Receive+0x36>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e07d      	b.n	8001f5a <HAL_QSPI_Receive+0x132>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d16c      	bne.n	8001f4c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d05d      	beq.n	8001f3a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2222      	movs	r2, #34	; 0x22
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001eb6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001ec0:	e01c      	b.n	8001efc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2106      	movs	r1, #6
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f8cd 	bl	800206c <QSPI_WaitFlagStateUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d114      	bne.n	8001f06 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	1e5a      	subs	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1de      	bne.n	8001ec2 <HAL_QSPI_Receive+0x9a>
 8001f04:	e000      	b.n	8001f08 <HAL_QSPI_Receive+0xe0>
          break;
 8001f06:	bf00      	nop
      }

      if (status == HAL_OK)
 8001f08:	7ffb      	ldrb	r3, [r7, #31]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d110      	bne.n	8001f30 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2201      	movs	r2, #1
 8001f16:	2102      	movs	r1, #2
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f8a7 	bl	800206c <QSPI_WaitFlagStateUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f38:	e00a      	b.n	8001f50 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f043 0208 	orr.w	r2, r3, #8
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	77fb      	strb	r3, [r7, #31]
 8001f4a:	e001      	b.n	8001f50 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001f58:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b088      	sub	sp, #32
 8001f66:	af02      	add	r7, sp, #8
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff fab8 	bl	80014e4 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_QSPI_AutoPolling+0x24>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e060      	b.n	8002048 <HAL_QSPI_AutoPolling+0xe6>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d14f      	bne.n	800203a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2242      	movs	r2, #66	; 0x42
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f85a 	bl	800206c <QSPI_WaitFlagStateUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d13d      	bne.n	800203e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6852      	ldr	r2, [r2, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6892      	ldr	r2, [r2, #8]
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001ff8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f866 	bl	80020da <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2201      	movs	r2, #1
 8002016:	2108      	movs	r1, #8
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f827 	bl	800206c <QSPI_WaitFlagStateUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10a      	bne.n	800203e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2208      	movs	r2, #8
 800202e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002038:	e001      	b.n	800203e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002046:	7dfb      	ldrb	r3, [r7, #23]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800207c:	e01a      	b.n	80020b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002084:	d016      	beq.n	80020b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002086:	f7ff fa2d 	bl	80014e4 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	429a      	cmp	r2, r3
 8002094:	d302      	bcc.n	800209c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2204      	movs	r2, #4
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e00e      	b.n	80020d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf14      	ite	ne
 80020c2:	2301      	movne	r3, #1
 80020c4:	2300      	moveq	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1d6      	bne.n	800207e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <QSPI_Config+0x28>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80020f4:	d005      	beq.n	8002102 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3a01      	subs	r2, #1
 8002100:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80b9 	beq.w	800227e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05f      	beq.n	80021d4 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	6892      	ldr	r2, [r2, #8]
 800211c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d031      	beq.n	800218a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	431a      	orrs	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002134:	431a      	orrs	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	431a      	orrs	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	049b      	lsls	r3, r3, #18
 8002142:	431a      	orrs	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	431a      	orrs	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	431a      	orrs	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	431a      	orrs	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	431a      	orrs	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	431a      	orrs	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	ea42 0103 	orr.w	r1, r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	430a      	orrs	r2, r1
 8002172:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800217a:	f000 812e 	beq.w	80023da <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	6852      	ldr	r2, [r2, #4]
 8002186:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002188:	e127      	b.n	80023da <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	431a      	orrs	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002198:	431a      	orrs	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	431a      	orrs	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	049b      	lsls	r3, r3, #18
 80021a6:	431a      	orrs	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	431a      	orrs	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	ea42 0103 	orr.w	r1, r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	615a      	str	r2, [r3, #20]
}
 80021d2:	e102      	b.n	80023da <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02e      	beq.n	800223a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	431a      	orrs	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	431a      	orrs	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	049b      	lsls	r3, r3, #18
 80021f8:	431a      	orrs	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	431a      	orrs	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	431a      	orrs	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	431a      	orrs	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	431a      	orrs	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	ea42 0103 	orr.w	r1, r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	430a      	orrs	r2, r1
 8002222:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800222a:	f000 80d6 	beq.w	80023da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	6852      	ldr	r2, [r2, #4]
 8002236:	619a      	str	r2, [r3, #24]
}
 8002238:	e0cf      	b.n	80023da <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	431a      	orrs	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	431a      	orrs	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	431a      	orrs	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	049b      	lsls	r3, r3, #18
 8002256:	431a      	orrs	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	431a      	orrs	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	431a      	orrs	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	431a      	orrs	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	ea42 0103 	orr.w	r1, r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	430a      	orrs	r2, r1
 800227a:	615a      	str	r2, [r3, #20]
}
 800227c:	e0ad      	b.n	80023da <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d058      	beq.n	8002338 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	6892      	ldr	r2, [r2, #8]
 800228e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02d      	beq.n	80022f4 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	431a      	orrs	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	431a      	orrs	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	431a      	orrs	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	049b      	lsls	r3, r3, #18
 80022b4:	431a      	orrs	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	ea42 0103 	orr.w	r1, r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	430a      	orrs	r2, r1
 80022de:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80022e6:	d078      	beq.n	80023da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	6852      	ldr	r2, [r2, #4]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	e072      	b.n	80023da <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	431a      	orrs	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	431a      	orrs	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	049b      	lsls	r3, r3, #18
 8002310:	431a      	orrs	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	431a      	orrs	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	431a      	orrs	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	431a      	orrs	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	ea42 0103 	orr.w	r1, r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	430a      	orrs	r2, r1
 8002334:	615a      	str	r2, [r3, #20]
}
 8002336:	e050      	b.n	80023da <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d02a      	beq.n	8002396 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	431a      	orrs	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	431a      	orrs	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	431a      	orrs	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	049b      	lsls	r3, r3, #18
 800235c:	431a      	orrs	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	431a      	orrs	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	431a      	orrs	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	431a      	orrs	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	ea42 0103 	orr.w	r1, r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	430a      	orrs	r2, r1
 8002380:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002388:	d027      	beq.n	80023da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	6852      	ldr	r2, [r2, #4]
 8002392:	619a      	str	r2, [r3, #24]
}
 8002394:	e021      	b.n	80023da <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01d      	beq.n	80023da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	431a      	orrs	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	431a      	orrs	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	049b      	lsls	r3, r3, #18
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	ea42 0103 	orr.w	r1, r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	615a      	str	r2, [r3, #20]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f000 bc1d 	b.w	8002c36 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8087 	beq.w	8002518 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240a:	4b99      	ldr	r3, [pc, #612]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002414:	4b96      	ldr	r3, [pc, #600]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	2b10      	cmp	r3, #16
 800241e:	d007      	beq.n	8002430 <HAL_RCC_OscConfig+0x48>
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b18      	cmp	r3, #24
 8002424:	d110      	bne.n	8002448 <HAL_RCC_OscConfig+0x60>
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d10b      	bne.n	8002448 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	4b8f      	ldr	r3, [pc, #572]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d06c      	beq.n	8002516 <HAL_RCC_OscConfig+0x12e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d168      	bne.n	8002516 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e3f6      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x78>
 8002452:	4b87      	ldr	r3, [pc, #540]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a86      	ldr	r2, [pc, #536]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e02e      	b.n	80024be <HAL_RCC_OscConfig+0xd6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x9a>
 8002468:	4b81      	ldr	r3, [pc, #516]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a80      	ldr	r2, [pc, #512]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b7e      	ldr	r3, [pc, #504]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a7d      	ldr	r2, [pc, #500]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e01d      	b.n	80024be <HAL_RCC_OscConfig+0xd6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248a:	d10c      	bne.n	80024a6 <HAL_RCC_OscConfig+0xbe>
 800248c:	4b78      	ldr	r3, [pc, #480]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a77      	ldr	r2, [pc, #476]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b75      	ldr	r3, [pc, #468]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a74      	ldr	r2, [pc, #464]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	e00b      	b.n	80024be <HAL_RCC_OscConfig+0xd6>
 80024a6:	4b72      	ldr	r3, [pc, #456]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a71      	ldr	r2, [pc, #452]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b6f      	ldr	r3, [pc, #444]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6e      	ldr	r2, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d013      	beq.n	80024ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7ff f80d 	bl	80014e4 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ce:	f7ff f809 	bl	80014e4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b64      	cmp	r3, #100	; 0x64
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e3aa      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024e0:	4b63      	ldr	r3, [pc, #396]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0xe6>
 80024ec:	e014      	b.n	8002518 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fff9 	bl	80014e4 <HAL_GetTick>
 80024f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f6:	f7fe fff5 	bl	80014e4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b64      	cmp	r3, #100	; 0x64
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e396      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002508:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x10e>
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002516:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80cb 	beq.w	80026bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002526:	4b52      	ldr	r3, [pc, #328]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800252e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002530:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_RCC_OscConfig+0x164>
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	2b18      	cmp	r3, #24
 8002540:	d156      	bne.n	80025f0 <HAL_RCC_OscConfig+0x208>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d151      	bne.n	80025f0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_OscConfig+0x17c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e368      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002564:	4b42      	ldr	r3, [pc, #264]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 0219 	bic.w	r2, r3, #25
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	493f      	ldr	r1, [pc, #252]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002576:	f7fe ffb5 	bl	80014e4 <HAL_GetTick>
 800257a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257e:	f7fe ffb1 	bl	80014e4 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e352      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002590:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	f7fe ffd2 	bl	8001544 <HAL_GetREVID>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d817      	bhi.n	80025da <HAL_RCC_OscConfig+0x1f2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d108      	bne.n	80025c4 <HAL_RCC_OscConfig+0x1dc>
 80025b2:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025ba:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c2:	e07b      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	031b      	lsls	r3, r3, #12
 80025d2:	4927      	ldr	r1, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d8:	e070      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4b25      	ldr	r3, [pc, #148]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	061b      	lsls	r3, r3, #24
 80025e8:	4921      	ldr	r1, [pc, #132]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ee:	e065      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d048      	beq.n	800268a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 0219 	bic.w	r2, r3, #25
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	491a      	ldr	r1, [pc, #104]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe ff6b 	bl	80014e4 <HAL_GetTick>
 800260e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002612:	f7fe ff67 	bl	80014e4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e308      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	f7fe ff88 	bl	8001544 <HAL_GetREVID>
 8002634:	4603      	mov	r3, r0
 8002636:	f241 0203 	movw	r2, #4099	; 0x1003
 800263a:	4293      	cmp	r3, r2
 800263c:	d81a      	bhi.n	8002674 <HAL_RCC_OscConfig+0x28c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d108      	bne.n	8002658 <HAL_RCC_OscConfig+0x270>
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800264e:	4a08      	ldr	r2, [pc, #32]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002654:	6053      	str	r3, [r2, #4]
 8002656:	e031      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	031b      	lsls	r3, r3, #12
 8002666:	4902      	ldr	r1, [pc, #8]	; (8002670 <HAL_RCC_OscConfig+0x288>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
 800266c:	e026      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
 800266e:	bf00      	nop
 8002670:	58024400 	.word	0x58024400
 8002674:	4b9a      	ldr	r3, [pc, #616]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	061b      	lsls	r3, r3, #24
 8002682:	4997      	ldr	r1, [pc, #604]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	e018      	b.n	80026bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268a:	4b95      	ldr	r3, [pc, #596]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a94      	ldr	r2, [pc, #592]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe ff25 	bl	80014e4 <HAL_GetTick>
 800269a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe ff21 	bl	80014e4 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e2c2      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026b0:	4b8b      	ldr	r3, [pc, #556]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80a9 	beq.w	800281c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ca:	4b85      	ldr	r3, [pc, #532]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d4:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d007      	beq.n	80026f0 <HAL_RCC_OscConfig+0x308>
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b18      	cmp	r3, #24
 80026e4:	d13a      	bne.n	800275c <HAL_RCC_OscConfig+0x374>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d135      	bne.n	800275c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f0:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_OscConfig+0x320>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b80      	cmp	r3, #128	; 0x80
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e296      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002708:	f7fe ff1c 	bl	8001544 <HAL_GetREVID>
 800270c:	4603      	mov	r3, r0
 800270e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002712:	4293      	cmp	r3, r2
 8002714:	d817      	bhi.n	8002746 <HAL_RCC_OscConfig+0x35e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	2b20      	cmp	r3, #32
 800271c:	d108      	bne.n	8002730 <HAL_RCC_OscConfig+0x348>
 800271e:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002726:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800272c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800272e:	e075      	b.n	800281c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002730:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	069b      	lsls	r3, r3, #26
 800273e:	4968      	ldr	r1, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002744:	e06a      	b.n	800281c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002746:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	4962      	ldr	r1, [pc, #392]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800275a:	e05f      	b.n	800281c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d042      	beq.n	80027ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002764:	4b5e      	ldr	r3, [pc, #376]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a5d      	ldr	r2, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe feb8 	bl	80014e4 <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002778:	f7fe feb4 	bl	80014e4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e255      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800278a:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002796:	f7fe fed5 	bl	8001544 <HAL_GetREVID>
 800279a:	4603      	mov	r3, r0
 800279c:	f241 0203 	movw	r2, #4099	; 0x1003
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d817      	bhi.n	80027d4 <HAL_RCC_OscConfig+0x3ec>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d108      	bne.n	80027be <HAL_RCC_OscConfig+0x3d6>
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027b4:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027ba:	6053      	str	r3, [r2, #4]
 80027bc:	e02e      	b.n	800281c <HAL_RCC_OscConfig+0x434>
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	4944      	ldr	r1, [pc, #272]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
 80027d2:	e023      	b.n	800281c <HAL_RCC_OscConfig+0x434>
 80027d4:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	493f      	ldr	r1, [pc, #252]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
 80027e8:	e018      	b.n	800281c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3c      	ldr	r2, [pc, #240]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fe75 	bl	80014e4 <HAL_GetTick>
 80027fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027fe:	f7fe fe71 	bl	80014e4 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e212      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002810:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d036      	beq.n	8002896 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d019      	beq.n	8002864 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002834:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7fe fe52 	bl	80014e4 <HAL_GetTick>
 8002840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002844:	f7fe fe4e 	bl	80014e4 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1ef      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x45c>
 8002862:	e018      	b.n	8002896 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	4a1d      	ldr	r2, [pc, #116]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fe38 	bl	80014e4 <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe fe34 	bl	80014e4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1d5      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 800288c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d039      	beq.n	8002916 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fe15 	bl	80014e4 <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028be:	f7fe fe11 	bl	80014e4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1b2      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x4d6>
 80028dc:	e01b      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
 80028de:	bf00      	nop
 80028e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028e4:	4b9b      	ldr	r3, [pc, #620]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a9a      	ldr	r2, [pc, #616]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80028ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028f0:	f7fe fdf8 	bl	80014e4 <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028f8:	f7fe fdf4 	bl	80014e4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e195      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800290a:	4b92      	ldr	r3, [pc, #584]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8081 	beq.w	8002a26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002924:	4b8c      	ldr	r3, [pc, #560]	; (8002b58 <HAL_RCC_OscConfig+0x770>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a8b      	ldr	r2, [pc, #556]	; (8002b58 <HAL_RCC_OscConfig+0x770>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002930:	f7fe fdd8 	bl	80014e4 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002938:	f7fe fdd4 	bl	80014e4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e175      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800294a:	4b83      	ldr	r3, [pc, #524]	; (8002b58 <HAL_RCC_OscConfig+0x770>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d106      	bne.n	800296c <HAL_RCC_OscConfig+0x584>
 800295e:	4b7d      	ldr	r3, [pc, #500]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a7c      	ldr	r2, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	e02d      	b.n	80029c8 <HAL_RCC_OscConfig+0x5e0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10c      	bne.n	800298e <HAL_RCC_OscConfig+0x5a6>
 8002974:	4b77      	ldr	r3, [pc, #476]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a76      	ldr	r2, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
 8002980:	4b74      	ldr	r3, [pc, #464]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a73      	ldr	r2, [pc, #460]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002986:	f023 0304 	bic.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	e01c      	b.n	80029c8 <HAL_RCC_OscConfig+0x5e0>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x5c8>
 8002996:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a6e      	ldr	r2, [pc, #440]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
 80029a2:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0x5e0>
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a67      	ldr	r2, [pc, #412]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
 80029bc:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a64      	ldr	r2, [pc, #400]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029c2:	f023 0304 	bic.w	r3, r3, #4
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fd88 	bl	80014e4 <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe fd84 	bl	80014e4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e123      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ee:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0ee      	beq.n	80029d8 <HAL_RCC_OscConfig+0x5f0>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fd72 	bl	80014e4 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7fe fd6e 	bl	80014e4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e10d      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1a:	4b4e      	ldr	r3, [pc, #312]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ee      	bne.n	8002a04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8102 	beq.w	8002c34 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a30:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a38:	2b18      	cmp	r3, #24
 8002a3a:	f000 80bd 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	f040 809e 	bne.w	8002b84 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a41      	ldr	r2, [pc, #260]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fd46 	bl	80014e4 <HAL_GetTick>
 8002a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fd42 	bl	80014e4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0e3      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_RCC_OscConfig+0x774>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4931      	ldr	r1, [pc, #196]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	628b      	str	r3, [r1, #40]	; 0x28
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	025b      	lsls	r3, r3, #9
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	3b01      	subs	r3, #1
 8002abe:	061b      	lsls	r3, r3, #24
 8002ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ac4:	4923      	ldr	r1, [pc, #140]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_RCC_OscConfig+0x778>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ae2:	00d2      	lsls	r2, r2, #3
 8002ae4:	491b      	ldr	r1, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f023 020c 	bic.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4917      	ldr	r1, [pc, #92]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	f023 0202 	bic.w	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	4912      	ldr	r1, [pc, #72]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_RCC_OscConfig+0x76c>)
 8002b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fccb 	bl	80014e4 <HAL_GetTick>
 8002b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b50:	e011      	b.n	8002b76 <HAL_RCC_OscConfig+0x78e>
 8002b52:	bf00      	nop
 8002b54:	58024400 	.word	0x58024400
 8002b58:	58024800 	.word	0x58024800
 8002b5c:	fffffc0c 	.word	0xfffffc0c
 8002b60:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fcbe 	bl	80014e4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e05f      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b76:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <HAL_RCC_OscConfig+0x858>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x77c>
 8002b82:	e057      	b.n	8002c34 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <HAL_RCC_OscConfig+0x858>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2d      	ldr	r2, [pc, #180]	; (8002c40 <HAL_RCC_OscConfig+0x858>)
 8002b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fca8 	bl	80014e4 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe fca4 	bl	80014e4 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e045      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <HAL_RCC_OscConfig+0x858>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x7b0>
 8002bb6:	e03d      	b.n	8002c34 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_OscConfig+0x858>)
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCC_OscConfig+0x858>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d031      	beq.n	8002c30 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f003 0203 	and.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d12a      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d122      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d11a      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	0a5b      	lsrs	r3, r3, #9
 8002bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d108      	bne.n	8002c30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	0e1b      	lsrs	r3, r3, #24
 8002c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3730      	adds	r7, #48	; 0x30
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	58024400 	.word	0x58024400

08002c44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e19c      	b.n	8002f92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b8a      	ldr	r3, [pc, #552]	; (8002e84 <HAL_RCC_ClockConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d910      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b87      	ldr	r3, [pc, #540]	; (8002e84 <HAL_RCC_ClockConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 020f 	bic.w	r2, r3, #15
 8002c6e:	4985      	ldr	r1, [pc, #532]	; (8002e84 <HAL_RCC_ClockConfig+0x240>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b83      	ldr	r3, [pc, #524]	; (8002e84 <HAL_RCC_ClockConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e184      	b.n	8002f92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d010      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d908      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ca4:	4b78      	ldr	r3, [pc, #480]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	4975      	ldr	r1, [pc, #468]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	4b70      	ldr	r3, [pc, #448]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d908      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cd2:	4b6d      	ldr	r3, [pc, #436]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	496a      	ldr	r1, [pc, #424]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699a      	ldr	r2, [r3, #24]
 8002cf4:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d908      	bls.n	8002d12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d00:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	495e      	ldr	r1, [pc, #376]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d010      	beq.n	8002d40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d908      	bls.n	8002d40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d2e:	4b56      	ldr	r3, [pc, #344]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4953      	ldr	r1, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d908      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f023 020f 	bic.w	r2, r3, #15
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4947      	ldr	r1, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d055      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d7a:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4940      	ldr	r1, [pc, #256]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d94:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0f6      	b.n	8002f92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d115      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0ea      	b.n	8002f92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dc4:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0de      	b.n	8002f92 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0d6      	b.n	8002f92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002de4:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f023 0207 	bic.w	r2, r3, #7
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4925      	ldr	r1, [pc, #148]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe fb75 	bl	80014e4 <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfe:	f7fe fb71 	bl	80014e4 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0be      	b.n	8002f92 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e14:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d1eb      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d010      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d208      	bcs.n	8002e54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f023 020f 	bic.w	r2, r3, #15
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_ClockConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d214      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_RCC_ClockConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	4906      	ldr	r1, [pc, #24]	; (8002e84 <HAL_RCC_ClockConfig+0x240>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e086      	b.n	8002f92 <HAL_RCC_ClockConfig+0x34e>
 8002e84:	52002000 	.word	0x52002000
 8002e88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d208      	bcs.n	8002eba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ea8:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	4939      	ldr	r1, [pc, #228]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d208      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	492e      	ldr	r1, [pc, #184]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d208      	bcs.n	8002f16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	4922      	ldr	r1, [pc, #136]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d010      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d208      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f32:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	4917      	ldr	r1, [pc, #92]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f44:	f000 f834 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	4912      	ldr	r1, [pc, #72]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <HAL_RCC_ClockConfig+0x358>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f6c:	5cd3      	ldrb	r3, [r2, r3]
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x360>)
 8002f7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x364>)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_RCC_ClockConfig+0x368>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fa62 	bl	8001450 <HAL_InitTick>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	58024400 	.word	0x58024400
 8002fa0:	08004d80 	.word	0x08004d80
 8002fa4:	24000008 	.word	0x24000008
 8002fa8:	24000004 	.word	0x24000004
 8002fac:	24000010 	.word	0x24000010

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb6:	4bb3      	ldr	r3, [pc, #716]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fbe:	2b18      	cmp	r3, #24
 8002fc0:	f200 8155 	bhi.w	800326e <HAL_RCC_GetSysClockFreq+0x2be>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08003031 	.word	0x08003031
 8002fd0:	0800326f 	.word	0x0800326f
 8002fd4:	0800326f 	.word	0x0800326f
 8002fd8:	0800326f 	.word	0x0800326f
 8002fdc:	0800326f 	.word	0x0800326f
 8002fe0:	0800326f 	.word	0x0800326f
 8002fe4:	0800326f 	.word	0x0800326f
 8002fe8:	0800326f 	.word	0x0800326f
 8002fec:	08003057 	.word	0x08003057
 8002ff0:	0800326f 	.word	0x0800326f
 8002ff4:	0800326f 	.word	0x0800326f
 8002ff8:	0800326f 	.word	0x0800326f
 8002ffc:	0800326f 	.word	0x0800326f
 8003000:	0800326f 	.word	0x0800326f
 8003004:	0800326f 	.word	0x0800326f
 8003008:	0800326f 	.word	0x0800326f
 800300c:	0800305d 	.word	0x0800305d
 8003010:	0800326f 	.word	0x0800326f
 8003014:	0800326f 	.word	0x0800326f
 8003018:	0800326f 	.word	0x0800326f
 800301c:	0800326f 	.word	0x0800326f
 8003020:	0800326f 	.word	0x0800326f
 8003024:	0800326f 	.word	0x0800326f
 8003028:	0800326f 	.word	0x0800326f
 800302c:	08003063 	.word	0x08003063
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003030:	4b94      	ldr	r3, [pc, #592]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800303c:	4b91      	ldr	r3, [pc, #580]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	4a90      	ldr	r2, [pc, #576]	; (8003288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
 800304c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800304e:	e111      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003050:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003052:	61bb      	str	r3, [r7, #24]
    break;
 8003054:	e10e      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003056:	4b8d      	ldr	r3, [pc, #564]	; (800328c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003058:	61bb      	str	r3, [r7, #24]
    break;
 800305a:	e10b      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800305c:	4b8c      	ldr	r3, [pc, #560]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800305e:	61bb      	str	r3, [r7, #24]
    break;
 8003060:	e108      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003062:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800306c:	4b85      	ldr	r3, [pc, #532]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003076:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003078:	4b82      	ldr	r3, [pc, #520]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003082:	4b80      	ldr	r3, [pc, #512]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	08db      	lsrs	r3, r3, #3
 8003088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80e1 	beq.w	8003268 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	f000 8083 	beq.w	80031b4 <HAL_RCC_GetSysClockFreq+0x204>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	f200 80a1 	bhi.w	80031f8 <HAL_RCC_GetSysClockFreq+0x248>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x114>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d056      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030c2:	e099      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c4:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d02d      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030d0:	4b6c      	ldr	r3, [pc, #432]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	08db      	lsrs	r3, r3, #3
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	4a6b      	ldr	r2, [pc, #428]	; (8003288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fa:	4b62      	ldr	r3, [pc, #392]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310a:	ed97 6a02 	vldr	s12, [r7, #8]
 800310e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003294 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800311e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003126:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800312a:	e087      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003136:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003298 <HAL_RCC_GetSysClockFreq+0x2e8>
 800313a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313e:	4b51      	ldr	r3, [pc, #324]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003152:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003294 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800316e:	e065      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800329c <HAL_RCC_GetSysClockFreq+0x2ec>
 800317e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003182:	4b40      	ldr	r3, [pc, #256]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003192:	ed97 6a02 	vldr	s12, [r7, #8]
 8003196:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800319a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031b2:	e043      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003294 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031f6:	e021      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a26 	vldr	s13, [pc, #152]	; 800329c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320a:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321a:	ed97 6a02 	vldr	s12, [r7, #8]
 800321e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003294 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800322e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800323a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	0a5b      	lsrs	r3, r3, #9
 8003242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003246:	3301      	adds	r3, #1
 8003248:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003254:	edd7 6a07 	vldr	s13, [r7, #28]
 8003258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800325c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003260:	ee17 3a90 	vmov	r3, s15
 8003264:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003266:	e005      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
    break;
 800326c:	e002      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003270:	61bb      	str	r3, [r7, #24]
    break;
 8003272:	bf00      	nop
  }

  return sysclockfreq;
 8003274:	69bb      	ldr	r3, [r7, #24]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	58024400 	.word	0x58024400
 8003288:	03d09000 	.word	0x03d09000
 800328c:	003d0900 	.word	0x003d0900
 8003290:	017d7840 	.word	0x017d7840
 8003294:	46000000 	.word	0x46000000
 8003298:	4c742400 	.word	0x4c742400
 800329c:	4a742400 	.word	0x4a742400
 80032a0:	4bbebc20 	.word	0x4bbebc20

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d03f      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032c8:	d02a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032ce:	d824      	bhi.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032d4:	d018      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032da:	d81e      	bhi.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e4:	d007      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032e6:	e018      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e8:	4ba3      	ldr	r3, [pc, #652]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	4aa2      	ldr	r2, [pc, #648]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80032f4:	e015      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2102      	movs	r1, #2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 ff17 	bl	8004130 <RCCEx_PLL2_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003306:	e00c      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3324      	adds	r3, #36	; 0x24
 800330c:	2102      	movs	r1, #2
 800330e:	4618      	mov	r0, r3
 8003310:	f000 ffc0 	bl	8004294 <RCCEx_PLL3_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
      break;
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003328:	4b93      	ldr	r3, [pc, #588]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800332a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003334:	4990      	ldr	r1, [pc, #576]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	650b      	str	r3, [r1, #80]	; 0x50
 800333a:	e001      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d03d      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	2b04      	cmp	r3, #4
 8003352:	d826      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003354:	a201      	add	r2, pc, #4	; (adr r2, 800335c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	08003371 	.word	0x08003371
 8003360:	0800337f 	.word	0x0800337f
 8003364:	08003391 	.word	0x08003391
 8003368:	080033a9 	.word	0x080033a9
 800336c:	080033a9 	.word	0x080033a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003370:	4b81      	ldr	r3, [pc, #516]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	4a80      	ldr	r2, [pc, #512]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800337c:	e015      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fed3 	bl	8004130 <RCCEx_PLL2_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800338e:	e00c      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3324      	adds	r3, #36	; 0x24
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f000 ff7c 	bl	8004294 <RCCEx_PLL3_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
      break;
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80033a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b0:	4b71      	ldr	r3, [pc, #452]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	f023 0207 	bic.w	r2, r3, #7
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	496e      	ldr	r1, [pc, #440]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	650b      	str	r3, [r1, #80]	; 0x50
 80033c2:	e001      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d042      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033dc:	d02b      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80033de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e2:	d825      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80033e4:	2bc0      	cmp	r3, #192	; 0xc0
 80033e6:	d028      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80033e8:	2bc0      	cmp	r3, #192	; 0xc0
 80033ea:	d821      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d016      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80033f0:	2b80      	cmp	r3, #128	; 0x80
 80033f2:	d81d      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d007      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80033fc:	e018      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fe:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	4a5d      	ldr	r2, [pc, #372]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800340a:	e017      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fe8c 	bl	8004130 <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800341c:	e00e      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3324      	adds	r3, #36	; 0x24
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f000 ff35 	bl	8004294 <RCCEx_PLL3_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800342e:	e005      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
      break;
 8003434:	e002      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003436:	bf00      	nop
 8003438:	e000      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800343a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003442:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	494a      	ldr	r1, [pc, #296]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	650b      	str	r3, [r1, #80]	; 0x50
 8003454:	e001      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003462:	2b00      	cmp	r3, #0
 8003464:	d049      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800346c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003470:	d030      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003476:	d82a      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003478:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800347c:	d02c      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800347e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003482:	d824      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003488:	d018      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800348a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800348e:	d81e      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003498:	d007      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800349a:	e018      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800349c:	4b36      	ldr	r3, [pc, #216]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	4a35      	ldr	r2, [pc, #212]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034a8:	e017      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fe3d 	bl	8004130 <RCCEx_PLL2_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80034ba:	e00e      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3324      	adds	r3, #36	; 0x24
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fee6 	bl	8004294 <RCCEx_PLL3_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034cc:	e005      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
      break;
 80034d2:	e002      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80034d4:	bf00      	nop
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80034d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034ee:	4922      	ldr	r1, [pc, #136]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	658b      	str	r3, [r1, #88]	; 0x58
 80034f4:	e001      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	2b00      	cmp	r3, #0
 8003504:	d04b      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800350c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003510:	d030      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003512:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003516:	d82a      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003518:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800351c:	d02e      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800351e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003522:	d824      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003528:	d018      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800352a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800352e:	d81e      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003538:	d007      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800353a:	e018      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003548:	e019      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fded 	bl	8004130 <RCCEx_PLL2_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800355a:	e010      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3324      	adds	r3, #36	; 0x24
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fe96 	bl	8004294 <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800356c:	e007      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
      break;
 8003572:	e004      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003574:	bf00      	nop
 8003576:	e002      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003578:	58024400 	.word	0x58024400
      break;
 800357c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003584:	4b99      	ldr	r3, [pc, #612]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003592:	4996      	ldr	r1, [pc, #600]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003594:	4313      	orrs	r3, r2
 8003596:	658b      	str	r3, [r1, #88]	; 0x58
 8003598:	e001      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d032      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ae:	2b30      	cmp	r3, #48	; 0x30
 80035b0:	d01c      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x348>
 80035b2:	2b30      	cmp	r3, #48	; 0x30
 80035b4:	d817      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d00c      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d813      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d10f      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	4a88      	ldr	r2, [pc, #544]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80035d2:	e00e      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	2102      	movs	r1, #2
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fda8 	bl	8004130 <RCCEx_PLL2_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80035e4:	e005      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80035f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80035f8:	4b7c      	ldr	r3, [pc, #496]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	4979      	ldr	r1, [pc, #484]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003606:	4313      	orrs	r3, r2
 8003608:	64cb      	str	r3, [r1, #76]	; 0x4c
 800360a:	e001      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d047      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003624:	d030      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362a:	d82a      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800362c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003630:	d02c      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003632:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003636:	d824      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363c:	d018      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800363e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003642:	d81e      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364c:	d007      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800364e:	e018      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003650:	4b66      	ldr	r3, [pc, #408]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	4a65      	ldr	r2, [pc, #404]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800365c:	e017      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fd63 	bl	8004130 <RCCEx_PLL2_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800366e:	e00e      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3324      	adds	r3, #36	; 0x24
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fe0c 	bl	8004294 <RCCEx_PLL3_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003680:	e005      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
      break;
 8003686:	e002      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003688:	bf00      	nop
 800368a:	e000      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800368c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003694:	4b55      	ldr	r3, [pc, #340]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003698:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	4952      	ldr	r1, [pc, #328]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	650b      	str	r3, [r1, #80]	; 0x50
 80036a6:	e001      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d049      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c0:	d02e      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80036c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c6:	d828      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80036c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036cc:	d02a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80036ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036d2:	d822      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80036d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036d8:	d026      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80036da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036de:	d81c      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80036e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036e4:	d010      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80036e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036ea:	d816      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x488>
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f4:	d111      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fd17 	bl	8004130 <RCCEx_PLL2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003706:	e012      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3324      	adds	r3, #36	; 0x24
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fdc0 	bl	8004294 <RCCEx_PLL3_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003718:	e009      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
      break;
 800371e:	e006      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003720:	bf00      	nop
 8003722:	e004      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003724:	bf00      	nop
 8003726:	e002      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800372c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003738:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003740:	492a      	ldr	r1, [pc, #168]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003742:	4313      	orrs	r3, r2
 8003744:	650b      	str	r3, [r1, #80]	; 0x50
 8003746:	e001      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d04d      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800375e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003762:	d02e      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003768:	d828      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d02a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d822      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003776:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800377a:	d026      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x526>
 800377c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003780:	d81c      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003786:	d010      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800378c:	d816      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01d      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003796:	d111      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fcc6 	bl	8004130 <RCCEx_PLL2_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037a8:	e012      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3324      	adds	r3, #36	; 0x24
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fd6f 	bl	8004294 <RCCEx_PLL3_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037ba:	e009      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
      break;
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037c2:	bf00      	nop
 80037c4:	e004      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037c6:	bf00      	nop
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80037ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037e4:	4901      	ldr	r1, [pc, #4]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	658b      	str	r3, [r1, #88]	; 0x58
 80037ea:	e003      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80037ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02f      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003808:	d00e      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800380a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380e:	d814      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d015      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003814:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003818:	d10f      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381a:	4baf      	ldr	r3, [pc, #700]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	4aae      	ldr	r2, [pc, #696]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003826:	e00c      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fc7e 	bl	8004130 <RCCEx_PLL2_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
      break;
 800383e:	e000      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003848:	4ba3      	ldr	r3, [pc, #652]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003854:	49a0      	ldr	r1, [pc, #640]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003856:	4313      	orrs	r3, r2
 8003858:	650b      	str	r3, [r1, #80]	; 0x50
 800385a:	e001      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d032      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	2b03      	cmp	r3, #3
 8003872:	d81b      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038b3 	.word	0x080038b3
 8003880:	0800388d 	.word	0x0800388d
 8003884:	0800389b 	.word	0x0800389b
 8003888:	080038b3 	.word	0x080038b3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388c:	4b92      	ldr	r3, [pc, #584]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4a91      	ldr	r2, [pc, #580]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003898:	e00c      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2102      	movs	r1, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fc45 	bl	8004130 <RCCEx_PLL2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038aa:	e003      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	75fb      	strb	r3, [r7, #23]
      break;
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80038b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038ba:	4b87      	ldr	r3, [pc, #540]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	4984      	ldr	r1, [pc, #528]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038cc:	e001      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8086 	beq.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e0:	4b7e      	ldr	r3, [pc, #504]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a7d      	ldr	r2, [pc, #500]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ec:	f7fd fdfa 	bl	80014e4 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f2:	e009      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f4:	f7fd fdf6 	bl	80014e4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d902      	bls.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	75fb      	strb	r3, [r7, #23]
        break;
 8003906:	e005      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003908:	4b74      	ldr	r3, [pc, #464]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d166      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800391a:	4b6f      	ldr	r3, [pc, #444]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800391c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003924:	4053      	eors	r3, r2
 8003926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392a:	2b00      	cmp	r3, #0
 800392c:	d013      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800392e:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003936:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003938:	4b67      	ldr	r3, [pc, #412]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a66      	ldr	r2, [pc, #408]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800393e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003944:	4b64      	ldr	r3, [pc, #400]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4a63      	ldr	r2, [pc, #396]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003950:	4a61      	ldr	r2, [pc, #388]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800395c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003960:	d115      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fd fdbf 	bl	80014e4 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003968:	e00b      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7fd fdbb 	bl	80014e4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f241 3288 	movw	r2, #5000	; 0x1388
 8003978:	4293      	cmp	r3, r2
 800397a:	d902      	bls.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	75fb      	strb	r3, [r7, #23]
            break;
 8003980:	e005      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003982:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ed      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d126      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a2:	d10d      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80039a4:	4b4c      	ldr	r3, [pc, #304]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039b2:	0919      	lsrs	r1, r3, #4
 80039b4:	4b4a      	ldr	r3, [pc, #296]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80039b6:	400b      	ands	r3, r1
 80039b8:	4947      	ldr	r1, [pc, #284]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	610b      	str	r3, [r1, #16]
 80039be:	e005      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80039c0:	4b45      	ldr	r3, [pc, #276]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	4a44      	ldr	r2, [pc, #272]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039ca:	6113      	str	r3, [r2, #16]
 80039cc:	4b42      	ldr	r3, [pc, #264]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039da:	493f      	ldr	r1, [pc, #252]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	670b      	str	r3, [r1, #112]	; 0x70
 80039e0:	e004      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	75bb      	strb	r3, [r7, #22]
 80039e6:	e001      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8085 	beq.w	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fe:	2b28      	cmp	r3, #40	; 0x28
 8003a00:	d866      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003ae5 	.word	0x08003ae5
 8003a0c:	08003ad1 	.word	0x08003ad1
 8003a10:	08003ad1 	.word	0x08003ad1
 8003a14:	08003ad1 	.word	0x08003ad1
 8003a18:	08003ad1 	.word	0x08003ad1
 8003a1c:	08003ad1 	.word	0x08003ad1
 8003a20:	08003ad1 	.word	0x08003ad1
 8003a24:	08003ad1 	.word	0x08003ad1
 8003a28:	08003aad 	.word	0x08003aad
 8003a2c:	08003ad1 	.word	0x08003ad1
 8003a30:	08003ad1 	.word	0x08003ad1
 8003a34:	08003ad1 	.word	0x08003ad1
 8003a38:	08003ad1 	.word	0x08003ad1
 8003a3c:	08003ad1 	.word	0x08003ad1
 8003a40:	08003ad1 	.word	0x08003ad1
 8003a44:	08003ad1 	.word	0x08003ad1
 8003a48:	08003abf 	.word	0x08003abf
 8003a4c:	08003ad1 	.word	0x08003ad1
 8003a50:	08003ad1 	.word	0x08003ad1
 8003a54:	08003ad1 	.word	0x08003ad1
 8003a58:	08003ad1 	.word	0x08003ad1
 8003a5c:	08003ad1 	.word	0x08003ad1
 8003a60:	08003ad1 	.word	0x08003ad1
 8003a64:	08003ad1 	.word	0x08003ad1
 8003a68:	08003ae5 	.word	0x08003ae5
 8003a6c:	08003ad1 	.word	0x08003ad1
 8003a70:	08003ad1 	.word	0x08003ad1
 8003a74:	08003ad1 	.word	0x08003ad1
 8003a78:	08003ad1 	.word	0x08003ad1
 8003a7c:	08003ad1 	.word	0x08003ad1
 8003a80:	08003ad1 	.word	0x08003ad1
 8003a84:	08003ad1 	.word	0x08003ad1
 8003a88:	08003ae5 	.word	0x08003ae5
 8003a8c:	08003ad1 	.word	0x08003ad1
 8003a90:	08003ad1 	.word	0x08003ad1
 8003a94:	08003ad1 	.word	0x08003ad1
 8003a98:	08003ad1 	.word	0x08003ad1
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003ad1 	.word	0x08003ad1
 8003aa4:	08003ad1 	.word	0x08003ad1
 8003aa8:	08003ae5 	.word	0x08003ae5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fb3c 	bl	8004130 <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003abc:	e013      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3324      	adds	r3, #36	; 0x24
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fbe5 	bl	8004294 <RCCEx_PLL3_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad4:	e007      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ad6:	bf00      	nop
 8003ad8:	58024400 	.word	0x58024400
 8003adc:	58024800 	.word	0x58024800
 8003ae0:	00ffffcf 	.word	0x00ffffcf
      break;
 8003ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003aec:	4b96      	ldr	r3, [pc, #600]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af8:	4993      	ldr	r1, [pc, #588]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	654b      	str	r3, [r1, #84]	; 0x54
 8003afe:	e001      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d038      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d821      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003b18:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003b63 	.word	0x08003b63
 8003b24:	08003b39 	.word	0x08003b39
 8003b28:	08003b4b 	.word	0x08003b4b
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b63 	.word	0x08003b63
 8003b34:	08003b63 	.word	0x08003b63
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 faf6 	bl	8004130 <RCCEx_PLL2_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b48:	e00c      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3324      	adds	r3, #36	; 0x24
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fb9f 	bl	8004294 <RCCEx_PLL3_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b5a:	e003      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b6a:	4b77      	ldr	r3, [pc, #476]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	4974      	ldr	r1, [pc, #464]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	654b      	str	r3, [r1, #84]	; 0x54
 8003b7c:	e001      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d03a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d821      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003be3 	.word	0x08003be3
 8003ba4:	08003bb9 	.word	0x08003bb9
 8003ba8:	08003bcb 	.word	0x08003bcb
 8003bac:	08003be3 	.word	0x08003be3
 8003bb0:	08003be3 	.word	0x08003be3
 8003bb4:	08003be3 	.word	0x08003be3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fab6 	bl	8004130 <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003bc8:	e00c      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3324      	adds	r3, #36	; 0x24
 8003bce:	2101      	movs	r1, #1
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fb5f 	bl	8004294 <RCCEx_PLL3_Config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003bda:	e003      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	75fb      	strb	r3, [r7, #23]
      break;
 8003be0:	e000      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bea:	4b57      	ldr	r3, [pc, #348]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	f023 0207 	bic.w	r2, r3, #7
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	4953      	ldr	r1, [pc, #332]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	658b      	str	r3, [r1, #88]	; 0x58
 8003bfe:	e001      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d04b      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c1a:	d02e      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c20:	d828      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d02a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d822      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c32:	d026      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003c34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c38:	d81c      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c3e:	d010      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c44:	d816      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01d      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c4e:	d111      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	2100      	movs	r1, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fa6a 	bl	8004130 <RCCEx_PLL2_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c60:	e012      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3324      	adds	r3, #36	; 0x24
 8003c66:	2102      	movs	r1, #2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fb13 	bl	8004294 <RCCEx_PLL3_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c72:	e009      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]
      break;
 8003c78:	e006      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e004      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e002      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c8e:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9c:	492a      	ldr	r1, [pc, #168]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	654b      	str	r3, [r1, #84]	; 0x54
 8003ca2:	e001      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d04d      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cbe:	d02e      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003cc0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cc4:	d828      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	d02a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d822      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003cd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cd6:	d026      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cdc:	d81c      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce2:	d010      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce8:	d816      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01d      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf2:	d111      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fa18 	bl	8004130 <RCCEx_PLL2_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d04:	e012      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3324      	adds	r3, #36	; 0x24
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fac1 	bl	8004294 <RCCEx_PLL3_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d16:	e009      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1c:	e006      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e004      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d22:	bf00      	nop
 8003d24:	e002      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d40:	4901      	ldr	r1, [pc, #4]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	658b      	str	r3, [r1, #88]	; 0x58
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003d48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d04b      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d66:	d02e      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003d68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d6c:	d828      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d72:	d02a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d78:	d822      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d7e:	d026      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003d80:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d84:	d81c      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d8a:	d010      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d90:	d816      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01d      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9a:	d111      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f9c4 	bl	8004130 <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003dac:	e012      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3324      	adds	r3, #36	; 0x24
 8003db2:	2102      	movs	r1, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fa6d 	bl	8004294 <RCCEx_PLL3_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003dbe:	e009      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003dda:	4b9d      	ldr	r3, [pc, #628]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de8:	4999      	ldr	r1, [pc, #612]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	658b      	str	r3, [r1, #88]	; 0x58
 8003dee:	e001      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0a:	d10a      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3324      	adds	r3, #36	; 0x24
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fa3e 	bl	8004294 <RCCEx_PLL3_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e22:	4b8b      	ldr	r3, [pc, #556]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e30:	4987      	ldr	r1, [pc, #540]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4c:	d10a      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3324      	adds	r3, #36	; 0x24
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fa1d 	bl	8004294 <RCCEx_PLL3_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e64:	4b7a      	ldr	r3, [pc, #488]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e72:	4977      	ldr	r1, [pc, #476]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d034      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e8e:	d01d      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e94:	d817      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9e:	d009      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003ea0:	e011      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f941 	bl	8004130 <RCCEx_PLL2_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003eb2:	e00c      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3324      	adds	r3, #36	; 0x24
 8003eb8:	2102      	movs	r1, #2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f9ea 	bl	8004294 <RCCEx_PLL3_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ec4:	e003      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eca:	e000      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ed4:	4b5e      	ldr	r3, [pc, #376]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ee2:	495b      	ldr	r1, [pc, #364]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	658b      	str	r3, [r1, #88]	; 0x58
 8003ee8:	e001      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d033      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f04:	d01c      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003f06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f0a:	d816      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f10:	d003      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f16:	d007      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003f18:	e00f      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1a:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	4a4c      	ldr	r2, [pc, #304]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f26:	e00c      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3324      	adds	r3, #36	; 0x24
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f9b0 	bl	8004294 <RCCEx_PLL3_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f3e:	e000      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f48:	4b41      	ldr	r3, [pc, #260]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f56:	493e      	ldr	r1, [pc, #248]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	654b      	str	r3, [r1, #84]	; 0x54
 8003f5c:	e001      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d029      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d007      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003f7c:	e00f      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7e:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	4a33      	ldr	r2, [pc, #204]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2102      	movs	r1, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f8cc 	bl	8004130 <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003f9c:	e002      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003faa:	4b29      	ldr	r3, [pc, #164]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	4926      	ldr	r1, [pc, #152]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003fbc:	e001      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
 8003fc0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f95d 	bl	8004294 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d033      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff8:	d017      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ffe:	d811      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004004:	d013      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400a:	d80b      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d010      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004014:	d106      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800401c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004020:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004022:	e007      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
      break;
 8004028:	e004      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800402a:	bf00      	nop
 800402c:	e002      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004046:	4902      	ldr	r1, [pc, #8]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004048:	4313      	orrs	r3, r2
 800404a:	654b      	str	r3, [r1, #84]	; 0x54
 800404c:	e004      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800404e:	bf00      	nop
 8004050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004064:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	492e      	ldr	r1, [pc, #184]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004072:	4313      	orrs	r3, r2
 8004074:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004090:	4926      	ldr	r1, [pc, #152]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004092:	4313      	orrs	r3, r2
 8004094:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ae:	491f      	ldr	r1, [pc, #124]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040ca:	6113      	str	r3, [r2, #16]
 80040cc:	4b17      	ldr	r3, [pc, #92]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040d6:	4915      	ldr	r1, [pc, #84]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	da08      	bge.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f0:	490e      	ldr	r1, [pc, #56]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	4906      	ldr	r1, [pc, #24]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004112:	4313      	orrs	r3, r2
 8004114:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004116:	7dbb      	ldrb	r3, [r7, #22]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400

08004130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800413e:	4b53      	ldr	r3, [pc, #332]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b03      	cmp	r3, #3
 8004148:	d101      	bne.n	800414e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e099      	b.n	8004282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800414e:	4b4f      	ldr	r3, [pc, #316]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a4e      	ldr	r2, [pc, #312]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004154:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415a:	f7fd f9c3 	bl	80014e4 <HAL_GetTick>
 800415e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004160:	e008      	b.n	8004174 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004162:	f7fd f9bf 	bl	80014e4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e086      	b.n	8004282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004174:	4b45      	ldr	r3, [pc, #276]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004180:	4b42      	ldr	r3, [pc, #264]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	031b      	lsls	r3, r3, #12
 800418e:	493f      	ldr	r1, [pc, #252]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	628b      	str	r3, [r1, #40]	; 0x28
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	3b01      	subs	r3, #1
 800419a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	025b      	lsls	r3, r3, #9
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	3b01      	subs	r3, #1
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041c4:	4931      	ldr	r1, [pc, #196]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80041ca:	4b30      	ldr	r3, [pc, #192]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	492d      	ldr	r1, [pc, #180]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041dc:	4b2b      	ldr	r3, [pc, #172]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f023 0220 	bic.w	r2, r3, #32
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	4928      	ldr	r1, [pc, #160]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041ee:	4b27      	ldr	r3, [pc, #156]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	4a26      	ldr	r2, [pc, #152]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041f4:	f023 0310 	bic.w	r3, r3, #16
 80041f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041fa:	4b24      	ldr	r3, [pc, #144]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <RCCEx_PLL2_Config+0x160>)
 8004200:	4013      	ands	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	69d2      	ldr	r2, [r2, #28]
 8004206:	00d2      	lsls	r2, r2, #3
 8004208:	4920      	ldr	r1, [pc, #128]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004214:	f043 0310 	orr.w	r3, r3, #16
 8004218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	4a19      	ldr	r2, [pc, #100]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800422a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800422c:	e00f      	b.n	800424e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d106      	bne.n	8004242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004234:	4b15      	ldr	r3, [pc, #84]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 800423a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004240:	e005      	b.n	800424e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	4a11      	ldr	r2, [pc, #68]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800424c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a0e      	ldr	r2, [pc, #56]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800425a:	f7fd f943 	bl	80014e4 <HAL_GetTick>
 800425e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004260:	e008      	b.n	8004274 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004262:	f7fd f93f 	bl	80014e4 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e006      	b.n	8004282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	58024400 	.word	0x58024400
 8004290:	ffff0007 	.word	0xffff0007

08004294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042a2:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d101      	bne.n	80042b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e099      	b.n	80043e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042b2:	4b4f      	ldr	r3, [pc, #316]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a4e      	ldr	r2, [pc, #312]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042be:	f7fd f911 	bl	80014e4 <HAL_GetTick>
 80042c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042c4:	e008      	b.n	80042d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80042c6:	f7fd f90d 	bl	80014e4 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e086      	b.n	80043e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042d8:	4b45      	ldr	r3, [pc, #276]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042e4:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	051b      	lsls	r3, r3, #20
 80042f2:	493f      	ldr	r1, [pc, #252]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	628b      	str	r3, [r1, #40]	; 0x28
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	3b01      	subs	r3, #1
 8004308:	025b      	lsls	r3, r3, #9
 800430a:	b29b      	uxth	r3, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	3b01      	subs	r3, #1
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004328:	4931      	ldr	r1, [pc, #196]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800432e:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	492d      	ldr	r1, [pc, #180]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004340:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	4928      	ldr	r1, [pc, #160]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004352:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800435c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004362:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <RCCEx_PLL3_Config+0x160>)
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	69d2      	ldr	r2, [r2, #28]
 800436a:	00d2      	lsls	r2, r2, #3
 800436c:	4920      	ldr	r1, [pc, #128]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004372:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d106      	bne.n	8004392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800438a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800438e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004390:	e00f      	b.n	80043b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d106      	bne.n	80043a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004398:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800439e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043a4:	e005      	b.n	80043b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043be:	f7fd f891 	bl	80014e4 <HAL_GetTick>
 80043c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043c6:	f7fd f88d 	bl	80014e4 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e006      	b.n	80043e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	58024400 	.word	0x58024400
 80043f4:	ffff0007 	.word	0xffff0007

080043f8 <__errno>:
 80043f8:	4b01      	ldr	r3, [pc, #4]	; (8004400 <__errno+0x8>)
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	24000018 	.word	0x24000018

08004404 <__libc_init_array>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4d0d      	ldr	r5, [pc, #52]	; (800443c <__libc_init_array+0x38>)
 8004408:	4c0d      	ldr	r4, [pc, #52]	; (8004440 <__libc_init_array+0x3c>)
 800440a:	1b64      	subs	r4, r4, r5
 800440c:	10a4      	asrs	r4, r4, #2
 800440e:	2600      	movs	r6, #0
 8004410:	42a6      	cmp	r6, r4
 8004412:	d109      	bne.n	8004428 <__libc_init_array+0x24>
 8004414:	4d0b      	ldr	r5, [pc, #44]	; (8004444 <__libc_init_array+0x40>)
 8004416:	4c0c      	ldr	r4, [pc, #48]	; (8004448 <__libc_init_array+0x44>)
 8004418:	f000 fc8e 	bl	8004d38 <_init>
 800441c:	1b64      	subs	r4, r4, r5
 800441e:	10a4      	asrs	r4, r4, #2
 8004420:	2600      	movs	r6, #0
 8004422:	42a6      	cmp	r6, r4
 8004424:	d105      	bne.n	8004432 <__libc_init_array+0x2e>
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	f855 3b04 	ldr.w	r3, [r5], #4
 800442c:	4798      	blx	r3
 800442e:	3601      	adds	r6, #1
 8004430:	e7ee      	b.n	8004410 <__libc_init_array+0xc>
 8004432:	f855 3b04 	ldr.w	r3, [r5], #4
 8004436:	4798      	blx	r3
 8004438:	3601      	adds	r6, #1
 800443a:	e7f2      	b.n	8004422 <__libc_init_array+0x1e>
 800443c:	08004dc4 	.word	0x08004dc4
 8004440:	08004dc4 	.word	0x08004dc4
 8004444:	08004dc4 	.word	0x08004dc4
 8004448:	08004dc8 	.word	0x08004dc8

0800444c <memset>:
 800444c:	4402      	add	r2, r0
 800444e:	4603      	mov	r3, r0
 8004450:	4293      	cmp	r3, r2
 8004452:	d100      	bne.n	8004456 <memset+0xa>
 8004454:	4770      	bx	lr
 8004456:	f803 1b01 	strb.w	r1, [r3], #1
 800445a:	e7f9      	b.n	8004450 <memset+0x4>

0800445c <siprintf>:
 800445c:	b40e      	push	{r1, r2, r3}
 800445e:	b500      	push	{lr}
 8004460:	b09c      	sub	sp, #112	; 0x70
 8004462:	ab1d      	add	r3, sp, #116	; 0x74
 8004464:	9002      	str	r0, [sp, #8]
 8004466:	9006      	str	r0, [sp, #24]
 8004468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800446c:	4809      	ldr	r0, [pc, #36]	; (8004494 <siprintf+0x38>)
 800446e:	9107      	str	r1, [sp, #28]
 8004470:	9104      	str	r1, [sp, #16]
 8004472:	4909      	ldr	r1, [pc, #36]	; (8004498 <siprintf+0x3c>)
 8004474:	f853 2b04 	ldr.w	r2, [r3], #4
 8004478:	9105      	str	r1, [sp, #20]
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	a902      	add	r1, sp, #8
 8004480:	f000 f868 	bl	8004554 <_svfiprintf_r>
 8004484:	9b02      	ldr	r3, [sp, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	b01c      	add	sp, #112	; 0x70
 800448c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004490:	b003      	add	sp, #12
 8004492:	4770      	bx	lr
 8004494:	24000018 	.word	0x24000018
 8004498:	ffff0208 	.word	0xffff0208

0800449c <__ssputs_r>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	688e      	ldr	r6, [r1, #8]
 80044a2:	429e      	cmp	r6, r3
 80044a4:	4682      	mov	sl, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	4690      	mov	r8, r2
 80044aa:	461f      	mov	r7, r3
 80044ac:	d838      	bhi.n	8004520 <__ssputs_r+0x84>
 80044ae:	898a      	ldrh	r2, [r1, #12]
 80044b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044b4:	d032      	beq.n	800451c <__ssputs_r+0x80>
 80044b6:	6825      	ldr	r5, [r4, #0]
 80044b8:	6909      	ldr	r1, [r1, #16]
 80044ba:	eba5 0901 	sub.w	r9, r5, r1
 80044be:	6965      	ldr	r5, [r4, #20]
 80044c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044c8:	3301      	adds	r3, #1
 80044ca:	444b      	add	r3, r9
 80044cc:	106d      	asrs	r5, r5, #1
 80044ce:	429d      	cmp	r5, r3
 80044d0:	bf38      	it	cc
 80044d2:	461d      	movcc	r5, r3
 80044d4:	0553      	lsls	r3, r2, #21
 80044d6:	d531      	bpl.n	800453c <__ssputs_r+0xa0>
 80044d8:	4629      	mov	r1, r5
 80044da:	f000 fb63 	bl	8004ba4 <_malloc_r>
 80044de:	4606      	mov	r6, r0
 80044e0:	b950      	cbnz	r0, 80044f8 <__ssputs_r+0x5c>
 80044e2:	230c      	movs	r3, #12
 80044e4:	f8ca 3000 	str.w	r3, [sl]
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f8:	6921      	ldr	r1, [r4, #16]
 80044fa:	464a      	mov	r2, r9
 80044fc:	f000 fabe 	bl	8004a7c <memcpy>
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450a:	81a3      	strh	r3, [r4, #12]
 800450c:	6126      	str	r6, [r4, #16]
 800450e:	6165      	str	r5, [r4, #20]
 8004510:	444e      	add	r6, r9
 8004512:	eba5 0509 	sub.w	r5, r5, r9
 8004516:	6026      	str	r6, [r4, #0]
 8004518:	60a5      	str	r5, [r4, #8]
 800451a:	463e      	mov	r6, r7
 800451c:	42be      	cmp	r6, r7
 800451e:	d900      	bls.n	8004522 <__ssputs_r+0x86>
 8004520:	463e      	mov	r6, r7
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	4632      	mov	r2, r6
 8004526:	4641      	mov	r1, r8
 8004528:	f000 fab6 	bl	8004a98 <memmove>
 800452c:	68a3      	ldr	r3, [r4, #8]
 800452e:	1b9b      	subs	r3, r3, r6
 8004530:	60a3      	str	r3, [r4, #8]
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	4433      	add	r3, r6
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	2000      	movs	r0, #0
 800453a:	e7db      	b.n	80044f4 <__ssputs_r+0x58>
 800453c:	462a      	mov	r2, r5
 800453e:	f000 fba5 	bl	8004c8c <_realloc_r>
 8004542:	4606      	mov	r6, r0
 8004544:	2800      	cmp	r0, #0
 8004546:	d1e1      	bne.n	800450c <__ssputs_r+0x70>
 8004548:	6921      	ldr	r1, [r4, #16]
 800454a:	4650      	mov	r0, sl
 800454c:	f000 fabe 	bl	8004acc <_free_r>
 8004550:	e7c7      	b.n	80044e2 <__ssputs_r+0x46>
	...

08004554 <_svfiprintf_r>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	4698      	mov	r8, r3
 800455a:	898b      	ldrh	r3, [r1, #12]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	b09d      	sub	sp, #116	; 0x74
 8004560:	4607      	mov	r7, r0
 8004562:	460d      	mov	r5, r1
 8004564:	4614      	mov	r4, r2
 8004566:	d50e      	bpl.n	8004586 <_svfiprintf_r+0x32>
 8004568:	690b      	ldr	r3, [r1, #16]
 800456a:	b963      	cbnz	r3, 8004586 <_svfiprintf_r+0x32>
 800456c:	2140      	movs	r1, #64	; 0x40
 800456e:	f000 fb19 	bl	8004ba4 <_malloc_r>
 8004572:	6028      	str	r0, [r5, #0]
 8004574:	6128      	str	r0, [r5, #16]
 8004576:	b920      	cbnz	r0, 8004582 <_svfiprintf_r+0x2e>
 8004578:	230c      	movs	r3, #12
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004580:	e0d1      	b.n	8004726 <_svfiprintf_r+0x1d2>
 8004582:	2340      	movs	r3, #64	; 0x40
 8004584:	616b      	str	r3, [r5, #20]
 8004586:	2300      	movs	r3, #0
 8004588:	9309      	str	r3, [sp, #36]	; 0x24
 800458a:	2320      	movs	r3, #32
 800458c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004590:	f8cd 800c 	str.w	r8, [sp, #12]
 8004594:	2330      	movs	r3, #48	; 0x30
 8004596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004740 <_svfiprintf_r+0x1ec>
 800459a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800459e:	f04f 0901 	mov.w	r9, #1
 80045a2:	4623      	mov	r3, r4
 80045a4:	469a      	mov	sl, r3
 80045a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045aa:	b10a      	cbz	r2, 80045b0 <_svfiprintf_r+0x5c>
 80045ac:	2a25      	cmp	r2, #37	; 0x25
 80045ae:	d1f9      	bne.n	80045a4 <_svfiprintf_r+0x50>
 80045b0:	ebba 0b04 	subs.w	fp, sl, r4
 80045b4:	d00b      	beq.n	80045ce <_svfiprintf_r+0x7a>
 80045b6:	465b      	mov	r3, fp
 80045b8:	4622      	mov	r2, r4
 80045ba:	4629      	mov	r1, r5
 80045bc:	4638      	mov	r0, r7
 80045be:	f7ff ff6d 	bl	800449c <__ssputs_r>
 80045c2:	3001      	adds	r0, #1
 80045c4:	f000 80aa 	beq.w	800471c <_svfiprintf_r+0x1c8>
 80045c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045ca:	445a      	add	r2, fp
 80045cc:	9209      	str	r2, [sp, #36]	; 0x24
 80045ce:	f89a 3000 	ldrb.w	r3, [sl]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80a2 	beq.w	800471c <_svfiprintf_r+0x1c8>
 80045d8:	2300      	movs	r3, #0
 80045da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045e2:	f10a 0a01 	add.w	sl, sl, #1
 80045e6:	9304      	str	r3, [sp, #16]
 80045e8:	9307      	str	r3, [sp, #28]
 80045ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045ee:	931a      	str	r3, [sp, #104]	; 0x68
 80045f0:	4654      	mov	r4, sl
 80045f2:	2205      	movs	r2, #5
 80045f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f8:	4851      	ldr	r0, [pc, #324]	; (8004740 <_svfiprintf_r+0x1ec>)
 80045fa:	f7fb fe79 	bl	80002f0 <memchr>
 80045fe:	9a04      	ldr	r2, [sp, #16]
 8004600:	b9d8      	cbnz	r0, 800463a <_svfiprintf_r+0xe6>
 8004602:	06d0      	lsls	r0, r2, #27
 8004604:	bf44      	itt	mi
 8004606:	2320      	movmi	r3, #32
 8004608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800460c:	0711      	lsls	r1, r2, #28
 800460e:	bf44      	itt	mi
 8004610:	232b      	movmi	r3, #43	; 0x2b
 8004612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004616:	f89a 3000 	ldrb.w	r3, [sl]
 800461a:	2b2a      	cmp	r3, #42	; 0x2a
 800461c:	d015      	beq.n	800464a <_svfiprintf_r+0xf6>
 800461e:	9a07      	ldr	r2, [sp, #28]
 8004620:	4654      	mov	r4, sl
 8004622:	2000      	movs	r0, #0
 8004624:	f04f 0c0a 	mov.w	ip, #10
 8004628:	4621      	mov	r1, r4
 800462a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800462e:	3b30      	subs	r3, #48	; 0x30
 8004630:	2b09      	cmp	r3, #9
 8004632:	d94e      	bls.n	80046d2 <_svfiprintf_r+0x17e>
 8004634:	b1b0      	cbz	r0, 8004664 <_svfiprintf_r+0x110>
 8004636:	9207      	str	r2, [sp, #28]
 8004638:	e014      	b.n	8004664 <_svfiprintf_r+0x110>
 800463a:	eba0 0308 	sub.w	r3, r0, r8
 800463e:	fa09 f303 	lsl.w	r3, r9, r3
 8004642:	4313      	orrs	r3, r2
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	46a2      	mov	sl, r4
 8004648:	e7d2      	b.n	80045f0 <_svfiprintf_r+0x9c>
 800464a:	9b03      	ldr	r3, [sp, #12]
 800464c:	1d19      	adds	r1, r3, #4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	9103      	str	r1, [sp, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	bfbb      	ittet	lt
 8004656:	425b      	neglt	r3, r3
 8004658:	f042 0202 	orrlt.w	r2, r2, #2
 800465c:	9307      	strge	r3, [sp, #28]
 800465e:	9307      	strlt	r3, [sp, #28]
 8004660:	bfb8      	it	lt
 8004662:	9204      	strlt	r2, [sp, #16]
 8004664:	7823      	ldrb	r3, [r4, #0]
 8004666:	2b2e      	cmp	r3, #46	; 0x2e
 8004668:	d10c      	bne.n	8004684 <_svfiprintf_r+0x130>
 800466a:	7863      	ldrb	r3, [r4, #1]
 800466c:	2b2a      	cmp	r3, #42	; 0x2a
 800466e:	d135      	bne.n	80046dc <_svfiprintf_r+0x188>
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	1d1a      	adds	r2, r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	9203      	str	r2, [sp, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	bfb8      	it	lt
 800467c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004680:	3402      	adds	r4, #2
 8004682:	9305      	str	r3, [sp, #20]
 8004684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004750 <_svfiprintf_r+0x1fc>
 8004688:	7821      	ldrb	r1, [r4, #0]
 800468a:	2203      	movs	r2, #3
 800468c:	4650      	mov	r0, sl
 800468e:	f7fb fe2f 	bl	80002f0 <memchr>
 8004692:	b140      	cbz	r0, 80046a6 <_svfiprintf_r+0x152>
 8004694:	2340      	movs	r3, #64	; 0x40
 8004696:	eba0 000a 	sub.w	r0, r0, sl
 800469a:	fa03 f000 	lsl.w	r0, r3, r0
 800469e:	9b04      	ldr	r3, [sp, #16]
 80046a0:	4303      	orrs	r3, r0
 80046a2:	3401      	adds	r4, #1
 80046a4:	9304      	str	r3, [sp, #16]
 80046a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046aa:	4826      	ldr	r0, [pc, #152]	; (8004744 <_svfiprintf_r+0x1f0>)
 80046ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b0:	2206      	movs	r2, #6
 80046b2:	f7fb fe1d 	bl	80002f0 <memchr>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d038      	beq.n	800472c <_svfiprintf_r+0x1d8>
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <_svfiprintf_r+0x1f4>)
 80046bc:	bb1b      	cbnz	r3, 8004706 <_svfiprintf_r+0x1b2>
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	3307      	adds	r3, #7
 80046c2:	f023 0307 	bic.w	r3, r3, #7
 80046c6:	3308      	adds	r3, #8
 80046c8:	9303      	str	r3, [sp, #12]
 80046ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046cc:	4433      	add	r3, r6
 80046ce:	9309      	str	r3, [sp, #36]	; 0x24
 80046d0:	e767      	b.n	80045a2 <_svfiprintf_r+0x4e>
 80046d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80046d6:	460c      	mov	r4, r1
 80046d8:	2001      	movs	r0, #1
 80046da:	e7a5      	b.n	8004628 <_svfiprintf_r+0xd4>
 80046dc:	2300      	movs	r3, #0
 80046de:	3401      	adds	r4, #1
 80046e0:	9305      	str	r3, [sp, #20]
 80046e2:	4619      	mov	r1, r3
 80046e4:	f04f 0c0a 	mov.w	ip, #10
 80046e8:	4620      	mov	r0, r4
 80046ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ee:	3a30      	subs	r2, #48	; 0x30
 80046f0:	2a09      	cmp	r2, #9
 80046f2:	d903      	bls.n	80046fc <_svfiprintf_r+0x1a8>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0c5      	beq.n	8004684 <_svfiprintf_r+0x130>
 80046f8:	9105      	str	r1, [sp, #20]
 80046fa:	e7c3      	b.n	8004684 <_svfiprintf_r+0x130>
 80046fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004700:	4604      	mov	r4, r0
 8004702:	2301      	movs	r3, #1
 8004704:	e7f0      	b.n	80046e8 <_svfiprintf_r+0x194>
 8004706:	ab03      	add	r3, sp, #12
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	462a      	mov	r2, r5
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <_svfiprintf_r+0x1f8>)
 800470e:	a904      	add	r1, sp, #16
 8004710:	4638      	mov	r0, r7
 8004712:	f3af 8000 	nop.w
 8004716:	1c42      	adds	r2, r0, #1
 8004718:	4606      	mov	r6, r0
 800471a:	d1d6      	bne.n	80046ca <_svfiprintf_r+0x176>
 800471c:	89ab      	ldrh	r3, [r5, #12]
 800471e:	065b      	lsls	r3, r3, #25
 8004720:	f53f af2c 	bmi.w	800457c <_svfiprintf_r+0x28>
 8004724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004726:	b01d      	add	sp, #116	; 0x74
 8004728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472c:	ab03      	add	r3, sp, #12
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	462a      	mov	r2, r5
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <_svfiprintf_r+0x1f8>)
 8004734:	a904      	add	r1, sp, #16
 8004736:	4638      	mov	r0, r7
 8004738:	f000 f87a 	bl	8004830 <_printf_i>
 800473c:	e7eb      	b.n	8004716 <_svfiprintf_r+0x1c2>
 800473e:	bf00      	nop
 8004740:	08004d90 	.word	0x08004d90
 8004744:	08004d9a 	.word	0x08004d9a
 8004748:	00000000 	.word	0x00000000
 800474c:	0800449d 	.word	0x0800449d
 8004750:	08004d96 	.word	0x08004d96

08004754 <_printf_common>:
 8004754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	4616      	mov	r6, r2
 800475a:	4699      	mov	r9, r3
 800475c:	688a      	ldr	r2, [r1, #8]
 800475e:	690b      	ldr	r3, [r1, #16]
 8004760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004764:	4293      	cmp	r3, r2
 8004766:	bfb8      	it	lt
 8004768:	4613      	movlt	r3, r2
 800476a:	6033      	str	r3, [r6, #0]
 800476c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004770:	4607      	mov	r7, r0
 8004772:	460c      	mov	r4, r1
 8004774:	b10a      	cbz	r2, 800477a <_printf_common+0x26>
 8004776:	3301      	adds	r3, #1
 8004778:	6033      	str	r3, [r6, #0]
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	0699      	lsls	r1, r3, #26
 800477e:	bf42      	ittt	mi
 8004780:	6833      	ldrmi	r3, [r6, #0]
 8004782:	3302      	addmi	r3, #2
 8004784:	6033      	strmi	r3, [r6, #0]
 8004786:	6825      	ldr	r5, [r4, #0]
 8004788:	f015 0506 	ands.w	r5, r5, #6
 800478c:	d106      	bne.n	800479c <_printf_common+0x48>
 800478e:	f104 0a19 	add.w	sl, r4, #25
 8004792:	68e3      	ldr	r3, [r4, #12]
 8004794:	6832      	ldr	r2, [r6, #0]
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	42ab      	cmp	r3, r5
 800479a:	dc26      	bgt.n	80047ea <_printf_common+0x96>
 800479c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047a0:	1e13      	subs	r3, r2, #0
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	bf18      	it	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	0692      	lsls	r2, r2, #26
 80047aa:	d42b      	bmi.n	8004804 <_printf_common+0xb0>
 80047ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b0:	4649      	mov	r1, r9
 80047b2:	4638      	mov	r0, r7
 80047b4:	47c0      	blx	r8
 80047b6:	3001      	adds	r0, #1
 80047b8:	d01e      	beq.n	80047f8 <_printf_common+0xa4>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	68e5      	ldr	r5, [r4, #12]
 80047be:	6832      	ldr	r2, [r6, #0]
 80047c0:	f003 0306 	and.w	r3, r3, #6
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	bf08      	it	eq
 80047c8:	1aad      	subeq	r5, r5, r2
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	6922      	ldr	r2, [r4, #16]
 80047ce:	bf0c      	ite	eq
 80047d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d4:	2500      	movne	r5, #0
 80047d6:	4293      	cmp	r3, r2
 80047d8:	bfc4      	itt	gt
 80047da:	1a9b      	subgt	r3, r3, r2
 80047dc:	18ed      	addgt	r5, r5, r3
 80047de:	2600      	movs	r6, #0
 80047e0:	341a      	adds	r4, #26
 80047e2:	42b5      	cmp	r5, r6
 80047e4:	d11a      	bne.n	800481c <_printf_common+0xc8>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e008      	b.n	80047fc <_printf_common+0xa8>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4652      	mov	r2, sl
 80047ee:	4649      	mov	r1, r9
 80047f0:	4638      	mov	r0, r7
 80047f2:	47c0      	blx	r8
 80047f4:	3001      	adds	r0, #1
 80047f6:	d103      	bne.n	8004800 <_printf_common+0xac>
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	3501      	adds	r5, #1
 8004802:	e7c6      	b.n	8004792 <_printf_common+0x3e>
 8004804:	18e1      	adds	r1, r4, r3
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	2030      	movs	r0, #48	; 0x30
 800480a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800480e:	4422      	add	r2, r4
 8004810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004818:	3302      	adds	r3, #2
 800481a:	e7c7      	b.n	80047ac <_printf_common+0x58>
 800481c:	2301      	movs	r3, #1
 800481e:	4622      	mov	r2, r4
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	47c0      	blx	r8
 8004826:	3001      	adds	r0, #1
 8004828:	d0e6      	beq.n	80047f8 <_printf_common+0xa4>
 800482a:	3601      	adds	r6, #1
 800482c:	e7d9      	b.n	80047e2 <_printf_common+0x8e>
	...

08004830 <_printf_i>:
 8004830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	7e0f      	ldrb	r7, [r1, #24]
 8004836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004838:	2f78      	cmp	r7, #120	; 0x78
 800483a:	4691      	mov	r9, r2
 800483c:	4680      	mov	r8, r0
 800483e:	460c      	mov	r4, r1
 8004840:	469a      	mov	sl, r3
 8004842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004846:	d807      	bhi.n	8004858 <_printf_i+0x28>
 8004848:	2f62      	cmp	r7, #98	; 0x62
 800484a:	d80a      	bhi.n	8004862 <_printf_i+0x32>
 800484c:	2f00      	cmp	r7, #0
 800484e:	f000 80d8 	beq.w	8004a02 <_printf_i+0x1d2>
 8004852:	2f58      	cmp	r7, #88	; 0x58
 8004854:	f000 80a3 	beq.w	800499e <_printf_i+0x16e>
 8004858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800485c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004860:	e03a      	b.n	80048d8 <_printf_i+0xa8>
 8004862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004866:	2b15      	cmp	r3, #21
 8004868:	d8f6      	bhi.n	8004858 <_printf_i+0x28>
 800486a:	a101      	add	r1, pc, #4	; (adr r1, 8004870 <_printf_i+0x40>)
 800486c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004870:	080048c9 	.word	0x080048c9
 8004874:	080048dd 	.word	0x080048dd
 8004878:	08004859 	.word	0x08004859
 800487c:	08004859 	.word	0x08004859
 8004880:	08004859 	.word	0x08004859
 8004884:	08004859 	.word	0x08004859
 8004888:	080048dd 	.word	0x080048dd
 800488c:	08004859 	.word	0x08004859
 8004890:	08004859 	.word	0x08004859
 8004894:	08004859 	.word	0x08004859
 8004898:	08004859 	.word	0x08004859
 800489c:	080049e9 	.word	0x080049e9
 80048a0:	0800490d 	.word	0x0800490d
 80048a4:	080049cb 	.word	0x080049cb
 80048a8:	08004859 	.word	0x08004859
 80048ac:	08004859 	.word	0x08004859
 80048b0:	08004a0b 	.word	0x08004a0b
 80048b4:	08004859 	.word	0x08004859
 80048b8:	0800490d 	.word	0x0800490d
 80048bc:	08004859 	.word	0x08004859
 80048c0:	08004859 	.word	0x08004859
 80048c4:	080049d3 	.word	0x080049d3
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	1d1a      	adds	r2, r3, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d8:	2301      	movs	r3, #1
 80048da:	e0a3      	b.n	8004a24 <_printf_i+0x1f4>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	6829      	ldr	r1, [r5, #0]
 80048e0:	0606      	lsls	r6, r0, #24
 80048e2:	f101 0304 	add.w	r3, r1, #4
 80048e6:	d50a      	bpl.n	80048fe <_printf_i+0xce>
 80048e8:	680e      	ldr	r6, [r1, #0]
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	2e00      	cmp	r6, #0
 80048ee:	da03      	bge.n	80048f8 <_printf_i+0xc8>
 80048f0:	232d      	movs	r3, #45	; 0x2d
 80048f2:	4276      	negs	r6, r6
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f8:	485e      	ldr	r0, [pc, #376]	; (8004a74 <_printf_i+0x244>)
 80048fa:	230a      	movs	r3, #10
 80048fc:	e019      	b.n	8004932 <_printf_i+0x102>
 80048fe:	680e      	ldr	r6, [r1, #0]
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004906:	bf18      	it	ne
 8004908:	b236      	sxthne	r6, r6
 800490a:	e7ef      	b.n	80048ec <_printf_i+0xbc>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	1d19      	adds	r1, r3, #4
 8004912:	6029      	str	r1, [r5, #0]
 8004914:	0601      	lsls	r1, r0, #24
 8004916:	d501      	bpl.n	800491c <_printf_i+0xec>
 8004918:	681e      	ldr	r6, [r3, #0]
 800491a:	e002      	b.n	8004922 <_printf_i+0xf2>
 800491c:	0646      	lsls	r6, r0, #25
 800491e:	d5fb      	bpl.n	8004918 <_printf_i+0xe8>
 8004920:	881e      	ldrh	r6, [r3, #0]
 8004922:	4854      	ldr	r0, [pc, #336]	; (8004a74 <_printf_i+0x244>)
 8004924:	2f6f      	cmp	r7, #111	; 0x6f
 8004926:	bf0c      	ite	eq
 8004928:	2308      	moveq	r3, #8
 800492a:	230a      	movne	r3, #10
 800492c:	2100      	movs	r1, #0
 800492e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004932:	6865      	ldr	r5, [r4, #4]
 8004934:	60a5      	str	r5, [r4, #8]
 8004936:	2d00      	cmp	r5, #0
 8004938:	bfa2      	ittt	ge
 800493a:	6821      	ldrge	r1, [r4, #0]
 800493c:	f021 0104 	bicge.w	r1, r1, #4
 8004940:	6021      	strge	r1, [r4, #0]
 8004942:	b90e      	cbnz	r6, 8004948 <_printf_i+0x118>
 8004944:	2d00      	cmp	r5, #0
 8004946:	d04d      	beq.n	80049e4 <_printf_i+0x1b4>
 8004948:	4615      	mov	r5, r2
 800494a:	fbb6 f1f3 	udiv	r1, r6, r3
 800494e:	fb03 6711 	mls	r7, r3, r1, r6
 8004952:	5dc7      	ldrb	r7, [r0, r7]
 8004954:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004958:	4637      	mov	r7, r6
 800495a:	42bb      	cmp	r3, r7
 800495c:	460e      	mov	r6, r1
 800495e:	d9f4      	bls.n	800494a <_printf_i+0x11a>
 8004960:	2b08      	cmp	r3, #8
 8004962:	d10b      	bne.n	800497c <_printf_i+0x14c>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	07de      	lsls	r6, r3, #31
 8004968:	d508      	bpl.n	800497c <_printf_i+0x14c>
 800496a:	6923      	ldr	r3, [r4, #16]
 800496c:	6861      	ldr	r1, [r4, #4]
 800496e:	4299      	cmp	r1, r3
 8004970:	bfde      	ittt	le
 8004972:	2330      	movle	r3, #48	; 0x30
 8004974:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004978:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800497c:	1b52      	subs	r2, r2, r5
 800497e:	6122      	str	r2, [r4, #16]
 8004980:	f8cd a000 	str.w	sl, [sp]
 8004984:	464b      	mov	r3, r9
 8004986:	aa03      	add	r2, sp, #12
 8004988:	4621      	mov	r1, r4
 800498a:	4640      	mov	r0, r8
 800498c:	f7ff fee2 	bl	8004754 <_printf_common>
 8004990:	3001      	adds	r0, #1
 8004992:	d14c      	bne.n	8004a2e <_printf_i+0x1fe>
 8004994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004998:	b004      	add	sp, #16
 800499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499e:	4835      	ldr	r0, [pc, #212]	; (8004a74 <_printf_i+0x244>)
 80049a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049a4:	6829      	ldr	r1, [r5, #0]
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80049ac:	6029      	str	r1, [r5, #0]
 80049ae:	061d      	lsls	r5, r3, #24
 80049b0:	d514      	bpl.n	80049dc <_printf_i+0x1ac>
 80049b2:	07df      	lsls	r7, r3, #31
 80049b4:	bf44      	itt	mi
 80049b6:	f043 0320 	orrmi.w	r3, r3, #32
 80049ba:	6023      	strmi	r3, [r4, #0]
 80049bc:	b91e      	cbnz	r6, 80049c6 <_printf_i+0x196>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	f023 0320 	bic.w	r3, r3, #32
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	2310      	movs	r3, #16
 80049c8:	e7b0      	b.n	800492c <_printf_i+0xfc>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	f043 0320 	orr.w	r3, r3, #32
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	2378      	movs	r3, #120	; 0x78
 80049d4:	4828      	ldr	r0, [pc, #160]	; (8004a78 <_printf_i+0x248>)
 80049d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049da:	e7e3      	b.n	80049a4 <_printf_i+0x174>
 80049dc:	0659      	lsls	r1, r3, #25
 80049de:	bf48      	it	mi
 80049e0:	b2b6      	uxthmi	r6, r6
 80049e2:	e7e6      	b.n	80049b2 <_printf_i+0x182>
 80049e4:	4615      	mov	r5, r2
 80049e6:	e7bb      	b.n	8004960 <_printf_i+0x130>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	6826      	ldr	r6, [r4, #0]
 80049ec:	6961      	ldr	r1, [r4, #20]
 80049ee:	1d18      	adds	r0, r3, #4
 80049f0:	6028      	str	r0, [r5, #0]
 80049f2:	0635      	lsls	r5, r6, #24
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	d501      	bpl.n	80049fc <_printf_i+0x1cc>
 80049f8:	6019      	str	r1, [r3, #0]
 80049fa:	e002      	b.n	8004a02 <_printf_i+0x1d2>
 80049fc:	0670      	lsls	r0, r6, #25
 80049fe:	d5fb      	bpl.n	80049f8 <_printf_i+0x1c8>
 8004a00:	8019      	strh	r1, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	6123      	str	r3, [r4, #16]
 8004a06:	4615      	mov	r5, r2
 8004a08:	e7ba      	b.n	8004980 <_printf_i+0x150>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	1d1a      	adds	r2, r3, #4
 8004a0e:	602a      	str	r2, [r5, #0]
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	6862      	ldr	r2, [r4, #4]
 8004a14:	2100      	movs	r1, #0
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7fb fc6a 	bl	80002f0 <memchr>
 8004a1c:	b108      	cbz	r0, 8004a22 <_printf_i+0x1f2>
 8004a1e:	1b40      	subs	r0, r0, r5
 8004a20:	6060      	str	r0, [r4, #4]
 8004a22:	6863      	ldr	r3, [r4, #4]
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	2300      	movs	r3, #0
 8004a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2c:	e7a8      	b.n	8004980 <_printf_i+0x150>
 8004a2e:	6923      	ldr	r3, [r4, #16]
 8004a30:	462a      	mov	r2, r5
 8004a32:	4649      	mov	r1, r9
 8004a34:	4640      	mov	r0, r8
 8004a36:	47d0      	blx	sl
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d0ab      	beq.n	8004994 <_printf_i+0x164>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	079b      	lsls	r3, r3, #30
 8004a40:	d413      	bmi.n	8004a6a <_printf_i+0x23a>
 8004a42:	68e0      	ldr	r0, [r4, #12]
 8004a44:	9b03      	ldr	r3, [sp, #12]
 8004a46:	4298      	cmp	r0, r3
 8004a48:	bfb8      	it	lt
 8004a4a:	4618      	movlt	r0, r3
 8004a4c:	e7a4      	b.n	8004998 <_printf_i+0x168>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4632      	mov	r2, r6
 8004a52:	4649      	mov	r1, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	47d0      	blx	sl
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d09b      	beq.n	8004994 <_printf_i+0x164>
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	9903      	ldr	r1, [sp, #12]
 8004a62:	1a5b      	subs	r3, r3, r1
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	dcf2      	bgt.n	8004a4e <_printf_i+0x21e>
 8004a68:	e7eb      	b.n	8004a42 <_printf_i+0x212>
 8004a6a:	2500      	movs	r5, #0
 8004a6c:	f104 0619 	add.w	r6, r4, #25
 8004a70:	e7f5      	b.n	8004a5e <_printf_i+0x22e>
 8004a72:	bf00      	nop
 8004a74:	08004da1 	.word	0x08004da1
 8004a78:	08004db2 	.word	0x08004db2

08004a7c <memcpy>:
 8004a7c:	440a      	add	r2, r1
 8004a7e:	4291      	cmp	r1, r2
 8004a80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a84:	d100      	bne.n	8004a88 <memcpy+0xc>
 8004a86:	4770      	bx	lr
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a92:	4291      	cmp	r1, r2
 8004a94:	d1f9      	bne.n	8004a8a <memcpy+0xe>
 8004a96:	bd10      	pop	{r4, pc}

08004a98 <memmove>:
 8004a98:	4288      	cmp	r0, r1
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	eb01 0402 	add.w	r4, r1, r2
 8004aa0:	d902      	bls.n	8004aa8 <memmove+0x10>
 8004aa2:	4284      	cmp	r4, r0
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	d807      	bhi.n	8004ab8 <memmove+0x20>
 8004aa8:	1e43      	subs	r3, r0, #1
 8004aaa:	42a1      	cmp	r1, r4
 8004aac:	d008      	beq.n	8004ac0 <memmove+0x28>
 8004aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ab6:	e7f8      	b.n	8004aaa <memmove+0x12>
 8004ab8:	4402      	add	r2, r0
 8004aba:	4601      	mov	r1, r0
 8004abc:	428a      	cmp	r2, r1
 8004abe:	d100      	bne.n	8004ac2 <memmove+0x2a>
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aca:	e7f7      	b.n	8004abc <memmove+0x24>

08004acc <_free_r>:
 8004acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	d044      	beq.n	8004b5c <_free_r+0x90>
 8004ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad6:	9001      	str	r0, [sp, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f1a1 0404 	sub.w	r4, r1, #4
 8004ade:	bfb8      	it	lt
 8004ae0:	18e4      	addlt	r4, r4, r3
 8004ae2:	f000 f913 	bl	8004d0c <__malloc_lock>
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <_free_r+0x94>)
 8004ae8:	9801      	ldr	r0, [sp, #4]
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	b933      	cbnz	r3, 8004afc <_free_r+0x30>
 8004aee:	6063      	str	r3, [r4, #4]
 8004af0:	6014      	str	r4, [r2, #0]
 8004af2:	b003      	add	sp, #12
 8004af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af8:	f000 b90e 	b.w	8004d18 <__malloc_unlock>
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	d908      	bls.n	8004b12 <_free_r+0x46>
 8004b00:	6825      	ldr	r5, [r4, #0]
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	428b      	cmp	r3, r1
 8004b06:	bf01      	itttt	eq
 8004b08:	6819      	ldreq	r1, [r3, #0]
 8004b0a:	685b      	ldreq	r3, [r3, #4]
 8004b0c:	1949      	addeq	r1, r1, r5
 8004b0e:	6021      	streq	r1, [r4, #0]
 8004b10:	e7ed      	b.n	8004aee <_free_r+0x22>
 8004b12:	461a      	mov	r2, r3
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	b10b      	cbz	r3, 8004b1c <_free_r+0x50>
 8004b18:	42a3      	cmp	r3, r4
 8004b1a:	d9fa      	bls.n	8004b12 <_free_r+0x46>
 8004b1c:	6811      	ldr	r1, [r2, #0]
 8004b1e:	1855      	adds	r5, r2, r1
 8004b20:	42a5      	cmp	r5, r4
 8004b22:	d10b      	bne.n	8004b3c <_free_r+0x70>
 8004b24:	6824      	ldr	r4, [r4, #0]
 8004b26:	4421      	add	r1, r4
 8004b28:	1854      	adds	r4, r2, r1
 8004b2a:	42a3      	cmp	r3, r4
 8004b2c:	6011      	str	r1, [r2, #0]
 8004b2e:	d1e0      	bne.n	8004af2 <_free_r+0x26>
 8004b30:	681c      	ldr	r4, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	6053      	str	r3, [r2, #4]
 8004b36:	4421      	add	r1, r4
 8004b38:	6011      	str	r1, [r2, #0]
 8004b3a:	e7da      	b.n	8004af2 <_free_r+0x26>
 8004b3c:	d902      	bls.n	8004b44 <_free_r+0x78>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	6003      	str	r3, [r0, #0]
 8004b42:	e7d6      	b.n	8004af2 <_free_r+0x26>
 8004b44:	6825      	ldr	r5, [r4, #0]
 8004b46:	1961      	adds	r1, r4, r5
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	bf04      	itt	eq
 8004b4c:	6819      	ldreq	r1, [r3, #0]
 8004b4e:	685b      	ldreq	r3, [r3, #4]
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	bf04      	itt	eq
 8004b54:	1949      	addeq	r1, r1, r5
 8004b56:	6021      	streq	r1, [r4, #0]
 8004b58:	6054      	str	r4, [r2, #4]
 8004b5a:	e7ca      	b.n	8004af2 <_free_r+0x26>
 8004b5c:	b003      	add	sp, #12
 8004b5e:	bd30      	pop	{r4, r5, pc}
 8004b60:	24000100 	.word	0x24000100

08004b64 <sbrk_aligned>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	4e0e      	ldr	r6, [pc, #56]	; (8004ba0 <sbrk_aligned+0x3c>)
 8004b68:	460c      	mov	r4, r1
 8004b6a:	6831      	ldr	r1, [r6, #0]
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	b911      	cbnz	r1, 8004b76 <sbrk_aligned+0x12>
 8004b70:	f000 f8bc 	bl	8004cec <_sbrk_r>
 8004b74:	6030      	str	r0, [r6, #0]
 8004b76:	4621      	mov	r1, r4
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 f8b7 	bl	8004cec <_sbrk_r>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	d00a      	beq.n	8004b98 <sbrk_aligned+0x34>
 8004b82:	1cc4      	adds	r4, r0, #3
 8004b84:	f024 0403 	bic.w	r4, r4, #3
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d007      	beq.n	8004b9c <sbrk_aligned+0x38>
 8004b8c:	1a21      	subs	r1, r4, r0
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 f8ac 	bl	8004cec <_sbrk_r>
 8004b94:	3001      	adds	r0, #1
 8004b96:	d101      	bne.n	8004b9c <sbrk_aligned+0x38>
 8004b98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	24000104 	.word	0x24000104

08004ba4 <_malloc_r>:
 8004ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba8:	1ccd      	adds	r5, r1, #3
 8004baa:	f025 0503 	bic.w	r5, r5, #3
 8004bae:	3508      	adds	r5, #8
 8004bb0:	2d0c      	cmp	r5, #12
 8004bb2:	bf38      	it	cc
 8004bb4:	250c      	movcc	r5, #12
 8004bb6:	2d00      	cmp	r5, #0
 8004bb8:	4607      	mov	r7, r0
 8004bba:	db01      	blt.n	8004bc0 <_malloc_r+0x1c>
 8004bbc:	42a9      	cmp	r1, r5
 8004bbe:	d905      	bls.n	8004bcc <_malloc_r+0x28>
 8004bc0:	230c      	movs	r3, #12
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bcc:	4e2e      	ldr	r6, [pc, #184]	; (8004c88 <_malloc_r+0xe4>)
 8004bce:	f000 f89d 	bl	8004d0c <__malloc_lock>
 8004bd2:	6833      	ldr	r3, [r6, #0]
 8004bd4:	461c      	mov	r4, r3
 8004bd6:	bb34      	cbnz	r4, 8004c26 <_malloc_r+0x82>
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f7ff ffc2 	bl	8004b64 <sbrk_aligned>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	4604      	mov	r4, r0
 8004be4:	d14d      	bne.n	8004c82 <_malloc_r+0xde>
 8004be6:	6834      	ldr	r4, [r6, #0]
 8004be8:	4626      	mov	r6, r4
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d140      	bne.n	8004c70 <_malloc_r+0xcc>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	eb04 0803 	add.w	r8, r4, r3
 8004bf8:	f000 f878 	bl	8004cec <_sbrk_r>
 8004bfc:	4580      	cmp	r8, r0
 8004bfe:	d13a      	bne.n	8004c76 <_malloc_r+0xd2>
 8004c00:	6821      	ldr	r1, [r4, #0]
 8004c02:	3503      	adds	r5, #3
 8004c04:	1a6d      	subs	r5, r5, r1
 8004c06:	f025 0503 	bic.w	r5, r5, #3
 8004c0a:	3508      	adds	r5, #8
 8004c0c:	2d0c      	cmp	r5, #12
 8004c0e:	bf38      	it	cc
 8004c10:	250c      	movcc	r5, #12
 8004c12:	4629      	mov	r1, r5
 8004c14:	4638      	mov	r0, r7
 8004c16:	f7ff ffa5 	bl	8004b64 <sbrk_aligned>
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d02b      	beq.n	8004c76 <_malloc_r+0xd2>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	442b      	add	r3, r5
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	e00e      	b.n	8004c44 <_malloc_r+0xa0>
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	1b52      	subs	r2, r2, r5
 8004c2a:	d41e      	bmi.n	8004c6a <_malloc_r+0xc6>
 8004c2c:	2a0b      	cmp	r2, #11
 8004c2e:	d916      	bls.n	8004c5e <_malloc_r+0xba>
 8004c30:	1961      	adds	r1, r4, r5
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	6025      	str	r5, [r4, #0]
 8004c36:	bf18      	it	ne
 8004c38:	6059      	strne	r1, [r3, #4]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	bf08      	it	eq
 8004c3e:	6031      	streq	r1, [r6, #0]
 8004c40:	5162      	str	r2, [r4, r5]
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	4638      	mov	r0, r7
 8004c46:	f104 060b 	add.w	r6, r4, #11
 8004c4a:	f000 f865 	bl	8004d18 <__malloc_unlock>
 8004c4e:	f026 0607 	bic.w	r6, r6, #7
 8004c52:	1d23      	adds	r3, r4, #4
 8004c54:	1af2      	subs	r2, r6, r3
 8004c56:	d0b6      	beq.n	8004bc6 <_malloc_r+0x22>
 8004c58:	1b9b      	subs	r3, r3, r6
 8004c5a:	50a3      	str	r3, [r4, r2]
 8004c5c:	e7b3      	b.n	8004bc6 <_malloc_r+0x22>
 8004c5e:	6862      	ldr	r2, [r4, #4]
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	bf0c      	ite	eq
 8004c64:	6032      	streq	r2, [r6, #0]
 8004c66:	605a      	strne	r2, [r3, #4]
 8004c68:	e7ec      	b.n	8004c44 <_malloc_r+0xa0>
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	6864      	ldr	r4, [r4, #4]
 8004c6e:	e7b2      	b.n	8004bd6 <_malloc_r+0x32>
 8004c70:	4634      	mov	r4, r6
 8004c72:	6876      	ldr	r6, [r6, #4]
 8004c74:	e7b9      	b.n	8004bea <_malloc_r+0x46>
 8004c76:	230c      	movs	r3, #12
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f000 f84c 	bl	8004d18 <__malloc_unlock>
 8004c80:	e7a1      	b.n	8004bc6 <_malloc_r+0x22>
 8004c82:	6025      	str	r5, [r4, #0]
 8004c84:	e7de      	b.n	8004c44 <_malloc_r+0xa0>
 8004c86:	bf00      	nop
 8004c88:	24000100 	.word	0x24000100

08004c8c <_realloc_r>:
 8004c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c90:	4680      	mov	r8, r0
 8004c92:	4614      	mov	r4, r2
 8004c94:	460e      	mov	r6, r1
 8004c96:	b921      	cbnz	r1, 8004ca2 <_realloc_r+0x16>
 8004c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	f7ff bf81 	b.w	8004ba4 <_malloc_r>
 8004ca2:	b92a      	cbnz	r2, 8004cb0 <_realloc_r+0x24>
 8004ca4:	f7ff ff12 	bl	8004acc <_free_r>
 8004ca8:	4625      	mov	r5, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb0:	f000 f838 	bl	8004d24 <_malloc_usable_size_r>
 8004cb4:	4284      	cmp	r4, r0
 8004cb6:	4607      	mov	r7, r0
 8004cb8:	d802      	bhi.n	8004cc0 <_realloc_r+0x34>
 8004cba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cbe:	d812      	bhi.n	8004ce6 <_realloc_r+0x5a>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f7ff ff6e 	bl	8004ba4 <_malloc_r>
 8004cc8:	4605      	mov	r5, r0
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d0ed      	beq.n	8004caa <_realloc_r+0x1e>
 8004cce:	42bc      	cmp	r4, r7
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	bf28      	it	cs
 8004cd6:	463a      	movcs	r2, r7
 8004cd8:	f7ff fed0 	bl	8004a7c <memcpy>
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4640      	mov	r0, r8
 8004ce0:	f7ff fef4 	bl	8004acc <_free_r>
 8004ce4:	e7e1      	b.n	8004caa <_realloc_r+0x1e>
 8004ce6:	4635      	mov	r5, r6
 8004ce8:	e7df      	b.n	8004caa <_realloc_r+0x1e>
	...

08004cec <_sbrk_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4d06      	ldr	r5, [pc, #24]	; (8004d08 <_sbrk_r+0x1c>)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	602b      	str	r3, [r5, #0]
 8004cf8:	f7fb fe5e 	bl	80009b8 <_sbrk>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_sbrk_r+0x1a>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_sbrk_r+0x1a>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	24000108 	.word	0x24000108

08004d0c <__malloc_lock>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__malloc_lock+0x8>)
 8004d0e:	f000 b811 	b.w	8004d34 <__retarget_lock_acquire_recursive>
 8004d12:	bf00      	nop
 8004d14:	2400010c 	.word	0x2400010c

08004d18 <__malloc_unlock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__malloc_unlock+0x8>)
 8004d1a:	f000 b80c 	b.w	8004d36 <__retarget_lock_release_recursive>
 8004d1e:	bf00      	nop
 8004d20:	2400010c 	.word	0x2400010c

08004d24 <_malloc_usable_size_r>:
 8004d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d28:	1f18      	subs	r0, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bfbc      	itt	lt
 8004d2e:	580b      	ldrlt	r3, [r1, r0]
 8004d30:	18c0      	addlt	r0, r0, r3
 8004d32:	4770      	bx	lr

08004d34 <__retarget_lock_acquire_recursive>:
 8004d34:	4770      	bx	lr

08004d36 <__retarget_lock_release_recursive>:
 8004d36:	4770      	bx	lr

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
